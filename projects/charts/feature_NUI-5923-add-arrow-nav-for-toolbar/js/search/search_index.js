var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AreaAccessors.html",[0,0.082,1,3.57]],["body/classes/AreaAccessors.html",[0,0.1,1,5.519,2,1.507,3,0.243,4,0.228,5,0.228,6,7.066,7,2.391,8,1.696,9,6.067,10,0.25,11,0.512,12,1.145,13,1.268,14,1.507,15,4.342,16,4.778,17,1.188,18,7.87,19,1.466,20,0.005,21,0.701,22,0.9,23,3.841,24,0.299,25,6.694,26,6.192,27,6.694,28,0.308,29,4.125,30,4.47,31,3.245,32,2.893,33,2.495,34,1.444,35,2.508,36,2.508,37,2.418,38,1.659,39,0.357,40,0.004,41,0.964,42,1.889,43,6.108,44,5.519,45,6.108,46,6.108,47,1.915,48,6.108,49,5.519,50,6.108,51,6.108,52,1.968,53,1.889,54,2.236,55,1.614,56,2.893,57,2.195,58,7.271,59,6.065,60,4.161,61,6.108,62,4.161,63,6.108,64,4.806,65,4.806,66,4.806,67,4.806,68,4.806,69,4.806,70,4.806,71,4.806,72,2.832,73,3.245,74,3.245,75,1.127,76,3.622,77,3.622,78,0.003,79,0.004,80,0.003]],["title/classes/AreaGridConfig.html",[0,0.082,81,4.561]],["body/classes/AreaGridConfig.html",[0,0.095,2,1.425,3,0.229,4,0.215,5,0.215,10,0.237,11,0.494,14,2.051,17,1.392,20,0.005,24,0.366,28,0.229,39,0.229,41,0.846,75,1.277,78,0.003,79,0.004,80,0.003,81,6.804,82,7.594,83,2.136,84,3.654,85,0.951,86,5.894,87,6.383,88,6.283,89,1.873,90,1.073,91,3.98,92,5.325,93,6.283,94,1.832,95,2.835,96,3.632,97,2.423,98,5.584,99,5.584,100,3.793,101,3.625,102,2.035,103,3.474,104,3.707,105,3.707,106,1.979,107,4.846,108,3.997,109,2.19,110,0.928,111,2.974,112,2.045,113,5.765,114,3.444,115,3.449,116,2.199,117,4.131,118,4.546,119,1.721,120,5.449,121,3.936,122,4.107,123,4.546,124,2.796,125,4.546,126,1.75,127,4.546,128,2.573,129,4.107,130,5.064,131,2.564,132,5.537,133,4.306,134,3.418,135,4.422,136,0.546,137,3.936,138,4.306,139,2.625,140,3.535,141,4.306,142,2.093,143,4.306,144,4.306,145,1.18,146,4.306,147,3.787,148,2.015,149,2.679,150,5.247,151,2.573,152,5.857,153,4.846,154,1.924,155,2.925]],["title/classes/AxisConfig.html",[0,0.082,113,3.292]],["body/classes/AxisConfig.html",[0,0.098,2,1.467,3,0.236,4,0.222,5,0.222,8,1.667,10,0.243,11,0.504,17,1.349,19,1.428,20,0.005,21,0.682,22,0.876,24,0.368,28,0.303,39,0.236,55,1.571,78,0.003,79,0.004,80,0.003,84,3.762,85,0.979,94,1.847,109,2.119,110,0.889,113,5.003,119,1.841,120,5.525,126,1.783,134,3.715,142,2.484,145,1.923,156,9.925,157,5.059,158,4.595,159,4.719,160,3.754,161,4.719,162,4.719,163,2.566,164,1.713,165,4.719,166,6.029,167,5.402,168,1.28,169,5.402,170,4.595,171,4.056,172,4.161,173,8.545,174,4.988,175,6.029,176,4.988,177,6.029,178,6.029,179,1.559,180,6.029,181,4.988,182,2.649,183,0.781,184,2.943,185,3.16,186,3.16,187,1.062,188,4.907,189,6.029,190,6.029,191,6.029,192,6.029,193,6.029,194,6.029,195,7.738,196,1.335,197,7.738,198,1.353,199,6.029,200,6.029,201,3.898]],["title/classes/BarAccessors.html",[0,0.082,202,3.176]],["body/classes/BarAccessors.html",[0,0.092,2,1.376,3,0.221,4,0.208,5,0.208,7,2.184,8,1.599,10,0.386,11,0.483,12,1.254,13,1.412,14,1.376,15,3.965,16,4.576,17,1.254,19,1.339,20,0.005,21,0.64,22,0.822,23,3.623,24,0.334,28,0.325,29,3.89,30,4.216,31,2.964,32,2.642,33,2.419,34,1.362,38,1.515,39,0.325,40,0.004,41,0.98,52,1.856,53,1.782,54,2.042,55,1.934,56,2.642,57,1.235,72,2.587,73,2.964,74,2.964,75,1.309,76,3.308,77,3.308,78,0.003,79,0.004,80,0.003,110,0.949,117,3.079,149,2.587,164,1.252,168,1.137,196,2.222,202,4.631,203,7.278,204,5.189,205,5.568,206,6.65,207,5.489,208,5.066,209,4.788,210,4.706,211,4.679,212,4.679,213,2.517,214,2.824,215,6.431,216,3.137,217,3.137,218,2.222,219,4.679,220,3.041,221,4.679,222,2.748,223,6.141,224,4.679,225,4.679,226,3.437,227,6.141,228,4.679,229,2.525,230,6.141,231,2.017,232,6.141,233,6.141,234,4.679,235,4.679,236,6.141,237,4.679,238,1.775,239,4.679,240,4.679,241,4.679,242,4.679,243,4.679,244,1.603,245,1.723,246,4.988,247,4.679,248,4.679,249,3.212,250,4.679,251,1.626,252,4.679,253,4.679,254,2.184]],["title/classes/BarGridConfig.html",[0,0.082,255,4.561]],["body/classes/BarGridConfig.html",[0,0.093,2,1.392,3,0.224,4,0.21,5,0.21,10,0.231,11,0.487,14,2.028,17,1.387,20,0.005,24,0.364,28,0.224,39,0.224,41,0.833,75,1.266,78,0.003,79,0.004,80,0.003,83,2.113,84,3.57,85,0.929,86,5.806,87,6.196,88,6.189,90,1.057,91,3.921,92,5.245,93,6.189,94,1.827,95,2.792,96,3.6,97,2.401,98,5.5,99,5.5,100,3.736,101,3.571,102,2.004,103,3.422,104,3.651,105,3.651,106,1.949,107,4.735,108,3.961,109,2.182,110,0.924,111,2.948,112,2.03,113,5.714,114,3.413,115,3.299,116,2.18,117,4.114,118,4.442,119,1.873,120,5.929,121,3.846,122,4.013,123,4.442,124,2.732,125,4.442,126,2.037,127,4.442,128,2.514,129,4.013,130,5.02,131,2.541,132,5.503,133,4.208,134,3.397,135,4.395,136,0.533,137,3.846,138,4.208,139,2.565,140,3.454,141,4.208,142,2.435,143,4.208,144,4.208,145,1.153,146,4.208,147,3.7,148,1.969,149,2.618,150,5.127,151,3.287,155,2.858,255,6.702,256,6.189,257,1.82,258,3.422,259,3.287,260,4.735,261,4.442,262,6.189,263,5.127,264,5.127,265,5.127,266,5.723]],["title/classes/BarHighlightStrategy.html",[0,0.082,267,3.176]],["body/classes/BarHighlightStrategy.html",[0,0.073,2,1.1,3,0.177,4,0.166,5,0.166,8,1.373,10,0.372,12,0.928,13,1.281,14,1.1,17,1.16,19,2.001,20,0.005,21,0.956,22,1.228,24,0.349,28,0.379,38,1.211,39,0.25,54,1.632,55,1.661,57,1.846,75,0.647,78,0.002,79,0.003,80,0.002,85,0.734,89,1.115,94,1.643,106,1.178,110,0.893,119,0.923,130,2.567,131,1.3,136,0.688,151,1.986,164,1,168,1.237,179,1.615,183,0.956,187,0.796,196,1.941,213,2.483,214,2.257,216,1.911,229,1.942,231,2.605,238,1.419,245,1.377,251,1.832,259,1.986,267,3.976,268,7.254,269,7.254,270,5.669,271,3.508,272,4.317,273,1.731,274,4.12,275,5.709,276,4.12,277,4.772,278,4.049,279,7.855,280,7.38,281,7.18,282,4.52,283,4.301,284,1.615,285,1.153,286,5.709,287,2,288,4.946,289,1.976,290,5.709,291,5.709,292,5.709,293,5.709,294,2.056,295,3.426,296,3.846,297,5.645,298,4.544,299,4.185,300,4.185,301,2.518,302,4.52,303,2.24,304,5.709,305,4.52,306,3.846,307,3.11,308,4.52,309,2.728,310,4.595,311,4.52,312,3.038,313,0.887,314,1.228,315,4.049,316,4.049,317,3.508,318,3.508,319,2.922,320,2.922,321,1.338,322,6.631,323,6.106,324,1.986,325,4.049,326,4.317,327,2.206,328,1.377,329,3.038,330,4.52,331,2.311,332,2.257,333,2.518,334,1.319,335,5.272,336,2.338,337,1.911,338,4.049,339,3.038,340,4.049,341,3.739,342,4.049,343,2.82,344,4.049,345,4.049,346,4.049,347,3.323,348,4.049,349,4.049,350,6.612,351,4.049,352,4.049,353,4.049,354,4.049,355,4.049,356,4.049,357,4.049,358,6.612,359,7.57,360,7.254,361,4.049,362,4.049,363,4.049,364,4.049,365,4.049,366,4.049,367,4.049,368,1.377,369,3.739,370,5.709,371,6.991,372,5.709,373,8.014,374,4.52,375,4.52,376,4.52,377,4.049,378,4.52,379,2.644,380,3.508,381,4.52,382,4.52,383,4.52,384,1.162,385,4.049,386,4.52,387,4.52,388,8.014,389,4.52,390,4.52,391,4.52,392,4.52,393,4.52,394,2.496,395,4.282,396,2.922,397,4.52,398,3.739,399,1.659,400,3.323,401,4.049,402,4.049]],["title/classes/BarHorizontalGridConfig.html",[0,0.082,403,4.561]],["body/classes/BarHorizontalGridConfig.html",[0,0.092,2,1.379,3,0.222,4,0.208,5,0.208,10,0.229,11,0.484,14,2.018,17,1.385,20,0.005,24,0.363,28,0.222,39,0.222,41,0.828,75,1.261,78,0.003,79,0.004,80,0.003,83,2.103,84,3.535,85,0.92,86,5.768,87,6.181,88,6.149,90,1.05,91,3.895,92,5.211,93,6.149,94,1.825,95,2.774,96,3.586,97,2.392,98,5.464,99,5.464,100,3.712,101,3.548,102,1.991,103,3.4,104,3.628,105,3.628,106,1.937,107,4.688,108,3.946,109,2.179,110,0.922,111,2.936,112,2.024,113,5.692,114,3.4,115,3.286,116,2.172,117,4.107,118,4.398,119,1.867,120,5.692,121,3.808,122,3.973,123,4.398,124,2.705,125,4.398,126,2.162,127,4.398,128,2.489,129,3.973,130,5,131,2.532,132,5.488,133,4.166,134,3.388,135,4.383,136,0.528,137,3.808,138,4.166,139,2.54,140,3.42,141,4.166,142,2.519,143,4.166,144,4.166,145,1.142,146,4.166,147,3.663,148,1.95,149,2.592,151,3.265,155,2.83,256,6.149,257,1.808,258,3.4,259,3.265,260,4.688,261,4.398,262,6.149,263,5.076,264,5.076,265,5.076,403,6.658,404,4.113,405,5.666,406,5.666,407,4.688,408,5.076]],["title/classes/BarSeriesHighlightStrategy.html",[0,0.082,409,4.561]],["body/classes/BarSeriesHighlightStrategy.html",[0,0.084,2,1.258,3,0.203,4,0.19,5,0.19,8,1.507,10,0.209,12,0.65,13,1.378,14,1.258,17,1.217,19,2.1,20,0.005,21,1.003,22,1.288,24,0.355,28,0.377,38,1.386,39,0.203,54,1.867,55,1.348,57,1.527,75,0.741,78,0.003,79,0.004,80,0.003,85,0.84,89,1.276,94,1.697,106,1.348,110,0.898,119,1.428,136,0.652,151,2.272,164,1.145,168,1.217,179,1.711,183,1.026,187,0.911,196,1.879,213,2.575,214,2.583,216,2.186,229,2.131,231,2.539,259,2.272,268,7.562,269,7.562,270,5.909,271,4.014,272,4.635,273,1.9,274,4.521,275,6.265,276,4.521,277,5.123,278,4.633,279,8.188,283,4.461,284,1.773,285,1.266,286,6.265,287,2.195,288,5.428,289,1.915,290,6.265,291,6.265,292,6.265,293,6.265,294,2.158,296,4.22,297,5.813,298,4.768,299,4.363,300,4.363,301,2.612,303,2.372,304,6.265,306,4.22,307,3.413,309,3.121,310,4.791,315,4.633,316,4.633,317,4.014,318,4.014,321,1.53,322,7.023,324,2.272,326,4.635,327,2.524,328,1.576,331,2.645,334,1.448,335,5.786,336,1.508,337,2.186,338,4.633,339,3.475,340,4.633,341,4.278,342,4.633,343,3.226,344,4.633,345,4.633,346,4.633,347,3.802,348,4.633,349,4.633,350,7.099,351,4.633,352,4.633,353,4.633,354,4.633,355,4.633,356,4.633,357,4.633,358,6.265,359,7.099,360,6.556,361,4.633,362,4.633,363,4.633,364,4.633,365,4.633,366,4.633,367,4.633,368,1.576,369,4.278,370,6.265,371,5.786,372,4.633,398,4.278,399,1.898,400,5.142,401,4.633,402,4.633,409,6.265,410,4.633,411,2.195,412,5.171,413,5.171,414,5.171,415,5.171]],["title/classes/BarStatusGridConfig.html",[0,0.082,416,4.561]],["body/classes/BarStatusGridConfig.html",[0,0.092,2,1.379,3,0.222,4,0.208,5,0.208,10,0.229,11,0.484,14,1.379,17,1.369,19,1.342,20,0.005,21,0.641,22,0.823,24,0.376,28,0.222,39,0.222,41,0.828,75,1.261,78,0.003,79,0.004,80,0.003,83,2.103,84,3.535,87,6.181,90,0.8,94,1.825,95,2.774,96,3.586,97,2.392,98,5.464,99,5.464,100,3.712,101,3.548,102,1.991,103,3.4,104,3.628,105,3.628,106,1.937,108,3.946,109,2.179,110,0.922,111,2.936,112,2.024,113,5.692,114,3.4,115,3.286,116,2.172,117,4.107,118,4.398,119,1.867,120,5.362,121,3.808,122,3.973,123,4.398,124,2.705,125,4.398,126,2.029,127,4.398,128,3.265,129,3.973,130,5,131,2.532,132,5.488,133,4.166,134,3.388,135,4.383,136,0.528,137,3.808,138,4.166,139,2.54,140,3.42,141,4.166,142,2.703,143,4.166,144,4.166,145,1.498,146,4.166,147,3.663,148,2.558,149,2.592,168,0.778,256,6.149,260,4.688,261,4.398,307,3.628,407,4.688,408,5.076,416,6.658,417,2.479,418,4.485,419,5.666,420,6.658,421,5.076,422,7.432,423,5.666,424,5.666,425,5.666,426,5.666,427,5.666,428,5.666,429,5.076,430,5.666,431,5.666,432,3.42]],["title/classes/BarTooltipsPlugin.html",[0,0.082,433,4.561]],["body/classes/BarTooltipsPlugin.html",[0,0.093,2,1.395,3,0.225,4,0.211,5,0.211,10,0.232,11,0.487,12,0.942,14,1.395,17,1.416,19,1.774,20,0.005,21,0.848,22,1.088,24,0.369,28,0.293,39,0.225,41,0.834,78,0.003,79,0.004,80,0.003,90,1.329,94,1.882,109,1.932,110,0.824,111,1.913,112,1.658,114,2.893,117,4.27,148,1.973,149,2.623,179,2.014,183,1.295,251,1.649,273,2.035,287,1.8,295,3.083,301,2.093,307,2.799,418,4.52,433,6.711,434,7.49,435,5.506,436,3.083,437,6.877,438,5.813,439,2.698,440,5.813,441,4.254,442,5.813,443,3.041,444,3.18,445,6.197,446,2.453,447,3.044,448,6.865,449,5.734,450,5.137,451,4.216,452,4.021,453,2.826,454,5.137,455,1.942,456,3.707,457,5.137,458,5.813,459,1.848,460,4.216,461,5.137,462,5.137,463,4.216,464,1.848,465,5.137,466,2.924,467,3.577,468,5.137,469,5.137,470,4.45,471,5.137,472,5.137,473,5.137,474,5.137,475,5.137,476,3.577,477,3.577,478,3.577,479,3.577,480,5.734,481,1.697]],["title/components/BasicLegendTileComponent.html",[482,2.237,483,2.812]],["body/components/BasicLegendTileComponent.html",[0,0.113,3,0.273,4,0.256,5,0.256,20,0.005,21,1.032,28,0.273,39,0.273,78,0.003,79,0.004,80,0.003,90,1.374,482,3.72,483,5.242,484,4.81,485,5.763,486,7.586,487,4.609,488,6.24,489,3.956,490,7.006,491,7.006,492,5.721,493,3.728,494,4.398,495,5.506,496,5.475,497,7.586,498,5.11,499,7.586,500,5.406,501,3.651,502,5.391,503,4.204,504,4.204,505,3.745,506,4.204,507,3.847,508,3.562,509,4.204,510,3.847,511,4.204,512,3.651,513,4.204,514,3.847,515,4.204,516,3.562,517,4.204,518,3.847,519,4.204,520,3.847,521,4.204,522,3.847,523,4.204,524,3.956,525,3.745,526,4.074,527,4.204]],["title/classes/Chart.html",[0,0.082,90,0.719]],["body/classes/Chart.html",[0,0.091,2,0.924,3,0.149,4,0.14,5,0.14,8,1.211,10,0.153,11,0.366,12,0.707,14,0.924,17,1.362,19,2.122,20,0.005,21,1.014,22,1.374,24,0.351,28,0.374,34,0.697,39,0.149,40,0.003,54,1.372,55,2.41,75,0.544,78,0.002,79,0.003,80,0.002,83,1.874,90,1.044,94,1.868,97,1.818,109,0.83,110,0.354,112,1.984,128,2.469,130,2.158,131,1.092,139,2.519,140,2.293,145,0.766,179,1.938,183,1.181,187,0.669,196,1.892,226,1.576,229,2.038,231,2.385,244,1.593,273,1.527,301,1.571,312,2.553,313,0.745,314,2.009,321,1.124,324,1.669,336,1.951,337,1.606,343,2.37,384,1.719,443,2.286,444,2.391,446,1.465,447,2.391,464,1.65,466,2.355,481,2.445,493,1.372,528,3.799,529,2.114,530,2.674,531,6.69,532,5.035,533,5.62,534,3.421,535,2.957,536,2.957,537,2.957,538,2.957,539,5.62,540,5.035,541,5.62,542,5.035,543,3.799,544,2.593,545,3.799,546,2.995,547,3.799,548,3.799,549,3.799,550,1.818,551,3.799,552,2.248,553,2.772,554,3.799,555,5.62,556,3.799,557,3.454,558,2.248,559,3.799,560,3.799,561,3.799,562,3.647,563,3.799,564,3.799,565,3.799,566,3.305,567,5.62,568,3.799,569,7.069,570,3.799,571,5.035,572,3.799,573,5.62,574,3.799,575,5.62,576,2.248,577,2.798,578,3.799,579,5.035,580,2.209,581,2.445,582,3.799,583,3.143,584,3.799,585,0.95,586,2.293,587,5.993,588,2.043,589,2.043,590,2.949,591,2.793,592,2.293,593,3.799,594,1.493,595,1.943,596,1.192,597,2.743,598,2.043,599,3.799,600,2.676,601,1.032,602,1.35,603,1.991,604,1.52,605,6.69,606,3.799,607,3.404,608,5.035,609,3.799,610,3.799,611,3.799,612,1.814,613,3.799,614,3.799,615,3.799,616,3.799,617,5.62,618,6.69,619,5.62,620,3.143,621,3.799,622,3.799,623,5.62,624,5.62,625,4.65,626,3.799,627,3.799,628,3.799,629,3.799,630,3.404,631,3.799,632,1.637,633,3.799,634,3.799,635,5.993,636,3.799,637,3.799,638,2.664,639,0.9,640,4.362,641,0.786,642,3.799,643,3.799,644,3.799,645,3.799,646,3.799,647,1.092,648,3.143,649,2.456,650,3.799,651,1.395,652,1.814,653,3.143,654,3.799,655,3.799,656,3.799,657,3.799,658,3.799,659,3.799,660,3.404,661,3.799,662,3.799,663,3.799,664,3.799,665,3.799,666,3.404,667,3.799,668,3.799,669,3.799,670,3.799,671,3.799,672,3.799,673,3.799,674,2.456,675,3.404,676,2.553,677,3.404,678,1.991,679,1.175,680,3.799,681,3.404,682,3.799,683,3.799,684,3.799,685,3.404,686,3.799,687,3.341,688,3.799,689,3.799,690,3.799,691,3.799,692,3.799,693,3.799,694,3.799,695,3.799,696,3.799,697,3.799,698,3.799,699,3.799,700,3.799,701,6.69,702,3.799,703,3.799,704,3.799,705,3.799,706,3.799,707,3.799,708,3.799,709,3.799,710,3.799,711,3.799,712,3.799,713,3.799,714,3.143,715,3.799,716,3.404,717,2.1,718,1.229,719,1.124,720,3.799,721,3.799,722,3.799,723,1.943,724,5.62,725,3.404,726,3.799,727,5.62,728,3.404,729,3.799,730,3.799,731,3.799,732,3.799,733,1.981,734,2.03,735,4.65,736,4.362,737,4.362,738,3.799,739,3.799,740,4.132,741,3.799,742,3.799,743,3.799,744,3.799]],["title/classes/ChartAssistRenderStateData.html",[0,0.082,745,3.422]],["body/classes/ChartAssistRenderStateData.html",[0,0.134,2,1.369,3,0.22,4,0.207,5,0.207,8,1.594,10,0.227,11,0.481,13,1.387,14,1.369,17,1.285,19,1.333,20,0.005,21,0.935,22,0.818,24,0.333,28,0.29,34,1.032,39,0.367,40,0.005,75,0.806,78,0.003,79,0.004,80,0.003,85,0.914,90,1.368,94,1.78,109,1.616,110,0.872,126,1.705,136,0.934,163,2.812,164,1.638,168,0.772,179,1.491,183,0.729,187,0.991,196,1.246,198,1.97,238,2.863,283,3.532,284,1.876,287,2.594,333,2.068,334,1.818,394,4.086,411,1.766,432,3.396,459,1.388,464,1.825,487,3.705,577,2.8,581,2.446,602,1.999,652,2.686,745,5.555,746,6.171,747,3.946,748,1.638,749,5.677,750,2.288,751,5.44,752,3.087,753,5.44,754,5.44,755,2.556,756,6.706,757,5.627,758,3.386,759,5.627,760,5.627,761,5.627,762,5.627,763,5.627,764,5.627,765,5.627,766,1.82,767,3.611,768,5.188,769,4.137,770,3.638,771,2.251,772,3.782,773,3.026,774,1.446,775,4.137,776,4.137,777,3.511,778,3.638,779,2.686,780,1.999,781,3.782,782,3.782,783,2.335,784,2.522,785,2.101,786,3.396,787,1.369,788,4.784,789,3.695,790,2.472,791,3.782,792,3.946,793,3.782,794,3.782,795,1.715,796,4.972,797,4.972,798,4.972,799,4.972,800,1.263,801,3.782,802,1.877,803,3.196,804,4.137,805,4.137,806,3.026,807,3.782]],["title/directives/ChartCollectionIdDirective.html",[525,2.738,808,3.951]],["body/directives/ChartCollectionIdDirective.html",[0,0.107,3,0.26,4,0.244,5,0.244,8,1.77,10,0.268,14,1.613,17,1.127,19,1.569,20,0.005,21,0.75,22,0.963,24,0.312,28,0.365,38,1.776,39,0.26,55,2.14,78,0.003,79,0.004,80,0.003,85,1.076,90,1.399,94,1.467,136,0.765,154,2.177,183,0.858,324,2.912,459,2.026,482,3.609,484,4.665,489,3.764,492,4.536,501,3.474,505,4.417,524,3.764,525,4.417,526,5.458,771,3.286,774,2.111,780,2.918,800,1.843,808,7.241,809,5.771,810,7.384,811,3.199,812,6.628,813,4.305,814,8.213,815,4.102,816,8.213,817,8.213,818,7.996,819,5.31,820,8.213,821,4.305,822,5.124,823,8.213,824,8.213,825,3.228,826,8.213,827,6.927,828,4.009,829,6.628,830,3.667,831,7.284,832,8.213,833,6.628,834,4.2,835,5.938,836,4.454,837,3.096,838,3.877,839,6.628,840,5.144,841,6.628,842,6.628,843,5.938,844,6.628,845,5.144,846,6.628]],["title/injectables/ChartCollectionService.html",[831,3.743,847,3.951]],["body/injectables/ChartCollectionService.html",[0,0.116,3,0.28,4,0.263,5,0.263,10,0.289,17,0.982,19,1.695,20,0.005,21,0.81,22,1.04,24,0.272,28,0.362,39,0.28,55,1.865,78,0.004,79,0.004,80,0.004,85,1.162,94,1.649,112,1.584,136,0.892,179,1.442,196,1.584,273,2.339,285,1.558,319,4.627,320,4.627,501,3.751,771,3.443,774,2.212,787,1.741,808,6.681,809,5.565,810,7.121,811,3.269,831,6.329,843,6.411,847,6.681,848,5.921,849,7.156,850,6.329,851,8.608,852,5.969,853,7.712,854,4.402,855,8.608,856,8.608,857,8.608,858,8.608,859,7.156,860,9.232,861,7.156,862,8.608,863,7.156]],["title/components/ChartComponent.html",[482,2.237,505,2.738]],["body/components/ChartComponent.html",[0,0.088,3,0.212,4,0.199,5,0.199,8,1.554,10,0.219,11,0.469,12,0.907,14,1.318,17,1.187,19,1.282,20,0.005,21,0.979,22,1.178,24,0.308,28,0.353,32,3.37,38,1.451,39,0.212,54,1.955,55,2.347,78,0.003,79,0.004,80,0.003,90,1.399,94,1.781,109,1.183,110,0.505,112,1.597,183,0.701,201,3.501,231,1.96,324,2.379,339,3.639,384,1.392,464,2.133,482,3.169,483,2.991,484,4.097,487,3.635,489,3.076,492,5.54,493,3.601,494,2.379,495,3.268,501,2.838,502,4.912,503,3.268,504,3.268,505,4.981,506,3.268,507,2.991,508,2.769,509,3.268,510,2.991,511,3.268,512,2.838,513,3.268,514,2.991,515,3.268,516,2.769,517,3.268,518,2.991,519,3.268,520,2.991,521,3.268,522,2.991,523,3.268,524,3.076,525,2.912,526,3.168,527,3.268,529,1.451,755,2.23,818,7.266,827,6.295,828,3.52,830,3.187,834,3.689,845,4.203,864,5.415,865,7.266,866,6.71,867,5.45,868,5.45,869,5.967,870,7.213,871,8.11,872,8.11,873,9.455,874,5.415,875,6.064,876,9.455,877,8.11,878,6.064,879,5.415,880,7.213,881,5.415,882,5.415,883,5.415,884,4.847,885,6.462,886,5.415,887,4.851,888,6.462,889,4.851,890,3.797,891,4.851,892,2.648,893,3.981,894,5.415,895,2.769,896,8.11,897,4.851,898,5.415,899,5.415,900,5.415,901,3.639,902,5.415,903,7.213,904,5.415,905,5.415,906,5.415,907,5.415,908,7.213,909,4.48,910,5.415,911,7.213,912,7.213,913,5.415,914,5.415,915,3.639,916,5.415,917,5.415,918,5.415,919,5.415,920,3.639,921,5.415,922,5.415,923,5.415,924,5.415,925,5.415,926,7.213,927,5.415,928,5.415,929,4.851,930,5.415,931,5.415,932,4.851,933,5.415,934,2.021,935,5.415,936,5.415]],["title/components/ChartDonutContentComponent.html",[482,2.237,507,2.812]],["body/components/ChartDonutContentComponent.html",[0,0.1,3,0.243,4,0.228,5,0.228,8,1.696,10,0.25,11,0.512,17,1.08,20,0.005,21,0.979,24,0.299,28,0.357,39,0.243,55,1.614,78,0.003,79,0.004,80,0.003,90,1.428,94,1.716,321,1.832,481,2.843,482,3.458,483,3.42,484,4.47,487,3.878,489,3.517,492,5.64,493,3.671,494,2.72,495,3.737,496,5.088,498,4.75,501,3.245,502,5.171,503,3.737,504,3.737,505,3.329,506,3.737,507,5.028,508,5.243,509,3.737,510,3.42,511,3.737,512,3.245,513,3.737,514,3.42,515,3.737,516,3.166,517,3.737,518,3.42,519,3.737,520,3.42,521,3.737,522,3.42,523,3.737,524,3.517,525,3.329,526,3.622,527,3.737,784,3.527,809,5.594,828,3.841,834,4.025,867,5.815,868,5.815,884,5.289,901,4.161,920,4.161,937,7.751,938,6.192,939,7.776,940,7.87,941,7.87,942,8.156,943,7.158,944,6.192,945,3.391,946,5.326,947,6.192,948,2.08,949,7.051,950,5.547,951,5.547,952,6.192,953,5.547,954,6.192,955,7.87,956,6.192,957,5.547,958,6.192,959,6.192]],["title/classes/ChartDonutContentPlugin.html",[0,0.082,943,4.212]],["body/classes/ChartDonutContentPlugin.html",[0,0.092,2,1.379,3,0.222,4,0.208,5,0.208,10,0.229,11,0.484,17,1.347,20,0.005,24,0.282,28,0.358,39,0.222,41,0.828,55,1.477,75,1.065,78,0.003,79,0.004,80,0.003,85,0.92,90,1.243,94,1.852,109,1.623,110,0.692,111,2.766,112,2.024,116,2.046,117,3.792,119,1.981,151,3.265,168,1.02,179,1.891,183,1.238,187,0.998,196,1.836,231,2.019,273,2.019,301,2.555,303,1.584,319,3.663,320,3.663,321,1.677,336,1.653,436,3.047,443,2.957,444,2.683,446,2.161,447,3.092,464,1.398,466,3.09,467,3.535,476,3.535,477,3.535,478,3.535,479,3.535,481,2.455,508,4.889,592,3.42,612,2.705,625,4.688,639,1.964,641,1.717,779,3.548,784,3.717,939,8.254,942,7.43,943,6.149,946,5.15,948,2.479,957,5.076,960,7.563,961,5.768,962,5.464,963,6.658,964,8.294,965,5.666,966,5.666,967,5.768,968,5.666,969,5.666,970,6.149,971,5.076,972,1.95,973,5.666,974,5.666,975,5.666,976,5.666,977,5.666,978,5.666,979,5.076,980,5.076,981,5.666,982,5.666,983,5.666,984,5.666,985,5.666,986,5.666,987,5.666,988,5.666,989,5.666,990,5.666,991,8.804,992,8.804,993,5.666]],["title/components/ChartMarkerComponent.html",[482,2.237,510,2.812]],["body/components/ChartMarkerComponent.html",[0,0.083,3,0.201,4,0.188,5,0.188,8,1.498,10,0.207,11,0.452,14,1.247,17,1.334,19,1.214,20,0.005,21,0.957,22,0.745,24,0.36,28,0.331,38,1.373,39,0.201,52,1.972,53,2.122,54,1.851,55,1.811,78,0.003,79,0.003,80,0.003,90,1.386,94,1.796,109,1.847,110,0.735,112,1.134,121,4.671,131,1.474,136,0.906,145,1.401,151,3.716,154,2.283,183,0.9,231,2.298,321,1.517,377,4.592,482,3.054,483,2.83,484,3.948,487,3.535,489,2.911,492,5.495,493,3.57,494,2.252,495,3.093,496,4.494,498,4.195,501,2.686,502,4.803,503,3.093,504,3.093,505,2.756,506,3.093,507,2.83,508,2.621,509,3.093,510,4.671,511,3.093,512,2.686,513,3.093,514,2.83,515,3.093,516,2.621,517,3.093,518,2.83,519,3.093,520,2.83,521,3.093,522,2.83,523,3.093,524,2.911,525,2.756,526,2.998,527,3.093,529,1.373,587,6.227,639,1.868,641,1.633,678,4.134,740,5.111,809,6.285,822,3.197,827,6.122,828,3.393,834,4.521,845,3.978,867,5.301,868,5.301,875,5.531,878,5.93,884,4.671,901,3.444,915,3.444,920,3.444,962,3.768,994,8.709,995,5.125,996,6.951,997,6.951,998,7.887,999,7.887,1000,7.887,1001,7.887,1002,4.24,1003,5.125,1004,5.111,1005,5.125,1006,5.125,1007,2.714,1008,5.125,1009,5.125,1010,8.457,1011,5.125,1012,4.24,1013,5.125,1014,5.125,1015,5.125,1016,5.125,1017,4.24,1018,5.125,1019,5.125,1020,9.323,1021,4.592,1022,5.125,1023,2.559,1024,4.24,1025,5.125,1026,5.125,1027,5.125,1028,5.125,1029,5.125,1030,6.951,1031,5.125,1032,5.125,1033,5.125,1034,5.125,1035,5.125,1036,5.125,1037,5.125,1038,5.125,1039,5.125,1040,5.125,1041,5.125,1042,6.951,1043,3.594,1044,5.125,1045,5.125,1046,5.125,1047,5.125,1048,5.125,1049,5.125,1050,5.125,1051,5.125,1052,5.125,1053,6.951,1054,5.125,1055,5.125,1056,4.592]],["title/classes/ChartPalette.html",[0,0.082,1057,4.212]],["body/classes/ChartPalette.html",[0,0.105,2,1.582,3,0.255,4,0.239,5,0.239,8,1.749,10,0.263,14,1.582,17,1.272,19,1.539,20,0.005,21,0.735,22,0.944,24,0.247,28,0.386,39,0.255,52,2.385,55,2.306,78,0.003,79,0.004,80,0.003,94,1.58,112,1.958,128,2.856,136,0.863,164,1.796,184,3.173,187,1.145,196,2.051,231,2.205,313,1.275,317,5.045,318,5.045,819,5.72,1057,6.714,1058,9.536,1059,6.5,1060,3.359,1061,3.539,1062,3.539,1063,3.539,1064,7.27,1065,3.407,1066,7.32,1067,2.437,1068,6.5,1069,2.819,1070,6.5,1071,6.5,1072,6.5,1073,6.5,1074,6.5,1075,6.5,1076,5.823,1077,5.823,1078,5.823,1079,5.045,1080,5.823,1081,6.714,1082,5.378,1083,6.714,1084,6.5,1085,6.5,1086,6.5,1087,6.5,1088,5.823,1089,6.5,1090,8.847,1091,8.115,1092,6.5,1093,5.378,1094,5.823,1095,5.378,1096,6.5,1097,6.5,1098,8.115,1099,6.5,1100,5.378,1101,6.5,1102,5.823,1103,5.823,1104,6.5,1105,6.5,1106,6.5]],["title/classes/ChartPlugin.html",[0,0.082,466,1.622]],["body/classes/ChartPlugin.html",[0,0.115,2,1.724,3,0.278,4,0.26,5,0.26,8,1.844,10,0.286,11,0.557,14,2.237,17,1.363,20,0.005,24,0.269,28,0.278,39,0.278,78,0.004,79,0.004,80,0.004,90,1.298,94,1.863,179,1.924,183,1.313,187,1.248,220,3.81,273,2.325,436,3.81,443,2.952,444,3.088,446,2.488,447,3.088,464,2.267,466,2.726,553,2.843,1107,10.045,1108,7.086,1109,7.086,1110,7.086,1111,7.086,1112,7.086,1113,7.086]],["title/components/ChartPopoverComponent.html",[482,2.237,512,2.668]],["body/components/ChartPopoverComponent.html",[0,0.089,3,0.215,4,0.202,5,0.202,8,1.568,10,0.222,11,0.474,14,1.335,17,1.276,19,1.299,20,0.005,21,0.984,22,0.797,24,0.353,28,0.372,38,1.47,39,0.215,54,1.982,55,2.128,78,0.003,79,0.004,80,0.003,90,1.402,91,2.876,94,1.66,112,1.807,151,2.411,183,0.711,231,1.491,301,2.282,321,1.624,384,1.41,443,1.697,446,2.128,453,1.859,481,2.573,482,3.197,483,3.031,484,4.133,487,3.659,489,3.117,492,5.55,493,3.608,494,2.411,495,3.312,496,4.705,498,4.391,501,2.876,502,4.938,503,3.312,504,3.312,505,2.951,506,3.312,507,3.031,508,2.806,509,3.312,510,3.031,511,3.312,512,4.557,513,3.312,514,3.031,515,3.312,516,2.806,517,3.312,518,3.031,519,3.312,520,3.031,521,3.312,522,3.031,523,3.312,524,3.117,525,2.951,526,3.21,527,3.312,529,2.491,588,2.951,589,2.951,641,1.136,666,4.916,740,5.35,809,6.133,828,3.552,834,4.175,865,7.314,867,5.487,868,5.487,875,6.343,878,6.096,884,4.89,893,6.003,897,4.916,901,3.688,920,3.688,946,4.257,948,1.45,950,4.916,951,4.916,953,4.916,1002,4.54,1004,5.35,1012,4.54,1017,4.54,1056,4.916,1114,8.498,1115,5.487,1116,7.362,1117,7.277,1118,7.277,1119,6.519,1120,5.487,1121,6.003,1122,5.487,1123,7.314,1124,5.487,1125,6.754,1126,5.487,1127,5.487,1128,8.164,1129,7.277,1130,5.487,1131,6.519,1132,4.035,1133,7.277,1134,5.487,1135,7.277,1136,3.424,1137,3.424,1138,5.487,1139,5.487,1140,5.487,1141,7.277,1142,6.02,1143,5.487,1144,5.487,1145,5.487,1146,3.031,1147,4.259,1148,4.259,1149,4.259,1150,5.487,1151,7.277,1152,4.54,1153,5.487,1154,5.487,1155,5.487,1156,5.487,1157,5.487,1158,5.487]],["title/classes/ChartPopoverPlugin.html",[0,0.082,1121,3.743]],["body/classes/ChartPopoverPlugin.html",[0,0.067,2,1.01,3,0.163,4,0.153,5,0.153,10,0.168,11,0.39,12,1.029,14,1.01,17,1.347,19,0.983,20,0.005,21,0.47,22,0.603,24,0.341,28,0.359,39,0.235,40,0.002,41,0.668,55,1.834,57,0.907,78,0.002,79,0.003,80,0.002,85,0.674,89,1.024,90,1.155,92,2.91,94,1.846,109,2.033,110,0.794,111,2.843,112,1.991,115,1.549,116,2.017,117,3.393,119,1.925,126,0.957,142,1.652,148,2.653,149,1.899,179,1.718,183,1.165,187,0.731,196,0.919,229,1.827,231,2.388,257,1.713,273,1.629,294,1.01,301,2.514,321,1.228,324,1.824,384,1.982,418,2.505,436,2.232,439,2.494,443,2.782,444,2.842,446,1.834,447,2.277,453,2.77,456,4.985,459,2.261,464,1.024,466,2.866,467,2.59,476,2.59,477,2.59,478,2.59,479,2.59,481,2.601,512,3.143,588,2.232,589,2.232,592,2.505,601,1.629,602,1.475,612,1.981,632,1.788,639,1.667,641,1.457,678,2.175,687,2.073,748,1.558,755,1.284,774,1.067,803,2.357,828,2.927,915,2.789,946,4.118,948,2.037,960,7.798,1024,3.434,1043,4.205,1116,7.876,1121,4.409,1136,2.59,1137,2.59,1142,3.434,1148,4.654,1159,4.654,1160,5.51,1161,4.654,1162,5.372,1163,3.143,1164,2.995,1165,5.372,1166,4.409,1167,4.654,1168,4.654,1169,5.824,1170,3.888,1171,5.824,1172,5.824,1173,5.824,1174,6.82,1175,4.151,1176,4.151,1177,6.615,1178,3.527,1179,4.961,1180,3.719,1181,3.434,1182,4.654,1183,4.961,1184,4.961,1185,5.824,1186,2.645,1187,3.508,1188,4.151,1189,4.151,1190,5.464,1191,4.151,1192,4.151,1193,4.151,1194,4.151,1195,2.59,1196,2.59,1197,3.221,1198,3.221,1199,2.91,1200,4.654,1201,2.063,1202,3.434,1203,2.232,1204,3.434,1205,3.719,1206,3.719,1207,4.409,1208,3.221,1209,2.428,1210,2.59,1211,2.91,1212,3.719,1213,3.719,1214,2.789,1215,2.91,1216,3.719,1217,3.221,1218,1.576,1219,1.576,1220,3.052,1221,3.719,1222,3.719,1223,3.719,1224,3.719,1225,3.719,1226,3.719,1227,3.719,1228,3.719,1229,3.719,1230,3.719,1231,3.719,1232,4.409,1233,3.052,1234,4.03,1235,3.052,1236,1.524,1237,2.684,1238,5.824,1239,3.719,1240,4.961,1241,3.434,1242,3.052,1243,3.434,1244,3.221,1245,3.719,1246,3.719,1247,1.603,1248,3.052,1249,3.434,1250,3.719,1251,3.719,1252,3.719,1253,3.719,1254,3.719,1255,4.654,1256,3.221,1257,3.221,1258,3.221,1259,3.719,1260,3.719,1261,3.719,1262,3.719,1263,3.719,1264,3.221,1265,5.824,1266,3.877,1267,1.499,1268,3.719,1269,1.499,1270,2.505,1271,3.719,1272,5.464,1273,3.719,1274,3.719,1275,3.719,1276,3.719,1277,3.719]],["title/components/ChartTooltipComponent.html",[482,2.237,514,2.812]],["body/components/ChartTooltipComponent.html",[0,0.107,3,0.26,4,0.244,5,0.244,10,0.268,17,0.91,20,0.005,21,1.01,24,0.252,28,0.322,39,0.26,78,0.003,79,0.004,80,0.003,90,1.442,119,1.678,336,1.933,482,3.609,483,3.66,484,4.665,487,4,489,3.764,492,5.688,493,3.705,494,2.912,495,4,496,5.31,498,4.957,501,3.474,502,5.299,503,4,504,4,505,3.564,506,4,507,3.66,508,3.389,509,4,510,3.66,511,4,512,3.474,513,4,514,5.153,515,4,516,3.389,517,4,518,3.66,519,4,520,3.66,521,4,522,3.66,523,4,524,3.764,525,3.564,526,3.877,527,4,733,2.5,809,5.31,828,4.009,834,4.2,893,6.562,1123,7.996,1204,5.483,1278,6.375,1279,6.628,1280,7.359,1281,7.359,1282,5.52,1283,8.213,1284,8.213,1285,6.628,1286,6.628,1287,6.628,1288,6.628,1289,5.938,1290,6.628,1291,6.628,1292,6.628,1293,5.771,1294,8.213,1295,6.628]],["title/components/ChartTooltipsComponent.html",[482,2.237,516,2.604]],["body/components/ChartTooltipsComponent.html",[0,0.065,3,0.157,4,0.148,5,0.148,8,1.262,10,0.279,11,0.381,13,0.815,14,0.977,17,1.268,19,1.387,20,0.005,21,0.913,22,0.851,24,0.306,28,0.367,38,1.076,39,0.157,40,0.002,41,0.448,42,1.406,47,1.425,54,1.451,55,2.49,75,1.088,78,0.002,79,0.003,80,0.002,90,1.337,94,1.672,109,1.279,110,0.546,111,1.34,112,2.013,114,1.551,116,0.991,126,1.593,128,1.765,136,0.831,142,2.092,151,2.573,168,1.194,179,0.81,183,0.52,196,1.787,231,2.572,238,2.971,244,1.139,273,1.591,301,2.355,312,2.7,313,1.356,314,1.091,321,1.189,334,1.212,337,1.698,435,4.929,437,4.644,452,2.817,481,2.247,482,2.573,483,2.219,484,3.326,487,3.097,489,2.282,492,5.278,493,3.418,494,1.765,495,2.424,496,3.786,498,3.534,501,2.105,502,4.313,503,2.424,504,2.424,505,2.16,506,2.424,507,2.219,508,2.054,509,2.424,510,2.219,511,2.424,512,2.105,513,2.424,514,2.219,515,2.424,516,3.883,517,2.424,518,2.219,519,2.424,520,2.219,521,2.424,522,2.219,523,2.424,524,3.924,525,2.16,526,2.35,527,2.424,529,1.076,585,1.004,586,2.424,588,2.16,589,2.16,612,3.298,632,1.731,639,1.387,641,1.212,740,2.954,755,1.242,774,1.505,809,5.765,828,2.858,834,3.534,867,4.644,868,4.644,875,4.845,878,5.324,884,3.935,893,5.08,901,2.7,920,2.7,948,1.061,972,2.015,1002,3.323,1004,4.305,1012,3.323,1043,4.845,1152,3.323,1208,3.118,1237,2.597,1248,2.954,1272,5.893,1278,6.92,1282,6.208,1296,3.599,1297,5.246,1298,5.246,1299,6.19,1300,6.19,1301,5.246,1302,4.017,1303,4.017,1304,4.017,1305,5.246,1306,5.717,1307,4.017,1308,4.017,1309,4.017,1310,6.19,1311,5.246,1312,4.017,1313,3.599,1314,5.246,1315,3.599,1316,7.794,1317,5.246,1318,5.246,1319,3.599,1320,3.599,1321,3.118,1322,2.954,1323,2.341,1324,3.599,1325,6.282,1326,3.323,1327,4.845,1328,3.599,1329,3.599,1330,1.28,1331,3.599,1332,3.599,1333,3.599,1334,3.599,1335,3.599,1336,3.599,1337,3.599,1338,5.246,1339,3.599,1340,3.599,1341,3.599,1342,3.599,1343,3.599,1344,3.599,1345,3.599,1346,3.323,1347,3.599,1348,5.246,1349,5.246,1350,4.845,1351,5.246,1352,5.246,1353,3.599,1354,5.246,1355,3.599,1356,3.599,1357,6.19,1358,3.599,1359,3.599,1360,5.246,1361,3.599,1362,3.599,1363,5.246,1364,3.599,1365,6.19,1366,5.246,1367,3.599,1368,3.599,1369,3.599,1370,3.599,1371,2.223,1372,3.599,1373,2.506,1374,3.599,1375,3.599,1376,6.803,1377,3.599,1378,3.599,1379,5.246,1380,3.599,1381,3.599,1382,3.599,1383,3.599,1384,3.323,1385,3.599,1386,3.118,1387,3.599,1388,3.599,1389,3.599,1390,3.323,1391,3.599,1392,3.599,1393,3.599,1394,3.599,1395,3.599,1396,3.599,1397,3.599,1398,5.246,1399,5.246,1400,5.246,1401,6.19,1402,3.599,1403,3.599,1404,3.599,1405,3.323,1406,3.599,1407,3.323,1408,2.7,1409,3.599,1410,3.599,1411,5.246,1412,3.599,1413,3.599,1414,3.599,1415,3.599,1416,3.599,1417,3.599,1418,3.599,1419,3.599,1420,3.599,1421,3.599,1422,3.599,1423,3.599,1424,3.599,1425,3.599,1426,3.599,1427,3.599]],["title/classes/ChartTooltipsPlugin.html",[0,0.082,437,3.422]],["body/classes/ChartTooltipsPlugin.html",[0,0.062,2,0.931,3,0.15,4,0.141,5,0.141,10,0.155,11,0.368,12,1.078,14,0.931,17,1.322,19,1.338,20,0.005,21,0.639,22,0.821,24,0.325,28,0.358,34,0.702,39,0.31,40,0.002,41,0.748,42,1.613,47,1.635,55,1.751,57,0.836,78,0.002,79,0.003,80,0.002,85,0.918,90,1.118,94,1.83,109,1.728,110,0.691,111,2.933,112,1.897,114,3.397,115,2.109,116,0.944,117,3.283,119,1.154,131,1.625,136,0.357,142,1.557,149,1.751,154,1.856,168,1.086,179,1.727,183,1.163,196,1.487,201,2.474,216,2.389,217,3.136,231,2.547,238,1.201,251,1.932,259,1.681,273,1.535,285,1.023,287,2.329,294,0.931,301,2.315,307,1.868,321,1.133,324,1.681,333,1.07,334,1.715,336,1.648,404,2.64,411,1.774,435,5.833,436,2.058,437,3.798,438,5.214,439,2.56,440,5.214,441,4.995,442,5.214,443,2.72,444,2.771,445,4.675,446,1.751,447,2.173,451,4.155,452,3.962,453,2.902,455,1.914,456,4.797,458,5.758,459,1.83,460,4.155,463,4.155,464,0.944,466,2.802,467,2.388,470,4.386,476,2.388,477,2.388,478,2.388,479,2.388,481,1.988,516,2.89,529,1.514,577,1.296,581,1.672,585,0.957,586,2.31,588,2.058,589,2.058,591,2.814,592,2.31,601,2.016,602,1.36,612,2.698,639,0.906,641,0.792,678,2.006,687,3.355,755,1.183,766,1.238,771,2.688,786,4.477,806,2.058,828,2.758,890,2.683,892,1.405,934,1.428,948,2.189,1136,2.388,1137,2.388,1147,6.826,1159,4.386,1160,4.344,1161,4.386,1167,4.386,1168,4.386,1186,1.238,1187,2.239,1197,2.97,1198,2.97,1199,2.683,1201,2.312,1214,4.515,1215,2.683,1220,2.814,1232,4.155,1233,2.814,1234,2.572,1235,2.814,1236,1.405,1237,2.474,1242,2.814,1244,2.97,1255,4.386,1256,2.97,1257,2.97,1258,2.97,1264,2.97,1282,5.758,1323,2.513,1428,7.557,1429,3.827,1430,3.827,1431,6.019,1432,2.145,1433,3.827,1434,3.827,1435,3.827,1436,3.827,1437,3.827,1438,3.827,1439,3.827,1440,3.429,1441,6.548,1442,2.97,1443,3.166,1444,1.453,1445,2.814,1446,6.143,1447,4.675,1448,3.166,1449,3.166,1450,2.97,1451,4.675,1452,5.063,1453,3.429,1454,1.911,1455,3.429,1456,6.138,1457,6.138,1458,6.138,1459,6.138,1460,6.143,1461,5.063,1462,3.429,1463,3.429,1464,5.063,1465,3.429,1466,3.429,1467,3.429,1468,1.116,1469,3.429,1470,6.019,1471,3.429,1472,3.429,1473,3.429,1474,4.711,1475,5.214,1476,3.429,1477,3.429,1478,3.429,1479,3.429,1480,3.429,1481,2.97,1482,2.97,1483,5.063,1484,3.429,1485,3.429,1486,2.97,1487,3.429,1488,3.429,1489,3.429,1490,6.138,1491,3.429,1492,3.429,1493,3.429,1494,3.429,1495,3.429,1496,3.429,1497,3.429,1498,3.429,1499,3.429,1500,3.429,1501,3.429,1502,3.429,1503,1.868,1504,2.814,1505,3.429,1506,3.166,1507,3.429,1508,3.429,1509,3.429,1510,3.429,1511,3.429,1512,3.429,1513,2.388,1514,2.97,1515,2.388,1516,2.97,1517,2.97,1518,5.063,1519,3.166,1520,2.814,1521,3.429,1522,3.429,1523,3.429,1524,3.429]],["title/classes/DataSeries.html",[0,0.082,222,1.443]],["body/classes/DataSeries.html",[0,0.111,2,1.675,3,0.27,4,0.253,5,0.253,8,1.811,10,0.278,11,0.547,12,1.219,13,1.17,14,1.675,17,1.331,19,1.63,20,0.005,21,1.07,22,1,24,0.374,28,0.27,33,1.697,34,1.263,37,1.923,39,0.27,56,3.215,57,1.836,78,0.003,79,0.004,80,0.003,94,1.841,109,1.503,110,0.641,128,3.024,136,0.881,164,2.092,187,1.213,213,2.718,215,5.341,222,2.573,249,3.909,307,3.359,774,2.333,915,4.625,1468,2.452,1525,9.862,1526,6.882,1527,8.406,1528,8.406,1529,6.882,1530,6.882,1531,6.882,1532,6.166,1533,6.882,1534,5.694,1535,6.882,1536,6.882,1537,6.882,1538,6.882,1539,3.801,1540,6.882,1541,6.166,1542,6.882,1543,4.826]],["title/classes/DimensionConfig.html",[0,0.082,140,3.072]],["body/classes/DimensionConfig.html",[0,0.071,2,1.074,3,0.173,4,0.162,5,0.162,8,1.35,10,0.178,11,0.408,17,1.366,19,2.165,20,0.005,21,1.035,22,1.328,24,0.362,28,0.173,39,0.173,55,1.632,75,1.136,78,0.002,79,0.003,80,0.002,84,2.753,94,1.875,108,4.01,109,1.829,110,0.938,111,2.901,114,3.36,115,3.247,116,2.146,119,2.049,124,3.477,126,1.827,134,3.74,139,4.601,140,3.781,142,2.52,160,3.2,168,1.421,169,3.953,176,3.65,179,1.942,187,0.777,188,4.969,196,2.024,231,1.702,273,1.702,295,4.263,639,2.165,641,1.893,1544,9.994,1545,4.023,1546,4.023,1547,3.917,1548,5.05,1549,5.05,1550,4.412,1551,4.412,1552,4.412,1553,3.953,1554,4.412,1555,4.379,1556,4.412,1557,4.412,1558,4.412,1559,4.379,1560,4.412,1561,4.412,1562,4.412,1563,4.379,1564,4.412,1565,4.412,1566,4.412,1567,4.379,1568,4.412,1569,4.412,1570,4.412,1571,4.412,1572,4.412,1573,4.412,1574,4.412,1575,4.412,1576,7.284,1577,7.929,1578,7.284,1579,7.929,1580,7.284,1581,7.284,1582,4.412,1583,4.412,1584,4.412,1585,7.284,1586,7.284,1587,4.412,1588,4.412]],["title/classes/DonutGaugeRenderingUtil.html",[0,0.082,1589,4.561]],["body/classes/DonutGaugeRenderingUtil.html",[0,0.112,2,1.683,3,0.271,4,0.254,5,0.254,10,0.279,12,0.87,17,0.949,19,1.637,20,0.005,21,0.782,22,1.005,24,0.262,28,0.33,39,0.271,55,1.802,78,0.003,79,0.004,80,0.003,94,1.235,96,3.857,110,0.786,119,1.412,151,3.996,153,6.975,168,1.3,179,1.394,196,1.866,231,2.638,273,2.291,313,1.357,336,2.017,455,2.856,770,4.471,1543,5.912,1589,7.553,1590,8.431,1591,7.553,1592,6.543,1593,6.915,1594,8.431,1595,8.431,1596,6.915,1597,4.849,1598,4.173,1599,8.431,1600,6.915,1601,9.095,1602,6.915,1603,8.431,1604,6.915,1605,6.915,1606,6.915,1607,6.915,1608,6.915,1609,6.915,1610,6.915,1611,8.431,1612,8.431,1613,2.901,1614,6.915,1615,6.915,1616,6.915,1617,4.045,1618,6.915,1619,6.915,1620,6.915,1621,6.915]],["title/classes/EventBus.html",[0,0.082,530,1.551]],["body/classes/EventBus.html",[0,0.118,2,1.779,3,0.286,4,0.269,5,0.269,10,0.295,17,1.197,19,1.731,20,0.005,21,0.827,22,1.062,24,0.277,28,0.341,39,0.286,55,1.905,78,0.004,79,0.004,80,0.004,94,1.786,112,1.618,136,0.918,179,1.757,183,0.947,196,1.618,273,2.369,301,2.755,321,2.164,443,2.983,530,2.657,585,1.828,586,4.412,787,2.121,1622,9.316,1623,7.311,1624,8.719,1625,7.311,1626,8.719,1627,7.311,1628,7.311,1629,7.311,1630,9.316,1631,7.311,1632,7.311]],["title/classes/Grid.html",[0,0.082,83,1.291]],["body/classes/Grid.html",[0,0.115,2,1.291,3,0.103,4,0.097,5,0.097,8,1.144,10,0.106,11,0.275,17,1.291,19,1.685,20,0.005,21,1.023,22,1.034,24,0.347,28,0.336,39,0.166,44,4.263,49,4.263,55,1.103,57,0.575,75,0.871,78,0.001,79,0.002,80,0.001,83,2.292,85,0.427,89,2.207,90,1.164,94,1.825,95,0.982,96,3.751,101,4.358,106,1.103,108,1.896,109,1.753,110,0.725,112,1.175,114,1.634,115,0.982,119,1.589,126,0.606,128,1.859,131,1.916,132,2.475,134,3.452,135,4.008,136,0.697,140,1.588,142,0.725,148,3.112,154,1.997,155,3.885,179,1.856,182,2.671,187,0.745,188,4.284,196,2.038,198,0.949,220,1.415,226,1.091,231,2.431,244,1.199,257,1.479,273,1.15,289,1.055,295,2.275,301,1.862,312,1.768,313,1.526,314,2.114,321,0.779,329,1.768,334,1.379,335,2.177,336,1.773,339,2.843,343,1.641,347,1.934,368,1.289,380,2.042,384,2.24,446,1.584,447,1.369,459,1.044,464,1.643,481,1.252,493,2.195,494,1.156,530,2.168,534,3.639,544,3.051,550,2.61,553,1.88,557,1.977,585,1.779,586,1.588,594,1.034,595,1.345,596,1.666,597,4.187,598,1.415,601,0.715,602,1.503,603,1.379,612,1.256,632,1.134,638,4.99,639,1.257,640,2.042,641,1.706,652,2.02,679,2.201,681,2.357,687,4.468,717,1.908,718,1.717,719,2.214,723,3.825,725,2.357,728,2.357,733,1.629,734,1.916,735,3.5,736,4.719,737,3.284,748,1.175,770,3.431,771,1.052,774,1.087,779,1.256,785,1.579,800,0.59,822,1.641,836,1.768,837,1.229,838,1.539,840,2.042,850,1.934,945,1.823,962,1.934,1023,2.65,1163,2.781,1164,1.314,1166,3.902,1178,1.936,1209,2.475,1266,4.307,1267,1.528,1371,1.606,1432,1.606,1445,1.934,1503,1.284,1504,3.902,1592,6.765,1633,2.177,1634,0.999,1635,5.307,1636,5.307,1637,5.307,1638,5.307,1639,5.307,1640,2.931,1641,3.791,1642,3.358,1643,3.358,1644,3.269,1645,2.631,1646,4.47,1647,5.162,1648,2.631,1649,2.086,1650,2.631,1651,2.631,1652,5.5,1653,3.791,1654,3.187,1655,7.48,1656,4.231,1657,2.631,1658,4.231,1659,5.17,1660,2.631,1661,2.631,1662,2.631,1663,2.275,1664,2.631,1665,3.791,1666,2.275,1667,3.111,1668,2.553,1669,2.631,1670,3.269,1671,2.631,1672,2.631,1673,2.631,1674,2.631,1675,2.631,1676,3.358,1677,2.631,1678,2.631,1679,2.631,1680,2.337,1681,2.631,1682,2.631,1683,1.768,1684,1.701,1685,2.725,1686,1.284,1687,2.177,1688,2.631,1689,2.781,1690,1.415,1691,7.193,1692,2.177,1693,1.034,1694,3.791,1695,1.415,1696,3.492,1697,5.307,1698,2.631,1699,2.631,1700,2.631,1701,2.533,1702,2.631,1703,2.631,1704,1.379,1705,1.156,1706,2.357,1707,2.631,1708,2.631,1709,2.631,1710,2.631,1711,2.631,1712,1.641,1713,2.631,1714,2.631,1715,2.631,1716,2.631,1717,2.357,1718,2.631,1719,4.231,1720,2.357,1721,3.791,1722,4.754,1723,3.791,1724,5.307,1725,4.231,1726,2.357,1727,2.357,1728,2.631,1729,2.631,1730,2.631,1731,6.079,1732,2.631,1733,2.177,1734,2.631,1735,2.177,1736,2.631,1737,1.052,1738,4.231,1739,2.631,1740,2.177,1741,2.631,1742,2.631,1743,2.631,1744,2.357,1745,2.631,1746,5.307,1747,2.631,1748,4.231,1749,2.631,1750,1.579,1751,2.631,1752,2.631,1753,2.357,1754,2.357,1755,2.631,1756,2.631,1757,3.791,1758,2.631,1759,2.631,1760,2.631,1761,2.631,1762,2.357,1763,2.631,1764,2.631,1765,2.631,1766,2.631,1767,2.357,1768,5.968,1769,2.337,1770,1.453,1771,2.631,1772,4.231,1773,2.631,1774,2.631,1775,2.631,1776,2.631,1777,2.357,1778,2.357,1779,2.631,1780,2.631,1781,1.693,1782,2.631,1783,4.231,1784,2.631,1785,2.631,1786,2.631,1787,2.631,1788,5.307,1789,2.631,1790,4.231,1791,2.631,1792,4.231,1793,6.079,1794,2.631,1795,4.231,1796,2.631,1797,2.631,1798,2.177,1799,2.631,1800,2.631,1801,0.935,1802,2.631,1803,2.631,1804,2.631,1805,2.631,1806,2.631,1807,2.631,1808,2.631,1809,1.453,1810,1.453,1811,2.177,1812,1.641,1813,2.631,1814,1.453,1815,4.231,1816,2.357,1817,2.631,1818,2.631,1819,2.042,1820,2.631,1821,2.631,1822,4.231,1823,4.231,1824,4.231,1825,2.631,1826,2.631,1827,2.631,1828,2.631,1829,2.631,1830,2.631,1831,3.791,1832,2.631,1833,2.631,1834,5.447,1835,5.447,1836,5.447,1837,6.079,1838,6.079,1839,5.447,1840,6.079,1841,2.631,1842,1.934,1843,2.631,1844,2.631,1845,2.631,1846,2.631,1847,2.631,1848,2.357,1849,2.631,1850,2.631,1851,2.631,1852,2.631,1853,2.357,1854,2.631,1855,2.631]],["title/classes/GridConfig.html",[0,0.082,132,2.978]],["body/classes/GridConfig.html",[0,0.098,2,1.472,3,0.237,4,0.222,5,0.222,8,1.671,10,0.244,11,0.505,17,1.31,20,0.005,24,0.343,28,0.304,39,0.237,75,1.408,78,0.003,79,0.004,80,0.003,84,3.773,85,0.982,94,1.848,101,4.085,102,2.293,103,4.129,104,4.177,105,4.177,106,2.23,108,3.835,109,2.085,110,0.89,111,2.586,112,1.716,114,2.994,115,2.894,116,1.912,126,1.787,128,3.406,129,5.437,130,5.584,131,2.827,132,5.006,134,3.692,135,4.708,136,0.564,137,5.211,139,3.835,140,5.164,142,2.487,145,1.563,148,2.081,174,5.004,181,5.004,187,1.066,188,4.848,493,2.184,557,2.826,632,2.606,1553,5.419,1689,3.17,1856,9.708,1857,6.048,1858,6.048,1859,6.048,1860,3.17,1861,3.252,1862,3.252,1863,3.252,1864,3.252,1865,3.252,1866,2.952,1867,3.252,1868,6.048,1869,6.048,1870,6.048,1871,6.048,1872,6.048,1873,6.048]],["title/classes/HorizontalBarAccessors.html",[0,0.082,1874,4.561]],["body/classes/HorizontalBarAccessors.html",[0,0.104,2,1.571,3,0.253,4,0.237,5,0.237,7,2.494,10,0.261,11,0.526,12,1.264,13,1.399,14,1.571,15,5.666,16,5.105,17,1.379,19,1.529,20,0.005,21,0.731,22,0.938,23,3.151,24,0.381,28,0.345,38,1.73,39,0.253,41,0.9,56,3.775,57,2.079,58,7.094,59,5.918,75,0.925,78,0.003,79,0.004,80,0.003,117,4.028,164,1.789,202,6.146,204,4.59,207,5.767,209,5.089,210,4.59,211,5.342,212,5.342,214,3.224,259,4.181,295,4.345,1007,2.222,1065,3.337,1874,7.239,1875,9.243,1876,7.239,1877,5.342,1878,5.784,1879,5.784,1880,5.784,1881,5.784,1882,5.784,1883,4.174,1884,5.784,1885,4.174,1886,5.784,1887,4.174,1888,7.239,1889,4.174,1890,4.339,1891,5.784,1892,5.784]],["title/interfaces/IAccessors.html",[34,0.934,40,0.003]],["body/interfaces/IAccessors.html",[3,0.126,4,0.118,5,0.118,10,0.274,11,0.441,12,1.274,13,1.373,20,0.005,21,0.829,22,0.986,24,0.324,28,0.353,33,1.22,34,0.907,35,2.161,36,2.161,37,1.382,39,0.399,40,0.005,41,0.928,42,1.759,47,1.783,53,1.187,57,1.691,75,0.865,78,0.002,79,0.002,80,0.002,83,1.53,85,0.521,89,1.22,90,1.304,97,1.64,102,0.859,106,0.836,110,0.461,116,0.791,119,0.655,131,2.396,136,0.883,145,1.76,163,0.963,164,1.967,168,1.301,183,1.183,187,0.565,198,1.522,213,2.019,222,1.402,229,0.977,238,2.3,244,0.909,245,0.977,251,2.555,254,1.239,257,1.203,284,1.53,285,1.402,287,1.007,289,1.349,294,0.78,303,2.048,313,1.331,314,1.991,328,0.977,333,1.896,334,1.249,368,0.977,384,0.824,399,1.177,411,1.007,417,1.07,439,1.037,443,1.529,444,1.6,446,1.91,447,1.6,453,1.675,455,2.045,459,1.808,464,1.489,466,1.576,481,2.169,529,1.964,530,1.507,535,1.283,536,1.283,537,1.283,538,1.283,544,1.552,546,1.218,550,1.64,552,1.283,553,1.529,558,1.283,562,1.978,566,1.978,576,1.283,577,1.675,580,1.26,581,2.008,585,1.237,594,1.26,596,1.007,600,1.283,601,1.344,604,1.283,639,0.759,641,1.024,647,2.226,651,1.815,679,0.992,717,1.552,718,1.952,719,2.008,733,0.859,734,1.158,748,1.502,750,0.992,752,1.952,755,2.098,758,1.121,766,1.037,774,1.271,780,1.139,787,1.783,795,0.977,800,1.522,802,2.583,811,1.07,825,1.26,830,1.26,892,1.177,934,1.197,948,1.595,972,1.702,1007,1.104,1060,1.218,1061,1.283,1062,1.283,1063,1.283,1065,2.298,1067,0.963,1069,1.576,1186,2.194,1201,2.334,1218,1.218,1219,1.218,1236,2.216,1247,1.239,1267,1.158,1269,1.786,1323,2.045,1330,1.576,1432,1.218,1444,2.575,1468,1.443,1613,2.334,1634,1.218,1693,1.26,1737,1.283,1750,1.197,1781,1.283,1801,2.144,1893,0.486,1894,1.26,1895,2.014,1896,2.414,1897,2.49,1898,1.894,1899,1.978,1900,1.944,1901,1.978,1902,1.624,1903,1.464,1904,1.6,1905,2.414,1906,1.26,1907,1.239,1908,2.414,1909,1.306,1910,1.26,1911,1.26,1912,1.121,1913,1.283,1914,1.283,1915,1.757,1916,1.884,1917,1.139,1918,1.792,1919,3.191,1920,1.306,1921,1.877,1922,1.158,1923,2.414,1924,1.306,1925,2.014,1926,1.978,1927,1.978,1928,1.306,1929,1.978,1930,2.331,1931,1.877,1932,1.306,1933,1.104,1934,1.306,1935,1.218,1936,1.218,1937,1.866,1938,1.177,1939,1.306,1940,1.306,1941,0.977,1942,1.306,1943,1.26,1944,1.91,1945,1.978,1946,1.283,1947,1.978,1948,1.306,1949,1.26,1950,1.306,1951,2.543,1952,1.306,1953,1.283,1954,1.306,1955,1.978,1956,1.26,1957,1.121,1958,1.283,1959,1.283,1960,1.306,1961,1.306,1962,2.014,1963,1.306,1964,1.306,1965,1.283,1966,2.014,1967,1.306,1968,1.283,1969,1.239,1970,1.306,1971,1.306,1972,1.624,1973,1.283,1974,1.952,1975,1.306,1976,1.283,1977,1.283,1978,1.306,1979,1.306,1980,1.306,1981,1.283,1982,1.306,1983,1.104,1984,1.197,1985,1.283,1986,1.306,1987,1.306,1988,1.306,1989,1.306,1990,1.26,1991,1.283,1992,1.26,1993,1.26,1994,1.306,1995,2.014,1996,2.714,1997,1.306,1998,1.283,1999,1.306,2000,1.306,2001,1.306,2002,1.306,2003,1.306,2004,1.649,2005,1.07,2006,1.306,2007,1.306,2008,1.877,2009,1.26,2010,1.363,2011,1.26,2012,1.306,2013,1.306,2014,1.877,2015,2.014,2016,1.306,2017,1.306,2018,2.253,2019,1.91,2020,2.253,2021,1.283,2022,1.26,2023,1.037,2024,1.283,2025,1.26,2026,1.239,2027,1.053,2028,1.306,2029,1.121]],["title/interfaces/IAllAround.html",[40,0.003,108,2.282]],["body/interfaces/IAllAround.html",[0,0.052,3,0.126,4,0.118,5,0.118,10,0.129,11,0.322,20,0.005,21,0.363,24,0.306,28,0.326,39,0.358,40,0.005,41,0.551,52,1.236,75,0.459,78,0.002,79,0.002,80,0.002,83,2.509,85,0.52,89,1.673,90,0.698,95,3.481,100,1.601,101,3.497,102,1.324,103,3.541,104,1.564,105,1.564,106,1.572,108,3.831,110,0.752,111,2.963,112,1.786,114,3.483,115,3.316,116,2.224,124,2.88,126,1.139,135,3.616,136,0.632,139,3.913,142,1.869,145,1.861,148,2.664,154,1.053,155,2.469,157,1.601,158,2.658,159,1.77,160,3.401,161,1.77,162,1.77,163,2.036,165,1.77,168,1.374,170,2.658,171,2.591,172,1.724,179,1.935,182,2.979,183,0.415,184,2.413,185,3.554,186,2.591,198,1.918,218,1.26,257,2.247,258,1.466,285,0.58,289,1.348,301,1.686,313,1.769,314,2.192,321,0.949,334,1.67,384,1.99,404,3.168,446,0.835,459,0.791,464,1.219,493,1.157,494,2.172,529,1.617,530,1.839,534,1.639,544,2.83,550,2.45,553,1.866,557,3.168,585,0.801,595,1.639,596,1.552,597,2.945,598,1.724,601,0.871,602,1.139,603,1.68,632,1.381,639,2.163,641,1.93,647,1.421,652,1.53,679,1.529,717,2.615,718,1.952,719,1.463,723,2.528,733,0.859,748,1.094,750,1.529,767,1.564,779,3.237,783,2.813,784,1.437,785,2.252,800,0.719,813,1.68,821,3.554,837,2.819,945,3.335,1023,1.601,1067,2.502,1146,1.77,1163,1.68,1178,3.691,1203,1.724,1330,1.575,1371,1.877,1454,3.387,1545,2.73,1546,3.745,1547,1.724,1548,1.77,1549,1.77,1555,1.77,1559,1.77,1563,1.77,1567,1.77,1640,1.77,1642,1.77,1643,1.77,1644,1.724,1647,5.575,1649,1.26,1654,2.591,1663,1.724,1670,1.724,1676,2.73,1680,1.77,1685,2.704,1686,1.564,1689,1.68,1690,1.724,1695,1.724,1696,2.591,1701,3.497,1704,1.68,1705,2.651,1769,2.73,1770,1.77,1860,1.68,1861,1.724,1862,1.724,1863,1.724,1864,1.724,1865,2.658,1866,1.564,1867,1.724,1893,0.486,1898,2.789,1916,2.194,1918,0.847,1951,1.053,1972,1.053,2010,2.296,2023,1.037,2030,1.77,2031,4.958,2032,2.88,2033,4.821,2034,1.82,2035,2.807,2036,2.76,2037,3.811,2038,2.469,2039,1.82,2040,1.53,2041,3.747,2042,3.157,2043,3.745,2044,3.102,2045,2.73,2046,4.907,2047,2.807,2048,3.852,2049,2.73,2050,1.82,2051,1.408,2052,1.77,2053,2.73,2054,1.77,2055,1.77,2056,2.658,2057,1.77,2058,1.77,2059,2.819,2060,2.503,2061,1.77,2062,1.724,2063,1.82,2064,1.77,2065,1.77,2066,1.77,2067,1.82,2068,1.82,2069,1.68,2070,1.53,2071,1.82,2072,2.591,2073,1.82,2074,1.53,2075,1.82,2076,2.658,2077,2.807,2078,2.807,2079,2.36,2080,2.36,2081,1.82,2082,1.77,2083,1.724,2084,1.82,2085,1.82]],["title/interfaces/IAreaAccessors.html",[9,3.57,40,0.003]],["body/interfaces/IAreaAccessors.html",[0,0.102,1,4.408,3,0.246,4,0.231,5,0.231,6,4.879,7,2.428,8,1.355,9,6.11,10,0.254,11,0.517,12,1.188,13,1.315,16,3.472,20,0.005,23,3.068,24,0.302,25,6.942,27,6.942,28,0.311,29,4.165,30,4.513,31,3.295,32,2.937,33,2.5,34,1.599,35,2.532,36,2.532,37,2.435,38,1.684,39,0.359,40,0.004,41,1.02,42,1.907,43,6.168,44,5.572,45,6.168,46,6.168,47,1.934,48,6.168,49,5.572,50,6.168,51,6.168,52,1.987,53,1.907,54,2.27,55,1.638,56,2.937,57,2.2,58,7.281,59,6.074,60,4.225,61,6.168,62,4.225,63,6.168,64,4.879,65,4.879,66,4.879,67,4.879,68,4.879,69,4.879,70,4.879,71,4.879,72,2.876,73,3.295,74,3.295,75,1.138,76,3.677,77,3.677,78,0.003,79,0.004,80,0.003,1893,0.953]],["title/interfaces/IAreaDataAccessors.html",[25,3.743,40,0.003]],["body/interfaces/IAreaDataAccessors.html",[0,0.096,1,4.154,3,0.232,4,0.218,5,0.218,6,4.597,7,2.288,8,1.276,9,5.364,10,0.239,11,0.498,12,0.962,13,1.065,16,3.271,20,0.005,23,2.891,24,0.379,25,6.584,27,6.23,28,0.3,29,4.01,30,4.345,31,3.105,32,2.767,33,2.594,34,1.403,35,2.7,36,2.437,37,2.368,38,1.587,39,0.351,40,0.004,41,0.998,42,2.225,43,7.196,44,6.501,45,7.196,46,7.196,47,2.256,48,7.196,49,6.501,50,7.196,51,7.196,52,1.913,53,1.836,54,2.139,55,1.544,56,2.767,57,2.179,58,7.24,59,6.04,60,3.981,61,5.937,62,3.981,63,5.937,64,4.597,65,4.597,66,4.597,67,4.597,68,4.597,69,4.597,70,4.597,71,4.597,72,2.71,73,3.105,74,3.105,75,1.096,76,3.465,77,3.465,78,0.003,79,0.004,80,0.003,1893,0.898]],["title/interfaces/IAreaRendererConfig.html",[40,0.003,2086,3.292]],["body/interfaces/IAreaRendererConfig.html",[0,0.122,3,0.183,4,0.172,5,0.172,10,0.189,11,0.424,12,1.144,13,0.65,20,0.005,21,0.85,22,1.348,24,0.309,28,0.369,34,0.857,38,1.251,39,0.369,40,0.005,41,0.906,52,1.631,53,1.121,78,0.002,79,0.003,80,0.002,85,0.758,89,2.185,90,0.921,102,2.292,109,1.776,126,1.076,136,0.889,145,1.724,154,2.987,160,2.865,164,1.443,168,1.31,183,0.845,198,2.273,213,2.07,214,2.333,218,1.836,222,1.324,244,1.324,251,2.338,257,2.156,259,3.301,267,2.914,272,4.394,285,1.36,289,1.701,294,1.136,296,2.819,297,2.819,298,3.506,299,3.586,300,3.113,301,2.1,303,2.541,306,2.819,309,2.819,310,2.448,313,1.595,321,1.382,327,2.28,328,1.423,331,2.389,332,2.333,333,1.305,336,1.902,337,1.974,585,1.168,641,1.771,733,1.747,748,1.8,790,3.301,795,1.987,800,1.463,815,3.752,972,2.244,1270,2.819,1373,4.687,1539,3.601,1598,2.819,1809,4.491,1810,3.601,1814,4.149,1893,0.708,1902,2.67,1903,2.531,1904,1.511,1916,1.828,1918,1.985,1922,2.713,1937,2.645,1957,3.179,2005,2.175,2010,1.287,2032,2.23,2036,4.053,2044,2.983,2051,4.075,2070,2.23,2086,4.216,2087,3.02,2088,5.464,2089,5.748,2090,5.748,2091,4.267,2092,4.382,2093,5.748,2094,5.049,2095,4.394,2096,4.382,2097,5.336,2098,5.53,2099,4.382,2100,2.914,2101,3.139,2102,2.511,2103,4.382,2104,2.511,2105,4.068,2106,4.216,2107,4.216,2108,4.068,2109,3.02,2110,3.02,2111,3.814,2112,2.448,2113,3.02,2114,4.857,2115,5.049,2116,4.216,2117,2.914,2118,3.139,2119,3.139,2120,3.139,2121,2.914,2122,3.139,2123,3.139,2124,3.139,2125,2.914,2126,4.382,2127,4.216,2128,2.914,2129,3.139,2130,4.382,2131,4.216,2132,2.732,2133,3.139,2134,3.139,2135,3.02,2136,3.02,2137,5.049,2138,3.139,2139,3.139,2140,3.02,2141,2.914,2142,3.139,2143,3.139,2144,3.139,2145,3.139,2146,3.139,2147,2.732]],["title/interfaces/IAreaSeriesAccessors.html",[27,3.743,40,0.003]],["body/interfaces/IAreaSeriesAccessors.html",[0,0.101,1,4.389,3,0.245,4,0.23,5,0.23,6,4.858,7,2.417,8,1.349,9,5.557,10,0.253,11,0.516,12,0.997,13,1.103,16,3.457,20,0.005,22,1.328,23,3.055,24,0.301,25,6.393,27,6.721,28,0.31,29,4.154,30,4.501,31,3.281,32,2.924,33,2.499,34,1.454,35,2.525,36,2.771,37,2.734,38,1.677,39,0.358,40,0.004,41,1.018,42,1.902,43,6.151,44,5.557,45,6.151,46,6.151,47,1.928,48,6.151,49,5.557,50,6.151,51,6.151,52,2.358,53,2.263,54,2.26,55,1.631,56,2.924,57,2.199,58,7.278,59,6.071,60,4.207,61,6.151,62,4.207,63,6.151,64,4.858,65,4.858,66,4.858,67,4.858,68,4.858,69,4.858,70,4.858,71,4.858,72,2.863,73,3.281,74,3.281,75,1.135,76,3.661,77,3.661,78,0.003,79,0.004,80,0.003,1893,0.948]],["title/interfaces/IAxis.html",[40,0.003,2083,2.738]],["body/interfaces/IAxis.html",[0,0.052,3,0.126,4,0.119,5,0.119,10,0.13,11,0.323,20,0.005,21,0.365,24,0.307,28,0.327,39,0.358,40,0.005,41,0.553,52,1.242,75,0.462,78,0.002,79,0.002,80,0.002,83,2.502,85,0.524,89,1.678,90,0.701,95,3.684,100,1.611,101,3.507,102,1.331,103,3.55,104,1.574,105,1.574,106,1.578,108,3.741,110,0.753,111,2.588,112,1.79,114,3.123,115,2.897,116,1.994,124,2.891,126,1.145,135,3.625,136,0.634,139,3.919,142,1.875,145,1.863,148,2.67,154,1.059,155,2.48,157,1.611,158,2.671,159,1.781,160,3.409,161,1.781,162,1.781,163,2.043,165,1.781,168,1.374,170,2.671,171,2.603,172,1.734,179,1.937,182,3.228,183,0.418,184,2.424,185,3.566,186,2.603,198,1.921,218,1.267,257,2.25,258,1.475,285,0.584,289,1.353,301,1.693,313,1.861,314,2.197,321,0.954,334,1.674,384,1.995,404,3.178,446,0.84,459,0.795,464,1.225,493,1.165,494,2.182,529,2.079,530,1.846,534,1.649,544,2.834,550,2.595,553,1.873,557,3.178,585,0.806,595,1.649,596,1.559,597,2.956,598,1.734,601,0.876,602,1.146,603,1.69,632,1.39,639,2.166,641,1.933,647,1.428,652,1.539,679,1.536,717,2.62,718,1.959,719,1.47,723,2.54,733,0.864,748,1.099,750,1.536,767,1.574,779,3.248,783,2.823,784,1.445,785,2.261,800,0.724,813,1.69,821,4.583,837,2.83,945,3.344,1023,1.611,1067,2.043,1146,1.781,1163,1.69,1178,3.699,1203,1.734,1330,1.582,1371,1.886,1454,3.398,1545,2.743,1546,3.758,1547,1.734,1548,1.781,1549,1.781,1555,1.781,1559,1.781,1563,1.781,1567,1.781,1640,1.781,1642,1.781,1643,1.781,1644,1.734,1647,5.578,1649,1.267,1654,2.603,1663,1.734,1670,1.734,1676,2.743,1680,1.781,1685,2.715,1686,1.574,1689,1.69,1690,1.734,1695,1.734,1696,2.603,1701,2.891,1704,1.69,1705,2.661,1769,2.743,1770,1.781,1860,1.69,1861,1.734,1862,1.734,1863,1.734,1864,1.734,1865,2.671,1866,1.574,1867,1.734,1893,0.489,1898,2.436,1916,1.655,1918,0.852,1951,1.059,1972,1.059,2010,2.3,2023,1.043,2030,1.781,2031,4.173,2032,2.371,2033,4.465,2034,1.832,2035,2.821,2036,2.771,2037,3.819,2038,2.48,2039,1.832,2040,1.539,2041,3.757,2042,3.165,2043,3.758,2044,3.112,2045,2.743,2046,4.914,2047,2.821,2048,3.864,2049,2.743,2050,1.832,2051,1.417,2052,1.781,2053,2.743,2054,1.781,2055,1.781,2056,2.671,2057,1.781,2058,1.781,2059,2.83,2060,2.823,2061,1.781,2062,1.734,2063,1.832,2064,1.781,2065,1.781,2066,1.781,2067,1.832,2068,1.832,2069,1.69,2070,1.539,2071,1.832,2072,2.603,2073,1.832,2074,1.539,2075,1.832,2076,2.671,2077,2.821,2078,2.821,2079,2.371,2080,2.371,2081,1.832,2082,1.781,2083,2.671,2084,3.864,2085,3.864]],["title/interfaces/IAxisConfig.html",[40,0.003,157,2.543]],["body/interfaces/IAxisConfig.html",[0,0.051,3,0.124,4,0.116,5,0.116,10,0.128,11,0.318,20,0.005,21,0.358,24,0.33,28,0.325,39,0.357,40,0.005,41,0.545,52,1.223,75,0.453,78,0.002,79,0.002,80,0.002,83,2.52,85,0.514,89,1.661,90,0.691,95,3.576,100,1.58,101,3.476,102,1.311,103,3.522,104,1.544,105,1.544,106,1.559,108,3.718,110,0.748,111,2.568,112,1.777,114,3.101,115,2.874,116,1.98,124,2.856,126,1.128,135,3.597,136,0.627,139,3.898,142,1.856,145,1.961,148,2.65,154,1.039,155,2.443,157,2.443,158,4.14,159,3.719,160,3.821,161,3.719,162,3.719,163,2.491,165,3.719,168,1.391,170,3.621,171,2.564,172,1.701,179,1.931,182,3.527,183,0.41,184,2.388,185,3.529,186,2.564,198,1.91,218,1.243,257,2.283,258,1.447,285,0.573,289,1.339,301,1.672,313,1.764,314,2.182,321,0.936,334,1.662,384,1.979,404,3.146,446,0.824,459,0.78,464,1.207,493,1.142,494,2.149,529,1.603,530,1.823,534,1.617,544,2.821,550,2.442,553,1.85,557,3.146,585,0.791,595,1.617,596,1.536,597,2.92,598,1.701,601,0.859,602,1.124,603,1.658,632,1.363,639,2.156,641,1.925,647,1.407,652,1.51,679,1.513,717,2.603,718,1.935,719,1.448,723,2.502,733,0.847,748,1.083,750,1.513,767,1.544,779,3.214,783,2.794,784,1.418,785,2.233,800,0.71,813,1.658,821,3.529,837,2.795,945,3.317,1023,1.58,1067,2.022,1146,1.747,1163,1.658,1178,3.895,1203,1.701,1330,1.559,1371,1.857,1454,3.363,1545,2.702,1546,3.719,1547,1.701,1548,1.747,1549,1.747,1555,1.747,1559,1.747,1563,1.747,1567,1.747,1640,1.747,1642,1.747,1643,1.747,1644,1.701,1647,5.568,1649,1.243,1654,2.564,1663,1.701,1670,1.701,1676,2.702,1680,1.747,1685,2.682,1686,1.544,1689,1.658,1690,1.701,1695,1.701,1696,2.564,1701,2.856,1704,2.564,1705,2.958,1769,2.702,1770,1.747,1860,1.658,1861,1.701,1862,1.701,1863,1.701,1864,1.701,1865,2.631,1866,1.544,1867,1.701,1893,0.479,1898,2.417,1916,1.638,1918,0.836,1951,1.039,1972,1.039,2010,2.44,2023,1.023,2030,1.747,2031,4.136,2032,2.335,2033,4.252,2034,1.796,2035,2.779,2036,3.08,2037,3.979,2038,2.443,2039,1.796,2040,1.51,2041,3.724,2042,3.137,2043,3.719,2044,3.08,2045,2.702,2046,4.965,2047,2.779,2048,3.825,2049,2.702,2050,1.796,2051,1.39,2052,1.747,2053,2.702,2054,1.747,2055,1.747,2056,2.631,2057,1.747,2058,1.747,2059,3.402,2060,2.482,2061,1.747,2062,1.701,2063,1.796,2064,1.747,2065,1.747,2066,1.747,2067,1.796,2068,2.779,2069,2.564,2070,2.335,2071,1.796,2072,2.564,2073,1.796,2074,1.51,2075,1.796,2076,2.631,2077,2.779,2078,2.779,2079,2.335,2080,2.335,2081,1.796,2082,1.747,2083,1.701,2084,1.796,2085,1.796]],["title/interfaces/IBandScale.html",[40,0.003,2148,3.176]],["body/interfaces/IBandScale.html",[3,0.19,4,0.179,5,0.179,10,0.334,12,0.843,13,0.677,17,0.667,20,0.005,24,0.291,28,0.263,34,0.892,39,0.389,40,0.005,41,0.967,42,1.167,47,1.183,75,1.099,78,0.002,79,0.003,80,0.002,95,1.814,97,1.821,110,0.857,112,1.484,119,1.567,126,1.545,128,2.135,134,2.421,136,0.836,142,1.847,145,1.888,168,1.363,179,1.853,182,2.135,183,0.63,187,0.856,196,1.484,226,2.016,229,2.043,231,1.821,249,3.807,273,1.821,284,2.464,285,0.88,289,1.725,313,0.954,326,2.843,334,1.857,336,1.418,337,2.054,368,2.043,379,3.921,441,2.761,581,1.984,649,3.142,771,1.944,773,2.614,774,1.249,783,2.781,785,2.502,787,1.183,789,4.131,811,2.236,852,3.142,895,3.924,1468,1.418,1503,2.372,1513,4.182,1617,2.843,1666,3.605,1668,2.933,1685,2.178,1705,2.945,1801,1.727,1893,0.736,1912,1.699,1915,2.382,1916,2.365,1941,3.091,2004,2.236,2027,2.202,2037,3.067,2040,3.2,2042,2.094,2059,2.271,2060,2.016,2079,2.32,2080,2.32,2112,3.513,2148,4.787,2149,3.032,2150,4.27,2151,5.559,2152,4.86,2153,4.631,2154,3.032,2155,3.032,2156,3.142,2157,3.142,2158,3.142,2159,4.358,2160,4.548,2161,3.807,2162,1.438,2163,3.142,2164,2.933,2165,3.032,2166,3.266,2167,3.266,2168,5.832,2169,3.921,2170,6.421,2171,2.843,2172,3.266,2173,4.505,2174,4.182,2175,2.684,2176,2.843,2177,2.843,2178,4.838,2179,4.824,2180,4.505,2181,2.933,2182,2.933,2183,4.824,2184,2.843,2185,2.843,2186,3.266,2187,3.266,2188,3.142,2189,2.843,2190,4.838,2191,3.266,2192,5.076,2193,2.843,2194,3.266,2195,3.266,2196,4.334,2197,3.266,2198,3.266,2199,3.266]],["title/interfaces/IBarAccessors.html",[40,0.003,205,3.422]],["body/interfaces/IBarAccessors.html",[0,0.095,3,0.229,4,0.215,5,0.215,7,2.26,8,1.261,10,0.389,11,0.494,12,1.252,13,1.412,16,3.231,20,0.005,23,2.856,24,0.288,28,0.33,29,3.978,30,4.31,31,3.067,32,2.733,33,2.435,34,1.545,38,1.568,39,0.33,40,0.004,41,0.993,52,1.898,53,1.822,54,2.113,55,1.978,56,2.733,57,1.278,72,2.677,73,3.067,74,3.067,75,1.323,76,3.423,77,3.423,78,0.003,79,0.004,80,0.003,110,0.952,149,2.677,164,1.295,168,1.156,196,2.233,202,3.65,203,4.841,204,4.31,205,5.661,207,5.762,209,4.841,210,4.31,213,2.545,214,2.922,215,6.538,216,3.208,217,3.208,218,2.299,219,4.841,220,3.146,221,4.841,222,2.768,223,6.279,224,4.841,225,4.841,226,3.495,227,6.279,228,4.841,229,2.567,230,6.279,231,2.062,232,6.279,233,6.279,234,4.841,235,4.841,236,6.279,237,4.841,238,1.836,239,4.841,240,4.841,241,4.841,242,4.841,243,4.841,244,1.659,245,1.783,246,5.1,247,4.841,248,4.841,249,3.323,250,4.841,251,1.682,252,4.841,253,4.841,254,2.26,1893,0.887]],["title/interfaces/IBarChartConfig.html",[40,0.003,448,3.951]],["body/interfaces/IBarChartConfig.html",[3,0.301,4,0.283,5,0.283,10,0.311,11,0.585,20,0.005,22,1.425,24,0.341,39,0.352,40,0.005,78,0.004,79,0.005,80,0.004,85,1.249,145,2.039,168,1.233,216,3.252,217,3.252,257,1.872,259,3.38,404,4.582,448,6.973,771,3.078,1893,1.166,2200,6.893,2201,8.787,2202,6.365]],["title/interfaces/IBarDataAccessors.html",[40,0.003,207,3.176]],["body/interfaces/IBarDataAccessors.html",[0,0.09,3,0.218,4,0.204,5,0.204,7,2.146,8,1.197,10,0.384,11,0.477,12,1.197,13,1.374,16,3.069,20,0.005,22,1.434,23,2.712,24,0.367,28,0.322,29,3.846,30,4.167,31,2.912,32,2.596,33,2.566,34,1.346,38,1.489,39,0.322,40,0.004,41,0.973,52,2.271,53,2.18,54,2.007,55,1.912,56,2.596,57,1.214,72,2.542,73,2.912,74,2.912,75,1.301,76,3.25,77,3.25,78,0.003,79,0.004,80,0.003,110,0.956,149,2.542,164,1.23,168,1.128,196,2.216,202,3.467,203,4.597,204,4.167,205,4.931,207,5.451,209,4.306,210,4.666,213,2.503,214,2.775,215,7.242,216,3.84,217,3.84,218,3.434,219,7.229,220,2.988,221,4.597,222,2.738,223,6.07,224,4.597,225,4.597,226,3.408,227,6.07,228,4.597,229,2.503,230,6.07,231,1.994,232,6.07,233,6.07,234,4.597,235,4.597,236,6.07,237,4.597,238,1.744,239,4.597,240,4.597,241,4.597,242,4.597,243,4.597,244,1.575,245,1.693,246,4.931,247,4.597,248,4.597,249,3.156,250,4.597,251,1.598,252,4.597,253,4.597,254,2.146,1893,0.842]],["title/interfaces/IBarRendererConfig.html",[40,0.003,2135,3.292]],["body/interfaces/IBarRendererConfig.html",[0,0.119,3,0.177,4,0.166,5,0.166,10,0.182,11,0.414,12,1.102,13,0.628,20,0.005,21,0.834,22,1.427,24,0.342,28,0.366,34,0.828,38,1.209,39,0.366,40,0.005,41,0.892,52,1.592,53,1.083,78,0.002,79,0.003,80,0.002,85,0.733,89,1.819,90,1.041,102,2.464,109,1.611,126,1.04,136,0.901,145,1.884,154,2.958,160,3.85,164,1.409,168,1.328,183,0.824,198,2.284,213,2.032,214,2.254,218,2.502,222,1.279,244,1.804,251,2.12,257,2.132,259,3.85,267,3.971,272,4.94,285,1.152,289,1.679,294,1.098,296,2.723,297,2.723,298,3.423,299,3.52,300,3.038,301,2.061,303,2.517,306,2.723,309,2.723,310,2.365,313,1.447,321,1.336,327,2.203,328,1.375,331,2.308,332,2.254,333,1.261,336,1.316,337,1.908,585,1.592,641,1.748,733,1.976,748,1.869,790,3.24,795,1.94,800,1.654,815,4,972,2.19,1270,3.841,1373,3.971,1539,4.073,1598,2.723,1809,4.423,1810,3.515,1814,4.073,1893,0.684,1902,2.774,1903,2.37,1904,1.46,1916,1.794,1918,2.116,1922,2.298,1937,2.612,1957,3.149,2005,2.123,2010,1.244,2032,3.038,2036,4.009,2044,3.373,2051,4.04,2070,2.154,2086,2.918,2087,2.918,2088,3.033,2089,4.278,2090,4.278,2091,4.188,2092,3.033,2093,4.956,2094,4.278,2095,3.723,2096,3.033,2097,4.601,2098,5.46,2099,3.033,2100,2.815,2101,3.033,2102,2.427,2103,4.278,2104,2.427,2105,3.971,2106,4.115,2107,4.115,2108,3.971,2109,2.918,2110,2.918,2111,3.723,2112,2.365,2113,2.918,2114,4.768,2115,4.956,2116,4.115,2117,2.815,2118,3.033,2119,3.033,2120,3.033,2121,2.815,2122,3.033,2123,3.033,2124,3.033,2125,2.815,2126,4.956,2127,4.768,2128,2.815,2129,3.033,2130,4.278,2131,4.115,2132,2.64,2133,3.033,2134,3.033,2135,4.115,2136,4.115,2137,5.889,2138,5.382,2139,5.382,2140,4.115,2141,3.971,2142,5.382,2143,4.278,2144,4.278,2145,4.278,2146,5.382,2147,2.64]],["title/interfaces/IBorderConfig.html",[40,0.003,1689,2.668]],["body/interfaces/IBorderConfig.html",[0,0.08,3,0.126,4,0.118,5,0.118,10,0.13,11,0.323,20,0.005,21,0.561,22,1.212,24,0.307,28,0.327,39,0.358,40,0.005,41,0.553,52,1.94,75,0.461,78,0.002,79,0.002,80,0.002,83,2.51,85,0.523,89,1.677,90,0.701,95,3.484,100,1.609,101,3.703,102,1.33,103,3.549,104,1.572,105,1.572,106,1.577,108,3.74,110,0.753,111,2.587,112,1.789,114,3.121,115,2.895,116,1.994,124,2.889,126,1.144,135,3.624,136,0.777,139,3.918,142,1.874,145,1.912,148,2.669,154,1.058,155,3.396,157,1.609,158,2.668,159,1.779,160,3.408,161,1.779,162,1.779,163,2.506,165,1.779,168,1.381,170,2.668,171,2.601,172,1.732,179,1.936,182,2.987,183,0.417,184,2.422,185,3.564,186,2.601,198,1.921,218,1.95,257,2.271,258,1.474,285,0.583,289,1.352,301,1.692,313,1.771,314,2.196,321,0.953,334,1.673,384,1.994,404,3.177,446,0.839,459,0.795,464,1.224,493,1.163,494,2.18,529,1.622,530,1.844,534,1.647,544,2.834,550,2.453,553,1.872,557,3.177,585,0.806,595,1.647,596,1.558,597,2.954,598,1.732,601,0.875,602,1.145,603,1.688,632,1.388,639,2.165,641,1.977,647,1.427,652,1.538,679,1.535,717,2.619,718,1.958,719,1.469,723,2.538,733,0.863,748,1.098,750,1.535,767,1.572,779,3.246,783,2.821,784,1.444,785,2.259,800,0.723,813,1.688,821,3.564,837,2.828,945,3.342,1023,1.609,1067,2.042,1146,1.779,1163,1.688,1178,3.817,1203,1.732,1330,1.581,1371,1.884,1454,3.396,1545,2.741,1546,3.755,1547,1.732,1548,1.779,1549,1.779,1555,1.779,1559,1.779,1563,1.779,1567,1.779,1640,1.779,1642,1.779,1643,1.779,1644,1.732,1647,5.577,1649,1.266,1654,2.601,1663,1.732,1670,1.732,1676,2.741,1680,1.779,1685,2.713,1686,1.572,1689,2.601,1690,1.732,1695,1.732,1696,2.601,1701,2.889,1704,1.688,1705,2.659,1769,2.741,1770,1.779,1860,1.688,1861,1.732,1862,1.732,1863,1.732,1864,1.732,1865,2.668,1866,1.572,1867,1.732,1893,0.488,1898,2.435,1916,1.654,1918,0.851,1951,1.058,1972,1.058,2010,2.359,2023,1.042,2030,1.779,2031,4.171,2032,2.369,2033,4.284,2034,1.83,2035,2.818,2036,2.769,2037,3.817,2038,2.478,2039,1.83,2040,1.538,2041,3.755,2042,3.164,2043,3.755,2044,3.111,2045,2.741,2046,4.913,2047,2.818,2048,3.862,2049,2.741,2050,1.83,2051,2.18,2052,3.755,2053,2.741,2054,1.779,2055,1.779,2056,2.668,2057,1.779,2058,1.779,2059,2.828,2060,2.511,2061,1.779,2062,1.732,2063,1.83,2064,1.779,2065,1.779,2066,1.779,2067,1.83,2068,1.83,2069,1.688,2070,1.538,2071,1.83,2072,2.601,2073,1.83,2074,1.538,2075,1.83,2076,2.668,2077,2.818,2078,2.818,2079,2.369,2080,2.369,2081,1.83,2082,1.779,2083,1.732,2084,1.83,2085,1.83]],["title/interfaces/IBorders.html",[40,0.003,1690,2.738]],["body/interfaces/IBorders.html",[0,0.053,3,0.129,4,0.121,5,0.121,20,0.005,21,0.373,24,0.233,28,0.329,39,0.36,40,0.005,41,0.684,52,1.263,75,0.472,78,0.002,79,0.003,80,0.002,83,2.509,85,0.535,89,1.698,90,0.713,95,3.5,100,1.647,101,3.737,102,1.354,103,3.582,104,1.609,105,1.609,106,1.6,108,3.863,110,0.759,111,2.718,112,1.804,114,3.247,115,3.042,116,2.074,124,2.931,126,1.164,135,3.658,136,0.641,139,3.943,142,1.897,145,1.872,148,2.694,154,1.083,155,2.523,157,1.647,158,2.716,159,1.821,160,3.44,161,1.821,162,1.821,163,2.067,165,1.821,168,1.378,170,2.716,171,2.648,172,1.773,179,1.943,182,3.024,183,0.427,184,2.466,185,3.608,186,2.648,198,1.934,218,1.296,257,2.26,258,1.508,285,0.597,289,1.369,301,1.716,313,1.781,314,2.214,321,0.976,334,1.687,384,2.012,404,3.216,446,0.859,459,0.813,464,1.246,493,1.191,494,2.219,529,1.645,530,1.871,534,1.686,544,2.849,550,2.466,553,1.899,557,3.216,585,0.825,595,1.686,596,1.586,597,2.997,598,1.773,601,0.896,602,1.171,603,1.728,632,1.421,639,2.176,641,1.941,647,1.453,652,1.574,679,1.562,717,2.639,718,1.986,719,1.495,723,2.583,733,0.883,748,1.118,750,1.562,767,1.609,779,3.286,783,2.856,784,1.478,785,2.292,800,0.74,813,1.728,821,3.608,837,2.869,945,3.373,1023,1.647,1067,2.067,1146,1.821,1163,1.728,1178,3.728,1203,1.773,1330,1.61,1371,1.918,1454,3.437,1545,2.79,1546,3.801,1547,1.773,1548,1.821,1549,1.821,1555,1.821,1559,1.821,1563,1.821,1567,1.821,1640,1.821,1642,1.821,1643,1.821,1644,1.773,1647,5.589,1649,1.296,1654,2.648,1663,1.773,1670,1.773,1676,2.79,1680,1.821,1685,2.752,1686,1.609,1689,1.728,1690,2.716,1695,1.773,1696,2.648,1701,2.931,1704,1.728,1705,2.698,1769,2.79,1770,2.79,1860,1.728,1861,1.773,1862,1.773,1863,1.773,1864,1.773,1865,2.716,1866,1.609,1867,1.773,1893,0.5,1898,2.558,1916,1.675,1918,0.871,1951,1.083,1972,1.083,2010,2.317,2023,1.067,2030,1.821,2031,4.215,2032,2.412,2033,4.501,2034,1.873,2035,2.869,2036,2.809,2037,3.846,2038,2.523,2039,1.873,2040,1.574,2041,3.795,2042,3.197,2043,3.801,2044,3.149,2045,2.79,2046,4.941,2047,2.869,2048,3.909,2049,2.79,2050,2.869,2051,1.449,2052,1.821,2053,2.79,2054,1.821,2055,1.821,2056,2.716,2057,1.821,2058,1.821,2059,2.869,2060,2.548,2061,1.821,2062,1.773,2063,1.873,2064,1.821,2065,1.821,2066,1.821,2067,1.873,2068,1.873,2069,1.728,2070,1.574,2071,1.873,2072,2.648,2073,1.873,2074,1.574,2075,1.873,2076,2.716,2077,2.869,2078,2.869,2079,2.412,2080,2.412,2081,1.873,2082,1.821,2083,1.773,2084,1.873,2085,1.873]],["title/interfaces/IChart.html",[40,0.003,464,1.256]],["body/interfaces/IChart.html",[3,0.119,4,0.112,5,0.112,10,0.266,11,0.429,12,1.255,13,1.34,17,1.203,19,1.693,20,0.005,21,0.973,22,1.222,24,0.338,28,0.349,33,1.17,34,0.558,35,1.511,36,1.511,37,1.326,39,0.398,40,0.005,41,0.912,42,1.716,47,1.739,53,1.138,57,1.654,75,0.836,78,0.002,79,0.002,80,0.002,83,1.479,89,1.17,90,1.29,97,1.585,102,0.814,106,0.792,110,0.442,116,0.75,119,0.621,131,2.354,136,0.875,145,1.733,163,0.913,164,1.812,168,1.288,179,1.766,183,1.24,187,0.535,198,1.479,213,1.97,222,1.345,229,0.926,238,2.243,244,0.861,245,0.926,251,2.473,254,1.174,257,1.154,273,1.289,284,1.479,285,1.294,287,0.954,289,1.311,294,0.739,303,1.998,313,1.293,314,1.942,328,0.926,333,1.842,334,1.207,368,0.926,384,1.694,399,1.116,411,0.954,417,1.014,439,0.983,443,2.21,444,1.534,446,2.062,447,2.312,453,1.607,455,1.976,459,1.763,464,1.626,466,1.511,481,2.242,529,2.029,530,1.777,532,4.249,534,2.426,535,2.637,536,2.637,537,2.637,538,2.637,540,4.249,542,4.249,544,1.831,546,2.215,550,1.942,552,1.897,553,2.038,558,1.897,562,2.334,566,2.334,569,2.723,571,2.723,576,1.897,577,2.233,579,2.723,580,1.864,581,2.242,583,2.514,585,1.186,594,1.194,596,0.954,600,1.216,601,1.289,604,1.216,639,0.72,641,0.982,647,2.178,651,1.741,679,0.94,717,1.489,718,1.887,719,1.951,733,0.814,734,1.097,748,1.459,750,0.94,752,1.887,755,2.038,758,1.062,766,0.983,774,1.219,780,1.08,787,1.739,795,0.926,800,1.479,802,2.526,811,1.014,825,1.194,830,1.194,892,1.116,934,1.134,948,1.541,972,1.632,1007,1.046,1060,1.154,1061,1.216,1062,1.216,1063,1.216,1065,2.233,1067,0.913,1069,0.968,1186,2.132,1201,2.268,1218,1.154,1219,1.154,1236,2.141,1247,1.174,1267,1.097,1269,1.713,1323,1.976,1330,1.511,1432,1.154,1444,2.502,1468,1.384,1613,2.268,1634,1.154,1693,1.194,1737,1.216,1750,1.134,1781,1.216,1801,2.072,1893,0.46,1894,1.194,1895,1.238,1896,1.897,1897,1.741,1898,1.489,1899,1.216,1900,1.194,1901,1.216,1902,0.998,1903,0.899,1904,0.983,1905,2.334,1906,1.194,1907,1.174,1908,2.334,1909,1.238,1910,1.194,1911,1.194,1912,1.062,1913,1.216,1914,1.216,1915,1.685,1916,1.843,1917,1.08,1918,1.742,1919,3.14,1920,1.238,1921,1.801,1922,1.097,1923,2.334,1924,1.238,1925,1.932,1926,1.897,1927,1.897,1928,1.238,1929,1.897,1930,2.253,1931,1.801,1932,1.238,1933,1.046,1934,1.238,1935,1.154,1936,1.154,1937,1.804,1938,1.116,1939,1.238,1940,1.238,1941,0.926,1942,1.238,1943,1.194,1944,1.832,1945,1.897,1946,1.216,1947,1.897,1948,1.238,1949,1.194,1950,1.238,1951,2.488,1952,1.238,1953,1.216,1954,1.238,1955,1.897,1956,1.194,1957,1.062,1958,1.216,1959,1.216,1960,1.238,1961,1.238,1962,1.932,1963,1.238,1964,1.238,1965,1.216,1966,1.932,1967,1.238,1968,1.216,1969,1.174,1970,1.238,1971,1.238,1972,1.558,1973,1.216,1974,1.887,1975,1.238,1976,1.216,1977,1.216,1978,1.238,1979,1.238,1980,1.238,1981,1.216,1982,1.238,1983,1.046,1984,1.134,1985,1.216,1986,1.238,1987,1.238,1988,1.238,1989,1.238,1990,1.194,1991,1.216,1992,1.194,1993,1.194,1994,1.238,1995,1.932,1996,2.637,1997,1.238,1998,1.216,1999,1.238,2000,1.238,2001,1.238,2002,1.238,2003,1.238,2004,1.582,2005,1.014,2006,1.238,2007,1.238,2008,1.801,2009,1.194,2010,1.307,2011,1.194,2012,1.238,2013,1.238,2014,1.801,2015,1.932,2016,1.238,2017,1.238,2018,2.177,2019,1.832,2020,2.177,2021,1.216,2022,1.194,2023,0.983,2024,1.216,2025,1.194,2026,1.174,2027,0.998,2028,1.238,2029,1.062,2203,3.039,2204,3.039,2205,3.039,2206,3.039,2207,3.039,2208,3.039,2209,3.039,2210,3.039,2211,3.039,2212,3.039,2213,3.039]],["title/interfaces/IChartAssist.html",[40,0.003,778,3.292]],["body/interfaces/IChartAssist.html",[0,0.118,3,0.217,4,0.203,5,0.203,8,1.192,10,0.223,13,1.393,17,1.125,19,1.732,20,0.005,21,1.054,22,1.063,24,0.311,28,0.286,34,1.015,39,0.365,40,0.005,75,1.048,78,0.003,79,0.004,80,0.003,85,1.331,90,1.413,94,1.464,110,0.899,126,1.275,136,0.942,163,2.461,168,1.004,179,1.878,183,0.947,187,0.974,196,1.224,198,2.132,238,2.296,273,1.987,283,4.163,284,2.211,287,2.925,295,2.973,333,2.044,334,1.805,394,3.054,411,2.296,432,3.337,446,1.906,459,1.364,464,1.804,487,3.673,577,2.478,581,2.684,602,1.965,652,3.491,745,4.915,746,5.638,747,3.878,748,1.224,749,5.299,750,1.71,751,4.066,752,2.651,753,4.066,754,4.066,755,2.262,756,4.066,758,3.373,766,1.789,767,4,768,5.746,769,4.066,770,3.575,771,2.212,772,3.716,773,2.973,774,1.421,775,5.377,776,5.377,777,4.563,778,4.729,779,3.491,780,2.598,781,4.915,782,4.915,783,3.034,784,3.278,785,2.73,786,4.414,787,1.78,788,5.638,789,4.355,790,3.213,791,4.915,792,5.128,793,5.861,794,3.716,795,1.685,796,4.915,797,4.915,798,4.915,799,4.915,800,1.241,801,3.716,802,1.844,803,3.141,804,4.066,805,4.066,806,2.973,807,3.716,1893,0.838,2214,6.552,2215,5.53,2216,5.53,2217,5.53]],["title/interfaces/IChartAssistEvent.html",[40,0.003,801,3.422]],["body/interfaces/IChartAssistEvent.html",[0,0.125,3,0.236,4,0.222,5,0.222,8,1.299,10,0.243,11,0.504,13,1.351,20,0.005,21,0.876,24,0.362,28,0.303,34,1.106,39,0.374,40,0.005,75,0.864,78,0.003,79,0.004,80,0.003,85,0.979,90,1.402,94,1.526,110,0.84,126,1.39,136,0.925,163,2.324,168,0.828,179,1.559,183,0.781,187,1.062,196,1.335,198,2.023,238,2.429,283,3.694,284,1.962,287,2.682,333,2.162,334,1.866,394,3.33,411,1.892,432,3.639,459,1.487,464,1.909,487,3.468,577,2.621,581,2.529,602,2.142,652,2.878,745,5.2,746,3.898,747,4.228,748,1.335,749,5.829,750,1.864,751,4.433,752,2.764,753,4.433,754,4.433,755,2.393,756,4.433,758,3.259,766,1.95,767,3.777,768,5.426,769,4.433,770,3.898,771,2.412,772,4.052,773,3.242,774,1.55,775,4.433,776,4.433,777,3.762,778,3.898,779,2.878,780,2.142,781,4.052,782,4.052,783,2.501,784,2.702,785,2.251,786,3.639,787,1.467,788,5.003,789,3.864,790,2.649,791,4.052,792,4.228,793,4.052,794,4.052,795,1.837,796,6.058,797,5.2,798,5.2,799,5.2,800,1.736,801,5.2,802,3.007,803,3.424,804,4.433,805,4.433,806,3.242,807,4.052,1893,0.914]],["title/interfaces/IChartAssistSeries.html",[40,0.003,758,1.78]],["body/interfaces/IChartAssistSeries.html",[3,0.126,4,0.119,5,0.119,10,0.275,11,0.443,12,1.262,13,1.352,20,0.005,21,0.831,22,1.127,24,0.332,28,0.354,33,1.225,34,0.592,35,1.582,36,1.582,37,1.388,39,0.399,40,0.005,41,0.954,42,1.764,47,1.788,53,1.192,57,1.695,75,0.868,78,0.002,79,0.002,80,0.002,83,1.535,89,1.225,90,1.306,97,1.646,102,0.864,106,0.84,110,0.463,116,0.795,119,0.659,131,2.4,136,0.884,145,1.863,163,0.968,164,1.848,168,1.302,183,1.185,187,0.568,198,1.526,213,2.025,222,1.408,229,0.983,238,2.306,244,0.914,245,0.983,251,2.514,254,1.246,257,1.208,284,1.535,285,1.33,287,1.012,289,1.353,294,0.785,303,2.053,313,1.335,314,1.996,328,0.983,333,2.393,334,1.254,368,0.983,384,0.829,399,1.184,411,1.012,417,1.076,439,1.043,443,1.536,444,1.607,446,1.915,447,1.607,453,1.682,455,2.052,459,1.812,464,1.494,466,1.582,481,2.174,529,1.969,530,1.513,535,1.29,536,1.29,537,1.29,538,1.29,544,1.559,546,1.224,550,1.646,552,1.29,553,1.536,558,1.29,562,1.987,566,1.987,576,1.29,577,1.682,580,1.267,581,2.174,585,1.242,594,1.267,596,1.012,600,1.29,601,1.349,604,1.29,639,0.764,641,1.028,647,2.231,651,1.823,679,0.997,717,1.559,718,1.959,719,2.014,733,0.864,734,1.165,748,1.506,750,0.997,752,1.959,755,2.104,758,1.736,766,1.043,774,1.277,780,1.146,787,1.788,795,0.983,800,1.526,802,2.588,811,1.076,825,1.267,830,1.267,892,1.184,934,1.204,948,1.6,972,1.709,1007,1.11,1060,1.224,1061,1.29,1062,1.29,1063,1.29,1065,2.305,1067,0.968,1069,1.028,1186,2.201,1201,2.341,1218,1.224,1219,1.224,1236,2.223,1247,1.246,1267,1.165,1269,1.793,1323,2.052,1330,1.582,1432,1.224,1444,2.583,1468,1.449,1613,2.341,1634,1.224,1693,1.267,1737,1.29,1750,1.204,1781,1.29,1801,2.152,1893,0.489,1894,1.267,1895,1.314,1896,1.987,1897,1.823,1898,1.559,1899,1.29,1900,1.267,1901,1.29,1902,1.059,1903,0.954,1904,1.043,1905,2.423,1906,1.267,1907,1.246,1908,2.423,1909,1.314,1910,1.267,1911,1.267,1912,1.128,1913,1.29,1914,1.29,1915,1.765,1916,1.888,1917,1.146,1918,1.798,1919,3.196,1920,1.314,1921,1.886,1922,1.165,1923,2.423,1924,1.314,1925,2.023,1926,1.987,1927,1.987,1928,1.314,1929,1.987,1930,2.339,1931,1.886,1932,1.314,1933,1.11,1934,1.314,1935,1.224,1936,1.224,1937,1.873,1938,1.184,1939,1.314,1940,1.314,1941,0.983,1942,1.314,1943,1.267,1944,1.918,1945,1.987,1946,1.29,1947,1.987,1948,1.314,1949,1.267,1950,1.314,1951,2.549,1952,1.314,1953,1.29,1954,1.314,1955,1.987,1956,1.267,1957,1.128,1958,1.29,1959,1.29,1960,1.314,1961,1.314,1962,2.023,1963,1.314,1964,1.314,1965,1.29,1966,2.023,1967,1.314,1968,1.29,1969,1.246,1970,1.314,1971,1.314,1972,1.631,1973,1.29,1974,1.959,1975,1.314,1976,1.29,1977,1.29,1978,1.314,1979,1.314,1980,1.314,1981,1.29,1982,1.314,1983,1.11,1984,1.204,1985,1.29,1986,1.314,1987,1.314,1988,1.314,1989,1.314,1990,2.674,1991,2.722,1992,1.267,1993,1.267,1994,1.314,1995,2.023,1996,2.722,1997,1.314,1998,1.29,1999,1.314,2000,1.314,2001,1.314,2002,1.314,2003,1.314,2004,1.657,2005,1.076,2006,1.314,2007,1.314,2008,1.886,2009,1.267,2010,1.369,2011,1.267,2012,1.314,2013,1.314,2014,1.886,2015,2.023,2016,1.314,2017,1.314,2018,2.261,2019,1.918,2020,2.261,2021,1.29,2022,1.267,2023,1.043,2024,1.29,2025,1.267,2026,1.246,2027,1.059,2028,1.314,2029,1.128]],["title/interfaces/IChartEvent.html",[40,0.003,601,1.383]],["body/interfaces/IChartEvent.html",[3,0.127,4,0.119,5,0.119,10,0.276,11,0.444,12,1.271,13,1.354,20,0.005,21,0.834,22,0.726,24,0.326,28,0.354,33,1.232,34,0.596,35,1.591,36,1.591,37,1.396,39,0.4,40,0.005,41,0.932,42,1.769,47,1.794,53,1.199,57,1.7,75,0.872,78,0.002,79,0.003,80,0.002,83,1.543,89,1.232,90,1.308,97,1.653,102,0.87,106,0.847,110,0.465,116,0.801,119,0.664,131,2.406,136,0.885,145,1.823,163,0.976,164,1.852,168,1.304,183,1.187,187,0.572,198,1.532,213,2.031,222,1.416,229,0.99,238,2.314,244,0.921,245,0.99,251,2.519,254,1.255,257,1.215,284,1.543,285,1.334,287,1.02,289,1.358,294,0.79,303,2.06,313,1.34,314,2.003,328,0.99,333,1.909,334,1.26,368,0.99,384,0.835,399,1.193,411,1.02,417,1.084,439,1.051,443,1.545,444,1.616,446,1.921,447,1.616,453,1.692,455,2.061,459,1.818,464,1.501,466,1.591,481,2.182,529,1.975,530,1.522,535,1.3,536,1.3,537,1.3,538,1.3,544,1.568,546,1.233,550,1.653,552,1.3,553,1.545,558,1.3,562,1.998,566,1.998,576,1.3,577,1.692,580,1.277,581,2.021,585,1.249,594,1.277,596,1.02,600,1.3,601,1.653,604,1.3,639,0.769,641,1.034,647,2.238,651,1.834,679,1.005,717,1.568,718,1.968,719,2.021,733,0.87,734,1.173,748,1.512,750,1.005,752,1.968,755,2.112,758,1.136,766,1.051,774,1.284,780,1.154,787,1.794,795,0.99,800,1.532,802,2.596,811,1.084,825,1.277,830,1.277,892,1.193,934,1.213,948,1.608,972,1.719,1007,1.118,1060,1.233,1061,1.3,1062,1.3,1063,1.3,1065,2.314,1067,0.976,1069,1.035,1186,2.209,1201,2.35,1218,1.233,1219,1.233,1236,2.234,1247,1.255,1267,1.173,1269,1.804,1323,2.061,1330,1.591,1432,1.233,1444,2.593,1468,1.457,1613,2.35,1634,1.233,1693,1.277,1737,1.3,1750,1.213,1781,1.3,1801,2.162,1893,0.492,1894,1.277,1895,1.323,1896,1.998,1897,1.834,1898,1.568,1899,1.3,1900,1.277,1901,1.3,1902,1.067,1903,0.961,1904,1.051,1905,2.434,1906,1.277,1907,1.255,1908,2.434,1909,1.323,1910,1.277,1911,1.277,1912,1.136,1913,1.3,1914,1.3,1915,1.775,1916,2.036,1917,1.154,1918,1.805,1919,3.203,1920,1.323,1921,1.896,1922,1.173,1923,2.434,1924,1.323,1925,2.034,1926,1.998,1927,1.998,1928,1.323,1929,1.998,1930,2.35,1931,1.896,1932,1.323,1933,1.118,1934,1.323,1935,1.233,1936,1.233,1937,1.882,1938,1.193,1939,1.323,1940,1.323,1941,0.99,1942,1.323,1943,1.277,1944,1.929,1945,1.998,1946,1.3,1947,1.998,1948,1.323,1949,1.277,1950,1.323,1951,2.556,1952,1.323,1953,1.3,1954,1.323,1955,1.998,1956,1.277,1957,1.136,1958,1.3,1959,1.3,1960,1.323,1961,1.323,1962,2.034,1963,1.323,1964,1.323,1965,1.3,1966,2.034,1967,1.323,1968,1.3,1969,1.255,1970,1.323,1971,1.323,1972,1.64,1973,1.3,1974,1.968,1975,1.323,1976,1.3,1977,1.3,1978,1.323,1979,1.323,1980,1.323,1981,1.3,1982,1.323,1983,1.118,1984,1.213,1985,1.3,1986,1.323,1987,1.323,1988,1.323,1989,1.323,1990,1.277,1991,1.3,1992,1.277,1993,1.277,1994,1.323,1995,2.034,1996,2.732,1997,1.323,1998,1.3,1999,1.323,2000,1.323,2001,2.782,2002,1.323,2003,1.323,2004,1.666,2005,1.084,2006,1.323,2007,1.323,2008,1.896,2009,1.277,2010,1.376,2011,1.277,2012,1.323,2013,1.323,2014,1.896,2015,2.034,2016,1.323,2017,1.323,2018,2.271,2019,1.929,2020,2.271,2021,1.3,2022,1.277,2023,1.051,2024,1.3,2025,1.277,2026,1.255,2027,1.067,2028,1.323,2029,1.136]],["title/interfaces/IChartMarker.html",[40,0.003,1007,1.752]],["body/interfaces/IChartMarker.html",[3,0.127,4,0.119,5,0.119,10,0.275,11,0.324,12,1.263,13,1.353,17,0.683,19,0.766,20,0.005,21,0.879,22,0.47,24,0.317,28,0.354,33,1.228,34,0.593,35,1.586,36,1.586,37,1.391,39,0.4,40,0.005,41,0.931,42,1.766,47,1.79,52,0.809,53,1.195,57,1.697,75,0.869,78,0.002,79,0.003,80,0.002,83,1.538,89,1.228,90,1.307,97,1.649,102,0.867,106,0.843,110,0.464,116,0.798,119,0.661,131,2.402,136,0.901,145,1.764,163,0.971,164,1.849,168,1.303,179,1.003,183,1.198,187,0.57,198,1.529,213,2.027,222,1.411,229,0.985,238,2.309,244,0.917,245,0.985,251,2.516,254,1.249,257,1.211,273,1.352,284,1.538,285,1.332,287,1.015,289,1.355,294,0.787,303,2.056,313,1.337,314,1.999,328,0.985,333,1.904,334,1.256,368,0.985,384,0.831,399,1.187,411,1.015,417,1.079,439,1.046,443,1.539,444,1.61,446,1.917,447,1.61,453,1.686,455,2.055,459,1.815,464,1.497,466,1.586,481,2.177,529,1.971,530,1.517,535,1.294,536,1.294,537,1.294,538,1.294,544,1.562,546,1.228,550,1.649,552,1.294,553,1.539,558,1.294,562,1.991,566,1.991,576,1.294,577,1.686,580,1.271,581,2.017,585,1.245,594,1.271,596,1.015,600,1.294,601,1.352,604,1.294,639,0.766,641,1.03,647,2.234,651,1.827,679,1,717,1.562,718,1.963,719,2.017,733,0.867,734,1.168,748,1.508,750,1,752,1.963,755,2.107,758,1.131,766,1.046,774,1.279,780,1.149,787,1.79,795,0.985,800,1.529,802,2.591,811,1.079,825,1.271,830,1.271,892,1.187,934,1.207,948,1.603,972,1.713,1007,1.713,1060,1.228,1061,1.294,1062,1.294,1063,1.294,1065,2.308,1067,0.971,1069,1.03,1186,2.204,1201,2.345,1218,1.228,1219,1.228,1236,2.227,1247,1.249,1267,1.168,1269,1.797,1323,2.055,1330,1.586,1432,1.228,1444,2.587,1468,1.452,1613,2.345,1634,1.228,1693,1.271,1737,1.294,1750,1.207,1781,1.294,1801,2.156,1893,0.49,1894,1.271,1895,1.317,1896,1.991,1897,1.827,1898,1.562,1899,1.294,1900,1.271,1901,1.294,1902,1.062,1903,0.957,1904,1.046,1905,2.427,1906,1.271,1907,1.249,1908,2.427,1909,1.317,1910,1.271,1911,1.271,1912,1.131,1913,1.294,1914,1.294,1915,1.768,1916,1.89,1917,1.149,1918,1.8,1919,3.199,1920,1.317,1921,1.89,1922,1.168,1923,2.427,1924,1.317,1925,2.027,1926,1.991,1927,1.991,1928,1.317,1929,1.991,1930,2.343,1931,1.89,1932,1.317,1933,1.113,1934,1.317,1935,1.228,1936,1.228,1937,1.876,1938,1.187,1939,1.317,1940,1.317,1941,0.985,1942,1.317,1943,1.271,1944,1.922,1945,1.991,1946,1.294,1947,1.991,1948,1.317,1949,1.271,1950,1.317,1951,2.552,1952,1.317,1953,1.294,1954,1.317,1955,1.991,1956,1.271,1957,1.131,1958,1.294,1959,1.294,1960,1.317,1961,1.317,1962,2.027,1963,1.317,1964,1.317,1965,1.294,1966,2.027,1967,1.317,1968,1.294,1969,1.249,1970,1.317,1971,1.317,1972,1.635,1973,1.294,1974,1.963,1975,1.317,1976,1.294,1977,1.294,1978,1.317,1979,1.317,1980,1.317,1981,1.294,1982,1.317,1983,1.113,1984,1.207,1985,1.294,1986,1.317,1987,1.317,1988,1.317,1989,1.317,1990,1.271,1991,1.294,1992,2.678,1993,1.956,1994,1.317,1995,2.027,1996,2.726,1997,1.317,1998,1.294,1999,1.317,2000,1.317,2001,1.317,2002,1.317,2003,1.317,2004,1.66,2005,1.079,2006,1.317,2007,1.317,2008,1.89,2009,1.271,2010,1.372,2011,1.271,2012,1.317,2013,1.317,2014,1.89,2015,2.027,2016,1.317,2017,1.317,2018,2.265,2019,1.922,2020,2.265,2021,1.294,2022,1.271,2023,1.046,2024,1.294,2025,1.271,2026,1.249,2027,1.062,2028,1.317,2029,1.131,2218,4.118,2219,3.234,2220,3.234]],["title/interfaces/IChartPalette.html",[40,0.003,1060,1.933]],["body/interfaces/IChartPalette.html",[3,0.127,4,0.119,5,0.119,10,0.275,11,0.444,12,1.263,13,1.353,20,0.005,21,0.833,24,0.332,28,0.354,33,1.229,34,0.594,35,1.588,36,1.588,37,1.393,39,0.4,40,0.005,41,0.931,42,1.767,47,1.791,53,1.196,57,1.698,75,0.87,78,0.002,79,0.003,80,0.002,83,1.54,89,1.229,90,1.307,97,1.65,102,0.868,106,0.844,110,0.464,116,0.799,119,0.662,131,2.404,136,0.885,145,1.764,163,0.973,164,1.85,168,1.303,183,1.186,187,0.571,198,1.53,213,2.029,222,1.413,229,0.987,238,2.311,244,0.918,245,0.987,251,2.517,254,1.251,257,1.213,284,1.54,285,1.333,287,1.017,289,1.356,294,0.788,303,2.058,313,1.338,314,2,328,0.987,333,1.906,334,1.257,368,0.987,384,0.833,399,1.189,411,1.017,417,1.081,439,1.048,443,1.541,444,1.612,446,1.919,447,1.612,453,1.688,455,2.058,459,1.816,464,1.498,466,1.588,481,2.179,529,1.973,530,1.519,535,1.296,536,1.296,537,1.296,538,1.296,544,1.564,546,1.23,550,1.65,552,1.296,553,1.541,558,1.296,562,1.994,566,1.994,576,1.296,577,1.688,580,1.273,581,2.018,585,1.246,594,1.273,596,1.017,600,1.296,601,1.354,604,1.296,639,0.767,641,1.032,647,2.236,651,1.83,679,1.002,717,1.564,718,1.965,719,2.018,733,0.868,734,1.17,748,1.51,750,1.002,752,1.965,755,2.109,758,1.133,766,1.048,774,1.281,780,1.151,787,1.791,795,0.987,800,1.53,802,2.593,811,1.081,825,1.273,830,1.273,892,1.189,934,1.209,948,1.605,972,1.715,1007,1.115,1060,1.892,1061,2.728,1062,2.728,1063,2.728,1065,2.966,1067,0.973,1069,1.032,1186,2.206,1201,2.347,1218,1.23,1219,1.23,1236,2.23,1247,1.251,1267,1.17,1269,1.8,1323,2.058,1330,1.588,1432,1.23,1444,2.589,1468,1.454,1613,2.347,1634,1.23,1693,1.273,1737,1.296,1750,1.209,1781,1.296,1801,2.158,1893,0.491,1894,1.273,1895,1.32,1896,1.994,1897,1.83,1898,1.564,1899,1.296,1900,1.273,1901,1.296,1902,1.064,1903,0.959,1904,1.048,1905,2.43,1906,1.273,1907,1.251,1908,2.43,1909,1.32,1910,1.273,1911,1.273,1912,1.133,1913,1.296,1914,1.296,1915,1.771,1916,1.892,1917,1.151,1918,1.802,1919,3.201,1920,1.32,1921,1.892,1922,1.17,1923,2.43,1924,1.32,1925,2.03,1926,1.994,1927,1.994,1928,1.32,1929,1.994,1930,2.346,1931,1.892,1932,1.32,1933,1.115,1934,1.32,1935,1.23,1936,1.23,1937,1.878,1938,1.189,1939,1.32,1940,1.32,1941,0.987,1942,1.32,1943,1.273,1944,1.925,1945,1.994,1946,1.296,1947,1.994,1948,1.32,1949,1.273,1950,1.32,1951,2.553,1952,1.32,1953,1.296,1954,1.32,1955,1.994,1956,1.273,1957,1.133,1958,1.296,1959,1.296,1960,1.32,1961,1.32,1962,2.03,1963,1.32,1964,1.32,1965,1.296,1966,2.03,1967,1.32,1968,1.296,1969,1.251,1970,1.32,1971,1.32,1972,1.637,1973,1.296,1974,1.965,1975,1.32,1976,1.296,1977,1.296,1978,1.32,1979,1.32,1980,1.32,1981,1.296,1982,1.32,1983,1.115,1984,1.209,1985,1.296,1986,1.32,1987,1.32,1988,1.32,1989,1.32,1990,1.273,1991,1.296,1992,1.273,1993,1.273,1994,1.32,1995,2.03,1996,2.728,1997,1.32,1998,1.296,1999,1.32,2000,1.32,2001,1.32,2002,1.32,2003,1.32,2004,1.662,2005,1.081,2006,1.32,2007,1.32,2008,1.892,2009,1.273,2010,1.373,2011,1.273,2012,1.32,2013,1.32,2014,1.892,2015,2.03,2016,1.32,2017,1.32,2018,2.267,2019,1.925,2020,2.267,2021,1.296,2022,1.273,2023,1.048,2024,1.296,2025,1.273,2026,1.251,2027,1.064,2028,1.32,2029,1.133]],["title/interfaces/IChartPlugin.html",[40,0.003,553,1.574]],["body/interfaces/IChartPlugin.html",[3,0.123,4,0.115,5,0.115,10,0.271,11,0.436,12,1.259,13,1.347,17,0.92,20,0.005,21,0.821,24,0.314,28,0.351,33,1.199,34,0.576,35,1.549,36,1.549,37,1.359,39,0.399,40,0.005,41,0.922,42,1.741,47,1.765,53,1.167,57,1.676,75,0.853,78,0.002,79,0.002,80,0.002,83,1.509,85,0.509,89,1.199,90,1.379,97,1.617,102,0.841,106,0.817,110,0.453,116,0.774,119,0.641,131,2.379,136,0.88,145,1.749,163,0.942,164,1.831,168,1.296,179,1.351,183,1.223,187,0.553,198,1.628,213,1.999,222,1.378,229,0.956,238,2.277,244,0.889,245,0.956,251,2.495,254,1.212,257,1.183,273,1.321,284,1.509,285,1.313,287,0.985,289,1.333,294,0.763,303,2.027,313,1.315,314,1.971,328,0.956,333,1.874,334,1.232,368,0.956,384,0.806,399,1.152,411,0.985,417,1.046,439,1.015,443,2.243,444,2.482,446,2.338,447,2.347,453,1.647,455,2.016,459,1.789,464,1.789,466,1.549,481,2.513,529,1.944,530,1.481,535,1.255,536,1.255,537,1.255,538,1.255,544,1.526,546,1.191,550,1.617,552,1.255,553,1.841,558,1.255,562,1.945,566,1.945,576,1.255,577,1.647,580,1.233,581,1.984,585,1.216,594,1.233,596,0.985,600,1.255,601,1.321,604,1.255,639,0.743,641,1.006,647,2.207,651,1.785,679,0.97,717,2.104,718,2.169,719,1.984,733,0.841,734,1.133,748,1.484,750,0.97,752,1.925,755,2.073,758,1.097,766,1.015,774,1.25,780,1.727,787,1.765,795,0.956,800,1.504,802,2.559,811,1.046,825,1.233,830,1.233,892,1.152,934,1.171,948,1.573,972,1.673,1007,1.079,1060,1.191,1061,1.255,1062,1.255,1063,1.255,1065,2.271,1067,0.942,1069,0.999,1186,2.169,1201,2.307,1218,1.191,1219,1.191,1236,2.185,1247,1.212,1267,1.133,1269,1.756,1323,2.016,1330,1.549,1432,1.191,1444,2.545,1468,1.418,1613,2.307,1634,1.191,1693,1.233,1737,1.255,1750,1.171,1781,1.255,1801,2.115,1893,0.475,1894,1.233,1895,1.278,1896,1.945,1897,1.785,1898,1.868,1899,1.255,1900,1.233,1901,1.255,1902,1.03,1903,0.928,1904,1.015,1905,2.381,1906,1.233,1907,1.212,1908,2.381,1909,1.278,1910,1.233,1911,1.233,1912,1.097,1913,1.255,1914,1.255,1915,1.727,1916,1.867,1917,1.115,1918,1.772,1919,3.17,1920,1.278,1921,1.846,1922,1.133,1923,2.381,1924,1.278,1925,1.98,1926,1.945,1927,1.945,1928,1.278,1929,1.945,1930,2.299,1931,1.846,1932,1.278,1933,1.079,1934,1.278,1935,1.191,1936,1.191,1937,1.841,1938,1.152,1939,1.278,1940,1.278,1941,0.956,1942,1.278,1943,1.233,1944,1.878,1945,1.945,1946,1.255,1947,1.945,1948,1.278,1949,1.233,1950,1.278,1951,2.902,1952,1.278,1953,1.255,1954,1.278,1955,1.945,1956,1.233,1957,1.097,1958,1.255,1959,1.255,1960,1.278,1961,1.278,1962,1.98,1963,1.278,1964,1.278,1965,1.255,1966,1.98,1967,1.278,1968,1.255,1969,1.212,1970,1.278,1971,1.278,1972,1.597,1973,1.255,1974,1.925,1975,1.278,1976,1.255,1977,1.255,1978,1.278,1979,1.278,1980,1.278,1981,1.255,1982,1.278,1983,1.079,1984,1.171,1985,1.255,1986,1.278,1987,1.278,1988,1.278,1989,1.278,1990,1.233,1991,1.255,1992,1.233,1993,1.233,1994,1.278,1995,2.731,1996,3.309,1997,1.98,1998,1.945,1999,1.98,2000,1.98,2001,1.278,2002,1.278,2003,1.278,2004,1.621,2005,1.046,2006,1.278,2007,1.278,2008,1.846,2009,1.233,2010,1.34,2011,1.233,2012,1.278,2013,1.278,2014,1.846,2015,1.98,2016,1.278,2017,1.278,2018,2.222,2019,1.878,2020,2.222,2021,1.255,2022,1.233,2023,1.015,2024,1.255,2025,1.233,2026,1.212,2027,1.03,2028,1.278,2029,1.097,2221,3.137,2222,3.137,2223,3.137,2224,3.137]],["title/interfaces/IChartSeries.html",[40,0.003,581,1.507]],["body/interfaces/IChartSeries.html",[3,0.125,4,0.117,5,0.117,10,0.273,11,0.44,12,1.269,13,1.35,20,0.005,21,0.827,24,0.331,28,0.353,33,1.214,34,0.584,35,1.568,36,1.568,37,1.375,39,0.399,40,0.005,41,0.951,42,1.932,47,1.959,53,1.181,57,1.687,75,0.861,78,0.002,79,0.002,80,0.002,83,1.852,85,0.517,89,1.483,90,1.327,97,1.633,102,0.854,106,0.83,110,0.458,116,0.786,119,0.651,131,2.391,136,0.882,145,1.756,163,0.957,164,1.84,168,1.299,183,1.181,187,0.561,198,1.639,213,2.128,222,1.395,229,0.971,238,2.293,244,0.903,245,0.971,251,2.506,254,1.23,257,1.197,284,1.714,285,1.457,287,1,289,1.733,294,0.775,303,2.479,313,1.326,314,1.985,328,0.971,333,1.889,334,1.244,368,0.971,384,0.819,399,1.169,411,1,417,1.063,439,1.03,443,1.521,444,1.591,446,1.904,447,1.591,453,1.667,455,2.036,459,1.802,464,1.483,466,1.568,481,2.162,529,1.958,530,1.499,535,1.274,536,1.274,537,1.274,538,1.274,544,1.544,546,1.209,550,1.633,552,1.274,553,1.521,558,1.274,562,1.968,566,1.968,576,1.274,577,1.667,580,1.252,581,2.162,585,1.23,594,1.252,596,1,600,1.274,601,1.337,604,1.274,639,0.754,641,1.018,647,2.22,651,1.806,679,1.521,717,1.544,718,1.944,719,2,733,0.854,734,1.15,748,1.496,750,1.521,752,1.944,755,2.09,758,1.114,766,1.03,774,1.264,780,1.132,787,1.778,795,0.971,800,1.517,802,2.576,811,1.063,825,1.252,830,1.252,892,1.169,934,1.189,948,1.588,972,1.693,1007,1.096,1060,1.209,1061,1.274,1062,1.274,1063,1.274,1065,2.29,1067,0.957,1069,1.015,1186,2.186,1201,2.326,1218,1.209,1219,1.209,1236,2.206,1247,1.23,1267,1.15,1269,1.777,1323,2.036,1330,1.568,1432,1.209,1444,2.774,1468,1.435,1613,2.326,1634,1.868,1693,1.252,1737,1.968,1750,1.189,1781,1.274,1801,2.135,1893,0.483,1894,1.252,1895,1.298,1896,1.968,1897,1.806,1898,1.544,1899,1.274,1900,1.252,1901,1.274,1902,1.046,1903,0.943,1904,1.03,1905,2.404,1906,1.252,1907,1.23,1908,2.404,1909,1.298,1910,1.252,1911,1.252,1912,1.114,1913,1.274,1914,1.274,1915,1.748,1916,1.879,1917,1.132,1918,1.786,1919,3.185,1920,1.298,1921,1.868,1922,1.15,1923,2.404,1924,1.298,1925,2.004,1926,1.968,1927,1.968,1928,1.298,1929,1.968,1930,2.321,1931,1.868,1932,1.298,1933,1.096,1934,1.298,1935,1.209,1936,1.209,1937,1.859,1938,1.169,1939,1.298,1940,1.298,1941,0.971,1942,1.298,1943,1.252,1944,1.9,1945,1.968,1946,1.274,1947,1.968,1948,1.298,1949,1.252,1950,1.298,1951,2.536,1952,1.298,1953,1.274,1954,1.298,1955,1.968,1956,1.252,1957,1.114,1958,1.274,1959,1.274,1960,1.298,1961,1.298,1962,2.004,1963,1.298,1964,1.298,1965,1.274,1966,2.448,1967,1.298,1968,1.274,1969,1.23,1970,1.298,1971,1.298,1972,1.616,1973,1.274,1974,2.363,1975,1.298,1976,1.274,1977,1.274,1978,1.298,1979,1.298,1980,1.298,1981,1.274,1982,1.298,1983,1.693,1984,1.836,1985,1.968,1986,2.004,1987,2.004,1988,2.004,1989,2.004,1990,1.252,1991,1.274,1992,1.252,1993,1.252,1994,1.298,1995,2.004,1996,2.704,1997,1.298,1998,1.274,1999,1.298,2000,1.298,2001,1.298,2002,1.298,2003,1.298,2004,1.641,2005,1.063,2006,1.298,2007,1.298,2008,1.868,2009,1.252,2010,1.356,2011,1.252,2012,1.298,2013,1.298,2014,1.868,2015,2.004,2016,1.298,2017,1.298,2018,2.244,2019,1.9,2020,2.244,2021,1.274,2022,1.252,2023,1.03,2024,1.274,2025,1.252,2026,1.23,2027,1.046,2028,1.298,2029,1.114]],["title/interfaces/IChartViewStatusEventPayload.html",[40,0.003,892,1.869]],["body/interfaces/IChartViewStatusEventPayload.html",[3,0.126,4,0.119,5,0.119,10,0.275,11,0.443,12,1.262,13,1.352,20,0.005,21,0.831,24,0.317,28,0.354,33,1.225,34,0.592,35,1.582,36,1.582,37,1.388,39,0.399,40,0.005,41,0.93,42,1.764,47,1.788,53,1.192,57,1.695,75,0.868,78,0.002,79,0.002,80,0.002,83,1.535,85,0.524,89,1.494,90,1.306,97,1.646,102,0.864,106,0.84,110,0.463,116,0.795,119,0.659,131,2.4,136,0.884,145,1.82,163,1.491,164,1.848,168,1.302,183,1.185,187,0.568,198,1.526,213,2.025,222,1.408,229,0.983,238,2.306,244,0.914,245,0.983,251,2.514,254,1.246,257,1.208,284,1.535,285,1.33,287,1.012,289,1.353,294,0.785,303,2.053,313,1.335,314,1.996,328,0.983,333,1.901,334,1.254,368,0.983,384,0.829,399,1.184,411,1.012,417,1.657,439,1.043,443,1.536,444,1.607,446,1.915,447,1.607,453,1.682,455,2.052,459,1.812,464,1.494,466,1.582,481,2.174,529,2.079,530,1.513,535,1.29,536,1.29,537,1.29,538,1.29,544,1.559,546,1.224,550,1.646,552,1.29,553,1.536,558,1.29,562,1.987,566,1.987,576,1.29,577,1.682,580,1.267,581,2.014,585,1.242,594,1.267,596,1.012,600,1.29,601,1.349,604,1.29,639,0.764,641,1.028,647,2.231,651,1.823,679,0.997,717,1.559,718,2.377,719,2.014,733,0.864,734,1.165,748,1.506,750,0.997,752,1.959,755,2.272,758,1.128,766,1.043,774,1.277,780,1.146,787,1.788,795,0.983,800,1.526,802,2.697,811,1.076,825,1.267,830,1.267,892,1.823,934,2.54,948,1.6,972,1.709,1007,1.11,1060,1.224,1061,1.29,1062,1.29,1063,1.29,1065,2.305,1067,0.968,1069,1.028,1186,2.201,1201,2.341,1218,1.224,1219,1.224,1236,2.849,1247,1.246,1267,1.165,1269,1.793,1323,2.052,1330,1.582,1432,1.224,1444,2.583,1468,1.449,1613,2.341,1634,1.224,1693,1.267,1737,1.29,1750,1.204,1781,1.987,1801,2.152,1893,0.489,1894,1.267,1895,1.314,1896,1.987,1897,1.823,1898,1.559,1899,1.29,1900,1.267,1901,1.29,1902,1.059,1903,0.954,1904,1.043,1905,2.423,1906,1.267,1907,1.246,1908,2.423,1909,1.314,1910,1.267,1911,1.267,1912,1.128,1913,1.29,1914,1.29,1915,1.765,1916,1.888,1917,1.146,1918,1.798,1919,3.264,1920,1.314,1921,1.886,1922,1.165,1923,2.423,1924,1.314,1925,2.023,1926,1.987,1927,1.987,1928,1.314,1929,1.987,1930,2.339,1931,1.886,1932,1.314,1933,1.11,1934,1.314,1935,1.224,1936,1.224,1937,1.873,1938,1.184,1939,1.314,1940,1.314,1941,0.983,1942,1.314,1943,1.267,1944,1.918,1945,1.987,1946,1.29,1947,1.987,1948,1.314,1949,1.267,1950,1.314,1951,2.549,1952,1.314,1953,1.29,1954,1.314,1955,1.987,1956,1.267,1957,1.128,1958,1.29,1959,1.29,1960,1.314,1961,1.314,1962,2.023,1963,1.314,1964,1.314,1965,1.29,1966,2.023,1967,1.314,1968,1.29,1969,1.246,1970,1.314,1971,1.314,1972,1.631,1973,1.29,1974,1.959,1975,1.314,1976,1.29,1977,1.29,1978,1.314,1979,1.314,1980,1.314,1981,1.29,1982,1.314,1983,1.11,1984,1.204,1985,1.29,1986,1.314,1987,1.314,1988,1.314,1989,1.314,1990,1.267,1991,1.29,1992,1.267,1993,1.267,1994,1.314,1995,2.023,1996,2.722,1997,1.314,1998,1.29,1999,1.314,2000,1.314,2001,1.314,2002,1.314,2003,1.314,2004,1.657,2005,1.076,2006,1.314,2007,1.314,2008,1.886,2009,1.267,2010,1.669,2011,1.267,2012,1.314,2013,2.023,2014,2.583,2015,2.771,2016,2.023,2017,2.023,2018,2.261,2019,1.918,2020,2.261,2021,1.29,2022,1.267,2023,1.043,2024,1.29,2025,1.267,2026,1.246,2027,1.059,2028,1.314,2029,1.128]],["title/interfaces/IDataAccessors.html",[35,1.622,40,0.003]],["body/interfaces/IDataAccessors.html",[3,0.128,4,0.12,5,0.12,10,0.247,11,0.327,12,1.264,13,1.355,17,0.449,20,0.005,21,0.836,24,0.308,28,0.355,33,1.507,34,0.6,35,1.946,36,1.599,37,1.403,39,0.4,40,0.005,41,0.934,42,1.774,47,1.799,53,1.205,57,1.704,75,0.982,78,0.002,79,0.003,80,0.002,83,1.549,89,1.238,90,1.31,97,1.66,102,0.876,106,0.852,110,0.468,116,0.806,119,0.668,131,2.411,136,0.892,145,1.769,163,0.982,164,1.856,168,1.305,183,1.188,187,0.576,198,1.537,213,2.037,222,1.423,229,0.996,238,2.32,244,0.927,245,0.996,251,2.524,254,1.263,257,1.221,284,1.549,285,1.338,287,1.026,289,1.363,294,0.795,303,2.066,313,1.344,314,2.009,328,0.996,333,1.915,334,1.264,368,0.996,384,0.84,399,1.2,411,1.026,417,1.09,439,1.057,443,1.552,444,1.623,446,1.926,447,1.623,453,1.7,455,2.069,459,1.823,464,1.507,466,1.599,481,2.188,529,1.981,530,1.529,535,1.308,536,1.308,537,1.308,538,1.308,544,1.575,546,1.241,550,1.66,552,1.308,553,1.552,558,1.308,562,2.008,566,2.008,576,1.308,577,1.7,580,1.285,581,2.028,585,1.255,594,1.285,596,1.026,600,1.308,601,1.364,604,1.308,639,0.774,641,1.039,647,2.244,651,1.842,679,1.011,717,1.575,718,1.976,719,2.028,733,0.876,734,1.18,748,1.517,750,1.011,752,1.976,755,2.119,758,1.143,766,1.057,774,1.29,780,1.161,787,1.899,795,0.996,800,1.537,802,2.602,811,1.09,825,1.285,830,1.285,892,1.2,934,1.22,948,1.614,972,1.727,1007,1.125,1060,1.241,1061,1.308,1062,1.308,1063,1.308,1065,2.321,1067,0.982,1069,1.042,1186,2.216,1201,2.358,1218,1.241,1219,1.241,1236,2.242,1247,1.263,1267,1.18,1269,1.812,1323,2.069,1330,1.599,1432,1.241,1444,2.601,1468,1.464,1613,2.358,1634,1.241,1693,1.285,1737,1.308,1750,1.22,1781,1.308,1801,2.17,1893,0.495,1894,1.285,1895,1.332,1896,2.008,1897,1.842,1898,1.575,1899,1.308,1900,1.285,1901,1.308,1902,1.074,1903,0.967,1904,1.057,1905,2.444,1906,1.285,1907,1.263,1908,2.444,1909,1.332,1910,1.285,1911,1.285,1912,1.143,1913,1.308,1914,1.308,1915,1.783,1916,1.899,1917,1.161,1918,1.811,1919,3.209,1920,1.332,1921,1.905,1922,1.18,1923,2.444,1924,1.332,1925,2.044,1926,2.008,1927,2.008,1928,1.332,1929,2.008,1930,2.359,1931,1.905,1932,1.332,1933,1.125,1934,1.332,1935,1.241,1936,1.241,1937,1.889,1938,1.2,1939,1.332,1940,1.332,1941,0.996,1942,1.332,1943,1.285,1944,1.938,1945,2.008,1946,1.308,1947,2.008,1948,1.332,1949,1.285,1950,1.332,1951,2.563,1952,1.332,1953,1.308,1954,1.332,1955,2.008,1956,1.285,1957,1.143,1958,1.308,1959,1.308,1960,1.332,1961,1.332,1962,2.044,1963,1.332,1964,1.332,1965,1.308,1966,2.044,1967,1.332,1968,1.308,1969,1.263,1970,1.332,1971,1.332,1972,1.648,1973,1.308,1974,1.976,1975,1.332,1976,1.308,1977,1.308,1978,1.332,1979,1.332,1980,1.332,1981,1.308,1982,1.332,1983,1.125,1984,1.22,1985,1.308,1986,1.332,1987,1.332,1988,1.332,1989,1.332,1990,1.285,1991,1.308,1992,1.285,1993,1.285,1994,1.332,1995,2.044,1996,2.741,1997,1.332,1998,1.308,1999,1.332,2000,1.332,2001,1.332,2002,1.332,2003,1.332,2004,1.674,2005,1.09,2006,1.332,2007,1.332,2008,1.905,2009,1.285,2010,1.383,2011,1.285,2012,1.332,2013,1.332,2014,1.905,2015,2.044,2016,1.332,2017,1.332,2018,2.28,2019,1.938,2020,2.28,2021,1.308,2022,1.285,2023,1.057,2024,1.308,2025,1.285,2026,1.263,2027,1.074,2028,1.332,2029,1.143,2225,1.758,2226,3.269]],["title/interfaces/IDataPoint.html",[40,0.003,1201,1.752]],["body/interfaces/IDataPoint.html",[3,0.125,4,0.117,5,0.117,10,0.336,11,0.441,12,1.276,13,1.362,20,0.005,21,0.828,22,0.716,24,0.342,28,0.353,33,1.216,34,0.586,35,1.571,36,1.571,37,1.378,39,0.399,40,0.005,41,0.927,42,1.756,47,1.78,53,1.183,57,1.688,75,0.862,78,0.002,79,0.002,80,0.002,83,1.526,85,0.519,89,1.216,90,1.303,97,1.636,102,0.856,106,0.832,110,0.459,116,0.788,119,0.652,131,2.393,136,0.894,145,1.758,163,0.959,164,1.842,168,1.317,183,1.182,187,0.563,198,1.519,213,2.22,222,2.074,229,0.973,238,2.612,244,0.906,245,0.973,251,2.552,254,1.234,257,1.2,284,1.526,285,1.324,287,1.003,289,1.346,294,0.777,303,2.044,313,1.328,314,1.988,328,0.973,333,1.892,334,1.246,368,0.973,384,0.821,399,1.173,411,1.003,417,1.065,439,1.033,443,1.525,444,1.595,446,1.906,447,1.595,453,1.67,455,2.04,459,1.804,464,1.485,466,1.571,481,2.165,529,1.96,530,1.502,535,1.278,536,1.278,537,1.278,538,1.278,544,1.548,546,1.213,550,1.636,552,1.278,553,1.525,558,1.278,562,1.972,566,1.972,576,1.278,577,1.67,580,1.255,581,2.003,585,1.233,594,1.255,596,1.003,600,1.278,601,1.34,604,1.278,639,0.756,641,1.021,647,2.223,651,1.81,679,0.988,717,1.548,718,1.948,719,2.003,733,0.856,734,1.154,748,1.498,750,0.988,752,1.948,755,2.093,758,1.117,766,1.033,774,1.267,780,1.135,787,1.78,795,0.973,800,1.519,802,2.578,811,1.065,825,1.255,830,1.255,892,1.173,934,1.192,948,2.129,972,1.697,1007,1.099,1060,1.213,1061,1.278,1062,1.278,1063,1.278,1065,2.293,1067,0.959,1069,1.018,1186,2.19,1201,2.517,1218,1.213,1219,1.213,1236,2.21,1247,1.234,1267,1.154,1269,1.78,1323,2.478,1330,1.571,1432,1.213,1444,2.777,1468,1.438,1613,2.33,1634,1.213,1693,1.255,1737,1.278,1750,1.192,1781,1.278,1801,2.405,1893,0.484,1894,1.255,1895,1.301,1896,1.972,1897,1.81,1898,1.548,1899,1.278,1900,1.255,1901,1.278,1902,1.049,1903,0.945,1904,1.033,1905,2.409,1906,1.255,1907,1.234,1908,2.409,1909,1.301,1910,1.255,1911,1.255,1912,1.117,1913,1.278,1914,1.278,1915,1.752,1916,1.881,1917,1.135,1918,1.789,1919,3.187,1920,1.301,1921,1.872,1922,1.154,1923,2.409,1924,1.301,1925,2.008,1926,1.972,1927,1.972,1928,1.301,1929,1.972,1930,2.325,1931,1.872,1932,1.301,1933,1.099,1934,1.301,1935,1.213,1936,1.213,1937,1.862,1938,1.173,1939,1.301,1940,1.301,1941,0.973,1942,1.301,1943,1.255,1944,1.904,1945,1.972,1946,1.278,1947,1.972,1948,1.301,1949,1.255,1950,1.301,1951,2.539,1952,1.301,1953,1.278,1954,1.301,1955,1.972,1956,1.255,1957,1.117,1958,1.278,1959,1.278,1960,1.301,1961,1.301,1962,2.008,1963,1.301,1964,1.301,1965,1.278,1966,2.008,1967,1.301,1968,1.278,1969,1.234,1970,1.301,1971,1.301,1972,1.619,1973,1.278,1974,1.948,1975,1.301,1976,1.278,1977,1.278,1978,1.301,1979,1.301,1980,1.301,1981,1.278,1982,1.301,1983,1.099,1984,1.192,1985,1.278,1986,1.301,1987,1.301,1988,1.301,1989,1.301,1990,1.255,1991,1.278,1992,1.255,1993,1.255,1994,1.301,1995,2.008,1996,2.708,1997,1.301,1998,1.278,1999,1.301,2000,1.301,2001,1.301,2002,1.301,2003,1.301,2004,1.644,2005,1.065,2006,1.301,2007,1.301,2008,1.872,2009,1.255,2010,1.359,2011,1.255,2012,1.301,2013,1.301,2014,1.872,2015,2.008,2016,1.301,2017,1.301,2018,2.247,2019,1.904,2020,2.247,2021,1.278,2022,1.255,2023,1.033,2024,1.278,2025,1.255,2026,1.234,2027,1.049,2028,1.301,2029,1.117]],["title/interfaces/IDataPointsPayload.html",[40,0.003,453,1.725]],["body/interfaces/IDataPointsPayload.html",[3,0.127,4,0.119,5,0.119,10,0.246,11,0.325,12,1.269,13,1.36,17,0.445,20,0.005,21,0.834,24,0.308,28,0.354,33,1.231,34,0.595,35,1.59,36,1.59,37,1.395,39,0.4,40,0.005,41,0.932,42,1.769,47,1.793,53,1.198,57,1.699,75,0.871,78,0.002,79,0.003,80,0.002,83,1.541,85,0.527,89,1.231,90,1.308,97,1.652,102,0.869,106,0.846,110,0.465,116,0.8,119,0.663,131,2.405,136,0.891,145,1.765,163,0.974,164,1.851,168,1.304,183,1.186,187,0.572,198,1.531,213,2.03,222,1.415,229,0.989,238,2.543,244,0.92,245,0.989,251,2.563,254,1.253,257,1.214,284,1.541,285,1.334,287,1.566,289,1.357,294,0.79,303,2.059,313,1.339,314,2.002,328,0.989,333,1.908,334,1.259,368,0.989,384,0.834,399,1.191,411,1.019,417,1.082,439,1.05,443,1.543,444,1.614,446,1.92,447,1.614,453,2.06,455,2.312,459,1.817,464,1.5,466,1.59,481,2.181,529,1.974,530,1.521,535,1.298,536,1.298,537,1.298,538,1.298,544,1.566,546,1.232,550,1.652,552,1.298,553,1.543,558,1.298,562,1.996,566,1.996,576,1.298,577,1.69,580,1.275,581,2.02,585,1.248,594,1.275,596,1.019,600,1.298,601,1.356,604,1.298,639,0.768,641,1.033,647,2.237,651,1.832,679,1.004,717,1.566,718,1.967,719,2.02,733,0.869,734,1.172,748,1.511,750,1.004,752,1.967,755,2.278,758,1.135,766,1.05,774,1.563,780,1.153,787,1.893,795,0.989,800,1.531,802,2.595,811,1.664,825,1.275,830,1.275,892,1.191,934,1.211,948,1.607,972,1.717,1007,1.117,1060,1.232,1061,1.298,1062,1.298,1063,1.298,1065,2.312,1067,0.974,1069,1.034,1186,2.208,1201,2.677,1218,1.232,1219,1.232,1236,2.232,1247,1.253,1267,1.172,1269,1.802,1323,2.06,1330,1.59,1432,1.232,1444,2.591,1468,1.456,1613,2.349,1634,1.232,1693,1.275,1737,1.298,1750,1.211,1781,1.298,1801,2.16,1893,0.492,1894,1.275,1895,1.322,1896,1.996,1897,1.832,1898,1.566,1899,1.298,1900,1.275,1901,1.298,1902,1.066,1903,0.96,1904,1.05,1905,2.432,1906,1.275,1907,1.253,1908,2.432,1909,1.322,1910,1.275,1911,1.275,1912,1.135,1913,1.298,1914,1.298,1915,1.773,1916,1.893,1917,1.153,1918,1.804,1919,3.202,1920,1.322,1921,1.895,1922,1.172,1923,2.432,1924,1.322,1925,2.033,1926,1.996,1927,1.996,1928,1.322,1929,1.996,1930,2.348,1931,1.895,1932,1.322,1933,1.117,1934,1.322,1935,1.232,1936,1.232,1937,1.88,1938,1.191,1939,1.322,1940,1.322,1941,0.989,1942,1.322,1943,1.275,1944,1.927,1945,1.996,1946,1.298,1947,1.996,1948,1.322,1949,1.275,1950,1.322,1951,2.555,1952,1.322,1953,1.298,1954,1.322,1955,1.996,1956,1.275,1957,1.135,1958,1.298,1959,1.298,1960,1.322,1961,1.322,1962,2.033,1963,1.322,1964,1.322,1965,1.298,1966,2.033,1967,1.322,1968,1.298,1969,1.253,1970,1.322,1971,1.322,1972,1.639,1973,1.298,1974,1.967,1975,1.322,1976,1.298,1977,1.298,1978,1.322,1979,1.322,1980,1.322,1981,1.298,1982,1.322,1983,1.117,1984,1.211,1985,1.298,1986,1.322,1987,1.322,1988,1.322,1989,1.322,1990,1.275,1991,1.298,1992,1.275,1993,1.275,1994,1.322,1995,2.033,1996,2.731,1997,1.322,1998,1.298,1999,1.322,2000,1.322,2001,1.322,2002,1.322,2003,1.322,2004,2.028,2005,1.082,2006,1.322,2007,1.322,2008,1.895,2009,1.275,2010,1.375,2011,1.275,2012,1.322,2013,1.322,2014,1.895,2015,2.033,2016,1.322,2017,1.322,2018,2.27,2019,2.348,2020,2.27,2021,1.298,2022,1.275,2023,1.05,2024,1.298,2025,1.275,2026,1.253,2027,1.066,2028,1.322,2029,1.135,2225,1.745,2227,3.245]],["title/interfaces/IDataSeries.html",[40,0.003,213,1.403]],["body/interfaces/IDataSeries.html",[3,0.123,4,0.116,5,0.116,10,0.271,11,0.5,12,1.282,13,1.365,17,0.432,20,0.005,21,0.822,24,0.33,28,0.352,33,1.202,34,0.577,35,1.552,36,1.552,37,1.362,39,0.399,40,0.005,41,0.922,42,1.743,47,1.767,53,1.169,57,1.808,75,0.854,78,0.002,79,0.002,80,0.002,83,1.512,85,0.511,89,1.202,90,1.312,97,1.62,102,0.843,106,0.82,110,0.454,116,0.776,119,0.642,131,2.381,136,0.897,145,1.75,163,0.945,164,2.013,168,1.296,183,1.178,187,0.554,198,1.63,213,2.117,222,1.381,229,0.958,238,2.28,244,0.892,245,1.485,251,2.542,254,1.882,257,1.185,284,1.512,285,1.391,287,0.987,289,1.335,294,1.185,303,2.03,313,1.317,314,1.974,328,0.958,333,1.876,334,1.234,368,1.485,384,0.808,399,1.155,411,0.987,417,1.049,439,1.017,443,1.507,444,1.576,446,1.893,447,1.576,453,1.65,455,2.274,459,1.792,464,1.471,466,1.552,481,2.15,529,1.946,530,1.485,535,1.258,536,1.258,537,1.258,538,1.258,544,1.529,546,1.194,550,1.62,552,1.258,553,1.507,558,1.258,562,1.949,566,1.949,576,1.258,577,1.65,580,1.236,581,1.987,585,1.218,594,1.236,596,0.987,600,1.258,601,1.324,604,1.258,639,0.745,641,1.008,647,2.209,651,2.465,679,0.973,717,1.529,718,1.929,719,1.987,733,0.843,734,1.136,748,1.486,750,0.973,752,1.929,755,2.076,758,1.1,766,1.017,774,1.867,780,1.118,787,1.869,795,0.958,800,1.506,802,2.562,811,1.049,825,1.915,830,1.236,892,1.155,934,1.174,948,1.576,972,1.676,1007,1.082,1060,1.194,1061,1.258,1062,1.258,1063,1.258,1065,2.274,1067,1.463,1069,1.002,1186,2.172,1201,2.31,1218,1.194,1219,1.194,1236,2.189,1247,1.215,1267,1.136,1269,1.759,1323,2.02,1330,2.139,1432,1.194,1444,2.549,1468,1.421,1613,2.31,1634,1.194,1693,1.236,1737,1.258,1750,1.174,1781,1.258,1801,2.385,1893,0.477,1894,1.236,1895,1.281,1896,2.385,1897,1.788,1898,1.529,1899,1.258,1900,1.236,1901,1.258,1902,1.033,1903,0.931,1904,1.017,1905,2.385,1906,1.236,1907,1.215,1908,2.385,1909,1.281,1910,1.236,1911,1.236,1912,1.1,1913,1.258,1914,1.258,1915,1.731,1916,1.869,1917,1.118,1918,1.774,1919,3.173,1920,1.281,1921,1.85,1922,1.136,1923,2.385,1924,1.281,1925,1.984,1926,1.949,1927,1.949,1928,1.281,1929,1.949,1930,2.303,1931,1.85,1932,1.281,1933,1.082,1934,1.281,1935,1.194,1936,1.194,1937,1.844,1938,1.155,1939,1.281,1940,1.281,1941,0.958,1942,1.281,1943,1.236,1944,1.882,1945,1.949,1946,1.258,1947,1.949,1948,1.281,1949,1.236,1950,1.281,1951,2.523,1952,1.281,1953,1.258,1954,1.281,1955,1.949,1956,1.236,1957,1.1,1958,1.258,1959,1.258,1960,1.281,1961,1.281,1962,1.984,1963,1.281,1964,1.281,1965,1.258,1966,2.429,1967,1.984,1968,1.949,1969,1.882,1970,1.984,1971,1.984,1972,2.205,1973,1.949,1974,2.172,1975,1.984,1976,1.949,1977,1.949,1978,1.984,1979,1.984,1980,1.984,1981,1.949,1982,1.984,1983,1.082,1984,1.174,1985,1.258,1986,1.281,1987,1.281,1988,1.281,1989,1.281,1990,1.236,1991,1.258,1992,1.236,1993,1.236,1994,1.281,1995,1.984,1996,2.686,1997,1.281,1998,1.258,1999,1.281,2000,1.281,2001,1.281,2002,1.281,2003,1.281,2004,1.625,2005,1.049,2006,1.281,2007,1.281,2008,1.85,2009,1.236,2010,1.342,2011,1.236,2012,1.281,2013,1.281,2014,1.85,2015,1.984,2016,1.281,2017,1.281,2018,2.226,2019,1.882,2020,2.226,2021,1.258,2022,1.236,2023,1.017,2024,1.258,2025,1.236,2026,1.215,2027,1.033,2028,1.281,2029,1.1,2225,1.691,2228,3.145]],["title/interfaces/IDimensionConfig.html",[40,0.003,139,2.282]],["body/interfaces/IDimensionConfig.html",[0,0.046,3,0.111,4,0.104,5,0.104,10,0.114,11,0.292,17,1.096,19,1.5,20,0.005,21,0.782,22,1.068,24,0.332,28,0.313,39,0.348,40,0.005,41,0.5,52,1.121,75,0.405,78,0.001,79,0.002,80,0.001,83,2.502,85,1.121,89,1.563,90,0.787,95,3.393,100,1.413,101,3.297,102,1.201,103,3.933,104,1.381,105,1.381,106,1.451,108,4.029,110,0.827,111,2.664,112,1.903,114,3.176,115,2.981,116,2.028,124,3.812,126,1.033,135,3.433,136,0.59,139,4.074,142,2.201,145,1.882,148,2.899,154,0.929,155,2.239,157,1.413,158,2.411,159,1.563,160,3.701,161,1.563,162,1.563,163,1.903,165,1.563,168,1.389,170,2.411,171,2.35,172,1.521,179,1.97,182,2.784,183,0.366,184,2.188,185,3.321,186,2.35,198,2.017,218,1.112,257,2.212,258,1.294,273,1.218,285,0.512,289,1.26,301,1.556,313,1.716,314,2.092,321,0.837,334,1.594,384,1.889,404,3.731,446,0.737,459,0.698,464,1.106,493,1.022,494,1.97,529,1.492,530,1.697,534,1.447,544,2.745,550,2.376,553,1.722,557,2.96,585,0.707,595,1.447,596,1.407,597,2.718,598,1.521,601,0.769,602,1.005,603,1.483,632,1.219,639,2.315,641,2.037,647,1.289,652,1.351,679,1.387,717,2.581,718,2.234,719,1.875,723,2.293,733,0.758,748,0.992,750,1.959,767,1.381,779,3.297,783,3.313,784,1.268,785,2.578,800,0.635,813,1.483,821,3.321,837,2.602,945,3.166,1023,1.413,1067,1.903,1146,1.563,1163,1.483,1178,3.653,1203,1.521,1330,1.429,1371,1.702,1454,3.988,1545,4.058,1546,4.653,1547,3.407,1548,4.058,1549,4.058,1555,2.476,1559,2.476,1563,2.476,1567,2.476,1640,1.563,1642,1.563,1643,1.563,1644,1.521,1647,5.645,1649,1.112,1654,2.35,1663,1.521,1670,1.521,1676,2.476,1680,1.563,1685,2.496,1686,1.381,1689,1.483,1690,1.521,1695,1.521,1696,2.35,1701,2.659,1704,1.483,1705,2.447,1769,2.476,1770,1.563,1860,1.483,1861,1.521,1862,1.521,1863,1.521,1864,1.521,1865,2.411,1866,1.381,1867,1.521,1893,0.429,1898,2.306,1916,1.542,1918,0.748,1951,0.929,1972,1.473,2010,2.369,2023,0.915,2030,1.563,2031,3.923,2032,2.14,2033,4.058,2034,1.607,2035,3.599,2036,3.16,2037,4.112,2038,3.164,2039,2.547,2040,2.14,2041,4.206,2042,3.543,2043,4.411,2044,3.653,2045,3.499,2046,5.258,2047,3.599,2048,4.536,2049,3.499,2050,1.607,2051,1.243,2052,1.563,2053,2.476,2054,1.563,2055,1.563,2056,2.411,2057,1.563,2058,1.563,2059,2.602,2060,2.31,2061,1.563,2062,1.521,2063,1.607,2064,1.563,2065,1.563,2066,1.563,2067,1.607,2068,1.607,2069,1.483,2070,1.351,2071,1.607,2072,2.35,2073,1.607,2074,1.351,2075,1.607,2076,2.411,2077,2.547,2078,2.547,2079,2.14,2080,2.14,2081,1.607,2082,1.563,2083,1.521,2084,1.607,2085,1.607,2229,2.829,2230,2.829,2231,2.829,2232,2.829,2233,2.829,2234,2.829,2235,2.829,2236,2.829]],["title/interfaces/IDimensions.html",[40,0.003,603,2.668]],["body/interfaces/IDimensions.html",[0,0.053,3,0.129,4,0.121,5,0.121,10,0.133,11,0.328,20,0.005,21,0.371,24,0.281,28,0.329,39,0.36,40,0.005,41,0.561,52,1.259,75,0.47,78,0.002,79,0.003,80,0.002,83,2.516,85,0.533,89,1.694,90,0.711,95,3.497,100,1.639,101,3.535,102,1.349,103,3.575,104,1.602,105,1.602,106,1.596,108,3.762,110,0.758,111,2.607,112,1.801,114,3.142,115,2.917,116,2.007,124,2.923,126,1.16,135,3.651,136,0.64,139,3.938,142,1.892,145,1.87,148,2.689,154,1.078,155,2.514,157,1.639,158,2.707,159,1.813,160,3.433,161,1.813,162,1.813,163,2.062,165,1.813,168,1.388,170,2.707,171,2.639,172,1.765,179,1.942,182,3.017,183,0.425,184,2.457,185,3.599,186,2.639,198,1.931,218,1.29,257,2.258,258,1.501,285,0.594,289,1.365,301,1.711,313,1.779,314,2.211,321,0.971,334,1.684,384,2.009,404,3.208,446,0.855,459,0.81,464,1.242,493,1.185,494,2.212,529,1.641,530,1.866,534,1.679,544,2.846,550,2.464,553,1.894,557,3.208,585,0.821,595,1.679,596,1.58,597,2.989,598,1.765,601,0.892,602,1.166,603,2.639,632,1.414,639,2.253,641,1.995,647,1.448,652,1.567,679,1.557,717,2.635,718,1.981,719,1.49,723,2.574,733,0.879,748,1.114,750,1.557,767,1.602,779,3.278,783,2.849,784,1.471,785,2.286,800,0.736,813,1.72,821,3.599,837,2.861,945,3.367,1023,1.639,1067,2.062,1146,1.813,1163,1.72,1178,3.722,1203,1.765,1330,1.604,1371,1.911,1454,3.429,1545,2.78,1546,3.792,1547,1.765,1548,1.813,1549,1.813,1555,1.813,1559,1.813,1563,1.813,1567,1.813,1640,1.813,1642,1.813,1643,1.813,1644,1.765,1647,5.587,1649,1.29,1654,2.639,1663,1.765,1670,1.765,1676,2.78,1680,1.813,1685,2.745,1686,1.602,1689,1.72,1690,1.765,1695,1.765,1696,2.639,1701,2.923,1704,1.72,1705,2.69,1769,2.78,1770,1.813,1860,1.72,1861,1.765,1862,1.765,1863,1.765,1864,1.765,1865,2.707,1866,1.602,1867,1.765,1893,0.497,1898,2.453,1916,1.671,1918,0.867,1951,1.078,1972,1.078,2010,2.313,2023,1.062,2030,1.813,2031,4.206,2032,2.403,2033,4.316,2034,1.864,2035,2.859,2036,2.801,2037,3.84,2038,2.514,2039,1.864,2040,1.567,2041,3.787,2042,3.191,2043,3.792,2044,3.141,2045,2.78,2046,4.936,2047,2.859,2048,3.9,2049,2.78,2050,1.864,2051,1.442,2052,1.813,2053,2.78,2054,1.813,2055,1.813,2056,2.707,2057,1.813,2058,1.813,2059,2.861,2060,2.54,2061,1.813,2062,1.765,2063,1.864,2064,1.813,2065,1.813,2066,1.813,2067,1.864,2068,1.864,2069,1.72,2070,1.567,2071,1.864,2072,2.639,2073,1.864,2074,1.567,2075,1.864,2076,2.707,2077,2.859,2078,2.859,2079,2.403,2080,2.403,2081,1.864,2082,1.813,2083,1.765,2084,1.864,2085,1.864]],["title/interfaces/IElementPosition.html",[40,0.003,946,2.978]],["body/interfaces/IElementPosition.html",[3,0.271,4,0.255,5,0.255,10,0.28,11,0.549,20,0.005,24,0.36,28,0.271,39,0.371,40,0.005,41,0.941,42,1.664,47,1.687,78,0.003,79,0.004,80,0.003,85,1.125,110,0.646,111,3.161,116,2.337,136,0.787,168,1.416,283,4.03,284,1.757,285,1.255,294,2.215,602,2.463,639,2.244,641,1.962,748,2.015,787,1.687,802,2.816,946,4.939,948,2.231,1893,1.05,1898,2.65,1931,3.205,1933,2.905,1974,2.242,2004,2.312,2020,3.399,2027,2.773,2237,5.38,2238,6.553,2239,5.38,2240,5.92,2241,4.659,2242,4.659,2243,4.659,2244,4.659]],["title/interfaces/IEnhancedLineCapConfig.html",[40,0.003,2116,3.292]],["body/interfaces/IEnhancedLineCapConfig.html",[0,0.107,3,0.185,4,0.174,5,0.174,10,0.191,11,0.428,12,1.119,13,0.659,20,0.005,21,0.745,22,1.352,24,0.31,28,0.37,34,0.869,38,1.269,39,0.37,40,0.005,41,0.843,52,2.045,53,1.137,78,0.002,79,0.003,80,0.002,85,0.769,89,1.867,90,0.93,102,2.192,109,1.653,126,1.092,136,0.909,145,1.733,154,3.057,160,2.893,164,1.457,168,1.339,183,0.853,198,2.289,213,2.086,214,2.365,218,1.861,222,1.343,244,1.343,251,2.176,257,2.165,259,3.325,267,2.955,272,4.427,285,1.192,289,1.709,294,1.152,296,2.858,297,2.858,298,3.54,299,3.613,300,3.143,301,2.115,303,2.487,306,2.858,309,2.858,310,2.482,313,1.485,321,1.402,327,2.312,328,1.443,331,2.422,332,2.365,333,1.324,336,1.382,337,2.002,585,1.184,641,1.78,733,1.764,748,1.811,790,2.893,795,2.006,800,1.477,815,3.78,972,3.062,1270,2.858,1373,4.108,1539,3.636,1598,2.858,1809,4.18,1810,4.915,1814,3.636,1893,0.718,1902,2.687,1903,2.421,1904,1.532,1916,1.842,1918,2,1922,2.378,1937,2.53,1957,3.191,2005,2.196,2010,1.305,2032,2.261,2036,4.176,2044,3.012,2051,4.287,2070,2.261,2086,3.062,2087,3.062,2088,3.183,2089,4.425,2090,4.425,2091,3.74,2092,3.183,2093,5.086,2094,4.425,2095,3.851,2096,3.183,2097,4.722,2098,5.289,2099,3.183,2100,2.955,2101,3.183,2102,2.547,2103,4.425,2104,2.547,2105,4.108,2106,4.257,2107,4.257,2108,4.108,2109,3.062,2110,3.062,2111,3.851,2112,2.482,2113,3.062,2114,5.289,2115,5.497,2116,4.893,2117,2.955,2118,3.183,2119,3.183,2120,3.183,2121,2.955,2122,3.183,2123,3.183,2124,3.183,2125,2.955,2126,4.425,2127,4.257,2128,2.955,2129,3.183,2130,4.425,2131,4.257,2132,2.77,2133,3.183,2134,3.183,2135,3.062,2136,3.062,2137,5.086,2138,3.183,2139,3.183,2140,3.062,2141,2.955,2142,3.183,2143,3.183,2144,3.183,2145,3.183,2146,3.183,2147,2.77]],["title/interfaces/IFormatters.html",[40,0.003,2161,2.892]],["body/interfaces/IFormatters.html",[3,0.188,4,0.176,5,0.176,10,0.332,11,0.432,12,0.835,13,0.668,17,0.658,20,0.005,22,0.965,24,0.312,28,0.26,34,0.88,39,0.388,40,0.005,41,0.916,42,1.151,47,1.167,75,1.178,78,0.002,79,0.003,80,0.002,85,0.779,95,1.79,97,1.805,110,0.853,112,1.47,119,1.556,126,1.531,128,2.107,134,2.398,136,0.853,142,1.83,145,1.882,168,1.352,179,1.8,182,2.107,183,0.621,187,0.845,196,1.47,226,1.989,229,2.024,231,1.805,249,3.772,284,2.479,285,0.868,289,1.717,313,0.941,326,2.805,334,1.849,336,1.399,337,2.807,368,2.024,379,3.885,441,2.724,581,1.965,649,3.1,771,1.918,773,2.579,774,1.233,783,2.755,785,2.479,787,1.167,789,4.663,811,2.215,852,3.1,895,3.896,1468,1.399,1503,2.341,1513,4.143,1617,2.805,1666,3.571,1668,2.894,1685,2.149,1705,3.925,1801,1.704,1893,0.727,1912,1.677,1915,2.36,1916,2.359,1941,3.087,2004,2.215,2027,2.181,2037,3.038,2040,3.17,2042,2.066,2059,3.103,2060,1.989,2079,2.289,2080,2.289,2112,3.481,2148,4.143,2149,2.992,2150,4.216,2151,3.223,2153,4.598,2154,2.992,2155,2.992,2156,3.1,2157,3.1,2158,3.1,2159,4.327,2160,4.801,2161,4.327,2162,1.965,2163,3.1,2164,2.894,2165,2.992,2166,3.223,2167,3.223,2168,5.804,2169,3.885,2170,6.408,2171,2.805,2172,3.223,2173,4.463,2174,4.143,2175,2.648,2176,2.805,2177,2.805,2178,4.811,2179,4.804,2180,4.463,2181,2.894,2182,2.894,2183,4.804,2184,2.805,2185,2.805,2186,3.223,2187,3.223,2188,3.1,2189,2.805,2190,4.811,2191,3.223,2192,5.051,2193,2.805,2194,3.223,2195,3.223,2196,4.294,2197,3.223,2198,3.223,2199,3.223,2225,2.579,2245,4.795]],["title/interfaces/IGrid.html",[40,0.003,544,1.598]],["body/interfaces/IGrid.html",[0,0.046,3,0.112,4,0.105,5,0.105,10,0.116,11,0.295,17,1.205,19,1.647,20,0.005,21,0.836,22,1.125,24,0.328,28,0.314,39,0.349,40,0.005,41,0.505,52,1.134,75,0.411,78,0.001,79,0.002,80,0.001,83,2.542,85,1.037,89,1.823,90,0.902,95,3.403,100,1.433,101,3.529,102,1.215,103,3.382,104,1.4,105,1.4,106,1.812,108,3.597,110,0.721,111,2.466,112,1.873,114,2.99,115,2.759,116,1.909,124,2.683,126,1.045,135,3.859,136,0.595,139,3.792,142,1.76,145,1.817,148,3.02,154,0.942,155,2.264,157,1.433,158,2.438,159,1.584,160,3.248,161,1.584,162,1.584,163,1.917,165,1.584,168,1.357,170,2.438,171,2.376,172,1.543,179,1.992,182,2.805,183,0.372,184,2.213,185,3.347,186,2.376,198,1.898,218,1.128,257,2.294,258,1.312,273,1.232,285,0.519,289,1.682,301,2.066,313,1.806,314,2.345,321,0.849,334,1.602,384,2.423,404,2.983,446,1.664,447,1.466,459,1.118,464,1.575,493,1.036,494,2.469,529,1.506,530,2.445,534,3.266,544,2.959,550,2.561,553,1.975,557,3.453,585,0.717,595,1.467,596,1.764,597,3.117,598,1.543,601,0.78,602,1.019,603,1.504,632,1.236,639,2.109,641,1.887,647,1.304,652,2.164,679,1.975,717,2.83,718,2.066,719,1.342,723,3.266,733,0.769,748,1.244,750,1.402,767,1.4,779,3.695,783,2.649,784,2.032,785,2.384,800,0.644,813,1.504,821,3.347,837,2.626,945,3.718,1023,1.433,1067,1.917,1146,1.584,1163,2.376,1178,3.671,1203,1.543,1330,2.035,1371,2.424,1454,3.189,1545,2.504,1546,3.527,1547,1.543,1548,1.584,1549,1.584,1555,1.584,1559,1.584,1563,1.584,1567,1.584,1640,3.527,1641,4.061,1642,3.527,1643,3.527,1644,3.434,1647,5.645,1649,1.128,1654,3.347,1663,2.438,1670,2.438,1676,3.527,1680,2.504,1685,3.117,1686,1.4,1689,1.504,1690,1.543,1695,2.438,1696,2.376,1701,2.683,1704,1.504,1705,2.469,1769,3.527,1770,1.584,1860,1.504,1861,1.543,1862,1.543,1863,1.543,1864,1.543,1865,2.438,1866,1.4,1867,1.543,1893,0.435,1898,2.32,1916,1.554,1918,0.758,1951,0.942,1972,0.942,2010,2.211,2023,0.928,2030,1.584,2031,3.95,2032,2.164,2033,4.083,2034,1.629,2035,2.575,2036,2.571,2037,3.671,2038,2.264,2039,1.629,2040,1.369,2041,3.556,2042,2.996,2043,3.527,2044,2.921,2045,2.504,2046,4.766,2047,2.575,2048,3.627,2049,2.504,2050,1.629,2051,1.26,2052,1.584,2053,2.504,2054,1.584,2055,1.584,2056,2.438,2057,1.584,2058,1.584,2059,2.626,2060,2.332,2061,1.584,2062,1.543,2063,1.629,2064,1.584,2065,1.584,2066,1.584,2067,1.629,2068,1.629,2069,1.504,2070,1.369,2071,1.629,2072,2.376,2073,1.629,2074,1.369,2075,1.629,2076,3.434,2077,3.627,2078,3.627,2079,3.048,2080,3.048,2081,2.575,2082,2.504,2083,1.543,2084,1.629,2085,1.629,2246,2.869,2247,2.869,2248,2.869,2249,2.869,2250,2.869,2251,2.869,2252,2.869,2253,2.869,2254,2.869,2255,2.869,2256,2.869,2257,2.869]],["title/interfaces/IGridConfig.html",[40,0.003,135,2.378]],["body/interfaces/IGridConfig.html",[0,0.051,3,0.124,4,0.116,5,0.116,10,0.128,11,0.319,20,0.005,21,0.358,22,0.979,24,0.323,28,0.325,39,0.357,40,0.005,41,0.546,52,1.224,75,0.454,78,0.002,79,0.002,80,0.002,83,2.513,85,0.514,89,1.9,90,0.692,95,3.472,100,1.581,101,4.065,102,2.064,103,3.896,104,3.289,105,3.289,106,2.007,108,3.9,110,0.748,111,2.569,112,1.778,114,3.102,115,2.875,116,1.981,124,2.858,126,1.553,135,3.752,136,0.748,139,4.03,142,1.857,145,1.952,148,2.651,154,1.04,155,2.445,157,1.581,158,2.633,159,1.749,160,3.384,161,1.749,162,1.749,163,2.023,165,1.749,168,1.372,170,2.633,171,2.567,172,1.703,179,1.931,182,2.96,183,0.41,184,2.39,185,3.531,186,2.567,198,1.987,218,1.244,257,2.301,258,1.448,285,0.573,289,1.34,301,1.673,313,1.764,314,2.182,321,0.937,334,1.663,384,1.98,404,3.148,446,0.825,459,0.781,464,1.208,493,1.143,494,2.63,529,1.604,530,1.824,534,1.619,544,2.822,550,2.443,553,1.852,557,3.148,585,0.792,595,1.619,596,1.537,597,2.922,598,1.703,601,0.86,602,1.125,603,1.66,632,1.364,639,2.181,641,1.942,647,1.937,652,1.511,679,1.514,717,2.673,718,1.937,719,1.449,723,2.504,733,1.312,748,1.084,750,1.514,767,1.545,779,3.216,783,2.795,784,1.419,785,2.235,800,1.099,813,1.66,821,3.531,837,3.404,945,3.319,1023,1.581,1067,2.023,1146,1.749,1163,1.66,1178,3.896,1203,2.633,1330,1.56,1371,1.859,1454,3.365,1545,2.704,1546,3.721,1547,1.703,1548,1.749,1549,1.749,1555,1.749,1559,1.749,1563,1.749,1567,1.749,1640,1.749,1642,1.749,1643,1.749,1644,1.703,1647,5.589,1649,1.244,1654,2.567,1663,1.703,1670,1.703,1676,2.704,1680,1.749,1685,2.684,1686,1.545,1689,1.66,1690,1.703,1695,1.703,1696,3.531,1701,2.858,1704,1.66,1705,2.63,1769,2.704,1770,1.749,1860,1.66,1861,1.703,1862,1.703,1863,1.703,1864,1.703,1865,2.633,1866,1.545,1867,1.703,1893,0.48,1898,2.418,1916,1.639,1918,1.294,1951,1.04,1972,1.04,2010,2.347,2023,1.024,2030,1.749,2031,4.138,2032,2.337,2033,4.254,2034,1.798,2035,2.781,2036,2.739,2037,3.796,2038,2.445,2039,1.798,2040,1.511,2041,3.726,2042,3.139,2043,3.721,2044,3.082,2045,2.704,2046,4.891,2047,2.781,2048,3.827,2049,2.704,2050,1.798,2051,1.391,2052,1.749,2053,2.704,2054,1.749,2055,1.749,2056,2.633,2057,1.749,2058,1.749,2059,2.797,2060,2.484,2061,1.749,2062,1.703,2063,1.798,2064,1.749,2065,1.749,2066,1.749,2067,1.798,2068,1.798,2069,1.66,2070,1.511,2071,2.781,2072,2.567,2073,1.798,2074,1.511,2075,1.798,2076,2.633,2077,2.781,2078,2.781,2079,2.337,2080,2.337,2081,1.798,2082,1.749,2083,1.703,2084,1.798,2085,1.798]],["title/interfaces/IHasInnerScale.html",[40,0.003,2196,3.292]],["body/interfaces/IHasInnerScale.html",[3,0.191,4,0.179,5,0.179,10,0.334,11,0.436,12,0.844,13,0.677,20,0.005,24,0.314,28,0.263,34,0.892,39,0.389,40,0.005,41,0.967,42,1.168,47,1.184,75,1.1,78,0.002,79,0.003,80,0.002,95,1.816,97,1.822,110,0.857,112,1.485,119,1.568,126,1.546,128,2.137,134,2.422,136,0.836,142,1.848,145,1.888,168,1.355,179,1.808,182,2.137,183,0.63,187,0.857,196,1.485,226,2.018,229,2.044,231,1.822,249,3.809,284,2.464,285,0.881,289,1.726,313,0.954,326,2.846,334,1.857,336,1.419,337,2.056,368,2.044,379,3.923,441,2.763,581,1.985,649,3.145,771,1.946,773,2.616,774,1.25,783,2.783,785,2.504,787,1.184,789,4.132,811,2.237,852,3.145,895,3.926,1468,1.419,1503,2.374,1513,4.185,1617,2.846,1666,3.607,1668,2.936,1685,2.18,1705,2.947,1801,1.728,1893,0.737,1912,1.701,1915,2.383,1916,2.365,1941,3.092,2004,2.237,2027,2.203,2037,3.068,2040,3.202,2042,2.096,2059,2.273,2060,2.018,2079,2.322,2080,2.322,2112,3.515,2148,4.185,2149,3.035,2150,4.337,2151,3.269,2153,4.633,2154,3.035,2155,3.035,2156,3.145,2157,3.145,2158,3.145,2159,4.36,2160,4.549,2161,3.809,2162,1.44,2163,3.145,2164,2.936,2165,3.035,2166,3.269,2167,3.269,2168,5.833,2169,3.923,2170,6.422,2171,2.846,2172,3.269,2173,4.508,2174,4.185,2175,2.687,2176,2.846,2177,2.846,2178,4.84,2179,4.825,2180,4.508,2181,2.936,2182,2.936,2183,4.825,2184,2.846,2185,2.846,2186,3.269,2187,3.269,2188,3.145,2189,2.846,2190,4.84,2191,3.269,2192,5.077,2193,2.846,2194,3.269,2195,3.269,2196,4.963,2197,5.561,2198,3.269,2199,3.269]],["title/interfaces/IHighlightStrategy.html",[40,0.003,272,2.978]],["body/interfaces/IHighlightStrategy.html",[0,0.105,3,0.181,4,0.17,5,0.17,10,0.187,12,1.112,13,1.041,17,1.027,19,1.771,20,0.005,21,0.965,22,1.087,24,0.324,28,0.368,34,0.85,38,1.241,39,0.368,40,0.005,41,0.833,52,1.621,53,1.112,78,0.002,79,0.003,80,0.002,89,1.845,90,0.916,102,2.171,109,1.634,126,1.068,136,0.863,145,1.719,154,2.98,160,2.849,164,1.435,168,1.322,179,1.507,183,1.049,198,2.256,213,2.35,214,2.314,218,1.821,222,1.313,244,1.313,251,2.151,257,2.075,259,3.286,267,2.89,272,4.739,273,1.762,274,4.192,276,4.192,277,4.192,285,1.174,289,1.87,294,1.82,296,3.913,297,2.796,298,4.752,299,4.331,300,4.219,301,2.536,303,2.629,306,3.913,307,3.165,309,3.913,310,3.92,313,1.468,321,1.371,327,2.261,328,1.412,331,2.369,332,2.314,333,1.295,336,1.351,337,1.958,585,1.158,641,1.677,733,1.737,748,1.793,790,2.849,795,1.976,800,1.455,815,3.735,972,2.231,1270,2.796,1373,4.045,1539,3.581,1598,2.796,1809,4.131,1810,3.581,1814,3.581,1893,0.702,1902,2.661,1903,2.398,1904,1.499,1916,2.289,1918,1.976,1922,2.341,1937,2.506,1957,2.833,2005,2.163,2010,1.277,2032,2.212,2036,3.901,2044,2.966,2051,3.986,2070,2.212,2086,2.995,2087,2.995,2088,3.114,2089,4.357,2090,4.357,2091,3.683,2092,3.114,2093,5.027,2094,4.357,2095,3.793,2096,3.114,2097,4.667,2098,5.238,2099,3.114,2100,2.89,2101,3.114,2102,2.491,2103,4.357,2104,2.491,2105,4.045,2106,4.192,2107,4.192,2108,4.045,2109,2.995,2110,2.995,2111,3.793,2112,2.428,2113,2.995,2114,4.836,2115,5.027,2116,4.192,2117,2.89,2118,3.114,2119,3.114,2120,3.114,2121,2.89,2122,3.114,2123,3.114,2124,3.114,2125,2.89,2126,4.357,2127,4.192,2128,2.89,2129,3.114,2130,4.357,2131,4.192,2132,2.71,2133,3.114,2134,3.114,2135,2.995,2136,2.995,2137,5.027,2138,3.114,2139,3.114,2140,2.995,2141,2.89,2142,3.114,2143,3.114,2144,3.114,2145,3.114,2146,3.114,2147,2.71,2258,4.633,2259,4.633,2260,4.633]],["title/interfaces/IInteractionCoordinatesPayload.html",[40,0.003,2244,3.422]],["body/interfaces/IInteractionCoordinatesPayload.html",[3,0.278,4,0.261,5,0.261,10,0.287,11,0.557,20,0.005,24,0.269,28,0.278,39,0.374,40,0.005,41,1.025,42,1.703,47,1.726,78,0.004,79,0.004,80,0.004,85,1.152,110,0.661,111,2.366,116,1.75,136,0.798,168,1.311,283,4.087,284,1.799,285,1.284,294,2.238,602,2.521,639,1.68,641,1.469,748,2.114,787,1.726,802,3.068,946,4.15,948,1.875,1893,1.075,1898,2.227,1931,3.626,1933,3.418,1974,2.295,2004,2.366,2020,3.565,2027,2.812,2237,5.506,2238,5.506,2239,5.506,2240,6.004,2241,4.768,2242,4.768,2243,5.755,2244,5.755]],["title/interfaces/IInteractionDataPointEvent.html",[40,0.003,1219,1.933]],["body/interfaces/IInteractionDataPointEvent.html",[3,0.127,4,0.119,5,0.119,10,0.276,11,0.444,12,1.266,13,1.353,20,0.005,21,0.834,24,0.318,28,0.354,33,1.231,34,0.596,35,1.591,36,1.591,37,1.395,39,0.4,40,0.005,41,0.956,42,1.769,47,1.793,53,1.198,57,1.699,75,0.871,78,0.002,79,0.003,80,0.002,83,1.542,85,0.527,89,1.231,90,1.308,97,1.653,102,0.87,106,0.846,110,0.465,116,0.801,119,0.663,131,2.406,136,0.885,145,1.765,163,0.975,164,1.852,168,1.304,183,1.186,187,0.572,198,1.532,213,2.031,222,1.415,229,0.989,238,2.313,244,0.92,245,0.989,251,2.563,254,1.254,257,1.215,284,1.542,285,1.334,287,1.019,289,1.358,294,0.79,303,2.06,313,1.34,314,2.002,328,0.989,333,1.908,334,1.259,368,0.989,384,0.835,399,1.192,411,2.143,417,1.083,439,1.05,443,1.544,444,1.615,446,1.921,447,1.615,453,1.691,455,2.06,459,1.818,464,1.5,466,1.591,481,2.181,529,1.975,530,1.521,535,1.299,536,1.299,537,1.299,538,1.299,544,1.567,546,1.233,550,1.653,552,1.299,553,1.544,558,1.299,562,1.997,566,1.997,576,1.299,577,1.691,580,1.276,581,2.021,585,1.248,594,1.276,596,1.019,600,1.299,601,1.357,604,1.299,639,0.769,641,1.033,647,2.238,651,1.833,679,1.004,717,1.567,718,1.967,719,2.021,733,0.87,734,1.172,748,1.631,750,1.004,752,1.967,755,2.111,758,1.135,766,1.05,774,1.283,780,1.154,787,1.793,795,0.989,800,1.653,802,2.703,811,1.083,825,1.276,830,1.276,892,1.192,934,1.212,948,1.607,972,1.718,1007,1.117,1060,1.233,1061,1.299,1062,1.299,1063,1.299,1065,2.313,1067,0.975,1069,1.035,1186,2.209,1201,2.678,1218,1.233,1219,1.895,1236,2.233,1247,1.254,1267,1.172,1269,1.803,1323,2.06,1330,1.591,1432,1.233,1444,2.592,1468,1.456,1613,2.35,1634,1.233,1693,1.276,1737,1.299,1750,1.212,1781,1.299,1801,2.161,1893,0.492,1894,1.276,1895,1.323,1896,1.997,1897,1.833,1898,1.567,1899,1.299,1900,1.276,1901,1.299,1902,1.066,1903,0.961,1904,1.05,1905,2.433,1906,1.276,1907,1.254,1908,2.433,1909,1.323,1910,1.276,1911,1.276,1912,1.135,1913,1.299,1914,1.299,1915,1.774,1916,1.893,1917,1.154,1918,1.804,1919,3.203,1920,1.323,1921,1.895,1922,1.172,1923,2.433,1924,1.323,1925,2.034,1926,1.997,1927,1.997,1928,1.323,1929,1.997,1930,2.349,1931,1.895,1932,1.323,1933,1.117,1934,1.323,1935,1.233,1936,1.233,1937,1.881,1938,1.192,1939,1.323,1940,1.323,1941,0.989,1942,1.323,1943,1.276,1944,1.928,1945,1.997,1946,1.299,1947,1.997,1948,1.323,1949,1.276,1950,1.323,1951,2.556,1952,1.323,1953,1.299,1954,1.323,1955,1.997,1956,1.276,1957,1.135,1958,1.299,1959,1.299,1960,1.323,1961,1.323,1962,2.034,1963,1.323,1964,1.323,1965,1.299,1966,2.034,1967,1.323,1968,1.299,1969,1.254,1970,1.323,1971,1.323,1972,1.64,1973,1.299,1974,1.967,1975,1.323,1976,1.299,1977,1.299,1978,1.323,1979,1.323,1980,1.323,1981,1.299,1982,1.323,1983,1.117,1984,1.212,1985,1.299,1986,1.323,1987,1.323,1988,1.323,1989,1.323,1990,1.276,1991,1.299,1992,1.276,1993,1.276,1994,1.323,1995,2.034,1996,2.731,1997,1.323,1998,1.299,1999,1.323,2000,1.323,2001,1.323,2002,1.323,2003,1.323,2004,1.665,2005,1.083,2006,1.323,2007,1.323,2008,1.895,2009,1.276,2010,1.376,2011,1.276,2012,1.323,2013,1.323,2014,1.895,2015,2.034,2016,1.323,2017,1.323,2018,2.549,2019,1.928,2020,2.549,2021,1.997,2022,1.276,2023,1.05,2024,1.299,2025,1.276,2026,1.254,2027,1.066,2028,1.323,2029,1.135]],["title/interfaces/IInteractionDataPointsEvent.html",[40,0.003,1218,1.933]],["body/interfaces/IInteractionDataPointsEvent.html",[3,0.127,4,0.119,5,0.119,10,0.276,11,0.444,12,1.266,13,1.353,20,0.005,21,0.834,24,0.317,28,0.354,33,1.231,34,0.595,35,1.59,36,1.59,37,1.395,39,0.4,40,0.005,41,0.956,42,1.769,47,1.793,53,1.198,57,1.699,75,0.871,78,0.002,79,0.003,80,0.002,83,1.541,85,0.527,89,1.231,90,1.308,97,1.652,102,0.869,106,0.846,110,0.465,116,0.8,119,0.663,131,2.405,136,0.885,145,1.765,163,0.974,164,1.851,168,1.304,183,1.186,187,0.572,198,1.531,213,2.03,222,1.415,229,0.989,238,2.313,244,0.92,245,0.989,251,2.519,254,1.253,257,1.214,284,1.541,285,1.334,287,1.019,289,1.357,294,0.79,303,2.059,313,1.339,314,2.002,328,0.989,333,1.908,334,1.259,368,0.989,384,0.834,399,1.191,411,1.019,417,1.082,439,2.208,443,1.543,444,1.614,446,1.92,447,1.614,453,2.312,455,2.312,459,1.817,464,1.5,466,1.59,481,2.181,529,1.974,530,1.521,535,1.298,536,1.298,537,1.298,538,1.298,544,1.566,546,1.232,550,1.652,552,1.298,553,1.543,558,1.298,562,1.996,566,1.996,576,1.298,577,1.69,580,1.275,581,2.02,585,1.248,594,1.275,596,1.019,600,1.298,601,1.356,604,1.298,639,0.768,641,1.033,647,2.237,651,1.832,679,1.004,717,1.566,718,1.967,719,2.02,733,0.869,734,1.172,748,1.631,750,1.004,752,1.967,755,2.278,758,1.135,766,1.05,774,1.283,780,1.153,787,1.793,795,0.989,800,1.653,802,2.703,811,1.082,825,1.275,830,1.275,892,1.191,934,1.211,948,1.607,972,1.717,1007,1.117,1060,1.232,1061,1.298,1062,1.298,1063,1.298,1065,2.312,1067,0.974,1069,1.034,1186,2.208,1201,2.349,1218,1.895,1219,1.232,1236,2.232,1247,1.253,1267,1.172,1269,1.802,1323,2.06,1330,1.59,1432,1.232,1444,2.591,1468,1.456,1613,2.349,1634,1.232,1693,1.275,1737,1.298,1750,1.211,1781,1.298,1801,2.16,1893,0.492,1894,1.275,1895,1.322,1896,1.996,1897,1.832,1898,1.566,1899,1.298,1900,1.275,1901,1.298,1902,1.066,1903,0.96,1904,1.05,1905,2.432,1906,1.275,1907,1.253,1908,2.432,1909,1.322,1910,1.275,1911,1.275,1912,1.135,1913,1.298,1914,1.298,1915,1.773,1916,1.893,1917,1.153,1918,1.804,1919,3.202,1920,1.322,1921,1.895,1922,1.172,1923,2.432,1924,1.322,1925,2.033,1926,1.996,1927,1.996,1928,1.322,1929,1.996,1930,2.348,1931,1.895,1932,1.322,1933,1.117,1934,1.322,1935,1.232,1936,1.232,1937,1.88,1938,1.191,1939,1.322,1940,1.322,1941,0.989,1942,1.322,1943,1.275,1944,1.927,1945,1.996,1946,1.298,1947,1.996,1948,1.322,1949,1.275,1950,1.322,1951,2.555,1952,1.322,1953,1.298,1954,1.322,1955,1.996,1956,1.275,1957,1.135,1958,1.298,1959,1.298,1960,1.322,1961,1.322,1962,2.033,1963,1.322,1964,1.322,1965,1.298,1966,2.033,1967,1.322,1968,1.298,1969,1.253,1970,1.322,1971,1.322,1972,1.639,1973,1.298,1974,1.967,1975,1.322,1976,1.298,1977,1.298,1978,1.322,1979,1.322,1980,1.322,1981,1.298,1982,1.322,1983,1.117,1984,1.211,1985,1.298,1986,1.322,1987,1.322,1988,1.322,1989,1.322,1990,1.275,1991,1.298,1992,1.275,1993,1.275,1994,1.322,1995,2.033,1996,2.731,1997,1.322,1998,1.298,1999,1.322,2000,1.322,2001,1.322,2002,1.322,2003,1.322,2004,1.664,2005,1.082,2006,1.322,2007,1.322,2008,1.895,2009,1.275,2010,1.375,2011,1.275,2012,1.322,2013,1.322,2014,1.895,2015,2.033,2016,1.322,2017,1.322,2018,2.548,2019,2.348,2020,2.548,2021,1.298,2022,1.275,2023,1.05,2024,1.298,2025,1.275,2026,1.253,2027,1.066,2028,1.322,2029,1.135]],["title/interfaces/IInteractionPayload.html",[40,0.003,2020,1.9]],["body/interfaces/IInteractionPayload.html",[3,0.128,4,0.12,5,0.12,10,0.276,11,0.445,12,1.264,13,1.354,20,0.005,21,0.835,24,0.318,28,0.355,33,1.235,34,0.598,35,1.595,36,1.595,37,1.399,39,0.4,40,0.005,41,0.933,42,1.772,47,1.796,53,1.201,57,1.702,75,0.873,78,0.002,79,0.003,80,0.002,83,1.545,85,0.529,89,1.235,90,1.309,97,1.656,102,0.873,106,0.849,110,0.466,116,0.804,119,0.665,131,2.408,136,0.885,145,1.767,163,0.978,164,1.854,168,1.304,183,1.187,187,0.574,198,1.535,213,2.034,222,1.419,229,0.993,238,2.317,244,0.924,245,0.993,251,2.521,254,1.258,257,1.218,284,1.545,285,1.336,287,1.023,289,1.36,294,0.793,303,2.063,313,1.342,314,2.006,328,0.993,333,1.912,334,1.262,368,0.993,384,0.837,399,1.196,411,1.023,417,1.087,439,1.054,443,1.548,444,1.619,446,1.923,447,1.619,453,1.696,455,2.065,459,1.821,464,1.503,466,1.595,481,2.184,529,1.978,530,1.525,535,1.303,536,1.303,537,1.303,538,1.303,544,1.571,546,1.237,550,1.656,552,1.303,553,1.548,558,1.303,562,2.002,566,2.002,576,1.303,577,1.696,580,1.28,581,2.024,585,1.252,594,1.28,596,1.023,600,1.303,601,1.36,604,1.303,639,0.771,641,1.036,647,2.241,651,1.838,679,1.008,717,1.571,718,1.972,719,2.024,733,0.873,734,1.176,748,1.634,750,1.008,752,1.972,755,2.115,758,1.139,766,1.054,774,1.287,780,1.158,787,1.796,795,0.993,800,1.656,802,2.706,811,1.087,825,1.28,830,1.28,892,1.196,934,1.216,948,1.611,972,1.722,1007,1.121,1060,1.237,1061,1.303,1062,1.303,1063,1.303,1065,2.317,1067,0.978,1069,1.038,1186,2.778,1201,2.354,1218,1.237,1219,1.237,1236,2.238,1247,1.258,1267,1.176,1269,1.808,1323,2.065,1330,1.595,1432,1.237,1444,2.597,1468,1.46,1613,2.354,1634,1.237,1693,1.28,1737,1.303,1750,1.216,1781,1.303,1801,2.166,1893,0.494,1894,1.28,1895,1.327,1896,2.002,1897,1.838,1898,1.571,1899,1.303,1900,1.28,1901,1.303,1902,1.07,1903,0.964,1904,1.054,1905,2.438,1906,1.28,1907,1.258,1908,2.438,1909,1.327,1910,1.28,1911,1.28,1912,1.139,1913,1.303,1914,1.303,1915,1.778,1916,1.896,1917,1.158,1918,1.807,1919,3.206,1920,1.327,1921,1.9,1922,1.176,1923,2.438,1924,1.327,1925,2.039,1926,2.002,1927,2.002,1928,1.327,1929,2.002,1930,2.354,1931,1.9,1932,1.327,1933,1.121,1934,1.327,1935,1.237,1936,1.237,1937,1.885,1938,1.196,1939,1.327,1940,1.327,1941,0.993,1942,1.327,1943,1.28,1944,1.933,1945,2.002,1946,1.303,1947,2.002,1948,1.327,1949,1.28,1950,1.327,1951,2.559,1952,1.327,1953,1.303,1954,1.327,1955,2.002,1956,1.28,1957,1.139,1958,1.303,1959,1.303,1960,1.327,1961,1.327,1962,2.039,1963,1.327,1964,1.327,1965,1.303,1966,2.039,1967,1.327,1968,1.303,1969,1.258,1970,1.327,1971,1.327,1972,1.644,1973,1.303,1974,1.972,1975,1.327,1976,1.303,1977,1.303,1978,1.327,1979,1.327,1980,1.327,1981,1.303,1982,1.327,1983,1.121,1984,1.216,1985,1.303,1986,1.327,1987,1.327,1988,1.327,1989,1.327,1990,1.28,1991,1.303,1992,1.28,1993,1.28,1994,1.327,1995,2.039,1996,2.736,1997,1.327,1998,1.303,1999,1.327,2000,1.327,2001,1.327,2002,1.327,2003,1.327,2004,1.67,2005,1.087,2006,1.327,2007,1.327,2008,1.9,2009,1.28,2010,1.379,2011,1.28,2012,1.327,2013,1.327,2014,1.9,2015,2.039,2016,1.327,2017,1.327,2018,2.275,2019,1.933,2020,2.553,2021,1.303,2022,1.28,2023,1.054,2024,1.303,2025,1.28,2026,1.258,2027,1.07,2028,1.327,2029,1.139]],["title/interfaces/IInteractionValues.html",[40,0.003,2240,3.57]],["body/interfaces/IInteractionValues.html",[3,0.276,4,0.259,5,0.259,17,0.968,20,0.005,24,0.268,28,0.276,39,0.373,40,0.005,41,0.95,42,2.048,47,2.076,78,0.004,79,0.004,80,0.004,85,1.145,110,0.795,111,2.352,116,1.739,136,0.855,168,1.308,283,4.55,284,2.163,285,1.544,294,2.319,307,3.441,602,2.505,639,1.67,641,1.46,748,2.11,787,2.076,802,2.845,946,4.125,948,1.863,1893,1.068,1898,2.213,1931,3.239,1933,2.936,1974,2.759,2004,2.845,2020,3.424,2027,3.013,2225,3.791,2237,5.472,2238,5.472,2239,6.621,2240,6.432,2241,4.739,2242,4.739,2243,4.739,2244,4.739,2261,7.051]],["title/interfaces/IInteractionValuesPayload.html",[40,0.003,2242,3.422]],["body/interfaces/IInteractionValuesPayload.html",[3,0.278,4,0.261,5,0.261,10,0.287,11,0.557,20,0.005,24,0.269,28,0.278,39,0.374,40,0.005,41,1.025,42,1.703,47,1.726,78,0.004,79,0.004,80,0.004,85,1.152,110,0.661,111,2.366,116,1.75,136,0.798,168,1.311,283,4.087,284,1.799,285,1.284,294,2.445,602,2.521,639,1.68,641,1.469,748,2.114,787,1.726,802,3.068,946,4.15,948,1.875,1893,1.075,1898,2.227,1931,3.251,1933,2.947,1974,2.295,2004,2.366,2020,3.565,2027,2.812,2237,5.506,2238,5.506,2239,5.506,2240,6.697,2241,5.755,2242,5.755,2243,4.768,2244,4.768]],["title/interfaces/ILineAccessors.html",[40,0.003,2102,2.738]],["body/interfaces/ILineAccessors.html",[0,0.14,3,0.243,4,0.228,5,0.228,7,2.391,8,1.334,10,0.25,11,0.592,12,1.242,13,1.408,14,1.507,16,4.347,17,1.08,20,0.005,21,0.701,23,3.841,24,0.299,28,0.339,29,4.125,30,4.47,31,3.245,32,2.893,33,1.941,34,1.587,37,2.544,38,1.659,39,0.357,40,0.005,41,1.014,52,2.277,53,2.077,54,2.236,55,1.614,57,1.352,72,2.832,73,3.245,74,3.245,75,1.239,76,3.622,77,3.622,78,0.003,79,0.004,80,0.003,94,1.405,109,1.352,112,1.371,126,1.427,134,2.236,136,0.577,149,2.832,164,2.081,188,3.93,245,1.887,285,1.121,455,2.097,771,2.477,787,1.507,790,2.72,815,3.092,822,3.863,828,3.022,945,2.668,1069,2.508,1164,3.092,1408,5.289,1893,1.193,1897,2.889,1902,2.585,1903,2.329,1904,2.546,1974,2.003,1983,2.977,2102,4.652,2104,3.329,2162,1.832,2171,3.622,2262,4.806,2263,6.911,2264,6.911,2265,5.289,2266,5.289,2267,4.806,2268,6.067,2269,3.622,2270,3.622,2271,4.806,2272,4.806,2273,4.806,2274,4.342,2275,4.552,2276,4.806,2277,4.806,2278,4.806,2279,4.342,2280,4.552,2281,4.806,2282,4.806,2283,4.552,2284,4.806,2285,4.806,2286,4.806]],["title/interfaces/ILineDataAccessors.html",[40,0.003,2263,3.743]],["body/interfaces/ILineDataAccessors.html",[0,0.141,3,0.246,4,0.231,5,0.231,7,2.423,8,1.352,10,0.253,11,0.595,12,1.187,13,1.363,14,1.526,16,4.383,17,1.295,20,0.005,21,0.71,22,1.153,23,3.873,24,0.238,28,0.341,29,4.159,30,4.507,31,3.288,32,2.931,33,2.256,34,1.456,37,2.557,38,1.681,39,0.358,40,0.005,41,1.019,52,2.287,53,2.089,54,2.265,55,1.635,57,1.37,72,2.87,73,3.288,74,3.288,75,1.247,76,3.669,77,3.669,78,0.003,79,0.004,80,0.003,94,1.417,109,1.37,112,1.389,126,1.446,134,2.265,136,0.584,149,2.87,164,2.025,188,3.963,245,1.911,285,1.135,455,2.125,771,2.509,787,1.526,790,2.756,815,3.133,822,3.914,828,3.062,945,2.703,1069,1.999,1164,3.133,1408,5.333,1893,1.202,1897,2.303,1902,2.06,1903,1.856,1904,2.029,1974,2.029,1983,2.995,2102,4.267,2104,3.373,2162,1.856,2171,3.669,2262,4.869,2263,6.726,2264,6.4,2265,5.85,2266,5.333,2267,4.869,2268,6.104,2269,3.669,2270,3.669,2271,4.869,2272,4.869,2273,4.869,2274,4.399,2275,4.612,2276,4.869,2277,4.869,2278,4.869,2279,4.399,2280,4.612,2281,4.869,2282,4.869,2283,4.612,2284,4.869,2285,4.869,2286,4.869]],["title/interfaces/ILineRendererConfig.html",[40,0.003,2117,3.176]],["body/interfaces/ILineRendererConfig.html",[0,0.102,3,0.174,4,0.164,5,0.164,10,0.18,11,0.41,12,1.097,13,0.62,20,0.005,21,0.713,22,1.44,24,0.348,28,0.365,34,0.816,38,1.192,39,0.365,40,0.005,41,0.887,52,1.576,53,1.068,78,0.002,79,0.003,80,0.002,85,0.722,89,1.805,90,1.034,102,2.133,109,1.598,126,1.453,136,0.899,145,1.808,154,3.196,160,2.769,164,1.395,168,1.297,183,0.816,198,2.292,213,2.016,214,2.222,218,1.749,222,1.261,244,1.261,251,2.104,257,2.123,259,3.215,267,2.776,272,4.914,285,1.325,289,1.67,294,1.083,296,2.685,297,2.685,298,3.389,299,3.493,300,3.008,301,2.045,303,2.507,306,2.685,309,2.685,310,2.332,313,1.562,321,1.317,327,2.172,328,1.356,331,2.276,332,2.222,333,1.244,336,1.298,337,1.881,585,1.113,641,1.739,733,1.689,748,1.931,790,2.769,795,1.92,800,1.414,815,4.195,972,2.169,1270,2.685,1373,4.565,1539,4.041,1598,2.685,1809,4.041,1810,3.481,1814,3.481,1893,0.674,1902,2.946,1903,2.486,1904,2.039,1916,1.781,1918,1.934,1922,2.276,1937,2.598,1957,3.136,2005,2.102,2010,1.737,2032,2.124,2036,3.991,2044,3.348,2051,4.095,2070,3.008,2086,2.877,2087,2.877,2088,2.99,2089,5.646,2090,5.646,2091,3.579,2092,2.99,2093,5.646,2094,4.918,2095,4.281,2096,2.99,2097,5.241,2098,5.146,2099,2.99,2100,2.776,2101,2.99,2102,2.393,2103,4.235,2104,2.393,2105,3.932,2106,4.075,2107,4.075,2108,3.932,2109,2.877,2110,2.877,2111,3.687,2112,2.332,2113,2.877,2114,5.431,2115,5.646,2116,5.146,2117,3.932,2118,4.235,2119,4.235,2120,4.235,2121,4.965,2122,4.235,2123,4.235,2124,5.349,2125,3.932,2126,4.918,2127,4.731,2128,3.932,2129,5.349,2130,5.349,2131,5.64,2132,3.687,2133,4.235,2134,5.349,2135,2.877,2136,2.877,2137,4.918,2138,2.99,2139,2.99,2140,2.877,2141,2.776,2142,2.99,2143,2.99,2144,2.99,2145,2.99,2146,2.99,2147,2.603]],["title/interfaces/ILineSeriesAccessors.html",[40,0.003,2264,3.743]],["body/interfaces/ILineSeriesAccessors.html",[0,0.139,3,0.238,4,0.223,5,0.223,7,2.343,8,1.307,10,0.245,11,0.588,12,1.175,13,1.395,14,1.476,16,4.291,17,1.176,20,0.005,21,0.687,22,1.313,23,3.792,24,0.295,28,0.336,29,4.072,30,4.413,31,3.18,32,2.834,33,1.916,34,1.425,37,2.777,38,1.626,39,0.354,40,0.005,41,0.955,52,2.46,53,2.332,54,2.191,55,1.581,57,1.325,72,2.776,73,3.18,74,3.18,75,1.294,76,3.549,77,3.549,78,0.003,79,0.004,80,0.003,85,0.985,94,1.387,109,1.325,112,1.343,126,1.398,134,2.191,136,0.724,149,2.776,164,2.068,188,3.88,245,1.849,285,1.406,455,2.055,771,2.427,787,1.89,790,3.413,815,3.03,822,3.785,828,2.961,945,2.614,1069,1.933,1164,3.03,1408,5.221,1893,1.177,1897,2.227,1902,1.993,1903,1.796,1904,1.963,1974,2.513,1983,2.949,2102,4.178,2104,3.263,2162,2.299,2171,3.549,2225,3.263,2262,6.03,2263,6.301,2264,6.644,2265,5.221,2266,5.221,2267,4.709,2268,6.336,2269,4.545,2270,4.545,2271,4.709,2272,4.709,2273,4.709,2274,4.255,2275,4.461,2276,4.709,2277,4.709,2278,4.709,2279,4.255,2280,4.461,2281,4.709,2282,4.709,2283,4.461,2284,4.709,2285,4.709,2286,4.709,2287,5.436]],["title/interfaces/ILinearScales.html",[40,0.003,1965,2.037]],["body/interfaces/ILinearScales.html",[3,0.127,4,0.12,5,0.12,10,0.276,11,0.445,12,1.263,13,1.354,20,0.005,21,0.835,24,0.326,28,0.354,33,1.233,34,0.597,35,1.593,36,1.593,37,1.397,39,0.4,40,0.005,41,0.932,42,2.009,47,2.037,53,1.2,57,1.701,75,0.872,78,0.002,79,0.003,80,0.002,83,1.544,89,1.233,90,1.308,97,1.654,102,0.871,106,0.848,110,0.466,116,0.802,119,0.664,131,2.407,136,0.885,145,1.766,163,0.977,164,1.853,168,1.304,183,1.187,187,0.573,198,1.533,213,2.032,222,1.417,229,0.991,238,2.315,244,0.922,245,0.991,251,2.52,254,1.256,257,1.216,284,1.544,285,1.335,287,1.021,289,1.359,294,0.791,303,2.061,313,1.341,314,2.004,328,0.991,333,1.91,334,1.26,368,0.991,384,0.836,399,1.194,411,1.021,417,1.085,439,1.052,443,1.546,444,1.617,446,1.922,447,1.617,453,1.693,455,2.063,459,1.819,464,1.502,466,1.593,481,2.183,529,1.976,530,1.523,535,1.301,536,1.301,537,1.301,538,1.301,544,1.569,546,1.235,550,1.654,552,1.301,553,1.546,558,1.301,562,2,566,2,576,1.301,577,1.693,580,1.278,581,2.023,585,1.25,594,1.278,596,1.021,600,1.301,601,1.358,604,1.301,639,0.77,641,1.035,647,2.239,651,1.835,679,1.006,717,1.569,718,1.97,719,2.023,733,0.871,734,1.174,748,1.513,750,1.006,752,1.97,755,2.113,758,1.137,766,1.052,774,1.285,780,1.156,787,1.795,795,0.991,800,1.533,802,2.597,811,1.085,825,1.278,830,1.278,892,1.194,934,1.214,948,1.609,972,1.72,1007,1.119,1060,1.235,1061,1.301,1062,1.301,1063,1.301,1065,2.315,1067,0.977,1069,1.036,1186,2.211,1201,2.352,1218,1.235,1219,1.235,1236,2.235,1247,1.256,1267,1.174,1269,1.805,1323,2.063,1330,1.593,1432,1.235,1444,2.594,1468,1.458,1613,2.352,1634,1.235,1693,1.278,1737,1.301,1750,1.214,1781,1.301,1801,2.163,1893,0.493,1894,1.278,1895,1.325,1896,2,1897,1.835,1898,1.569,1899,1.301,1900,1.278,1901,1.301,1902,1.068,1903,0.963,1904,1.052,1905,3.244,1906,1.278,1907,1.256,1908,2.436,1909,1.325,1910,1.278,1911,1.278,1912,1.137,1913,1.301,1914,1.301,1915,1.776,1916,1.895,1917,1.156,1918,1.806,1919,3.204,1920,1.325,1921,1.898,1922,1.174,1923,2.436,1924,1.325,1925,2.036,1926,2,1927,2,1928,1.325,1929,2,1930,2.352,1931,1.898,1932,1.325,1933,1.119,1934,1.325,1935,1.235,1936,1.235,1937,1.883,1938,1.194,1939,1.325,1940,1.325,1941,0.991,1942,1.325,1943,1.278,1944,1.931,1945,2,1946,1.301,1947,2,1948,1.325,1949,1.278,1950,1.325,1951,2.557,1952,1.325,1953,1.301,1954,1.325,1955,2,1956,1.278,1957,1.137,1958,1.301,1959,1.301,1960,1.325,1961,1.325,1962,2.036,1963,1.325,1964,1.325,1965,2,1966,2.036,1967,1.325,1968,1.301,1969,1.256,1970,1.325,1971,1.325,1972,1.642,1973,1.301,1974,1.97,1975,1.325,1976,1.301,1977,1.301,1978,1.325,1979,1.325,1980,1.325,1981,1.301,1982,1.325,1983,1.119,1984,1.214,1985,1.301,1986,1.325,1987,1.325,1988,1.325,1989,1.325,1990,1.278,1991,1.301,1992,1.278,1993,1.278,1994,1.325,1995,2.036,1996,2.734,1997,1.325,1998,1.301,1999,1.325,2000,1.325,2001,1.325,2002,1.325,2003,1.325,2004,1.667,2005,1.085,2006,1.325,2007,1.325,2008,1.898,2009,1.278,2010,1.378,2011,1.278,2012,1.325,2013,1.325,2014,1.898,2015,2.036,2016,1.325,2017,1.325,2018,2.273,2019,1.931,2020,2.273,2021,1.301,2022,1.278,2023,1.052,2024,1.301,2025,1.278,2026,1.256,2027,1.068,2028,1.325,2029,1.137]],["title/interfaces/IMarkerInteractionConfig.html",[40,0.003,2097,3.176]],["body/interfaces/IMarkerInteractionConfig.html",[0,0.108,3,0.188,4,0.177,5,0.177,10,0.194,11,0.433,12,1.175,13,0.67,20,0.005,21,0.753,22,0.967,24,0.253,28,0.372,34,0.883,38,1.289,39,0.372,40,0.005,41,0.85,52,1.665,53,1.598,78,0.002,79,0.003,80,0.002,85,0.781,89,1.883,90,0.94,102,2.317,109,1.667,126,1.109,136,0.871,145,1.912,154,3.011,160,2.925,164,1.473,168,1.283,183,0.862,198,2.266,213,2.103,214,2.403,218,1.891,222,1.364,244,1.364,251,2.486,257,2.176,259,3.353,267,3.002,272,4.465,285,1.205,289,1.719,294,1.171,296,2.904,297,2.904,298,3.579,299,3.643,300,3.178,301,2.133,303,2.499,306,2.904,309,2.904,310,2.522,313,1.497,321,1.424,327,2.348,328,1.466,331,2.461,332,2.403,333,1.345,336,1.404,337,2.034,585,1.203,641,1.705,733,2.045,748,1.914,790,2.925,795,2.028,800,1.712,815,3.812,972,2.291,1270,2.904,1373,4.153,1539,3.676,1598,2.904,1809,4.549,1810,3.676,1814,3.676,1893,0.729,1902,2.705,1903,2.647,1904,1.556,1916,1.857,1918,2.285,1922,2.756,1937,2.547,1957,2.879,2005,2.22,2010,1.326,2032,2.297,2036,3.955,2044,3.045,2051,4.028,2070,2.297,2086,3.111,2087,3.111,2088,3.234,2089,4.474,2090,4.474,2091,3.781,2092,3.234,2093,5.129,2094,4.474,2095,3.894,2096,3.234,2097,5.138,2098,5.782,2099,3.234,2100,3.002,2101,3.234,2102,2.587,2103,4.474,2104,2.587,2105,4.153,2106,4.304,2107,4.304,2108,4.153,2109,3.111,2110,3.111,2111,3.894,2112,4.317,2113,5.325,2114,4.935,2115,5.129,2116,4.304,2117,3.002,2118,3.234,2119,3.234,2120,3.234,2121,3.002,2122,3.234,2123,3.234,2124,3.234,2125,3.002,2126,4.474,2127,4.304,2128,3.002,2129,3.234,2130,4.474,2131,4.304,2132,2.815,2133,3.234,2134,3.234,2135,3.111,2136,3.111,2137,5.129,2138,3.234,2139,3.234,2140,3.111,2141,3.002,2142,3.234,2143,3.234,2144,3.234,2145,3.234,2146,3.234,2147,2.815]],["title/interfaces/INoopAccessors.html",[40,0.003,2288,3.951]],["body/interfaces/INoopAccessors.html",[0,0.121,3,0.293,4,0.275,5,0.275,7,2.89,8,1.612,10,0.302,11,0.575,12,1.248,13,1.414,14,1.821,20,0.005,24,0.335,28,0.293,34,1.726,38,2.005,39,0.346,40,0.004,41,0.985,56,3.496,72,3.423,75,1.266,78,0.004,79,0.004,80,0.004,94,1.579,164,1.957,1069,2.816,1893,1.134,1897,3.245,1902,2.903,1903,2.616,1904,2.859,2288,7.302,2289,6.704,2290,6.191]],["title/interfaces/IPopoverPluginConfig.html",[40,0.003,1174,3.951]],["body/interfaces/IPopoverPluginConfig.html",[0,0.08,3,0.194,4,0.182,5,0.182,10,0.2,11,0.442,12,0.975,17,0.68,20,0.005,22,1.211,24,0.332,28,0.374,39,0.266,40,0.002,41,0.552,55,2.019,57,1.082,78,0.002,79,0.003,80,0.002,85,0.804,89,1.222,90,1.094,92,3.473,94,1.68,109,1.483,111,2.914,112,1.934,115,1.849,116,2.057,119,1.887,126,1.141,142,1.871,148,1.704,149,2.266,183,0.88,187,0.873,196,1.096,229,2.069,231,2.511,257,1.885,294,1.205,301,2.441,321,1.466,324,2.176,384,1.745,436,2.663,439,2.196,443,2.1,444,1.602,453,2.824,456,4.39,459,2.226,466,2.164,481,2.734,512,2.596,588,2.663,589,2.663,592,2.989,601,1.845,602,1.76,612,2.364,632,2.134,639,1.608,641,1.406,678,2.596,687,2.473,748,1.715,755,1.532,774,1.745,803,2.813,828,2.417,915,3.328,946,3.972,948,1.794,960,4.097,1024,4.097,1043,4.762,1116,7.568,1121,3.641,1136,3.09,1137,3.09,1142,4.097,1148,3.844,1159,3.844,1160,5.391,1161,3.844,1162,4.437,1163,2.596,1164,2.473,1165,4.437,1166,3.641,1167,3.844,1168,3.844,1169,4.097,1170,2.735,1171,4.097,1172,4.097,1173,4.097,1174,6.471,1177,6.014,1178,3.106,1179,4.097,1182,3.844,1183,4.097,1184,4.097,1185,7.227,1186,3.088,1187,2.897,1190,5.27,1195,3.09,1196,3.09,1197,3.844,1198,3.844,1199,3.473,1200,5.27,1201,2.337,1202,5.618,1203,3.651,1204,5.618,1205,6.084,1206,6.084,1207,5.697,1208,3.844,1209,2.897,1210,3.09,1211,3.473,1212,4.437,1213,4.437,1214,3.328,1215,3.473,1216,4.437,1217,3.844,1218,1.88,1219,1.88,1220,3.641,1221,4.437,1222,4.437,1223,4.437,1224,4.437,1225,4.437,1226,4.437,1227,4.437,1228,4.437,1229,4.437,1230,4.437,1231,4.437,1232,4.993,1233,3.641,1234,4.564,1235,3.641,1236,1.818,1237,3.202,1238,6.411,1239,4.437,1240,5.618,1241,4.097,1242,3.641,1243,4.097,1244,3.844,1245,4.437,1246,4.437,1247,1.913,1248,3.641,1249,4.097,1250,4.437,1251,4.437,1252,4.437,1253,4.437,1254,4.437,1255,5.27,1256,3.844,1257,3.844,1258,3.844,1259,4.437,1260,4.437,1261,4.437,1262,4.437,1263,4.437,1264,3.844,1265,6.411,1266,4.39,1267,1.788,1268,4.437,1269,1.788,1270,2.989,1271,4.437,1272,6.014,1273,4.437,1274,4.437,1275,4.437,1276,4.437,1277,4.437,1893,0.75]],["title/interfaces/IPosition.html",[40,0.003,1323,1.725]],["body/interfaces/IPosition.html",[3,0.126,4,0.118,5,0.118,10,0.274,11,0.442,12,1.262,13,1.352,20,0.005,21,0.83,22,0.987,24,0.337,28,0.353,33,1.222,34,0.59,35,1.578,36,1.578,37,1.384,39,0.399,40,0.005,41,0.929,42,2.001,47,2.029,53,1.189,57,1.693,75,0.866,78,0.002,79,0.002,80,0.002,83,1.532,85,0.522,89,1.222,90,1.318,97,1.642,102,0.861,106,0.838,110,0.462,116,0.793,119,0.656,131,2.398,136,0.883,145,1.761,163,0.965,164,1.846,168,1.354,183,1.184,187,0.566,198,1.524,213,2.021,222,1.404,229,0.979,238,2.303,244,0.911,245,0.979,251,2.512,254,1.241,257,1.205,284,1.532,285,1.328,287,1.009,289,1.35,294,0.782,303,2.05,313,1.333,314,1.993,328,0.979,333,1.898,334,1.251,368,0.979,384,0.826,399,1.18,411,1.009,417,1.072,439,1.04,443,1.532,444,1.602,446,1.912,447,1.602,453,1.678,455,2.047,459,1.809,464,1.491,466,1.578,481,2.171,529,1.966,530,1.509,535,1.286,536,1.286,537,1.286,538,1.286,544,1.555,546,1.22,550,1.642,552,1.286,553,1.532,558,1.286,562,1.982,566,1.982,576,1.286,577,1.678,580,1.263,581,2.01,585,1.239,594,1.263,596,1.009,600,1.286,601,1.346,604,1.286,639,1.608,641,1.519,647,2.228,651,1.819,679,0.994,717,1.555,718,1.955,719,2.01,733,0.861,734,1.161,748,1.503,750,0.994,752,1.955,755,2.1,758,1.124,766,1.04,774,1.273,780,1.142,787,1.785,795,0.979,800,1.524,802,2.585,811,1.072,825,1.263,830,1.263,892,1.18,934,1.2,948,1.795,972,1.705,1007,1.106,1060,1.22,1061,1.286,1062,1.286,1063,1.286,1065,2.301,1067,0.965,1069,1.024,1186,2.197,1201,2.337,1218,1.22,1219,1.22,1236,2.219,1247,1.241,1267,1.161,1269,1.789,1323,2.301,1330,1.578,1432,1.22,1444,2.578,1468,1.445,1613,2.337,1634,1.22,1693,1.263,1737,1.286,1750,1.2,1781,1.286,1801,2.147,1893,0.487,1894,1.263,1895,1.309,1896,1.982,1897,1.819,1898,1.555,1899,1.286,1900,1.263,1901,1.286,1902,1.056,1903,0.951,1904,1.04,1905,2.418,1906,1.263,1907,1.241,1908,2.418,1909,1.309,1910,1.263,1911,1.263,1912,1.124,1913,1.286,1914,1.286,1915,1.76,1916,1.886,1917,1.142,1918,1.795,1919,3.193,1920,1.309,1921,1.881,1922,1.161,1923,2.418,1924,1.309,1925,2.018,1926,1.982,1927,1.982,1928,1.309,1929,1.982,1930,2.334,1931,1.881,1932,1.309,1933,1.106,1934,1.309,1935,1.22,1936,1.22,1937,1.869,1938,1.18,1939,1.309,1940,1.309,1941,0.979,1942,1.309,1943,1.263,1944,1.913,1945,1.982,1946,1.286,1947,1.982,1948,1.309,1949,1.263,1950,1.309,1951,2.545,1952,1.309,1953,1.286,1954,1.309,1955,1.982,1956,1.263,1957,1.124,1958,1.286,1959,1.286,1960,1.309,1961,1.309,1962,2.018,1963,1.309,1964,1.309,1965,1.286,1966,2.018,1967,1.309,1968,1.286,1969,1.241,1970,1.309,1971,1.309,1972,1.627,1973,1.286,1974,1.955,1975,1.309,1976,1.286,1977,1.286,1978,1.309,1979,1.309,1980,1.309,1981,1.286,1982,1.309,1983,1.106,1984,1.2,1985,1.286,1986,1.309,1987,1.309,1988,1.309,1989,1.309,1990,1.263,1991,1.286,1992,1.263,1993,1.263,1994,1.309,1995,2.018,1996,2.717,1997,1.309,1998,1.286,1999,1.309,2000,1.309,2001,1.309,2002,1.309,2003,1.309,2004,1.652,2005,1.072,2006,1.309,2007,1.309,2008,1.881,2009,1.263,2010,1.365,2011,1.263,2012,1.309,2013,1.309,2014,1.881,2015,2.018,2016,1.309,2017,1.309,2018,2.256,2019,1.913,2020,2.256,2021,1.286,2022,1.263,2023,1.04,2024,1.286,2025,1.263,2026,1.241,2027,1.056,2028,1.309,2029,1.124]],["title/interfaces/IRadialAccessors.html",[40,0.003,2291,3.743]],["body/interfaces/IRadialAccessors.html",[0,0.112,3,0.271,4,0.255,5,0.255,7,2.677,8,1.494,10,0.28,11,0.549,12,1.222,13,1.353,20,0.005,23,3.383,24,0.32,28,0.331,29,4.425,31,3.633,32,3.238,33,2.337,34,1.67,37,2.545,38,1.857,39,0.371,40,0.005,41,0.941,52,2.277,54,2.503,56,3.238,57,1.844,72,3.171,73,3.633,74,3.633,75,1.304,78,0.003,79,0.004,80,0.003,110,0.787,136,0.787,787,2.054,790,3.709,1543,4.861,1893,1.05,1974,2.731,2162,2.499,2269,4.939,2270,4.939,2291,6.694,2292,5.38,2293,7.142,2294,7.142,2295,5.097,2296,5.38]],["title/interfaces/IRadialDataAccessors.html",[40,0.003,2293,3.743]],["body/interfaces/IRadialDataAccessors.html",[0,0.11,3,0.267,4,0.25,5,0.25,7,2.63,8,1.467,10,0.275,11,0.543,12,1.05,13,1.163,17,0.935,20,0.005,22,1.213,23,3.323,24,0.317,28,0.327,29,4.377,31,3.569,32,3.181,33,2.5,34,1.532,37,2.525,38,1.824,39,0.369,40,0.005,41,0.759,52,2.46,54,2.459,56,3.181,57,1.824,72,3.115,73,3.569,74,3.569,75,1.349,78,0.003,79,0.004,80,0.003,110,0.9,136,0.842,787,2.198,790,3.969,1543,4.774,1893,1.032,1974,2.922,2162,2.673,2225,3.661,2269,5.284,2270,5.284,2291,6.14,2292,6.482,2293,6.924,2294,6.642,2295,5.006,2296,5.284,2297,6.808]],["title/interfaces/IRadialRendererConfig.html",[40,0.003,1944,1.966]],["body/interfaces/IRadialRendererConfig.html",[3,0.122,4,0.114,5,0.114,10,0.27,11,0.435,12,1.258,13,1.345,20,0.005,21,0.818,22,1.359,24,0.352,28,0.351,33,1.192,34,0.571,35,1.54,36,1.54,37,1.351,39,0.398,40,0.005,41,0.944,42,1.735,47,1.759,53,1.16,57,1.671,75,0.849,78,0.002,79,0.002,80,0.002,83,1.502,89,1.192,90,1.296,97,1.61,102,1.789,106,0.811,110,0.622,116,0.768,119,0.987,131,2.373,136,0.89,145,1.85,163,0.935,164,1.826,168,1.358,183,1.175,187,0.548,198,1.622,213,1.992,222,1.37,229,0.949,238,2.269,244,1.37,245,0.949,251,2.49,254,1.202,257,1.176,284,1.502,285,1.308,287,0.977,289,1.328,294,0.757,303,2.02,313,1.31,314,1.964,328,0.949,333,1.866,334,1.226,368,0.949,384,0.8,399,1.143,411,0.977,417,1.038,439,1.007,443,1.495,444,1.563,446,1.884,447,1.563,453,1.637,455,2.007,459,1.783,464,1.461,466,1.54,481,2.139,529,1.937,530,1.473,535,1.245,536,1.245,537,1.245,538,1.245,544,1.517,546,1.182,550,1.61,552,1.245,553,1.495,558,1.245,562,1.933,566,1.933,576,1.245,577,1.637,580,1.223,581,1.976,585,1.208,594,1.223,596,0.977,600,1.245,601,1.313,604,1.245,639,0.737,641,1.226,647,2.2,651,1.774,679,0.963,717,1.517,718,1.916,719,1.976,733,0.834,734,1.745,748,1.478,750,0.963,752,1.916,755,2.235,758,1.088,766,1.007,774,1.242,780,1.106,787,1.759,795,0.949,800,1.498,802,2.552,811,1.038,825,1.223,830,1.223,892,1.143,934,1.162,948,1.565,972,1.663,1007,1.071,1060,1.182,1061,1.245,1062,1.245,1063,1.245,1065,2.262,1067,0.935,1069,0.992,1186,2.16,1201,2.298,1218,1.182,1219,1.182,1236,2.175,1247,1.202,1267,1.124,1269,1.745,1323,2.007,1330,1.54,1432,1.182,1444,2.535,1468,1.41,1613,2.298,1634,1.182,1693,1.223,1737,1.245,1750,1.162,1781,1.245,1801,2.105,1893,0.472,1894,1.223,1895,1.268,1896,1.933,1897,1.774,1898,1.517,1899,1.245,1900,1.223,1901,1.245,1902,1.022,1903,0.921,1904,1.007,1905,2.37,1906,1.223,1907,1.202,1908,2.37,1909,1.268,1910,1.223,1911,1.223,1912,1.088,1913,1.245,1914,1.245,1915,1.717,1916,1.861,1917,1.106,1918,1.764,1919,3.163,1920,1.268,1921,1.835,1922,1.124,1923,2.37,1924,1.268,1925,1.968,1926,1.933,1927,1.933,1928,1.268,1929,1.933,1930,2.288,1931,1.835,1932,1.268,1933,1.071,1934,1.268,1935,1.182,1936,1.182,1937,2.065,1938,1.143,1939,1.268,1940,1.268,1941,0.949,1942,1.268,1943,1.223,1944,2.288,1945,3.06,1946,2.671,1947,3.06,1948,1.968,1949,1.899,1950,1.968,1951,2.622,1952,1.968,1953,1.933,1954,1.968,1955,3.06,1956,1.899,1957,2.334,1958,2.671,1959,2.671,1960,1.268,1961,1.268,1962,1.968,1963,1.268,1964,1.268,1965,1.245,1966,1.968,1967,1.268,1968,1.245,1969,1.202,1970,1.268,1971,1.268,1972,1.587,1973,1.245,1974,1.916,1975,1.268,1976,1.245,1977,1.245,1978,1.268,1979,1.268,1980,1.268,1981,1.245,1982,1.268,1983,1.071,1984,1.162,1985,1.245,1986,1.268,1987,1.268,1988,1.268,1989,1.268,1990,1.223,1991,1.245,1992,1.223,1993,1.223,1994,1.268,1995,1.968,1996,2.671,1997,1.268,1998,1.245,1999,1.268,2000,1.268,2001,1.268,2002,1.268,2003,1.268,2004,1.612,2005,1.038,2006,1.268,2007,1.268,2008,1.835,2009,1.223,2010,1.332,2011,1.223,2012,1.268,2013,1.268,2014,1.835,2015,1.968,2016,1.268,2017,1.268,2018,2.211,2019,1.867,2020,2.211,2021,1.245,2022,1.223,2023,1.007,2024,1.245,2025,1.223,2026,1.202,2027,1.022,2028,1.268,2029,1.088]],["title/interfaces/IRadialScales.html",[40,0.003,2163,3.292]],["body/interfaces/IRadialScales.html",[3,0.191,4,0.179,5,0.179,10,0.334,11,0.436,12,0.844,13,0.677,20,0.005,24,0.314,28,0.263,34,0.892,39,0.389,40,0.005,41,0.967,42,1.168,47,1.184,75,1.1,78,0.002,79,0.003,80,0.002,95,1.816,97,1.822,110,0.857,112,1.485,119,1.568,126,1.546,128,2.137,134,2.422,136,0.836,142,1.848,145,1.888,168,1.355,179,1.808,182,2.137,183,0.63,187,0.857,196,1.485,226,2.018,229,2.044,231,1.822,249,3.809,284,2.464,285,0.881,289,1.784,313,0.954,326,2.846,334,1.857,336,1.419,337,2.056,368,2.044,379,3.923,441,2.763,581,1.985,649,3.145,771,1.946,773,2.616,774,1.25,783,2.783,785,2.504,787,1.184,789,4.132,811,2.237,852,3.145,895,3.926,1468,1.419,1503,2.374,1513,4.185,1617,2.846,1666,3.607,1668,2.936,1685,2.18,1705,2.947,1801,1.728,1893,0.737,1912,1.701,1915,2.383,1916,2.365,1941,3.092,2004,2.237,2027,2.203,2037,3.068,2040,3.202,2042,2.096,2059,2.273,2060,2.018,2079,2.322,2080,2.322,2112,3.515,2148,4.185,2149,3.035,2150,4.306,2151,3.269,2153,4.633,2154,3.035,2155,3.035,2156,3.145,2157,3.145,2158,3.145,2159,4.36,2160,4.549,2161,3.809,2162,1.44,2163,4.337,2164,4.994,2165,3.035,2166,3.269,2167,3.269,2168,5.833,2169,3.923,2170,6.422,2171,2.846,2172,3.269,2173,4.508,2174,4.185,2175,2.687,2176,2.846,2177,2.846,2178,4.84,2179,4.825,2180,4.508,2181,2.936,2182,2.936,2183,4.825,2184,2.846,2185,2.846,2186,3.269,2187,3.269,2188,3.145,2189,2.846,2190,4.84,2191,3.269,2192,5.077,2193,2.846,2194,3.269,2195,3.269,2196,4.337,2197,3.269,2198,3.269,2199,3.269]],["title/interfaces/IRadialSeriesAccessors.html",[40,0.003,2294,3.743]],["body/interfaces/IRadialSeriesAccessors.html",[0,0.111,3,0.269,4,0.252,5,0.252,7,2.652,8,1.479,10,0.277,11,0.546,12,1.056,13,1.169,17,0.942,20,0.005,22,1.22,23,3.351,24,0.261,28,0.329,29,4.399,31,3.598,32,3.207,33,2.33,34,1.54,37,2.755,38,1.84,39,0.37,40,0.005,41,0.765,52,2.465,54,2.479,56,3.207,57,1.833,72,3.141,73,3.598,74,3.598,75,1.353,78,0.003,79,0.004,80,0.003,110,0.782,136,0.845,787,2.206,790,3.983,1543,4.814,1893,1.04,1974,2.933,2162,2.683,2225,3.692,2269,5.303,2270,5.303,2291,6.171,2292,6.515,2293,6.666,2294,6.944,2295,5.048,2296,5.329,2298,6.151]],["title/interfaces/IRectangleAccessors.html",[40,0.003,331,2.604]],["body/interfaces/IRectangleAccessors.html",[0,0.115,3,0.278,4,0.261,5,0.261,7,2.74,8,1.529,10,0.287,11,0.557,12,1.23,13,1.361,14,1.726,20,0.005,24,0.325,28,0.278,33,2.543,34,1.687,35,3.043,36,2.728,37,2.57,38,1.901,39,0.389,40,0.005,41,1.107,52,1.774,53,1.703,78,0.004,79,0.004,80,0.004,110,0.661,204,4.029,209,5.124,210,5.553,216,2.999,217,2.999,218,2.788,331,4.703,1883,4.587,1885,4.587,1887,4.587,1889,4.587,1890,4.768,1893,1.075,2299,4.975,2300,4.768,2301,4.768,2302,4.768]],["title/interfaces/IRectangleDataAccessors.html",[40,0.003,210,2.892]],["body/interfaces/IRectangleDataAccessors.html",[0,0.109,3,0.265,4,0.248,5,0.248,7,2.611,8,1.457,10,0.273,11,0.541,12,1.046,13,1.158,14,1.645,20,0.005,22,1.494,24,0.373,28,0.265,33,2.596,34,1.525,35,3.073,36,2.649,37,2.517,38,1.811,39,0.385,40,0.005,41,1.094,52,1.69,53,1.623,78,0.003,79,0.004,80,0.003,110,0.63,204,3.84,209,4.72,210,5.336,216,2.858,217,2.858,218,2.657,331,4.252,1883,6.074,1885,6.074,1887,6.074,1889,6.074,1890,6.314,1893,1.024,2299,4.74,2300,4.543,2301,4.543,2302,6.314]],["title/interfaces/IRectangleSeriesAccessors.html",[40,0.003,209,2.668]],["body/interfaces/IRectangleSeriesAccessors.html",[0,0.114,3,0.277,4,0.259,5,0.259,7,2.727,8,1.521,10,0.285,11,0.556,12,1.074,13,1.189,14,1.718,20,0.005,22,1.385,24,0.324,28,0.277,33,2.541,34,1.566,35,3.038,36,2.924,37,2.805,38,1.892,39,0.389,40,0.005,41,1.105,52,2.384,53,2.289,78,0.004,79,0.004,80,0.004,110,0.658,204,4.01,209,4.998,210,5.213,216,2.984,217,2.984,218,2.774,331,4.366,1883,4.564,1885,4.564,1887,4.564,1889,4.564,1890,4.744,1893,1.07,2299,4.95,2300,4.744,2301,4.744,2302,4.744]],["title/interfaces/IRenderContainers.html",[40,0.003,2005,1.698]],["body/interfaces/IRenderContainers.html",[3,0.127,4,0.119,5,0.119,10,0.246,11,0.325,12,1.263,13,1.354,17,0.446,20,0.005,21,0.947,24,0.308,28,0.354,33,1.233,34,0.596,35,1.592,36,1.592,37,1.397,39,0.4,40,0.005,41,0.932,42,1.77,47,1.794,53,1.199,57,1.7,75,0.872,78,0.002,79,0.003,80,0.002,83,1.543,85,0.528,89,1.233,90,1.308,97,1.654,102,0.871,106,0.847,110,0.466,116,0.802,119,0.664,131,2.406,136,0.891,145,1.766,163,0.976,164,1.852,168,1.304,183,1.187,187,0.573,198,1.533,213,2.032,222,1.416,229,0.991,238,2.314,244,0.921,245,0.991,251,2.52,254,1.255,257,1.216,284,1.543,285,1.335,287,1.02,289,1.359,294,0.791,303,2.061,313,1.34,314,2.003,328,0.991,333,1.909,334,1.26,368,0.991,384,0.835,399,1.193,411,1.02,417,1.084,439,1.051,443,1.545,444,1.616,446,1.922,447,1.616,453,1.693,455,2.062,459,1.819,464,1.501,466,1.592,481,2.182,529,1.976,530,1.523,535,1.3,536,1.3,537,1.3,538,1.3,544,1.568,546,1.234,550,1.856,552,1.3,553,1.545,558,1.3,562,1.999,566,1.999,576,1.3,577,1.693,580,1.278,581,2.022,585,1.249,594,1.278,596,1.02,600,1.3,601,1.358,604,1.3,639,0.77,641,1.034,647,2.468,651,1.834,679,1.005,717,1.568,718,1.969,719,2.477,733,0.871,734,1.174,748,1.512,750,1.005,752,1.969,755,2.113,758,1.136,766,1.051,774,1.284,780,1.155,787,1.894,795,0.991,800,1.533,802,2.597,811,1.084,825,1.278,830,1.278,892,1.193,934,1.213,948,1.608,972,1.719,1007,1.119,1060,1.234,1061,1.3,1062,1.3,1063,1.3,1065,2.314,1067,0.976,1069,1.036,1186,2.21,1201,2.351,1218,1.234,1219,1.234,1236,2.234,1247,1.255,1267,1.174,1269,1.804,1323,2.062,1330,1.592,1432,1.234,1444,2.594,1468,1.458,1613,2.351,1634,1.234,1693,1.278,1737,1.3,1750,1.213,1781,1.3,1801,2.163,1893,0.493,1894,1.278,1895,1.324,1896,1.999,1897,1.834,1898,1.568,1899,1.3,1900,1.278,1901,1.3,1902,1.068,1903,0.962,1904,1.051,1905,2.435,1906,1.278,1907,1.255,1908,2.435,1909,1.324,1910,1.278,1911,1.278,1912,1.136,1913,1.3,1914,1.3,1915,1.775,1916,1.894,1917,1.155,1918,1.805,1919,3.204,1920,1.324,1921,1.897,1922,1.174,1923,2.435,1924,1.324,1925,2.035,1926,1.999,1927,1.999,1928,1.324,1929,1.999,1930,2.351,1931,1.897,1932,1.324,1933,1.119,1934,1.324,1935,1.234,1936,1.234,1937,1.882,1938,1.193,1939,1.324,1940,1.324,1941,0.991,1942,1.324,1943,1.278,1944,1.93,1945,1.999,1946,1.3,1947,1.999,1948,1.324,1949,1.278,1950,1.324,1951,2.557,1952,1.324,1953,1.3,1954,1.324,1955,1.999,1956,1.278,1957,1.136,1958,1.3,1959,1.3,1960,1.324,1961,1.324,1962,2.035,1963,1.324,1964,1.324,1965,1.3,1966,2.035,1967,1.324,1968,1.3,1969,1.255,1970,1.324,1971,1.324,1972,1.641,1973,1.3,1974,1.969,1975,1.324,1976,1.3,1977,1.3,1978,1.324,1979,1.324,1980,1.324,1981,1.3,1982,1.324,1983,1.119,1984,1.213,1985,1.3,1986,1.324,1987,1.324,1988,1.324,1989,1.324,1990,1.278,1991,1.3,1992,1.278,1993,1.278,1994,1.324,1995,2.035,1996,2.733,1997,1.324,1998,1.3,1999,1.324,2000,1.324,2001,1.324,2002,1.324,2003,1.324,2004,2.03,2005,1.667,2006,1.324,2007,1.324,2008,1.897,2009,1.278,2010,1.377,2011,1.278,2012,1.324,2013,1.324,2014,1.897,2015,2.035,2016,1.324,2017,1.324,2018,2.272,2019,1.93,2020,2.272,2021,1.3,2022,1.278,2023,1.051,2024,1.3,2025,1.278,2026,1.255,2027,1.068,2028,1.324,2029,1.136,2225,1.748,2303,3.251]],["title/interfaces/IRenderSeries.html",[40,0.003,299,2.43]],["body/interfaces/IRenderSeries.html",[0,0.109,3,0.191,4,0.179,5,0.179,10,0.197,11,0.437,12,1.129,13,0.678,20,0.005,21,0.76,24,0.292,28,0.373,34,0.894,38,1.306,39,0.373,40,0.005,41,0.856,52,1.679,53,1.17,78,0.002,79,0.003,80,0.002,89,1.895,90,0.948,102,2.219,109,1.678,126,1.123,136,0.873,145,1.75,154,3.021,160,2.95,164,1.486,168,1.286,183,0.87,198,2.269,213,2.393,214,2.433,218,1.915,222,2.347,244,1.381,251,2.209,257,2.113,259,3.376,267,3.04,272,4.494,285,1.215,289,1.914,294,1.186,296,2.941,297,2.941,298,3.611,299,3.953,300,3.205,301,2.147,303,2.509,306,2.941,309,2.941,310,2.554,313,1.507,321,1.442,327,2.378,328,1.485,331,2.492,332,2.433,333,1.362,336,1.421,337,2.06,585,1.218,641,1.714,733,1.799,748,1.833,790,2.95,795,2.046,800,1.507,815,3.837,972,2.311,1270,2.941,1373,4.189,1539,3.709,1598,2.941,1809,4.243,1810,3.709,1814,3.709,1893,0.738,1902,2.72,1903,2.451,1904,1.576,1916,1.87,1918,2.03,1922,2.425,1937,2.561,1957,2.895,2005,2.762,2010,1.343,2032,2.326,2036,3.973,2044,3.072,2051,4.042,2070,2.326,2086,3.15,2087,3.15,2088,3.275,2089,4.513,2090,4.513,2091,3.814,2092,3.275,2093,5.164,2094,4.513,2095,3.928,2096,3.275,2097,4.794,2098,5.354,2099,3.275,2100,3.04,2101,3.275,2102,2.62,2103,4.513,2104,2.62,2105,4.189,2106,4.342,2107,4.342,2108,4.189,2109,3.15,2110,3.15,2111,3.928,2112,2.554,2113,3.15,2114,4.968,2115,5.164,2116,4.342,2117,3.04,2118,3.275,2119,3.275,2120,3.275,2121,3.04,2122,3.275,2123,3.275,2124,3.275,2125,3.04,2126,4.513,2127,4.342,2128,3.04,2129,3.275,2130,4.513,2131,4.342,2132,2.85,2133,3.275,2134,3.275,2135,3.15,2136,3.15,2137,5.164,2138,3.275,2139,3.275,2140,3.15,2141,3.04,2142,3.275,2143,3.275,2144,3.275,2145,3.275,2146,3.275,2147,4.844]],["title/interfaces/IRenderStateData.html",[40,0.003,577,1.725]],["body/interfaces/IRenderStateData.html",[3,0.126,4,0.118,5,0.118,10,0.274,11,0.442,12,1.262,13,1.387,20,0.005,21,0.83,22,0.72,24,0.332,28,0.353,33,1.222,34,0.59,35,1.579,36,1.579,37,1.385,39,0.399,40,0.005,41,0.929,42,1.761,47,1.785,53,1.19,57,1.693,75,0.866,78,0.002,79,0.002,80,0.002,83,1.533,85,0.522,89,1.222,90,1.305,97,1.643,102,0.862,106,0.838,110,0.462,116,0.793,119,0.657,131,2.398,136,0.895,145,1.761,163,0.966,164,1.846,168,1.302,183,1.184,187,0.567,198,1.524,213,2.022,222,1.405,229,0.98,238,2.618,244,0.912,245,0.98,251,2.512,254,1.242,257,1.206,284,1.533,285,1.328,287,1.009,289,1.351,294,0.783,303,2.051,313,1.333,314,1.994,328,0.98,333,2.166,334,1.252,368,0.98,384,0.827,399,1.181,411,1.009,417,1.073,439,1.04,443,1.533,444,1.603,446,1.912,447,1.603,453,1.679,455,2.048,459,1.81,464,1.491,466,1.579,481,2.172,529,1.966,530,1.51,535,1.287,536,1.287,537,1.287,538,1.287,544,1.556,546,1.221,550,1.643,552,1.287,553,1.533,558,1.287,562,1.983,566,1.983,576,1.287,577,2.048,580,1.264,581,2.294,585,1.239,594,1.264,596,1.009,600,1.287,601,1.347,604,1.287,639,0.762,641,1.026,647,2.398,651,1.819,679,0.995,717,1.556,718,1.956,719,2.011,733,0.862,734,1.161,748,1.504,750,0.995,752,2.698,755,2.101,758,1.124,766,1.04,774,1.274,780,1.143,787,1.785,795,0.98,800,1.524,802,2.585,811,1.073,825,1.264,830,1.264,892,1.181,934,1.2,948,1.598,972,1.705,1007,1.107,1060,1.221,1061,1.287,1062,1.287,1063,1.287,1065,2.301,1067,0.966,1069,1.025,1186,2.197,1201,2.338,1218,1.221,1219,1.221,1236,2.22,1247,1.242,1267,1.161,1269,1.79,1323,2.048,1330,1.579,1432,1.221,1444,2.786,1468,1.446,1613,2.338,1634,1.221,1693,1.264,1737,1.287,1750,1.2,1781,1.287,1801,2.414,1893,0.487,1894,1.264,1895,1.31,1896,1.983,1897,1.819,1898,1.556,1899,1.287,1900,1.264,1901,1.287,1902,1.056,1903,0.952,1904,1.04,1905,2.419,1906,1.264,1907,1.242,1908,2.419,1909,1.31,1910,1.264,1911,1.264,1912,1.124,1913,1.287,1914,1.287,1915,1.761,1916,1.886,1917,1.143,1918,1.795,1919,3.194,1920,1.31,1921,1.881,1922,1.161,1923,2.419,1924,1.31,1925,2.019,1926,1.983,1927,1.983,1928,1.31,1929,1.983,1930,2.335,1931,1.881,1932,1.31,1933,1.107,1934,1.31,1935,1.221,1936,1.221,1937,1.87,1938,1.181,1939,1.31,1940,1.31,1941,0.98,1942,1.31,1943,1.264,1944,1.914,1945,1.983,1946,1.287,1947,1.983,1948,1.31,1949,1.264,1950,1.31,1951,2.546,1952,1.31,1953,1.287,1954,1.31,1955,1.983,1956,1.264,1957,1.124,1958,1.287,1959,1.287,1960,1.31,1961,1.31,1962,2.019,1963,1.31,1964,1.31,1965,1.287,1966,2.019,1967,1.31,1968,1.287,1969,1.242,1970,1.31,1971,1.31,1972,1.628,1973,1.287,1974,1.956,1975,1.31,1976,1.287,1977,1.287,1978,1.31,1979,1.31,1980,1.31,1981,1.287,1982,1.31,1983,1.107,1984,1.2,1985,1.287,1986,1.31,1987,1.31,1988,1.31,1989,1.31,1990,1.264,1991,1.287,1992,1.264,1993,1.264,1994,1.31,1995,2.019,1996,2.718,1997,1.31,1998,1.287,1999,1.31,2000,1.31,2001,1.31,2002,1.31,2003,1.31,2004,1.653,2005,1.073,2006,1.31,2007,1.31,2008,1.881,2009,1.264,2010,1.366,2011,1.264,2012,1.31,2013,1.31,2014,1.881,2015,2.019,2016,1.31,2017,1.31,2018,2.257,2019,1.914,2020,2.257,2021,1.287,2022,1.264,2023,1.04,2024,1.287,2025,1.264,2026,1.242,2027,1.056,2028,1.31,2029,1.124]],["title/interfaces/IRenderStatesIndex.html",[40,0.003,807,3.422]],["body/interfaces/IRenderStatesIndex.html",[0,0.126,3,0.239,4,0.225,5,0.225,8,1.317,13,1.355,17,0.839,20,0.005,21,0.883,24,0.232,28,0.306,34,1.121,39,0.375,40,0.005,75,0.876,78,0.003,79,0.004,80,0.003,90,1.392,94,1.536,110,0.844,126,1.409,136,0.934,163,2.344,168,0.839,179,1.573,183,0.792,187,1.077,196,1.353,198,2.033,238,2.699,283,3.726,284,1.979,287,2.699,333,2.182,334,1.876,394,3.376,411,1.919,432,3.689,459,1.508,464,1.925,487,3.499,577,2.644,581,2.545,602,2.172,652,2.918,745,5.78,746,5.047,747,4.286,748,1.353,749,5.56,750,1.89,751,4.494,752,2.782,753,4.494,754,4.494,755,2.414,756,4.494,758,3.273,766,1.977,767,3.81,768,5.474,769,4.494,770,3.952,771,2.445,772,4.108,773,3.287,774,1.571,775,4.494,776,4.494,777,3.814,778,3.952,779,2.918,780,2.172,781,4.108,782,4.108,783,2.536,784,2.74,785,2.282,786,3.689,787,1.487,788,5.047,789,3.898,790,2.686,791,4.108,792,4.286,793,4.108,794,4.108,795,1.863,796,5.246,797,5.246,798,5.246,799,5.246,800,1.371,801,4.108,802,2.039,803,3.472,804,4.494,805,4.494,806,3.287,807,5.246,1893,0.926,2225,3.287,2304,6.113]],["title/interfaces/IRendererConfig.html",[40,0.003,1937,1.574]],["body/interfaces/IRendererConfig.html",[3,0.125,4,0.118,5,0.118,10,0.274,11,0.441,12,1.262,13,1.357,20,0.005,21,0.829,22,1.21,24,0.337,28,0.353,33,1.219,34,0.588,35,1.574,36,1.574,37,1.381,39,0.399,40,0.005,41,0.928,42,1.758,47,1.782,53,1.186,57,1.69,75,0.864,78,0.002,79,0.002,80,0.002,83,1.529,89,1.219,90,1.304,97,1.639,102,0.858,106,1.767,110,0.46,116,0.79,119,0.654,131,2.395,136,0.883,145,1.861,163,0.962,164,1.844,168,1.318,183,1.183,187,0.564,198,1.521,213,2.018,222,1.401,229,0.976,238,2.299,244,0.908,245,0.976,251,2.51,254,1.237,257,1.202,284,1.719,285,1.326,287,1.005,289,1.348,294,0.779,303,2.047,313,1.33,314,1.99,328,0.976,333,1.895,334,1.249,368,0.976,384,0.823,399,1.176,411,1.005,417,1.068,439,1.036,443,1.528,444,1.598,446,1.909,447,1.598,453,1.674,455,2.043,459,1.807,464,1.488,466,1.574,481,2.168,529,1.963,530,1.506,535,1.281,536,1.281,537,1.281,538,1.281,544,1.551,546,1.216,550,1.639,552,1.281,553,1.528,558,1.281,562,1.977,566,1.977,576,1.281,577,1.674,580,1.259,581,2.006,585,1.236,594,1.259,596,1.005,600,1.281,601,1.343,604,1.281,639,0.759,641,1.023,647,2.225,651,1.814,679,0.991,717,1.551,718,1.951,719,2.006,733,0.858,734,1.157,748,1.501,750,0.991,752,1.951,755,2.097,758,1.12,766,1.036,774,1.27,780,1.138,787,1.782,795,0.976,800,1.521,802,2.581,811,1.068,825,1.259,830,1.259,892,1.176,934,1.196,948,1.594,972,1.7,1007,1.102,1060,1.216,1061,1.281,1062,1.281,1063,1.281,1065,2.297,1067,0.962,1069,1.021,1186,2.193,1201,2.333,1218,1.216,1219,1.216,1236,2.214,1247,1.237,1267,1.157,1269,1.784,1323,2.043,1330,1.574,1432,1.216,1444,2.574,1468,1.978,1613,2.333,1634,1.216,1693,1.259,1737,1.281,1750,1.196,1781,1.281,1801,2.143,1893,0.485,1894,1.259,1895,1.305,1896,1.977,1897,1.814,1898,1.551,1899,1.281,1900,1.259,1901,1.281,1902,1.052,1903,0.948,1904,1.036,1905,2.413,1906,1.259,1907,1.237,1908,2.413,1909,1.305,1910,1.259,1911,1.259,1912,1.12,1913,1.281,1914,1.281,1915,1.755,1916,1.883,1917,1.138,1918,1.791,1919,3.19,1920,1.305,1921,1.876,1922,1.157,1923,2.413,1924,1.305,1925,2.013,1926,1.977,1927,1.977,1928,1.305,1929,1.977,1930,2.329,1931,1.876,1932,1.305,1933,1.102,1934,1.305,1935,1.216,1936,1.216,1937,2.097,1938,2.489,1939,2.761,1940,2.013,1941,1.506,1942,2.013,1943,2.664,1944,1.908,1945,1.977,1946,1.281,1947,1.977,1948,1.305,1949,1.259,1950,1.305,1951,2.542,1952,1.305,1953,1.281,1954,1.305,1955,1.977,1956,1.259,1957,1.12,1958,1.281,1959,1.281,1960,1.305,1961,1.305,1962,2.013,1963,1.305,1964,1.305,1965,1.281,1966,2.013,1967,1.305,1968,1.281,1969,1.237,1970,1.305,1971,1.305,1972,1.623,1973,1.281,1974,1.951,1975,1.305,1976,1.281,1977,1.281,1978,1.305,1979,1.305,1980,1.305,1981,1.281,1982,1.305,1983,1.102,1984,1.196,1985,1.281,1986,1.305,1987,1.305,1988,1.305,1989,1.305,1990,1.259,1991,1.281,1992,1.259,1993,1.259,1994,1.305,1995,2.013,1996,2.712,1997,1.305,1998,1.281,1999,1.305,2000,1.305,2001,1.305,2002,1.305,2003,1.305,2004,1.648,2005,1.068,2006,1.305,2007,1.305,2008,1.876,2009,1.259,2010,1.362,2011,1.259,2012,1.305,2013,1.305,2014,1.876,2015,2.013,2016,1.305,2017,1.305,2018,2.251,2019,1.908,2020,2.251,2021,1.281,2022,1.259,2023,1.036,2024,1.281,2025,1.259,2026,1.237,2027,1.052,2028,1.305,2029,1.12]],["title/interfaces/IRendererEventPayload.html",[40,0.003,328,1.551]],["body/interfaces/IRendererEventPayload.html",[3,0.127,4,0.119,5,0.119,10,0.275,11,0.443,12,1.275,13,1.353,20,0.005,21,0.879,24,0.325,28,0.354,33,1.227,34,0.593,35,1.585,36,1.585,37,1.39,39,0.4,40,0.005,41,0.931,42,1.765,47,1.79,53,1.194,57,1.696,75,0.869,78,0.002,79,0.002,80,0.002,83,1.538,85,0.525,89,1.227,90,1.307,97,1.648,102,0.866,106,0.842,110,0.464,116,0.797,119,0.66,131,2.402,136,0.896,145,1.763,163,0.971,164,1.849,168,1.303,183,1.185,187,0.569,198,1.528,213,2.027,222,1.41,229,0.985,238,2.308,244,0.916,245,0.985,251,2.598,254,1.248,257,1.211,284,1.538,285,1.331,287,1.015,289,1.354,294,0.786,303,2.055,313,1.336,314,1.998,328,1.516,333,1.904,334,1.256,368,0.985,384,0.831,399,2.501,411,1.015,417,1.078,439,1.046,443,1.539,444,1.609,446,1.917,447,1.609,453,1.685,455,2.055,459,1.916,464,1.496,466,1.585,481,2.177,529,1.971,530,1.516,535,1.293,536,1.293,537,1.293,538,1.293,544,1.562,546,1.227,550,1.648,552,1.293,553,1.539,558,1.293,562,1.99,566,1.99,576,1.293,577,1.685,580,1.27,581,2.016,585,1.244,594,1.27,596,1.015,600,1.293,601,1.352,604,1.293,639,0.765,641,1.03,647,2.233,651,1.826,679,1,717,1.562,718,1.962,719,2.016,733,0.866,734,1.167,748,1.508,750,1,752,1.962,755,2.106,758,1.13,766,1.046,774,1.279,780,1.148,787,1.79,795,0.985,800,1.65,802,2.699,811,1.078,825,1.27,830,1.27,892,1.187,934,1.207,948,1.603,972,1.712,1007,1.112,1060,1.227,1061,1.293,1062,1.293,1063,1.293,1065,2.307,1067,0.971,1069,1.03,1186,2.203,1201,2.344,1218,1.227,1219,1.227,1236,2.227,1247,1.248,1267,1.167,1269,1.797,1323,2.055,1330,1.585,1432,1.227,1444,2.792,1468,1.451,1613,2.344,1634,1.227,1693,1.27,1737,1.293,1750,1.207,1781,1.293,1801,2.155,1893,0.49,1894,1.27,1895,1.317,1896,1.99,1897,1.826,1898,1.562,1899,1.293,1900,1.27,1901,1.293,1902,1.062,1903,0.957,1904,1.046,1905,2.426,1906,1.27,1907,1.248,1908,2.426,1909,1.317,1910,1.27,1911,1.27,1912,1.13,1913,1.293,1914,1.293,1915,1.768,1916,2.033,1917,1.148,1918,1.8,1919,3.199,1920,1.317,1921,1.889,1922,1.167,1923,2.426,1924,1.317,1925,2.026,1926,1.99,1927,1.99,1928,1.317,1929,1.99,1930,2.343,1931,1.889,1932,1.317,1933,1.112,1934,1.317,1935,1.227,1936,1.227,1937,1.876,1938,1.187,1939,1.317,1940,1.317,1941,0.985,1942,1.317,1943,1.27,1944,1.922,1945,1.99,1946,1.293,1947,1.99,1948,1.317,1949,1.27,1950,1.317,1951,2.551,1952,1.317,1953,1.293,1954,1.317,1955,1.99,1956,1.27,1957,1.13,1958,1.293,1959,1.293,1960,1.317,1961,1.317,1962,2.026,1963,1.317,1964,1.317,1965,1.293,1966,2.026,1967,1.317,1968,1.293,1969,1.248,1970,1.317,1971,1.317,1972,1.634,1973,1.293,1974,1.962,1975,1.317,1976,1.293,1977,1.293,1978,1.317,1979,1.317,1980,1.317,1981,1.293,1982,1.317,1983,1.112,1984,1.207,1985,1.293,1986,1.317,1987,1.317,1988,1.317,1989,1.317,1990,1.27,1991,1.293,1992,1.27,1993,1.27,1994,1.317,1995,2.026,1996,2.725,1997,1.317,1998,1.293,1999,1.317,2000,1.317,2001,1.317,2002,1.317,2003,1.317,2004,1.659,2005,1.078,2006,1.317,2007,1.317,2008,1.889,2009,1.27,2010,1.371,2011,1.27,2012,1.317,2013,1.317,2014,1.889,2015,2.026,2016,1.317,2017,1.317,2018,2.543,2019,1.922,2020,2.264,2021,1.293,2022,1.27,2023,1.046,2024,1.293,2025,1.27,2026,1.248,2027,1.062,2028,1.317,2029,1.13]],["title/interfaces/IScale.html",[40,0.003,2150,2.237]],["body/interfaces/IScale.html",[3,0.153,4,0.144,5,0.144,10,0.303,11,0.374,12,0.722,13,0.544,17,1.292,19,1.977,20,0.005,21,0.944,22,1.368,24,0.367,28,0.225,34,0.717,39,0.376,40,0.005,41,0.835,42,0.939,47,0.951,75,1.074,78,0.002,79,0.003,80,0.002,85,1.355,95,1.46,97,1.56,110,0.886,112,1.659,119,1.39,126,1.728,128,1.718,134,2.707,136,0.824,142,2.066,145,1.972,168,1.362,179,1.916,182,2.522,183,0.744,187,0.689,196,1.271,226,1.622,229,1.749,231,1.56,249,4.258,273,1.56,284,2.45,285,1.039,289,1.66,313,0.767,326,2.287,334,1.728,336,1.141,337,1.653,368,1.749,379,4.385,441,3.261,581,1.699,649,2.528,771,1.564,773,2.103,774,1.927,783,3.11,785,2.798,787,0.951,789,3.744,811,1.915,852,2.528,895,3.479,1468,1.141,1503,2.802,1513,4.677,1617,2.287,1666,4.031,1668,2.36,1685,1.753,1705,2.522,1801,2.04,1893,0.593,1912,1.367,1915,2.04,1916,2.404,1941,3.148,2004,1.915,2027,1.886,2037,3.429,2040,3.579,2042,2.474,2059,1.827,2060,1.622,2079,2.741,2080,2.741,2112,3.929,2148,3.582,2149,2.44,2150,4.089,2151,2.628,2153,4.819,2154,2.44,2155,2.44,2156,2.528,2157,2.528,2158,2.528,2159,5.026,2160,4.733,2161,4.258,2162,1.157,2163,2.528,2164,2.36,2165,4.677,2166,2.628,2167,2.628,2168,6.17,2169,4.883,2170,6.553,2171,3.358,2172,5.038,2173,5.038,2174,4.677,2175,3.171,2176,4.385,2177,4.385,2178,5.176,2179,5.063,2180,5.038,2181,3.465,2182,3.465,2183,5.196,2184,3.358,2185,3.358,2186,3.858,2187,3.858,2188,3.712,2189,3.358,2190,5.37,2191,3.858,2192,5.61,2193,3.358,2194,2.628,2195,2.628,2196,3.712,2197,2.628,2198,2.628,2199,2.628,2305,4.026,2306,4.221,2307,4.026,2308,3.91,2309,3.91,2310,3.91,2311,3.91,2312,3.91,2313,3.91,2314,3.91,2315,3.91,2316,3.91,2317,3.91,2318,3.91,2319,3.91]],["title/interfaces/IScaleSVGElement.html",[40,0.003,2320,4.561]],["body/interfaces/IScaleSVGElement.html",[0,0.031,3,0.075,4,0.071,5,0.071,8,0.415,10,0.172,11,0.213,12,0.242,13,0.268,17,0.584,20,0.005,24,0.124,28,0.352,39,0.075,40,0.002,41,0.214,42,1.644,47,1.94,55,2.287,57,0.93,59,1.126,75,1.023,78,0.001,79,0.002,80,0.002,83,1.651,85,0.313,87,2.113,89,1.05,90,0.601,94,1.552,95,3.69,96,0.784,103,0.881,106,1.109,108,1.908,109,0.42,112,1.352,113,1.245,114,1.938,115,1.589,116,1.238,119,1.837,120,1.245,124,0.919,126,2.058,128,1.436,131,1.443,134,2.351,136,0.77,139,1.465,142,1.794,145,0.858,148,2.457,149,0.881,151,1.87,153,2.704,154,1.398,157,2.506,158,1.035,160,0.846,168,1.044,171,3.413,172,3.501,179,0.858,182,2.468,183,0.249,184,2.981,185,1.009,186,1.009,187,0.339,188,3.252,196,2.137,198,1.126,226,1.356,231,2.745,258,0.881,283,1.56,284,2.245,285,0.908,289,0.998,312,1.294,313,1.102,314,0.523,319,1.245,320,1.245,324,0.846,333,0.538,334,0.881,336,1.899,337,0.814,339,1.294,368,0.587,369,1.593,396,1.245,418,1.162,446,0.502,459,0.475,460,1.415,464,0.806,481,1.26,529,1.745,534,0.985,544,1.764,546,3.415,550,1.861,553,1.317,557,1.527,577,1.107,585,1.255,586,1.162,588,1.035,589,1.035,590,1.494,591,1.415,601,1.527,602,0.684,612,2.032,625,2.704,635,1.725,639,1.008,640,1.494,641,1.163,653,1.593,660,1.725,678,1.713,679,1.011,687,3.896,719,0.57,766,0.623,774,1.9,780,1.161,784,0.863,800,1.537,821,1.009,837,1.527,838,2.49,885,5.471,948,0.863,962,2.403,979,2.928,980,1.725,1043,2.985,1209,1.126,1217,1.494,1237,2.753,1265,1.593,1266,1.245,1293,3.244,1321,1.494,1322,1.415,1371,0.731,1390,1.593,1468,1.464,1547,1.757,1644,1.757,1649,0.757,1663,1.035,1666,1.035,1670,1.757,1683,1.294,1684,1.245,1685,1.908,1686,0.94,1704,1.009,1705,0.846,1717,1.725,1720,1.725,1721,3.814,1722,3.814,1723,2.928,1726,1.725,1727,1.725,1744,1.725,1753,1.725,1754,3.814,1757,1.725,1762,1.725,1767,1.725,1768,1.725,1809,2.351,1834,3.814,1836,2.928,1866,0.94,1893,0.292,1900,1.284,1911,0.757,1918,1.125,1933,0.662,1941,0.587,1953,0.77,2022,2.208,2025,0.757,2027,2.006,2029,0.673,2037,1.948,2041,0.985,2046,2.351,2054,4.082,2055,2.351,2056,2.289,2059,3.336,2060,0.799,2066,1.063,2069,1.713,2072,2.945,2074,0.919,2083,3.684,2105,4.611,2125,1.201,2148,1.201,2150,2.468,2162,0.57,2279,1.35,2320,4.495,2321,1.925,2322,1.925,2323,3.268,2324,3.268,2325,4.257,2326,4.257,2327,5.017,2328,3.268,2329,1.925,2330,1.925,2331,1.925,2332,1.925,2333,1.725,2334,2.928,2335,2.928,2336,1.925,2337,3.268,2338,1.925,2339,2.403,2340,1.725,2341,1.925,2342,1.593,2343,1.593,2344,1.925,2345,2.536,2346,2.928,2347,2.536,2348,3.268,2349,1.925,2350,1.925,2351,1.925,2352,1.925,2353,1.925,2354,1.925,2355,1.925,2356,1.925,2357,3.268,2358,3.268,2359,1.925,2360,1.925,2361,1.925,2362,1.925,2363,1.415,2364,1.925,2365,1.925,2366,1.925,2367,4.257,2368,1.925,2369,1.925,2370,1.925,2371,4.257,2372,1.925,2373,1.925,2374,1.925,2375,3.268,2376,1.925,2377,1.925,2378,1.925,2379,3.268,2380,5.833,2381,1.925,2382,1.925,2383,4.257,2384,6.107,2385,6.511,2386,1.925,2387,5.619,2388,1.925,2389,3.268,2390,3.268,2391,1.925,2392,1.925,2393,1.925,2394,1.925,2395,1.925,2396,3.268,2397,1.925,2398,1.925,2399,5.017,2400,1.925,2401,1.925,2402,1.925,2403,2.704,2404,1.925,2405,3.268,2406,1.925,2407,1.925,2408,1.925,2409,1.925,2410,1.925,2411,3.268,2412,1.925,2413,1.925,2414,1.925,2415,1.925,2416,3.268,2417,1.925,2418,1.925,2419,1.925,2420,1.925,2421,1.925,2422,1.925,2423,1.925,2424,3.268,2425,1.925,2426,1.925,2427,1.415,2428,3.268,2429,1.925,2430,1.925,2431,1.925,2432,4.257,2433,1.925,2434,1.925,2435,1.925,2436,1.925,2437,1.925,2438,1.925,2439,1.925,2440,3.268,2441,1.925,2442,1.925,2443,1.925,2444,4.257,2445,3.268,2446,1.925,2447,1.925,2448,1.925,2449,1.925,2450,3.814,2451,1.925,2452,3.268,2453,1.925,2454,4.257,2455,1.925,2456,1.925,2457,1.925,2458,1.925,2459,3.268,2460,1.925,2461,1.925,2462,3.268,2463,1.925,2464,1.925,2465,1.925,2466,1.925,2467,1.925,2468,1.925,2469,1.925,2470,1.925,2471,1.925,2472,1.925,2473,4.649,2474,1.925,2475,1.593,2476,1.925,2477,1.925,2478,1.925,2479,1.925,2480,1.925,2481,1.925,2482,1.925,2483,1.925,2484,1.925,2485,1.925,2486,5.017,2487,1.593,2488,1.925,2489,3.814,2490,5.052,2491,1.925,2492,1.925,2493,1.925,2494,1.925,2495,1.925,2496,1.925,2497,3.268,2498,1.725,2499,1.925,2500,5.017,2501,1.925,2502,1.925,2503,1.925,2504,1.593,2505,3.268,2506,3.268,2507,1.925,2508,1.925,2509,1.925,2510,1.925,2511,1.925,2512,3.268,2513,1.925,2514,1.925,2515,3.268,2516,3.268,2517,1.925,2518,1.925,2519,1.925,2520,1.925,2521,1.925,2522,1.925,2523,1.925,2524,1.925,2525,1.925,2526,1.925,2527,1.925,2528,1.925,2529,1.925,2530,1.925,2531,1.925,2532,1.925,2533,1.925,2534,1.925,2535,1.925,2536,1.925,2537,3.268,2538,1.925,2539,1.925,2540,4.257,2541,4.257,2542,1.415,2543,1.925,2544,1.925,2545,1.925,2546,2.704,2547,1.593,2548,1.925,2549,1.925,2550,1.925,2551,4.257,2552,1.925,2553,1.925,2554,1.925,2555,1.925,2556,1.925,2557,1.925,2558,1.925,2559,1.925,2560,1.925,2561,6.851,2562,1.925,2563,3.268,2564,3.268,2565,3.268,2566,1.925,2567,3.268,2568,1.925,2569,1.593,2570,1.925,2571,1.925,2572,1.925,2573,5.017,2574,5.017,2575,5.017,2576,1.925,2577,5.017,2578,1.925,2579,4.257,2580,1.925,2581,5.017,2582,1.925,2583,1.925,2584,1.925,2585,1.925,2586,1.925,2587,3.268,2588,5.017,2589,1.925,2590,1.925,2591,1.925,2592,3.268,2593,3.268,2594,3.268,2595,3.268,2596,5.017,2597,1.925,2598,1.925,2599,1.925,2600,3.268,2601,3.268,2602,3.268,2603,1.925,2604,4.257,2605,1.925,2606,1.925,2607,1.925,2608,1.925,2609,1.925,2610,1.925,2611,1.925,2612,1.925,2613,1.925,2614,1.925,2615,3.268,2616,4.257,2617,1.925,2618,1.925,2619,3.268,2620,3.268,2621,1.925,2622,3.268,2623,1.415,2624,1.925,2625,1.725,2626,1.925,2627,1.925,2628,1.925,2629,1.925,2630,1.925,2631,3.268,2632,1.925,2633,1.925,2634,1.925,2635,1.925,2636,1.925,2637,1.925,2638,1.925,2639,1.925,2640,1.925,2641,1.925,2642,1.925,2643,1.925,2644,1.925,2645,1.925,2646,5.619,2647,7.609,2648,7.325,2649,1.925,2650,1.925,2651,1.925,2652,3.268,2653,1.925,2654,1.925,2655,3.268,2656,1.925,2657,1.925,2658,1.925,2659,3.268,2660,1.925,2661,1.925,2662,1.725,2663,3.268,2664,1.925,2665,4.257,2666,1.925,2667,1.925,2668,1.925,2669,1.925,2670,1.925,2671,1.925,2672,1.925,2673,3.268,2674,5.017,2675,6.511,2676,1.925,2677,1.925,2678,1.925,2679,1.925,2680,2.928,2681,4.257,2682,1.925,2683,1.925,2684,1.925,2685,1.925,2686,1.925,2687,3.268,2688,1.925,2689,1.925,2690,1.725,2691,1.925,2692,1.925,2693,3.268,2694,1.925,2695,3.268,2696,1.925,2697,1.925,2698,1.925,2699,1.925,2700,3.268,2701,1.925,2702,3.268,2703,1.925,2704,1.925,2705,1.925,2706,1.925,2707,1.925,2708,1.925,2709,1.925,2710,1.925,2711,1.925,2712,1.925,2713,1.925,2714,3.268,2715,5.619,2716,1.925,2717,1.925,2718,1.925,2719,1.925,2720,1.925,2721,1.925,2722,1.925,2723,1.925,2724,1.925,2725,1.925,2726,1.925,2727,1.925,2728,1.925,2729,3.268,2730,1.925,2731,1.925,2732,1.925,2733,1.925,2734,1.925,2735,1.925,2736,1.925,2737,1.925,2738,1.925,2739,3.268,2740,3.268,2741,2.196,2742,3.268,2743,3.268,2744,1.925,2745,1.925,2746,1.925,2747,1.925,2748,1.925,2749,1.925,2750,3.268,2751,1.925,2752,1.494,2753,1.725,2754,1.925,2755,1.925,2756,1.925,2757,1.925,2758,1.925,2759,4.257,2760,4.257,2761,1.925,2762,1.925,2763,1.925,2764,1.925,2765,1.925,2766,1.925,2767,1.925,2768,1.925,2769,1.925,2770,1.925,2771,1.925,2772,1.725,2773,1.925,2774,1.725,2775,1.725,2776,1.925,2777,1.925,2778,1.925,2779,1.925,2780,1.925,2781,1.925,2782,1.925,2783,1.925,2784,1.925,2785,1.925,2786,1.725,2787,1.925,2788,1.925,2789,1.725,2790,1.925,2791,1.925,2792,1.494,2793,1.925,2794,4.257,2795,1.925,2796,1.925,2797,1.925,2798,1.925,2799,1.925,2800,2.928,2801,1.925,2802,1.925,2803,1.925,2804,1.925,2805,1.925,2806,1.925,2807,1.925,2808,1.925,2809,1.925,2810,1.925]],["title/interfaces/ISeriesAccessors.html",[36,1.622,40,0.003]],["body/interfaces/ISeriesAccessors.html",[3,0.128,4,0.12,5,0.12,10,0.247,11,0.327,12,1.264,13,1.355,17,0.449,20,0.005,21,0.836,24,0.308,28,0.355,33,1.238,34,0.6,35,1.599,36,1.946,37,1.707,39,0.4,40,0.005,41,0.934,42,1.774,47,1.799,53,1.205,57,1.704,75,0.982,78,0.002,79,0.003,80,0.002,83,1.549,89,1.238,90,1.31,97,1.66,102,0.876,106,0.852,110,0.468,116,0.806,119,0.668,131,2.411,136,0.892,145,1.769,163,0.982,164,1.856,168,1.305,183,1.188,187,0.576,198,1.537,213,2.037,222,1.423,229,0.996,238,2.32,244,0.927,245,0.996,251,2.524,254,1.263,257,1.221,284,1.549,285,1.338,287,1.026,289,1.363,294,0.795,303,2.066,313,1.344,314,2.009,328,0.996,333,1.915,334,1.264,368,0.996,384,0.84,399,1.2,411,1.026,417,1.09,439,1.057,443,1.552,444,1.623,446,1.926,447,1.623,453,1.7,455,2.069,459,1.823,464,1.507,466,1.599,481,2.188,529,1.981,530,1.529,535,1.308,536,1.308,537,1.308,538,1.308,544,1.575,546,1.241,550,1.66,552,1.308,553,1.552,558,1.308,562,2.008,566,2.008,576,1.308,577,1.7,580,1.285,581,2.028,585,1.255,594,1.285,596,1.026,600,1.308,601,1.364,604,1.308,639,0.774,641,1.039,647,2.244,651,1.842,679,1.011,717,1.575,718,1.976,719,2.028,733,0.876,734,1.18,748,1.517,750,1.011,752,1.976,755,2.119,758,1.143,766,1.057,774,1.29,780,1.161,787,1.899,795,0.996,800,1.537,802,2.602,811,1.09,825,1.285,830,1.285,892,1.2,934,1.22,948,1.614,972,1.727,1007,1.125,1060,1.241,1061,1.308,1062,1.308,1063,1.308,1065,2.321,1067,0.982,1069,1.042,1186,2.216,1201,2.358,1218,1.241,1219,1.241,1236,2.242,1247,1.263,1267,1.18,1269,1.812,1323,2.069,1330,1.599,1432,1.241,1444,2.601,1468,1.464,1613,2.358,1634,1.241,1693,1.285,1737,1.308,1750,1.22,1781,1.308,1801,2.17,1893,0.495,1894,1.285,1895,1.332,1896,2.008,1897,1.842,1898,1.575,1899,1.308,1900,1.285,1901,1.308,1902,1.074,1903,0.967,1904,1.057,1905,2.444,1906,1.285,1907,1.263,1908,2.444,1909,1.332,1910,1.285,1911,1.285,1912,1.143,1913,1.308,1914,1.308,1915,1.783,1916,1.899,1917,1.161,1918,1.811,1919,3.209,1920,1.332,1921,1.905,1922,1.18,1923,2.444,1924,1.332,1925,2.044,1926,2.008,1927,2.008,1928,1.332,1929,2.008,1930,2.359,1931,1.905,1932,1.332,1933,1.125,1934,1.332,1935,1.241,1936,1.241,1937,1.889,1938,1.2,1939,1.332,1940,1.332,1941,0.996,1942,1.332,1943,1.285,1944,1.938,1945,2.008,1946,1.308,1947,2.008,1948,1.332,1949,1.285,1950,1.332,1951,2.563,1952,1.332,1953,1.308,1954,1.332,1955,2.008,1956,1.285,1957,1.143,1958,1.308,1959,1.308,1960,1.332,1961,1.332,1962,2.044,1963,1.332,1964,1.332,1965,1.308,1966,2.044,1967,1.332,1968,1.308,1969,1.263,1970,1.332,1971,1.332,1972,1.648,1973,1.308,1974,1.976,1975,1.332,1976,1.308,1977,1.308,1978,1.332,1979,1.332,1980,1.332,1981,1.308,1982,1.332,1983,1.125,1984,1.22,1985,1.308,1986,1.332,1987,1.332,1988,1.332,1989,1.332,1990,1.285,1991,1.308,1992,1.285,1993,1.285,1994,1.332,1995,2.044,1996,2.741,1997,1.332,1998,1.308,1999,1.332,2000,1.332,2001,1.332,2002,1.332,2003,1.332,2004,1.674,2005,1.09,2006,1.332,2007,1.332,2008,1.905,2009,1.285,2010,1.383,2011,1.285,2012,1.332,2013,1.332,2014,1.905,2015,2.044,2016,1.332,2017,1.332,2018,2.28,2019,1.938,2020,2.28,2021,1.308,2022,1.285,2023,1.057,2024,1.308,2025,1.285,2026,1.263,2027,1.074,2028,1.332,2029,1.143,2225,1.758,2811,3.269]],["title/interfaces/ISetDomainEventPayload.html",[40,0.003,2026,1.966]],["body/interfaces/ISetDomainEventPayload.html",[3,0.128,4,0.12,5,0.12,10,0.247,11,0.327,12,1.264,13,1.355,17,0.449,20,0.005,21,0.837,24,0.309,28,0.355,33,1.24,34,0.601,35,1.601,36,1.601,37,1.404,39,0.4,40,0.005,41,0.935,42,1.776,47,1.8,53,1.206,57,1.705,75,0.876,78,0.002,79,0.003,80,0.002,83,1.55,89,1.24,90,1.31,97,1.662,102,0.877,106,0.853,110,0.468,116,0.808,119,0.669,131,2.412,136,0.892,145,1.769,163,0.983,164,1.857,168,1.306,183,1.189,187,0.577,198,1.539,213,2.039,222,1.425,229,0.998,238,2.322,244,0.928,245,0.998,251,2.525,254,1.265,257,1.223,284,1.55,285,1.339,287,1.028,289,1.364,294,0.797,303,2.068,313,1.346,314,2.01,328,0.998,333,1.917,334,1.266,368,0.998,384,0.842,399,1.202,411,1.028,417,1.092,439,1.059,443,1.554,444,1.626,446,1.928,447,1.626,453,1.702,455,2.071,459,1.825,464,1.508,466,1.601,481,2.19,529,1.982,530,1.531,535,1.31,536,1.31,537,1.31,538,1.31,544,1.577,546,1.243,550,1.662,552,1.31,553,1.554,558,1.31,562,2.01,566,2.01,576,1.31,577,1.702,580,1.287,581,2.03,585,1.257,594,1.287,596,1.028,600,1.31,601,1.365,604,1.31,639,0.775,641,1.04,647,2.245,651,1.845,679,1.013,717,1.577,718,1.978,719,2.03,733,0.877,734,1.183,748,1.518,750,1.013,752,1.978,755,2.121,758,1.145,766,1.059,774,1.292,780,1.163,787,1.8,795,0.998,800,1.539,802,2.604,811,1.092,825,1.287,830,1.287,892,1.202,934,1.222,948,1.616,972,1.729,1007,1.127,1060,1.243,1061,1.31,1062,1.31,1063,1.31,1065,2.323,1067,0.983,1069,1.043,1186,2.218,1201,2.36,1218,1.243,1219,1.243,1236,2.245,1247,1.265,1267,1.183,1269,1.815,1323,2.071,1330,1.601,1432,1.243,1444,2.604,1468,1.466,1613,2.36,1634,1.243,1693,1.287,1737,1.31,1750,1.222,1781,1.31,1801,2.173,1893,0.496,1894,1.287,1895,1.334,1896,2.01,1897,1.845,1898,1.577,1899,1.31,1900,1.287,1901,1.31,1902,1.076,1903,0.969,1904,1.059,1905,2.446,1906,1.287,1907,1.265,1908,2.446,1909,1.334,1910,1.287,1911,1.287,1912,1.145,1913,1.31,1914,1.31,1915,1.785,1916,1.9,1917,1.163,1918,1.812,1919,3.211,1920,1.334,1921,1.908,1922,1.183,1923,2.446,1924,1.334,1925,2.047,1926,2.01,1927,2.01,1928,1.334,1929,2.01,1930,2.362,1931,1.908,1932,1.334,1933,1.127,1934,1.334,1935,1.243,1936,1.243,1937,1.891,1938,1.202,1939,1.334,1940,1.334,1941,0.998,1942,1.334,1943,1.287,1944,1.941,1945,2.01,1946,1.31,1947,2.01,1948,1.334,1949,1.287,1950,1.334,1951,2.564,1952,1.334,1953,1.31,1954,1.334,1955,2.01,1956,1.287,1957,1.145,1958,1.31,1959,1.31,1960,1.334,1961,1.334,1962,2.047,1963,1.334,1964,1.334,1965,1.31,1966,2.047,1967,1.334,1968,1.31,1969,1.265,1970,1.334,1971,1.334,1972,1.65,1973,1.31,1974,1.978,1975,1.334,1976,1.31,1977,1.31,1978,1.334,1979,1.334,1980,1.334,1981,1.31,1982,1.334,1983,1.127,1984,1.222,1985,1.31,1986,1.334,1987,1.334,1988,1.334,1989,1.334,1990,1.287,1991,1.31,1992,1.287,1993,1.287,1994,1.334,1995,2.047,1996,2.744,1997,1.334,1998,1.31,1999,1.334,2000,1.334,2001,1.334,2002,1.334,2003,1.334,2004,1.676,2005,1.092,2006,1.334,2007,1.334,2008,1.908,2009,1.287,2010,1.385,2011,1.287,2012,1.334,2013,1.334,2014,1.908,2015,2.047,2016,1.334,2017,1.334,2018,2.283,2019,1.941,2020,2.283,2021,1.31,2022,1.287,2023,1.059,2024,1.31,2025,1.287,2026,1.941,2027,1.65,2028,1.334,2029,1.145,2225,1.761,2812,3.275]],["title/interfaces/ISideIndicatorAccessors.html",[40,0.003,2813,3.57]],["body/interfaces/ISideIndicatorAccessors.html",[0,0.11,3,0.195,4,0.183,5,0.183,8,1.072,10,0.201,11,0.505,12,1.202,13,1.33,14,1.21,20,0.005,22,0.723,24,0.258,28,0.369,33,1.68,35,2.17,36,2.17,37,2.445,38,1.333,39,0.343,40,0.005,41,0.865,42,1.194,47,1.21,52,1.942,55,1.296,56,2.324,57,1.086,72,2.275,78,0.002,79,0.003,80,0.002,85,0.808,91,2.607,94,1.562,96,2.026,109,1.487,110,0.724,111,2.59,115,2.542,119,1.586,134,2.459,136,0.463,142,1.371,147,3.216,148,1.712,151,2.185,164,2.14,183,0.644,187,0.876,188,3.401,196,1.508,198,1.116,213,1.371,216,3.698,217,3.698,222,2.368,226,3.465,231,2.673,244,1.41,245,2.075,257,1.21,289,1.661,294,1.657,299,3.251,300,2.374,301,1.903,303,2.171,321,1.472,324,2.185,327,2.428,328,1.516,332,2.484,334,1.03,336,1.451,337,2.103,384,1.278,418,3.002,493,1.796,639,1.839,641,1.41,674,3.216,676,3.343,734,1.796,795,1.516,945,2.143,1067,1.494,1170,2.747,1178,3.116,1195,3.103,1196,3.103,1209,2.91,1210,3.103,1211,3.488,1539,2.747,1613,1.712,1646,3.657,1701,4.803,1712,3.103,1810,2.747,1812,3.103,1893,0.754,1917,2.42,1919,2.899,1937,2.583,2010,1.371,2042,2.143,2095,2.91,2813,5.446,2814,3.861,2815,7.364,2816,3.216,2817,6.432,2818,6.432,2819,3.343,2820,5.007,2821,3.861,2822,4.249,2823,5.656,2824,5.007,2825,3.861,2826,3.861,2827,3.343,2828,3.488,2829,3.861,2830,3.861,2831,5.007,2832,5.007,2833,3.861,2834,3.861,2835,3.861,2836,3.861,2837,3.861,2838,3.861,2839,3.861,2840,3.657,2841,3.216,2842,3.861,2843,5.007,2844,3.657,2845,3.861,2846,5.286,2847,3.861,2848,6.028,2849,3.488,2850,3.861,2851,3.861,2852,3.861,2853,6.028,2854,3.861,2855,3.861,2856,3.861,2857,3.861,2858,3.861,2859,3.861,2860,3.861,2861,3.861,2862,3.861,2863,3.861,2864,3.861,2865,3.861,2866,3.657,2867,3.216,2868,3.861]],["title/interfaces/ISideIndicatorDataAccessors.html",[40,0.003,2817,3.743]],["body/interfaces/ISideIndicatorDataAccessors.html",[0,0.111,3,0.196,4,0.184,5,0.184,8,1.077,10,0.202,11,0.507,12,1.138,13,1.22,14,1.217,20,0.005,22,0.726,24,0.19,28,0.369,33,2.065,35,2.481,36,2.178,37,2.45,38,1.34,39,0.343,40,0.005,41,0.933,42,1.2,47,1.217,52,1.947,55,1.303,56,2.336,57,1.092,72,2.287,78,0.003,79,0.003,80,0.003,85,0.812,91,2.621,94,1.565,96,2.037,109,1.493,110,0.726,111,2.597,115,2.551,119,1.591,134,2.468,136,0.466,142,1.378,147,3.233,148,1.721,151,2.197,164,2.087,183,0.648,187,0.881,188,3.413,196,1.513,198,1.122,213,1.378,216,3.705,217,3.705,222,2.373,226,3.473,231,2.675,244,1.417,245,2.373,257,1.217,289,1.665,294,1.663,299,3.263,300,2.387,301,1.91,303,2.176,321,1.48,324,2.197,327,2.44,328,1.524,332,2.497,334,1.035,336,1.459,337,2.114,384,1.285,418,3.017,493,1.806,639,1.844,641,1.415,674,3.233,676,3.36,734,1.806,795,1.524,945,2.154,1067,1.501,1170,2.761,1178,3.563,1195,3.119,1196,3.119,1209,2.925,1210,3.119,1211,3.506,1539,2.761,1613,1.721,1646,3.676,1701,4.784,1712,3.119,1810,2.761,1812,3.119,1893,0.758,1917,2.428,1919,2.907,1937,2.589,2010,1.883,2042,2.154,2095,2.925,2813,4.793,2814,3.881,2815,7.331,2816,3.233,2817,6.155,2818,5.726,2819,3.36,2820,5.025,2821,3.881,2822,4.264,2823,6.184,2824,5.025,2825,3.881,2826,3.881,2827,3.36,2828,3.506,2829,3.881,2830,3.881,2831,5.025,2832,5.025,2833,3.881,2834,3.881,2835,3.881,2836,3.881,2837,3.881,2838,3.881,2839,3.881,2840,3.676,2841,3.233,2842,3.881,2843,5.025,2844,3.676,2845,3.881,2846,5.305,2847,3.881,2848,6.044,2849,3.506,2850,3.881,2851,3.881,2852,3.881,2853,6.044,2854,3.881,2855,3.881,2856,3.881,2857,3.881,2858,3.881,2859,3.881,2860,3.881,2861,3.881,2862,3.881,2863,3.881,2864,3.881,2865,3.881,2866,3.676,2867,3.233,2868,3.881]],["title/interfaces/ISideIndicatorSeriesAccessors.html",[40,0.003,2818,3.743]],["body/interfaces/ISideIndicatorSeriesAccessors.html",[0,0.108,3,0.188,4,0.177,5,0.177,8,1.037,10,0.194,11,0.497,12,1.087,13,1.245,14,1.171,20,0.005,22,1.197,24,0.313,28,0.366,33,1.642,35,2.121,36,2.432,37,2.754,38,1.289,39,0.339,40,0.005,41,0.918,42,1.155,47,1.171,52,2.236,55,1.254,56,2.248,57,1.051,72,2.201,78,0.002,79,0.003,80,0.002,85,0.781,91,2.522,94,1.544,96,1.96,109,1.667,110,0.806,111,2.546,115,2.485,119,1.559,134,2.404,136,0.448,142,1.326,147,3.111,148,1.656,151,2.114,164,2.068,183,0.623,187,0.848,188,3.324,196,1.473,198,1.079,213,1.326,216,4.01,217,4.01,222,2.335,226,3.417,231,2.658,244,1.364,245,2.326,257,1.171,289,1.638,294,1.62,299,3.178,300,2.297,301,1.86,303,2.133,321,1.424,324,2.114,327,2.348,328,1.466,332,2.403,334,0.996,336,1.404,337,2.034,384,1.237,418,2.904,493,1.737,639,1.807,641,1.378,674,4.304,676,4.474,734,1.737,795,1.466,945,2.073,1067,1.445,1170,2.657,1178,3.491,1195,3.002,1196,3.002,1209,2.815,1210,3.002,1211,3.374,1539,2.657,1613,1.656,1646,4.894,1701,4.821,1712,3.002,1810,2.657,1812,3.002,1893,0.729,1917,2.365,1919,3.338,1937,2.547,2010,1.326,2042,2.073,2095,2.815,2813,4.668,2814,3.734,2815,7.397,2816,3.111,2817,5.612,2818,6.055,2819,3.234,2820,4.894,2821,3.734,2822,4.153,2823,5.927,2824,6.357,2825,5.166,2826,6.392,2827,3.234,2828,3.374,2829,3.734,2830,3.734,2831,4.894,2832,4.894,2833,3.734,2834,3.734,2835,3.734,2836,3.734,2837,3.734,2838,3.734,2839,3.734,2840,3.538,2841,3.111,2842,3.734,2843,4.894,2844,3.538,2845,3.734,2846,5.166,2847,3.734,2848,5.924,2849,3.374,2850,3.734,2851,3.734,2852,3.734,2853,5.924,2854,3.734,2855,3.734,2856,3.734,2857,3.734,2858,3.734,2859,3.734,2860,3.734,2861,3.734,2862,3.734,2863,3.734,2864,3.734,2865,3.734,2866,3.538,2867,3.111,2868,3.734]],["title/interfaces/ISimpleThresholdZone.html",[40,0.003,2869,3.951]],["body/interfaces/ISimpleThresholdZone.html",[3,0.281,4,0.264,5,0.264,10,0.29,11,0.561,20,0.005,22,1.393,24,0.351,28,0.281,39,0.362,40,0.004,78,0.004,79,0.004,80,0.004,85,1.165,136,0.893,168,1.367,216,4.345,217,4.321,285,1.673,313,1.408,368,2.186,417,3.271,795,2.186,1613,2.966,1712,5.378,1893,1.087,2008,3.509,2175,5.104,2869,6.691,2870,5.936,2871,7.132,2872,7.723,2873,6.427,2874,5.568,2875,5.568,2876,5.568,2877,5.568]],["title/interfaces/ISpark.html",[40,0.003,772,3.422]],["body/interfaces/ISpark.html",[0,0.124,3,0.231,4,0.217,5,0.217,8,1.273,10,0.238,11,0.497,13,1.362,20,0.005,21,0.864,22,1.3,24,0.339,28,0.299,34,1.083,39,0.372,40,0.005,75,0.846,78,0.003,79,0.004,80,0.003,85,0.959,90,1.426,94,1.511,110,0.833,126,1.361,136,0.936,163,2.293,168,0.811,179,1.539,183,0.765,187,1.04,196,1.307,198,2.078,238,2.396,283,3.645,284,1.935,287,2.656,333,2.134,334,1.852,394,3.261,411,1.853,432,4.608,459,1.457,464,2.206,487,3.422,577,2.586,581,2.504,602,2.098,652,2.819,745,5.131,746,3.818,747,4.141,748,1.307,749,5.47,750,1.826,751,4.342,752,2.737,753,4.342,754,4.342,755,2.616,756,4.342,758,3.375,766,1.91,767,4.13,768,5.933,769,5.613,770,4.936,771,3.054,772,5.131,773,4.81,774,2.299,775,4.342,776,4.342,777,3.684,778,3.818,779,2.819,780,2.098,781,3.969,782,3.969,783,2.45,784,2.647,785,2.204,786,3.564,787,1.437,788,4.936,789,3.813,790,2.594,791,3.969,792,4.141,793,3.969,794,3.969,795,1.799,796,5.131,797,5.131,798,5.131,799,5.131,800,1.325,801,3.969,802,1.97,803,3.354,804,4.342,805,4.342,806,3.175,807,3.969,1893,0.895]],["title/interfaces/IStackMetadata.html",[40,0.003,2202,4.212]],["body/interfaces/IStackMetadata.html",[3,0.305,4,0.286,5,0.286,10,0.314,11,0.588,20,0.005,24,0.343,39,0.354,40,0.005,78,0.004,79,0.005,80,0.004,145,1.822,168,1.392,216,4.16,217,4.16,404,3.633,448,6.036,1893,1.178,2200,6.967,2201,6.967,2202,7.48]],["title/interfaces/IStartEndRangeAccessors.html",[40,0.003,2300,3.422]],["body/interfaces/IStartEndRangeAccessors.html",[0,0.115,3,0.278,4,0.261,5,0.261,7,2.74,8,1.529,10,0.287,11,0.557,12,1.077,13,1.192,14,1.726,20,0.005,24,0.325,28,0.278,33,2.574,34,1.571,35,3.115,36,2.728,37,2.57,38,1.901,39,0.389,40,0.005,41,1.107,52,1.774,53,1.703,78,0.004,79,0.004,80,0.004,110,0.661,204,4.029,209,4.821,210,5.224,216,4.037,217,4.037,218,2.788,331,4.379,1883,4.587,1885,4.587,1887,4.587,1889,4.587,1890,4.768,1893,1.075,2299,4.975,2300,5.755,2301,4.768,2302,4.768]],["title/interfaces/IStatusAccessors.html",[40,0.003,2878,3.743]],["body/interfaces/IStatusAccessors.html",[0,0.117,3,0.283,4,0.266,5,0.266,7,2.792,8,1.558,10,0.292,11,0.564,12,1.236,13,1.006,20,0.005,24,0.274,28,0.363,33,2.136,38,1.937,39,0.363,40,0.004,41,1.033,54,2.61,57,1.579,78,0.004,79,0.004,80,0.004,94,1.716,96,3.527,164,1.917,196,1.917,202,4.51,205,6.459,207,5.403,209,4.539,214,3.61,259,3.176,417,2.888,1893,1.095,2878,6.817,2879,5.98,2880,7.743,2881,5.315,2882,5.98,2883,5.98,2884,5.98,2885,5.98,2886,5.98,2887,5.98,2888,5.98]],["title/interfaces/IStatusDataAccessors.html",[40,0.003,2880,3.951]],["body/interfaces/IStatusDataAccessors.html",[0,0.117,3,0.283,4,0.266,5,0.266,7,2.792,8,1.558,10,0.292,11,0.564,12,1.089,13,1.006,20,0.005,24,0.274,28,0.363,33,2.371,38,1.937,39,0.363,40,0.004,41,1.033,54,2.61,57,1.579,78,0.004,79,0.004,80,0.004,94,1.716,96,3.527,164,1.917,196,1.917,202,4.51,205,6.231,207,5.784,209,4.539,214,3.61,259,3.176,417,3.278,1893,1.095,2878,6.367,2879,5.98,2880,7.627,2881,5.315,2882,5.98,2883,5.98,2884,5.98,2885,5.98,2886,5.98,2887,5.98,2888,5.98]],["title/interfaces/ITextOverflowArgs.html",[40,0.003,2053,2.812]],["body/interfaces/ITextOverflowArgs.html",[0,0.053,3,0.128,4,0.12,5,0.12,10,0.132,11,0.327,20,0.005,21,0.371,24,0.296,28,0.329,39,0.359,40,0.005,41,0.56,52,1.257,75,0.469,78,0.002,79,0.003,80,0.002,83,2.507,89,1.692,90,0.71,95,3.495,100,1.636,101,3.533,102,1.347,103,3.573,104,1.599,105,1.599,106,1.594,108,3.76,110,0.758,111,2.605,112,1.8,114,3.14,115,2.915,116,2.006,124,2.92,126,1.159,135,3.648,136,0.639,139,3.936,142,1.89,145,1.869,148,2.687,154,1.076,155,2.511,157,1.636,158,2.703,159,1.81,160,3.431,161,1.81,162,1.81,163,2.06,165,1.81,168,1.393,170,2.703,171,3.879,172,1.762,179,1.941,182,3.014,183,0.424,184,2.454,185,3.596,186,2.635,198,1.93,218,1.288,257,2.257,258,1.499,285,0.593,289,1.364,301,1.71,313,1.778,314,2.209,321,0.97,334,1.683,384,2.007,404,3.205,446,0.854,459,0.808,464,1.24,493,1.183,494,2.209,529,1.639,530,1.864,534,1.676,544,2.845,550,2.463,553,1.892,557,3.205,585,0.819,595,1.676,596,1.578,597,2.986,598,1.762,601,0.89,602,1.164,603,1.717,632,1.412,639,2.173,641,1.938,647,1.446,652,1.564,679,1.555,717,2.633,718,1.979,719,1.488,723,2.571,733,0.878,748,1.113,750,1.555,767,1.599,779,3.275,783,2.846,784,1.469,785,2.283,800,0.735,813,1.717,821,3.596,837,2.858,945,3.365,1023,1.636,1067,2.06,1146,1.81,1163,1.717,1178,3.72,1203,1.762,1330,1.602,1371,1.909,1454,3.426,1545,2.777,1546,3.789,1547,1.762,1548,1.81,1549,1.81,1555,1.81,1559,1.81,1563,1.81,1567,1.81,1640,1.81,1642,1.81,1643,1.81,1644,1.762,1647,5.586,1649,1.288,1654,2.635,1663,1.762,1670,1.762,1676,2.777,1680,1.81,1685,2.742,1686,1.599,1689,1.717,1690,1.762,1695,1.762,1696,2.635,1701,2.92,1704,1.717,1705,2.687,1769,2.777,1770,1.81,1860,1.717,1861,1.762,1862,1.762,1863,1.762,1864,1.762,1865,2.703,1866,1.599,1867,1.762,1893,0.496,1898,2.451,1916,1.669,1918,0.866,1951,1.076,1972,1.076,2010,2.312,2023,1.06,2030,1.81,2031,4.203,2032,2.4,2033,4.313,2034,1.861,2035,2.855,2036,2.798,2037,3.838,2038,2.511,2039,1.861,2040,1.564,2041,3.784,2042,3.188,2043,3.789,2044,3.138,2045,2.777,2046,4.934,2047,2.855,2048,3.897,2049,2.777,2050,1.861,2051,1.44,2052,1.81,2053,3.378,2054,3.789,2055,3.789,2056,2.703,2057,1.81,2058,1.81,2059,2.858,2060,2.538,2061,1.81,2062,1.762,2063,1.861,2064,1.81,2065,1.81,2066,1.81,2067,1.861,2068,1.861,2069,1.717,2070,1.564,2071,1.861,2072,2.635,2073,1.861,2074,1.564,2075,1.861,2076,2.703,2077,2.855,2078,2.855,2079,2.4,2080,2.4,2081,1.861,2082,1.81,2083,1.762,2084,1.861,2085,1.861]],["title/interfaces/ITickLabelConfig.html",[40,0.003,170,2.738]],["body/interfaces/ITickLabelConfig.html",[0,0.052,3,0.125,4,0.118,5,0.118,10,0.129,11,0.321,20,0.005,21,0.362,22,0.985,24,0.294,28,0.326,39,0.358,40,0.005,41,0.55,52,1.235,75,0.707,78,0.002,79,0.002,80,0.002,83,2.5,85,0.52,89,1.672,90,0.698,95,3.48,100,1.599,101,3.496,102,1.323,103,3.54,104,1.563,105,1.563,106,1.571,108,3.732,110,0.751,111,2.581,112,1.785,114,3.216,115,2.888,116,2.054,124,2.878,126,1.138,135,3.615,136,0.631,139,3.911,142,1.868,145,1.861,148,2.663,154,1.052,155,2.466,157,1.599,158,2.656,159,1.768,160,3.659,161,1.768,162,1.768,163,2.035,165,1.768,168,1.39,170,3.242,171,3.838,172,3.644,179,1.934,182,2.978,183,0.415,184,3.308,185,4.227,186,3.16,198,1.958,218,1.258,257,2.268,258,1.465,285,0.894,289,1.348,301,1.685,313,1.769,314,2.191,321,0.948,334,1.669,384,1.989,404,3.166,446,0.834,459,0.79,464,1.218,493,1.156,494,2.17,529,1.615,530,1.837,534,1.637,544,2.83,550,2.449,553,1.865,557,3.166,585,1.235,595,1.637,596,1.55,597,2.943,598,1.722,601,0.87,602,1.137,603,1.678,632,1.379,639,2.162,641,1.946,647,1.42,652,1.528,679,1.527,717,2.614,718,1.95,719,1.462,723,2.526,733,0.858,748,1.093,750,1.527,767,2.411,779,3.235,783,2.812,784,1.435,785,2.251,800,0.718,813,2.589,821,3.552,837,3.166,945,3.334,1023,1.599,1067,2.035,1146,2.728,1163,1.678,1178,3.689,1203,1.722,1330,1.574,1371,1.875,1454,3.385,1545,2.728,1546,3.743,1547,1.722,1548,1.768,1549,1.768,1555,1.768,1559,1.768,1563,1.768,1567,1.768,1640,1.768,1642,1.768,1643,1.768,1644,1.722,1647,5.574,1649,1.941,1654,2.589,1663,1.722,1670,1.722,1676,2.728,1680,1.768,1685,2.702,1686,1.563,1689,1.678,1690,1.722,1695,1.722,1696,2.589,1701,3.235,1704,1.678,1705,2.978,1769,2.728,1770,1.768,1860,1.678,1861,1.722,1862,1.722,1863,1.722,1864,1.722,1865,2.656,1866,1.563,1867,1.722,1893,0.485,1898,2.429,1916,1.649,1918,0.846,1951,1.052,1972,1.052,2010,2.295,2023,1.036,2030,1.768,2031,4.159,2032,2.878,2033,4.273,2034,1.818,2035,2.805,2036,2.758,2037,3.81,2038,2.466,2039,1.818,2040,1.528,2041,3.745,2042,3.334,2043,3.743,2044,3.1,2045,2.728,2046,4.905,2047,2.805,2048,3.849,2049,2.728,2050,1.818,2051,1.407,2052,1.768,2053,2.728,2054,1.768,2055,1.768,2056,3.644,2057,1.768,2058,1.768,2059,3.166,2060,2.812,2061,2.728,2062,2.656,2063,2.805,2064,2.728,2065,2.728,2066,2.728,2067,3.849,2068,1.818,2069,1.678,2070,1.528,2071,1.818,2072,2.589,2073,1.818,2074,1.528,2075,1.818,2076,2.656,2077,2.805,2078,2.805,2079,2.358,2080,2.358,2081,1.818,2082,1.768,2083,1.722,2084,1.818,2085,1.818]],["title/interfaces/ITooltipNode.html",[40,0.003,1327,4.212]],["body/interfaces/ITooltipNode.html",[0,0.073,3,0.178,4,0.167,5,0.167,8,0.979,10,0.258,11,0.416,13,0.89,17,1.016,20,0.005,24,0.243,28,0.376,38,1.217,39,0.178,40,0.002,41,0.712,42,1.535,47,1.556,54,1.64,55,2.544,75,1.15,78,0.002,79,0.003,80,0.002,90,1.134,94,1.512,111,1.515,112,1.997,114,1.754,116,1.12,126,1.705,128,1.995,136,0.884,142,2.213,151,2.809,168,1.238,183,0.588,196,1.874,231,2.632,238,3.104,244,1.287,301,2.245,312,3.052,313,1.452,314,1.234,321,1.344,334,1.323,337,1.92,435,4.328,437,4.297,452,3.184,481,1.892,482,2.809,492,2.508,493,1.64,496,2.936,498,2.741,501,2.38,516,2.322,524,3.631,529,1.217,585,1.136,586,2.741,588,2.442,589,2.442,612,3.532,632,1.957,639,1.514,641,1.323,740,3.339,755,1.404,774,1.643,809,2.936,834,3.784,867,4.297,868,4.297,875,4.483,878,4.483,884,4.297,893,3.339,901,3.052,920,3.052,948,1.2,972,2.913,1004,3.339,1043,5.189,1152,3.757,1208,3.525,1237,2.936,1248,3.339,1272,6.233,1278,3.525,1282,6.378,1296,4.069,1297,4.069,1298,4.069,1299,4.069,1300,4.069,1305,4.069,1306,3.757,1310,5.728,1311,4.069,1313,4.069,1314,5.728,1315,4.069,1316,8.083,1317,6.629,1318,5.728,1319,4.069,1320,4.069,1321,3.525,1322,3.339,1323,2.507,1324,4.069,1325,6.645,1326,3.757,1327,6.122,1328,4.069,1329,4.069,1330,1.447,1331,4.069,1332,4.069,1333,4.069,1334,4.069,1335,4.069,1336,4.069,1337,4.069,1338,5.728,1339,4.069,1340,4.069,1341,4.069,1342,4.069,1343,4.069,1344,4.069,1345,4.069,1346,3.757,1347,4.069,1348,5.728,1349,5.728,1350,5.29,1351,5.728,1352,5.728,1353,4.069,1354,5.728,1355,4.069,1356,4.069,1357,6.629,1358,4.069,1359,4.069,1360,5.728,1361,4.069,1362,4.069,1363,5.728,1364,4.069,1365,6.629,1366,5.728,1367,4.069,1368,4.069,1369,4.069,1370,4.069,1371,2.427,1372,4.069,1373,2.833,1374,4.069,1375,4.069,1376,7.195,1377,4.069,1378,4.069,1379,5.728,1380,4.069,1381,4.069,1382,4.069,1383,4.069,1384,3.757,1385,4.069,1386,3.525,1387,4.069,1388,4.069,1389,4.069,1390,3.757,1391,4.069,1392,4.069,1393,4.069,1394,4.069,1395,4.069,1396,4.069,1397,4.069,1398,5.728,1399,5.728,1400,5.728,1401,6.629,1402,4.069,1403,4.069,1404,4.069,1405,3.757,1406,4.069,1407,3.757,1408,3.052,1409,4.069,1410,4.069,1411,5.728,1412,4.069,1413,4.069,1414,4.069,1415,4.069,1416,4.069,1417,4.069,1418,4.069,1419,4.069,1420,4.069,1421,4.069,1422,4.069,1423,4.069,1424,4.069,1425,4.069,1426,4.069,1427,4.069,1893,0.688]],["title/interfaces/ITooltipPosition.html",[40,0.003,1446,3.951]],["body/interfaces/ITooltipPosition.html",[0,0.073,3,0.176,4,0.165,5,0.165,10,0.181,11,0.413,12,1.005,17,0.616,20,0.005,24,0.17,28,0.371,34,0.823,39,0.33,40,0.002,41,0.819,42,1.765,47,1.789,55,1.916,57,0.98,78,0.002,79,0.003,80,0.002,85,0.729,90,0.895,94,1.64,109,0.98,111,2.811,112,1.866,114,3.086,115,2.367,116,1.107,119,1.295,131,1.823,136,0.418,142,1.747,149,2.053,154,2.082,168,1.009,183,0.821,196,1.627,201,2.902,216,2.68,217,3.377,231,2.626,238,1.409,251,1.823,259,1.972,285,1.148,287,1.99,294,1.092,301,2.233,321,1.328,324,1.972,333,1.254,334,1.811,336,1.85,404,2.962,411,1.99,435,5.372,436,2.413,437,3.016,438,3.483,439,2.051,440,3.483,441,4.538,442,3.483,443,1.961,444,1.452,451,3.3,452,3.147,453,2.706,455,1.52,456,4.099,458,4.921,459,1.564,460,3.3,463,3.3,466,2.02,470,3.483,481,1.876,516,2.295,529,1.203,577,1.52,581,1.876,585,1.122,586,2.708,588,2.413,589,2.413,591,3.3,592,2.708,601,2.171,602,1.595,612,3.027,639,1.063,641,0.929,678,2.352,687,3.672,755,1.388,766,1.452,771,2.941,786,4.822,806,2.413,828,2.191,890,3.147,892,1.648,934,1.675,948,2.376,1136,2.8,1137,2.8,1147,6.979,1159,3.483,1160,4.099,1161,3.483,1167,3.483,1168,3.483,1186,1.452,1187,2.625,1197,3.483,1198,3.483,1199,3.147,1201,2.53,1214,4.941,1215,3.147,1220,3.3,1232,4.662,1233,3.3,1234,3.016,1235,3.3,1236,1.648,1237,2.902,1242,3.3,1244,3.483,1255,4.921,1256,3.483,1257,3.483,1258,3.483,1264,3.483,1282,6.043,1323,2.855,1428,3.713,1431,5.68,1432,1.704,1441,7.439,1442,3.483,1443,5.246,1444,2.407,1445,4.662,1446,6.789,1447,6.973,1448,3.713,1449,3.713,1450,3.483,1451,5.246,1452,5.68,1453,4.021,1454,2.241,1455,4.021,1456,6.61,1457,6.61,1458,6.61,1459,6.61,1460,6.541,1461,5.68,1462,4.021,1463,4.021,1464,5.68,1465,4.021,1466,4.021,1467,4.021,1468,1.309,1469,4.021,1470,6.587,1471,4.021,1472,4.021,1473,4.021,1474,5.155,1475,5.706,1476,4.021,1477,4.021,1478,4.021,1479,4.021,1480,4.021,1481,3.483,1482,3.483,1483,5.68,1484,4.021,1485,4.021,1486,3.483,1487,4.021,1488,4.021,1489,4.021,1490,6.61,1491,4.021,1492,4.021,1493,4.021,1494,4.021,1495,4.021,1496,4.021,1497,4.021,1498,4.021,1499,4.021,1500,4.021,1501,4.021,1502,4.021,1503,2.191,1504,3.3,1505,4.021,1506,3.713,1507,4.021,1508,4.021,1509,4.021,1510,4.021,1511,4.021,1512,4.021,1513,2.8,1514,3.483,1515,2.8,1516,3.483,1517,3.483,1518,5.68,1519,3.713,1520,3.3,1521,4.021,1522,4.021,1523,4.021,1524,4.021,1893,0.68]],["title/interfaces/IValueProvider.html",[40,0.003,1065,1.725]],["body/interfaces/IValueProvider.html",[3,0.127,4,0.119,5,0.119,10,0.275,11,0.324,12,1.263,13,1.353,17,0.683,19,0.766,20,0.005,21,0.879,22,0.47,24,0.317,28,0.354,33,1.228,34,0.593,35,1.586,36,1.586,37,1.391,39,0.4,40,0.005,41,0.931,42,1.766,47,1.79,53,1.195,57,1.697,75,0.976,78,0.002,79,0.003,80,0.002,83,1.538,89,1.228,90,1.307,97,1.649,102,0.867,106,0.843,110,0.464,116,0.798,119,0.661,131,2.402,136,0.896,145,1.764,163,0.971,164,1.849,168,1.303,179,1.003,183,1.198,187,0.57,198,1.529,213,2.027,222,1.411,229,0.985,238,2.309,244,0.917,245,0.985,251,2.516,254,1.249,257,1.211,273,1.352,284,1.538,285,1.332,287,1.015,289,1.355,294,0.787,303,2.056,313,1.337,314,1.999,328,0.985,333,1.904,334,1.256,368,0.985,384,0.831,399,1.187,411,1.015,417,1.079,439,1.046,443,1.539,444,1.61,446,1.917,447,1.61,453,1.686,455,2.055,459,1.815,464,1.497,466,1.586,481,2.177,529,1.971,530,1.517,535,1.294,536,1.294,537,1.294,538,1.294,544,1.562,546,1.228,550,1.649,552,1.294,553,1.539,558,1.294,562,1.991,566,1.991,576,1.294,577,1.686,580,1.271,581,2.017,585,1.245,594,1.271,596,1.015,600,1.294,601,1.352,604,1.294,639,0.766,641,1.03,647,2.234,651,1.827,679,1,717,1.562,718,1.963,719,2.017,733,0.867,734,1.168,748,1.508,750,1,752,1.963,755,2.107,758,1.131,766,1.046,774,1.279,780,1.149,787,1.79,795,0.985,800,1.529,802,2.591,811,1.079,825,1.271,830,1.271,892,1.187,934,1.207,948,1.603,972,1.713,1007,1.113,1060,1.228,1061,1.294,1062,1.294,1063,1.294,1065,2.492,1067,0.971,1069,1.03,1186,2.204,1201,2.345,1218,1.228,1219,1.228,1236,2.227,1247,1.249,1267,1.168,1269,1.797,1323,2.055,1330,1.586,1432,1.228,1444,2.587,1468,1.452,1613,2.345,1634,1.228,1693,1.271,1737,1.294,1750,1.207,1781,1.294,1801,2.156,1893,0.49,1894,1.271,1895,1.317,1896,1.991,1897,1.827,1898,1.562,1899,1.294,1900,1.271,1901,1.294,1902,1.062,1903,0.957,1904,1.046,1905,2.427,1906,1.271,1907,1.249,1908,2.427,1909,1.317,1910,1.271,1911,1.271,1912,1.131,1913,1.294,1914,1.294,1915,1.768,1916,1.969,1917,1.149,1918,1.8,1919,3.199,1920,1.317,1921,1.89,1922,1.168,1923,2.427,1924,1.317,1925,2.027,1926,1.991,1927,1.991,1928,1.317,1929,1.991,1930,2.343,1931,1.89,1932,1.317,1933,1.113,1934,1.317,1935,1.228,1936,1.228,1937,1.876,1938,1.187,1939,1.317,1940,1.317,1941,0.985,1942,1.317,1943,1.271,1944,1.922,1945,1.991,1946,1.294,1947,1.991,1948,1.317,1949,1.271,1950,1.317,1951,2.552,1952,1.317,1953,1.294,1954,1.317,1955,1.991,1956,1.271,1957,1.131,1958,1.294,1959,1.294,1960,1.317,1961,1.317,1962,2.027,1963,1.317,1964,1.317,1965,1.294,1966,2.027,1967,1.317,1968,1.294,1969,1.249,1970,1.317,1971,1.317,1972,1.635,1973,1.294,1974,1.963,1975,1.317,1976,1.294,1977,1.294,1978,1.317,1979,1.317,1980,1.317,1981,1.294,1982,1.317,1983,1.113,1984,1.207,1985,1.294,1986,1.317,1987,1.317,1988,1.317,1989,1.317,1990,1.271,1991,1.294,1992,1.271,1993,1.271,1994,1.317,1995,2.027,1996,2.726,1997,1.317,1998,1.294,1999,1.317,2000,1.317,2001,1.317,2002,1.317,2003,1.317,2004,1.66,2005,1.079,2006,1.317,2007,1.317,2008,1.89,2009,1.271,2010,1.372,2011,1.271,2012,1.317,2013,1.317,2014,1.89,2015,2.027,2016,1.317,2017,1.317,2018,2.265,2019,1.922,2020,2.265,2021,1.294,2022,1.271,2023,1.046,2024,1.294,2025,1.271,2026,1.249,2027,1.062,2028,2.027,2029,2.382,2889,3.234,2890,2.51,2891,3.234]],["title/interfaces/IValueThicknessAccessors.html",[40,0.003,2301,3.422]],["body/interfaces/IValueThicknessAccessors.html",[0,0.115,3,0.278,4,0.261,5,0.261,7,2.74,8,1.529,10,0.287,11,0.557,12,1.077,13,1.192,14,1.726,20,0.005,24,0.325,28,0.278,33,2.574,34,1.571,35,3.115,36,2.728,37,2.57,38,1.901,39,0.389,40,0.005,41,1.107,52,1.774,53,1.703,78,0.004,79,0.004,80,0.004,110,0.89,204,4.029,209,4.821,210,5.224,216,2.999,217,2.999,218,3.754,331,4.379,1883,4.587,1885,4.587,1887,4.587,1889,4.587,1890,4.768,1893,1.075,2299,4.975,2300,4.768,2301,5.755,2302,4.768]],["title/interfaces/IXYDataAccessors.html",[40,0.003,2265,3.422]],["body/interfaces/IXYDataAccessors.html",[0,0.113,3,0.274,4,0.258,5,0.258,7,2.707,8,1.51,10,0.283,11,0.553,12,1.069,17,0.962,20,0.005,24,0.323,28,0.274,33,2.512,34,1.559,38,1.878,39,0.333,40,0.005,42,2.406,47,2.439,57,1.856,60,4.71,62,4.71,75,1.218,78,0.004,79,0.004,80,0.004,94,1.251,109,1.531,110,0.886,136,0.792,164,1.551,220,3.768,245,2.898,651,2.573,787,2.068,790,3.734,1164,3.5,1877,5.798,1893,1.062,1974,2.749,2162,2.515,2179,5.115,2225,3.768,2265,6.148,2266,4.71,2269,4.972,2270,4.972,2822,4.372,2892,7.615,2893,8.521,2894,5.798]],["title/interfaces/IXYGridConfig.html",[40,0.003,2072,2.668]],["body/interfaces/IXYGridConfig.html",[0,0.052,3,0.126,4,0.119,5,0.119,10,0.13,11,0.323,20,0.005,21,0.365,24,0.279,28,0.327,39,0.358,40,0.005,41,0.675,52,1.243,75,0.463,78,0.002,79,0.002,80,0.002,83,2.503,85,0.524,89,1.679,90,0.702,95,3.588,100,3.4,101,3.509,102,1.332,103,3.552,104,1.576,105,1.576,106,1.58,108,3.989,110,0.778,111,2.589,112,1.79,114,3.124,115,2.898,116,1.995,124,2.893,126,1.146,135,3.779,136,0.634,139,3.92,142,1.876,145,1.898,148,2.672,154,1.633,155,2.483,157,1.612,158,2.673,159,1.783,160,3.411,161,1.783,162,1.783,163,2.044,165,1.783,168,1.375,170,2.673,171,2.605,172,1.736,179,1.937,182,2.991,183,0.418,184,2.426,185,3.568,186,2.605,198,1.922,218,1.269,257,2.272,258,2.274,285,0.584,289,1.354,301,1.694,313,1.772,314,2.198,321,0.956,334,1.674,384,1.995,404,3.18,446,0.841,459,0.796,464,1.226,493,1.795,494,2.184,529,1.624,530,1.847,534,1.651,544,2.835,550,2.454,553,1.874,557,3.627,585,0.807,595,1.651,596,1.56,597,2.958,598,1.736,601,0.877,602,1.147,603,1.692,632,2.142,639,2.166,641,1.933,647,1.429,652,1.541,679,1.537,717,2.621,718,1.961,719,1.471,723,2.542,733,0.865,748,1.342,750,1.537,767,1.576,779,3.25,783,2.824,784,1.447,785,2.262,800,0.724,813,1.692,821,3.568,837,2.832,945,3.345,1023,2.483,1067,2.044,1146,1.783,1163,1.692,1178,3.7,1203,1.736,1330,1.584,1371,1.887,1454,3.4,1545,2.745,1546,3.76,1547,1.736,1548,1.783,1549,1.783,1555,1.783,1559,1.783,1563,1.783,1567,1.783,1640,1.783,1642,1.783,1643,1.783,1644,1.736,1647,5.589,1649,1.269,1654,2.605,1663,1.736,1670,1.736,1676,2.745,1680,1.783,1685,2.717,1686,1.576,1689,1.692,1690,1.736,1695,1.736,1696,2.605,1701,2.893,1704,1.692,1705,2.663,1769,2.745,1770,1.783,1860,2.605,1861,2.673,1862,2.673,1863,2.673,1864,2.673,1865,3.661,1866,2.426,1867,2.673,1893,0.489,1898,2.437,1916,1.656,1918,0.853,1951,1.633,1972,1.06,2010,2.301,2023,1.608,2030,1.783,2031,4.175,2032,2.373,2033,4.288,2034,1.834,2035,2.823,2036,2.773,2037,3.82,2038,2.483,2039,1.834,2040,1.541,2041,3.97,2042,3.167,2043,3.76,2044,3.114,2045,2.745,2046,4.916,2047,2.823,2048,3.867,2049,2.745,2050,1.834,2051,1.418,2052,1.783,2053,2.745,2054,1.783,2055,1.783,2056,2.673,2057,1.783,2058,1.783,2059,2.832,2060,2.824,2061,1.783,2062,1.736,2063,1.834,2064,1.783,2065,1.783,2066,1.783,2067,1.834,2068,1.834,2069,1.692,2070,1.541,2071,1.834,2072,3.568,2073,2.823,2074,2.373,2075,2.823,2076,2.673,2077,2.823,2078,2.823,2079,2.373,2080,2.373,2081,1.834,2082,1.783,2083,1.736,2084,1.834,2085,1.834]],["title/interfaces/IXYScales.html",[40,0.003,326,2.978]],["body/interfaces/IXYScales.html",[3,0.189,4,0.178,5,0.178,10,0.333,11,0.435,12,0.84,13,0.673,20,0.005,24,0.329,28,0.262,34,0.887,39,0.389,40,0.005,41,0.965,42,1.981,47,2.008,75,1.096,78,0.002,79,0.003,80,0.002,95,1.805,97,1.815,110,0.855,112,1.479,119,1.563,126,1.54,128,2.125,134,2.412,136,0.835,142,1.841,145,1.885,168,1.354,179,1.805,182,2.125,183,0.626,187,0.852,196,1.479,226,2.006,229,2.035,231,1.815,249,3.794,284,2.461,285,0.875,289,1.781,313,0.949,326,3.907,334,1.854,336,1.411,337,2.044,368,2.035,379,3.907,441,2.747,581,1.977,649,3.127,771,1.934,773,2.6,774,1.243,783,2.771,785,2.493,787,1.177,789,4.122,811,2.228,852,3.127,895,3.914,1468,1.411,1503,2.36,1513,4.167,1617,2.829,1666,3.592,1668,2.918,1685,2.167,1705,2.935,1801,1.718,1893,0.733,1912,1.691,1915,2.373,1916,2.362,1941,3.09,2004,2.228,2027,2.194,2037,3.056,2040,3.189,2042,2.084,2059,2.259,2060,2.006,2079,2.308,2080,2.308,2112,3.501,2148,4.167,2149,3.017,2150,4.36,2151,3.25,2153,4.618,2154,3.017,2155,3.017,2156,3.127,2157,3.127,2158,3.127,2159,4.346,2160,4.54,2161,3.794,2162,1.431,2163,3.127,2164,2.918,2165,3.017,2166,3.25,2167,3.25,2168,5.821,2169,3.907,2170,6.416,2171,2.829,2172,3.25,2173,4.489,2174,4.167,2175,2.671,2176,2.829,2177,2.829,2178,4.828,2179,4.816,2180,4.489,2181,2.918,2182,2.918,2183,4.816,2184,2.829,2185,2.829,2186,3.25,2187,3.25,2188,3.127,2189,2.829,2190,4.828,2191,3.25,2192,5.067,2193,2.829,2194,3.25,2195,3.25,2196,4.319,2197,3.25,2198,3.25,2199,3.25]],["title/interfaces/IZoneCrossPoint.html",[40,0.003,2009,2.001]],["body/interfaces/IZoneCrossPoint.html",[3,0.127,4,0.119,5,0.119,10,0.275,11,0.443,12,1.265,13,1.359,20,0.005,21,0.832,22,0.723,24,0.317,28,0.354,33,1.227,34,0.593,35,1.584,36,1.584,37,1.39,39,0.399,40,0.005,41,0.954,42,1.765,47,1.789,53,1.194,57,1.696,75,0.869,78,0.002,79,0.002,80,0.002,83,1.537,85,0.525,89,1.227,90,1.306,97,1.647,102,0.866,106,0.842,110,0.463,116,0.797,119,0.66,131,2.402,136,0.884,145,1.821,163,0.97,164,1.849,168,1.303,183,1.185,187,0.569,198,1.528,213,2.026,222,1.41,229,0.984,238,2.308,244,0.916,245,0.984,251,2.598,254,1.248,257,1.21,284,1.537,285,1.331,287,1.014,289,1.354,294,0.786,303,2.055,313,1.336,314,1.998,328,0.984,333,1.903,334,1.255,368,0.984,384,0.83,399,1.186,411,1.014,417,1.077,439,1.045,443,1.538,444,1.609,446,1.916,447,1.609,453,1.685,455,2.054,459,1.814,464,1.496,466,1.584,481,2.176,529,1.97,530,1.515,535,1.292,536,1.292,537,1.292,538,1.292,544,1.561,546,1.226,550,1.647,552,1.292,553,1.538,558,1.292,562,1.989,566,1.989,576,1.292,577,1.685,580,1.27,581,2.015,585,1.244,594,1.27,596,1.014,600,1.292,601,1.351,604,1.292,639,0.765,641,1.029,647,2.233,651,1.826,679,0.999,717,1.561,718,1.961,719,2.015,733,0.866,734,1.167,748,1.507,750,0.999,752,1.961,755,2.106,758,1.129,766,1.045,774,1.278,780,1.148,787,1.789,795,0.984,800,1.528,802,2.59,811,1.077,825,1.27,830,1.27,892,1.186,934,1.206,948,1.602,972,1.711,1007,1.112,1060,1.226,1061,1.292,1062,1.292,1063,1.292,1065,2.307,1067,0.97,1069,1.029,1186,2.203,1201,2.343,1218,1.226,1219,1.226,1236,2.226,1247,1.248,1267,1.167,1269,1.796,1323,2.307,1330,1.584,1432,1.888,1444,2.585,1468,1.451,1613,2.672,1634,1.226,1693,1.27,1737,1.292,1750,1.206,1781,1.292,1801,2.154,1893,0.49,1894,1.27,1895,1.316,1896,1.989,1897,1.826,1898,1.561,1899,1.292,1900,1.27,1901,1.292,1902,1.061,1903,0.956,1904,1.045,1905,2.426,1906,1.27,1907,1.248,1908,2.426,1909,1.316,1910,1.27,1911,1.27,1912,1.129,1913,1.292,1914,1.292,1915,1.767,1916,1.89,1917,1.148,1918,1.799,1919,3.265,1920,1.316,1921,1.888,1922,1.167,1923,2.426,1924,1.316,1925,2.026,1926,1.989,1927,1.989,1928,1.316,1929,1.989,1930,2.342,1931,1.888,1932,1.316,1933,1.112,1934,1.316,1935,1.226,1936,1.226,1937,1.875,1938,1.186,1939,1.316,1940,1.316,1941,0.984,1942,1.316,1943,1.27,1944,1.921,1945,1.989,1946,1.292,1947,1.989,1948,1.316,1949,1.27,1950,1.316,1951,2.551,1952,1.316,1953,1.292,1954,1.316,1955,1.989,1956,1.27,1957,1.129,1958,1.292,1959,1.292,1960,1.316,1961,1.316,1962,2.026,1963,1.316,1964,1.316,1965,1.292,1966,2.026,1967,1.316,1968,1.292,1969,1.248,1970,1.316,1971,1.316,1972,1.633,1973,1.292,1974,1.961,1975,1.316,1976,1.292,1977,1.292,1978,1.316,1979,1.316,1980,1.316,1981,1.292,1982,1.316,1983,1.112,1984,1.206,1985,1.292,1986,1.316,1987,1.316,1988,1.316,1989,1.316,1990,1.27,1991,1.292,1992,1.27,1993,1.27,1994,1.316,1995,2.026,1996,2.724,1997,1.316,1998,1.292,1999,1.316,2000,1.316,2001,1.316,2002,1.316,2003,1.316,2004,1.659,2005,1.077,2006,2.026,2007,2.026,2008,2.585,2009,1.954,2010,1.671,2011,1.954,2012,2.774,2013,1.316,2014,1.888,2015,2.026,2016,1.316,2017,1.316,2018,2.263,2019,1.921,2020,2.263,2021,1.292,2022,1.27,2023,1.045,2024,1.292,2025,1.27,2026,1.248,2027,1.061,2028,1.316,2029,1.129]],["title/interfaces/IZoomPluginConfiguration.html",[40,0.003,2895,4.212]],["body/interfaces/IZoomPluginConfiguration.html",[0,0.077,3,0.187,4,0.175,5,0.175,10,0.192,11,0.43,12,1.084,20,0.005,21,0.539,22,0.96,24,0.181,28,0.39,39,0.259,40,0.002,41,0.531,55,2.497,75,0.947,78,0.003,79,0.003,80,0.002,83,2.079,89,1.873,90,0.934,94,1.538,96,2.693,97,1.294,103,2.179,106,1.723,112,1.054,114,1.84,119,1.35,126,1.524,132,2.786,142,1.822,145,1.53,148,1.639,149,2.179,168,1.224,183,0.983,187,0.839,196,2.024,198,1.069,226,2.742,231,2.533,258,3.473,301,1.848,313,1.49,314,2.228,319,3.08,320,3.08,321,1.41,324,2.093,332,2.379,336,1.928,347,3.502,436,2.562,443,2.044,444,1.541,447,1.541,459,1.631,466,2.106,481,1.956,529,1.276,550,2.063,588,2.562,589,2.562,592,2.875,601,1.796,602,1.692,620,3.941,641,0.986,647,1.37,648,3.941,678,2.497,714,3.941,717,2.075,766,1.541,800,1.84,803,2.706,838,2.786,895,2.436,948,1.259,1023,2.379,1136,2.972,1137,2.972,1170,2.631,1186,1.541,1187,2.786,1195,2.972,1196,2.972,1209,2.786,1210,2.972,1267,2.387,1371,1.808,1468,1.39,1474,3.34,1517,3.697,1654,2.497,1683,3.201,1684,3.08,1686,2.325,1696,2.497,1735,3.941,1750,1.778,1798,5.469,1809,4.529,1819,3.697,1866,2.325,1893,0.722,1918,1.747,1930,1.84,2026,2.553,2036,2.179,2041,2.436,2051,2.093,2062,2.562,2074,2.274,2111,2.786,2150,2.904,2243,3.201,2244,4.443,2475,3.941,2504,3.941,2752,3.697,2792,5.131,2819,3.201,2895,6.785,2896,4.268,2897,7.718,2898,5.922,2899,5.922,2900,5.922,2901,8.586,2902,3.941,2903,3.941,2904,4.268,2905,3.502,2906,3.941,2907,4.268,2908,4.268,2909,4.268,2910,4.268,2911,4.268,2912,4.268,2913,4.268,2914,4.268,2915,4.268,2916,3.697,2917,5.892,2918,4.268,2919,4.268,2920,4.268,2921,4.268,2922,4.268,2923,4.268,2924,4.268,2925,4.268,2926,4.268,2927,4.268,2928,4.268,2929,3.697,2930,4.268,2931,4.268,2932,4.268,2933,4.268,2934,3.941,2935,4.268,2936,4.268,2937,4.268,2938,4.268,2939,4.268,2940,4.268,2941,4.268,2942,4.268,2943,4.268,2944,7.127,2945,4.268,2946,4.268,2947,4.268,2948,4.268,2949,4.268,2950,4.268,2951,4.268,2952,5.922,2953,4.268,2954,4.268,2955,4.268,2956,4.268,2957,4.268,2958,3.941,2959,4.268,2960,4.268,2961,4.268,2962,4.268,2963,4.268,2964,4.268,2965,4.268,2966,4.268,2967,4.268,2968,4.268,2969,4.268,2970,3.941,2971,4.443,2972,3.941,2973,4.268,2974,4.268,2975,4.268,2976,4.268,2977,4.268,2978,6.802,2979,5.922,2980,7.347,2981,4.268,2982,5.922,2983,6.365,2984,5.922,2985,4.268,2986,5.469,2987,4.268,2988,5.922,2989,6.802,2990,5.922,2991,4.268,2992,4.268,2993,4.268,2994,4.268,2995,4.268,2996,4.268,2997,4.268,2998,4.268,2999,3.941,3000,4.268,3001,4.268,3002,4.268]],["title/classes/InteractionLabelPlugin.html",[0,0.082,2345,3.951]],["body/classes/InteractionLabelPlugin.html",[0,0.105,2,1.122,3,0.181,4,0.169,5,0.169,10,0.186,11,0.421,14,1.122,17,1.333,19,1.092,20,0.005,21,0.731,22,0.67,24,0.283,28,0.383,39,0.181,41,0.831,42,1.941,47,1.122,54,1.665,55,2.218,78,0.002,79,0.003,80,0.002,83,1.891,85,0.749,90,0.913,94,1.807,95,2.412,96,3.039,109,1.411,110,0.822,112,1.651,117,3.532,126,1.489,131,1.326,136,0.695,142,1.781,149,2.109,151,3.552,160,2.839,168,0.887,171,3.387,179,1.778,183,1.198,184,2.25,187,0.812,196,1.651,226,1.913,231,2.719,258,2.956,273,1.756,289,0.917,301,1.806,317,3.578,318,3.578,321,1.365,324,2.026,329,3.099,336,1.345,404,2.154,436,2.479,443,2.859,444,2.931,446,1.944,447,2.413,464,1.137,466,2.994,467,2.876,476,2.876,477,2.876,478,2.876,479,2.876,481,1.365,550,2.313,588,2.479,589,2.479,592,2.782,601,2.027,602,1.638,612,3.085,638,3.233,639,1.53,641,0.954,687,3.227,748,1.79,774,1.185,788,4.178,789,2.303,890,3.233,892,1.693,934,1.721,948,1.707,963,4.131,1136,2.876,1137,2.876,1147,3.578,1181,3.815,1186,1.491,1187,2.697,1214,4.343,1267,1.665,1440,4.131,1454,3.726,1474,4.531,1475,5.79,1481,3.578,1482,3.578,1486,5.79,1514,3.578,1634,1.75,1683,3.099,1684,2.981,1686,2.25,1687,3.815,1692,3.815,1705,2.026,1706,4.131,1750,1.721,1819,5.79,2038,2.303,2057,3.569,2060,4.029,2064,2.546,2150,2.839,2241,3.099,2242,4.343,2269,2.697,2305,3.233,2345,5.79,2473,5.346,2487,3.815,2489,4.131,2490,3.815,2498,5.789,2546,3.815,2905,3.39,2916,5.79,2929,3.578,3003,7.905,3004,6.462,3005,5.789,3006,7.46,3007,4.611,3008,4.611,3009,4.611,3010,4.131,3011,3.578,3012,4.131,3013,4.611,3014,4.611,3015,4.131,3016,4.611,3017,4.611,3018,4.131,3019,6.462,3020,4.611,3021,4.131,3022,5.789,3023,3.815,3024,6.462,3025,4.611,3026,4.131,3027,4.611,3028,4.131,3029,4.131,3030,4.131,3031,4.131,3032,5.346,3033,4.131,3034,4.131,3035,4.611,3036,4.611,3037,4.611,3038,4.611,3039,4.611,3040,7.46,3041,4.611,3042,4.611,3043,4.611,3044,4.611,3045,4.611,3046,4.611,3047,6.462,3048,4.611,3049,4.611,3050,4.611,3051,4.611,3052,4.611,3053,4.611,3054,4.611,3055,4.611,3056,4.131,3057,6.462,3058,4.611,3059,7.46,3060,4.611,3061,4.611,3062,4.131,3063,4.611,3064,6.462,3065,8.513,3066,4.611,3067,6.462,3068,4.611,3069,4.611,3070,4.611,3071,4.611,3072,4.611,3073,4.611,3074,4.611,3075,4.611,3076,4.611,3077,4.131,3078,4.611,3079,4.611,3080,4.611,3081,4.611]],["title/classes/InteractionLinePlugin.html",[0,0.082,2347,3.951]],["body/classes/InteractionLinePlugin.html",[0,0.131,2,1.31,3,0.211,4,0.198,5,0.198,10,0.217,11,0.468,12,0.677,17,1.333,20,0.005,21,0.609,24,0.273,28,0.384,39,0.211,41,0.901,42,1.725,44,3.776,49,3.776,55,2.41,57,1.176,78,0.003,79,0.004,80,0.003,83,1.822,85,0.874,90,1.015,94,1.821,95,2.682,96,3.294,109,1.176,110,0.754,112,1.591,117,3.73,119,1.1,126,1.241,136,0.502,142,1.484,154,3.222,179,1.864,183,1.242,187,0.949,196,1.192,226,2.234,231,2.606,258,3.287,273,1.952,289,1.071,301,2.008,321,1.594,324,2.366,436,2.895,443,2.966,444,3.054,446,2.108,447,2.616,464,1.328,466,3.095,467,3.359,476,3.359,477,3.359,478,3.359,479,3.359,481,1.594,550,2.197,588,2.895,589,2.895,592,3.25,601,2.197,602,1.913,612,2.57,638,3.776,748,1.99,774,1.384,890,3.776,892,1.977,934,2.01,948,1.899,1136,3.359,1137,3.359,1186,1.742,1187,3.15,1214,4.829,1267,1.944,1454,3.589,1474,5.039,1475,6.277,1481,4.179,1482,4.179,1634,2.044,1683,3.619,1684,3.481,1686,2.628,1750,2.01,1835,4.824,1839,4.824,2150,3.157,2241,3.619,2242,4.829,2347,6.277,2473,7.139,2487,4.455,2905,3.959,2916,6.277,2929,4.179,3003,7.731,3005,6.438,3011,4.179,3012,4.824,3015,4.824,3018,4.824,3021,4.824,3022,6.438,3023,4.455,3026,4.824,3028,4.824,3029,4.824,3030,4.824,3031,4.824,3032,5.945,3033,4.824,3034,4.824,3082,7.186,3083,5.384,3084,5.384,3085,5.384,3086,5.384,3087,5.384,3088,5.384,3089,7.186,3090,5.384,3091,5.384,3092,5.384,3093,5.384,3094,5.384,3095,8.087,3096,5.384,3097,5.384,3098,4.455,3099,5.384,3100,5.384,3101,5.384,3102,5.384,3103,5.384,3104,5.384]],["title/components/LegendComponent.html",[482,2.237,518,2.812]],["body/components/LegendComponent.html",[0,0.118,3,0.215,4,0.202,5,0.202,8,1.57,10,0.222,11,0.474,13,1.392,17,1.303,20,0.005,21,0.925,24,0.33,28,0.285,39,0.215,52,1.822,57,1.201,78,0.003,79,0.004,80,0.003,90,1.278,94,1.773,106,2.359,109,1.9,110,0.811,112,1.613,136,0.867,142,2.398,154,1.806,183,0.712,187,0.969,441,5.141,482,3.201,483,3.036,484,4.138,487,4.449,489,3.123,490,6.028,491,6.028,492,5.552,493,3.609,494,2.415,495,3.318,498,4.397,500,4.267,501,2.882,502,4.942,503,3.318,504,3.318,505,2.956,506,3.318,507,3.036,508,2.812,509,3.318,510,3.036,511,3.318,512,2.882,513,3.318,514,3.036,515,3.318,516,2.812,517,3.318,518,4.805,519,3.318,520,3.036,521,3.318,522,3.036,523,3.318,524,3.123,525,2.956,526,3.216,527,3.318,736,7.22,752,2.814,828,3.556,834,4.853,836,3.695,837,2.568,838,3.216,867,5.492,868,5.492,884,4.897,901,3.695,920,3.695,1125,7.489,1149,5.655,2023,2.357,2060,3.023,2141,5.804,2823,6.136,3105,5.498,3106,7.286,3107,8.172,3108,8.172,3109,8.172,3110,8.172,3111,5.498,3112,5.498,3113,8.823,3114,6.527,3115,6.527,3116,6.761,3117,7.286,3118,5.498,3119,5.498,3120,9.303,3121,5.498,3122,6.527,3123,5.498,3124,6.527,3125,5.498,3126,7.286,3127,7.286,3128,5.498,3129,5.498,3130,5.498,3131,5.498,3132,5.498]],["title/classes/LegendInteractionAssist.html",[0,0.082,3133,4.561]],["body/classes/LegendInteractionAssist.html",[0,0.09,2,0.689,3,0.111,4,0.104,5,0.104,8,0.61,10,0.181,11,0.292,12,1.155,13,1.309,14,0.689,17,1.129,19,1.74,20,0.005,21,0.904,22,1.068,24,0.32,28,0.337,30,2.548,32,1.322,34,0.519,39,0.176,54,1.022,55,2.279,59,3.707,75,0.643,78,0.001,79,0.002,80,0.001,85,0.728,86,2.197,90,1.254,94,1.81,96,1.153,109,0.98,110,0.785,112,1.627,119,1.295,126,1.284,131,0.814,136,0.908,142,0.78,145,1.658,154,0.93,163,2.665,168,0.616,179,1.658,183,1.226,187,0.499,196,2.051,226,2.629,231,2.601,238,2.507,244,2.083,245,1.931,251,2.214,270,1.83,273,1.219,283,3.508,284,1.607,285,1.147,287,1.989,294,0.689,301,1.557,321,0.838,324,1.244,333,2.645,334,1.901,336,1.625,341,2.342,360,2.342,379,1.656,380,2.197,394,3.077,395,1.902,396,1.83,399,1.039,400,3.298,411,2.168,439,0.916,446,1.169,453,0.959,459,0.698,463,2.081,464,1.106,487,2.01,530,1.367,577,1.887,580,1.763,581,2.045,583,4.609,585,0.708,586,1.708,588,1.522,589,1.522,590,2.197,595,1.448,596,0.888,601,1.219,602,1.006,647,0.814,674,1.83,723,1.448,736,3.481,745,1.902,746,5.448,749,4.098,752,2.05,758,3.179,766,0.916,768,4.844,774,1.629,778,2.9,781,1.902,782,1.902,785,2.743,786,3.825,787,2.001,788,4.467,789,3.165,791,1.902,793,4.259,794,1.902,796,1.902,797,3.014,798,3.014,799,4.259,800,0.635,801,3.014,802,1.858,803,1.608,806,2.412,807,4.259,815,1.414,821,2.92,836,1.902,837,1.322,838,1.656,840,2.197,854,1.448,945,1.933,949,4.019,1007,0.974,1060,1.703,1065,1.519,1160,2.9,1164,1.414,1186,0.916,1187,2.624,1199,1.985,1201,1.544,1202,2.342,1214,1.902,1215,1.985,1218,1.703,1236,2.327,1270,2.707,1306,2.342,1384,2.342,1386,3.481,1468,1.849,1520,3.298,1653,5.678,1666,2.996,1903,0.838,1949,1.112,1990,1.112,1991,1.132,1996,1.132,2041,1.448,2058,1.563,2060,3.195,2069,3.322,2140,2.9,2363,2.081,2625,2.536,2786,2.536,3133,5.678,3134,8.426,3135,2.536,3136,6.338,3137,6.338,3138,4.485,3139,6.338,3140,4.485,3141,4.485,3142,2.831,3143,7.369,3144,4.485,3145,4.485,3146,2.831,3147,2.831,3148,5.571,3149,2.831,3150,2.831,3151,4.485,3152,2.831,3153,6.338,3154,4.485,3155,2.831,3156,2.831,3157,2.831,3158,2.831,3159,4.485,3160,2.831,3161,3.711,3162,4.485,3163,2.831,3164,4.485,3165,2.831,3166,2.342,3167,2.831,3168,2.197,3169,2.831,3170,4.485,3171,4.485,3172,3.711,3173,4.485,3174,6.908,3175,4.485,3176,4.485,3177,2.831,3178,4.485,3179,3.711,3180,2.831,3181,2.831,3182,2.536,3183,2.831,3184,2.831,3185,4.485,3186,2.536,3187,2.831,3188,2.831,3189,2.831,3190,2.831,3191,2.831,3192,5.571,3193,2.536,3194,2.831,3195,2.831,3196,2.831,3197,2.831,3198,2.831,3199,4.485,3200,2.831,3201,4.485,3202,4.485,3203,4.485,3204,2.831,3205,2.831,3206,2.831,3207,2.831,3208,3.711,3209,4.019,3210,2.831,3211,2.831,3212,4.485,3213,2.831,3214,4.485,3215,2.831,3216,2.831,3217,2.831,3218,5.571,3219,2.831,3220,2.831,3221,2.831,3222,2.831,3223,2.831,3224,2.831,3225,2.831,3226,2.831,3227,2.831,3228,4.485,3229,2.831,3230,2.831,3231,2.831,3232,2.831,3233,2.831,3234,2.831,3235,4.485,3236,2.831,3237,2.831,3238,2.831,3239,5.571,3240,2.831,3241,2.831,3242,5.571,3243,2.831,3244,2.831,3245,2.536,3246,2.831,3247,2.831,3248,2.831,3249,2.831,3250,2.831,3251,2.831,3252,2.831,3253,4.485,3254,2.536,3255,2.536,3256,2.831,3257,2.831,3258,4.485,3259,4.485,3260,2.536,3261,2.831,3262,2.831,3263,2.831,3264,2.831,3265,4.485,3266,5.571,3267,2.831,3268,4.485,3269,2.831,3270,2.831,3271,2.831,3272,2.831,3273,2.831,3274,2.831,3275,2.342,3276,4.485,3277,2.831,3278,2.831,3279,2.831,3280,2.831,3281,2.831,3282,2.831,3283,2.831,3284,2.831,3285,2.831,3286,2.536,3287,2.831,3288,2.831,3289,2.831,3290,2.831,3291,2.831,3292,2.831,3293,2.831,3294,2.831,3295,5.571,3296,2.831,3297,2.831,3298,2.831,3299,2.831,3300,2.831,3301,4.485,3302,2.831,3303,2.831,3304,2.831,3305,2.831,3306,2.831,3307,5.571,3308,2.831,3309,6.908,3310,4.485,3311,2.831,3312,5.571,3313,2.831,3314,2.831,3315,2.831,3316,4.485,3317,2.831,3318,6.338,3319,2.831,3320,2.831,3321,4.485,3322,4.485,3323,2.536,3324,2.831,3325,4.485,3326,2.831,3327,2.831,3328,2.831,3329,2.831,3330,4.485,3331,4.485,3332,2.831]],["title/components/LegendSeriesComponent.html",[482,2.237,520,2.812]],["body/components/LegendSeriesComponent.html",[0,0.093,3,0.152,4,0.143,5,0.143,8,1.232,10,0.157,13,1.424,14,0.946,17,1.366,19,1.771,20,0.005,21,0.974,22,1.158,24,0.348,28,0.312,39,0.224,52,1.992,55,2.076,78,0.002,79,0.003,80,0.002,85,1.489,90,1.125,94,1.784,106,2.573,109,1.249,110,0.776,112,1.906,119,0.794,126,1.318,131,1.118,136,0.823,142,2.06,145,2.026,154,1.277,164,1.266,179,1.817,183,1.032,187,0.685,196,1.844,198,1.787,231,1.057,273,1.554,333,2.328,334,1.184,394,2.148,404,1.817,417,2.872,421,5.123,459,1.844,482,2.512,483,2.148,484,3.248,485,8.266,487,4.258,489,2.209,492,5.246,493,3.43,494,1.709,495,2.347,498,3.451,500,3.018,501,2.038,502,4.247,503,2.347,504,2.347,505,2.091,506,2.347,507,2.148,508,1.989,509,2.347,510,2.148,511,2.347,512,2.038,513,2.347,514,2.148,515,2.347,516,1.989,517,2.347,518,4.4,519,2.347,520,4.129,521,2.347,522,2.148,523,2.347,524,2.209,525,2.091,526,2.275,527,2.347,647,1.95,752,2.194,766,1.258,783,2.372,784,1.743,806,2.091,828,2.791,834,4.612,836,2.614,837,1.817,838,2.275,866,5.611,875,4.01,909,3.218,1017,3.218,1119,5.123,1125,5.611,1131,5.123,1149,5.803,1177,5.803,1178,3.811,1280,5.123,1281,5.123,1289,3.484,1684,2.515,1921,3.025,2010,2.296,2037,3.811,2823,6.142,3114,8.214,3115,6.076,3116,3.218,3122,7.138,3333,8.266,3334,3.889,3335,5.718,3336,7.477,3337,7.477,3338,7.477,3339,7.477,3340,6.782,3341,7.967,3342,7.967,3343,5.718,3344,5.718,3345,5.718,3346,3.889,3347,3.889,3348,5.718,3349,3.889,3350,3.889,3351,7.477,3352,3.889,3353,7.477,3354,3.889,3355,5.718,3356,3.889,3357,7.477,3358,5.718,3359,3.889,3360,3.889,3361,3.889,3362,3.889,3363,3.889,3364,3.889,3365,3.889,3366,5.718,3367,3.889,3368,3.889,3369,3.889,3370,3.889,3371,3.889,3372,3.889,3373,3.889,3374,3.889,3375,3.889,3376,3.889,3377,3.484,3378,5.718,3379,3.889,3380,7.477,3381,3.889,3382,6.782,3383,3.889,3384,5.718,3385,3.889,3386,3.889,3387,5.718,3388,3.889,3389,3.889,3390,3.889,3391,3.889,3392,3.889,3393,3.889,3394,3.889,3395,3.889,3396,3.889,3397,3.484,3398,3.889,3399,5.718,3400,3.889,3401,3.889,3402,3.889,3403,3.889,3404,3.889,3405,3.889,3406,3.889,3407,3.889,3408,3.889,3409,3.889,3410,3.889,3411,3.889,3412,3.889]],["title/classes/LineAccessors.html",[0,0.082,2268,3.57]],["body/classes/LineAccessors.html",[0,0.148,2,1.369,3,0.22,4,0.207,5,0.207,7,2.173,8,1.594,10,0.227,11,0.609,12,1.268,13,1.377,14,2.011,15,3.946,16,5.038,17,1.31,19,1.333,20,0.005,21,0.935,22,0.818,23,4.286,24,0.314,28,0.324,29,3.878,30,4.202,31,2.949,32,2.629,33,1.825,34,1.357,37,2.454,38,1.508,39,0.344,40,0.004,41,0.978,42,1.351,47,1.369,52,2.281,53,1.984,54,2.032,55,1.466,57,1.805,60,3.782,62,3.782,72,2.574,73,2.949,74,2.949,75,1.184,76,3.292,77,3.292,78,0.003,79,0.004,80,0.003,85,0.914,94,1.73,109,1.918,110,0.524,112,1.638,117,2.335,126,1.297,134,2.672,136,0.524,149,2.574,164,2.073,188,3.695,245,2.254,285,1.019,455,2.506,651,2.066,771,2.96,787,1.369,790,2.472,815,3.695,822,4.616,828,3.611,945,3.188,1069,1.793,1164,4.128,1408,5.901,1893,1.121,1897,2.066,1902,1.848,1903,1.665,1904,1.82,1974,1.82,1983,3.222,2102,4.445,2104,3.978,2162,1.665,2171,4.328,2262,6.815,2263,6.456,2264,6.456,2265,5.555,2266,5.901,2267,4.368,2268,6.396,2269,3.292,2270,3.292,2271,5.742,2272,5.742,2273,5.742,2274,5.188,2275,5.44,2276,5.742,2277,5.742,2278,5.742,2279,5.188,2280,5.44,2281,5.742,2282,5.742,2283,5.44,2284,4.368,2285,4.368,2286,4.368,2822,3.511,2894,4.656,3413,7.399,3414,5.627,3415,5.627]],["title/classes/LineSelectSeriesInteractionStrategy.html",[0,0.082,2128,3.176]],["body/classes/LineSelectSeriesInteractionStrategy.html",[0,0.085,2,1.272,3,0.205,4,0.192,5,0.192,8,1.518,10,0.344,11,0.458,12,1.198,13,1.327,17,1.222,19,1.887,20,0.005,21,0.902,22,1.239,24,0.348,28,0.373,38,1.401,39,0.205,40,0.003,55,1.362,57,1.539,78,0.003,79,0.004,80,0.003,94,1.771,97,2.165,109,1.142,110,0.487,112,1.157,119,1.068,126,1.624,128,3.095,130,2.969,131,1.503,136,0.656,151,2.297,154,2.314,164,1.157,168,1.308,179,1.606,183,1.104,187,0.921,196,1.157,213,2.349,222,2.259,231,2.317,238,2.501,271,4.057,272,4.661,273,1.914,274,4.555,276,4.555,277,4.555,289,1.863,294,1.939,296,4.251,298,5.124,299,4.548,300,4.548,301,2.663,303,2.383,306,4.251,307,3.438,309,4.251,310,4.176,312,5.982,321,1.547,323,5.828,324,2.297,327,2.552,328,1.593,332,2.611,337,2.21,384,1.344,385,4.683,398,6.592,399,3.267,400,5.858,410,4.683,411,2.878,550,1.914,612,2.495,638,3.666,641,1.082,748,1.97,800,1.58,802,1.744,895,2.673,948,1.381,1186,2.879,1201,2.424,1321,4.057,1322,3.844,1668,3.155,1809,2.887,1810,2.887,1811,4.325,1921,1.985,2051,3.095,2102,2.811,2104,5.293,2128,4.395,2569,4.325,2843,5.858,2844,3.844,2970,4.325,3416,8.901,3417,8.901,3418,7.968,3419,5.828,3420,5.228,3421,5.228,3422,5.228,3423,6.311,3424,7.968,3425,5.228,3426,5.228,3427,5.228,3428,5.228,3429,5.228,3430,5.228,3431,5.228,3432,5.228,3433,5.228,3434,5.228,3435,7.044,3436,7.968,3437,4.057,3438,5.228,3439,5.228,3440,5.228,3441,5.228,3442,4.683,3443,5.228,3444,5.228,3445,4.683,3446,5.228,3447,5.228]],["title/classes/LinearScale.html",[0,0.082,2343,4.212]],["body/classes/LinearScale.html",[0,0.079,2,1.185,3,0.191,4,0.179,5,0.179,10,0.197,11,0.437,14,1.185,17,1.41,19,2.321,20,0.005,21,1.109,22,1.424,24,0.381,28,0.263,39,0.191,41,0.748,75,0.697,78,0.002,79,0.003,80,0.002,85,0.791,91,3.518,94,1.882,97,1.824,109,1.466,110,0.809,117,4.21,126,1.122,134,3.135,136,0.771,145,1.99,168,1.401,179,1.99,196,1.922,220,4.826,273,1.824,284,2.605,295,4.451,313,0.955,336,1.42,687,2.431,774,1.974,1905,3.072,1916,2.342,1941,2.933,2150,3.815,2159,4.362,2160,3.518,2161,2.765,2169,3.926,2176,5.38,2177,5.38,2179,3.609,2181,4.635,2182,4.635,2183,5.114,2184,3.926,2185,3.926,2189,2.848,2190,4.492,2192,5.563,2193,3.926,2305,5.804,2306,4.934,2307,5.804,2339,3.58,2343,5.552,3448,8.975,3449,4.028,3450,6.012,3451,5.552,3452,6.012,3453,5.209,3454,4.362,3455,4.362,3456,4.362,3457,4.362,3458,4.362,3459,4.869,3460,4.869,3461,4.362,3462,4.869,3463,4.362,3464,4.362,3465,4.362,3466,4.362,3467,4.362,3468,4.362,3469,4.362,3470,4.362,3471,4.362,3472,4.362,3473,4.362,3474,4.362,3475,4.362,3476,4.362,3477,4.362,3478,4.869,3479,4.362,3480,4.362,3481,4.869,3482,4.028,3483,4.362,3484,4.362,3485,4.028,3486,4.869]],["title/classes/MappedValueProvider.html",[0,0.082,3487,4.561]],["body/classes/MappedValueProvider.html",[0,0.147,2,1.677,3,0.27,4,0.253,5,0.253,8,1.813,10,0.278,11,0.547,13,1.171,14,1.677,17,1.246,19,1.632,20,0.005,21,0.78,22,1.001,24,0.345,28,0.27,39,0.27,54,2.488,55,1.796,75,0.987,78,0.003,79,0.004,80,0.003,85,1.119,94,1.762,109,1.505,110,0.904,136,0.784,179,1.389,183,1.09,187,1.214,273,2.286,295,3.705,307,4.106,632,3.624,787,1.677,854,5.045,1065,3.076,1069,3.013,1649,3.306,1906,3.306,1916,2.36,2029,3.306,2890,5.348,3487,7.536,3488,9.456,3489,4.831,3490,6.529,3491,6.529,3492,6.529,3493,6.529,3494,6.185,3495,6.529,3496,6.89,3497,9.081,3498,6.173,3499,6.89,3500,6.173,3501,5.701,3502,6.89,3503,6.89]],["title/classes/MarkerUtils.html",[0,0.082,3504,4.561]],["body/classes/MarkerUtils.html",[0,0.139,2,1.159,3,0.187,4,0.175,5,0.175,10,0.267,11,0.43,12,0.955,17,1.182,19,1.798,20,0.005,21,0.859,22,1.103,24,0.327,28,0.358,34,0.874,38,1.276,39,0.187,42,1.143,47,1.159,52,1.653,53,2.3,78,0.002,79,0.003,80,0.002,91,2.497,94,1.464,96,4.033,97,2.422,102,1.276,109,1.997,110,0.803,111,1.589,112,1.054,116,1.175,119,0.973,126,1.524,136,0.893,137,3.201,164,1.054,168,1.182,179,1.53,183,1.062,196,1.054,213,2.26,222,1.874,231,2.533,273,1.796,285,1.484,289,1.631,300,3.915,301,2.555,310,4.515,321,1.41,322,5.469,324,2.904,326,4.797,327,2.325,328,1.452,334,1.783,384,1.951,399,2.787,411,2.704,546,1.808,550,2.631,612,2.274,638,3.34,651,2.427,678,3.465,719,2.706,800,1.483,813,3.465,948,1.747,962,3.502,1007,2.612,1132,3.502,1186,2.653,1200,6.365,1201,2.612,1219,1.808,1516,5.131,1541,4.268,1659,6.919,1666,3.555,1701,3.156,1809,3.651,1921,1.808,2052,4.924,2183,2.562,2335,4.268,2490,3.941,2569,3.941,2752,3.697,2753,5.922,2774,5.922,2792,3.697,2849,3.34,2944,3.941,3077,4.268,3442,4.268,3504,5.922,3505,8.915,3506,4.764,3507,7.592,3508,7.592,3509,6.611,3510,6.611,3511,6.611,3512,4.764,3513,8.2,3514,4.764,3515,4.764,3516,6.802,3517,8.915,3518,4.764,3519,8.2,3520,7.718,3521,6.611,3522,4.764,3523,6.611,3524,4.635,3525,6.611,3526,5.922,3527,6.611,3528,4.764,3529,4.764,3530,4.764,3531,4.764,3532,4.764,3533,4.764,3534,4.764,3535,6.611,3536,4.764,3537,4.764,3538,6.611,3539,4.764,3540,4.764,3541,4.764,3542,7.592,3543,4.764,3544,4.764,3545,4.764,3546,4.764,3547,4.764,3548,4.764,3549,4.764,3550,6.802,3551,6.611,3552,4.764,3553,4.764,3554,4.764,3555,4.764,3556,4.764,3557,4.764,3558,4.764,3559,4.764,3560,4.764,3561,4.764,3562,4.764,3563,4.764,3564,4.764,3565,6.611,3566,4.764,3567,4.764,3568,4.764,3569,4.764]],["title/classes/MissingDataLineRendererConfig.html",[0,0.082,3570,4.561]],["body/classes/MissingDataLineRendererConfig.html",[0,0.113,2,1.699,3,0.273,4,0.257,5,0.257,8,1.827,10,0.282,11,0.552,12,1.26,17,1.304,20,0.005,24,0.265,28,0.332,39,0.273,78,0.004,79,0.004,80,0.004,84,4.356,85,1.134,94,1.844,106,2.38,109,2.075,110,0.885,126,1.955,142,2.337,148,2.918,154,3.319,167,6.255,168,0.958,176,5.777,187,1.23,303,2.825,336,2.474,1957,3.193,1984,3.166,2104,3.755,2117,5.698,2121,5.698,2131,5.905,2827,5.699,3570,7.598,3571,9.733,3572,7.598,3573,6.982,3574,7.598,3575,6.255]],["title/classes/NoopAccessors.html",[0,0.082,2290,4.212]],["body/classes/NoopAccessors.html",[0,0.12,2,1.807,3,0.291,4,0.273,5,0.273,7,2.868,8,1.896,10,0.3,11,0.573,12,1.22,13,1.378,14,2.282,17,1.287,20,0.005,24,0.334,28,0.291,34,1.614,38,1.989,39,0.345,40,0.004,41,0.827,56,3.469,72,3.397,75,1.26,78,0.004,79,0.004,80,0.004,94,1.793,164,1.644,1069,2.366,1897,2.726,1902,2.439,1903,2.197,1904,2.402,2288,7.278,2289,8.687,2290,7.28,2298,7.883,3576,7.425]],["title/classes/NoopRenderer.html",[0,0.082,3577,4.561]],["body/classes/NoopRenderer.html",[0,0.065,2,0.972,3,0.156,4,0.214,5,0.147,10,0.382,11,0.38,12,1.251,13,1.317,17,1.354,19,2.261,20,0.005,21,1.089,22,1.374,24,0.372,28,0.329,38,1.07,39,0.156,41,0.65,53,0.959,75,0.572,78,0.002,79,0.003,80,0.002,85,1.445,90,0.824,94,1.845,96,2.375,97,1.585,109,1.654,110,0.75,112,1.291,117,3.994,119,0.816,130,2.269,131,1.149,134,3.215,136,0.784,148,2.007,154,1.915,164,0.884,168,1.283,179,1.94,183,1.153,187,0.704,188,3.782,196,1.676,198,1.308,213,2.653,220,4.072,222,2.524,246,2.685,251,2.689,270,4.453,273,1.585,274,5.615,276,3.771,277,4.896,283,2.784,284,2.132,285,1.056,287,1.254,289,1.94,294,2.046,298,4.072,299,4.463,300,4.404,301,2.668,303,2.81,307,2.846,310,4.221,321,1.182,327,1.95,328,1.217,333,2.35,336,2.009,343,2.492,368,1.777,384,2.162,394,2.206,395,2.685,396,2.583,411,1.254,439,1.292,550,1.585,597,2.846,647,1.981,719,1.726,733,1.07,748,1.291,752,2.937,785,2.827,800,1.308,806,2.148,815,1.995,854,3.873,948,1.056,1164,1.995,1170,3.221,1266,2.583,1269,1.443,1293,4.896,1323,2.565,1371,1.517,1468,2.009,1503,2.846,1515,2.492,1649,2.707,1652,2.937,1667,2.937,1814,2.206,1842,2.937,1917,2.691,1918,1.056,1933,1.375,1935,1.517,1936,1.517,1937,1.803,1938,1.466,1941,2.563,1983,1.375,1984,1.491,2005,1.945,2014,1.517,2018,2.177,2038,1.995,2091,2.269,2100,2.492,2132,3.411,2147,2.337,2150,3.327,2178,3.411,2288,3.1,2427,2.937,2623,4.288,2741,3.919,2816,2.583,2840,2.937,2841,4.453,2866,2.937,2867,5.615,2971,2.685,3524,2.801,3577,5.225,3578,8.054,3579,4.526,3580,5.878,3581,4.526,3582,4.526,3583,4.526,3584,4.526,3585,4.526,3586,3.305,3587,3.305,3588,3.305,3589,3.305,3590,3.995,3591,5.346,3592,3.995,3593,3.995,3594,5.346,3595,3.995,3596,3.305,3597,2.937,3598,2.937,3599,4.288,3600,3.1,3601,5.878,3602,3.305,3603,3.1,3604,3.1,3605,3.1,3606,3.305,3607,2.685,3608,3.1,3609,3.1,3610,2.937,3611,3.1,3612,3.305,3613,3.1,3614,3.305,3615,5.346,3616,3.1,3617,5.568,3618,3.305,3619,2.583,3620,3.305,3621,4.089,3622,3.1,3623,3.305,3624,3.1,3625,3.305,3626,3.1,3627,3.305,3628,3.1,3629,3.995,3630,3.995,3631,3.995]],["title/classes/NoopScale.html",[0,0.082,3632,4.561]],["body/classes/NoopScale.html",[0,0.085,2,1.271,3,0.205,4,0.192,5,0.192,8,1.517,10,0.211,11,0.458,14,1.271,17,1.407,19,2.256,20,0.005,21,1.078,22,1.384,24,0.374,28,0.276,39,0.205,78,0.003,79,0.004,80,0.003,94,1.874,95,1.95,97,2.164,126,1.204,130,5.321,131,2.694,136,0.829,142,1.439,145,2.04,164,1.558,168,1.399,179,1.966,187,0.92,196,2.16,226,3.304,273,1.913,295,4.583,313,1.025,774,2.191,1916,2.374,1941,2.999,2150,3.499,2153,4.249,2160,4.174,2161,4.523,2165,4.969,2169,4.659,2176,4.986,2177,4.986,2183,5.246,2184,4.986,2185,4.986,2189,4.118,2190,4.986,2192,5.707,2193,4.986,2305,5.976,2306,5.176,2307,5.976,3449,4.321,3453,5.464,3454,6.307,3461,4.679,3632,6.307,3633,10.275,3634,5.223,3635,5.223,3636,5.223,3637,5.223,3638,5.223,3639,4.679,3640,5.223,3641,5.223,3642,5.223,3643,5.223,3644,5.223,3645,5.223,3646,5.223,3647,5.223,3648,5.223,3649,5.223,3650,4.679,3651,4.679]],["title/modules/NuiChartsModule.html",[3652,4.212,3653,3.743]],["body/modules/NuiChartsModule.html",[0,0.086,3,0.207,4,0.194,5,0.194,20,0.005,24,0.201,28,0.401,32,3.745,39,0.207,78,0.003,79,0.004,80,0.003,90,1.349,91,2.773,154,1.738,285,0.958,313,1.038,314,1.437,380,4.106,483,5.487,486,6.362,487,4.005,501,2.773,505,5.342,507,5.487,508,3.632,510,5.487,512,5.207,514,5.487,516,5.081,518,5.487,520,5.487,522,5.487,525,5.342,810,5.875,811,1.764,831,6.765,835,4.74,836,3.555,837,2.471,838,3.095,840,4.106,850,3.89,915,3.555,937,4.74,994,4.74,1114,4.74,1132,3.89,1278,6.221,1325,6.632,1326,4.377,1442,4.106,1907,2.043,2029,1.85,2542,3.89,2917,5.512,3166,4.377,3333,4.377,3652,4.377,3653,7.742,3654,4.377,3655,4.106,3656,6.632,3657,6.632,3658,4.74,3659,4.74,3660,4.74,3661,4.74,3662,7.141,3663,5.29,3664,7.101,3665,6.362,3666,5.29,3667,5.29,3668,5.29,3669,5.29,3670,5.29,3671,5.29,3672,5.29,3673,7.101,3674,7.101,3675,7.101,3676,5.29,3677,5.29,3678,5.29,3679,5.29,3680,5.29,3681,5.29,3682,5.29,3683,8.016,3684,4.74,3685,7.101,3686,6.362,3687,5.29,3688,5.29,3689,4.74]],["title/classes/PathMarker.html",[0,0.082,3690,4.561]],["body/classes/PathMarker.html",[0,0.149,2,1.548,3,0.249,4,0.234,5,0.234,8,1.726,10,0.257,11,0.521,12,1.007,14,1.548,17,1.262,19,1.896,20,0.005,21,0.906,22,1.163,24,0.333,28,0.249,39,0.249,52,2.002,53,1.527,55,1.658,57,2.113,78,0.003,79,0.004,80,0.003,85,1.3,90,1.131,94,1.79,110,0.746,136,0.951,179,1.614,183,1.037,187,1.121,196,1.409,231,1.729,273,2.176,334,1.317,493,2.892,529,2.592,546,3.491,630,5.701,678,4.967,687,3.999,735,5.265,787,1.548,945,3.45,1007,3.015,1371,3.04,1617,3.722,1649,3.147,1659,7.137,1695,3.422,1812,5.737,1992,3.614,1993,3.147,2043,3.514,2044,3.663,2051,2.796,2218,6.625,3690,8.49,3691,9.476,3692,5.701,3693,7.174,3694,8.007,3695,5.701,3696,7.174,3697,8.007,3698,6.363,3699,6.363,3700,6.363,3701,6.363,3702,6.363,3703,6.363,3704,6.363,3705,6.363,3706,6.363,3707,6.363,3708,6.363,3709,6.363,3710,6.363,3711,6.363,3712,7.174,3713,6.363,3714,6.363]],["title/classes/PieRenderer.html",[0,0.082,3715,4.561]],["body/classes/PieRenderer.html",[0,0.066,2,0.986,3,0.159,4,0.217,5,0.149,10,0.395,11,0.383,12,1.254,13,1.32,17,1.363,19,2.285,20,0.005,21,1.1,22,1.391,24,0.377,28,0.231,39,0.159,41,0.656,53,0.972,75,0.844,78,0.002,79,0.003,80,0.002,85,1.451,90,0.832,94,1.843,96,2.4,97,1.601,109,1.769,110,0.813,112,1.304,117,4.118,119,0.827,134,2.127,136,0.787,148,2.623,168,1.378,179,1.945,183,1.049,196,1.537,198,1.322,213,2.613,220,4.099,222,2.533,246,2.723,251,2.696,257,0.986,270,4.489,273,1.601,274,5.639,276,3.809,277,3.809,283,2.812,284,2.143,285,1.066,287,1.272,289,1.903,294,2.056,298,3.733,299,4.034,300,4.034,301,2.498,303,2.786,307,2.876,310,3.088,313,0.795,333,2.362,336,2.025,343,2.527,368,1.795,384,2.172,394,2.237,395,2.723,396,2.619,411,1.272,439,1.31,550,1.601,597,2.876,647,1.996,687,2.023,719,1.744,733,1.085,748,1.304,752,2.947,785,2.846,800,1.322,806,2.178,815,2.023,854,3.899,948,1.07,970,7.394,1067,1.216,1164,2.023,1170,3.254,1266,2.619,1269,1.463,1293,4.929,1323,1.996,1371,1.538,1468,2.025,1503,2.876,1515,2.527,1597,4.131,1598,2.445,1649,2.729,1652,2.979,1667,2.979,1814,2.237,1842,2.979,1917,1.439,1918,1.07,1933,1.394,1935,1.538,1936,1.538,1937,1.822,1938,1.487,1941,2.575,1944,1.565,1956,1.592,1983,1.394,1984,1.512,2005,1.965,2014,1.538,2018,2.199,2038,2.023,2091,2.301,2132,3.446,2147,2.37,2150,3.349,2178,3.446,2183,3.168,2427,2.979,2623,4.332,2741,3.959,2816,2.619,2841,3.809,2867,4.489,2971,2.723,3524,2.841,3579,4.573,3580,5.917,3581,4.573,3582,4.573,3583,4.573,3584,4.573,3585,4.573,3586,3.352,3587,3.352,3588,3.352,3589,3.352,3591,4.573,3594,3.144,3596,3.352,3597,2.979,3598,2.979,3599,4.332,3600,3.144,3601,5.917,3602,3.352,3603,3.144,3604,3.144,3605,3.144,3606,3.352,3607,2.723,3608,3.144,3609,3.144,3610,2.979,3611,3.144,3612,3.352,3613,3.144,3614,3.352,3615,5.389,3616,3.144,3617,5.605,3618,3.352,3619,2.619,3620,3.352,3621,4.131,3622,3.144,3623,3.352,3624,3.144,3625,3.352,3626,3.144,3627,3.352,3628,3.144,3715,5.278,3716,4.051,3717,5.891,3718,5.891,3719,4.051,3720,4.051,3721,3.629,3722,4.051,3723,4.051,3724,4.051,3725,4.051,3726,4.051,3727,4.051,3728,6.943,3729,3.629,3730,3.144,3731,4.051,3732,4.051,3733,4.051,3734,4.051]],["title/classes/ProcessedColorProvider.html",[0,0.082,1079,3.951]],["body/classes/ProcessedColorProvider.html",[0,0.107,2,1.613,3,0.26,4,0.328,5,0.244,8,1.77,10,0.268,11,0.535,14,1.613,17,1.281,19,1.569,20,0.005,21,0.75,22,0.963,24,0.252,28,0.26,39,0.26,52,2.444,54,2.393,55,2.14,78,0.003,79,0.004,80,0.003,85,1.076,94,1.745,109,1.448,110,0.618,112,1.467,136,0.923,179,1.336,183,1.156,187,1.168,196,1.467,231,1.801,273,2.232,294,1.999,612,3.164,787,1.613,819,6.032,834,4.2,854,4.2,895,4.564,1065,3.31,1079,6.375,1164,4.102,1293,5.31,1649,3.228,1904,2.657,2029,3.262,2890,5.144,3489,4.647,3501,5.483,3735,9.33,3736,8.213,3737,7.359,3738,8.213,3739,8.213,3740,8.213,3741,5.938,3742,7.996,3743,5.938,3744,7.359,3745,6.628,3746,6.628,3747,6.628,3748,8.213,3749,6.628,3750,6.628,3751,9.59,3752,8.213,3753,6.628,3754,6.628]],["title/classes/RadialAccessors.html",[0,0.082,2295,3.743]],["body/classes/RadialAccessors.html",[0,0.111,2,1.663,3,0.268,4,0.251,5,0.251,7,2.639,8,1.804,10,0.276,11,0.545,12,1.186,13,1.313,14,1.663,15,4.791,17,1.242,19,1.618,20,0.005,21,0.773,22,0.993,23,4.085,24,0.318,28,0.328,29,4.387,31,3.581,32,3.192,33,2.326,34,1.535,37,2.529,38,1.831,39,0.369,40,0.005,41,0.761,52,2.262,54,2.467,56,3.192,57,1.828,72,3.126,73,3.581,74,3.581,75,1.296,78,0.003,79,0.004,80,0.003,110,0.78,136,0.78,206,6.121,787,2.036,790,3.677,1543,4.791,1974,2.707,2162,2.477,2269,4.896,2270,4.896,2291,6.652,2292,7.319,2293,6.933,2294,6.933,2295,6.153,2296,5.303,3755,7.498]],["title/classes/RadialPopoverPlugin.html",[0,0.082,3756,4.561]],["body/classes/RadialPopoverPlugin.html",[0,0.086,2,1.286,3,0.207,4,0.194,5,0.194,10,0.213,11,0.462,12,0.665,17,1.409,20,0.005,24,0.349,28,0.207,39,0.207,41,0.954,78,0.003,79,0.004,80,0.003,85,0.858,90,1.262,94,1.877,109,2.052,110,0.857,111,2.856,112,1.896,116,2.112,117,4.246,119,1.879,148,2.442,151,3.118,179,1.97,183,1.266,196,1.17,231,2.427,257,1.286,273,1.928,301,2.239,384,1.824,436,2.842,439,2.296,443,2.992,444,3.13,446,2.397,447,2.975,453,1.79,456,3.417,459,1.976,464,1.751,466,2.846,467,3.297,476,3.297,477,3.297,478,3.297,479,3.297,481,2.1,612,2.523,639,1.681,641,1.469,678,2.77,687,2.64,748,1.17,755,1.634,771,2.839,946,3.092,948,1.875,1116,7.294,1121,7.526,1148,4.102,1160,3.417,1169,5.872,1170,3.919,1171,5.872,1172,5.872,1173,5.872,1174,5.508,1177,6.218,1178,3.247,1179,4.373,1182,4.102,1183,4.373,1184,4.373,1185,4.373,1186,1.71,1187,3.092,1190,4.102,1217,5.508,1232,5.218,1233,3.886,1234,3.552,1235,3.886,1236,1.94,1237,3.417,1238,5.872,1240,4.373,1241,4.373,1242,3.886,1243,4.373,1445,5.218,3098,4.373,3730,5.508,3756,6.358,3757,5.285,3758,5.285,3759,5.285,3760,5.285,3761,5.285,3762,5.285,3763,5.285,3764,5.285,3765,5.285,3766,5.285,3767,5.285,3768,5.285,3769,5.285,3770,5.285,3771,5.285,3772,5.285,3773,7.097,3774,7.097,3775,5.285,3776,4.735]],["title/classes/RadialTooltipsPlugin.html",[0,0.082,3777,4.561]],["body/classes/RadialTooltipsPlugin.html",[0,0.07,2,1.049,3,0.169,4,0.226,5,0.158,10,0.174,11,0.401,12,0.775,17,1.368,19,1.02,20,0.005,21,0.488,22,0.626,24,0.337,28,0.325,34,0.791,39,0.169,41,0.686,42,2.253,47,2.283,55,1.605,59,2.521,78,0.002,79,0.003,80,0.002,83,1.092,85,0.7,89,1.063,90,1.219,94,1.851,109,1.713,110,0.731,111,3.031,112,1.364,114,2.379,115,3.222,117,4.134,119,1.258,136,0.574,151,3.792,168,1.22,179,1.914,183,1.23,196,1.591,216,3.756,217,3.649,231,2.55,251,1.239,273,1.674,285,0.78,287,1.353,294,1.049,301,1.722,303,2.009,307,2.103,313,0.846,334,1.488,339,2.896,343,3.843,435,5.316,436,2.317,437,6.632,438,4.781,439,2.326,440,4.781,441,3.499,442,4.781,443,2.86,444,2.992,445,5.097,446,2.249,447,2.792,450,3.861,451,3.169,452,4.32,453,2.435,454,3.861,455,2.435,456,2.786,457,3.861,458,4.781,459,1.519,460,3.169,461,3.861,462,3.861,463,3.169,464,1.519,465,3.861,466,2.644,467,2.689,468,3.861,469,3.861,470,3.345,471,3.861,472,3.861,473,3.861,474,3.861,475,3.861,476,2.689,477,2.689,478,2.689,479,2.689,481,2.128,508,3.15,529,1.651,581,1.823,602,1.531,639,1.02,641,0.892,687,3.076,771,2.876,786,2.601,787,1.049,854,2.204,948,1.628,961,3.345,970,3.565,971,3.861,1201,2.12,1282,5.577,1323,2.087,1350,3.565,1371,1.636,1441,5.097,1442,3.345,1445,4.529,1446,6.089,1447,3.565,1456,3.565,1457,3.565,1458,3.565,1459,3.565,1460,6.699,1490,5.097,1503,3.007,1504,3.169,1506,3.565,1516,3.345,1519,3.565,1592,3.345,1597,5.501,1598,2.601,2074,2.057,2164,4.339,2363,3.169,2403,3.565,2648,3.565,2741,2.896,3056,3.861,3062,3.861,3098,3.565,3182,3.861,3419,5.097,3599,3.169,3607,2.896,3729,5.519,3730,6.089,3776,3.861,3777,5.519,3778,3.861,3779,6.16,3780,5.519,3781,6.16,3782,6.441,3783,5.519,3784,3.861,3785,3.861,3786,5.519,3787,3.565,3788,3.861,3789,3.565,3790,3.861,3791,3.861,3792,3.861,3793,5.519,3794,4.309,3795,4.309,3796,4.309,3797,4.309,3798,4.309,3799,4.309,3800,6.16,3801,4.309,3802,4.309,3803,7.189,3804,4.309,3805,4.309,3806,4.309,3807,4.309,3808,4.309,3809,6.16,3810,4.309,3811,4.309,3812,3.861,3813,4.309,3814,4.309,3815,4.309,3816,4.309,3817,4.309,3818,7.845,3819,4.309,3820,6.16,3821,4.309,3822,7.189,3823,4.309,3824,4.309,3825,4.309,3826,4.309,3827,4.309,3828,3.861,3829,7.435,3830,4.309,3831,4.309]],["title/classes/RectangleAccessors.html",[0,0.082,204,2.892]],["body/classes/RectangleAccessors.html",[0,0.114,2,1.711,3,0.275,4,0.258,5,0.258,7,2.717,8,1.836,10,0.284,11,0.554,12,1.198,13,1.326,14,2.23,17,1.258,20,0.005,24,0.323,28,0.275,33,2.54,34,1.563,35,3.034,36,2.714,37,2.561,38,1.885,39,0.388,40,0.005,41,1.087,52,1.759,53,1.688,78,0.004,79,0.004,80,0.004,110,0.655,204,4.838,209,4.992,210,5.409,216,2.973,217,2.973,218,2.764,331,4.686,1883,4.548,1885,4.548,1887,4.548,1889,4.548,1890,4.727,2299,6.678,2300,4.727,2301,4.727,2302,4.727,3832,8.518,3833,7.034]],["title/classes/Renderer.html",[0,0.082,303,1.423]],["body/classes/Renderer.html",[0,0.093,2,0.721,3,0.116,4,0.211,5,0.109,10,0.383,11,0.374,12,1.278,13,1.354,14,0.721,17,1.283,19,2.061,20,0.005,21,1.015,22,1.241,24,0.348,28,0.341,34,0.544,39,0.116,53,1.116,75,0.666,78,0.001,79,0.002,80,0.001,85,1.318,90,0.657,94,1.803,95,1.736,96,2.338,97,1.56,109,1.712,110,0.778,112,1.659,119,1.172,130,1.683,131,0.852,134,1.07,136,0.846,148,2.237,168,1.195,179,1.85,183,1.051,187,0.522,196,1.959,198,1.585,213,2.594,220,4.488,222,2.669,231,2.037,245,0.903,246,3.126,251,2.772,270,4.846,273,1.264,274,4.203,276,3.007,277,3.007,283,3.372,284,2.275,285,1.279,287,1.46,289,1.885,294,2.183,298,3.496,299,3.984,300,3.874,301,2.538,303,1.3,307,2.27,310,3.408,313,1.126,314,1.56,321,0.877,323,3.848,324,1.302,328,0.903,332,1.48,333,2.566,334,2.042,336,2.186,343,2.902,368,2.152,384,2.274,394,3.17,395,3.126,396,3.007,399,1.088,411,2.041,418,1.789,439,1.504,550,1.919,585,0.741,586,1.789,597,2.27,612,2.22,647,2.155,651,1.707,719,2.09,723,1.516,733,1.246,748,1.271,752,3.085,766,0.959,785,3.115,800,1.459,803,1.683,806,2.501,815,2.323,854,4.15,948,1.517,1164,2.323,1166,2.179,1170,3.17,1195,1.849,1196,1.849,1201,1.02,1209,1.734,1210,1.849,1266,3.007,1269,1.679,1293,5.247,1323,2.202,1371,1.766,1468,2.06,1486,3.61,1503,3.173,1515,2.902,1534,2.452,1539,1.637,1649,2.946,1652,2.179,1659,2.3,1667,3.419,1814,2.569,1842,3.419,1900,1.165,1906,2.256,1907,1.145,1910,1.165,1917,1.652,1918,1.229,1933,1.6,1935,1.766,1936,1.766,1937,2.424,1938,1.707,1941,2.696,1983,1.02,1984,1.106,2005,2.356,2014,1.766,2018,2.427,2038,2.323,2042,1.277,2091,3.26,2132,3.803,2147,2.72,2150,3.443,2154,2.902,2175,1.637,2178,3.803,2270,2.72,2427,3.419,2623,4.78,2662,2.655,2741,4.369,2819,1.992,2841,3.007,2867,3.711,2971,3.126,3516,2.655,3524,3.261,3550,2.655,3579,4.455,3580,3.61,3581,3.61,3582,3.61,3583,3.61,3584,3.61,3585,3.61,3591,3.61,3594,3.61,3597,3.419,3598,3.419,3599,4.78,3600,3.61,3601,6.299,3603,3.61,3604,3.61,3605,3.61,3607,3.126,3608,3.61,3609,3.61,3610,3.419,3611,3.61,3613,3.61,3615,5.817,3616,3.61,3617,5.967,3619,3.007,3621,3.261,3622,2.3,3624,3.61,3626,3.61,3628,3.61,3834,2.964,3835,4.167,3836,4.167,3837,2.964,3838,2.964,3839,2.964,3840,2.964,3841,2.964,3842,2.964,3843,2.964,3844,2.964,3845,2.964,3846,2.964,3847,2.964,3848,2.964,3849,2.964,3850,2.964,3851,2.964,3852,2.964,3853,2.964,3854,4.167,3855,2.964,3856,2.964,3857,2.964,3858,2.964,3859,2.964,3860,2.964,3861,2.964,3862,2.964,3863,4.651,3864,4.651,3865,2.964,3866,2.964,3867,2.964,3868,2.964,3869,2.964,3870,2.964,3871,2.964,3872,2.964,3873,2.964,3874,2.964,3875,2.964,3876,2.964,3877,2.964,3878,2.964,3879,2.964,3880,2.964,3881,2.964,3882,2.655,3883,2.964,3884,4.651,3885,2.964,3886,2.964,3887,2.964,3888,4.651,3889,2.964,3890,2.964]],["title/components/RichLegendTileComponent.html",[482,2.237,522,2.812]],["body/components/RichLegendTileComponent.html",[0,0.085,3,0.205,4,0.192,5,0.192,8,1.518,10,0.211,11,0.458,13,1.305,14,1.272,17,1.308,19,1.238,20,0.005,21,0.965,22,1.158,24,0.348,28,0.334,39,0.205,52,2.343,55,2.076,78,0.003,79,0.004,80,0.003,90,1.257,94,1.8,110,0.854,119,1.068,136,0.888,145,1.718,179,1.42,184,3.438,196,1.559,273,1.914,482,3.095,483,2.887,484,4.001,485,7.987,487,4.683,488,4.683,489,2.969,490,5.828,491,5.828,492,5.511,493,3.581,494,2.297,495,5.146,496,4.555,497,6.311,498,4.251,499,6.311,500,4.057,501,2.74,502,4.843,503,3.155,504,3.155,505,2.811,506,3.155,507,2.887,508,2.673,509,3.155,510,2.887,511,3.155,512,2.74,513,3.155,514,2.887,515,3.155,516,2.673,517,3.155,518,4.916,519,3.155,520,4.916,521,3.155,522,4.709,523,5.75,524,2.969,525,2.811,526,3.058,527,3.155,784,3.157,827,6.184,828,3.438,834,4.552,845,4.057,866,6.592,878,5.979,909,4.325,1004,5.858,1094,4.683,1149,5.468,1322,3.844,1346,4.325,2060,2.923,2162,1.547,3124,6.311,3323,6.311,3333,4.325,3377,4.683,3397,4.683,3684,4.683,3686,9.133,3891,7.968,3892,8.526,3893,8.526,3894,7.968,3895,8.526,3896,5.228,3897,7.044,3898,5.228,3899,5.228,3900,5.228,3901,5.228,3902,5.228,3903,5.228,3904,5.228,3905,5.228,3906,7.044,3907,5.228,3908,7.044,3909,5.228,3910,5.228,3911,5.228,3912,5.228,3913,5.228,3914,5.228,3915,5.228,3916,5.228,3917,5.228]],["title/classes/Scale.html",[0,0.082,284,1.291]],["body/classes/Scale.html",[0,0.075,2,1.124,3,0.181,4,0.17,5,0.17,8,1.394,10,0.187,11,0.421,17,1.389,19,2.226,20,0.005,21,1.064,22,1.366,24,0.376,28,0.317,39,0.181,55,1.203,75,1.159,78,0.002,79,0.003,80,0.002,94,1.885,95,1.724,97,2.198,109,1.413,110,0.754,112,1.022,126,1.064,134,3.508,136,0.696,142,1.273,145,2.008,164,1.432,168,1.384,179,1.94,187,0.814,188,4.409,196,2.108,220,5.176,229,1.407,273,1.758,284,2.159,295,4.015,313,1.465,329,3.104,336,1.347,687,3.729,774,2.079,1371,1.753,1532,4.137,1733,3.821,1812,2.881,1916,2.424,1941,3.003,2150,4.13,2153,4.506,2159,5.014,2160,3.914,2161,4.241,2165,4.658,2169,4.368,2170,2.986,2176,4.733,2177,4.733,2179,2.483,2181,3.904,2182,3.904,2183,5.223,2184,4.733,2185,4.733,2189,3.784,2190,4.733,2192,5.682,2193,4.733,2305,4.536,2306,4.756,2307,4.536,2339,5.49,2342,3.821,3453,3.584,3482,3.821,3485,3.821,3650,4.137,3918,4.618,3919,4.618,3920,4.618,3921,4.618,3922,4.618,3923,4.618,3924,4.618,3925,4.618,3926,4.618,3927,4.618,3928,4.618,3929,4.618,3930,4.618,3931,4.618,3932,4.618,3933,4.618,3934,4.618,3935,4.618,3936,4.618,3937,4.618,3938,4.618,3939,4.618,3940,4.618,3941,4.618,3942,6.469,3943,4.618,3944,4.137,3945,4.618,3946,4.618,3947,4.618,3948,4.618,3949,4.618,3950,4.618,3951,4.618,3952,4.618,3953,4.618,3954,4.618,3955,4.618,3956,4.618,3957,4.618,3958,4.618,3959,6.469]],["title/interfaces/ScalesIndex.html",[40,0.003,1685,2.282]],["body/interfaces/ScalesIndex.html",[3,0.19,4,0.178,5,0.178,10,0.334,12,0.843,13,0.676,17,0.667,20,0.005,24,0.314,28,0.262,34,0.891,39,0.389,40,0.005,41,0.921,42,1.166,47,1.182,75,1.099,78,0.002,79,0.003,80,0.002,85,0.788,95,1.813,97,1.82,110,0.856,112,1.483,119,1.566,126,1.544,128,2.134,134,2.419,136,0.856,142,1.846,145,1.887,168,1.355,179,1.807,182,2.134,183,0.629,187,0.856,196,1.483,226,2.015,229,2.041,231,1.82,249,3.805,284,2.484,285,0.879,289,1.725,307,2.37,313,0.953,326,2.841,334,1.856,336,1.417,337,2.053,368,2.337,379,3.919,441,2.758,581,1.983,649,3.14,771,1.943,773,2.611,774,1.248,783,2.779,785,2.501,787,1.63,789,4.129,811,2.234,852,4.331,895,3.922,1468,1.417,1503,2.37,1513,4.18,1617,2.841,1666,3.602,1668,2.931,1685,3.003,1705,2.943,1801,1.725,1893,0.736,1912,2.342,1915,2.38,1916,2.364,1941,3.091,2004,2.558,2027,2.2,2037,3.065,2040,3.198,2042,2.092,2059,2.269,2060,2.015,2079,2.318,2080,2.318,2112,3.511,2148,4.18,2149,3.03,2150,4.227,2151,3.264,2153,4.629,2154,3.03,2155,3.03,2156,3.14,2157,3.14,2158,3.14,2159,4.356,2160,4.547,2161,3.805,2162,1.437,2163,3.14,2164,2.931,2165,3.03,2166,3.264,2167,3.264,2168,5.83,2169,3.919,2170,6.42,2171,2.841,2172,3.264,2173,4.502,2174,4.18,2175,2.682,2176,2.841,2177,2.841,2178,4.837,2179,4.823,2180,4.502,2181,2.931,2182,2.931,2183,4.823,2184,2.841,2185,2.841,2186,3.264,2187,3.264,2188,3.14,2189,2.841,2190,4.837,2191,3.264,2192,5.074,2193,2.841,2194,3.264,2195,3.264,2196,4.331,2197,3.264,2198,3.264,2199,3.264,2225,2.611,3960,4.856]],["title/classes/SequentialChartMarkerProvider.html",[0,0.082,3961,4.212]],["body/classes/SequentialChartMarkerProvider.html",[0,0.149,2,1.72,3,0.277,4,0.26,5,0.26,10,0.285,11,0.556,13,1.19,14,1.72,17,1.26,19,1.674,20,0.005,21,0.8,22,1.027,24,0.268,28,0.335,39,0.277,41,0.952,53,2.051,54,2.552,78,0.004,79,0.004,80,0.004,85,1.148,90,1.207,94,1.704,109,1.544,110,0.796,117,3.544,179,1.424,183,0.916,187,1.245,273,2.321,632,3.681,819,4.57,854,5.075,1007,3.283,1082,5.848,1649,3.358,1903,2.937,2029,3.21,3489,4.956,3490,6.631,3491,6.631,3492,6.631,3493,6.631,3494,6.282,3495,6.631,3743,6.333,3961,7.068,3962,7.068,3963,7.58,3964,7.068,3965,6.333,3966,6.333,3967,7.068]],["title/classes/SequentialColorProvider.html",[0,0.082,1081,4.212]],["body/classes/SequentialColorProvider.html",[0,0.149,2,1.735,3,0.279,4,0.262,5,0.262,10,0.288,11,0.559,13,1.196,14,1.735,17,1.265,19,1.688,20,0.005,21,0.807,22,1.036,24,0.271,28,0.279,39,0.279,41,0.957,52,2.148,54,2.575,78,0.004,79,0.004,80,0.004,85,1.158,94,1.708,109,1.557,110,0.8,117,3.563,136,0.859,179,1.437,183,0.924,273,2.334,632,3.7,819,4.61,854,5.086,1064,6.388,1069,3.169,1081,7.105,1082,5.899,1649,3.375,2029,3.222,3489,4.999,3490,6.666,3491,6.666,3492,6.666,3493,6.666,3494,6.315,3495,6.666,3498,6.388,3962,7.105,3963,7.598,3965,6.388,3966,6.388,3968,7.13]],["title/classes/SequentialValueProvider.html",[0,0.082,3963,3.951]],["body/classes/SequentialValueProvider.html",[0,0.145,2,1.635,3,0.263,4,0.247,5,0.247,8,1.785,10,0.335,11,0.539,13,1.154,14,1.635,17,1.233,19,1.591,20,0.005,21,0.76,22,0.976,24,0.341,28,0.263,39,0.263,54,2.427,55,2.159,78,0.003,79,0.004,80,0.003,85,1.091,94,1.751,109,1.468,110,0.948,136,0.772,168,0.922,179,1.354,183,1.073,187,1.184,196,1.488,231,1.826,273,2.251,294,2.016,336,1.961,632,3.569,787,1.635,854,5.015,1065,3.042,1649,3.256,1916,2.343,2029,3.278,2890,5.216,3489,4.713,3490,6.43,3491,6.43,3492,6.43,3493,6.43,3494,6.091,3495,6.43,3500,6.021,3501,5.56,3962,7.757,3963,6.43,3969,9.375,3970,6.721,3971,6.721,3972,6.721,3973,6.721,3974,6.721,3975,8.285,3976,8.285,3977,6.721,3978,6.721,3979,6.721]],["title/classes/SideIndicatorAccessors.html",[0,0.082,2828,3.57]],["body/classes/SideIndicatorAccessors.html",[0,0.11,2,1.199,3,0.193,4,0.181,5,0.181,8,1.458,10,0.199,11,0.503,12,1.182,13,1.308,14,1.88,17,1.061,20,0.005,22,0.716,24,0.257,28,0.368,33,1.669,35,2.156,36,2.156,37,2.437,38,1.32,39,0.342,40,0.005,41,0.861,42,1.183,47,1.199,52,1.932,55,1.284,56,2.302,57,1.076,72,2.254,78,0.002,79,0.003,80,0.002,85,0.8,91,2.582,94,1.703,96,2.007,109,1.478,110,0.72,111,2.578,115,2.526,119,1.578,134,2.443,136,0.459,142,1.358,147,3.186,148,1.696,151,2.165,164,2.08,183,0.638,187,0.868,188,3.379,196,1.498,198,1.105,213,1.358,216,3.686,217,3.686,222,2.358,226,3.451,231,2.669,244,1.397,245,2.062,257,1.199,289,1.654,294,1.646,299,3.23,300,2.352,301,1.891,303,2.16,321,1.458,324,2.165,327,2.405,328,1.501,332,2.461,334,1.02,336,1.437,337,2.083,384,1.266,418,2.973,493,1.779,639,1.83,641,1.401,674,3.186,676,3.311,734,1.779,795,1.501,945,2.123,1067,1.48,1170,2.721,1178,3.095,1195,3.074,1196,3.074,1209,2.882,1210,3.074,1211,3.455,1539,2.721,1613,1.696,1646,3.623,1701,4.75,1712,4.221,1810,2.721,1812,3.074,1917,2.404,1919,2.885,1937,2.573,2010,1.358,2042,2.123,2095,2.882,2813,5.419,2814,6.457,2815,7.388,2816,3.186,2817,6.117,2818,6.117,2819,3.311,2820,4.975,2821,3.824,2822,4.221,2823,5.638,2824,4.975,2825,3.824,2826,3.824,2827,4.547,2828,4.745,2829,3.824,2830,3.824,2831,4.975,2832,4.975,2833,3.824,2834,3.824,2835,3.824,2836,3.824,2837,3.824,2838,3.824,2839,3.824,2840,3.623,2841,3.186,2842,3.824,2843,4.975,2844,3.623,2845,3.824,2846,5.252,2847,3.824,2848,5.998,2849,3.455,2850,3.824,2851,3.824,2852,3.824,2853,5.998,2854,3.824,2855,3.824,2856,3.824,2857,3.824,2858,3.824,2859,3.824,2860,3.824,2861,3.824,2862,3.824,2863,3.824,2864,3.824,2865,3.824,2866,3.623,2867,3.186,2868,3.824,3980,6.766,3981,4.927]],["title/classes/SparkChartAssist.html",[0,0.082,3982,4.561]],["body/classes/SparkChartAssist.html",[0,0.058,2,0.871,3,0.14,4,0.132,5,0.132,8,1.158,10,0.261,11,0.35,13,1.125,14,0.871,17,1.316,19,1.914,20,0.005,21,0.914,22,1.174,24,0.351,28,0.378,34,0.657,39,0.14,53,0.859,55,1.401,78,0.002,79,0.003,80,0.002,83,2.186,85,0.873,87,5.419,90,1.429,94,1.844,97,2.512,109,1.831,110,0.822,112,1.855,115,2.679,126,1.654,132,3.777,134,2.592,136,0.85,142,2.12,145,1.083,148,2.781,154,1.175,168,1.056,179,1.629,183,1.086,187,0.631,188,2.685,196,1.789,198,1.813,231,2.397,244,2.444,258,1.637,273,1.461,283,3.426,285,1.393,295,1.924,324,1.572,329,2.405,333,2.006,334,0.741,336,1.883,420,6.893,432,5.422,439,1.158,446,2.247,453,2.187,481,1.591,530,1.638,581,2.124,585,1.344,595,1.83,596,1.123,601,0.972,602,1.272,687,1.787,734,1.941,746,6.241,749,4.174,752,1.739,755,2.667,758,2.825,766,1.158,771,2.151,772,6.282,773,1.924,774,1.659,778,4.974,781,2.405,782,3.613,786,3.244,788,4.641,791,3.613,793,4.824,803,2.033,811,2.394,819,2.314,895,2.749,1007,1.232,1057,2.961,1060,2.921,1065,2.606,1160,2.314,1166,3.953,1186,1.158,1187,2.093,1215,2.51,1220,2.631,1301,4.816,1504,3.953,1520,2.631,1666,4.345,1687,2.961,1733,2.961,1740,4.448,1903,2.277,1968,2.151,2019,2.772,2060,1.485,2214,4.816,2345,5.011,2346,4.816,2347,4.172,2823,3.476,2905,2.631,3023,2.961,3113,4.816,3135,3.206,3143,3.206,3161,2.961,3193,7.24,3208,5.939,3254,3.206,3255,3.206,3286,3.206,3961,2.961,3982,4.816,3983,9.652,3984,6.456,3985,6.456,3986,6.456,3987,8.382,3988,9.588,3989,5.376,3990,7.178,3991,3.579,3992,5.376,3993,3.579,3994,4.816,3995,3.579,3996,5.376,3997,5.376,3998,3.579,3999,5.376,4000,3.579,4001,5.376,4002,3.579,4003,3.579,4004,3.579,4005,3.579,4006,3.579,4007,3.579,4008,5.376,4009,6.456,4010,3.579,4011,3.579,4012,5.376,4013,3.579,4014,5.376,4015,7.178,4016,5.376,4017,5.376,4018,3.579,4019,3.579,4020,7.178,4021,5.376,4022,3.579,4023,3.206,4024,3.206,4025,3.579,4026,3.579,4027,3.206,4028,3.206,4029,3.579,4030,3.579,4031,3.579,4032,3.579,4033,6.456,4034,5.376,4035,3.579,4036,6.456,4037,3.579,4038,3.579,4039,3.579,4040,3.579,4041,3.579,4042,3.579,4043,3.579,4044,3.579,4045,3.579,4046,8.081,4047,3.579,4048,5.376,4049,7.694,4050,3.579,4051,3.579,4052,6.456,4053,3.579,4054,3.579,4055,3.579,4056,3.579,4057,3.579,4058,3.579,4059,3.579,4060,3.579,4061,6.456,4062,5.376,4063,3.579,4064,3.579,4065,3.579,4066,3.579,4067,3.579,4068,3.579,4069,3.579,4070,3.579,4071,3.579,4072,3.579,4073,6.456,4074,3.579,4075,3.579,4076,3.579,4077,3.579,4078,3.579]],["title/classes/StatusAccessors.html",[0,0.082,2881,3.743]],["body/classes/StatusAccessors.html",[0,0.11,2,1.659,3,0.267,4,0.25,5,0.25,7,2.633,8,1.801,10,0.275,11,0.544,12,1.185,13,1.258,14,1.659,17,1.327,19,1.614,20,0.005,21,0.771,22,0.99,24,0.343,28,0.354,33,2.061,38,1.826,39,0.354,40,0.004,41,0.931,54,2.462,57,1.489,78,0.003,79,0.004,80,0.003,94,1.683,96,4.008,109,1.825,110,0.779,136,0.635,164,2.086,196,1.85,202,5.214,205,6.497,207,5.214,208,6.107,209,4.38,214,3.404,259,2.995,417,3.014,2287,6.107,2878,6.645,2879,8.141,2880,7.313,2881,6.145,2882,7.477,2883,7.477,2884,6.914,2885,5.64,2886,5.64,2887,5.64,2888,5.64,3755,6.107,4079,6.816,4080,6.816,4081,6.816,4082,6.816,4083,6.816]],["title/classes/SvgMarker.html",[0,0.082,4084,4.212]],["body/classes/SvgMarker.html",[0,0.148,2,1.709,3,0.275,4,0.258,5,0.258,8,1.834,10,0.284,14,1.709,17,1.257,19,2.016,20,0.005,21,0.963,22,1.237,24,0.323,28,0.333,39,0.275,52,2.128,78,0.004,79,0.004,80,0.004,85,1.141,94,1.77,136,0.949,179,1.715,183,1.103,187,1.238,196,1.555,273,2.313,319,4.542,320,4.542,678,4.989,687,3.508,1007,3.151,1371,3.232,1649,3.345,1812,5.31,1992,3.741,1993,3.345,2218,7.042,3692,6.294,3693,7.626,3695,6.294,3712,7.626,4084,7.042,4085,9.519,4086,8.512,4087,8.512,4088,7.025,4089,7.025,4090,7.025,4091,7.025,4092,7.025,4093,8.512,4094,7.025]],["title/classes/TextColorProvider.html",[0,0.082,1083,4.212]],["body/classes/TextColorProvider.html",[0,0.093,2,1.399,3,0.225,4,0.211,5,0.211,10,0.232,11,0.488,14,1.399,17,1.147,19,1.362,20,0.005,21,0.651,22,0.836,24,0.317,28,0.347,39,0.225,41,0.836,52,2.482,55,1.956,78,0.003,79,0.004,80,0.003,85,0.934,94,1.581,109,1.256,110,0.536,117,3.114,131,2.546,136,0.778,168,1.215,179,1.684,183,0.745,187,1.013,196,1.661,231,2.761,273,2.039,307,3.663,313,1.128,334,1.729,336,1.678,819,5.401,834,2.941,854,3.838,961,6.484,1065,3,1069,2.662,1076,5.153,1077,5.153,1078,5.153,1079,7.129,1080,5.153,1083,6.209,1093,4.758,1095,4.758,1102,8.717,1103,5.153,1371,2.849,1503,2.807,1514,4.464,1649,2.95,2029,2.921,2111,4.39,2164,3.471,3489,4.033,3741,6.724,3744,5.153,4095,7.505,4096,8.354,4097,8.855,4098,8.354,4099,5.751,4100,5.751,4101,5.751,4102,5.751,4103,5.153,4104,5.751,4105,5.153,4106,5.751,4107,5.153,4108,5.751,4109,5.751,4110,5.751,4111,5.751,4112,5.751,4113,7.505,4114,7.505,4115,5.751,4116,7.505,4117,5.751,4118,5.751,4119,5.751,4120,4.758,4121,5.751,4122,5.751,4123,5.751,4124,7.505,4125,7.505,4126,5.751,4127,8.855,4128,5.751,4129,8.855,4130,5.751,4131,8.855,4132,8.855,4133,7.505,4134,5.751,4135,5.751,4136,5.751,4137,7.505,4138,5.751,4139,8.354,4140,5.751,4141,5.751,4142,5.751,4143,5.751]],["title/injectables/ThresholdsService.html",[847,3.951,3662,3.951]],["body/injectables/ThresholdsService.html",[0,0.04,1,4.092,3,0.096,4,0.278,5,0.09,9,5.65,10,0.099,11,0.26,12,1.246,13,1.346,14,0.597,17,1.298,19,1.856,20,0.005,21,0.887,22,1.138,23,3.547,24,0.306,28,0.356,33,1.7,38,0.657,39,0.096,42,1.744,47,1.843,54,0.886,55,0.639,57,1.403,59,2.96,75,1.123,78,0.001,79,0.002,80,0.001,85,1.23,89,0.605,90,0.908,91,1.286,94,1.67,96,2.377,106,0.639,109,1.655,110,0.853,112,1.525,119,1.646,126,0.922,128,1.757,136,0.229,142,1.771,154,2.488,164,1.783,168,0.695,179,1.579,183,0.318,187,0.432,196,1.609,213,2.663,216,3.486,217,3.406,218,0.964,222,1.133,226,1.659,229,1.958,231,2.616,238,0.77,244,1.133,245,1.778,251,2.498,257,0.973,273,1.872,284,1.014,285,1.163,288,1.904,289,1.821,294,0.597,295,1.319,297,1.481,303,2.19,313,0.481,325,2.198,327,1.197,334,1.822,336,1.476,339,2.687,368,0.748,379,1.435,417,2.527,435,2.339,439,0.794,455,1.714,487,1.792,489,2.874,501,1.286,529,1.071,585,1.959,639,0.947,653,3.308,758,2.992,767,1.951,770,3.272,771,1.599,774,1.5,777,2.494,785,0.916,790,1.078,792,2.804,811,1.334,813,2.096,819,3.272,822,2.494,847,3.103,848,2.03,850,2.94,854,2.984,895,1.255,915,1.649,929,2.198,948,1.056,961,4.988,1065,2.462,1069,1.612,1100,2.03,1132,1.804,1164,2.914,1199,1.72,1248,2.94,1249,4.187,1323,3.235,1330,1.274,1371,0.931,1386,3.103,1405,3.308,1444,1.518,1450,1.904,1468,2.12,1503,1.197,1592,1.904,1613,3.313,1649,0.964,1666,1.319,1701,1.909,1712,3.641,1740,3.308,1777,3.582,1811,2.03,1812,4.299,1866,1.951,1916,0.973,1919,1.492,1937,2.247,1938,0.901,1943,0.964,1949,1.571,1956,0.964,1957,0.858,1976,0.981,1983,1.376,1990,1.989,2008,3.625,2009,1.989,2011,2.856,2061,3.223,2065,1.355,2074,1.171,2076,3.138,2098,2.585,2102,1.319,2104,2.15,2108,4.727,2114,2.585,2121,1.531,2125,3.641,2136,1.586,2174,3.157,2175,3.223,2179,1.319,2268,2.804,2363,2.94,2547,3.308,2680,2.198,2741,2.687,2813,1.72,2815,3.721,2823,1.586,2824,1.804,2828,4.092,2831,1.804,2832,1.804,2869,4.529,2871,4.828,2874,3.103,2875,1.904,2876,3.103,2877,6.253,2878,1.804,2881,1.804,2958,2.03,2972,2.03,2983,1.904,3179,6.012,3209,3.582,3245,2.198,3275,3.308,3437,3.103,3524,2.804,3572,3.582,3574,2.198,3597,2.94,3621,1.72,3662,3.103,3696,3.582,3742,2.198,3787,4.828,3789,2.03,3836,3.582,3854,4.534,4023,2.198,4024,2.198,4120,4.828,4144,8.247,4145,2.453,4146,3.998,4147,3.998,4148,4.529,4149,5.06,4150,3.998,4151,3.998,4152,3.998,4153,3.998,4154,3.998,4155,3.998,4156,3.998,4157,3.998,4158,2.453,4159,6.891,4160,3.998,4161,2.453,4162,9.841,4163,5.06,4164,7.266,4165,2.453,4166,2.453,4167,3.308,4168,2.198,4169,2.453,4170,5.06,4171,2.453,4172,4.534,4173,2.198,4174,2.03,4175,2.453,4176,2.198,4177,6.426,4178,5.835,4179,2.453,4180,5.06,4181,2.453,4182,3.998,4183,6.891,4184,5.835,4185,5.835,4186,2.453,4187,3.582,4188,5.06,4189,5.835,4190,2.453,4191,2.453,4192,2.453,4193,2.453,4194,2.453,4195,3.998,4196,2.453,4197,6.891,4198,6.426,4199,3.998,4200,2.453,4201,3.998,4202,3.998,4203,5.835,4204,2.453,4205,3.582,4206,3.582,4207,3.998,4208,3.998,4209,2.453,4210,5.835,4211,3.998,4212,3.582,4213,3.998,4214,3.582,4215,3.998,4216,2.453,4217,2.453,4218,2.453,4219,2.453,4220,2.453,4221,3.998,4222,2.453,4223,2.453,4224,3.998,4225,2.453,4226,5.06,4227,2.453,4228,5.06,4229,2.453,4230,2.453,4231,2.453,4232,2.453,4233,3.998,4234,2.453,4235,2.453,4236,2.453,4237,2.453,4238,3.998,4239,2.453,4240,2.453,4241,2.453,4242,2.453,4243,2.453,4244,2.453,4245,2.453,4246,3.998,4247,2.453,4248,2.453,4249,2.453,4250,2.453,4251,2.453,4252,5.06,4253,2.453,4254,2.453,4255,2.453,4256,2.453,4257,3.998,4258,2.453,4259,2.453,4260,2.453,4261,2.453,4262,3.998,4263,2.453,4264,3.998,4265,2.453,4266,2.453,4267,2.453,4268,2.453,4269,2.453,4270,2.453,4271,2.453,4272,2.453,4273,2.453,4274,2.453,4275,2.453,4276,2.453,4277,2.453,4278,2.453,4279,2.453,4280,2.453,4281,2.453,4282,2.453,4283,2.453,4284,2.453,4285,3.998,4286,2.453,4287,2.453,4288,2.453,4289,3.998,4290,2.453,4291,2.453,4292,5.835,4293,3.998,4294,7.266,4295,2.453,4296,2.453,4297,2.453,4298,2.453,4299,2.453,4300,2.453,4301,2.453,4302,2.453,4303,2.453,4304,2.453,4305,2.453,4306,2.453,4307,2.453,4308,2.453,4309,2.453,4310,2.453,4311,2.453,4312,2.453,4313,2.453,4314,2.453,4315,5.06,4316,2.453,4317,5.06,4318,2.453,4319,2.453,4320,5.06,4321,2.453,4322,5.06,4323,5.06,4324,5.06,4325,5.06,4326,5.06,4327,5.06,4328,6.426,4329,2.453,4330,2.453,4331,2.453,4332,2.453,4333,2.453,4334,2.453,4335,2.453,4336,3.998,4337,2.453,4338,3.998,4339,2.453,4340,2.453,4341,3.998,4342,2.453,4343,2.453,4344,2.453,4345,2.453,4346,2.453,4347,2.453]],["title/classes/TimeScale.html",[0,0.082,4348,4.561]],["body/classes/TimeScale.html",[0,0.077,2,1.155,3,0.186,4,0.174,5,0.174,10,0.192,11,0.429,14,1.155,17,1.407,19,2.311,20,0.005,21,1.104,22,1.418,24,0.38,28,0.321,39,0.186,41,0.735,75,1.233,78,0.004,79,0.003,80,0.002,85,0.771,91,3.457,94,1.88,95,1.772,97,1.792,109,1.44,110,0.763,117,4.198,126,1.094,134,3.107,136,0.763,145,1.982,168,1.373,179,1.982,196,1.905,220,4.789,231,1.792,273,1.792,284,2.599,295,4.403,313,1.294,336,1.385,687,2.371,774,1.948,789,2.371,1916,2.33,1941,2.918,2150,3.78,2153,3.98,2159,4.304,2160,3.457,2161,2.697,2169,3.858,2176,5.343,2177,5.343,2179,3.547,2181,4.574,2182,4.574,2183,5.086,2184,3.858,2185,3.858,2189,2.777,2190,4.433,2192,5.533,2193,3.858,2305,5.742,2306,4.849,2307,5.742,2339,3.491,3449,3.928,3450,5.909,3451,5.457,3452,5.909,3453,5.119,3455,4.254,3456,4.254,3457,4.254,3458,4.254,3463,4.254,3464,4.254,3465,4.254,3466,4.254,3467,4.254,3468,4.254,3469,4.254,3470,4.254,3471,4.254,3472,4.254,3473,4.254,3474,4.254,3475,4.254,3476,4.254,3477,4.254,3479,4.254,3480,4.254,3482,3.928,3483,4.254,3484,4.254,3485,3.928,3639,4.254,3651,4.254,4348,5.909,4349,8.906,4350,7.578,4351,4.748,4352,7.706,4353,4.748,4354,4.748,4355,5.909,4356,4.748,4357,4.748,4358,4.748,4359,4.748]],["title/classes/UtilityService.html",[0,0.082,329,3.422]],["body/classes/UtilityService.html",[0,0.066,2,0.998,3,0.161,4,0.151,5,0.151,10,0.329,12,0.748,13,0.571,17,1.202,19,2.124,20,0.005,21,0.961,22,1.233,24,0.34,28,0.332,39,0.161,42,1.679,47,1.447,55,1.55,57,1.854,75,0.852,78,0.004,79,0.003,80,0.002,85,0.666,94,1.37,96,4.066,109,0.896,110,0.876,112,1.548,114,1.585,119,1.832,128,1.803,136,0.759,151,1.803,154,1.953,168,1.406,179,1.807,183,0.77,196,2.169,217,1.734,226,2.467,229,2.337,231,2.583,245,2.481,273,1.616,284,1.773,285,0.743,289,1.619,294,1.702,319,2.653,320,2.653,329,3.996,334,1.448,336,2.616,371,3.395,411,1.288,492,3.863,612,2.839,679,1.269,783,2.901,785,2.611,836,3.996,837,2.778,838,4.091,854,3.041,895,3.922,932,3.676,1100,4.92,1371,2.655,1432,1.558,1468,2.04,1666,2.206,1683,2.758,1684,2.653,1704,2.151,1910,1.613,1916,2.259,1933,1.412,2150,4.078,2164,4.221,2175,2.266,2179,4.709,2183,3.761,2240,4.17,2307,2.877,2934,3.395,2971,2.758,2983,3.185,2986,3.395,2999,3.395,3011,3.185,3032,4.92,3179,3.395,3598,3.017,3882,3.676,4187,3.676,4360,4.103,4361,5.946,4362,5.946,4363,5.946,4364,5.946,4365,5.946,4366,5.946,4367,8.489,4368,4.103,4369,4.103,4370,4.103,4371,5.946,4372,4.103,4373,6.994,4374,5.946,4375,4.103,4376,9.403,4377,4.103,4378,4.103,4379,4.103,4380,4.103,4381,4.103,4382,8.489,4383,6.994,4384,4.103,4385,5.946,4386,4.103,4387,4.103,4388,5.946,4389,4.103,4390,6.994,4391,4.103,4392,6.994,4393,7.669,4394,7.669,4395,4.103,4396,4.103,4397,4.103,4398,4.103,4399,4.103,4400,4.103,4401,4.103,4402,5.946,4403,4.103,4404,4.103,4405,8.489,4406,4.103,4407,4.103,4408,4.103,4409,4.103,4410,9.403,4411,4.103,4412,4.103,4413,4.103,4414,4.103,4415,3.676,4416,5.946,4417,4.103,4418,5.946,4419,4.103,4420,4.103,4421,4.103,4422,5.946,4423,6.994,4424,4.103,4425,4.103,4426,4.103,4427,4.103,4428,4.103,4429,4.103,4430,4.103,4431,6.994,4432,4.103,4433,4.103,4434,4.103,4435,4.103,4436,4.103,4437,4.103,4438,4.103,4439,4.103,4440,4.103,4441,4.103,4442,4.103,4443,4.103,4444,4.103,4445,4.103,4446,9.283,4447,4.103,4448,4.103,4449,4.103,4450,6.994,4451,4.103,4452,4.103,4453,4.103,4454,4.103,4455,4.103,4456,6.994,4457,4.103,4458,6.994,4459,4.103,4460,4.103,4461,4.103,4462,5.946,4463,4.103,4464,4.103,4465,4.103,4466,4.103,4467,4.103,4468,4.103,4469,5.946,4470,4.103,4471,4.103,4472,4.103]],["title/classes/VerticalBarAccessors.html",[0,0.082,4473,4.561]],["body/classes/VerticalBarAccessors.html",[0,0.104,2,1.571,3,0.253,4,0.237,5,0.237,7,2.494,10,0.261,11,0.526,12,1.264,13,1.399,14,1.571,15,5.666,16,5.105,17,1.379,19,1.529,20,0.005,21,0.731,22,0.938,23,3.151,24,0.381,28,0.345,38,1.73,39,0.253,41,0.9,56,3.775,57,2.079,58,7.094,59,5.918,75,0.925,78,0.003,79,0.004,80,0.003,117,4.028,164,1.789,202,6.146,204,4.59,207,5.767,209,5.089,210,4.59,211,5.342,212,5.342,214,3.224,259,4.181,295,4.345,1007,2.222,1065,3.337,1876,7.239,1877,5.342,1878,5.784,1879,5.784,1880,5.784,1881,5.784,1882,5.784,1883,4.174,1884,5.784,1885,4.174,1886,5.784,1887,4.174,1888,7.239,1889,4.174,1891,5.784,1892,5.784,2302,4.339,4473,7.239,4474,9.243]],["title/classes/XYAccessors.html",[0,0.082,2266,3.422]],["body/classes/XYAccessors.html",[0,0.114,2,1.72,3,0.277,4,0.26,5,0.26,7,2.73,8,1.841,10,0.285,11,0.556,12,1.228,17,0.97,20,0.005,24,0.268,28,0.277,33,2.353,34,1.685,38,1.894,39,0.335,40,0.004,42,2.29,47,2.321,57,2.083,60,5.742,62,5.742,75,1.013,78,0.004,79,0.004,80,0.004,94,1.64,109,2.005,110,0.856,136,0.659,164,1.891,220,3.801,245,2.603,651,3.136,787,1.72,790,3.105,1164,4.267,1974,2.286,2162,2.092,2179,4.594,2265,6.171,2266,5.742,2269,4.135,2270,4.135,2822,5.33,2892,7.654,2893,7.654,2894,7.068,4475,7.068]],["title/classes/XYGridConfig.html",[0,0.082,87,3.292]],["body/classes/XYGridConfig.html",[0,0.084,2,1.27,3,0.204,4,0.192,5,0.192,8,1.516,10,0.211,11,0.458,14,1.937,17,1.351,20,0.005,24,0.355,28,0.334,39,0.204,41,0.784,75,1.22,78,0.003,79,0.004,80,0.003,83,2.375,84,3.256,87,5.147,90,1.203,94,1.83,95,3.18,96,3.733,97,2.49,98,5.853,99,5.853,100,3.975,101,3.359,102,1.885,103,3.219,104,3.434,105,3.434,106,1.834,108,4.269,109,2.179,110,0.909,111,3.124,112,2.178,113,6.24,114,3.618,115,3.496,116,2.31,117,3.802,119,1.945,120,6.056,121,4.729,122,4.934,124,3.359,126,2.05,128,3.091,129,3.659,130,4.839,131,2.45,132,5.645,133,3.837,134,3.309,135,4.281,136,0.486,137,3.507,138,3.837,139,2.339,140,3.149,141,3.837,142,2.194,143,3.837,144,3.837,145,1.052,146,3.837,148,2.739,149,2.387,155,4.442,157,2.606,174,4.317,181,5.821,187,0.919,201,4.549,249,2.964,258,2.387,261,4.05,262,4.317,407,4.317,493,2.875,557,2.438,632,2.248,1520,5.173,1831,4.675,1853,4.675,1860,2.735,1861,2.806,1862,2.806,1863,2.806,1864,2.806,1865,2.806,1866,2.547,1867,2.806,2072,4.172,2542,3.837,3575,4.675,4476,9.164,4477,5.218,4478,5.218,4479,5.218,4480,5.218,4481,5.218,4482,5.218,4483,7.036,4484,7.036,4485,5.218,4486,5.218,4487,5.218,4488,5.218,4489,5.218,4490,5.218]],["title/classes/XYRenderer.html",[0,0.082,2822,3.176]],["body/classes/XYRenderer.html",[0,0.069,2,1.042,3,0.168,4,0.225,5,0.157,10,0.396,11,0.399,12,1.262,13,1.334,17,1.346,19,2.246,20,0.005,21,1.084,22,1.362,24,0.372,28,0.281,34,0.786,38,1.148,39,0.168,41,0.683,42,1.028,47,1.042,53,1.028,75,1.121,78,0.002,79,0.003,80,0.002,85,1.44,94,1.832,96,2.498,97,1.667,109,1.709,110,0.771,112,1.586,117,4.041,119,0.875,136,0.803,148,2.111,168,1.245,179,1.912,183,1.013,196,1.732,198,1.376,213,2.684,220,4.452,222,2.657,231,1.164,246,2.879,251,2.756,270,4.633,273,1.667,274,4.633,276,3.966,277,3.966,283,2.928,284,2.184,285,1.11,287,1.345,289,1.961,294,2.096,298,3.298,299,3.735,300,3.735,301,2.407,303,2.77,307,2.994,310,3.215,327,2.091,333,2.407,336,2.09,343,2.673,368,1.869,384,2.214,394,2.366,395,2.879,396,2.77,411,1.345,439,1.386,550,1.667,597,2.994,612,2.045,647,2.06,719,1.815,733,1.148,748,1.358,752,2.988,785,2.92,800,1.376,806,2.303,815,2.139,854,4.001,948,1.132,1164,2.139,1170,3.388,1266,2.77,1269,1.547,1293,5.058,1323,2.65,1371,1.626,1468,2.09,1503,2.994,1515,2.673,1534,5.075,1649,2.816,1652,3.15,1667,3.15,1814,2.366,1842,3.15,1917,1.522,1918,1.132,1933,1.474,1935,1.626,1936,1.626,1937,1.897,1938,1.573,1941,2.625,1983,1.474,1984,1.599,2005,2.046,2014,1.626,2018,2.29,2038,2.139,2091,2.433,2100,2.673,2132,3.588,2147,2.506,2150,3.437,2178,3.588,2427,3.15,2623,4.51,2741,4.122,2816,2.77,2822,3.827,2841,2.77,2849,3.004,2867,4.633,2971,2.879,3524,3.004,3579,4.761,3580,6.072,3581,4.761,3582,4.761,3583,4.761,3584,4.761,3585,4.761,3586,3.544,3587,3.544,3588,3.544,3589,3.544,3591,5.561,3594,3.325,3596,3.544,3597,3.15,3598,3.15,3599,4.51,3600,3.325,3601,6.072,3602,3.544,3603,3.325,3604,3.325,3605,3.325,3606,3.544,3607,2.879,3608,3.325,3609,3.325,3610,3.15,3611,3.325,3612,3.544,3613,3.325,3614,3.544,3615,5.561,3616,3.325,3617,5.752,3618,3.544,3619,2.77,3620,3.544,3621,4.301,3622,3.325,3623,3.544,3624,3.325,3625,3.544,3626,3.325,3627,3.544,3628,3.325,4491,6.134,4492,4.284,4493,4.284,4494,4.284,4495,4.284,4496,4.284,4497,4.284,4498,4.284,4499,4.284]],["title/interfaces/ZoneCross.html",[40,0.003,2874,3.951]],["body/interfaces/ZoneCross.html",[3,0.284,4,0.267,5,0.267,10,0.293,11,0.565,20,0.005,22,1.398,24,0.352,28,0.284,39,0.364,40,0.004,78,0.004,79,0.004,80,0.004,136,0.897,168,1.191,216,4.329,217,4.329,285,1.571,313,1.424,368,2.211,417,3.281,795,2.211,1613,2.497,1712,4.527,1893,1.099,2008,3.295,2175,5.574,2869,5.632,2870,6.003,2871,6.003,2872,6.501,2873,6.501,2874,6.736,2875,5.632,2876,5.632,2877,5.632]],["title/classes/ZoomPlugin.html",[0,0.082,2906,4.212]],["body/classes/ZoomPlugin.html",[0,0.069,2,1.032,3,0.166,4,0.156,5,0.156,10,0.171,11,0.396,12,1.037,14,1.032,17,1.313,19,1.005,20,0.005,21,0.689,22,0.616,24,0.313,28,0.383,39,0.239,40,0.002,41,0.679,55,2.437,75,0.873,78,0.003,79,0.003,80,0.002,83,1.975,89,1.758,90,1.1,94,1.807,96,3.497,97,1.936,103,1.941,106,1.587,109,1.557,110,0.664,112,0.939,114,1.639,117,3.422,119,1.244,126,1.404,132,2.482,136,0.395,142,1.964,145,0.855,148,2.68,149,1.941,168,1.179,179,1.783,183,1.211,187,0.747,196,1.958,198,0.952,226,2.527,231,2.459,258,3.26,273,1.655,301,1.702,313,1.398,314,2.116,319,2.743,320,2.743,321,1.256,324,1.864,332,2.119,336,1.777,347,3.119,418,2.56,436,2.281,443,2.799,444,2.861,446,1.857,447,2.861,459,1.503,464,1.046,466,2.883,467,2.647,476,2.647,477,2.647,478,2.647,479,2.647,481,1.803,529,1.137,550,1.936,588,2.281,589,2.281,592,2.56,601,1.655,602,1.507,620,3.51,641,0.878,647,1.22,648,3.51,678,2.224,714,3.51,717,1.912,766,1.372,800,1.747,803,2.41,838,2.482,895,2.17,948,1.121,1023,2.119,1136,2.647,1137,2.647,1170,3.936,1180,3.801,1181,3.51,1186,1.372,1187,2.482,1195,2.647,1196,2.647,1209,2.482,1210,2.647,1267,2.2,1371,1.611,1468,1.238,1474,2.975,1517,3.293,1654,2.224,1683,2.851,1684,2.743,1686,2.071,1696,2.224,1735,3.51,1750,1.584,1798,5.04,1809,4.302,1819,3.293,1866,2.071,1918,1.61,1930,1.639,2026,2.353,2036,1.941,2041,2.17,2051,1.864,2062,2.281,2074,2.025,2111,2.482,2150,2.676,2243,2.851,2244,4.094,2475,3.51,2504,3.51,2752,3.293,2792,4.728,2819,2.851,2895,7.318,2896,8.108,2897,6.385,2898,5.457,2899,5.457,2900,5.457,2901,8.482,2902,3.51,2903,3.51,2904,3.801,2905,3.119,2906,5.04,2907,3.801,2908,3.801,2909,3.801,2910,3.801,2911,3.801,2912,3.801,2913,3.801,2914,3.801,2915,3.801,2916,5.531,2917,6.045,2918,3.801,2919,3.801,2920,3.801,2921,3.801,2922,3.801,2923,3.801,2924,3.801,2925,3.801,2926,3.801,2927,3.801,2928,3.801,2929,3.293,2930,3.801,2931,3.801,2932,3.801,2933,3.801,2934,3.51,2935,3.801,2936,3.801,2937,3.801,2938,3.801,2939,3.801,2940,3.801,2941,3.801,2942,3.801,2943,3.801,2944,6.824,2945,3.801,2946,3.801,2947,3.801,2948,3.801,2949,3.801,2950,3.801,2951,3.801,2952,5.457,2953,3.801,2954,3.801,2955,3.801,2956,3.801,2957,3.801,2958,3.51,2959,3.801,2960,3.801,2961,3.801,2962,3.801,2963,3.801,2964,3.801,2965,3.801,2966,3.801,2967,3.801,2968,3.801,2969,3.801,2970,3.51,2971,4.094,2972,3.51,2973,3.801,2974,3.801,2975,3.801,2976,3.801,2977,3.801,2978,6.385,2979,5.457,2980,6.978,2981,3.801,2982,5.457,2983,6.045,2984,5.457,2985,3.801,2986,5.04,2987,3.801,2988,5.457,2989,6.385,2990,5.457,2991,3.801,2992,3.801,2993,3.801,2994,3.801,2995,3.801,2996,3.801,2997,3.801,2998,3.801,2999,3.51,3000,3.801,3001,3.801,3002,3.801,3010,3.801,4500,4.243,4501,4.243,4502,4.243,4503,4.243]],["title/dependencies.html",[3655,4.746,4504,4.266]],["body/dependencies.html",[20,0.005,52,1.953,78,0.004,79,0.005,80,0.004,91,4.093,119,1.595,313,1.933,314,2.462,887,6.996,888,6.996,889,6.996,1132,5.741,1907,3.5,3172,6.46,3655,7.034,4168,6.996,4505,7.808,4506,7.808,4507,7.808,4508,9.063,4509,9.063,4510,9.063,4511,7.808,4512,7.808]],["title/miscellaneous/enumerations.html",[4513,2.991,4514,5.479]],["body/miscellaneous/enumerations.html",[10,0.254,12,1.096,20,0.005,52,2.29,53,1.511,78,0.003,79,0.004,80,0.003,90,1.123,109,1.737,110,0.983,187,1.401,201,4.069,216,3.685,217,3.685,285,1.139,294,1.531,332,3.971,333,2.222,404,3.715,459,1.552,493,3.307,502,5.202,607,7.124,674,4.069,676,5.344,737,4.885,746,4.069,747,4.413,748,1.393,749,4.069,755,1.946,794,4.23,796,5.344,797,5.344,798,5.344,799,5.344,1021,5.638,1069,2.005,1186,2.572,1269,3.148,1454,3.971,1591,7.81,1613,2.166,1894,2.473,1908,3.181,1918,1.663,1921,3.019,1923,3.181,1926,3.181,1927,3.181,1929,3.181,1930,3.071,2008,2.389,2087,4.069,2105,4.961,2106,5.141,2107,5.141,2108,4.961,2109,4.069,2110,4.069,2111,4.652,2827,5.859,2870,5.207,2875,4.885,2876,4.885,2877,6.172,3116,6.579,3168,4.885,4513,4.413,4514,5.638,4515,8.104,4516,7.952,4517,7.81,4518,7.952,4519,5.638,4520,6.293,4521,6.293,4522,5.638,4523,5.638,4524,7.81,4525,5.638,4526,5.638,4527,5.638,4528,7.124,4529,7.124,4530,6.293,4531,6.293,4532,7.952,4533,5.638,4534,6.293,4535,6.293,4536,5.638,4537,6.293]],["title/index.html",[10,0.172,967,3.311,4538,3.529]],["body/index.html",[5,0.302,12,1.035,20,0.005,28,0.322,32,3.107,78,0.003,79,0.004,80,0.003,83,1.686,90,1.163,91,4.896,92,4.664,112,1.472,134,2.402,154,2.184,187,1.172,259,3.616,289,1.322,314,1.807,417,2.218,429,5.958,432,4.014,435,3.89,482,2.922,487,2.981,508,3.401,557,3.107,647,1.912,771,3.913,777,4.149,800,1.492,834,3.401,853,5.958,869,5.502,967,6.389,1066,5.502,1069,2.119,1207,4.89,1407,5.502,1408,4.47,1515,4.149,1597,4.664,1816,5.958,1896,2.661,1901,3.576,1903,1.968,1969,2.569,1985,2.661,2019,3.179,2074,3.929,2091,4.675,2160,3.486,2280,4.89,2775,5.958,3168,5.162,3208,5.502,3437,5.162,3451,5.502,3526,5.958,3619,4.3,3653,6.573,3656,5.502,3657,5.502,3665,5.958,3689,5.958,3737,5.958,4148,5.162,4174,5.502,4212,5.958,4415,5.958,4538,6.81,4539,5.502,4540,6.651,4541,6.651,4542,5.958,4543,6.651,4544,6.651,4545,6.651,4546,6.651,4547,6.651,4548,6.651,4549,6.651,4550,6.651,4551,6.651,4552,6.651,4553,6.651,4554,6.651,4555,6.651,4556,6.651,4557,6.651,4558,5.958,4559,6.651,4560,6.651,4561,5.958,4562,6.651,4563,6.651,4564,8.231,4565,6.651,4566,5.958,4567,6.651,4568,5.958,4569,6.651,4570,5.958,4571,6.651,4572,6.651,4573,6.651,4574,6.651,4575,6.651,4576,6.651,4577,8.231,4578,6.651,4579,6.651,4580,6.651,4581,8.231,4582,6.651,4583,6.651,4584,6.651,4585,5.958,4586,5.502,4587,5.502,4588,5.958,4589,5.502]],["title/license.html",[967,3.311,4538,3.529,4590,3.822]],["body/license.html",[0,0.058,4,0.34,5,0.317,17,0.494,20,0.003,21,0.611,28,0.141,78,0.003,79,0.003,80,0.002,85,0.585,134,1.3,184,3.514,187,0.634,188,1.799,217,1.522,244,2.551,257,0.876,301,1.509,336,1.051,379,4.738,456,2.328,459,0.888,585,1.8,716,3.226,752,1.165,755,1.114,780,1.279,822,2.247,825,1.415,850,2.648,869,2.979,939,2.979,1067,2.432,1164,1.799,1234,2.42,1247,2.086,1371,1.367,1444,1.367,1515,5.39,1617,3.791,1634,1.367,1649,3.032,1665,3.226,1712,3.37,1778,3.226,1814,2.983,1860,2.831,1893,0.546,1899,2.88,1912,3.272,1972,1.183,1977,1.441,1981,1.441,1983,2.478,1998,1.441,2010,1.984,2011,1.415,2018,1.344,2019,1.391,2033,4.97,2044,1.647,2045,3.579,2049,4.88,2069,2.831,2074,2.578,2076,2.904,2082,2.983,2127,2.328,2141,4.043,2155,2.247,2162,2.283,2274,2.525,2275,2.648,2279,3.787,2542,2.648,2546,2.979,2547,2.979,2690,3.226,2772,3.226,3168,2.795,3172,2.979,3186,8.707,3260,3.226,3275,5.362,3437,7.915,3445,3.226,3494,2.648,3607,2.42,3610,3.971,3621,2.525,3780,3.226,3812,3.226,3828,3.226,3829,3.226,3835,6.451,3944,3.226,3994,5.806,4167,8.083,4174,2.979,4206,3.226,4214,3.226,4352,2.979,4536,3.226,4542,3.226,4558,5.806,4561,5.806,4566,5.806,4568,6.911,4570,3.226,4590,9.121,4591,7.2,4592,6.481,4593,3.601,4594,3.601,4595,3.601,4596,8.835,4597,9.359,4598,7.2,4599,7.714,4600,9.528,4601,8.999,4602,3.601,4603,3.601,4604,8.999,4605,9.256,4606,7.714,4607,5.401,4608,3.601,4609,7.714,4610,3.601,4611,3.601,4612,7.2,4613,3.601,4614,8.835,4615,7.2,4616,3.601,4617,6.481,4618,5.401,4619,3.601,4620,3.601,4621,5.401,4622,3.601,4623,5.401,4624,3.601,4625,3.601,4626,3.601,4627,3.601,4628,3.601,4629,3.601,4630,3.601,4631,3.601,4632,6.481,4633,5.401,4634,3.601,4635,3.601,4636,8.1,4637,5.401,4638,6.481,4639,6.481,4640,3.601,4641,3.226,4642,3.601,4643,3.601,4644,3.601,4645,3.601,4646,6.481,4647,5.401,4648,3.601,4649,8.835,4650,5.401,4651,3.601,4652,5.401,4653,9.718,4654,3.601,4655,3.601,4656,3.601,4657,3.601,4658,5.401,4659,3.601,4660,3.601,4661,3.601,4662,3.601,4663,7.2,4664,7.714,4665,3.601,4666,5.401,4667,7.2,4668,5.401,4669,3.601,4670,7.714,4671,5.401,4672,3.601,4673,3.601,4674,6.481,4675,3.601,4676,3.601,4677,3.601,4678,3.601,4679,5.401,4680,3.601,4681,3.601,4682,3.601,4683,6.481,4684,3.601,4685,3.601,4686,3.601,4687,3.601,4688,3.601,4689,7.2,4690,8.999,4691,3.601,4692,5.401,4693,6.481,4694,5.401,4695,5.401,4696,5.401,4697,6.481,4698,5.401,4699,6.481,4700,5.401,4701,5.401,4702,5.401,4703,5.401,4704,3.601,4705,5.401,4706,3.601,4707,7.714,4708,8.399,4709,5.401,4710,5.401,4711,5.401,4712,3.601,4713,5.401,4714,3.601,4715,3.601,4716,3.601,4717,6.481,4718,3.601,4719,3.601,4720,3.601,4721,5.401,4722,5.401,4723,3.601,4724,3.601,4725,3.601,4726,3.601,4727,3.601,4728,3.601,4729,5.401,4730,3.601,4731,3.601,4732,3.601,4733,3.601,4734,3.601,4735,3.601,4736,6.481,4737,3.601,4738,3.601,4739,6.481,4740,3.601,4741,3.601,4742,3.601,4743,3.601,4744,8.639,4745,3.601,4746,3.601,4747,3.601,4748,3.601,4749,7.2,4750,5.401,4751,3.601,4752,3.601,4753,3.601,4754,6.481,4755,3.601,4756,3.601,4757,5.401,4758,5.401,4759,3.601,4760,3.601,4761,3.601,4762,3.601,4763,5.401,4764,3.601,4765,3.601,4766,3.601,4767,3.601,4768,3.601,4769,3.601,4770,3.601,4771,3.601,4772,6.481,4773,7.2,4774,3.601,4775,3.601,4776,3.601,4777,3.601,4778,3.601,4779,3.601,4780,3.601,4781,3.601,4782,5.401,4783,3.601,4784,3.601,4785,5.401,4786,3.601,4787,3.601,4788,3.601,4789,3.601,4790,3.601,4791,7.2,4792,6.481,4793,6.481,4794,6.481,4795,5.401,4796,6.481,4797,5.401,4798,5.401,4799,5.401,4800,3.601,4801,3.601,4802,3.601,4803,3.601,4804,3.601,4805,3.601,4806,5.401,4807,3.601,4808,3.601,4809,3.601,4810,7.714,4811,3.601,4812,3.601,4813,3.601,4814,3.601,4815,3.601,4816,3.601,4817,3.601,4818,3.601,4819,7.714,4820,3.601,4821,3.601,4822,3.601,4823,3.601,4824,3.601,4825,3.601,4826,3.601,4827,3.601,4828,3.601,4829,3.601,4830,3.601,4831,3.601,4832,3.601,4833,3.601,4834,3.601,4835,6.481,4836,3.601,4837,3.601,4838,3.601,4839,3.226,4840,3.601,4841,5.401,4842,3.601,4843,3.601,4844,3.601,4845,3.601,4846,3.601,4847,3.601,4848,3.601,4849,3.601,4850,3.601,4851,3.601,4852,3.601,4853,3.601,4854,3.601,4855,3.601,4856,5.401,4857,5.401,4858,3.601,4859,3.601,4860,3.601,4861,3.601,4862,3.601,4863,1.441,4864,3.601,4865,3.601,4866,3.601,4867,3.601,4868,3.601,4869,3.601,4870,3.601,4871,3.601,4872,3.601,4873,3.601,4874,3.601,4875,3.601]],["title/modules.html",[3654,5.725]],["body/modules.html",[20,0.005,78,0.004,79,0.005,80,0.004,678,4.279,1848,7.314,3653,6.002,3654,6.754,4839,7.314,4876,8.164]],["title/overview.html",[4539,5.725]],["body/overview.html",[2,1.603,20,0.005,32,3.078,78,0.003,79,0.004,80,0.003,151,2.895,201,4.261,336,2.387,483,5.465,484,3.743,487,2.954,505,5.321,507,5.465,510,5.465,512,5.186,514,5.465,516,5.06,518,5.465,520,5.465,522,5.465,525,5.321,808,5.114,831,6.546,848,5.452,1893,0.999,2029,2.304,2542,4.845,2917,6.352,3166,5.452,3652,6.771,3653,7.811,3655,5.114,3656,5.452,3657,5.452,3658,5.904,3659,5.904,3660,5.904,3661,5.904,3662,6.91,4539,5.452,4877,6.59,4878,6.59]],["title/miscellaneous/typealiases.html",[4513,2.991,4879,6.115]],["body/miscellaneous/typealiases.html",[10,0.296,12,0.921,13,1.215,20,0.004,24,0.354,33,2.152,37,2.439,78,0.004,79,0.004,80,0.004,83,1.856,164,1.931,185,3.837,186,3.837,268,6.057,269,6.057,270,5.641,271,6.772,281,7.817,285,1.325,289,1.854,313,1.436,314,2.371,550,2.371,733,1.962,789,4.358,802,2.442,895,5.117,1468,2.545,1633,6.057,1693,2.877,1694,7.817,1705,3.216,1894,2.877,1911,2.877,1912,2.559,1913,2.929,1914,2.929,1915,3.429,1941,2.231,2004,2.442,2022,2.877,2023,2.368,2024,2.929,2025,3.429,2030,4.043,2056,4.692,2060,3.037,2149,4.567,2158,4.733,2159,4.956,2160,3.837,4513,5.133,4515,8.432,4880,7.321,4881,6.559,4882,7.321]],["title/miscellaneous/variables.html",[4513,2.991,4883,5.479]],["body/miscellaneous/variables.html",[0,0.04,4,0.09,10,0.099,12,0.735,13,0.705,20,0.005,24,0.38,42,1.82,47,1.845,52,2.593,53,0.961,57,0.537,59,1.438,78,0.003,79,0.002,80,0.001,89,0.606,90,1.45,102,0.658,106,0.64,109,2.223,110,0.942,111,2.145,112,0.886,115,2.401,119,2.051,120,1.589,121,1.652,122,1.723,126,1.482,131,0.707,136,0.91,142,1.103,148,0.846,151,3.954,157,1.227,168,0.883,179,0.495,182,1.08,196,1.293,198,1.137,201,1.589,216,2.719,217,2.719,226,1.02,231,2.13,244,0.697,251,0.707,257,1.421,283,3.292,284,1.843,285,0.445,288,3.107,289,0.796,294,0.598,303,1.416,307,1.954,336,2.212,394,2.211,395,2.691,396,2.589,400,2.944,417,0.82,435,3.762,436,3.459,443,0.76,451,2.944,455,1.356,493,3.736,502,5.877,529,1.357,581,1.499,590,3.107,591,2.944,608,3.587,640,1.907,674,1.589,675,2.202,676,2.691,677,2.202,678,1.288,679,0.76,685,2.202,737,1.907,748,0.886,755,2.249,771,2.573,773,2.724,789,2,800,0.551,806,2.153,838,1.438,854,2.048,890,2.807,891,3.587,948,1.339,1023,1.227,1066,2.033,1088,2.202,1093,7.637,1095,6.67,1160,2.589,1182,3.932,1190,1.907,1200,3.107,1234,1.652,1282,3.405,1293,4.902,1371,0.933,1428,2.033,1443,2.033,1448,2.033,1449,2.033,1450,1.907,1451,3.312,1460,4.992,1503,1.199,1515,1.533,1613,0.846,1617,1.438,1633,2.033,1649,0.966,1668,4.389,1691,3.587,1692,3.312,1903,1.499,1918,0.649,1938,1.47,1941,1.544,1943,1.574,1944,0.949,1945,0.983,1946,0.983,1947,0.983,1951,0.807,1955,0.983,1958,0.983,1959,0.983,1973,1.602,2021,0.983,2027,1.315,2097,1.533,2112,1.288,2113,1.589,2149,1.533,2150,2.226,2154,2.498,2155,1.533,2156,1.589,2157,2.589,2159,2.877,2174,1.533,2175,1.357,2188,2.589,2241,2.691,2243,2.691,2274,1.723,2283,1.807,2333,3.587,2334,3.587,2339,3.725,2340,3.587,2342,2.033,2363,1.807,2380,2.202,2403,2.033,2450,2.202,2648,2.033,2789,3.587,2800,2.202,2816,2.589,2820,2.944,2827,2.691,2902,3.312,2903,3.312,3011,1.907,3161,3.312,3419,6.964,3423,3.587,3520,3.587,3607,1.652,3617,2.944,3619,2.589,3721,3.587,3730,1.907,3778,2.202,3782,4.539,3783,2.202,3784,2.202,3785,2.202,3786,3.587,3787,2.033,3788,2.202,3789,2.033,3790,2.202,3791,3.587,3792,2.202,3793,4.539,4027,3.587,4028,3.587,4084,2.033,4103,4.539,4105,4.539,4107,4.539,4120,6.016,4148,3.107,4167,2.033,4172,3.587,4173,2.202,4176,3.587,4205,3.587,4352,5.321,4355,3.587,4513,1.723,4515,4.833,4517,8.475,4519,2.202,4522,2.202,4523,2.202,4524,8.139,4525,4.539,4526,6.179,4527,4.539,4528,4.539,4529,4.539,4533,8.628,4641,2.202,4881,2.202,4883,2.202,4884,4.004,4885,7.581,4886,4.004,4887,4.004,4888,4.004,4889,4.004,4890,5.066,4891,4.004,4892,4.004,4893,5.066,4894,5.841,4895,5.066,4896,4.004,4897,4.004,4898,4.004,4899,4.004,4900,5.066,4901,5.841,4902,4.004,4903,4.004,4904,4.004,4905,5.066,4906,4.004,4907,2.457,4908,2.457,4909,2.457,4910,2.457,4911,2.457,4912,2.457,4913,2.457,4914,2.457,4915,2.457,4916,2.457,4917,2.457,4918,2.457,4919,2.457,4920,2.457,4921,2.457,4922,2.457,4923,2.457,4924,2.457,4925,2.457,4926,2.457,4927,2.457,4928,4.004,4929,2.457,4930,2.457,4931,6.432,4932,5.841,4933,2.457,4934,2.457,4935,2.457,4936,2.457,4937,7.272,4938,6.896,4939,6.896,4940,6.896,4941,6.896,4942,6.896,4943,6.896,4944,6.896,4945,5.066,4946,8.061,4947,2.457,4948,5.066,4949,4.004,4950,2.457,4951,2.457,4952,2.457,4953,5.841,4954,5.841,4955,2.457,4956,4.004,4957,2.457,4958,4.004,4959,4.004,4960,4.004,4961,6.432,4962,4.004,4963,4.004,4964,4.004,4965,4.004,4966,4.004,4967,4.004,4968,4.004,4969,5.841,4970,7.581,4971,2.457,4972,2.457,4973,8.805,4974,4.004,4975,4.004,4976,2.457,4977,4.004,4978,2.457,4979,4.004,4980,2.457,4981,2.457,4982,2.457,4983,2.457,4984,4.004,4985,5.841,4986,5.066,4987,4.004,4988,2.457,4989,4.004,4990,4.004,4991,2.457,4992,2.457,4993,5.066,4994,2.457,4995,2.457,4996,2.457,4997,2.457,4998,2.457,4999,2.457,5000,2.457,5001,2.457,5002,2.457,5003,2.457,5004,2.457,5005,2.457,5006,2.457,5007,4.004,5008,2.457,5009,2.457,5010,2.457,5011,2.457,5012,4.004,5013,2.457,5014,2.457,5015,2.457,5016,2.457,5017,2.457,5018,2.457,5019,2.457,5020,2.457,5021,5.841,5022,2.457,5023,2.457,5024,2.457,5025,2.457,5026,2.457,5027,2.457,5028,2.457,5029,2.457,5030,2.457,5031,2.457,5032,2.457,5033,4.004,5034,2.457,5035,2.457,5036,2.457,5037,2.457,5038,4.004,5039,2.457,5040,2.457,5041,2.457,5042,2.457,5043,2.457,5044,2.457,5045,4.004,5046,2.457,5047,2.457,5048,2.457,5049,2.457,5050,2.457]],["title/additional-documentation/layout.html",[2162,1.262,4585,3.822,4863,1.706]],["body/additional-documentation/layout.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/chart-types.html",[90,0.518,187,0.647,2162,1.086,4863,1.468]],["body/additional-documentation/chart-types.html",[20,0.005,78,0.004,79,0.005,80,0.004,89,1.997,90,1.143,154,2.659,187,1.426,259,4.065,417,2.7,432,4.885,508,4.14,1597,5.676,4586,6.697,4587,6.697]],["title/additional-documentation/chart-types/line.html",[154,1.401,2162,1.262,4863,1.706]],["body/additional-documentation/chart-types/line.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/chart-types/bar.html",[259,1.874,2162,1.262,4863,1.706]],["body/additional-documentation/chart-types/bar.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/chart-types/bar/bucketed-bar.html",[259,1.613,2162,1.086,4586,3.037,4863,1.468]],["body/additional-documentation/chart-types/bar/bucketed-bar.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/chart-types/bar/status.html",[417,1.423,2162,1.262,4863,1.706]],["body/additional-documentation/chart-types/bar/status.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/chart-types/bar/waterfall.html",[2162,1.262,4587,3.529,4863,1.706]],["body/additional-documentation/chart-types/bar/waterfall.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/chart-types/area.html",[89,1.052,2162,1.262,4863,1.706]],["body/additional-documentation/chart-types/area.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/chart-types/pie-and-donut.html",[508,1.877,1597,2.574,2162,1.086,4863,1.468]],["body/additional-documentation/chart-types/pie-and-donut.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/chart-types/spark.html",[432,2.574,2162,1.262,4863,1.706]],["body/additional-documentation/chart-types/spark.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/plugins.html",[557,1.993,2162,1.262,4863,1.706]],["body/additional-documentation/plugins.html",[20,0.005,78,0.004,79,0.005,80,0.004,435,4.796,557,3.83,1207,6.028]],["title/additional-documentation/plugins/tooltips.html",[435,2.495,2162,1.262,4863,1.706]],["body/additional-documentation/plugins/tooltips.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/plugins/popovers.html",[1207,3.136,2162,1.262,4863,1.706]],["body/additional-documentation/plugins/popovers.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/thresholds.html",[2162,1.262,4148,3.311,4863,1.706]],["body/additional-documentation/thresholds.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/timeframe-selection.html",[314,0.997,2162,1.086,4588,3.288,4863,1.468]],["body/additional-documentation/timeframe-selection.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/advanced-usage.html",[777,2.29,2162,1.086,4589,3.037,4863,1.468]],["body/additional-documentation/advanced-usage.html",[12,1.015,20,0.005,78,0.004,79,0.005,80,0.004,83,2.046,90,1.14,289,1.605,487,3.618,777,5.036,800,1.811,834,4.128,1069,2.572,1903,2.389,1969,3.118,2160,4.231,3619,5.219,4589,6.678]],["title/additional-documentation/advanced-usage/chart.html",[90,0.602,2162,1.262,4863,1.706]],["body/additional-documentation/advanced-usage/chart.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/advanced-usage/legend.html",[487,1.912,2162,1.262,4863,1.706]],["body/additional-documentation/advanced-usage/legend.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/advanced-usage/input-structure.html",[834,1.877,1969,1.418,2162,1.086,4863,1.468]],["body/additional-documentation/advanced-usage/input-structure.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/advanced-usage/input-structure/data.html",[12,0.537,2162,1.262,4863,1.706]],["body/additional-documentation/advanced-usage/input-structure/data.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/advanced-usage/input-structure/colors.html",[1069,1.359,2162,1.262,4863,1.706]],["body/additional-documentation/advanced-usage/input-structure/colors.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/advanced-usage/input-structure/markers.html",[1903,1.262,2162,1.262,4863,1.706]],["body/additional-documentation/advanced-usage/input-structure/markers.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/advanced-usage/events.html",[800,0.957,2162,1.262,4863,1.706]],["body/additional-documentation/advanced-usage/events.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/advanced-usage/grid.html",[83,1.081,2162,1.262,4863,1.706]],["body/additional-documentation/advanced-usage/grid.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/advanced-usage/scales.html",[289,0.848,2162,1.262,4863,1.706]],["body/additional-documentation/advanced-usage/scales.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/advanced-usage/scales/domains.html",[2162,1.262,3619,2.758,4863,1.706]],["body/additional-documentation/advanced-usage/scales/domains.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/advanced-usage/scales/formatters.html",[2160,2.236,2162,1.262,4863,1.706]],["body/additional-documentation/advanced-usage/scales/formatters.html",[20,0.005,78,0.004,79,0.005,80,0.004]]],"invertedIndex":[["",{"_index":20,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"components/BasicLegendTileComponent.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"modules/NuiChartsModule.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"additional-documentation/layout.html":{},"additional-documentation/chart-types.html":{},"additional-documentation/chart-types/line.html":{},"additional-documentation/chart-types/bar.html":{},"additional-documentation/chart-types/bar/bucketed-bar.html":{},"additional-documentation/chart-types/bar/status.html":{},"additional-documentation/chart-types/bar/waterfall.html":{},"additional-documentation/chart-types/area.html":{},"additional-documentation/chart-types/pie-and-donut.html":{},"additional-documentation/chart-types/spark.html":{},"additional-documentation/plugins.html":{},"additional-documentation/plugins/tooltips.html":{},"additional-documentation/plugins/popovers.html":{},"additional-documentation/thresholds.html":{},"additional-documentation/timeframe-selection.html":{},"additional-documentation/advanced-usage.html":{},"additional-documentation/advanced-usage/chart.html":{},"additional-documentation/advanced-usage/legend.html":{},"additional-documentation/advanced-usage/input-structure.html":{},"additional-documentation/advanced-usage/input-structure/data.html":{},"additional-documentation/advanced-usage/input-structure/colors.html":{},"additional-documentation/advanced-usage/input-structure/markers.html":{},"additional-documentation/advanced-usage/events.html":{},"additional-documentation/advanced-usage/grid.html":{},"additional-documentation/advanced-usage/scales.html":{},"additional-documentation/advanced-usage/scales/domains.html":{},"additional-documentation/advanced-usage/scales/formatters.html":{}}}],["0",{"_index":119,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"interfaces/ScalesIndex.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["0).append(\"tspan\").text",{"_index":2612,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["0).classed(ignore_interaction_class",{"_index":2550,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["0.05",{"_index":4133,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["0.0722",{"_index":4107,"title":{},"body":{"classes/TextColorProvider.html":{},"miscellaneous/variables.html":{}}}],["0.1",{"_index":2427,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["0.15",{"_index":1088,"title":{},"body":{"classes/ChartPalette.html":{},"miscellaneous/variables.html":{}}}],["0.2126",{"_index":4103,"title":{},"body":{"classes/TextColorProvider.html":{},"miscellaneous/variables.html":{}}}],["0.3",{"_index":5013,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0.5",{"_index":1692,"title":{},"body":{"classes/Grid.html":{},"classes/InteractionLabelPlugin.html":{},"miscellaneous/variables.html":{}}}],["0.7152",{"_index":4105,"title":{},"body":{"classes/TextColorProvider.html":{},"miscellaneous/variables.html":{}}}],["0a4",{"_index":4992,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0m",{"_index":4991,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0x0001",{"_index":4449,"title":{},"body":{"classes/UtilityService.html":{}}}],["0x002d",{"_index":4452,"title":{},"body":{"classes/UtilityService.html":{}}}],["0x0030",{"_index":4450,"title":{},"body":{"classes/UtilityService.html":{}}}],["0x0041",{"_index":4454,"title":{},"body":{"classes/UtilityService.html":{}}}],["0x005f",{"_index":4453,"title":{},"body":{"classes/UtilityService.html":{}}}],["0x0061",{"_index":4455,"title":{},"body":{"classes/UtilityService.html":{}}}],["0x0080",{"_index":4451,"title":{},"body":{"classes/UtilityService.html":{}}}],["0x3",{"_index":4433,"title":{},"body":{"classes/UtilityService.html":{}}}],["0x8)).tostring(16",{"_index":4434,"title":{},"body":{"classes/UtilityService.html":{}}}],["0z",{"_index":4993,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0zm",{"_index":4957,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1",{"_index":336,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Chart.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartTooltipComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/Grid.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/LinearScale.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"license.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1).fill(0",{"_index":1615,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["1,1",{"_index":2119,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["1.0.0",{"_index":4510,"title":{},"body":{"dependencies.html":{}}}],["1.105",{"_index":4949,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.105.895",{"_index":4950,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.3.0",{"_index":4511,"title":{},"body":{"dependencies.html":{}}}],["1.5.0",{"_index":4505,"title":{},"body":{"dependencies.html":{}}}],["1.528",{"_index":4985,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.572",{"_index":4967,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.573",{"_index":4964,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.626.855",{"_index":4978,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.626zm0",{"_index":4982,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.791",{"_index":4954,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.854",{"_index":4983,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.951",{"_index":4976,"title":{},"body":{"miscellaneous/variables.html":{}}}],["10",{"_index":201,"title":{},"body":{"classes/AxisConfig.html":{},"components/ChartComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/XYGridConfig.html":{},"miscellaneous/enumerations.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["100",{"_index":640,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{},"miscellaneous/variables.html":{}}}],["10px",{"_index":1010,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["11.7.0",{"_index":4507,"title":{},"body":{"dependencies.html":{}}}],["12.92",{"_index":4109,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["15",{"_index":4537,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["16",{"_index":4431,"title":{},"body":{"classes/UtilityService.html":{}}}],["1].value",{"_index":1621,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["2",{"_index":151,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/DonutGaugeRenderingUtil.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITooltipNode.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/SideIndicatorAccessors.html":{},"classes/UtilityService.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["2)).tostring",{"_index":3565,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["2,2",{"_index":2120,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["2.0",{"_index":4592,"title":{},"body":{"license.html":{}}}],["2.1.3",{"_index":4512,"title":{},"body":{"dependencies.html":{}}}],["2.121",{"_index":4970,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2.121zm0",{"_index":4971,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2.209",{"_index":4953,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2.237",{"_index":4977,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2.63",{"_index":4979,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2.766",{"_index":4980,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2.828",{"_index":4972,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2.907",{"_index":4984,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2.907z",{"_index":4988,"title":{},"body":{"miscellaneous/variables.html":{}}}],["20",{"_index":121,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"components/ChartMarkerComponent.html":{},"classes/XYGridConfig.html":{},"miscellaneous/variables.html":{}}}],["200",{"_index":2353,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["2004",{"_index":4594,"title":{},"body":{"license.html":{}}}],["2020",{"_index":4867,"title":{},"body":{"license.html":{}}}],["255",{"_index":4139,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["2c",{"_index":4952,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2c1.105",{"_index":4947,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2zm0",{"_index":4951,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3",{"_index":1021,"title":{},"body":{"components/ChartMarkerComponent.html":{},"miscellaneous/enumerations.html":{}}}],["3.145",{"_index":4966,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3.146",{"_index":4965,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3.146z",{"_index":4968,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3.354",{"_index":4963,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3.805",{"_index":4996,"title":{},"body":{"miscellaneous/variables.html":{}}}],["30",{"_index":122,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/XYGridConfig.html":{},"miscellaneous/variables.html":{}}}],["3304",{"_index":1867,"title":{},"body":{"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["4",{"_index":4533,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["4.001",{"_index":4961,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.703",{"_index":4986,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.703z",{"_index":4997,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.945",{"_index":4987,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.95",{"_index":4973,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.95z",{"_index":4974,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4l8,0l0,8l",{"_index":4994,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4xxx",{"_index":4427,"title":{},"body":{"classes/UtilityService.html":{}}}],["4z",{"_index":4955,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5",{"_index":120,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"classes/XYGridConfig.html":{},"miscellaneous/variables.html":{}}}],["5.0.0",{"_index":4509,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":4626,"title":{},"body":{"license.html":{}}}],["5367",{"_index":4936,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5753",{"_index":2837,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["69",{"_index":4877,"title":{},"body":{"overview.html":{}}}],["8",{"_index":3419,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["8,0l0",{"_index":4995,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8.001",{"_index":4960,"title":{},"body":{"miscellaneous/variables.html":{}}}],["855",{"_index":4981,"title":{},"body":{"miscellaneous/variables.html":{}}}],["895",{"_index":4948,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8z",{"_index":4958,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8zm0",{"_index":4962,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9",{"_index":4602,"title":{},"body":{"license.html":{}}}],["900",{"_index":3088,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["901",{"_index":3020,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["93",{"_index":4878,"title":{},"body":{"overview.html":{}}}],["__",{"_index":4284,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["__domaincalculatedwithticks",{"_index":2172,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["__side",{"_index":4346,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["__thresholds",{"_index":4215,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["_active",{"_index":3394,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["_approximateticks",{"_index":194,"title":{},"body":{"classes/AxisConfig.html":{}}}],["_backgroundcolors",{"_index":1086,"title":{},"body":{"classes/ChartPalette.html":{}}}],["_bottomscaleid",{"_index":2359,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["_config",{"_index":1714,"title":{},"body":{"classes/Grid.html":{}}}],["_d3scale",{"_index":3941,"title":{},"body":{"classes/Scale.html":{}}}],["_height",{"_index":1570,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["_index",{"_index":4018,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["_interactive",{"_index":3395,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["_isempty",{"_index":3376,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["_isempty(this.descriptionprimary",{"_index":3409,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["_isempty(this.descriptionsecondary",{"_index":3410,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["_isnil",{"_index":3904,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["_isnil(this.unitlabel",{"_index":3915,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["_isnil(this.value",{"_index":3914,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["_leftscaleid",{"_index":2360,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["_rightscaleid",{"_index":2361,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["_scales",{"_index":1713,"title":{},"body":{"classes/Grid.html":{}}}],["_seriesid",{"_index":4011,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["_seriesrenderstate",{"_index":3393,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["_standardcolors",{"_index":1084,"title":{},"body":{"classes/ChartPalette.html":{}}}],["_state",{"_index":4009,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["_target",{"_index":1715,"title":{},"body":{"classes/Grid.html":{}}}],["_textcolors",{"_index":1085,"title":{},"body":{"classes/ChartPalette.html":{}}}],["_width",{"_index":1569,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["a.element.attrs(axesstyles[a.scaleid",{"_index":2409,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["a.scaleid",{"_index":2408,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["a?.iszoneedge",{"_index":4274,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["a?.x",{"_index":4272,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["above",{"_index":1234,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialPopoverPlugin.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["absolute",{"_index":1516,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/MarkerUtils.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["absoluteposition",{"_index":3809,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["absoluteposition.x",{"_index":3815,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["absoluteposition.y",{"_index":3816,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["absolutex0",{"_index":45,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["absolutex1",{"_index":46,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["absolutey0",{"_index":50,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["absolutey1",{"_index":51,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["absorb",{"_index":4556,"title":{},"body":{"index.html":{}}}],["abstract",{"_index":220,"title":{},"body":{"classes/BarAccessors.html":{},"classes/ChartPlugin.html":{},"classes/Grid.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"classes/LinearScale.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"classes/TimeScale.html":{},"classes/XYAccessors.html":{},"classes/XYRenderer.html":{}}}],["acc",{"_index":2428,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["acc[next.scaleid",{"_index":2424,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["accept",{"_index":1739,"title":{},"body":{"classes/Grid.html":{}}}],["acceptance",{"_index":4838,"title":{},"body":{"license.html":{}}}],["accepting",{"_index":4835,"title":{},"body":{"license.html":{}}}],["access",{"_index":1330,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"injectables/ThresholdsService.html":{}}}],["accessing",{"_index":3175,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["accessor",{"_index":245,"title":{},"body":{"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"interfaces/IAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYAccessors.html":{}}}],["accessor(d",{"_index":3882,"title":{},"body":{"classes/Renderer.html":{},"classes/UtilityService.html":{}}}],["accessor(datapoint",{"_index":4401,"title":{},"body":{"classes/UtilityService.html":{}}}],["accessor(series.data[nearestindex",{"_index":376,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["accessor(zone.data[0",{"_index":4291,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["accessors",{"_index":164,"title":{},"body":{"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartPalette.html":{},"classes/DataSeries.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"classes/SideIndicatorAccessors.html":{},"classes/StatusAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"miscellaneous/typealiases.html":{}}}],["accessors.data.active(dataseries.data[0",{"_index":2850,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["accessors.data.color",{"_index":4240,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["accessors.data.end",{"_index":4239,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["accessors.data.start",{"_index":4237,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["accessors.data.thickness",{"_index":4233,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["accessors.data.y",{"_index":4304,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["accessors.series.activecolor",{"_index":2854,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["accessors.series.color",{"_index":4305,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["accessors.series.end(dataseries.id",{"_index":2860,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["accessors.series.inactivecolor",{"_index":2853,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["accessors.series.start(dataseries.id",{"_index":2859,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["accessors.ts",{"_index":7,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"classes/LineAccessors.html":{},"classes/NoopAccessors.html":{},"classes/RadialAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/StatusAccessors.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{}}}],["accessors.ts:11",{"_index":3576,"title":{},"body":{"classes/NoopAccessors.html":{}}}],["accessors.ts:12",{"_index":2298,"title":{},"body":{"interfaces/IRadialSeriesAccessors.html":{},"classes/NoopAccessors.html":{}}}],["accessors.ts:14",{"_index":4475,"title":{},"body":{"classes/XYAccessors.html":{}}}],["accessors.ts:15",{"_index":4080,"title":{},"body":{"classes/StatusAccessors.html":{}}}],["accessors.ts:16",{"_index":2287,"title":{},"body":{"interfaces/ILineSeriesAccessors.html":{},"classes/StatusAccessors.html":{}}}],["accessors.ts:18",{"_index":4082,"title":{},"body":{"classes/StatusAccessors.html":{}}}],["accessors.ts:22",{"_index":208,"title":{},"body":{"classes/BarAccessors.html":{},"classes/StatusAccessors.html":{}}}],["accessors.ts:23",{"_index":206,"title":{},"body":{"classes/BarAccessors.html":{},"classes/RadialAccessors.html":{}}}],["accessors.ts:24",{"_index":3755,"title":{},"body":{"classes/RadialAccessors.html":{},"classes/StatusAccessors.html":{}}}],["accessors.ts:28",{"_index":26,"title":{},"body":{"classes/AreaAccessors.html":{}}}],["accessors.ts:29",{"_index":18,"title":{},"body":{"classes/AreaAccessors.html":{}}}],["accessors.ts:34",{"_index":3833,"title":{},"body":{"classes/RectangleAccessors.html":{}}}],["accessors.ts:35",{"_index":3832,"title":{},"body":{"classes/RectangleAccessors.html":{}}}],["accessors.ts:37",{"_index":3414,"title":{},"body":{"classes/LineAccessors.html":{}}}],["accessors.ts:38",{"_index":3413,"title":{},"body":{"classes/LineAccessors.html":{}}}],["accessors.ts:6",{"_index":2297,"title":{},"body":{"interfaces/IRadialDataAccessors.html":{}}}],["accessors.ts:7",{"_index":1877,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["accessors.ts:8",{"_index":1876,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["accessors/noop",{"_index":3629,"title":{},"body":{"classes/NoopRenderer.html":{}}}],["accessors/rectangle",{"_index":214,"title":{},"body":{"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["accessors/xy",{"_index":2267,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["accessorsuffix",{"_index":350,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["accommodate",{"_index":2792,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/MarkerUtils.html":{},"classes/ZoomPlugin.html":{}}}],["accommodating",{"_index":1764,"title":{},"body":{"classes/Grid.html":{}}}],["accordingly",{"_index":2745,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["acquired",{"_index":2273,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["act",{"_index":4570,"title":{},"body":{"index.html":{},"license.html":{}}}],["acting",{"_index":4611,"title":{},"body":{"license.html":{}}}],["actions",{"_index":3259,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["active",{"_index":2823,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{}}}],["active(active",{"_index":3379,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["activechanged",{"_index":3107,"title":{},"body":{"components/LegendComponent.html":{}}}],["activecolor",{"_index":2824,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["acts",{"_index":4817,"title":{},"body":{"license.html":{}}}],["actual",{"_index":1167,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{}}}],["actual_component",{"_index":527,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["actually",{"_index":4260,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["actualtextelements",{"_index":2631,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["actualtextelements.push(this",{"_index":2634,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["add",{"_index":2074,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/RadialTooltipsPlugin.html":{},"injectables/ThresholdsService.html":{},"classes/ZoomPlugin.html":{},"index.html":{},"license.html":{}}}],["added",{"_index":1865,"title":{},"body":{"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["addendum",{"_index":4765,"title":{},"body":{"license.html":{}}}],["additional",{"_index":2162,"title":{"additional-documentation/layout.html":{},"additional-documentation/chart-types.html":{},"additional-documentation/chart-types/line.html":{},"additional-documentation/chart-types/bar.html":{},"additional-documentation/chart-types/bar/bucketed-bar.html":{},"additional-documentation/chart-types/bar/status.html":{},"additional-documentation/chart-types/bar/waterfall.html":{},"additional-documentation/chart-types/area.html":{},"additional-documentation/chart-types/pie-and-donut.html":{},"additional-documentation/chart-types/spark.html":{},"additional-documentation/plugins.html":{},"additional-documentation/plugins/tooltips.html":{},"additional-documentation/plugins/popovers.html":{},"additional-documentation/thresholds.html":{},"additional-documentation/timeframe-selection.html":{},"additional-documentation/advanced-usage.html":{},"additional-documentation/advanced-usage/chart.html":{},"additional-documentation/advanced-usage/legend.html":{},"additional-documentation/advanced-usage/input-structure.html":{},"additional-documentation/advanced-usage/input-structure/data.html":{},"additional-documentation/advanced-usage/input-structure/colors.html":{},"additional-documentation/advanced-usage/input-structure/markers.html":{},"additional-documentation/advanced-usage/events.html":{},"additional-documentation/advanced-usage/grid.html":{},"additional-documentation/advanced-usage/scales.html":{},"additional-documentation/advanced-usage/scales/domains.html":{},"additional-documentation/advanced-usage/scales/formatters.html":{}},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYScales.html":{},"classes/LineAccessors.html":{},"classes/RadialAccessors.html":{},"components/RichLegendTileComponent.html":{},"interfaces/ScalesIndex.html":{},"classes/XYAccessors.html":{},"license.html":{}}}],["additions",{"_index":4665,"title":{},"body":{"license.html":{}}}],["addlimitentry(accessor",{"_index":4290,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["addlimitentry(z.accessors.data.end",{"_index":4298,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["addlimitentry(z.accessors.data.start",{"_index":4297,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["addplugin",{"_index":532,"title":{},"body":{"classes/Chart.html":{},"interfaces/IChart.html":{}}}],["addplugin(plugin",{"_index":552,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["addplugins",{"_index":533,"title":{},"body":{"classes/Chart.html":{}}}],["addplugins(...plugins",{"_index":555,"title":{},"body":{"classes/Chart.html":{}}}],["adjust",{"_index":2744,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["adjustaxisticks(labelgroup",{"_index":2526,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["adjusted",{"_index":720,"title":{},"body":{"classes/Chart.html":{}}}],["adjustedindex",{"_index":3181,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["adjustment",{"_index":2994,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["adjustments",{"_index":1829,"title":{},"body":{"classes/Grid.html":{}}}],["adjustrenderingarea",{"_index":1787,"title":{},"body":{"classes/Grid.html":{}}}],["adjusts",{"_index":1786,"title":{},"body":{"classes/Grid.html":{}}}],["advanced",{"_index":4589,"title":{"additional-documentation/advanced-usage.html":{}},"body":{"index.html":{},"additional-documentation/advanced-usage.html":{}}}],["advised",{"_index":4833,"title":{},"body":{"license.html":{}}}],["aftercontentinit",{"_index":866,"title":{},"body":{"components/ChartComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["afterviewinit",{"_index":827,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartMarkerComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["afterwards",{"_index":1782,"title":{},"body":{"classes/Grid.html":{}}}],["again",{"_index":3261,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["against",{"_index":4722,"title":{},"body":{"license.html":{}}}],["agree",{"_index":4846,"title":{},"body":{"license.html":{}}}],["agreed",{"_index":4794,"title":{},"body":{"license.html":{}}}],["agreement",{"_index":4780,"title":{},"body":{"license.html":{}}}],["aids",{"_index":776,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{}}}],["algorithm",{"_index":1373,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ITooltipNode.html":{}}}],["alias",{"_index":1693,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/typealiases.html":{}}}],["aliases",{"_index":4880,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["aligned",{"_index":1462,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["alignment",{"_index":1838,"title":{},"body":{"classes/Grid.html":{}}}],["allaxislabels",{"_index":2537,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["allaxislabels.foreach((group",{"_index":2539,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["alleging",{"_index":4726,"title":{},"body":{"license.html":{}}}],["allow",{"_index":1978,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["allowedrange",{"_index":3067,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["allows",{"_index":2957,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["alone",{"_index":4718,"title":{},"body":{"license.html":{}}}],["along",{"_index":4755,"title":{},"body":{"license.html":{}}}],["alongside",{"_index":4764,"title":{},"body":{"license.html":{}}}],["alphadecay(0.3",{"_index":1417,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["already",{"_index":3493,"title":{},"body":{"classes/MappedValueProvider.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{}}}],["alternately",{"_index":2778,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["always",{"_index":933,"title":{},"body":{"components/ChartComponent.html":{}}}],["anchor",{"_index":3061,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["and(b",{"_index":4740,"title":{},"body":{"license.html":{}}}],["and(c",{"_index":4746,"title":{},"body":{"license.html":{}}}],["and(d",{"_index":4751,"title":{},"body":{"license.html":{}}}],["and/or",{"_index":4206,"title":{},"body":{"injectables/ThresholdsService.html":{},"license.html":{}}}],["angle",{"_index":3818,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["angular",{"_index":839,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["angular.json",{"_index":4567,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":1288,"title":{},"body":{"components/ChartTooltipComponent.html":{}}}],["angular/cdk/overlay",{"_index":1442,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"modules/NuiChartsModule.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["angular/core",{"_index":501,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{},"injectables/ThresholdsService.html":{}}}],["angular/localize/init",{"_index":3672,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["animate",{"_index":1286,"title":{},"body":{"components/ChartTooltipComponent.html":{}}}],["animate(300",{"_index":1294,"title":{},"body":{"components/ChartTooltipComponent.html":{}}}],["animations",{"_index":1290,"title":{},"body":{"components/ChartTooltipComponent.html":{}}}],["annotations",{"_index":4656,"title":{},"body":{"license.html":{}}}],["annular",{"_index":1950,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["annulargrowth",{"_index":1947,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/variables.html":{}}}],["annularpadding",{"_index":1946,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/variables.html":{}}}],["annularwidth",{"_index":1945,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/variables.html":{}}}],["any).bandwidth",{"_index":2582,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["any).getbbox",{"_index":3053,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["any).getboundingclientrect().width",{"_index":2765,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["any).innerhtml",{"_index":2767,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["any)[measuretype",{"_index":2698,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["anything",{"_index":4552,"title":{},"body":{"index.html":{}}}],["apache",{"_index":4591,"title":{},"body":{"license.html":{}}}],["api",{"_index":3,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"components/BasicLegendTileComponent.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"modules/NuiChartsModule.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{}}}],["apis",{"_index":1982,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["app's",{"_index":4557,"title":{},"body":{"index.html":{}}}],["appear",{"_index":4760,"title":{},"body":{"license.html":{}}}],["appearance",{"_index":677,"title":{},"body":{"classes/Chart.html":{},"miscellaneous/variables.html":{}}}],["append",{"_index":1813,"title":{},"body":{"classes/Grid.html":{}}}],["append(\"fecolormatrix",{"_index":683,"title":{},"body":{"classes/Chart.html":{}}}],["append(\"line",{"_index":3100,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["append(\"rect",{"_index":1805,"title":{},"body":{"classes/Grid.html":{}}}],["append(\"svg",{"_index":637,"title":{},"body":{"classes/Chart.html":{}}}],["appendix",{"_index":4652,"title":{},"body":{"license.html":{}}}],["applicable",{"_index":4792,"title":{},"body":{"license.html":{}}}],["applied",{"_index":1646,"title":{},"body":{"classes/Grid.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["applies",{"_index":4712,"title":{},"body":{"license.html":{}}}],["apply",{"_index":1814,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"license.html":{}}}],["applydefaults(chartseries",{"_index":3294,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["applying",{"_index":675,"title":{},"body":{"classes/Chart.html":{},"miscellaneous/variables.html":{}}}],["appropriate",{"_index":3944,"title":{},"body":{"classes/Scale.html":{},"license.html":{}}}],["appropriateness",{"_index":4805,"title":{},"body":{"license.html":{}}}],["approximate",{"_index":2068,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["approximateticks",{"_index":165,"title":{},"body":{"classes/AxisConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["approximateticks(ticks",{"_index":199,"title":{},"body":{"classes/AxisConfig.html":{}}}],["arbitrary",{"_index":1967,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["arc",{"_index":3728,"title":{},"body":{"classes/PieRenderer.html":{}}}],["arc.outerradius(range[1",{"_index":3732,"title":{},"body":{"classes/PieRenderer.html":{}}}],["arcdata",{"_index":1601,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["arcdata[i",{"_index":1619,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["architect",{"_index":4575,"title":{},"body":{"index.html":{}}}],["archives",{"_index":4866,"title":{},"body":{"license.html":{}}}],["arcs",{"_index":1611,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["arcsformarkers",{"_index":1606,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["arcsformarkers.foreach((arcdatum",{"_index":1608,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["area",{"_index":89,"title":{"additional-documentation/chart-types/area.html":{}},"body":{"classes/AreaGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartPopoverPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/RadialTooltipsPlugin.html":{},"injectables/ThresholdsService.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{},"additional-documentation/chart-types.html":{}}}],["area's",{"_index":2964,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["areaaccessors",{"_index":1,"title":{"classes/AreaAccessors.html":{}},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["areaaccessors.data.end",{"_index":4279,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["areaaccessors.data.start",{"_index":4277,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["areaaccessors.series.color",{"_index":4281,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["areaclass",{"_index":2088,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["areagridconfig",{"_index":81,"title":{"classes/AreaGridConfig.html":{}},"body":{"classes/AreaGridConfig.html":{}}}],["areas",{"_index":2092,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["areasize",{"_index":991,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["arelabelupdatesenabled",{"_index":3006,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["args",{"_index":2058,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/LegendInteractionAssist.html":{}}}],["argument",{"_index":932,"title":{},"body":{"components/ChartComponent.html":{},"classes/UtilityService.html":{}}}],["arguments.length",{"_index":4440,"title":{},"body":{"classes/UtilityService.html":{}}}],["arising",{"_index":4823,"title":{},"body":{"license.html":{}}}],["around",{"_index":3451,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{},"index.html":{}}}],["arr",{"_index":2662,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/Renderer.html":{}}}],["arr.indexof(element",{"_index":2670,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["arr.push(next",{"_index":2667,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["array",{"_index":368,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{}}}],["array(data.length",{"_index":1614,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["array.from(arr",{"_index":3877,"title":{},"body":{"classes/Renderer.html":{}}}],["array.length",{"_index":2700,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["array.map((tick",{"_index":2702,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["array.reduce((prev",{"_index":2696,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["arrayofpositions",{"_index":2706,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["arrayofpositions.reduce((p",{"_index":2713,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["aside",{"_index":1453,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["aspects",{"_index":2031,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["asserted",{"_index":4852,"title":{},"body":{"license.html":{}}}],["asserting",{"_index":1734,"title":{},"body":{"classes/Grid.html":{}}}],["assign",{"_index":4016,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assigned",{"_index":3696,"title":{},"body":{"classes/PathMarker.html":{},"injectables/ThresholdsService.html":{}}}],["assist",{"_index":749,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{},"miscellaneous/enumerations.html":{}}}],["assist's",{"_index":768,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/LegendInteractionAssist.html":{}}}],["assist.ts",{"_index":3135,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["assist.ts:100",{"_index":4007,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:28",{"_index":4005,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:30",{"_index":3995,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:310",{"_index":3144,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["assist.ts:315",{"_index":3156,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["assist.ts:32",{"_index":3993,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:331",{"_index":3147,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["assist.ts:335",{"_index":3149,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["assist.ts:34",{"_index":3998,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:36",{"_index":3992,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:360",{"_index":3152,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["assist.ts:374",{"_index":3155,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["assist.ts:38",{"_index":4003,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:384",{"_index":3146,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["assist.ts:39",{"_index":4004,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:390",{"_index":3150,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["assist.ts:40",{"_index":4002,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:41",{"_index":4000,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:55",{"_index":4019,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:65",{"_index":4022,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:84",{"_index":4006,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:92",{"_index":4013,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:96",{"_index":4010,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assistant",{"_index":775,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{}}}],["assists/chart",{"_index":3134,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["assists/spark",{"_index":3983,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assists/types.ts",{"_index":747,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"miscellaneous/enumerations.html":{}}}],["assists/types.ts:23",{"_index":2217,"title":{},"body":{"interfaces/IChartAssist.html":{}}}],["assists/types.ts:34",{"_index":2215,"title":{},"body":{"interfaces/IChartAssist.html":{}}}],["assists/types.ts:39",{"_index":2216,"title":{},"body":{"interfaces/IChartAssist.html":{}}}],["assists/types.ts:58",{"_index":759,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{}}}],["assists/types.ts:59",{"_index":762,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{}}}],["assists/types.ts:60",{"_index":761,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{}}}],["assists/types.ts:61",{"_index":760,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{}}}],["assists/types.ts:62",{"_index":763,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{}}}],["assists/types.ts:65",{"_index":765,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{}}}],["assists/types.ts:70",{"_index":2304,"title":{},"body":{"interfaces/IRenderStatesIndex.html":{}}}],["associated",{"_index":780,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"license.html":{}}}],["association",{"_index":769,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{}}}],["assume",{"_index":4807,"title":{},"body":{"license.html":{}}}],["attach",{"_index":4854,"title":{},"body":{"license.html":{}}}],["attached",{"_index":4651,"title":{},"body":{"license.html":{}}}],["attempts",{"_index":2777,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["attr",{"_index":735,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"classes/PathMarker.html":{}}}],["attr(\"class",{"_index":1819,"title":{},"body":{"classes/Grid.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/ZoomPlugin.html":{}}}],["attr(\"id",{"_index":681,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{}}}],["attr(\"stroke",{"_index":2975,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["attr(\"transform",{"_index":2498,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/InteractionLabelPlugin.html":{}}}],["attr(\"type",{"_index":684,"title":{},"body":{"classes/Chart.html":{}}}],["attr(\"values",{"_index":686,"title":{},"body":{"classes/Chart.html":{}}}],["attribute",{"_index":3697,"title":{},"body":{"classes/PathMarker.html":{}}}],["attributes",{"_index":1842,"title":{},"body":{"classes/Grid.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["attribution",{"_index":4749,"title":{},"body":{"license.html":{}}}],["attrs",{"_index":638,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{}}}],["attrs(attrs",{"_index":3102,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["attrs[attr",{"_index":3710,"title":{},"body":{"classes/PathMarker.html":{}}}],["authorized",{"_index":4607,"title":{},"body":{"license.html":{}}}],["authorship",{"_index":4646,"title":{},"body":{"license.html":{}}}],["autoheight",{"_index":1545,"title":{},"body":{"classes/DimensionConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["automatically",{"_index":1951,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/variables.html":{}}}],["automaticdomain",{"_index":5032,"title":{},"body":{"miscellaneous/variables.html":{}}}],["autowidth",{"_index":1546,"title":{},"body":{"classes/DimensionConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["available",{"_index":2690,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"license.html":{}}}],["avoid",{"_index":632,"title":{},"body":{"classes/Chart.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IXYGridConfig.html":{},"classes/MappedValueProvider.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/XYGridConfig.html":{}}}],["avoidance",{"_index":1372,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["avoidtooltipcollisions",{"_index":1374,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["away",{"_index":1449,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"miscellaneous/variables.html":{}}}],["axes",{"_index":2022,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/typealiases.html":{}}}],["axes.reduce((acc",{"_index":2429,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axes_style_change",{"_index":4909,"title":{},"body":{"miscellaneous/variables.html":{}}}],["axes_style_change_event",{"_index":2333,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"miscellaneous/variables.html":{}}}],["axesstyles",{"_index":2399,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axis",{"_index":95,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/NoopScale.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{},"classes/XYGridConfig.html":{}}}],["axis.bottom.fit",{"_index":2734,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axis.bottom.ticklabel.overflowhandler",{"_index":2737,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axis.bottom.ticksize",{"_index":2492,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axis.bottom.visible",{"_index":2735,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axis.labelgroup",{"_index":2448,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axis.labelgroup.selectall(\"*\").remove",{"_index":2458,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axis.left",{"_index":2510,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axis.left.fit",{"_index":2722,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axis.left.padding",{"_index":2506,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axis.left.ticksize",{"_index":2505,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axis.left.visible",{"_index":2723,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axis.right.fit",{"_index":2727,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axis.right.padding",{"_index":2515,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axis.right.ticksize",{"_index":2516,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axis.tickgroup.call(leftgridlines",{"_index":2468,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axis.tickgroup.call(tickaxis",{"_index":2456,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axis.tickgroup.selectall(\"*\").remove",{"_index":2459,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisbottom",{"_index":2325,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisconfig",{"_index":113,"title":{"classes/AxisConfig.html":{}},"body":{"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"classes/XYGridConfig.html":{}}}],["axisconfig.bottom.ticklabel.horizontalpadding",{"_index":2586,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisconfig.bottom.ticklabel.maxwidth",{"_index":2580,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisconfig.bottom.ticklabel.overflowhandler",{"_index":2563,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisconfig.left.fit",{"_index":2595,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisconfig.left.padding",{"_index":2598,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisconfig.left.ticklabel.horizontalpadding",{"_index":2601,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisconfig.left.ticklabel.maxwidth",{"_index":2578,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisconfig.left.ticklabel.overflowhandler",{"_index":2602,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisconfig.left.ticksize",{"_index":2599,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisconfig.right.fit",{"_index":2587,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisconfig.right.padding",{"_index":2590,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisconfig.right.ticklabel.horizontalpadding",{"_index":2593,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisconfig.right.ticklabel.maxwidth",{"_index":2576,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisconfig.right.ticklabel.overflowhandler",{"_index":2594,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisconfig.right.ticksize",{"_index":2591,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisgenerator",{"_index":2380,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"miscellaneous/variables.html":{}}}],["axisgenerator(clonedscale.d3scale",{"_index":5042,"title":{},"body":{"miscellaneous/variables.html":{}}}],["axisgenerator(scale.copytolinear().d3scale",{"_index":2451,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisgenerator(scale.d3scale",{"_index":2444,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisgroup.selectall(\"g:not(.tick",{"_index":2632,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axislabels",{"_index":2560,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axislabels.foreach((group",{"_index":2620,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisleft",{"_index":2326,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisright",{"_index":2327,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisscale",{"_index":2153,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{}}}],["axistop",{"_index":2328,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisx",{"_index":2354,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisyleft",{"_index":2355,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisyright",{"_index":2356,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["b",{"_index":2983,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/ZoomPlugin.html":{}}}],["b?.iszoneedge",{"_index":4275,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["b?.x",{"_index":4273,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["back",{"_index":3814,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["background",{"_index":2108,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"injectables/ThresholdsService.html":{},"miscellaneous/enumerations.html":{}}}],["backgroundcolor",{"_index":3894,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["backgroundcolors",{"_index":1062,"title":{},"body":{"classes/ChartPalette.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["backgrounddata",{"_index":4251,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["backgroundopacity",{"_index":1087,"title":{},"body":{"classes/ChartPalette.html":{}}}],["band",{"_index":288,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"injectables/ThresholdsService.html":{},"miscellaneous/variables.html":{}}}],["band_center",{"_index":4884,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bandscale",{"_index":2337,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["bandwidth",{"_index":2151,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["bar",{"_index":259,"title":{"additional-documentation/chart-types/bar.html":{},"additional-documentation/chart-types/bar/bucketed-bar.html":{}},"body":{"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITooltipPosition.html":{},"classes/StatusAccessors.html":{},"classes/VerticalBarAccessors.html":{},"index.html":{},"additional-documentation/chart-types.html":{}}}],["bar/bar",{"_index":2101,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["baraccessors",{"_index":202,"title":{"classes/BarAccessors.html":{}},"body":{"classes/BarAccessors.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["baraccessors.data.status",{"_index":2887,"title":{},"body":{"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{}}}],["baraccessors:22",{"_index":1878,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["baraccessors:23",{"_index":1879,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["baraccessors:34",{"_index":1880,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["baraccessors:35",{"_index":1881,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["barclass",{"_index":2138,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["bargridconfig",{"_index":255,"title":{"classes/BarGridConfig.html":{}},"body":{"classes/BarGridConfig.html":{}}}],["barhighlightstrategy",{"_index":267,"title":{"classes/BarHighlightStrategy.html":{}},"body":{"classes/BarHighlightStrategy.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["barhorizontalgridconfig",{"_index":403,"title":{"classes/BarHorizontalGridConfig.html":{}},"body":{"classes/BarHorizontalGridConfig.html":{}}}],["barrenderer",{"_index":297,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"injectables/ThresholdsService.html":{}}}],["barrenderer(rendererconfig",{"_index":4248,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["barrenderer.min_bar_thickness",{"_index":2145,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["bars",{"_index":2137,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["barserieshighlightstrategy",{"_index":409,"title":{"classes/BarSeriesHighlightStrategy.html":{}},"body":{"classes/BarSeriesHighlightStrategy.html":{}}}],["barstatusgridconfig",{"_index":416,"title":{"classes/BarStatusGridConfig.html":{}},"body":{"classes/BarStatusGridConfig.html":{}}}],["barstylesfn",{"_index":386,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["bartooltipsplugin",{"_index":433,"title":{"classes/BarTooltipsPlugin.html":{}},"body":{"classes/BarTooltipsPlugin.html":{}}}],["base",{"_index":2270,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"classes/LineAccessors.html":{},"classes/RadialAccessors.html":{},"classes/Renderer.html":{},"classes/XYAccessors.html":{}}}],["based",{"_index":1371,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/NoopRenderer.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["basetype",{"_index":2034,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["basic",{"_index":494,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["basiclegendtilecomponent",{"_index":483,"title":{"components/BasicLegendTileComponent.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{},"overview.html":{}}}],["basics",{"_index":987,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["basics[0",{"_index":990,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["basics[1",{"_index":993,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["basis",{"_index":4795,"title":{},"body":{"license.html":{}}}],["bbox",{"_index":1486,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/InteractionLabelPlugin.html":{},"classes/Renderer.html":{}}}],["bbox.height",{"_index":3064,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["bbox.left",{"_index":1491,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["bbox.top",{"_index":1493,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["bbox.width",{"_index":3066,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["bbox.y",{"_index":3059,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["bc",{"_index":4106,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["before",{"_index":1386,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"classes/LegendInteractionAssist.html":{},"injectables/ThresholdsService.html":{}}}],["behalf",{"_index":4670,"title":{},"body":{"license.html":{}}}],["behavior",{"_index":815,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["behaviorsubject",{"_index":587,"title":{},"body":{"classes/Chart.html":{},"components/ChartMarkerComponent.html":{}}}],["being",{"_index":1025,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["belong",{"_index":1350,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["below",{"_index":4174,"title":{},"body":{"injectables/ThresholdsService.html":{},"index.html":{},"license.html":{}}}],["beneficial",{"_index":4630,"title":{},"body":{"license.html":{}}}],["between",{"_index":770,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/Grid.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"injectables/ThresholdsService.html":{}}}],["beyond",{"_index":1766,"title":{},"body":{"classes/Grid.html":{}}}],["bg",{"_index":4526,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["bigger",{"_index":2689,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["binary",{"_index":4380,"title":{},"body":{"classes/UtilityService.html":{}}}],["bind",{"_index":4662,"title":{},"body":{"license.html":{}}}],["bisect",{"_index":4413,"title":{},"body":{"classes/UtilityService.html":{}}}],["black",{"_index":1096,"title":{},"body":{"classes/ChartPalette.html":{}}}],["block",{"_index":3129,"title":{},"body":{"components/LegendComponent.html":{}}}],["boilerplate",{"_index":4855,"title":{},"body":{"license.html":{}}}],["boolean",{"_index":145,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/Chart.html":{},"components/ChartMarkerComponent.html":{},"classes/GridConfig.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IStackMetadata.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"classes/TimeScale.html":{},"classes/XYGridConfig.html":{},"classes/ZoomPlugin.html":{}}}],["booleans",{"_index":2039,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["bootstrap",{"_index":3166,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"modules/NuiChartsModule.html":{},"overview.html":{}}}],["border",{"_index":155,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["border.node",{"_index":1825,"title":{},"body":{"classes/Grid.html":{}}}],["border.style(\"stroke",{"_index":1823,"title":{},"body":{"classes/Grid.html":{}}}],["borderconfig",{"_index":4478,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["borderconfig(\"nui",{"_index":4483,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["borderconfigs",{"_index":1773,"title":{},"body":{"classes/Grid.html":{}}}],["borderconfigs[side",{"_index":1783,"title":{},"body":{"classes/Grid.html":{}}}],["borderkey",{"_index":1694,"title":{},"body":{"classes/Grid.html":{},"miscellaneous/typealiases.html":{}}}],["borderkeys",{"_index":1774,"title":{},"body":{"classes/Grid.html":{}}}],["bordermidpoint",{"_index":1691,"title":{},"body":{"classes/Grid.html":{},"miscellaneous/variables.html":{}}}],["borders",{"_index":101,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["borders[side",{"_index":1784,"title":{},"body":{"classes/Grid.html":{}}}],["both",{"_index":2136,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"injectables/ThresholdsService.html":{}}}],["bottom",{"_index":115,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYGridConfig.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/XYGridConfig.html":{},"miscellaneous/variables.html":{}}}],["bottomlabelaxis",{"_index":2443,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["bottomscale",{"_index":2731,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["bottomscale?.iscontinuous",{"_index":2736,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["bottomscaleid",{"_index":2366,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["bottomscaleid(id",{"_index":2369,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["boundaries",{"_index":2096,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["boundary",{"_index":2876,"title":{},"body":{"interfaces/ISimpleThresholdZone.html":{},"injectables/ThresholdsService.html":{},"interfaces/ZoneCross.html":{},"miscellaneous/enumerations.html":{}}}],["bounds",{"_index":1925,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["brackets",{"_index":4857,"title":{},"body":{"license.html":{}}}],["break",{"_index":2687,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["breaking",{"_index":2075,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["breakpoints",{"_index":4252,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["broadcast",{"_index":2001,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["broadcasted",{"_index":824,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["browse",{"_index":4876,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1848,"title":{},"body":{"classes/Grid.html":{},"modules.html":{}}}],["brush",{"_index":2901,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["brushbehavior",{"_index":2898,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["brushelement",{"_index":2919,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["brushend",{"_index":2985,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["brushmove",{"_index":2981,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["brushselection",{"_index":2899,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["brushstart",{"_index":2977,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["brushstartx",{"_index":2920,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["brushx",{"_index":2900,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["bsrgb",{"_index":4142,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["bucketed",{"_index":4586,"title":{"additional-documentation/chart-types/bar/bucketed-bar.html":{}},"body":{"index.html":{},"additional-documentation/chart-types.html":{}}}],["bug",{"_index":2909,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["build",{"_index":534,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["build(element",{"_index":558,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["buildaxes(container",{"_index":2643,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["buildborders(container",{"_index":1771,"title":{},"body":{"classes/Grid.html":{}}}],["builddatamanager",{"_index":688,"title":{},"body":{"classes/Chart.html":{}}}],["buildgrid",{"_index":689,"title":{},"body":{"classes/Chart.html":{}}}],["buildinteractionlabel(target",{"_index":3076,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["buildplugins",{"_index":1641,"title":{},"body":{"classes/Grid.html":{},"interfaces/IGrid.html":{}}}],["buildplugins(chart",{"_index":1663,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["buildrenderengine(lasagna",{"_index":693,"title":{},"body":{"classes/Chart.html":{}}}],["buildrenderingarea(clippathid",{"_index":1802,"title":{},"body":{"classes/Grid.html":{}}}],["builds",{"_index":1769,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["built",{"_index":3063,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["bus",{"_index":596,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["bus.ts",{"_index":1623,"title":{},"body":{"classes/EventBus.html":{}}}],["bus.ts:15",{"_index":1625,"title":{},"body":{"classes/EventBus.html":{}}}],["bus.ts:8",{"_index":1627,"title":{},"body":{"classes/EventBus.html":{}}}],["buses",{"_index":826,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["bynens",{"_index":4438,"title":{},"body":{"classes/UtilityService.html":{}}}],["c",{"_index":1100,"title":{},"body":{"classes/ChartPalette.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{}}}],["calculate",{"_index":1503,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYScales.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["calculateaxesstyles(e",{"_index":2410,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["calculated",{"_index":451,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["calculatedbottomwidth",{"_index":2581,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["calculatedleftwidth",{"_index":2596,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["calculatedrightwidth",{"_index":2588,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["calculates",{"_index":961,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{}}}],["calculating",{"_index":1146,"title":{},"body":{"components/ChartPopoverComponent.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["calculation",{"_index":2741,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{}}}],["calculation/automatic",{"_index":2342,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/Scale.html":{},"miscellaneous/variables.html":{}}}],["calculations",{"_index":1942,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["calculator",{"_index":2158,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{},"miscellaneous/typealiases.html":{}}}],["call",{"_index":2786,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/LegendInteractionAssist.html":{}}}],["call(bottomlabelaxis",{"_index":2449,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["callbackfn(result",{"_index":4468,"title":{},"body":{"classes/UtilityService.html":{}}}],["called",{"_index":3277,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["caps",{"_index":2115,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["capture",{"_index":2952,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["carry",{"_index":4742,"title":{},"body":{"license.html":{}}}],["case",{"_index":2774,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/MarkerUtils.html":{}}}],["catch",{"_index":378,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["category",{"_index":215,"title":{},"body":{"classes/BarAccessors.html":{},"classes/DataSeries.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["cause",{"_index":2279,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IScaleSVGElement.html":{},"classes/LineAccessors.html":{},"license.html":{}}}],["causing",{"_index":2781,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["cd",{"_index":877,"title":{},"body":{"components/ChartComponent.html":{}}}],["center",{"_index":1460,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["certain",{"_index":1988,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["change",{"_index":2023,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"components/LegendComponent.html":{},"miscellaneous/typealiases.html":{}}}],["changed",{"_index":2772,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"license.html":{}}}],["changedetection",{"_index":1280,"title":{},"body":{"components/ChartTooltipComponent.html":{},"components/LegendSeriesComponent.html":{}}}],["changedetectionstrategy",{"_index":1289,"title":{},"body":{"components/ChartTooltipComponent.html":{},"components/LegendSeriesComponent.html":{}}}],["changedetectionstrategy.onpush",{"_index":1281,"title":{},"body":{"components/ChartTooltipComponent.html":{},"components/LegendSeriesComponent.html":{}}}],["changedetector",{"_index":1004,"title":{},"body":{"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/RichLegendTileComponent.html":{}}}],["changedetectorref",{"_index":878,"title":{},"body":{"components/ChartComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/RichLegendTileComponent.html":{}}}],["changes",{"_index":930,"title":{},"body":{"components/ChartComponent.html":{}}}],["changes.plugin",{"_index":953,"title":{},"body":{"components/ChartDonutContentComponent.html":{},"components/ChartPopoverComponent.html":{}}}],["changes.plugin.isfirstchange",{"_index":1134,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["changes[\"active",{"_index":3130,"title":{},"body":{"components/LegendComponent.html":{}}}],["changes[\"chart",{"_index":902,"title":{},"body":{"components/ChartComponent.html":{}}}],["changes[\"chart\"].previousvalue",{"_index":904,"title":{},"body":{"components/ChartComponent.html":{}}}],["changes[\"color",{"_index":1030,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["changes[\"marker",{"_index":1029,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["changes[\"plugin",{"_index":1336,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["changes[\"plugin\"].currentvalue",{"_index":1337,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["character",{"_index":4822,"title":{},"body":{"license.html":{}}}],["charge",{"_index":4699,"title":{},"body":{"license.html":{}}}],["chart",{"_index":90,"title":{"classes/Chart.html":{},"additional-documentation/chart-types.html":{},"additional-documentation/advanced-usage/chart.html":{}},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"components/BasicLegendTileComponent.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/NoopRenderer.html":{},"modules/NuiChartsModule.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"classes/XYGridConfig.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/chart-types.html":{},"additional-documentation/advanced-usage.html":{}}}],["chart's",{"_index":718,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["chart'},{'name",{"_index":506,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["chart(grid",{"_index":4059,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["chart.addplugin(labelplugin",{"_index":4076,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["chart.addplugin(new",{"_index":4062,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["chart.getgrid().config(lastspark",{"_index":4071,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["chart.hasplugin(interactionlabelplugin",{"_index":4074,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["chart.removeplugin(interactionlabelplugin",{"_index":4078,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["chart.updatedimensions",{"_index":4072,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["chart/chart.component",{"_index":3682,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["chart_component",{"_index":818,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{}}}],["chart_markers",{"_index":4027,"title":{},"body":{"classes/SparkChartAssist.html":{},"miscellaneous/variables.html":{}}}],["chart_palette_cs1",{"_index":4028,"title":{},"body":{"classes/SparkChartAssist.html":{},"miscellaneous/variables.html":{}}}],["chart_palette_cs2",{"_index":4888,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chart_palette_cs3",{"_index":4889,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chart_palette_cs_s",{"_index":4886,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chart_palette_cs_s_extended",{"_index":4887,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chart_view_status",{"_index":4910,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chart_view_status_event",{"_index":890,"title":{},"body":{"components/ChartComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"miscellaneous/variables.html":{}}}],["chartassist",{"_index":3143,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["chartassist.chartassistsubject.pipe",{"_index":3269,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["chartassist.getlabel(chartseries",{"_index":3255,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["chartassist.getvisibleserieswithlegend",{"_index":3267,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["chartassisteventtype",{"_index":796,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/LegendInteractionAssist.html":{},"miscellaneous/enumerations.html":{}}}],["chartassisteventtype.emphasizeseries",{"_index":3199,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["chartassisteventtype.resetvisibleseries",{"_index":3201,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["chartassisteventtype.toggleseries",{"_index":3203,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["chartassistrenderstatedata",{"_index":745,"title":{"classes/ChartAssistRenderStateData.html":{}},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/LegendInteractionAssist.html":{}}}],["chartassistrenderstatedata(series.id",{"_index":3306,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["chartassistrenderstatedata(seriesid",{"_index":3330,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["chartassistseriesdefaults",{"_index":3164,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["chartassistsubject",{"_index":3187,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["chartcollection",{"_index":860,"title":{},"body":{"injectables/ChartCollectionService.html":{}}}],["chartcollectionid",{"_index":856,"title":{},"body":{"injectables/ChartCollectionService.html":{}}}],["chartcollectioniddirective",{"_index":525,"title":{"directives/ChartCollectionIdDirective.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{},"overview.html":{}}}],["chartcollectionservice",{"_index":831,"title":{"injectables/ChartCollectionService.html":{}},"body":{"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"modules/NuiChartsModule.html":{},"overview.html":{}}}],["chartcomponent",{"_index":505,"title":{"components/ChartComponent.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{},"overview.html":{}}}],["chartdonutcontentcomponent",{"_index":507,"title":{"components/ChartDonutContentComponent.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{},"overview.html":{}}}],["chartdonutcontentplugin",{"_index":943,"title":{"classes/ChartDonutContentPlugin.html":{}},"body":{"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{}}}],["chartelement",{"_index":1232,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialPopoverPlugin.html":{}}}],["chartelement.getboundingclientrect",{"_index":1487,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["chartelement.offsetheight",{"_index":1251,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["chartelement.offsetleft",{"_index":1241,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["chartelement.offsetparent.getboundingclientrect",{"_index":1489,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["chartelement.offsettop",{"_index":1243,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["chartevent.broadcast",{"_index":2938,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["chartevent.data",{"_index":2940,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["chartindex",{"_index":2003,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["chartmarker",{"_index":3693,"title":{},"body":{"classes/PathMarker.html":{},"classes/SvgMarker.html":{}}}],["chartmarkercomponent",{"_index":510,"title":{"components/ChartMarkerComponent.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{},"overview.html":{}}}],["chartpalette",{"_index":1057,"title":{"classes/ChartPalette.html":{}},"body":{"classes/ChartPalette.html":{},"classes/SparkChartAssist.html":{}}}],["chartpalette(chart_palette_cs1",{"_index":4001,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["chartplugin",{"_index":466,"title":{"classes/ChartPlugin.html":{}},"body":{"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/ZoomPlugin.html":{}}}],["chartplugin:11",{"_index":478,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/ZoomPlugin.html":{}}}],["chartplugin:13",{"_index":479,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/ZoomPlugin.html":{}}}],["chartplugin:15",{"_index":476,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/ZoomPlugin.html":{}}}],["chartplugin:7",{"_index":467,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/ZoomPlugin.html":{}}}],["chartplugin:9",{"_index":477,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/ZoomPlugin.html":{}}}],["chartpopovercomponent",{"_index":512,"title":{"components/ChartPopoverComponent.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/IPopoverPluginConfig.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{},"overview.html":{}}}],["chartpopoverplugin",{"_index":1121,"title":{"classes/ChartPopoverPlugin.html":{}},"body":{"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:11",{"_index":3770,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:13",{"_index":3771,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:15",{"_index":3768,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:28",{"_index":3760,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:30",{"_index":3764,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:32",{"_index":3762,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:34",{"_index":3758,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:36",{"_index":3763,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:43",{"_index":3761,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:51",{"_index":3759,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:56",{"_index":3767,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:68",{"_index":3766,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:7",{"_index":3765,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:9",{"_index":3769,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartposition",{"_index":1490,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["chartposition.x",{"_index":1521,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["chartposition.y",{"_index":1523,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["charts",{"_index":771,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IScale.html":{},"interfaces/ISpark.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYScales.html":{},"classes/LineAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["chartseries",{"_index":786,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ITooltipPosition.html":{},"classes/LegendInteractionAssist.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/SparkChartAssist.html":{}}}],["chartseries.accessors.data?.[dataaccessorkey",{"_index":3180,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["chartseries.data.length",{"_index":3178,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["chartseries.data[chartseries.data.length",{"_index":3226,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["chartseries.id",{"_index":4040,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["chartseries.renderer",{"_index":3796,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["chartseries.scales.r",{"_index":3798,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["chartseriesset",{"_index":773,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IBandScale.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IScale.html":{},"interfaces/ISpark.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"miscellaneous/variables.html":{}}}],["chartseriesset.map(cs",{"_index":5019,"title":{},"body":{"miscellaneous/variables.html":{}}}],["charttooltipcomponent",{"_index":514,"title":{"components/ChartTooltipComponent.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{},"overview.html":{}}}],["charttooltipdirective",{"_index":1325,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"modules/NuiChartsModule.html":{}}}],["charttooltipscomponent",{"_index":516,"title":{"components/ChartTooltipsComponent.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{},"overview.html":{}}}],["charttooltipsplugin",{"_index":437,"title":{"classes/ChartTooltipsPlugin.html":{}},"body":{"classes/BarTooltipsPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["charttooltipsplugin:11",{"_index":474,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["charttooltipsplugin:126",{"_index":468,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["charttooltipsplugin:13",{"_index":475,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["charttooltipsplugin:131",{"_index":471,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["charttooltipsplugin:15",{"_index":472,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["charttooltipsplugin:63",{"_index":454,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["charttooltipsplugin:65",{"_index":450,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["charttooltipsplugin:7",{"_index":465,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["charttooltipsplugin:70",{"_index":462,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["charttooltipsplugin:75",{"_index":457,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["charttooltipsplugin:88",{"_index":461,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["charttooltipsplugin:9",{"_index":473,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["charttooltipsplugin:98",{"_index":469,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["check",{"_index":1537,"title":{},"body":{"classes/DataSeries.html":{}}}],["child",{"_index":2763,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["children",{"_index":2912,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["choose",{"_index":4836,"title":{},"body":{"license.html":{}}}],["circle",{"_index":3782,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["claim",{"_index":4723,"title":{},"body":{"license.html":{}}}],["claims",{"_index":4713,"title":{},"body":{"license.html":{}}}],["clampedx",{"_index":3070,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["clamps",{"_index":4370,"title":{},"body":{"classes/UtilityService.html":{}}}],["clamptorange",{"_index":4361,"title":{},"body":{"classes/UtilityService.html":{}}}],["clamptorange(value",{"_index":4368,"title":{},"body":{"classes/UtilityService.html":{}}}],["class",{"_index":0,"title":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{}},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"components/BasicLegendTileComponent.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISpark.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"modules/NuiChartsModule.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["class.inverse",{"_index":3344,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["class.nui",{"_index":3916,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["classed(\"hidden",{"_index":1840,"title":{},"body":{"classes/Grid.html":{}}}],["classed(\"interaction",{"_index":3430,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["classed(\"nui",{"_index":2464,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["classed(\"sw",{"_index":2647,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["classed(`${classname}${getpointereventsclass()}${getpointereventsclickclass",{"_index":3546,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["classed(`pointer",{"_index":3431,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"overview.html":{}}}],["classname",{"_index":2052,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/MarkerUtils.html":{}}}],["classref",{"_index":569,"title":{},"body":{"classes/Chart.html":{},"interfaces/IChart.html":{}}}],["classrefs",{"_index":575,"title":{},"body":{"classes/Chart.html":{}}}],["cleanup",{"_index":1999,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["cleartimeout(this.closetimeout",{"_index":1367,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["cleartimeout(this.collisiontimeout",{"_index":1361,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["cleartimeout(this.handleticklabeloverflowdebounceindex[scale.id",{"_index":2617,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["cleartimeout(this.opentimeout",{"_index":1358,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["cleartimeout(this.reconcilemarginsdebounce",{"_index":2795,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["click",{"_index":1921,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"components/LegendSeriesComponent.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"miscellaneous/enumerations.html":{}}}],["clickable",{"_index":2113,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"miscellaneous/variables.html":{}}}],["clicked",{"_index":1920,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["clientrect",{"_index":1044,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["clientrect.height",{"_index":1050,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["clientrect.width",{"_index":1049,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["clientrect.x",{"_index":1047,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["clientrect.y",{"_index":1048,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["clip",{"_index":1655,"title":{},"body":{"classes/Grid.html":{}}}],["clippathid",{"_index":1731,"title":{},"body":{"classes/Grid.html":{}}}],["clipped",{"_index":1750,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/ZoomPlugin.html":{}}}],["clockwise",{"_index":3790,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["clone",{"_index":2329,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["clone(this._config.dimension.margin",{"_index":2638,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["clonedeep",{"_index":4023,"title":{},"body":{"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{}}}],["clonedeep(scale",{"_index":5040,"title":{},"body":{"miscellaneous/variables.html":{}}}],["clonedeep(sourceseries.data",{"_index":4236,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["clonedeep(sparks",{"_index":4043,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["clonedeep(thresholds_main_chart_renderer_config",{"_index":4180,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["clonedeep(thresholds_main_chart_renderer_config.statestyles",{"_index":4307,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["clonedscale",{"_index":5039,"title":{},"body":{"miscellaneous/variables.html":{}}}],["close",{"_index":1179,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["closepending",{"_index":1332,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["closepopoversubject",{"_index":1169,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["closest",{"_index":4187,"title":{},"body":{"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{}}}],["closestdataindex",{"_index":4410,"title":{},"body":{"classes/UtilityService.html":{}}}],["closetimeout",{"_index":1335,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["closetooltips",{"_index":1299,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["clr",{"_index":3748,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["cluster_nuichartsmodule",{"_index":3658,"title":{},"body":{"modules/NuiChartsModule.html":{},"overview.html":{}}}],["cluster_nuichartsmodule_declarations",{"_index":3659,"title":{},"body":{"modules/NuiChartsModule.html":{},"overview.html":{}}}],["cluster_nuichartsmodule_exports",{"_index":3661,"title":{},"body":{"modules/NuiChartsModule.html":{},"overview.html":{}}}],["cluster_nuichartsmodule_providers",{"_index":3660,"title":{},"body":{"modules/NuiChartsModule.html":{},"overview.html":{}}}],["code",{"_index":4558,"title":{},"body":{"index.html":{},"license.html":{}}}],["codeunit",{"_index":4446,"title":{},"body":{"classes/UtilityService.html":{}}}],["collection",{"_index":811,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"modules/NuiChartsModule.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{}}}],["collection.service",{"_index":835,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"modules/NuiChartsModule.html":{}}}],["collection.service.ts",{"_index":849,"title":{},"body":{"injectables/ChartCollectionService.html":{}}}],["collection.service.ts:14",{"_index":859,"title":{},"body":{"injectables/ChartCollectionService.html":{}}}],["collection/chart",{"_index":810,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"modules/NuiChartsModule.html":{}}}],["collectionid",{"_index":843,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{}}}],["collections",{"_index":852,"title":{},"body":{"injectables/ChartCollectionService.html":{},"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["collision",{"_index":1248,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipNode.html":{},"injectables/ThresholdsService.html":{}}}],["collisionforce",{"_index":1411,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["collisiontimeout",{"_index":1334,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["color",{"_index":52,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChartMarker.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYGridConfig.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/MarkerUtils.html":{},"classes/PathMarker.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RectangleAccessors.html":{},"components/RichLegendTileComponent.html":{},"classes/SequentialColorProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["color.helper",{"_index":1078,"title":{},"body":{"classes/ChartPalette.html":{},"classes/TextColorProvider.html":{}}}],["color1",{"_index":4123,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["color2",{"_index":4124,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["coloraccessor",{"_index":2852,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["coloraccessor(dataseries.id",{"_index":2857,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["colordefinitions",{"_index":4098,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["colordefinitions.dark",{"_index":4118,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["colordefinitions.light",{"_index":4119,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["colorprovider",{"_index":23,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"classes/LineAccessors.html":{},"classes/RadialAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/VerticalBarAccessors.html":{}}}],["colorprovider.get(d.__thresholds.status",{"_index":4243,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["colorprovider.get(series.value",{"_index":4282,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["colors",{"_index":1069,"title":{"additional-documentation/advanced-usage/input-structure/colors.html":{}},"body":{"classes/ChartPalette.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineAccessors.html":{},"classes/MappedValueProvider.html":{},"classes/NoopAccessors.html":{},"classes/SequentialColorProvider.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"additional-documentation/advanced-usage.html":{}}}],["column",{"_index":2996,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["combination",{"_index":4719,"title":{},"body":{"license.html":{}}}],["comment",{"_index":4859,"title":{},"body":{"license.html":{}}}],["commercial",{"_index":4831,"title":{},"body":{"license.html":{}}}],["common",{"_index":3168,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{}}}],["common/chart",{"_index":592,"title":{},"body":{"classes/Chart.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/ZoomPlugin.html":{}}}],["common/data",{"_index":593,"title":{},"body":{"classes/Chart.html":{}}}],["common/event",{"_index":595,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["common/lasagna",{"_index":598,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["common/mouse",{"_index":2336,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["common/palette/chart",{"_index":4026,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["common/palette/default",{"_index":3163,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["common/palette/palettes",{"_index":4029,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["common/palette/sequential",{"_index":4030,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["common/render",{"_index":599,"title":{},"body":{"classes/Chart.html":{}}}],["common/scales/band",{"_index":2338,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["common/scales/domain",{"_index":2341,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["common/scales/helpers/convert",{"_index":3013,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["common/scales/linear",{"_index":2344,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["common/scales/types",{"_index":1686,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/ZoomPlugin.html":{}}}],["common/types",{"_index":602,"title":{},"body":{"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/SparkChartAssist.html":{},"classes/ZoomPlugin.html":{}}}],["common/utility.service",{"_index":1687,"title":{},"body":{"classes/Grid.html":{},"classes/InteractionLabelPlugin.html":{},"classes/SparkChartAssist.html":{}}}],["commonly",{"_index":1913,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/typealiases.html":{}}}],["communication",{"_index":4674,"title":{},"body":{"license.html":{}}}],["compare",{"_index":293,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["comparison",{"_index":369,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IScaleSVGElement.html":{}}}],["compensate",{"_index":4412,"title":{},"body":{"classes/UtilityService.html":{}}}],["compiled",{"_index":4643,"title":{},"body":{"license.html":{}}}],["compliance",{"_index":4871,"title":{},"body":{"license.html":{}}}],["complies",{"_index":4770,"title":{},"body":{"license.html":{}}}],["component",{"_index":482,"title":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{},"index.html":{}}}],["component_template",{"_index":503,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["components",{"_index":484,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{},"overview.html":{}}}],["computed",{"_index":4458,"title":{},"body":{"classes/UtilityService.html":{}}}],["computer",{"_index":4828,"title":{},"body":{"license.html":{}}}],["condition",{"_index":2682,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["condition(elementstodisplay",{"_index":2693,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["conditions",{"_index":4597,"title":{},"body":{"license.html":{}}}],["config",{"_index":148,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialPopoverPlugin.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["config(config",{"_index":1670,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["config.classname",{"_index":1820,"title":{},"body":{"classes/Grid.html":{}}}],["config.color",{"_index":1824,"title":{},"body":{"classes/Grid.html":{}}}],["config.cursor",{"_index":2435,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["config.dimension.margin",{"_index":2436,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["config.eventstreamid",{"_index":1165,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["config.gridticks",{"_index":2390,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["config.interactionplugins",{"_index":2437,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["config.interactive",{"_index":2431,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["config.showbottomaxis",{"_index":422,"title":{},"body":{"classes/BarStatusGridConfig.html":{}}}],["config.ts",{"_index":84,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/DimensionConfig.html":{},"classes/GridConfig.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/XYGridConfig.html":{}}}],["config.ts:10",{"_index":167,"title":{},"body":{"classes/AxisConfig.html":{},"classes/MissingDataLineRendererConfig.html":{}}}],["config.ts:11",{"_index":1859,"title":{},"body":{"classes/GridConfig.html":{}}}],["config.ts:13",{"_index":175,"title":{},"body":{"classes/AxisConfig.html":{}}}],["config.ts:14",{"_index":1553,"title":{},"body":{"classes/DimensionConfig.html":{},"classes/GridConfig.html":{}}}],["config.ts:16",{"_index":174,"title":{},"body":{"classes/AxisConfig.html":{},"classes/GridConfig.html":{},"classes/XYGridConfig.html":{}}}],["config.ts:21",{"_index":1552,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["config.ts:22",{"_index":166,"title":{},"body":{"classes/AxisConfig.html":{}}}],["config.ts:23",{"_index":4477,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["config.ts:27",{"_index":178,"title":{},"body":{"classes/AxisConfig.html":{}}}],["config.ts:28",{"_index":1857,"title":{},"body":{"classes/GridConfig.html":{}}}],["config.ts:29",{"_index":1551,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["config.ts:3",{"_index":419,"title":{},"body":{"classes/BarStatusGridConfig.html":{}}}],["config.ts:30",{"_index":1858,"title":{},"body":{"classes/GridConfig.html":{}}}],["config.ts:31",{"_index":1550,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["config.ts:32",{"_index":181,"title":{},"body":{"classes/AxisConfig.html":{},"classes/GridConfig.html":{},"classes/XYGridConfig.html":{}}}],["config.ts:34",{"_index":1566,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["config.ts:36",{"_index":169,"title":{},"body":{"classes/AxisConfig.html":{},"classes/DimensionConfig.html":{}}}],["config.ts:38",{"_index":1568,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["config.ts:47",{"_index":1554,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["config.ts:49",{"_index":1556,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["config.ts:51",{"_index":1557,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["config.ts:6",{"_index":107,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{}}}],["config.ts:60",{"_index":1562,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["config.ts:62",{"_index":1564,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["config.ts:64",{"_index":1565,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["config.ts:7",{"_index":176,"title":{},"body":{"classes/AxisConfig.html":{},"classes/DimensionConfig.html":{},"classes/MissingDataLineRendererConfig.html":{}}}],["config.ts:74",{"_index":1558,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["config.ts:76",{"_index":1560,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["config.ts:78",{"_index":1561,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["config.ts:8",{"_index":3573,"title":{},"body":{"classes/MissingDataLineRendererConfig.html":{}}}],["config.ts:9",{"_index":3575,"title":{},"body":{"classes/MissingDataLineRendererConfig.html":{},"classes/XYGridConfig.html":{}}}],["config.visible",{"_index":2442,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["config.width",{"_index":1822,"title":{},"body":{"classes/Grid.html":{}}}],["config/grid",{"_index":1688,"title":{},"body":{"classes/Grid.html":{}}}],["config/xy",{"_index":2350,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["configuration",{"_index":257,"title":{},"body":{"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/ChartPopoverPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/PieRenderer.html":{},"classes/RadialPopoverPlugin.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["configurations",{"_index":2073,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["configure",{"_index":2130,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["configurecharteventsubscriptions(eventbus",{"_index":3280,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["configurecssfilters",{"_index":671,"title":{},"body":{"classes/Chart.html":{}}}],["configured",{"_index":1163,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["configureeventsubscriptions(eventbus",{"_index":4064,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["configuring",{"_index":2278,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["confine",{"_index":2953,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["conflict",{"_index":2780,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["conflicts",{"_index":3495,"title":{},"body":{"classes/MappedValueProvider.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{}}}],["conform",{"_index":1985,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"index.html":{}}}],["conforming",{"_index":88,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{}}}],["connectedposition",{"_index":1441,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["connection",{"_index":3786,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["connection_points",{"_index":3791,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["connection_points[sectionindex].x",{"_index":3824,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["connection_points[sectionindex].y",{"_index":3825,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["consequential",{"_index":4821,"title":{},"body":{"license.html":{}}}],["consider",{"_index":250,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["considered",{"_index":5031,"title":{},"body":{"miscellaneous/variables.html":{}}}],["considers",{"_index":5029,"title":{},"body":{"miscellaneous/variables.html":{}}}],["consist",{"_index":4020,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["consistent",{"_index":4843,"title":{},"body":{"license.html":{}}}],["consistently",{"_index":2791,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["consists",{"_index":753,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{}}}],["conspicuously",{"_index":4686,"title":{},"body":{"license.html":{}}}],["const",{"_index":231,"title":{},"body":{"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Chart.html":{},"components/ChartComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/Grid.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/PathMarker.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["constant",{"_index":1956,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/PieRenderer.html":{},"injectables/ThresholdsService.html":{}}}],["constants",{"_index":324,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Chart.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/ZoomPlugin.html":{}}}],["constitutes",{"_index":4727,"title":{},"body":{"license.html":{}}}],["constructor",{"_index":14,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/NoopAccessors.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYGridConfig.html":{},"classes/ZoomPlugin.html":{}}}],["constructor(@host",{"_index":3905,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["constructor(@inject(chart_component",{"_index":844,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["constructor(@optional",{"_index":3396,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["constructor(baraccessors",{"_index":4079,"title":{},"body":{"classes/StatusAccessors.html":{}}}],["constructor(changedetector",{"_index":1002,"title":{},"body":{"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{}}}],["constructor(chartassist",{"_index":3142,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["constructor(chartcomponent",{"_index":829,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["constructor(colorprovider",{"_index":15,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"classes/HorizontalBarAccessors.html":{},"classes/LineAccessors.html":{},"classes/RadialAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["constructor(colors",{"_index":1064,"title":{},"body":{"classes/ChartPalette.html":{},"classes/SequentialColorProvider.html":{}}}],["constructor(config",{"_index":418,"title":{},"body":{"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/ZoomPlugin.html":{}}}],["constructor(d",{"_index":3694,"title":{},"body":{"classes/PathMarker.html":{}}}],["constructor(dataseries",{"_index":1527,"title":{},"body":{"classes/DataSeries.html":{}}}],["constructor(elref",{"_index":874,"title":{},"body":{"components/ChartComponent.html":{}}}],["constructor(formattername",{"_index":3007,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["constructor(grid",{"_index":543,"title":{},"body":{"classes/Chart.html":{}}}],["constructor(id",{"_index":3453,"title":{},"body":{"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"classes/TimeScale.html":{}}}],["constructor(legend",{"_index":3346,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["constructor(legendseries",{"_index":3896,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["constructor(loggerservice",{"_index":4158,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["constructor(markers",{"_index":3964,"title":{},"body":{"classes/SequentialChartMarkerProvider.html":{}}}],["constructor(private",{"_index":54,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Chart.html":{},"components/ChartComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITooltipNode.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/MappedValueProvider.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/StatusAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["constructor(protected",{"_index":4092,"title":{},"body":{"classes/SvgMarker.html":{}}}],["constructor(public",{"_index":803,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"classes/ChartPopoverPlugin.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LegendInteractionAssist.html":{},"classes/Renderer.html":{},"classes/SparkChartAssist.html":{},"classes/ZoomPlugin.html":{}}}],["constructor(readonly",{"_index":1469,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["constructor(scalekey",{"_index":278,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["constructor(seriesid",{"_index":757,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{}}}],["constructor(showbottomaxis",{"_index":3991,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["constructor(sourceprovider",{"_index":3741,"title":{},"body":{"classes/ProcessedColorProvider.html":{},"classes/TextColorProvider.html":{}}}],["constructor(svg",{"_index":4088,"title":{},"body":{"classes/SvgMarker.html":{}}}],["constructor(tooltippositionoffset",{"_index":1429,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{}}}],["constructor(valuemap",{"_index":3496,"title":{},"body":{"classes/MappedValueProvider.html":{}}}],["constructor(values",{"_index":3970,"title":{},"body":{"classes/SequentialValueProvider.html":{}}}],["construed",{"_index":4766,"title":{},"body":{"license.html":{}}}],["consumer",{"_index":1971,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["consumers",{"_index":1896,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"index.html":{}}}],["contained",{"_index":4753,"title":{},"body":{"license.html":{}}}],["container",{"_index":719,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["container.append(\"g",{"_index":2646,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["container.append(\"line",{"_index":1818,"title":{},"body":{"classes/Grid.html":{}}}],["container.attr(\"transform",{"_index":2755,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["containers",{"_index":2147,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["containing",{"_index":1653,"title":{},"body":{"classes/Grid.html":{},"classes/LegendInteractionAssist.html":{}}}],["content",{"_index":939,"title":{},"body":{"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"license.html":{}}}],["content'},{'name",{"_index":509,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["content.component",{"_index":3677,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["content.component.html",{"_index":941,"title":{},"body":{"components/ChartDonutContentComponent.html":{}}}],["content.component.less",{"_index":940,"title":{},"body":{"components/ChartDonutContentComponent.html":{}}}],["content.component.ts",{"_index":938,"title":{},"body":{"components/ChartDonutContentComponent.html":{}}}],["content.component.ts:15",{"_index":944,"title":{},"body":{"components/ChartDonutContentComponent.html":{}}}],["content.component.ts:18",{"_index":947,"title":{},"body":{"components/ChartDonutContentComponent.html":{}}}],["content/chart",{"_index":937,"title":{},"body":{"components/ChartDonutContentComponent.html":{},"modules/NuiChartsModule.html":{}}}],["content]=\"serieshasadditionalcontent",{"_index":3917,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["contentposition",{"_index":942,"title":{},"body":{"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{}}}],["contentpositionupdatesubject",{"_index":964,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["contentpositionupdatesubscription",{"_index":952,"title":{},"body":{"components/ChartDonutContentComponent.html":{}}}],["contents",{"_index":4761,"title":{},"body":{"license.html":{}}}],["context",{"_index":4891,"title":{},"body":{"miscellaneous/variables.html":{}}}],["continue",{"_index":3870,"title":{},"body":{"classes/Renderer.html":{}}}],["continuous",{"_index":2174,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{},"injectables/ThresholdsService.html":{},"miscellaneous/variables.html":{}}}],["contract",{"_index":4621,"title":{},"body":{"license.html":{}}}],["contrast",{"_index":4096,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["contribution",{"_index":4664,"title":{},"body":{"license.html":{}}}],["contribution(s",{"_index":4717,"title":{},"body":{"license.html":{}}}],["contributions",{"_index":4772,"title":{},"body":{"license.html":{}}}],["contributor",{"_index":4690,"title":{},"body":{"license.html":{}}}],["contributory",{"_index":4728,"title":{},"body":{"license.html":{}}}],["control",{"_index":4612,"title":{},"body":{"license.html":{}}}],["controlled",{"_index":4613,"title":{},"body":{"license.html":{}}}],["convenience",{"_index":3206,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["conversion",{"_index":3792,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["conversions",{"_index":4644,"title":{},"body":{"license.html":{}}}],["convert",{"_index":2305,"title":{},"body":{"interfaces/IScale.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"classes/TimeScale.html":{}}}],["convert(scale",{"_index":3069,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["convert(value",{"_index":2181,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{}}}],["converted",{"_index":2180,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["converts",{"_index":1513,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["coordinate",{"_index":2179,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYAccessors.html":{}}}],["coordinates",{"_index":1933,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{}}}],["copies",{"_index":4734,"title":{},"body":{"license.html":{}}}],["copy",{"_index":4739,"title":{},"body":{"license.html":{}}}],["copy/paste",{"_index":4580,"title":{},"body":{"index.html":{}}}],["copyright",{"_index":4605,"title":{},"body":{"license.html":{}}}],["core/chart",{"_index":861,"title":{},"body":{"injectables/ChartCollectionService.html":{}}}],["core/common/palette/default",{"_index":31,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"classes/LineAccessors.html":{},"classes/RadialAccessors.html":{}}}],["core/common/renderer",{"_index":2100,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/NoopRenderer.html":{},"classes/XYRenderer.html":{}}}],["core/common/scales/helpers/is",{"_index":3531,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["core/common/scales/types",{"_index":327,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{}}}],["core/common/types",{"_index":38,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/RadialAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"classes/StatusAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYRenderer.html":{}}}],["core/common/utility.service",{"_index":330,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["core/grid/config/xy",{"_index":4025,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["core/plugins/chart",{"_index":950,"title":{},"body":{"components/ChartDonutContentComponent.html":{},"components/ChartPopoverComponent.html":{}}}],["core/plugins/tooltips/chart",{"_index":1324,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["core/plugins/types",{"_index":951,"title":{},"body":{"components/ChartDonutContentComponent.html":{},"components/ChartPopoverComponent.html":{}}}],["core/types",{"_index":2821,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["correction",{"_index":1696,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["corresponding",{"_index":2178,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"classes/XYRenderer.html":{}}}],["corresponds",{"_index":3005,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["counter",{"_index":2681,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["counterclaim",{"_index":4724,"title":{},"body":{"license.html":{}}}],["courtesy",{"_index":4436,"title":{},"body":{"classes/UtilityService.html":{}}}],["cover",{"_index":1246,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["crash",{"_index":634,"title":{},"body":{"classes/Chart.html":{}}}],["create",{"_index":4582,"title":{},"body":{"index.html":{}}}],["createborder(container",{"_index":1817,"title":{},"body":{"classes/Grid.html":{}}}],["createchart(lastspark",{"_index":4057,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["created",{"_index":1816,"title":{},"body":{"classes/Grid.html":{},"index.html":{}}}],["created3scale",{"_index":3482,"title":{},"body":{"classes/LinearScale.html":{},"classes/Scale.html":{},"classes/TimeScale.html":{}}}],["creates",{"_index":1812,"title":{},"body":{"classes/Grid.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/PathMarker.html":{},"classes/Scale.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SvgMarker.html":{},"injectables/ThresholdsService.html":{}}}],["creating",{"_index":1777,"title":{},"body":{"classes/Grid.html":{},"injectables/ThresholdsService.html":{}}}],["creation",{"_index":4147,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["critical",{"_index":4529,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["cross",{"_index":2011,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"injectables/ThresholdsService.html":{},"license.html":{}}}],["crosshair",{"_index":137,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/GridConfig.html":{},"classes/MarkerUtils.html":{},"classes/XYGridConfig.html":{}}}],["crosspoints",{"_index":4268,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["cs.renderer.getdomainoffiltereddata(cs",{"_index":5026,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cs.scales[next",{"_index":5022,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cs.scales[scalekey",{"_index":5027,"title":{},"body":{"miscellaneous/variables.html":{}}}],["css",{"_index":737,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["css.escape",{"_index":4373,"title":{},"body":{"classes/UtilityService.html":{}}}],["cssclass",{"_index":219,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["cssescape",{"_index":4362,"title":{},"body":{"classes/UtilityService.html":{}}}],["cssescape(value",{"_index":4371,"title":{},"body":{"classes/UtilityService.html":{}}}],["cssfilterid",{"_index":607,"title":{},"body":{"classes/Chart.html":{},"miscellaneous/enumerations.html":{}}}],["cssfilterid.grayscale",{"_index":682,"title":{},"body":{"classes/Chart.html":{}}}],["current",{"_index":784,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["current.data.length",{"_index":978,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["current.renderer",{"_index":974,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["current.renderer.getinnerradius(current.scales.r.range",{"_index":977,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["currently",{"_index":3245,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"injectables/ThresholdsService.html":{}}}],["currenttooltipdirectivesindex",{"_index":1347,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["currenttooltipdirectivesindex[seriesid",{"_index":1353,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["cursor",{"_index":102,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/GridConfig.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/MarkerUtils.html":{},"classes/XYGridConfig.html":{},"miscellaneous/variables.html":{}}}],["curve",{"_index":2094,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["curvefactory",{"_index":2093,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["curvetype",{"_index":2089,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["custom",{"_index":790,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/IXYDataAccessors.html":{},"classes/LineAccessors.html":{},"classes/RadialAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/XYAccessors.html":{}}}],["customary",{"_index":4788,"title":{},"body":{"license.html":{}}}],["customizations",{"_index":4553,"title":{},"body":{"index.html":{}}}],["customized",{"_index":4550,"title":{},"body":{"index.html":{}}}],["cycle",{"_index":4014,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["d",{"_index":57,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/Grid.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/PathMarker.html":{},"classes/RadialAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"classes/StatusAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"miscellaneous/variables.html":{}}}],["d.__thresholds",{"_index":4241,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["d.__thresholds.status",{"_index":4242,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["d.active",{"_index":2829,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["d.category",{"_index":223,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["d.defined",{"_index":2286,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["d.end",{"_index":4280,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["d.hasownproperty(\"defined",{"_index":2285,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["d.height",{"_index":1794,"title":{},"body":{"classes/Grid.html":{}}}],["d.index",{"_index":1257,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{}}}],["d.margin.bottom",{"_index":2743,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["d.margin.left",{"_index":2724,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["d.margin.right",{"_index":2729,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["d.margin.top",{"_index":2740,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["d.marginlocked?.left",{"_index":2721,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["d.marginlocked?.right",{"_index":2726,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["d.name",{"_index":1542,"title":{},"body":{"classes/DataSeries.html":{}}}],["d.outerheight",{"_index":2720,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["d.outerheight(oldouterheight",{"_index":2747,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["d.outerwidth",{"_index":2718,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["d.outerwidth(oldouterwidth",{"_index":2746,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["d.position",{"_index":1258,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{}}}],["d.position.width",{"_index":1253,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["d.position.x",{"_index":1240,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["d.position.y",{"_index":3775,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["d.start",{"_index":4278,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["d.status",{"_index":2888,"title":{},"body":{"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{}}}],["d.value",{"_index":1543,"title":{},"body":{"classes/DataSeries.html":{},"classes/DonutGaugeRenderingUtil.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"classes/RadialAccessors.html":{}}}],["d.width",{"_index":1793,"title":{},"body":{"classes/Grid.html":{}}}],["d.x",{"_index":60,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"classes/LineAccessors.html":{},"classes/XYAccessors.html":{}}}],["d.y",{"_index":62,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"classes/LineAccessors.html":{},"classes/XYAccessors.html":{}}}],["d3",{"_index":313,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/Chart.html":{},"classes/ChartPalette.html":{},"components/ChartTooltipsComponent.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"modules/NuiChartsModule.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{},"dependencies.html":{},"miscellaneous/typealiases.html":{}}}],["d3's",{"_index":3452,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["d3scale",{"_index":2165,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{}}}],["d3selection",{"_index":550,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/typealiases.html":{}}}],["d[\"__stack_x\"]?.end",{"_index":66,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["d[\"__stack_x\"]?.start",{"_index":64,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["d[\"__stack_y\"]?.end",{"_index":70,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["d[\"__stack_y\"]?.start",{"_index":68,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["damages",{"_index":4819,"title":{},"body":{"license.html":{}}}],["dark",{"_index":1095,"title":{},"body":{"classes/ChartPalette.html":{},"classes/TextColorProvider.html":{},"miscellaneous/variables.html":{}}}],["darken",{"_index":3738,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["darker",{"_index":4132,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["dasharray",{"_index":2118,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["data",{"_index":12,"title":{"additional-documentation/advanced-usage/input-structure/data.html":{}},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"components/ChartComponent.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"classes/SideIndicatorAccessors.html":{},"classes/StatusAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"additional-documentation/advanced-usage.html":{}}}],["data.__bar",{"_index":227,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["data.__bar.end",{"_index":235,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["data.__bar.start",{"_index":228,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["data.coordinates",{"_index":2945,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["data.coordinates.x",{"_index":2946,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["data.datapoints",{"_index":3283,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["data.end",{"_index":236,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["data.filter((d",{"_index":3881,"title":{},"body":{"classes/Renderer.html":{}}}],["data.foreach((d",{"_index":1616,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["data.index",{"_index":3284,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["data.interactiontype",{"_index":3282,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["data.length",{"_index":3874,"title":{},"body":{"classes/Renderer.html":{}}}],["data.push(value",{"_index":3093,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["data.start",{"_index":230,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["data.value",{"_index":221,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["data[i",{"_index":1620,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["data_point_interaction_reset",{"_index":322,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/MarkerUtils.html":{}}}],["data_point_not_found",{"_index":323,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/Renderer.html":{}}}],["dataaccessor",{"_index":33,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"classes/DataSeries.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineAccessors.html":{},"classes/RadialAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"classes/StatusAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/XYAccessors.html":{},"miscellaneous/typealiases.html":{}}}],["dataaccessorkey",{"_index":3174,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["dataaccessors",{"_index":352,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["dataaccessors[\"end",{"_index":357,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["dataaccessors[\"start",{"_index":355,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["datafrom",{"_index":4188,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["datafrom.x",{"_index":4315,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["datafrom.y",{"_index":4317,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["datamanager",{"_index":562,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["datapoint",{"_index":411,"title":{},"body":{"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{}}}],["datapoint.data",{"_index":3795,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["datapoint.index",{"_index":3182,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["datapoint.position",{"_index":1507,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["datapoint.position.x",{"_index":1509,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["datapoint.position.y",{"_index":1510,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["datapoint.position?.height",{"_index":1511,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["datapoint.position?.width",{"_index":1512,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["datapoint?.position?.x",{"_index":3537,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["datapoint?.position?.y",{"_index":3539,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["datapointindex",{"_index":310,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["datapointposition",{"_index":4497,"title":{},"body":{"classes/XYRenderer.html":{}}}],["datapointpositions",{"_index":438,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["datapoints",{"_index":439,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{}}}],["datapoints[seriesid",{"_index":4068,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["datapointsleft",{"_index":1238,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["datapointstop",{"_index":3774,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["datapointsubject",{"_index":3516,"title":{},"body":{"classes/MarkerUtils.html":{},"classes/Renderer.html":{}}}],["datapointsubject.next",{"_index":3550,"title":{},"body":{"classes/MarkerUtils.html":{},"classes/Renderer.html":{}}}],["dataseries",{"_index":222,"title":{"classes/DataSeries.html":{}},"body":{"classes/BarAccessors.html":{},"classes/DataSeries.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{}}}],["dataseries.accessors",{"_index":1541,"title":{},"body":{"classes/DataSeries.html":{},"classes/MarkerUtils.html":{}}}],["dataseries.accessors.data?.[scalename",{"_index":3878,"title":{},"body":{"classes/Renderer.html":{}}}],["dataseries.accessors.data?.[scalename]?.(datum",{"_index":3876,"title":{},"body":{"classes/Renderer.html":{}}}],["dataseries.accessors.data?.x",{"_index":4494,"title":{},"body":{"classes/XYRenderer.html":{}}}],["dataseries.accessors.data?.y",{"_index":4495,"title":{},"body":{"classes/XYRenderer.html":{}}}],["dataseries.data",{"_index":1534,"title":{},"body":{"classes/DataSeries.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["dataseries.data.length",{"_index":2849,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/MarkerUtils.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYRenderer.html":{}}}],["dataseries.data[index",{"_index":4493,"title":{},"body":{"classes/XYRenderer.html":{}}}],["dataseries.id",{"_index":1533,"title":{},"body":{"classes/DataSeries.html":{}}}],["dataseries.name",{"_index":1536,"title":{},"body":{"classes/DataSeries.html":{}}}],["dataset",{"_index":3604,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["datashift",{"_index":4313,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["datashift.x",{"_index":4324,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["datashift.y",{"_index":4323,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["datato",{"_index":4183,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["datato.x",{"_index":4314,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["datato.y",{"_index":4316,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["date",{"_index":4352,"title":{},"body":{"classes/TimeScale.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["date().gettime",{"_index":4424,"title":{},"body":{"classes/UtilityService.html":{}}}],["dates",{"_index":5003,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datetimeformatter",{"_index":4355,"title":{},"body":{"classes/TimeScale.html":{},"miscellaneous/variables.html":{}}}],["datum",{"_index":1900,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/Renderer.html":{}}}],["debounce",{"_index":885,"title":{},"body":{"components/ChartComponent.html":{},"interfaces/IScaleSVGElement.html":{}}}],["debouncing",{"_index":2618,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["declarations",{"_index":3656,"title":{},"body":{"modules/NuiChartsModule.html":{},"index.html":{},"overview.html":{}}}],["decorator",{"_index":3855,"title":{},"body":{"classes/Renderer.html":{}}}],["decorators",{"_index":1012,"title":{},"body":{"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{}}}],["deemphasized",{"_index":2106,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"miscellaneous/enumerations.html":{}}}],["deemphasizes",{"_index":3247,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["deep",{"_index":291,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["default",{"_index":109,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"components/ChartComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYDataAccessors.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["default_border_class_name",{"_index":1635,"title":{},"body":{"classes/Grid.html":{}}}],["default_config",{"_index":1170,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialPopoverPlugin.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{}}}],["default_margin",{"_index":98,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["default_marker_container_class",{"_index":3507,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["default_marker_interaction_config",{"_index":3520,"title":{},"body":{"classes/MarkerUtils.html":{},"miscellaneous/variables.html":{}}}],["default_padding",{"_index":99,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["default_radial_renderer_config",{"_index":3721,"title":{},"body":{"classes/PieRenderer.html":{},"miscellaneous/variables.html":{}}}],["defaultarcobject",{"_index":3729,"title":{},"body":{"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["defaultcolorprovider",{"_index":29,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"classes/LineAccessors.html":{},"classes/RadialAccessors.html":{}}}],["defaulting",{"_index":2378,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["defaultmarkerprovider",{"_index":30,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{}}}],["defaultpalette",{"_index":3162,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["defaults",{"_index":3720,"title":{},"body":{"classes/PieRenderer.html":{}}}],["defaultsdeep",{"_index":1195,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/ZoomPlugin.html":{}}}],["defaultsdeep(this.config",{"_index":1210,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/ZoomPlugin.html":{}}}],["defaulttextoverflowhandler",{"_index":173,"title":{},"body":{"classes/AxisConfig.html":{}}}],["defaultvalue",{"_index":3497,"title":{},"body":{"classes/MappedValueProvider.html":{}}}],["defend",{"_index":4848,"title":{},"body":{"license.html":{}}}],["define",{"_index":1949,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"injectables/ThresholdsService.html":{}}}],["defined",{"_index":17,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionValues.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYDataAccessors.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"license.html":{}}}],["defines",{"_index":2272,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["defining",{"_index":1898,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["definition",{"_index":1712,"title":{},"body":{"classes/Grid.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"interfaces/ZoneCross.html":{},"license.html":{}}}],["definitions",{"_index":3621,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{},"license.html":{}}}],["deliberate",{"_index":4814,"title":{},"body":{"license.html":{}}}],["dependencies",{"_index":3655,"title":{"dependencies.html":{}},"body":{"modules/NuiChartsModule.html":{},"dependencies.html":{},"overview.html":{}}}],["depending",{"_index":1989,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["deprecated",{"_index":2833,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["derivative",{"_index":4653,"title":{},"body":{"license.html":{}}}],["derive",{"_index":4178,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["derived",{"_index":1665,"title":{},"body":{"classes/Grid.html":{},"license.html":{}}}],["deriving",{"_index":2894,"title":{},"body":{"interfaces/IXYDataAccessors.html":{},"classes/LineAccessors.html":{},"classes/XYAccessors.html":{}}}],["describe",{"_index":1895,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["describing",{"_index":1977,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"license.html":{}}}],["description",{"_index":85,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopRenderer.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"license.html":{}}}],["descriptionprimary",{"_index":3338,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["descriptionsecondary",{"_index":3339,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["design",{"_index":4541,"title":{},"body":{"index.html":{}}}],["designated",{"_index":4688,"title":{},"body":{"license.html":{}}}],["designed",{"_index":4543,"title":{},"body":{"index.html":{}}}],["designers",{"_index":4545,"title":{},"body":{"index.html":{}}}],["desired",{"_index":2071,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["destroy",{"_index":443,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/EventBus.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["destroy_event",{"_index":590,"title":{},"body":{"classes/Chart.html":{},"interfaces/IScaleSVGElement.html":{},"classes/LegendInteractionAssist.html":{},"miscellaneous/variables.html":{}}}],["destruction",{"_index":2000,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["detects",{"_index":4169,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["determine",{"_index":2038,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/InteractionLabelPlugin.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["determined",{"_index":3608,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["determines",{"_index":2173,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["determining",{"_index":2127,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"license.html":{}}}],["devdependencies",{"_index":4563,"title":{},"body":{"index.html":{}}}],["diamond",{"_index":4975,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dictionary",{"_index":2004,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IElementPosition.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/ScalesIndex.html":{},"miscellaneous/typealiases.html":{}}}],["diff",{"_index":2715,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["different",{"_index":716,"title":{},"body":{"classes/Chart.html":{},"license.html":{}}}],["differs",{"_index":3176,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["digit",{"_index":5007,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dimension",{"_index":103,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/XYGridConfig.html":{},"classes/ZoomPlugin.html":{}}}],["dimension.height",{"_index":2966,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["dimension.padding",{"_index":2470,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["dimension.width",{"_index":2475,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["dimensionconfig",{"_index":140,"title":{"classes/DimensionConfig.html":{}},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/Chart.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/XYGridConfig.html":{}}}],["dimensionconfig.autoheight",{"_index":724,"title":{},"body":{"classes/Chart.html":{}}}],["dimensionconfig.autowidth",{"_index":727,"title":{},"body":{"classes/Chart.html":{}}}],["dimensionconfig.outerheight",{"_index":739,"title":{},"body":{"classes/Chart.html":{}}}],["dimensionconfig.outerheight(dimensions.height",{"_index":1760,"title":{},"body":{"classes/Grid.html":{}}}],["dimensionconfig.outerwidth",{"_index":742,"title":{},"body":{"classes/Chart.html":{}}}],["dimensionconfig.outerwidth(dimensions.width",{"_index":1758,"title":{},"body":{"classes/Grid.html":{}}}],["dimensions",{"_index":717,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["dimensions.height",{"_index":725,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{}}}],["dimensions.width",{"_index":728,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{}}}],["direct",{"_index":4617,"title":{},"body":{"license.html":{}}}],["direction",{"_index":4619,"title":{},"body":{"license.html":{}}}],["directive",{"_index":808,"title":{"directives/ChartCollectionIdDirective.html":{}},"body":{"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"overview.html":{}}}],["directives",{"_index":524,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["directiveschanged",{"_index":1354,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["directly",{"_index":254,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["disable",{"_index":837,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"classes/UtilityService.html":{}}}],["disableheightcorrection",{"_index":1788,"title":{},"body":{"classes/Grid.html":{}}}],["disablerenderareaheightcorrection",{"_index":104,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["disablerenderareawidthcorrection",{"_index":105,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["disablewidthcorrection",{"_index":1790,"title":{},"body":{"classes/Grid.html":{}}}],["disclaimer",{"_index":4790,"title":{},"body":{"license.html":{}}}],["discussing",{"_index":4684,"title":{},"body":{"license.html":{}}}],["display",{"_index":2069,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/LegendInteractionAssist.html":{},"license.html":{}}}],["displayed",{"_index":2070,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["displaying",{"_index":2545,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["distribute",{"_index":4707,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":4754,"title":{},"body":{"license.html":{}}}],["distribution",{"_index":4599,"title":{},"body":{"license.html":{}}}],["divided",{"_index":3783,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["diy",{"_index":366,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["document",{"_index":4603,"title":{},"body":{"license.html":{}}}],["document.createelement(\"path",{"_index":3702,"title":{},"body":{"classes/PathMarker.html":{}}}],["documentation",{"_index":4638,"title":{},"body":{"license.html":{}}}],["doesn't",{"_index":2569,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{}}}],["dom",{"_index":4913,"title":{},"body":{"miscellaneous/variables.html":{}}}],["domain",{"_index":1941,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LinearScale.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{},"classes/XYRenderer.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["domain(clonedscale",{"_index":5041,"title":{},"body":{"miscellaneous/variables.html":{}}}],["domain(domain",{"_index":2185,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{}}}],["domain.ts",{"_index":4901,"title":{},"body":{"miscellaneous/variables.html":{}}}],["domain[0",{"_index":3883,"title":{},"body":{"classes/Renderer.html":{}}}],["domaincalculator",{"_index":2159,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["domains",{"_index":3619,"title":{"additional-documentation/advanced-usage/scales/domains.html":{}},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/advanced-usage.html":{}}}],["don't",{"_index":2547,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"injectables/ThresholdsService.html":{},"license.html":{}}}],["donut",{"_index":508,"title":{"additional-documentation/chart-types/pie-and-donut.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"classes/RadialTooltipsPlugin.html":{},"components/RichLegendTileComponent.html":{},"index.html":{},"additional-documentation/chart-types.html":{}}}],["donutgaugerenderingutil",{"_index":1589,"title":{"classes/DonutGaugeRenderingUtil.html":{}},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["donutgaugerenderingutil.generatearcdata(data",{"_index":1602,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["donutgaugethresholdsrenderer",{"_index":1960,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["down",{"_index":4931,"title":{},"body":{"miscellaneous/variables.html":{}}}],["draw",{"_index":274,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IHighlightStrategy.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["draw(renderer",{"_index":296,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["draw(renderseries",{"_index":2841,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYRenderer.html":{}}}],["drawable",{"_index":1986,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["drawgrids(config",{"_index":2460,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["drawing",{"_index":2095,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["drawline",{"_index":1000,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["drawmarker",{"_index":3509,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["drawmarker(datapoint",{"_index":3515,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["draws",{"_index":3082,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["drawticks(config",{"_index":2441,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["driven",{"_index":2156,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{},"miscellaneous/variables.html":{}}}],["ds",{"_index":58,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["dt",{"_index":4423,"title":{},"body":{"classes/UtilityService.html":{}}}],["dynamic",{"_index":3854,"title":{},"body":{"classes/Renderer.html":{},"injectables/ThresholdsService.html":{}}}],["e",{"_index":2403,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["e.data",{"_index":2412,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["e.g",{"_index":1902,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineAccessors.html":{},"classes/NoopAccessors.html":{}}}],["each",{"_index":585,"title":{},"body":{"classes/Chart.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/Renderer.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"license.html":{}}}],["each(borderkeys",{"_index":1776,"title":{},"body":{"classes/Grid.html":{}}}],["each(eventlist",{"_index":3887,"title":{},"body":{"classes/Renderer.html":{}}}],["each(function",{"_index":393,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["each(nodes",{"_index":1420,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["each(object.keys(eventhandlers",{"_index":3287,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["each(object.keys(this.datapoints",{"_index":1495,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["each(object.keys(this.streams",{"_index":1631,"title":{},"body":{"classes/EventBus.html":{}}}],["each(this.plugins",{"_index":697,"title":{},"body":{"classes/Chart.html":{}}}],["each(this.scales.x.list",{"_index":2472,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["each(this.scales.y.list",{"_index":2478,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["easier",{"_index":4864,"title":{},"body":{"license.html":{}}}],["east",{"_index":3788,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["edge",{"_index":1432,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/UtilityService.html":{}}}],["editorial",{"_index":4654,"title":{},"body":{"license.html":{}}}],["effect",{"_index":2043,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/PathMarker.html":{}}}],["efficient",{"_index":367,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["eight",{"_index":4942,"title":{},"body":{"miscellaneous/variables.html":{}}}],["elaborations",{"_index":4657,"title":{},"body":{"license.html":{}}}],["electronic",{"_index":4671,"title":{},"body":{"license.html":{}}}],["element",{"_index":529,"title":{},"body":{"classes/Chart.html":{},"components/ChartComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/PathMarker.html":{},"classes/RadialTooltipsPlugin.html":{},"injectables/ThresholdsService.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["element's",{"_index":2238,"title":{},"body":{"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{}}}],["element.clientheight",{"_index":1383,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["element.clientwidth",{"_index":1382,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["element.offsetleft",{"_index":1380,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["element.offsettop",{"_index":1381,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["elementref",{"_index":875,"title":{},"body":{"components/ChartComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/LegendSeriesComponent.html":{}}}],["elements",{"_index":679,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/UtilityService.html":{},"miscellaneous/variables.html":{}}}],["elementsfiltering(elementstofilter",{"_index":2679,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["elementstodisplay",{"_index":2674,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["elementstodisplay.indexof(element",{"_index":2678,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["elementstodisplay.length",{"_index":2692,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["elementstofilter.filter((element",{"_index":2686,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["elementstofilter.filter(element",{"_index":2669,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["elementstofilter.reduce((prev",{"_index":2664,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["elementstofilter[0",{"_index":2663,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["ellipsis",{"_index":2604,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["ellipsis\").empty",{"_index":2607,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["ellipsis.node()?.getcomputedtextlength",{"_index":2613,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["ellipsiswidth",{"_index":2055,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["elref",{"_index":880,"title":{},"body":{"components/ChartComponent.html":{}}}],["emitevent(renderer",{"_index":3446,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["emits",{"_index":1177,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"components/LegendSeriesComponent.html":{},"classes/RadialPopoverPlugin.html":{}}}],["emitted",{"_index":794,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/LegendInteractionAssist.html":{},"miscellaneous/enumerations.html":{}}}],["emitting",{"_index":3599,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["emphasise",{"_index":344,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["emphasisstate",{"_index":756,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{}}}],["emphasisstate+visible",{"_index":754,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{}}}],["emphasize",{"_index":3246,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["emphasized",{"_index":2107,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"miscellaneous/enumerations.html":{}}}],["emphasizedseries",{"_index":2413,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["emphasizedseries.length",{"_index":2418,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["emphasizedyscale.id",{"_index":2425,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["emphasizedyscales",{"_index":2419,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["emphasizedyscales.length",{"_index":2423,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["emphasizeseries",{"_index":799,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/LegendInteractionAssist.html":{},"miscellaneous/enumerations.html":{}}}],["emphasizeseries(seriesid",{"_index":3145,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["emphasizing",{"_index":2024,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/typealiases.html":{}}}],["emphasizing/deemphasizing",{"_index":2402,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["empty",{"_index":1668,"title":{},"body":{"classes/Grid.html":{},"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"interfaces/ScalesIndex.html":{},"miscellaneous/variables.html":{}}}],["empty_continuous_domain",{"_index":2154,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"miscellaneous/variables.html":{}}}],["emptyshapes",{"_index":4895,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enable",{"_index":2143,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["enabled",{"_index":2112,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{},"miscellaneous/variables.html":{}}}],["enabledatapointhighlighting",{"_index":1959,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/variables.html":{}}}],["enableexternalevents",{"_index":2897,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["enableminbarthickness",{"_index":2146,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["enables",{"_index":2098,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"injectables/ThresholdsService.html":{}}}],["enableserieshighlighting",{"_index":1958,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/variables.html":{}}}],["encapsulation",{"_index":490,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/LegendComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["enclosed",{"_index":4856,"title":{},"body":{"license.html":{}}}],["end",{"_index":217,"title":{},"body":{"classes/BarAccessors.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"interfaces/ZoneCross.html":{},"miscellaneous/enumerations.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["endaccessor",{"_index":356,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["endaccessor(d",{"_index":383,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["ending",{"_index":4189,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["endx",{"_index":1885,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["endy",{"_index":1889,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["engage",{"_index":2951,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["engine",{"_index":600,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["enhanced",{"_index":2114,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"injectables/ThresholdsService.html":{}}}],["enhancedlinecap",{"_index":2134,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["enlarged",{"_index":1245,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["ensure",{"_index":2934,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/UtilityService.html":{},"classes/ZoomPlugin.html":{}}}],["ensures",{"_index":2995,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["entered",{"_index":1924,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["enters",{"_index":2006,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["entire",{"_index":2544,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["entirely",{"_index":4549,"title":{},"body":{"index.html":{}}}],["entities",{"_index":3494,"title":{},"body":{"classes/MappedValueProvider.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"license.html":{}}}],["entity",{"_index":2033,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"license.html":{}}}],["entityid",{"_index":2890,"title":{},"body":{"interfaces/IValueProvider.html":{},"classes/MappedValueProvider.html":{},"classes/ProcessedColorProvider.html":{},"classes/SequentialValueProvider.html":{}}}],["entries",{"_index":926,"title":{},"body":{"components/ChartComponent.html":{}}}],["entries[0].isintersecting",{"_index":935,"title":{},"body":{"components/ChartComponent.html":{}}}],["enum",{"_index":795,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/SideIndicatorAccessors.html":{},"interfaces/ZoneCross.html":{}}}],["enumerations",{"_index":4514,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":2605,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["equal",{"_index":2066,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["error(\"accessor",{"_index":3880,"title":{},"body":{"classes/Renderer.html":{}}}],["error(\"bottomborder",{"_index":1832,"title":{},"body":{"classes/Grid.html":{}}}],["error(\"can't",{"_index":4496,"title":{},"body":{"classes/XYRenderer.html":{}}}],["error(\"chart",{"_index":1235,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialPopoverPlugin.html":{}}}],["error(\"clr",{"_index":3750,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["error(\"container",{"_index":3532,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["error(\"grid",{"_index":613,"title":{},"body":{"classes/Chart.html":{}}}],["error(\"labelcontent",{"_index":3049,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["error(\"position",{"_index":1397,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["error(\"radius",{"_index":982,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["error(\"renderer.config.strokewidth",{"_index":3427,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["error(\"seriesid",{"_index":1352,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["error(\"statestyles",{"_index":3861,"title":{},"body":{"classes/Renderer.html":{}}}],["error(\"tick",{"_index":2710,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["error(\"unable",{"_index":1508,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["error(\"value",{"_index":4404,"title":{},"body":{"classes/UtilityService.html":{}}}],["error(\"xscale",{"_index":2487,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["error(\"yleftscale",{"_index":2502,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["errors",{"_index":381,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["eslint",{"_index":836,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"classes/Grid.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"classes/UtilityService.html":{}}}],["eslint/no",{"_index":840,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"classes/Grid.html":{},"classes/LegendInteractionAssist.html":{},"modules/NuiChartsModule.html":{}}}],["etc",{"_index":1904,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineAccessors.html":{},"classes/NoopAccessors.html":{},"classes/ProcessedColorProvider.html":{}}}],["even",{"_index":1778,"title":{},"body":{"classes/Grid.html":{},"license.html":{}}}],["event",{"_index":459,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/enumerations.html":{},"license.html":{}}}],["event.data",{"_index":3023,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/SparkChartAssist.html":{}}}],["event.data.datapoint",{"_index":1222,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["event.data.datapoint.seriesid",{"_index":1221,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["event.data.datapoints",{"_index":1220,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"classes/SparkChartAssist.html":{}}}],["event.data.datapoints[chartseries.id",{"_index":3217,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["event.data.foreach(series",{"_index":1478,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["event.data.interactiontype",{"_index":1215,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["event.data.ischartinview",{"_index":1482,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["event.payload[key",{"_index":3272,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["event.target.releasepointercapture(event.pointerid",{"_index":2963,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["event.target.setpointercapture(event.pointerid",{"_index":2961,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["eventbus",{"_index":530,"title":{"classes/EventBus.html":{}},"body":{"classes/Chart.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["eventbus.getstream(interaction_data_points_event).subscribe((event",{"_index":4065,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["eventbus.getstream(key).subscribe((event",{"_index":3288,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["eventbus.getstream(mouse_active_event).subscribe((event",{"_index":4069,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["eventemitter",{"_index":1125,"title":{},"body":{"components/ChartPopoverComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{}}}],["eventhandlers",{"_index":3281,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["eventhandlers[key](event.data",{"_index":3289,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["eventlist",{"_index":3884,"title":{},"body":{"classes/Renderer.html":{}}}],["eventname",{"_index":399,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/Renderer.html":{}}}],["events",{"_index":800,"title":{"additional-documentation/advanced-usage/events.html":{}},"body":{"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/advanced-usage.html":{}}}],["eventstreamid",{"_index":1185,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["evil",{"_index":1826,"title":{},"body":{"classes/Grid.html":{}}}],["example",{"_index":1634,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"license.html":{}}}],["examples",{"_index":3737,"title":{},"body":{"classes/ProcessedColorProvider.html":{},"index.html":{}}}],["except",{"_index":3994,"title":{},"body":{"classes/SparkChartAssist.html":{},"license.html":{}}}],["excludes",{"_index":1940,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["excluding",{"_index":2045,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"license.html":{}}}],["exclusive",{"_index":4698,"title":{},"body":{"license.html":{}}}],["executed",{"_index":4781,"title":{},"body":{"license.html":{}}}],["exercise",{"_index":4809,"title":{},"body":{"license.html":{}}}],["exercising",{"_index":4631,"title":{},"body":{"license.html":{}}}],["exist",{"_index":3533,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["existing",{"_index":3559,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["existingspark.id",{"_index":4051,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["existingsparkindex",{"_index":4048,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["exits",{"_index":2007,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["expect",{"_index":1987,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["expected",{"_index":2872,"title":{},"body":{"interfaces/ISimpleThresholdZone.html":{},"interfaces/ZoneCross.html":{}}}],["explicitly",{"_index":4774,"title":{},"body":{"license.html":{}}}],["export",{"_index":39,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"components/BasicLegendTileComponent.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"modules/NuiChartsModule.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{}}}],["exported",{"_index":4194,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["exports",{"_index":3657,"title":{},"body":{"modules/NuiChartsModule.html":{},"index.html":{},"overview.html":{}}}],["express",{"_index":4797,"title":{},"body":{"license.html":{}}}],["extend",{"_index":1765,"title":{},"body":{"classes/Grid.html":{}}}],["extended",{"_index":1443,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"miscellaneous/variables.html":{}}}],["extends",{"_index":41,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LineAccessors.html":{},"classes/LinearScale.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/StatusAccessors.html":{},"classes/TextColorProvider.html":{},"classes/TimeScale.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{}}}],["extent",{"_index":3852,"title":{},"body":{"classes/Renderer.html":{}}}],["extent(data",{"_index":3875,"title":{},"body":{"classes/Renderer.html":{}}}],["extracted",{"_index":1375,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["facilitate",{"_index":1980,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["facilitates",{"_index":4146,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["fails",{"_index":248,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["failure",{"_index":4829,"title":{},"body":{"license.html":{}}}],["fallback_formatter",{"_index":3014,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["false",{"_index":142,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"classes/XYGridConfig.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["false).classed(\"tick",{"_index":2531,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["far",{"_index":1448,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"miscellaneous/variables.html":{}}}],["fast",{"_index":1329,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["fee",{"_index":4837,"title":{},"body":{"license.html":{}}}],["fields",{"_index":2275,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{},"license.html":{}}}],["fifty",{"_index":4624,"title":{},"body":{"license.html":{}}}],["figure",{"_index":4485,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"components/BasicLegendTileComponent.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"modules/NuiChartsModule.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{},"index.html":{},"license.html":{}}}],["filed",{"_index":4732,"title":{},"body":{"license.html":{}}}],["files",{"_index":4639,"title":{},"body":{"license.html":{}}}],["fill",{"_index":1810,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/SideIndicatorAccessors.html":{}}}],["filter",{"_index":674,"title":{},"body":{"classes/Chart.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/LegendInteractionAssist.html":{},"classes/SideIndicatorAccessors.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["filter(c",{"_index":4258,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["filter(event",{"_index":3215,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["filter(rs",{"_index":2414,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["filterdatabydomain",{"_index":3581,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["filterdatabydomain(data",{"_index":3600,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["filterdefs",{"_index":531,"title":{},"body":{"classes/Chart.html":{}}}],["filtered",{"_index":3615,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["filtereddata",{"_index":3863,"title":{},"body":{"classes/Renderer.html":{}}}],["filterrepeatedelements(elementstofilter",{"_index":2661,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["filters",{"_index":3603,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["filterscale",{"_index":3866,"title":{},"body":{"classes/Renderer.html":{}}}],["filterscale.domain",{"_index":3872,"title":{},"body":{"classes/Renderer.html":{}}}],["filterscale.iscontinuous",{"_index":3869,"title":{},"body":{"classes/Renderer.html":{}}}],["filterscale.isdomainfixed",{"_index":3868,"title":{},"body":{"classes/Renderer.html":{}}}],["filterscales",{"_index":3617,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["filterscales[fixedscalekey",{"_index":3867,"title":{},"body":{"classes/Renderer.html":{}}}],["find",{"_index":3011,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/UtilityService.html":{},"miscellaneous/variables.html":{}}}],["find(scales[\"x\"].index",{"_index":3030,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["finddatapointbyvalue",{"_index":275,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["finddatapointbyvalue(series",{"_index":304,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["findindex",{"_index":315,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["findindex(series.data",{"_index":358,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["findnearestindex",{"_index":4363,"title":{},"body":{"classes/UtilityService.html":{}}}],["findnearestindex(haystack",{"_index":4375,"title":{},"body":{"classes/UtilityService.html":{}}}],["fine",{"_index":1409,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["firefox",{"_index":2752,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/MarkerUtils.html":{},"classes/ZoomPlugin.html":{}}}],["first",{"_index":653,"title":{},"body":{"classes/Chart.html":{},"interfaces/IScaleSVGElement.html":{},"injectables/ThresholdsService.html":{}}}],["firstcodeunit",{"_index":4447,"title":{},"body":{"classes/UtilityService.html":{}}}],["fit",{"_index":158,"title":{},"body":{"classes/AxisConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["fitbottomaxis(d",{"_index":2757,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["fitness",{"_index":4801,"title":{},"body":{"license.html":{}}}],["five",{"_index":4939,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fixdomain",{"_index":2306,"title":{},"body":{"interfaces/IScale.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"classes/TimeScale.html":{}}}],["fixdomain(domain",{"_index":2189,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{}}}],["fixed",{"_index":2188,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{},"miscellaneous/variables.html":{}}}],["fixeddomains",{"_index":5017,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fixedscalekey",{"_index":3864,"title":{},"body":{"classes/Renderer.html":{}}}],["fixleftmargin",{"_index":2573,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["fixrightmargin",{"_index":2574,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["flag",{"_index":2168,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["flexible",{"_index":4546,"title":{},"body":{"index.html":{}}}],["fn",{"_index":3742,"title":{},"body":{"classes/ProcessedColorProvider.html":{},"injectables/ThresholdsService.html":{}}}],["following",{"_index":4736,"title":{},"body":{"license.html":{}}}],["force",{"_index":1318,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["force(\"collisionforce",{"_index":1418,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["forcecollide",{"_index":1314,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["forcecollide((node",{"_index":1412,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["forcesimulation",{"_index":1315,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["forcesimulation(nodes",{"_index":1416,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["foreground",{"_index":2111,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/TextColorProvider.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/enumerations.html":{}}}],["form",{"_index":1912,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/ScalesIndex.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["format",{"_index":3172,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"dependencies.html":{},"license.html":{}}}],["formatsecond",{"_index":4896,"title":{},"body":{"miscellaneous/variables.html":{}}}],["formatter",{"_index":789,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IBandScale.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IScale.html":{},"interfaces/ISpark.html":{},"interfaces/IXYScales.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LegendInteractionAssist.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["formatter.ts",{"_index":4894,"title":{},"body":{"miscellaneous/variables.html":{}}}],["formatter?.(value",{"_index":3048,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["formattername",{"_index":788,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["formatters",{"_index":2160,"title":{"additional-documentation/advanced-usage/scales/formatters.html":{}},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/advanced-usage.html":{}}}],["formatters/datetime",{"_index":4356,"title":{},"body":{"classes/TimeScale.html":{}}}],["formatting",{"_index":3173,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["forming",{"_index":2050,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["forwardref",{"_index":871,"title":{},"body":{"components/ChartComponent.html":{}}}],["found",{"_index":3611,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["four",{"_index":4938,"title":{},"body":{"miscellaneous/variables.html":{}}}],["free",{"_index":4701,"title":{},"body":{"license.html":{}}}],["from/to",{"_index":4211,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["front",{"_index":648,"title":{},"body":{"classes/Chart.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["full",{"_index":4179,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["function",{"_index":895,"title":{},"body":{"components/ChartComponent.html":{},"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/ProcessedColorProvider.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/typealiases.html":{}}}],["functionality",{"_index":3836,"title":{},"body":{"classes/Renderer.html":{},"injectables/ThresholdsService.html":{}}}],["future",{"_index":1862,"title":{},"body":{"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["gap",{"_index":1697,"title":{},"body":{"classes/Grid.html":{}}}],["gauge",{"_index":1591,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{},"miscellaneous/enumerations.html":{}}}],["gauge/constants",{"_index":1909,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["gauge/types",{"_index":1600,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["gauge_quantity_series_id",{"_index":4897,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gauge_remainder_series_id",{"_index":4898,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gauge_threshold_markers_series_id",{"_index":4899,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gc",{"_index":4104,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["generatearcdata(data",{"_index":1610,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["generated",{"_index":2082,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"license.html":{}}}],["generates",{"_index":4170,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["generatethresholdrenderingdata",{"_index":1594,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["generatethresholdrenderingdata(data",{"_index":1595,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["generic",{"_index":1914,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/typealiases.html":{}}}],["get(entityid",{"_index":2028,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["get(this.interaction",{"_index":3885,"title":{},"body":{"classes/Renderer.html":{}}}],["getabsoluteposition(relativeposition",{"_index":1519,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["getabsoluteposition(valarr",{"_index":3772,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["getabsoluteposition(valuesarray",{"_index":1231,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["getapproximateticks",{"_index":177,"title":{},"body":{"classes/AxisConfig.html":{}}}],["getarc(range",{"_index":3731,"title":{},"body":{"classes/PieRenderer.html":{}}}],["getautomaticdomain",{"_index":2339,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/LinearScale.html":{},"classes/Scale.html":{},"classes/TimeScale.html":{},"miscellaneous/variables.html":{}}}],["getautomaticdomain(chartseriesset",{"_index":5033,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getautomaticdomainwithincludedinterval",{"_index":4902,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getautomaticdomainwithticks",{"_index":2340,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"miscellaneous/variables.html":{}}}],["getautomaticdomainwithticks(config",{"_index":2392,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["getbackgroundcolors",{"_index":1072,"title":{},"body":{"classes/ChartPalette.html":{}}}],["getbackgrounds",{"_index":4150,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getbackgrounds(sourceseries",{"_index":4161,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getbackgroundsdataforcontinuousscale(sourceseries",{"_index":4250,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getchartcollection",{"_index":857,"title":{},"body":{"injectables/ChartCollectionService.html":{}}}],["getchartcollection(collectionid",{"_index":858,"title":{},"body":{"injectables/ChartCollectionService.html":{}}}],["getcloser(a",{"_index":4419,"title":{},"body":{"classes/UtilityService.html":{}}}],["getclosestindex",{"_index":4364,"title":{},"body":{"classes/UtilityService.html":{}}}],["getclosestindex(haystack",{"_index":4385,"title":{},"body":{"classes/UtilityService.html":{}}}],["getcolorvaluebyname",{"_index":1077,"title":{},"body":{"classes/ChartPalette.html":{},"classes/TextColorProvider.html":{}}}],["getcolorvaluebyname(c",{"_index":1101,"title":{},"body":{"classes/ChartPalette.html":{}}}],["getcolorvaluebyname(input",{"_index":4111,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["getcontainerstatestyles",{"_index":3579,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["getcontentposition(areasize",{"_index":986,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["getcontrastratio(color1",{"_index":4126,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["getcrosspoint",{"_index":4151,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getcrosspoint(datafrom",{"_index":4182,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getcrosspointwithy",{"_index":4152,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getcrosspointwithy(datafrom",{"_index":4190,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getd3scale",{"_index":3650,"title":{},"body":{"classes/NoopScale.html":{},"classes/Scale.html":{}}}],["getdata",{"_index":4081,"title":{},"body":{"classes/StatusAccessors.html":{}}}],["getdatamanager",{"_index":535,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["getdatapointindex",{"_index":276,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IHighlightStrategy.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["getdatapointindex(renderer",{"_index":306,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["getdatapointindex(series",{"_index":3605,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["getdatapointposition",{"_index":3580,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["getdatapointposition(dataseries",{"_index":3591,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["getdomain",{"_index":3582,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["getdomain(data",{"_index":3613,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["getdomainoffiltereddata",{"_index":3583,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["getdomainoffiltereddata(dataseries",{"_index":3616,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["getelementstohide(elementstofilter",{"_index":2671,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["geteventbus",{"_index":536,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["getfixeddomains(chartseriesset",{"_index":5018,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getgrid",{"_index":537,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["gethighlightedvalue",{"_index":2214,"title":{},"body":{"interfaces/IChartAssist.html":{},"classes/SparkChartAssist.html":{}}}],["gethighlightedvalue(chartseries",{"_index":791,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["gethorizontalsetup",{"_index":1463,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["gethorizontalsetup(tooltippositionoffset",{"_index":1472,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["getinnerradius",{"_index":3717,"title":{},"body":{"classes/PieRenderer.html":{}}}],["getinnerradius(range",{"_index":3724,"title":{},"body":{"classes/PieRenderer.html":{}}}],["getinteractive",{"_index":3368,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["getinteractivearea",{"_index":1642,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["getlabel(chartseries",{"_index":3177,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["getlasagna",{"_index":1643,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["getmaxtextwidth(array",{"_index":2699,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["getouterradius",{"_index":3718,"title":{},"body":{"classes/PieRenderer.html":{}}}],["getouterradius(range",{"_index":3726,"title":{},"body":{"classes/PieRenderer.html":{}}}],["getouterwidthdimensioncorrection",{"_index":1767,"title":{},"body":{"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{}}}],["getoverlayposition(angle",{"_index":3821,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["getpointereventsclass",{"_index":3541,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["getpointereventsclickclass",{"_index":3543,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["getrelativeluminance(rgbcolor",{"_index":4136,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["getrenderengine",{"_index":538,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["getrequiredlayers",{"_index":2867,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYRenderer.html":{}}}],["gets",{"_index":783,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IScale.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"components/LegendSeriesComponent.html":{},"interfaces/ScalesIndex.html":{},"classes/UtilityService.html":{}}}],["getscalevalues",{"_index":4365,"title":{},"body":{"classes/UtilityService.html":{}}}],["getscalevalues(scales",{"_index":4388,"title":{},"body":{"classes/UtilityService.html":{}}}],["getsectionindex(angle",{"_index":3830,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["getseries",{"_index":4083,"title":{},"body":{"classes/StatusAccessors.html":{}}}],["getseriesgroups(seriesset",{"_index":3311,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["getseriesrenderstate",{"_index":3371,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["getseriesstates",{"_index":3137,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["getsideindicators",{"_index":4153,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getsideindicators(zones",{"_index":4192,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getsinglevalue(data",{"_index":241,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["getstandardcolors",{"_index":1070,"title":{},"body":{"classes/ChartPalette.html":{}}}],["getstate",{"_index":764,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{}}}],["getstream",{"_index":1624,"title":{},"body":{"classes/EventBus.html":{}}}],["getstream(streamid",{"_index":1626,"title":{},"body":{"classes/EventBus.html":{}}}],["getsvg",{"_index":1992,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/PathMarker.html":{},"classes/SvgMarker.html":{}}}],["getter",{"_index":2079,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["gettextcolors",{"_index":1074,"title":{},"body":{"classes/ChartPalette.html":{}}}],["gettextmeasurement(array",{"_index":2694,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["getthresholdline",{"_index":4154,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getthresholdline(zone",{"_index":4195,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getthresholdlines",{"_index":4155,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getthresholdlines(zones",{"_index":4199,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getthresholdzones",{"_index":4156,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getthresholdzones(sourceseries",{"_index":4202,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["gettickdistance(array",{"_index":2704,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["getting",{"_index":967,"title":{"index.html":{},"license.html":{}},"body":{"classes/ChartDonutContentPlugin.html":{},"index.html":{}}}],["gettooltipposition(datapoint",{"_index":1506,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["getvalueaccessor(accessor",{"_index":4400,"title":{},"body":{"classes/UtilityService.html":{}}}],["getverticalsetup",{"_index":1455,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["getverticalsetup(tooltippositionoffset",{"_index":1471,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["getvisibleserieswithlegend",{"_index":793,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["getvisibleserieswithlegendbackup",{"_index":3189,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["getxyvalues",{"_index":4366,"title":{},"body":{"classes/UtilityService.html":{}}}],["getxyvalues(xscales",{"_index":4391,"title":{},"body":{"classes/UtilityService.html":{}}}],["give",{"_index":4737,"title":{},"body":{"license.html":{}}}],["given",{"_index":854,"title":{},"body":{"injectables/ChartCollectionService.html":{},"classes/LegendInteractionAssist.html":{},"classes/MappedValueProvider.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["go",{"_index":292,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["going",{"_index":3789,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"injectables/ThresholdsService.html":{},"miscellaneous/variables.html":{}}}],["goodwill",{"_index":4826,"title":{},"body":{"license.html":{}}}],["governing",{"_index":4874,"title":{},"body":{"license.html":{}}}],["grant",{"_index":4693,"title":{},"body":{"license.html":{}}}],["granted",{"_index":4633,"title":{},"body":{"license.html":{}}}],["granting",{"_index":4608,"title":{},"body":{"license.html":{}}}],["grants",{"_index":4695,"title":{},"body":{"license.html":{}}}],["grayscale",{"_index":676,"title":{},"body":{"classes/Chart.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["grayscale_color_matrix",{"_index":608,"title":{},"body":{"classes/Chart.html":{},"miscellaneous/variables.html":{}}}],["grayscale_filter",{"_index":2820,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"miscellaneous/variables.html":{}}}],["grid",{"_index":83,"title":{"classes/Grid.html":{},"additional-documentation/advanced-usage/grid.html":{}},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/SparkChartAssist.html":{},"classes/XYGridConfig.html":{},"classes/ZoomPlugin.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/advanced-usage.html":{}}}],["grid's",{"_index":1647,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["grid.bottomscaleid",{"_index":3031,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["grid.default_border_class_name",{"_index":1821,"title":{},"body":{"classes/Grid.html":{}}}],["grid.eventbus",{"_index":616,"title":{},"body":{"classes/Chart.html":{}}}],["grid.grid_class_name",{"_index":1730,"title":{},"body":{"classes/Grid.html":{}}}],["grid.grid_elements_layer_name",{"_index":1749,"title":{},"body":{"classes/Grid.html":{}}}],["grid.render_area_height_correction",{"_index":1795,"title":{},"body":{"classes/Grid.html":{}}}],["grid.render_area_width_correction",{"_index":1798,"title":{},"body":{"classes/Grid.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["grid.rendering_area_clip_path_prefix",{"_index":1732,"title":{},"body":{"classes/Grid.html":{}}}],["grid.rendering_area_layer_name",{"_index":1807,"title":{},"body":{"classes/Grid.html":{}}}],["grid.tick_dimension_correction",{"_index":1768,"title":{},"body":{"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{}}}],["grid.ts",{"_index":2322,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["grid.updatechartdimensionssubject",{"_index":614,"title":{},"body":{"classes/Chart.html":{}}}],["grid/config/spark",{"_index":4032,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["grid/grid",{"_index":2904,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["grid/types",{"_index":604,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["grid/xy",{"_index":2905,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/SparkChartAssist.html":{},"classes/ZoomPlugin.html":{}}}],["grid_class_name",{"_index":1636,"title":{},"body":{"classes/Grid.html":{}}}],["grid_elements_layer_name",{"_index":1637,"title":{},"body":{"classes/Grid.html":{}}}],["gridconfig",{"_index":132,"title":{"classes/GridConfig.html":{}},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/SparkChartAssist.html":{},"classes/XYGridConfig.html":{},"classes/ZoomPlugin.html":{}}}],["gridconfig.dimension.width",{"_index":2993,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["gridconfig.disablerenderareawidthcorrection",{"_index":2992,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["gridconfig:11",{"_index":146,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["gridconfig:14",{"_index":141,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["gridconfig:16",{"_index":133,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["gridconfig:28",{"_index":138,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["gridconfig:30",{"_index":143,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["gridconfig:32",{"_index":144,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["griddimension",{"_index":3054,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["griddimension.height",{"_index":3058,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["griddimension.width",{"_index":3068,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["gridelementslayer",{"_index":1711,"title":{},"body":{"classes/Grid.html":{}}}],["gridgroupselection",{"_index":2462,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["gridplugin",{"_index":656,"title":{},"body":{"classes/Chart.html":{}}}],["grids",{"_index":1737,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["gridselection",{"_index":2467,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["gridticks",{"_index":159,"title":{},"body":{"classes/AxisConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["gridx",{"_index":2358,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["gridy",{"_index":2357,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["grossly",{"_index":4815,"title":{},"body":{"license.html":{}}}],["group",{"_index":821,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/LegendInteractionAssist.html":{}}}],["grouped",{"_index":2201,"title":{},"body":{"interfaces/IBarChartConfig.html":{},"interfaces/IStackMetadata.html":{}}}],["groupid",{"_index":3153,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["grouping",{"_index":814,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["groups",{"_index":2649,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["groupselection",{"_index":2540,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["groupselection.append(\"title\").text(titletext",{"_index":2557,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["groupselection.classed(\"pointer",{"_index":2551,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["groupselection.classed(\"tick",{"_index":2568,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["groupselection.data()[0",{"_index":2553,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["groupselection.select(\"text\").attr(\"x",{"_index":2549,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["groupselection.select(\"text\").call(overflowhandler",{"_index":2624,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["groupselection.select(\"title\").empty",{"_index":2552,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["grow",{"_index":1952,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["gsrgb",{"_index":4140,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["hack",{"_index":2753,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/MarkerUtils.html":{}}}],["handle",{"_index":1217,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IScaleSVGElement.html":{},"classes/RadialPopoverPlugin.html":{}}}],["handleclose",{"_index":1364,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["handled",{"_index":1168,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{}}}],["handlelabelupdate",{"_index":3025,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["handlelineupdate",{"_index":3090,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["handlemarginupdate",{"_index":2636,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["handleopen",{"_index":1345,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["handler",{"_index":186,"title":{},"body":{"classes/AxisConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"miscellaneous/typealiases.html":{}}}],["handles",{"_index":3779,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["handleseriesstatechange(e",{"_index":2404,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["handleticklabeloverflow(labelgroup",{"_index":2559,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["handleticklabeloverflowdebounceindex",{"_index":2365,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["handling",{"_index":2062,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["harmless",{"_index":4850,"title":{},"body":{"license.html":{}}}],["hasinnerscale(scale",{"_index":2198,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["hasinputdescription",{"_index":3336,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["hasinputunitlabel",{"_index":3892,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["hasinputvalue",{"_index":3893,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["hasinteractionlabel",{"_index":4073,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["hasplugin",{"_index":539,"title":{},"body":{"classes/Chart.html":{}}}],["hasplugin(classref",{"_index":567,"title":{},"body":{"classes/Chart.html":{}}}],["hasprojecteddescription",{"_index":3337,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["hasrightyaxis",{"_index":2640,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["having",{"_index":4213,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["haystack",{"_index":4382,"title":{},"body":{"classes/UtilityService.html":{}}}],["haystack.findindex(straw",{"_index":4408,"title":{},"body":{"classes/UtilityService.html":{}}}],["haystack.length",{"_index":4405,"title":{},"body":{"classes/UtilityService.html":{}}}],["haystack[0",{"_index":4407,"title":{},"body":{"classes/UtilityService.html":{}}}],["height",{"_index":639,"title":{},"body":{"classes/Chart.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["height(value",{"_index":1555,"title":{},"body":{"classes/DimensionConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["heightoffset",{"_index":3057,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["helper",{"_index":3165,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["helps",{"_index":341,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/LegendInteractionAssist.html":{}}}],["here",{"_index":915,"title":{},"body":{"components/ChartComponent.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPopoverPlugin.html":{},"classes/DataSeries.html":{},"interfaces/IPopoverPluginConfig.html":{},"modules/NuiChartsModule.html":{},"injectables/ThresholdsService.html":{}}}],["hereby",{"_index":4694,"title":{},"body":{"license.html":{}}}],["herein",{"_index":4777,"title":{},"body":{"license.html":{}}}],["hidden",{"_index":2105,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IScaleSVGElement.html":{},"miscellaneous/enumerations.html":{}}}],["hide",{"_index":460,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["hidesubject",{"_index":440,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["hiding",{"_index":1206,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["high",{"_index":4457,"title":{},"body":{"classes/UtilityService.html":{}}}],["highlight",{"_index":270,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/LegendInteractionAssist.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"miscellaneous/typealiases.html":{}}}],["highlight_data_point",{"_index":4911,"title":{},"body":{"miscellaneous/variables.html":{}}}],["highlight_data_point_event",{"_index":4903,"title":{},"body":{"miscellaneous/variables.html":{}}}],["highlight_series",{"_index":4912,"title":{},"body":{"miscellaneous/variables.html":{}}}],["highlight_series_event",{"_index":400,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"miscellaneous/variables.html":{}}}],["highlightdata",{"_index":3218,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["highlightdata.index",{"_index":3221,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["highlightdatapoint",{"_index":277,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IHighlightStrategy.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["highlightdatapoint(renderer",{"_index":309,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["highlightdatapoint(renderseries",{"_index":3594,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["highlightdatapresentpredicate",{"_index":3220,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["highlightdatapresentpredicate(highlightdata",{"_index":3223,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["highlighted",{"_index":287,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarTooltipsPlugin.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["highlighteddatapoints",{"_index":3984,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["highlights",{"_index":3004,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["highlightstrategy",{"_index":2139,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["hold",{"_index":4849,"title":{},"body":{"license.html":{}}}],["horizontal",{"_index":404,"title":{},"body":{"classes/BarHorizontalGridConfig.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IStackMetadata.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYGridConfig.html":{},"classes/InteractionLabelPlugin.html":{},"components/LegendSeriesComponent.html":{},"miscellaneous/enumerations.html":{}}}],["horizontalbaraccessors",{"_index":1874,"title":{"classes/HorizontalBarAccessors.html":{}},"body":{"classes/HorizontalBarAccessors.html":{}}}],["horizontalpadding",{"_index":171,"title":{},"body":{"classes/AxisConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/InteractionLabelPlugin.html":{}}}],["host",{"_index":1149,"title":{},"body":{"components/ChartPopoverComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["hostbinding",{"_index":3374,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["hostbinding(`class.${legend_series_class_name",{"_index":3387,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["hostbinding(`class.inverse",{"_index":3390,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["hostbindings",{"_index":3343,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["hostlistener",{"_index":3375,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["hostlistener(\"click",{"_index":3406,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["hostlisteners",{"_index":3345,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["hour",{"_index":5005,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hover",{"_index":1269,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"miscellaneous/enumerations.html":{}}}],["hovered",{"_index":1922,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["hovering",{"_index":2140,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/LegendInteractionAssist.html":{}}}],["htmlelement",{"_index":546,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/MarkerUtils.html":{},"classes/PathMarker.html":{}}}],["http://www.apache.org/licenses",{"_index":4595,"title":{},"body":{"license.html":{}}}],["http://www.apache.org/licenses/license",{"_index":4873,"title":{},"body":{"license.html":{}}}],["https://github.com/angular/zone.js/issues/1011",{"_index":916,"title":{},"body":{"components/ChartComponent.html":{}}}],["https://github.com/d3/d3",{"_index":2914,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["https://github.com/mathiasbynens/css.escape.git",{"_index":4439,"title":{},"body":{"classes/UtilityService.html":{}}}],["https://github.com/ng",{"_index":3856,"title":{},"body":{"classes/Renderer.html":{}}}],["https://jira.solarwinds.com/browse/nui",{"_index":4935,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://stackoverflow.com/a/1968345",{"_index":4312,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["https://www.w3.org/tr/wcag20/#contrast",{"_index":4121,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["https://www.w3.org/tr/wcag20/relative",{"_index":4134,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["huge",{"_index":1026,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["i).valueof",{"_index":4403,"title":{},"body":{"classes/UtilityService.html":{}}}],["iaccessors",{"_index":34,"title":{"interfaces/IAccessors.html":{}},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/MarkerUtils.html":{},"classes/NoopAccessors.html":{},"classes/RadialAccessors.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"classes/XYAccessors.html":{},"classes/XYRenderer.html":{}}}],["iallaround",{"_index":108,"title":{"interfaces/IAllAround.html":{}},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["iareaaccessors",{"_index":9,"title":{"interfaces/IAreaAccessors.html":{}},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["iareadataaccessors",{"_index":25,"title":{"interfaces/IAreaDataAccessors.html":{}},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["iarearendererconfig",{"_index":2086,"title":{"interfaces/IAreaRendererConfig.html":{}},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["iareaseriesaccessors",{"_index":27,"title":{"interfaces/IAreaSeriesAccessors.html":{}},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["iaxesstylechangeeventpayload",{"_index":2025,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/typealiases.html":{}}}],["iaxis",{"_index":2083,"title":{"interfaces/IAxis.html":{}},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["iaxisconfig",{"_index":157,"title":{"interfaces/IAxisConfig.html":{}},"body":{"classes/AxisConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{},"miscellaneous/variables.html":{}}}],["iaxisconfig#approximateticks",{"_index":195,"title":{},"body":{"classes/AxisConfig.html":{}}}],["iaxisconfig#fit",{"_index":193,"title":{},"body":{"classes/AxisConfig.html":{}}}],["iaxisconfig#gridticks",{"_index":190,"title":{},"body":{"classes/AxisConfig.html":{}}}],["iaxisconfig#ticklabel",{"_index":192,"title":{},"body":{"classes/AxisConfig.html":{}}}],["iaxisconfig#ticksize",{"_index":191,"title":{},"body":{"classes/AxisConfig.html":{}}}],["iaxisconfig#visible",{"_index":189,"title":{},"body":{"classes/AxisConfig.html":{}}}],["ibandscale",{"_index":2148,"title":{"interfaces/IBandScale.html":{}},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["ibandscale).bandwidth",{"_index":2583,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["ibaraccessors",{"_index":205,"title":{"interfaces/IBarAccessors.html":{}},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{}}}],["ibarchartconfig",{"_index":448,"title":{"interfaces/IBarChartConfig.html":{}},"body":{"classes/BarTooltipsPlugin.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IStackMetadata.html":{}}}],["ibardataaccessors",{"_index":207,"title":{"interfaces/IBarDataAccessors.html":{}},"body":{"classes/BarAccessors.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["ibarrendererconfig",{"_index":2135,"title":{"interfaces/IBarRendererConfig.html":{}},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["iborderconfig",{"_index":1689,"title":{"interfaces/IBorderConfig.html":{}},"body":{"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["iborders",{"_index":1690,"title":{"interfaces/IBorders.html":{}},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["ichart",{"_index":464,"title":{"interfaces/IChart.html":{}},"body":{"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"components/ChartComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/ZoomPlugin.html":{}}}],["ichartassist",{"_index":778,"title":{"interfaces/IChartAssist.html":{}},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["ichartassist#gethighlightedvalue",{"_index":4056,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["ichartassist#update",{"_index":4038,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["ichartassistevent",{"_index":801,"title":{"interfaces/IChartAssistEvent.html":{}},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/LegendInteractionAssist.html":{}}}],["ichartassistevents",{"_index":3185,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["ichartassistseries",{"_index":758,"title":{"interfaces/IChartAssistSeries.html":{}},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{}}}],["ichartcollectionevent",{"_index":2002,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["ichartcomponent",{"_index":830,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["ichartevent",{"_index":601,"title":{"interfaces/IChartEvent.html":{}},"body":{"classes/Chart.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{},"classes/ZoomPlugin.html":{}}}],["ichartmarker",{"_index":1007,"title":{"interfaces/IChartMarker.html":{}},"body":{"components/ChartMarkerComponent.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/MarkerUtils.html":{},"classes/PathMarker.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SparkChartAssist.html":{},"classes/SvgMarker.html":{},"classes/VerticalBarAccessors.html":{}}}],["ichartpalette",{"_index":1060,"title":{"interfaces/IChartPalette.html":{}},"body":{"classes/ChartPalette.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["ichartplugin",{"_index":553,"title":{"interfaces/IChartPlugin.html":{}},"body":{"classes/Chart.html":{},"classes/ChartPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["ichartseries",{"_index":581,"title":{"interfaces/IChartSeries.html":{}},"body":{"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/RadialTooltipsPlugin.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"miscellaneous/variables.html":{}}}],["ichartviewstatuseventpayload",{"_index":892,"title":{"interfaces/IChartViewStatusEventPayload.html":{}},"body":{"components/ChartComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["icon",{"_index":3122,"title":{},"body":{"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{}}}],["icoordinates",{"_index":1931,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["id",{"_index":774,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/DataSeries.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{}}}],["id.directive",{"_index":3676,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["id.directive.ts",{"_index":812,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["id.directive.ts:20",{"_index":832,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["idataaccessors",{"_index":35,"title":{"interfaces/IDataAccessors.html":{}},"body":{"classes/AreaAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/RectangleAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["idatapoint",{"_index":1201,"title":{"interfaces/IDataPoint.html":{}},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{}}}],["idatapointspayload",{"_index":453,"title":{"interfaces/IDataPointsPayload.html":{}},"body":{"classes/BarTooltipsPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/SparkChartAssist.html":{}}}],["idataseries",{"_index":213,"title":{"interfaces/IDataSeries.html":{}},"body":{"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/DataSeries.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{}}}],["ideally",{"_index":1864,"title":{},"body":{"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["identification",{"_index":4865,"title":{},"body":{"license.html":{}}}],["identified",{"_index":853,"title":{},"body":{"injectables/ChartCollectionService.html":{},"index.html":{}}}],["identifier",{"_index":1801,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/ScalesIndex.html":{}}}],["identify",{"_index":1349,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["identifying",{"_index":4858,"title":{},"body":{"license.html":{}}}],["identity",{"_index":4383,"title":{},"body":{"classes/UtilityService.html":{}}}],["idimensionconfig",{"_index":139,"title":{"interfaces/IDimensionConfig.html":{}},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/Chart.html":{},"classes/DimensionConfig.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["idimensionconfig#autoheight",{"_index":1575,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["idimensionconfig#autowidth",{"_index":1574,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["idimensionconfig#height",{"_index":1578,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["idimensionconfig#margin",{"_index":1571,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["idimensionconfig#marginlocked",{"_index":1573,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["idimensionconfig#outerheight",{"_index":1585,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["idimensionconfig#outerwidth",{"_index":1580,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["idimensionconfig#padding",{"_index":1572,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["idimensionconfig#width",{"_index":1576,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["idimensions",{"_index":603,"title":{"interfaces/IDimensions.html":{}},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["idomainlimits",{"_index":1934,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["idonutgaugethresholdsrendererconfig",{"_index":1961,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["ids",{"_index":4520,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["ielementposition",{"_index":946,"title":{"interfaces/IElementPosition.html":{}},"body":{"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["ienhancedlinecapconfig",{"_index":2116,"title":{"interfaces/IEnhancedLineCapConfig.html":{}},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["iformatters",{"_index":2161,"title":{"interfaces/IFormatters.html":{}},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{}}}],["igaugethreshold",{"_index":1599,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["ignore",{"_index":131,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/Chart.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/Renderer.html":{},"classes/TextColorProvider.html":{},"classes/XYGridConfig.html":{},"miscellaneous/variables.html":{}}}],["ignore_interaction_class",{"_index":2334,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"miscellaneous/variables.html":{}}}],["ignorefordomaincalculation",{"_index":1943,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"injectables/ThresholdsService.html":{},"miscellaneous/variables.html":{}}}],["igrid",{"_index":544,"title":{"interfaces/IGrid.html":{}},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["igrid#build",{"_index":1726,"title":{},"body":{"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{}}}],["igrid#buildplugins",{"_index":2430,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["igrid#config",{"_index":1722,"title":{},"body":{"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{}}}],["igrid#getinteractivearea",{"_index":1716,"title":{},"body":{"classes/Grid.html":{}}}],["igrid#getlasagna",{"_index":1718,"title":{},"body":{"classes/Grid.html":{}}}],["igrid#target",{"_index":1724,"title":{},"body":{"classes/Grid.html":{}}}],["igrid#update",{"_index":1753,"title":{},"body":{"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{}}}],["igrid#updatedimensions",{"_index":1756,"title":{},"body":{"classes/Grid.html":{}}}],["igrid#updateranges",{"_index":1762,"title":{},"body":{"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{}}}],["igridconfig",{"_index":135,"title":{"interfaces/IGridConfig.html":{}},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["igridconfig#borders",{"_index":1870,"title":{},"body":{"classes/GridConfig.html":{}}}],["igridconfig#cursor",{"_index":1871,"title":{},"body":{"classes/GridConfig.html":{}}}],["igridconfig#dimension",{"_index":1869,"title":{},"body":{"classes/GridConfig.html":{}}}],["igridconfig#disablerenderareaheightcorrection",{"_index":1872,"title":{},"body":{"classes/GridConfig.html":{}}}],["igridconfig#disablerenderareawidthcorrection",{"_index":1873,"title":{},"body":{"classes/GridConfig.html":{}}}],["igridconfig#interactive",{"_index":1868,"title":{},"body":{"classes/GridConfig.html":{}}}],["ihasinnerscale",{"_index":2196,"title":{"interfaces/IHasInnerScale.html":{}},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["ihighlightstrategy",{"_index":272,"title":{"interfaces/IHighlightStrategy.html":{}},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["ii",{"_index":4622,"title":{},"body":{"license.html":{}}}],["iii",{"_index":4629,"title":{},"body":{"license.html":{}}}],["iinteractioncoordinatespayload",{"_index":2244,"title":{"interfaces/IInteractionCoordinatesPayload.html":{}},"body":{"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["iinteractiondatapointevent",{"_index":1219,"title":{"interfaces/IInteractionDataPointEvent.html":{}},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/MarkerUtils.html":{}}}],["iinteractiondatapointsevent",{"_index":1218,"title":{"interfaces/IInteractionDataPointsEvent.html":{}},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{}}}],["iinteractionevent",{"_index":1932,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["iinteractionpayload",{"_index":2020,"title":{"interfaces/IInteractionPayload.html":{}},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["iinteractionvalues",{"_index":2240,"title":{"interfaces/IInteractionValues.html":{}},"body":{"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"classes/UtilityService.html":{}}}],["iinteractionvaluespayload",{"_index":2242,"title":{"interfaces/IInteractionValuesPayload.html":{}},"body":{"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["ilasagnalayer",{"_index":1917,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYRenderer.html":{}}}],["ilineaccessors",{"_index":2102,"title":{"interfaces/ILineAccessors.html":{}},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"injectables/ThresholdsService.html":{}}}],["ilineargaugethresholdsrendererconfig",{"_index":1964,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["ilinearscales",{"_index":1965,"title":{"interfaces/ILinearScales.html":{}},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["ilinedataaccessors",{"_index":2263,"title":{"interfaces/ILineDataAccessors.html":{}},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["ilinerendererconfig",{"_index":2117,"title":{"interfaces/ILineRendererConfig.html":{}},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/MissingDataLineRendererConfig.html":{}}}],["ilineseriesaccessors",{"_index":2264,"title":{"interfaces/ILineSeriesAccessors.html":{}},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["imarkerinteractionconfig",{"_index":2097,"title":{"interfaces/IMarkerInteractionConfig.html":{}},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"miscellaneous/variables.html":{}}}],["impersonates",{"_index":3523,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["implementation",{"_index":1504,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/SparkChartAssist.html":{}}}],["implementations/interfaces",{"_index":1741,"title":{},"body":{"classes/Grid.html":{}}}],["implements",{"_index":8,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISpark.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MappedValueProvider.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RectangleAccessors.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{}}}],["implied",{"_index":4798,"title":{},"body":{"license.html":{}}}],["import",{"_index":28,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"components/BasicLegendTileComponent.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"modules/NuiChartsModule.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{},"index.html":{},"license.html":{}}}],["imports",{"_index":3689,"title":{},"body":{"modules/NuiChartsModule.html":{},"index.html":{}}}],["improving",{"_index":4685,"title":{},"body":{"license.html":{}}}],["inability",{"_index":4824,"title":{},"body":{"license.html":{}}}],["inactive",{"_index":2825,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["inactivecolor",{"_index":2826,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["inbounds",{"_index":4414,"title":{},"body":{"classes/UtilityService.html":{}}}],["incidental",{"_index":4820,"title":{},"body":{"license.html":{}}}],["include",{"_index":4561,"title":{},"body":{"index.html":{},"license.html":{}}}],["included",{"_index":4650,"title":{},"body":{"license.html":{}}}],["includes",{"_index":2274,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["including",{"_index":2049,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"license.html":{}}}],["inclusion",{"_index":4668,"title":{},"body":{"license.html":{}}}],["incorporated",{"_index":4692,"title":{},"body":{"license.html":{}}}],["incorrect",{"_index":2911,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["incurred",{"_index":4851,"title":{},"body":{"license.html":{}}}],["indemnify",{"_index":4847,"title":{},"body":{"license.html":{}}}],["indemnity",{"_index":4840,"title":{},"body":{"license.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":2225,"title":{},"body":{"interfaces/IDataAccessors.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IInteractionValues.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/ScalesIndex.html":{}}}],["indexincrement",{"_index":4416,"title":{},"body":{"classes/UtilityService.html":{}}}],["indexof(fixeddomains[next",{"_index":5024,"title":{},"body":{"miscellaneous/variables.html":{}}}],["indicated",{"_index":4648,"title":{},"body":{"license.html":{}}}],["indicates",{"_index":1919,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["indicating",{"_index":1178,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"components/LegendSeriesComponent.html":{},"classes/RadialPopoverPlugin.html":{},"classes/SideIndicatorAccessors.html":{}}}],["indicator",{"_index":2815,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["indicators",{"_index":2831,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["indicatorsactive",{"_index":4338,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["indirect",{"_index":4618,"title":{},"body":{"license.html":{}}}],["individual",{"_index":2141,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"components/LegendComponent.html":{},"license.html":{}}}],["infinite",{"_index":4207,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["infinity",{"_index":980,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{},"interfaces/IScaleSVGElement.html":{}}}],["info",{"_index":1182,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{},"miscellaneous/variables.html":{}}}],["information",{"_index":1444,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"injectables/ThresholdsService.html":{},"license.html":{}}}],["informational",{"_index":4762,"title":{},"body":{"license.html":{}}}],["infringed",{"_index":4716,"title":{},"body":{"license.html":{}}}],["infringement",{"_index":4729,"title":{},"body":{"license.html":{}}}],["inherited",{"_index":117,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/HorizontalBarAccessors.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LineAccessors.html":{},"classes/LinearScale.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/TextColorProvider.html":{},"classes/TimeScale.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{}}}],["initial",{"_index":1024,"title":{},"body":{"components/ChartMarkerComponent.html":{},"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["initialization",{"_index":1995,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["initialize",{"_index":444,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/ZoomPlugin.html":{}}}],["initplugin",{"_index":1133,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["inject",{"_index":833,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["injectable",{"_index":847,"title":{"injectables/ChartCollectionService.html":{},"injectables/ThresholdsService.html":{}},"body":{"injectables/ChartCollectionService.html":{},"injectables/ThresholdsService.html":{}}}],["injectables",{"_index":848,"title":{},"body":{"injectables/ChartCollectionService.html":{},"injectables/ThresholdsService.html":{},"overview.html":{}}}],["injected",{"_index":820,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["injectthresholdsdata",{"_index":4157,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["injectthresholdsdata(dataseries",{"_index":4208,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["inline",{"_index":3128,"title":{},"body":{"components/LegendComponent.html":{}}}],["innerradius(0",{"_index":3734,"title":{},"body":{"classes/PieRenderer.html":{}}}],["innerscale",{"_index":2197,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["inoopaccessors",{"_index":2288,"title":{"interfaces/INoopAccessors.html":{}},"body":{"interfaces/INoopAccessors.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{}}}],["input",{"_index":834,"title":{"additional-documentation/advanced-usage/input-structure.html":{}},"body":{"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"classes/ProcessedColorProvider.html":{},"components/RichLegendTileComponent.html":{},"classes/TextColorProvider.html":{},"index.html":{},"additional-documentation/advanced-usage.html":{}}}],["input(\"nuichartcollectionid",{"_index":842,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["inputs",{"_index":828,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"components/RichLegendTileComponent.html":{}}}],["inputseriesset",{"_index":781,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["inputseriesset.map(chartseries",{"_index":4039,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["inputsparks",{"_index":4042,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["inputsparks.length",{"_index":4047,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["inputsparks.map((spark",{"_index":4045,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["inside",{"_index":963,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{},"classes/InteractionLabelPlugin.html":{}}}],["inspired",{"_index":4311,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["instance",{"_index":945,"title":{},"body":{"components/ChartDonutContentComponent.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/PathMarker.html":{},"classes/SideIndicatorAccessors.html":{}}}],["instanceof",{"_index":625,"title":{},"body":{"classes/Chart.html":{},"classes/ChartDonutContentPlugin.html":{},"interfaces/IScaleSVGElement.html":{}}}],["instances",{"_index":3969,"title":{},"body":{"classes/SequentialValueProvider.html":{}}}],["instantiate",{"_index":2276,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["instead",{"_index":734,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{}}}],["institute",{"_index":4720,"title":{},"body":{"license.html":{}}}],["insures",{"_index":2063,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["intentionally",{"_index":4666,"title":{},"body":{"license.html":{}}}],["interaction",{"_index":748,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"classes/ChartPopoverPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialPopoverPlugin.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["interaction_coordinates",{"_index":4915,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interaction_coordinates_event",{"_index":2243,"title":{},"body":{"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["interaction_data_point",{"_index":4916,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interaction_data_point_event",{"_index":1200,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/MarkerUtils.html":{},"miscellaneous/variables.html":{}}}],["interaction_data_points",{"_index":4917,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interaction_data_points_event",{"_index":1160,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"classes/LegendInteractionAssist.html":{},"classes/RadialPopoverPlugin.html":{},"classes/SparkChartAssist.html":{},"miscellaneous/variables.html":{}}}],["interaction_margin",{"_index":3418,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["interaction_series",{"_index":4918,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interaction_series_event",{"_index":3423,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{},"miscellaneous/variables.html":{}}}],["interaction_values",{"_index":4920,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interaction_values_active",{"_index":4919,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interaction_values_active_event",{"_index":2902,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["interaction_values_event",{"_index":2241,"title":{},"body":{"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"miscellaneous/variables.html":{}}}],["interactionhandlermap",{"_index":2921,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["interactionlabel",{"_index":3040,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["interactionlabel.empty",{"_index":3042,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["interactionlabel.remove",{"_index":3044,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["interactionlabel.select(\"text",{"_index":3050,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["interactionlabellayer",{"_index":3016,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["interactionlabelplugin",{"_index":2345,"title":{"classes/InteractionLabelPlugin.html":{}},"body":{"interfaces/IScaleSVGElement.html":{},"classes/InteractionLabelPlugin.html":{},"classes/SparkChartAssist.html":{}}}],["interactionlabelplugin.layer_name",{"_index":3019,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["interactionlabelplugin.layer_name}__rect",{"_index":3079,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["interactionlabelplugin.layer_name}__text",{"_index":3081,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["interactionlinelayer",{"_index":3086,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["interactionlineplugin",{"_index":2347,"title":{"classes/InteractionLinePlugin.html":{}},"body":{"interfaces/IScaleSVGElement.html":{},"classes/InteractionLinePlugin.html":{},"classes/SparkChartAssist.html":{}}}],["interactionlineplugin.layer_name",{"_index":3097,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["interactionpath",{"_index":3424,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["interactionpath.empty",{"_index":3428,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["interactionplugins",{"_index":100,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["interactionstrategy",{"_index":2129,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["interactiontype",{"_index":1186,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/RadialPopoverPlugin.html":{},"classes/SparkChartAssist.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/enumerations.html":{}}}],["interactiontype.click",{"_index":3442,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{}}}],["interactiontype.hover",{"_index":3551,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["interactiontype.mousedown",{"_index":2924,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["interactiontype.mousemove",{"_index":1187,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/RadialPopoverPlugin.html":{},"classes/SparkChartAssist.html":{},"classes/ZoomPlugin.html":{}}}],["interactiontype.mouseup",{"_index":2927,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["interactive",{"_index":106,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"classes/MissingDataLineRendererConfig.html":{},"injectables/ThresholdsService.html":{},"classes/XYGridConfig.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["interactive(interactive",{"_index":3381,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["interactivearea",{"_index":1710,"title":{},"body":{"classes/Grid.html":{}}}],["interface",{"_index":40,"title":{"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"interfaces/ScalesIndex.html":{},"interfaces/ZoneCross.html":{}},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/NoopAccessors.html":{},"classes/RadialAccessors.html":{},"classes/RectangleAccessors.html":{},"interfaces/ScalesIndex.html":{},"classes/SideIndicatorAccessors.html":{},"classes/StatusAccessors.html":{},"classes/XYAccessors.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{}}}],["interfaces",{"_index":1893,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LineAccessors.html":{},"interfaces/ScalesIndex.html":{},"interfaces/ZoneCross.html":{},"license.html":{},"overview.html":{}}}],["internal",{"_index":2351,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["intersect",{"_index":4261,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["intersected",{"_index":2017,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["intersection",{"_index":929,"title":{},"body":{"components/ChartComponent.html":{},"injectables/ThresholdsService.html":{}}}],["intersectionobserver",{"_index":896,"title":{},"body":{"components/ChartComponent.html":{}}}],["intersectionobserver(this.intersectionobservercallback",{"_index":899,"title":{},"body":{"components/ChartComponent.html":{}}}],["intersectionobservercallback",{"_index":925,"title":{},"body":{"components/ChartComponent.html":{}}}],["intersectionobserverentry",{"_index":927,"title":{},"body":{"components/ChartComponent.html":{}}}],["intersections",{"_index":4249,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["interval",{"_index":4205,"title":{},"body":{"injectables/ThresholdsService.html":{},"miscellaneous/variables.html":{}}}],["interval[0",{"_index":5035,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interval[1",{"_index":5037,"title":{},"body":{"miscellaneous/variables.html":{}}}],["intl.datetimeformat(moment.locale",{"_index":5009,"title":{},"body":{"miscellaneous/variables.html":{}}}],["intl.datetimeformatoptions",{"_index":5008,"title":{},"body":{"miscellaneous/variables.html":{}}}],["intlformat",{"_index":4904,"title":{},"body":{"miscellaneous/variables.html":{}}}],["intlformat(d",{"_index":5004,"title":{},"body":{"miscellaneous/variables.html":{}}}],["invert",{"_index":2307,"title":{},"body":{"interfaces/IScale.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{}}}],["invert(coordinate",{"_index":2182,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{}}}],["invert(next",{"_index":4470,"title":{},"body":{"classes/UtilityService.html":{}}}],["inverted",{"_index":4469,"title":{},"body":{"classes/UtilityService.html":{}}}],["invisible",{"_index":1779,"title":{},"body":{"classes/Grid.html":{}}}],["invoke",{"_index":2623,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["invoked",{"_index":1996,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{}}}],["invokes",{"_index":2771,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["ipopoverpluginconfig",{"_index":1174,"title":{"interfaces/IPopoverPluginConfig.html":{}},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["iposition",{"_index":1323,"title":{"interfaces/IPosition.html":{}},"body":{"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{}}}],["iradialaccessors",{"_index":2291,"title":{"interfaces/IRadialAccessors.html":{}},"body":{"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"classes/RadialAccessors.html":{}}}],["iradialdataaccessors",{"_index":2293,"title":{"interfaces/IRadialDataAccessors.html":{}},"body":{"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"classes/RadialAccessors.html":{}}}],["iradialrendererconfig",{"_index":1944,"title":{"interfaces/IRadialRendererConfig.html":{}},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/PieRenderer.html":{},"miscellaneous/variables.html":{}}}],["iradialscales",{"_index":2163,"title":{"interfaces/IRadialScales.html":{}},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["iradialseriesaccessors",{"_index":2294,"title":{"interfaces/IRadialSeriesAccessors.html":{}},"body":{"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"classes/RadialAccessors.html":{}}}],["irectangleaccessors",{"_index":331,"title":{"interfaces/IRectangleAccessors.html":{}},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RectangleAccessors.html":{}}}],["irectangledataaccessors",{"_index":210,"title":{"interfaces/IRectangleDataAccessors.html":{}},"body":{"classes/BarAccessors.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["irectangleseriesaccessors",{"_index":209,"title":{"interfaces/IRectangleSeriesAccessors.html":{}},"body":{"classes/BarAccessors.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/StatusAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["irendercontainers",{"_index":2005,"title":{"interfaces/IRenderContainers.html":{}},"body":{"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["irendererconfig",{"_index":1937,"title":{"interfaces/IRendererConfig.html":{}},"body":{"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{}}}],["irenderereventpayload",{"_index":328,"title":{"interfaces/IRendererEventPayload.html":{}},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{}}}],["irenderseries",{"_index":299,"title":{"interfaces/IRenderSeries.html":{}},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYRenderer.html":{}}}],["irenderstatedata",{"_index":577,"title":{"interfaces/IRenderStateData.html":{}},"body":{"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{}}}],["irenderstatesindex",{"_index":807,"title":{"interfaces/IRenderStatesIndex.html":{}},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/LegendInteractionAssist.html":{}}}],["irrevocable",{"_index":4702,"title":{},"body":{"license.html":{}}}],["isactive",{"_index":2848,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["isactiveclassapplied",{"_index":3391,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["isapproximatelyequal",{"_index":2799,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["isarray",{"_index":317,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartPalette.html":{},"classes/InteractionLabelPlugin.html":{}}}],["isarray(colors",{"_index":1089,"title":{},"body":{"classes/ChartPalette.html":{}}}],["isarray(value",{"_index":361,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["isarray(xvalue",{"_index":3036,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["isbandscale",{"_index":325,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"injectables/ThresholdsService.html":{}}}],["isbandscale(scale",{"_index":2194,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["isbandscale(scales.x",{"_index":4235,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["isbottomaxis",{"_index":2673,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["iscale",{"_index":2150,"title":{"interfaces/IScale.html":{}},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LinearScale.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["iscale#d3scale",{"_index":3945,"title":{},"body":{"classes/Scale.html":{}}}],["iscale#domain",{"_index":3950,"title":{},"body":{"classes/Scale.html":{}}}],["iscale#fixdomain",{"_index":3953,"title":{},"body":{"classes/Scale.html":{}}}],["iscale#range",{"_index":3946,"title":{},"body":{"classes/Scale.html":{}}}],["iscale#reverse",{"_index":3956,"title":{},"body":{"classes/Scale.html":{}}}],["iscale#reversed",{"_index":3958,"title":{},"body":{"classes/Scale.html":{}}}],["iscale).filter(s",{"_index":2422,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["iscalesvgelement",{"_index":2320,"title":{"interfaces/IScaleSVGElement.html":{}},"body":{"interfaces/IScaleSVGElement.html":{}}}],["ischartinview",{"_index":934,"title":{},"body":{"components/ChartComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["iscontinuous",{"_index":2176,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{}}}],["isdomainfixed",{"_index":2169,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{}}}],["isdomainvalid",{"_index":2177,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{}}}],["isempty",{"_index":1683,"title":{},"body":{"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/UtilityService.html":{},"classes/ZoomPlugin.html":{}}}],["isempty(data.coordinates",{"_index":2942,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["isempty(scales",{"_index":3029,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["isempty(this.grid.scales",{"_index":2941,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["isempty(this.scales",{"_index":1754,"title":{},"body":{"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{}}}],["isempty(xvalue",{"_index":4464,"title":{},"body":{"classes/UtilityService.html":{}}}],["isempty(yvalue",{"_index":4466,"title":{},"body":{"classes/UtilityService.html":{}}}],["isequal",{"_index":1319,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["isequal(currenttooltipdirectivesindex",{"_index":1355,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["iseriesaccessors",{"_index":36,"title":{"interfaces/ISeriesAccessors.html":{}},"body":{"classes/AreaAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/RectangleAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["isetdomaineventpayload",{"_index":2026,"title":{"interfaces/ISetDomainEventPayload.html":{}},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["isfunction",{"_index":1018,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["isfunction(this.marker.getsvg",{"_index":1034,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["ishorizontalclassapplied",{"_index":3389,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["isideindicatoraccessors",{"_index":2813,"title":{"interfaces/ISideIndicatorAccessors.html":{}},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["isideindicatordataaccessors",{"_index":2817,"title":{"interfaces/ISideIndicatorDataAccessors.html":{}},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["isideindicatorseriesaccessors",{"_index":2818,"title":{"interfaces/ISideIndicatorSeriesAccessors.html":{}},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["isimplethresholdzone",{"_index":2869,"title":{"interfaces/ISimpleThresholdZone.html":{}},"body":{"interfaces/ISimpleThresholdZone.html":{},"injectables/ThresholdsService.html":{},"interfaces/ZoneCross.html":{}}}],["isinrange",{"_index":3530,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["isinteractiveclassapplied",{"_index":3388,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["islegendactive",{"_index":3985,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["isnan(date.gettime",{"_index":4358,"title":{},"body":{"classes/TimeScale.html":{}}}],["isnan(value",{"_index":3486,"title":{},"body":{"classes/LinearScale.html":{}}}],["isnan(value.gettime",{"_index":4359,"title":{},"body":{"classes/TimeScale.html":{}}}],["isnil",{"_index":1321,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITooltipNode.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["isnil(accessor",{"_index":3879,"title":{},"body":{"classes/Renderer.html":{}}}],["isnil(position.height",{"_index":1395,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["isnil(position.width",{"_index":1396,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["isnil(renderer.config.strokewidth",{"_index":3426,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["isnil(transformval",{"_index":2709,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["isopen",{"_index":1208,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipNode.html":{}}}],["ispark",{"_index":772,"title":{"interfaces/ISpark.html":{}},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/SparkChartAssist.html":{}}}],["isreversed",{"_index":3940,"title":{},"body":{"classes/Scale.html":{}}}],["isselected",{"_index":3340,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["isselectedchange",{"_index":3342,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["isserieshidden",{"_index":3138,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["isserieshidden(seriesid",{"_index":3148,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["issue",{"_index":4680,"title":{},"body":{"license.html":{}}}],["istackmetadata",{"_index":2202,"title":{"interfaces/IStackMetadata.html":{}},"body":{"interfaces/IBarChartConfig.html":{},"interfaces/IStackMetadata.html":{}}}],["istartendrangeaccessors",{"_index":2300,"title":{"interfaces/IStartEndRangeAccessors.html":{}},"body":{"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RectangleAccessors.html":{}}}],["istatusaccessors",{"_index":2878,"title":{"interfaces/IStatusAccessors.html":{}},"body":{"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["istatusdataaccessors",{"_index":2880,"title":{"interfaces/IStatusDataAccessors.html":{}},"body":{"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{}}}],["isundefined",{"_index":319,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"injectables/ChartCollectionService.html":{},"classes/ChartDonutContentPlugin.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/SvgMarker.html":{},"classes/UtilityService.html":{},"classes/ZoomPlugin.html":{}}}],["isundefined(collection",{"_index":863,"title":{},"body":{"injectables/ChartCollectionService.html":{}}}],["isundefined(color",{"_index":4094,"title":{},"body":{"classes/SvgMarker.html":{}}}],["isundefined(inverted",{"_index":4471,"title":{},"body":{"classes/UtilityService.html":{}}}],["isundefined(maxbottomwidth",{"_index":2585,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["isundefined(maxleftwidth",{"_index":2600,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["isundefined(maxrightwidth",{"_index":2592,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["isundefined(prev",{"_index":975,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["isundefined(radius",{"_index":981,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["isundefined(this.brushstartx",{"_index":2978,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["isundefined(this.selecteddatapointidxfn",{"_index":389,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["isvertical",{"_index":1426,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["iszoneedge",{"_index":2012,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["it'll",{"_index":3210,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["it's",{"_index":1408,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ITooltipNode.html":{},"classes/LineAccessors.html":{},"index.html":{}}}],["item",{"_index":1306,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"classes/LegendInteractionAssist.html":{}}}],["item.id",{"_index":3252,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["item.value.seriesid",{"_index":1344,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["iterations(20",{"_index":1415,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["itextoverflowargs",{"_index":2053,"title":{"interfaces/ITextOverflowArgs.html":{}},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["iticklabelconfig",{"_index":170,"title":{"interfaces/ITickLabelConfig.html":{}},"body":{"classes/AxisConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["itooltipnode",{"_index":1327,"title":{"interfaces/ITooltipNode.html":{}},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["itooltipposition",{"_index":1446,"title":{"interfaces/ITooltipPosition.html":{}},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["itself",{"_index":931,"title":{},"body":{"components/ChartComponent.html":{}}}],["ivalueprovider",{"_index":1065,"title":{"interfaces/IValueProvider.html":{}},"body":{"classes/ChartPalette.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/MappedValueProvider.html":{},"classes/ProcessedColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SparkChartAssist.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/VerticalBarAccessors.html":{}}}],["ivaluethicknessaccessors",{"_index":2301,"title":{"interfaces/IValueThicknessAccessors.html":{}},"body":{"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RectangleAccessors.html":{}}}],["ixydataaccessors",{"_index":2265,"title":{"interfaces/IXYDataAccessors.html":{}},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"classes/LineAccessors.html":{},"classes/XYAccessors.html":{}}}],["ixygridconfig",{"_index":2072,"title":{"interfaces/IXYGridConfig.html":{}},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["ixyscales",{"_index":326,"title":{"interfaces/IXYScales.html":{}},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/MarkerUtils.html":{},"interfaces/ScalesIndex.html":{}}}],["izonecrosspoint",{"_index":2009,"title":{"interfaces/IZoneCrossPoint.html":{}},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"injectables/ThresholdsService.html":{}}}],["izoompluginconfiguration",{"_index":2895,"title":{"interfaces/IZoomPluginConfiguration.html":{}},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["j",{"_index":370,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["january",{"_index":4593,"title":{},"body":{"license.html":{}}}],["keep",{"_index":2788,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["keeping",{"_index":3996,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["keeps",{"_index":3491,"title":{},"body":{"classes/MappedValueProvider.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{}}}],["kept",{"_index":2277,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["key",{"_index":787,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"injectables/ChartCollectionService.html":{},"classes/EventBus.html":{},"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IElementPosition.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/MappedValueProvider.html":{},"classes/PathMarker.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialTooltipsPlugin.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialValueProvider.html":{},"classes/XYAccessors.html":{}}}],["keyby",{"_index":3157,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["keyby(seriesset",{"_index":3300,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["keyof",{"_index":335,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Grid.html":{}}}],["keys",{"_index":1974,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineAccessors.html":{},"classes/RadialAccessors.html":{},"classes/XYAccessors.html":{}}}],["kind",{"_index":1860,"title":{},"body":{"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{},"license.html":{}}}],["known",{"_index":2908,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["label",{"_index":2060,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"classes/InteractionLabelPlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/RichLegendTileComponent.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"miscellaneous/typealiases.html":{}}}],["label's",{"_index":2064,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/InteractionLabelPlugin.html":{}}}],["label.append(\"rect",{"_index":3078,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["label.append(\"text",{"_index":3080,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["labelcontent",{"_index":3047,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["labelgroup",{"_index":2084,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["labelgroup.append(\"text",{"_index":2609,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["labelgroup.attr(\"cursor",{"_index":2528,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["labelgroup.classed(\"tick",{"_index":2619,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["labelgroup.select(\".sample",{"_index":2606,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["labelgroup.selectall(\"g\").each(function",{"_index":2529,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["labelplugin",{"_index":4075,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["labelplugin.initialize",{"_index":4077,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["labels",{"_index":2059,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["labelwidth",{"_index":3065,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["language",{"_index":4542,"title":{},"body":{"index.html":{},"license.html":{}}}],["large",{"_index":4532,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lasagna",{"_index":597,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["lasagna(>(this.container",{"_index":1743,"title":{},"body":{"classes/Grid.html":{}}}],["last",{"_index":3208,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{},"index.html":{}}}],["lastgridconfig",{"_index":3986,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["lastinteractionvaluespayload",{"_index":3015,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["lastspark",{"_index":4046,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["lasttextwidth",{"_index":2759,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["lasttickscalevalue",{"_index":2760,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["lastusedindex",{"_index":3974,"title":{},"body":{"classes/SequentialValueProvider.html":{}}}],["law",{"_index":4793,"title":{},"body":{"license.html":{}}}],["lawsuit",{"_index":4725,"title":{},"body":{"license.html":{}}}],["layer",{"_index":1652,"title":{},"body":{"classes/Grid.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["layer's",{"_index":2933,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["layer.selectall(`.${interactionlineplugin.layer_name}`).data(data",{"_index":3094,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["layer_name",{"_index":2916,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/ZoomPlugin.html":{}}}],["layering",{"_index":2077,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["layers",{"_index":3622,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["layout",{"_index":4585,"title":{"additional-documentation/layout.html":{}},"body":{"index.html":{}}}],["left",{"_index":116,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/GridConfig.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/MarkerUtils.html":{},"classes/RadialPopoverPlugin.html":{},"classes/XYGridConfig.html":{}}}],["leftgridlines",{"_index":2465,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["leftscaleid",{"_index":2370,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["leftscaleid(id",{"_index":2373,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["legal",{"_index":4609,"title":{},"body":{"license.html":{}}}],["legend",{"_index":487,"title":{"additional-documentation/advanced-usage/legend.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"classes/ChartAssistRenderStateData.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{},"injectables/ThresholdsService.html":{},"index.html":{},"overview.html":{},"additional-documentation/advanced-usage.html":{}}}],["legend's",{"_index":3113,"title":{},"body":{"components/LegendComponent.html":{},"classes/SparkChartAssist.html":{}}}],["legend'},{'name",{"_index":519,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["legend.component",{"_index":3377,"title":{},"body":{"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["legend.component.html",{"_index":3106,"title":{},"body":{"components/LegendComponent.html":{}}}],["legend/legend",{"_index":3683,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["legend/legend.component",{"_index":3687,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["legend_series_class_name",{"_index":3378,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["legendcomponent",{"_index":518,"title":{"components/LegendComponent.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{},"overview.html":{}}}],["legendinteractionassist",{"_index":3133,"title":{"classes/LegendInteractionAssist.html":{}},"body":{"classes/LegendInteractionAssist.html":{}}}],["legendinteractionassist(this",{"_index":3197,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["legendlabeldata$(chartseries",{"_index":3211,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["legendorientation",{"_index":3116,"title":{},"body":{"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"miscellaneous/enumerations.html":{}}}],["legendorientation.horizontal",{"_index":3405,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["legendorientation.vertical",{"_index":3117,"title":{},"body":{"components/LegendComponent.html":{}}}],["legendseries",{"_index":3323,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"components/RichLegendTileComponent.html":{}}}],["legendseries.length",{"_index":3326,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["legendseriescomponent",{"_index":520,"title":{"components/LegendSeriesComponent.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{},"overview.html":{}}}],["legendseriesset",{"_index":3183,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["length",{"_index":1704,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/UtilityService.html":{}}}],["lengthlimit",{"_index":362,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["level",{"_index":1897,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineAccessors.html":{},"classes/NoopAccessors.html":{}}}],["levels",{"_index":279,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["liability",{"_index":4810,"title":{},"body":{"license.html":{}}}],["liable",{"_index":4818,"title":{},"body":{"license.html":{}}}],["library",{"_index":1407,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"index.html":{}}}],["licensable",{"_index":4714,"title":{},"body":{"license.html":{}}}],["license",{"_index":4590,"title":{"license.html":{}},"body":{"license.html":{}}}],["license.you",{"_index":4768,"title":{},"body":{"license.html":{}}}],["licensed",{"_index":4870,"title":{},"body":{"license.html":{}}}],["licenses",{"_index":4730,"title":{},"body":{"license.html":{}}}],["licensor",{"_index":4604,"title":{},"body":{"license.html":{}}}],["light",{"_index":1093,"title":{},"body":{"classes/ChartPalette.html":{},"classes/TextColorProvider.html":{},"miscellaneous/variables.html":{}}}],["lighten",{"_index":3739,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["lighter",{"_index":4131,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["limit",{"_index":4197,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["limit.accessor",{"_index":4302,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["limit.zoneboundary",{"_index":4303,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["limitation",{"_index":4799,"title":{},"body":{"license.html":{}}}],["limitations",{"_index":4875,"title":{},"body":{"license.html":{}}}],["limited",{"_index":3835,"title":{},"body":{"classes/Renderer.html":{},"license.html":{}}}],["limiting",{"_index":5030,"title":{},"body":{"miscellaneous/variables.html":{}}}],["limits",{"_index":2061,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"injectables/ThresholdsService.html":{}}}],["limits[value",{"_index":4293,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["line",{"_index":154,"title":{"additional-documentation/chart-types/line.html":{}},"body":{"classes/AreaGridConfig.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYGridConfig.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopRenderer.html":{},"modules/NuiChartsModule.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"index.html":{},"additional-documentation/chart-types.html":{}}}],["line.enter",{"_index":3099,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["line.exit().remove",{"_index":3103,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["line/line",{"_index":2103,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["lineaccessors",{"_index":2268,"title":{"classes/LineAccessors.html":{}},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["linear",{"_index":4535,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lineargaugethresholdsrenderer",{"_index":1963,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["linearscale",{"_index":2343,"title":{"classes/LinearScale.html":{}},"body":{"interfaces/IScaleSVGElement.html":{},"classes/LinearScale.html":{}}}],["linearscale).foreach((scale",{"_index":2382,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["linecap",{"_index":2122,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["linerenderer",{"_index":2104,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MissingDataLineRendererConfig.html":{},"injectables/ThresholdsService.html":{}}}],["linerenderer.getstrokestyledashed(1",{"_index":3574,"title":{},"body":{"classes/MissingDataLineRendererConfig.html":{},"injectables/ThresholdsService.html":{}}}],["lines",{"_index":2125,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IScaleSVGElement.html":{},"injectables/ThresholdsService.html":{}}}],["lineselectseriesinteractionstrategy",{"_index":2128,"title":{"classes/LineSelectSeriesInteractionStrategy.html":{}},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["link",{"_index":188,"title":{},"body":{"classes/AxisConfig.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/LineAccessors.html":{},"classes/NoopRenderer.html":{},"classes/Scale.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"license.html":{}}}],["list",{"_index":649,"title":{},"body":{"classes/Chart.html":{},"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["listened",{"_index":1162,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["listening",{"_index":928,"title":{},"body":{"components/ChartComponent.html":{}}}],["listens",{"_index":1159,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{}}}],["lists",{"_index":4678,"title":{},"body":{"license.html":{}}}],["literal",{"_index":307,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionValues.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MappedValueProvider.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"classes/TextColorProvider.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["litigation",{"_index":4721,"title":{},"body":{"license.html":{}}}],["llc",{"_index":4869,"title":{},"body":{"license.html":{}}}],["localize",{"_index":3668,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["localizefn",{"_index":3671,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["locally",{"_index":2323,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["located",{"_index":3813,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["lodash/clone",{"_index":2330,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["lodash/clonedeep",{"_index":4024,"title":{},"body":{"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{}}}],["lodash/debounce",{"_index":886,"title":{},"body":{"components/ChartComponent.html":{}}}],["lodash/defaultsdeep",{"_index":1196,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/ZoomPlugin.html":{}}}],["lodash/each",{"_index":586,"title":{},"body":{"classes/Chart.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"classes/LegendInteractionAssist.html":{},"classes/Renderer.html":{}}}],["lodash/find",{"_index":3012,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["lodash/findindex",{"_index":316,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["lodash/get",{"_index":3853,"title":{},"body":{"classes/Renderer.html":{}}}],["lodash/identity",{"_index":4397,"title":{},"body":{"classes/UtilityService.html":{}}}],["lodash/isarray",{"_index":318,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartPalette.html":{},"classes/InteractionLabelPlugin.html":{}}}],["lodash/isempty",{"_index":1684,"title":{},"body":{"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendSeriesComponent.html":{},"classes/UtilityService.html":{},"classes/ZoomPlugin.html":{}}}],["lodash/isequal",{"_index":1320,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["lodash/isfunction",{"_index":1019,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["lodash/isnil",{"_index":1322,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITooltipNode.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"components/RichLegendTileComponent.html":{}}}],["lodash/isundefined",{"_index":320,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"injectables/ChartCollectionService.html":{},"classes/ChartDonutContentPlugin.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/SvgMarker.html":{},"classes/UtilityService.html":{},"classes/ZoomPlugin.html":{}}}],["lodash/keyby",{"_index":3158,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["lodash/pickby",{"_index":1198,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{}}}],["lodash/sortby",{"_index":4217,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["lodash/unionwith",{"_index":4219,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["lodash/uniq",{"_index":2332,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["lodash/values",{"_index":1199,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"classes/LegendInteractionAssist.html":{},"injectables/ThresholdsService.html":{}}}],["loggerservice",{"_index":4159,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["logic",{"_index":3525,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["look",{"_index":4569,"title":{},"body":{"index.html":{}}}],["loop",{"_index":2688,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["loss",{"_index":4825,"title":{},"body":{"license.html":{}}}],["losses",{"_index":4832,"title":{},"body":{"license.html":{}}}],["low",{"_index":4456,"title":{},"body":{"classes/UtilityService.html":{}}}],["lowc",{"_index":4108,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["lt",{"_index":2873,"title":{},"body":{"interfaces/ISimpleThresholdZone.html":{},"interfaces/ZoneCross.html":{}}}],["luminance",{"_index":4125,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["luminance.xml",{"_index":4135,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["luminance1",{"_index":4127,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["luminance2",{"_index":4129,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["m",{"_index":4956,"title":{},"body":{"miscellaneous/variables.html":{}}}],["m0",{"_index":4946,"title":{},"body":{"miscellaneous/variables.html":{}}}],["made",{"_index":4647,"title":{},"body":{"license.html":{}}}],["magenta",{"_index":2830,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["magic",{"_index":430,"title":{},"body":{"classes/BarStatusGridConfig.html":{}}}],["mailing",{"_index":4677,"title":{},"body":{"license.html":{}}}],["main",{"_index":4175,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["maintain",{"_index":1742,"title":{},"body":{"classes/Grid.html":{}}}],["maintenance",{"_index":4555,"title":{},"body":{"index.html":{}}}],["make",{"_index":3445,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{},"license.html":{}}}],["making",{"_index":4635,"title":{},"body":{"license.html":{}}}],["malfunction",{"_index":4830,"title":{},"body":{"license.html":{}}}],["managed",{"_index":4682,"title":{},"body":{"license.html":{}}}],["managemarker",{"_index":3510,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["managemarker(dataseries",{"_index":3521,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["management",{"_index":4620,"title":{},"body":{"license.html":{}}}],["manager",{"_index":594,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["manually",{"_index":1866,"title":{},"body":{"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"injectables/ThresholdsService.html":{},"classes/XYGridConfig.html":{},"classes/ZoomPlugin.html":{}}}],["many",{"_index":290,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["map",{"_index":2363,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/LegendInteractionAssist.html":{},"classes/RadialTooltipsPlugin.html":{},"injectables/ThresholdsService.html":{},"miscellaneous/variables.html":{}}}],["map((s",{"_index":4929,"title":{},"body":{"miscellaneous/variables.html":{}}}],["map(event",{"_index":3216,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["map(rs",{"_index":2417,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["map(s",{"_index":4928,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mappedvalueprovider",{"_index":3487,"title":{"classes/MappedValueProvider.html":{}},"body":{"classes/MappedValueProvider.html":{}}}],["margin",{"_index":124,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/DimensionConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["margin.left",{"_index":2597,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["margin.right",{"_index":2589,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["margin2",{"_index":2802,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["margin2.bottom",{"_index":2808,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["margin2.left",{"_index":2810,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["margin2.right",{"_index":2806,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["margin2.top",{"_index":2804,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["marginlocked",{"_index":1547,"title":{},"body":{"classes/DimensionConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["marginlocked.left",{"_index":2628,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["marginlocked.right",{"_index":2627,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["margins",{"_index":2046,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["marginsheight",{"_index":1586,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["marginswidth",{"_index":1581,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["marked",{"_index":4687,"title":{},"body":{"license.html":{}}}],["marker",{"_index":53,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"components/ChartMarkerComponent.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineAccessors.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SparkChartAssist.html":{},"classes/XYRenderer.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["marker's",{"_index":3513,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["marker'},{'name",{"_index":511,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["marker.component",{"_index":3678,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["marker.component.html",{"_index":997,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["marker.component.less",{"_index":996,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["marker.component.ts",{"_index":995,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["marker.component.ts:16",{"_index":1008,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["marker.component.ts:17",{"_index":1006,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["marker.component.ts:18",{"_index":1005,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["marker.component.ts:19",{"_index":1009,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["marker.component.ts:21",{"_index":1014,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["marker.component.ts:23",{"_index":1015,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["marker.component.ts:24",{"_index":1011,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["marker.component.ts:25",{"_index":1016,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["marker.component.ts:27",{"_index":1003,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["marker.setcolor(color",{"_index":3547,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["marker.ts",{"_index":3692,"title":{},"body":{"classes/PathMarker.html":{},"classes/SvgMarker.html":{}}}],["marker.ts:14",{"_index":4089,"title":{},"body":{"classes/SvgMarker.html":{}}}],["marker.ts:18",{"_index":4090,"title":{},"body":{"classes/SvgMarker.html":{}}}],["marker.ts:26",{"_index":3700,"title":{},"body":{"classes/PathMarker.html":{}}}],["marker.ts:38",{"_index":3699,"title":{},"body":{"classes/PathMarker.html":{}}}],["marker.ts:8",{"_index":3698,"title":{},"body":{"classes/PathMarker.html":{}}}],["marker.ts:9",{"_index":3695,"title":{},"body":{"classes/PathMarker.html":{},"classes/SvgMarker.html":{}}}],["marker/chart",{"_index":994,"title":{},"body":{"components/ChartMarkerComponent.html":{},"modules/NuiChartsModule.html":{}}}],["marker_path_class",{"_index":3508,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markerinteraction",{"_index":2090,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["markerinteractionconfig",{"_index":3517,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markerinteractionconfig.clickable",{"_index":3544,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markerinteractionconfig.enabled",{"_index":3542,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markerprovider",{"_index":16,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["markerradius",{"_index":1962,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["markers",{"_index":1903,"title":{"additional-documentation/advanced-usage/input-structure/markers.html":{}},"body":{"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/NoopAccessors.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SparkChartAssist.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/advanced-usage.html":{}}}],["markertarget",{"_index":3535,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markertarget).select(\"path\").classed(markerutils.marker_path_class",{"_index":3557,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markertarget).select(\"path\").node",{"_index":3558,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markertarget).selectall(\"g",{"_index":3554,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markertarget.attrs(attrs",{"_index":3548,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markertarget.empty",{"_index":3545,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markertarget.node",{"_index":3555,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markertarget.node()?.appendchild(utilservice.getsvgfromstring(marker.getsvg",{"_index":3556,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markertarget.on(\"click",{"_index":3553,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markertarget.on(\"mouseenter",{"_index":3549,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markertarget.on(\"mouseleave",{"_index":3552,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markerutils",{"_index":3504,"title":{"classes/MarkerUtils.html":{}},"body":{"classes/MarkerUtils.html":{}}}],["markerutils.default_marker_container_class",{"_index":3519,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markerutils.removemarker(container",{"_index":3534,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["marks",{"_index":4786,"title":{},"body":{"license.html":{}}}],["markup",{"_index":4087,"title":{},"body":{"classes/SvgMarker.html":{}}}],["match",{"_index":2269,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LineAccessors.html":{},"classes/RadialAccessors.html":{},"classes/XYAccessors.html":{}}}],["matches",{"_index":3490,"title":{},"body":{"classes/MappedValueProvider.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{}}}],["matching",{"_index":79,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"components/BasicLegendTileComponent.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"modules/NuiChartsModule.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"additional-documentation/layout.html":{},"additional-documentation/chart-types.html":{},"additional-documentation/chart-types/line.html":{},"additional-documentation/chart-types/bar.html":{},"additional-documentation/chart-types/bar/bucketed-bar.html":{},"additional-documentation/chart-types/bar/status.html":{},"additional-documentation/chart-types/bar/waterfall.html":{},"additional-documentation/chart-types/area.html":{},"additional-documentation/chart-types/pie-and-donut.html":{},"additional-documentation/chart-types/spark.html":{},"additional-documentation/plugins.html":{},"additional-documentation/plugins/tooltips.html":{},"additional-documentation/plugins/popovers.html":{},"additional-documentation/thresholds.html":{},"additional-documentation/timeframe-selection.html":{},"additional-documentation/advanced-usage.html":{},"additional-documentation/advanced-usage/chart.html":{},"additional-documentation/advanced-usage/legend.html":{},"additional-documentation/advanced-usage/input-structure.html":{},"additional-documentation/advanced-usage/input-structure/data.html":{},"additional-documentation/advanced-usage/input-structure/colors.html":{},"additional-documentation/advanced-usage/input-structure/markers.html":{},"additional-documentation/advanced-usage/events.html":{},"additional-documentation/advanced-usage/grid.html":{},"additional-documentation/advanced-usage/scales.html":{},"additional-documentation/advanced-usage/scales/domains.html":{},"additional-documentation/advanced-usage/scales/formatters.html":{}}}],["math.abs(first",{"_index":2801,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["math.abs(test",{"_index":4421,"title":{},"body":{"classes/UtilityService.html":{}}}],["math.abs(topofrange",{"_index":2770,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["math.ceil(((datapoint?.position?.x",{"_index":3563,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["math.ceil(((datapoint?.position?.y",{"_index":3567,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["math.cos(a",{"_index":3806,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["math.floor(dt",{"_index":4432,"title":{},"body":{"classes/UtilityService.html":{}}}],["math.max(...valuesarray.map(d",{"_index":1252,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["math.max(0",{"_index":237,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["math.max(automaticdomain[1",{"_index":5036,"title":{},"body":{"miscellaneous/variables.html":{}}}],["math.max(value",{"_index":1584,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["math.max.apply(null",{"_index":2701,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["math.min(...valarr.map(d",{"_index":3773,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["math.min(...valuesarray.map(d",{"_index":1239,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["math.min(0",{"_index":234,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["math.min(automaticdomain[0",{"_index":5034,"title":{},"body":{"miscellaneous/variables.html":{}}}],["math.min(clientrect.height",{"_index":1055,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["math.min(clientrect.width",{"_index":1052,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["math.min(prev",{"_index":976,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["math.min(scales.y.range()[0",{"_index":2863,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["math.min(this.levels",{"_index":363,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["math.pi",{"_index":3803,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["math.random",{"_index":4430,"title":{},"body":{"classes/UtilityService.html":{}}}],["math.round(angle",{"_index":3831,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["math.sin(a",{"_index":3807,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["math.sqrt(2",{"_index":992,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["mathias",{"_index":4437,"title":{},"body":{"classes/UtilityService.html":{}}}],["matrix",{"_index":685,"title":{},"body":{"classes/Chart.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":1936,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["maxbottomwidth",{"_index":2579,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["maxleftwidth",{"_index":2577,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["maxrightwidth",{"_index":2575,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["maxsize",{"_index":1001,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["maxthickness",{"_index":1955,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/variables.html":{}}}],["maxwidth",{"_index":2067,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["maybe",{"_index":2166,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["mean",{"_index":4601,"title":{},"body":{"license.html":{}}}],["means",{"_index":3610,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"license.html":{}}}],["measurement",{"_index":2672,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["measurementcomparison",{"_index":2676,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["measuretype",{"_index":2675,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["mechanical",{"_index":4640,"title":{},"body":{"license.html":{}}}],["mechanism",{"_index":2078,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["media",{"_index":4645,"title":{},"body":{"license.html":{}}}],["medium",{"_index":4536,"title":{},"body":{"miscellaneous/enumerations.html":{},"license.html":{}}}],["meet",{"_index":4735,"title":{},"body":{"license.html":{}}}],["memberof",{"_index":3701,"title":{},"body":{"classes/PathMarker.html":{}}}],["merchantability",{"_index":4800,"title":{},"body":{"license.html":{}}}],["merely",{"_index":4661,"title":{},"body":{"license.html":{}}}],["merge(line",{"_index":3101,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["mergeddomains",{"_index":5038,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mergeddomains[0",{"_index":5045,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mergedomains(domains",{"_index":5028,"title":{},"body":{"miscellaneous/variables.html":{}}}],["metadata",{"_index":489,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{},"injectables/ThresholdsService.html":{}}}],["method",{"_index":1666,"title":{},"body":{"classes/Grid.html":{},"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/IXYScales.html":{},"classes/LegendInteractionAssist.html":{},"classes/MarkerUtils.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{}}}],["methods",{"_index":273,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"injectables/ChartCollectionService.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IScale.html":{},"interfaces/IValueProvider.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SparkChartAssist.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{}}}],["mid",{"_index":4460,"title":{},"body":{"classes/UtilityService.html":{}}}],["middle",{"_index":3062,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["midpoint",{"_index":1150,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["min",{"_index":1935,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["mind",{"_index":2171,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LineAccessors.html":{},"interfaces/ScalesIndex.html":{}}}],["minimum",{"_index":2144,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["minute",{"_index":5006,"title":{},"body":{"miscellaneous/variables.html":{}}}],["miscellaneou",{"_index":5012,"title":{},"body":{"miscellaneous/variables.html":{}}}],["miscellaneous",{"_index":4513,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":3572,"title":{},"body":{"classes/MissingDataLineRendererConfig.html":{},"injectables/ThresholdsService.html":{}}}],["missingdatalinerendererconfig",{"_index":3570,"title":{"classes/MissingDataLineRendererConfig.html":{}},"body":{"classes/MissingDataLineRendererConfig.html":{}}}],["mockups",{"_index":2973,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["mode",{"_index":3114,"title":{},"body":{"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{}}}],["modifications",{"_index":4636,"title":{},"body":{"license.html":{}}}],["modified",{"_index":4741,"title":{},"body":{"license.html":{}}}],["modify",{"_index":4763,"title":{},"body":{"license.html":{}}}],["modifying",{"_index":4767,"title":{},"body":{"license.html":{}}}],["modifyzerolines",{"_index":2461,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["modifyzerolines(gridselection",{"_index":2469,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["module",{"_index":3652,"title":{"modules/NuiChartsModule.html":{}},"body":{"modules/NuiChartsModule.html":{},"overview.html":{}}}],["modules",{"_index":3654,"title":{"modules.html":{}},"body":{"modules/NuiChartsModule.html":{},"modules.html":{}}}],["more",{"_index":2019,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/SparkChartAssist.html":{},"index.html":{},"license.html":{}}}],["mouse",{"_index":1918,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["mouse_active",{"_index":4921,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mouse_active_event",{"_index":3161,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{},"miscellaneous/variables.html":{}}}],["mousedown",{"_index":1923,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/enumerations.html":{}}}],["mouseenter",{"_index":1926,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/enumerations.html":{}}}],["mouseinteractivearea",{"_index":2335,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/MarkerUtils.html":{}}}],["mouseinteractivearea(this.getlasagna().getcontainer",{"_index":2433,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["mouseinteractiveareaplugin",{"_index":2348,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["mouseleave",{"_index":1927,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/enumerations.html":{}}}],["mousemove",{"_index":1929,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/enumerations.html":{}}}],["mouseup",{"_index":1930,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/enumerations.html":{}}}],["movement",{"_index":1928,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["moves",{"_index":2907,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["moving",{"_index":346,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["multi",{"_index":1907,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"modules/NuiChartsModule.html":{},"classes/Renderer.html":{},"dependencies.html":{}}}],["multiple",{"_index":1740,"title":{},"body":{"classes/Grid.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{}}}],["n",{"_index":2714,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["name",{"_index":21,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"components/BasicLegendTileComponent.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"license.html":{}}}],["names",{"_index":4785,"title":{},"body":{"license.html":{}}}],["narrow",{"_index":2167,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["nativeevent",{"_index":3886,"title":{},"body":{"classes/Renderer.html":{}}}],["nearest",{"_index":2014,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["nearestindex",{"_index":373,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["necessarily",{"_index":4715,"title":{},"body":{"license.html":{}}}],["necessary",{"_index":2615,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["need",{"_index":343,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Chart.html":{},"classes/Grid.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["needed",{"_index":1266,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/Grid.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IScaleSVGElement.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["needle",{"_index":4376,"title":{},"body":{"classes/UtilityService.html":{}}}],["needs",{"_index":377,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"components/ChartMarkerComponent.html":{}}}],["negative",{"_index":3609,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["negligence",{"_index":4813,"title":{},"body":{"license.html":{}}}],["negligent",{"_index":4816,"title":{},"body":{"license.html":{}}}],["never",{"_index":2783,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["new",{"_index":112,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newbottommargin",{"_index":2742,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["newtopmargin",{"_index":2739,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["next",{"_index":838,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/IZoomPluginConfiguration.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"classes/UtilityService.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["next.getboundingclientrect",{"_index":2697,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["next.invert(x",{"_index":3001,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["next.scaleid",{"_index":2426,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["ngaftercontentinit",{"_index":909,"title":{},"body":{"components/ChartComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["ngafterviewinit",{"_index":845,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartMarkerComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["ngfor",{"_index":4017,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["ngmodule",{"_index":3665,"title":{},"body":{"modules/NuiChartsModule.html":{},"index.html":{}}}],["ngonchanges(changes",{"_index":901,"title":{},"body":{"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/LegendComponent.html":{}}}],["ngondestroy",{"_index":920,"title":{},"body":{"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/LegendComponent.html":{}}}],["ngoninit",{"_index":897,"title":{},"body":{"components/ChartComponent.html":{},"components/ChartPopoverComponent.html":{}}}],["ngzone",{"_index":876,"title":{},"body":{"components/ChartComponent.html":{}}}],["nice",{"_index":1837,"title":{},"body":{"classes/Grid.html":{}}}],["nine",{"_index":4943,"title":{},"body":{"miscellaneous/variables.html":{}}}],["node",{"_index":1237,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialPopoverPlugin.html":{}}}],["node.radius",{"_index":1413,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["node.x",{"_index":1425,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["node.y",{"_index":1424,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["node_modules/@nova",{"_index":4577,"title":{},"body":{"index.html":{}}}],["nodes",{"_index":1393,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["non",{"_index":1617,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{},"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/PathMarker.html":{},"interfaces/ScalesIndex.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["none",{"_index":2970,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/ZoomPlugin.html":{}}}],["noopaccessors",{"_index":2290,"title":{"classes/NoopAccessors.html":{}},"body":{"interfaces/INoopAccessors.html":{},"classes/NoopAccessors.html":{}}}],["nooprenderer",{"_index":3577,"title":{"classes/NoopRenderer.html":{}},"body":{"classes/NoopRenderer.html":{}}}],["noopscale",{"_index":3632,"title":{"classes/NoopScale.html":{}},"body":{"classes/NoopScale.html":{}}}],["normalized_domain",{"_index":2157,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{},"miscellaneous/variables.html":{}}}],["normally",{"_index":4759,"title":{},"body":{"license.html":{}}}],["note",{"_index":2041,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LegendInteractionAssist.html":{},"classes/ZoomPlugin.html":{}}}],["nothing",{"_index":4776,"title":{},"body":{"license.html":{}}}],["notice",{"_index":4649,"title":{},"body":{"license.html":{}}}],["notices",{"_index":4744,"title":{},"body":{"license.html":{}}}],["notifying",{"_index":3126,"title":{},"body":{"components/LegendComponent.html":{}}}],["notwithstanding",{"_index":4775,"title":{},"body":{"license.html":{}}}],["nova",{"_index":91,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"components/ChartPopoverComponent.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/LinearScale.html":{},"classes/MarkerUtils.html":{},"modules/NuiChartsModule.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"dependencies.html":{},"index.html":{}}}],["nui",{"_index":493,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"classes/Chart.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IXYGridConfig.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"classes/PathMarker.html":{},"components/RichLegendTileComponent.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYGridConfig.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["nuichartcollectionid",{"_index":526,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["nuichartsmodule",{"_index":3653,"title":{"modules/NuiChartsModule.html":{}},"body":{"modules/NuiChartsModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["nuicommonmodule",{"_index":3673,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["nuiiconmodule",{"_index":3674,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["nuipopovermodule",{"_index":3675,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["null",{"_index":226,"title":{},"body":{"classes/BarAccessors.html":{},"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/NoopScale.html":{},"interfaces/ScalesIndex.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":168,"title":{},"body":{"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/IStackMetadata.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialValueProvider.html":{},"classes/SparkChartAssist.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["number.isfinite(d",{"_index":2296,"title":{},"body":{"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"classes/RadialAccessors.html":{}}}],["number.isfinite(value",{"_index":233,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["numbers",{"_index":1405,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"injectables/ThresholdsService.html":{}}}],["numeric",{"_index":2175,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/IXYScales.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"interfaces/ZoneCross.html":{},"miscellaneous/variables.html":{}}}],["object",{"_index":1067,"title":{},"body":{"classes/ChartPalette.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/PieRenderer.html":{},"classes/SideIndicatorAccessors.html":{},"license.html":{}}}],["object.assign",{"_index":1520,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{},"classes/XYGridConfig.html":{}}}],["object.keys(attrs",{"_index":3708,"title":{},"body":{"classes/PathMarker.html":{}}}],["object.keys(borderconfigs",{"_index":1775,"title":{},"body":{"classes/Grid.html":{}}}],["object.keys(datapoints).foreach(seriesid",{"_index":4066,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["object.keys(event.payload).map(key",{"_index":3271,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["object.keys(filterscales",{"_index":3865,"title":{},"body":{"classes/Renderer.html":{}}}],["object.keys(fixeddomains).reduce((result",{"_index":5020,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.keys(this._scales).foreach((scalekey",{"_index":2377,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["object.keys(this.seriesgroups",{"_index":3321,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["object.keys(tooltippositions).map(seriesid",{"_index":1394,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["objects",{"_index":1968,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/SparkChartAssist.html":{}}}],["obligations",{"_index":4841,"title":{},"body":{"license.html":{}}}],["observable",{"_index":3159,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["observer",{"_index":888,"title":{},"body":{"components/ChartComponent.html":{},"dependencies.html":{}}}],["obtain",{"_index":4872,"title":{},"body":{"license.html":{}}}],["of((chartseries.data",{"_index":3225,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["of(highlightdata.data",{"_index":3224,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["offer",{"_index":4710,"title":{},"body":{"license.html":{}}}],["offset",{"_index":1147,"title":{},"body":{"components/ChartPopoverComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/InteractionLabelPlugin.html":{}}}],["offsetparentbbox",{"_index":1488,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["offsetparentbbox.left",{"_index":1492,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["offsetparentbbox.top",{"_index":1494,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["offsetx",{"_index":1461,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["offsety",{"_index":1464,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["ok",{"_index":4527,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["old",{"_index":2782,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["oldmargin",{"_index":2637,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["oldouterheight",{"_index":2719,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["oldouterwidth",{"_index":2717,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["omit",{"_index":3435,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["on(\"click",{"_index":3440,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["on(\"mouseenter",{"_index":3434,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["on(\"mouseleave",{"_index":3439,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["on(\"pointerdown",{"_index":2960,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["on(\"pointerup",{"_index":2962,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["once",{"_index":2187,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["onchanges",{"_index":868,"title":{},"body":{"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/LegendComponent.html":{}}}],["onclick",{"_index":3407,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["ondestroy",{"_index":867,"title":{},"body":{"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/LegendComponent.html":{}}}],["one",{"_index":755,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"components/ChartComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/RadialPopoverPlugin.html":{},"classes/SparkChartAssist.html":{},"miscellaneous/enumerations.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["ones",{"_index":3248,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["oneseriesmode",{"_index":3325,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["onevent",{"_index":3191,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["oninit",{"_index":865,"title":{},"body":{"components/ChartComponent.html":{},"components/ChartPopoverComponent.html":{}}}],["onsetseriesstates(renderstatedata",{"_index":743,"title":{},"body":{"classes/Chart.html":{}}}],["onupdate(seriesset",{"_index":706,"title":{},"body":{"classes/Chart.html":{}}}],["onupdatedimensions",{"_index":713,"title":{},"body":{"classes/Chart.html":{}}}],["oops",{"_index":1097,"title":{},"body":{"classes/ChartPalette.html":{}}}],["opacity",{"_index":1293,"title":{},"body":{"components/ChartTooltipComponent.html":{},"interfaces/IScaleSVGElement.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["open",{"_index":1190,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{},"miscellaneous/variables.html":{}}}],["opening",{"_index":1276,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["openpopoversubject",{"_index":1171,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["opentimeout",{"_index":1333,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["opentooltips",{"_index":1300,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["opposite",{"_index":3793,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["option",{"_index":1861,"title":{},"body":{"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["optional",{"_index":22,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IScale.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{}}}],["optionally",{"_index":2132,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["options",{"_index":1066,"title":{},"body":{"classes/ChartPalette.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["options).format(date",{"_index":5010,"title":{},"body":{"miscellaneous/variables.html":{}}}],["options.backgroundopacity",{"_index":1105,"title":{},"body":{"classes/ChartPalette.html":{}}}],["order",{"_index":1267,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/ZoomPlugin.html":{}}}],["orientation",{"_index":441,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYScales.html":{},"components/LegendComponent.html":{},"classes/RadialTooltipsPlugin.html":{},"interfaces/ScalesIndex.html":{}}}],["origin",{"_index":3812,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"license.html":{}}}],["original",{"_index":4658,"title":{},"body":{"license.html":{}}}],["originx",{"_index":1456,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["originy",{"_index":1457,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["otherwise",{"_index":379,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LegendInteractionAssist.html":{},"interfaces/ScalesIndex.html":{},"injectables/ThresholdsService.html":{},"license.html":{}}}],["out",{"_index":2542,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"modules/NuiChartsModule.html":{},"classes/XYGridConfig.html":{},"license.html":{},"overview.html":{}}}],["outerheight",{"_index":1548,"title":{},"body":{"classes/DimensionConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["outerheight(value",{"_index":1559,"title":{},"body":{"classes/DimensionConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["outerradius",{"_index":3800,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["outerwidth",{"_index":1549,"title":{},"body":{"classes/DimensionConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["outerwidth(value",{"_index":1563,"title":{},"body":{"classes/DimensionConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["output",{"_index":1131,"title":{},"body":{"components/ChartPopoverComponent.html":{},"components/LegendSeriesComponent.html":{}}}],["outputs",{"_index":1119,"title":{},"body":{"components/ChartPopoverComponent.html":{},"components/LegendSeriesComponent.html":{}}}],["outside",{"_index":347,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Grid.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["outstanding",{"_index":4627,"title":{},"body":{"license.html":{}}}],["over",{"_index":1270,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/LegendInteractionAssist.html":{}}}],["overall",{"_index":3120,"title":{},"body":{"components/LegendComponent.html":{}}}],["overflow",{"_index":185,"title":{},"body":{"classes/AxisConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"miscellaneous/typealiases.html":{}}}],["overflowhandler",{"_index":172,"title":{},"body":{"classes/AxisConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["overlap",{"_index":1390,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITooltipNode.html":{}}}],["overlay",{"_index":3817,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["overlaymodule",{"_index":3664,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["overlaypositions",{"_index":1447,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["overlaysetup",{"_index":1466,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["overlayx",{"_index":1458,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["overlayy",{"_index":1459,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["overridden",{"_index":4548,"title":{},"body":{"index.html":{}}}],["override",{"_index":736,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{}}}],["overview",{"_index":4539,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["owner",{"_index":4606,"title":{},"body":{"license.html":{}}}],["ownership",{"_index":4623,"title":{},"body":{"license.html":{}}}],["p",{"_index":337,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Chart.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IXYScales.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"interfaces/ScalesIndex.html":{},"classes/SideIndicatorAccessors.html":{}}}],["p.destroy",{"_index":702,"title":{},"body":{"classes/Chart.html":{}}}],["p.initialize",{"_index":698,"title":{},"body":{"classes/Chart.html":{}}}],["p.update",{"_index":712,"title":{},"body":{"classes/Chart.html":{}}}],["p.updatedimensions",{"_index":731,"title":{},"body":{"classes/Chart.html":{}}}],["package",{"_index":4504,"title":{"dependencies.html":{}},"body":{}}],["package.json",{"_index":4562,"title":{},"body":{"index.html":{}}}],["packagr/issues/641",{"_index":3858,"title":{},"body":{"classes/Renderer.html":{}}}],["packagr/ng",{"_index":3857,"title":{},"body":{"classes/Renderer.html":{}}}],["padding",{"_index":160,"title":{},"body":{"classes/AxisConfig.html":{},"classes/DimensionConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/InteractionLabelPlugin.html":{}}}],["padding.bottom",{"_index":2481,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["padding.right",{"_index":2476,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["padding.top",{"_index":2482,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["page",{"_index":4863,"title":{"additional-documentation/layout.html":{},"additional-documentation/chart-types.html":{},"additional-documentation/chart-types/line.html":{},"additional-documentation/chart-types/bar.html":{},"additional-documentation/chart-types/bar/bucketed-bar.html":{},"additional-documentation/chart-types/bar/status.html":{},"additional-documentation/chart-types/bar/waterfall.html":{},"additional-documentation/chart-types/area.html":{},"additional-documentation/chart-types/pie-and-donut.html":{},"additional-documentation/chart-types/spark.html":{},"additional-documentation/plugins.html":{},"additional-documentation/plugins/tooltips.html":{},"additional-documentation/plugins/popovers.html":{},"additional-documentation/thresholds.html":{},"additional-documentation/timeframe-selection.html":{},"additional-documentation/advanced-usage.html":{},"additional-documentation/advanced-usage/chart.html":{},"additional-documentation/advanced-usage/legend.html":{},"additional-documentation/advanced-usage/input-structure.html":{},"additional-documentation/advanced-usage/input-structure/data.html":{},"additional-documentation/advanced-usage/input-structure/colors.html":{},"additional-documentation/advanced-usage/input-structure/markers.html":{},"additional-documentation/advanced-usage/events.html":{},"additional-documentation/advanced-usage/grid.html":{},"additional-documentation/advanced-usage/scales.html":{},"additional-documentation/advanced-usage/scales/domains.html":{},"additional-documentation/advanced-usage/scales/formatters.html":{}},"body":{"license.html":{}}}],["palette",{"_index":3193,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["palette.ts",{"_index":1059,"title":{},"body":{"classes/ChartPalette.html":{}}}],["palette.ts:14",{"_index":1068,"title":{},"body":{"classes/ChartPalette.html":{}}}],["palette.ts:31",{"_index":1071,"title":{},"body":{"classes/ChartPalette.html":{}}}],["palette.ts:35",{"_index":1073,"title":{},"body":{"classes/ChartPalette.html":{}}}],["palette.ts:39",{"_index":1075,"title":{},"body":{"classes/ChartPalette.html":{}}}],["param",{"_index":334,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartAssistRenderStateData.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/MarkerUtils.html":{},"classes/PathMarker.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{}}}],["parameter",{"_index":2680,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"injectables/ThresholdsService.html":{}}}],["parameters",{"_index":19,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartMarker.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IScale.html":{},"interfaces/IValueProvider.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{}}}],["parent",{"_index":1236,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/RadialPopoverPlugin.html":{}}}],["parentid",{"_index":3314,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["parsefloat(transformval.slice(transformval.indexof",{"_index":2711,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["parseint(ticks",{"_index":200,"title":{},"body":{"classes/AxisConfig.html":{}}}],["part",{"_index":1899,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"license.html":{}}}],["partial",{"_index":723,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/LegendInteractionAssist.html":{},"classes/Renderer.html":{}}}],["particular",{"_index":4802,"title":{},"body":{"license.html":{}}}],["parts",{"_index":3784,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["party",{"_index":4758,"title":{},"body":{"license.html":{}}}],["pass",{"_index":1667,"title":{},"body":{"classes/Grid.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["passing",{"_index":2324,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["patent",{"_index":4708,"title":{},"body":{"license.html":{}}}],["path",{"_index":1659,"title":{},"body":{"classes/Grid.html":{},"classes/MarkerUtils.html":{},"classes/PathMarker.html":{},"classes/Renderer.html":{}}}],["path's",{"_index":2099,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["path.getboundingclientrect",{"_index":3561,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["path.setattribute(\"x",{"_index":3562,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["path.setattribute(\"y",{"_index":3566,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["path_",{"_index":1656,"title":{},"body":{"classes/Grid.html":{}}}],["path__outline",{"_index":3704,"title":{},"body":{"classes/PathMarker.html":{}}}],["pathmarker",{"_index":3690,"title":{"classes/PathMarker.html":{}},"body":{"classes/PathMarker.html":{}}}],["pathrect",{"_index":3560,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["pathrect.height",{"_index":3568,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["pathrect.width",{"_index":3564,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["patterns",{"_index":4544,"title":{},"body":{"index.html":{}}}],["payload",{"_index":802,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["peer",{"_index":4506,"title":{},"body":{"dependencies.html":{}}}],["pending",{"_index":2364,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["pentagon",{"_index":4989,"title":{},"body":{"miscellaneous/variables.html":{}}}],["per",{"_index":2972,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"injectables/ThresholdsService.html":{},"classes/ZoomPlugin.html":{}}}],["percent",{"_index":4625,"title":{},"body":{"license.html":{}}}],["percentage",{"_index":1948,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["perform",{"_index":1998,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"license.html":{}}}],["performs",{"_index":4379,"title":{},"body":{"classes/UtilityService.html":{}}}],["period",{"_index":2773,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["periods",{"_index":4171,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["permission",{"_index":4783,"title":{},"body":{"license.html":{}}}],["permissions",{"_index":4632,"title":{},"body":{"license.html":{}}}],["perpetual",{"_index":4696,"title":{},"body":{"license.html":{}}}],["pertain",{"_index":4750,"title":{},"body":{"license.html":{}}}],["physically",{"_index":2955,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["pickby",{"_index":1197,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{}}}],["pickby(datapoints",{"_index":1256,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{}}}],["pie",{"_index":1597,"title":{"additional-documentation/chart-types/pie-and-donut.html":{}},"body":{"classes/DonutGaugeRenderingUtil.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"index.html":{},"additional-documentation/chart-types.html":{}}}],["pie().sort(null",{"_index":1605,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["piearcdata",{"_index":3794,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["piearcdata.endangle",{"_index":3805,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["piearcdata.startangle",{"_index":3804,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["pieces",{"_index":4547,"title":{},"body":{"index.html":{}}}],["piegenerator",{"_index":1604,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["piegenerator(arcdata",{"_index":1607,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["pierenderer",{"_index":3715,"title":{"classes/PieRenderer.html":{}},"body":{"classes/PieRenderer.html":{}}}],["pipe",{"_index":3214,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["pipe(takeuntil(this.destroy",{"_index":1474,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/ZoomPlugin.html":{}}}],["pixel",{"_index":2016,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["pixels",{"_index":2036,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["placed",{"_index":1452,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["placement",{"_index":1706,"title":{},"body":{"classes/Grid.html":{},"classes/InteractionLabelPlugin.html":{}}}],["places",{"_index":4214,"title":{},"body":{"injectables/ThresholdsService.html":{},"license.html":{}}}],["play",{"_index":4584,"title":{},"body":{"index.html":{}}}],["playing",{"_index":1406,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["plotted",{"_index":2893,"title":{},"body":{"interfaces/IXYDataAccessors.html":{},"classes/XYAccessors.html":{}}}],["plugin",{"_index":481,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/SparkChartAssist.html":{},"classes/ZoomPlugin.html":{}}}],["plugin's",{"_index":1997,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["plugin.chart",{"_index":621,"title":{},"body":{"classes/Chart.html":{}}}],["plugin.ts",{"_index":436,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["plugin.ts:108",{"_index":4502,"title":{},"body":{"classes/ZoomPlugin.html":{}}}],["plugin.ts:11",{"_index":1112,"title":{},"body":{"classes/ChartPlugin.html":{}}}],["plugin.ts:126",{"_index":1438,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{}}}],["plugin.ts:13",{"_index":1113,"title":{},"body":{"classes/ChartPlugin.html":{}}}],["plugin.ts:131",{"_index":1440,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"classes/InteractionLabelPlugin.html":{}}}],["plugin.ts:14",{"_index":966,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["plugin.ts:15",{"_index":1110,"title":{},"body":{"classes/ChartPlugin.html":{}}}],["plugin.ts:17",{"_index":965,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["plugin.ts:20",{"_index":3083,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["plugin.ts:24",{"_index":969,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["plugin.ts:26",{"_index":3009,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["plugin.ts:27",{"_index":3085,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["plugin.ts:28",{"_index":1181,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/InteractionLabelPlugin.html":{},"classes/ZoomPlugin.html":{}}}],["plugin.ts:29",{"_index":4501,"title":{},"body":{"classes/ZoomPlugin.html":{}}}],["plugin.ts:3",{"_index":1108,"title":{},"body":{"classes/ChartPlugin.html":{}}}],["plugin.ts:30",{"_index":1192,"title":{},"body":{"classes/ChartPopoverPlugin.html":{}}}],["plugin.ts:32",{"_index":1189,"title":{},"body":{"classes/ChartPopoverPlugin.html":{}}}],["plugin.ts:33",{"_index":3008,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["plugin.ts:34",{"_index":1176,"title":{},"body":{"classes/ChartPopoverPlugin.html":{}}}],["plugin.ts:36",{"_index":1191,"title":{},"body":{"classes/ChartPopoverPlugin.html":{}}}],["plugin.ts:39",{"_index":3010,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/ZoomPlugin.html":{}}}],["plugin.ts:40",{"_index":968,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["plugin.ts:41",{"_index":4500,"title":{},"body":{"classes/ZoomPlugin.html":{}}}],["plugin.ts:43",{"_index":1188,"title":{},"body":{"classes/ChartPopoverPlugin.html":{}}}],["plugin.ts:49",{"_index":1175,"title":{},"body":{"classes/ChartPopoverPlugin.html":{}}}],["plugin.ts:5",{"_index":449,"title":{},"body":{"classes/BarTooltipsPlugin.html":{}}}],["plugin.ts:51",{"_index":1180,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ZoomPlugin.html":{}}}],["plugin.ts:56",{"_index":1194,"title":{},"body":{"classes/ChartPopoverPlugin.html":{}}}],["plugin.ts:63",{"_index":1434,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{}}}],["plugin.ts:65",{"_index":1433,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{}}}],["plugin.ts:68",{"_index":1193,"title":{},"body":{"classes/ChartPopoverPlugin.html":{}}}],["plugin.ts:7",{"_index":1109,"title":{},"body":{"classes/ChartPlugin.html":{}}}],["plugin.ts:70",{"_index":1437,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{}}}],["plugin.ts:75",{"_index":1435,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{}}}],["plugin.ts:81",{"_index":1430,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{}}}],["plugin.ts:88",{"_index":1436,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{}}}],["plugin.ts:9",{"_index":1111,"title":{},"body":{"classes/ChartPlugin.html":{}}}],["plugin.ts:90",{"_index":4503,"title":{},"body":{"classes/ZoomPlugin.html":{}}}],["plugin.ts:94",{"_index":3084,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["plugin.ts:98",{"_index":1439,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{}}}],["pluginindex",{"_index":623,"title":{},"body":{"classes/Chart.html":{}}}],["plugins",{"_index":557,"title":{"additional-documentation/plugins.html":{}},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{},"index.html":{},"additional-documentation/plugins.html":{}}}],["plugins.push(new",{"_index":2432,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["plugins/interaction/interaction",{"_index":2346,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/SparkChartAssist.html":{}}}],["plugins/mouse",{"_index":2349,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["plugins/render",{"_index":606,"title":{},"body":{"classes/Chart.html":{}}}],["plugins/types",{"_index":4398,"title":{},"body":{"classes/UtilityService.html":{}}}],["plus",{"_index":2048,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["point",{"_index":251,"title":{},"body":{"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarTooltipsPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["point(s",{"_index":1183,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["pointer",{"_index":1809,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/ZoomPlugin.html":{}}}],["pointerevents",{"_index":2142,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["points",{"_index":455,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DonutGaugeRenderingUtil.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineAccessors.html":{},"classes/RadialTooltipsPlugin.html":{},"injectables/ThresholdsService.html":{},"miscellaneous/variables.html":{}}}],["polyfill",{"_index":889,"title":{},"body":{"components/ChartComponent.html":{},"dependencies.html":{}}}],["popover",{"_index":1116,"title":{},"body":{"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["popover's",{"_index":1148,"title":{},"body":{"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["popover'},{'name",{"_index":513,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["popover.component",{"_index":3679,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["popover.component.html",{"_index":1118,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["popover.component.less",{"_index":1117,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["popover.component.ts",{"_index":1115,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["popover.component.ts:30",{"_index":1122,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["popover.component.ts:32",{"_index":1124,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["popover.component.ts:34",{"_index":1126,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["popover.component.ts:36",{"_index":1130,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["popover.component.ts:39",{"_index":1120,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["popover.component.ts:41",{"_index":1127,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["popover/chart",{"_index":1114,"title":{},"body":{"components/ChartPopoverComponent.html":{},"modules/NuiChartsModule.html":{}}}],["popovercomponent",{"_index":1128,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["popovers",{"_index":1207,"title":{"additional-documentation/plugins/popovers.html":{}},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"index.html":{},"additional-documentation/plugins.html":{}}}],["popovertargetposition",{"_index":1172,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["populate",{"_index":3207,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["portion",{"_index":4086,"title":{},"body":{"classes/SvgMarker.html":{}}}],["position",{"_index":948,"title":{},"body":{"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["position.height",{"_index":1402,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["position.left",{"_index":1154,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["position.top",{"_index":1156,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["position.width",{"_index":1152,"title":{},"body":{"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["position.x",{"_index":1399,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["position.y",{"_index":1400,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["positioned",{"_index":1450,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"injectables/ThresholdsService.html":{},"miscellaneous/variables.html":{}}}],["positioning",{"_index":1445,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["positions",{"_index":452,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["possibility",{"_index":4834,"title":{},"body":{"license.html":{}}}],["possible",{"_index":3209,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"injectables/ThresholdsService.html":{}}}],["potential",{"_index":2280,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{},"index.html":{}}}],["potentially",{"_index":3171,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["power",{"_index":4616,"title":{},"body":{"license.html":{}}}],["pre",{"_index":86,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/LegendInteractionAssist.html":{}}}],["preferred",{"_index":4634,"title":{},"body":{"license.html":{}}}],["prefix",{"_index":1658,"title":{},"body":{"classes/Grid.html":{}}}],["prepare",{"_index":4704,"title":{},"body":{"license.html":{}}}],["preprocess",{"_index":1991,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{}}}],["prerequisite",{"_index":2133,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["prescribed",{"_index":1970,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["present",{"_index":751,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{}}}],["prev",{"_index":979,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{},"interfaces/IScaleSVGElement.html":{}}}],["prevent",{"_index":1023,"title":{},"body":{"components/ChartMarkerComponent.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["previous",{"_index":1384,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"classes/LegendInteractionAssist.html":{}}}],["previouschart",{"_index":903,"title":{},"body":{"components/ChartComponent.html":{}}}],["previouschart.destroy",{"_index":905,"title":{},"body":{"components/ChartComponent.html":{}}}],["primarily",{"_index":855,"title":{},"body":{"injectables/ChartCollectionService.html":{}}}],["primary",{"_index":3351,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["primitive",{"_index":252,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["printed",{"_index":4862,"title":{},"body":{"license.html":{}}}],["private",{"_index":55,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Chart.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MappedValueProvider.html":{},"classes/PathMarker.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialTooltipsPlugin.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/ZoomPlugin.html":{}}}],["problems",{"_index":2282,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["process",{"_index":4384,"title":{},"body":{"classes/UtilityService.html":{}}}],["processdatapoints(datapoints",{"_index":1254,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["processed",{"_index":1080,"title":{},"body":{"classes/ChartPalette.html":{},"classes/TextColorProvider.html":{}}}],["processedcolor",{"_index":3751,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["processedcolorprovider",{"_index":1079,"title":{"classes/ProcessedColorProvider.html":{}},"body":{"classes/ChartPalette.html":{},"classes/ProcessedColorProvider.html":{},"classes/TextColorProvider.html":{}}}],["processedcolorprovider(this.standardcolors",{"_index":1099,"title":{},"body":{"classes/ChartPalette.html":{}}}],["processedcolorprovider:15",{"_index":4100,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["processedcolorprovider:30",{"_index":4101,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["processedcolors",{"_index":3747,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["processedseriesset",{"_index":3230,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["processedseriesset.map(s",{"_index":3232,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["processes",{"_index":3736,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["processhighlighteddatapoints",{"_index":445,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["processhighlighteddatapoints(datapoints",{"_index":470,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["processor",{"_index":3167,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["product",{"_index":4787,"title":{},"body":{"license.html":{}}}],["project",{"_index":4574,"title":{},"body":{"index.html":{}}}],["projected",{"_index":3366,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["projecteddescription",{"_index":3386,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["projects",{"_index":4573,"title":{},"body":{"index.html":{}}}],["prominent",{"_index":4743,"title":{},"body":{"license.html":{}}}],["propagate",{"_index":2548,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["properties",{"_index":11,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{}}}],["property",{"_index":1166,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/Grid.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/Renderer.html":{},"classes/SparkChartAssist.html":{}}}],["props",{"_index":1398,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["props.fx",{"_index":1403,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["props.fy",{"_index":1404,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["protected",{"_index":687,"title":{},"body":{"classes/Chart.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITooltipPosition.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LinearScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Scale.html":{},"classes/SparkChartAssist.html":{},"classes/SvgMarker.html":{},"classes/TimeScale.html":{}}}],["provide",{"_index":869,"title":{},"body":{"components/ChartComponent.html":{},"index.html":{},"license.html":{}}}],["provided",{"_index":1649,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/MappedValueProvider.html":{},"classes/NoopRenderer.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/Renderer.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["providedvalues",{"_index":3973,"title":{},"body":{"classes/SequentialValueProvider.html":{}}}],["provider",{"_index":819,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"classes/ChartPalette.html":{},"classes/ProcessedColorProvider.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SparkChartAssist.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{}}}],["provider.ts",{"_index":3489,"title":{},"body":{"classes/MappedValueProvider.html":{},"classes/ProcessedColorProvider.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/TextColorProvider.html":{}}}],["provider.ts:10",{"_index":3971,"title":{},"body":{"classes/SequentialValueProvider.html":{}}}],["provider.ts:13",{"_index":3499,"title":{},"body":{"classes/MappedValueProvider.html":{}}}],["provider.ts:15",{"_index":3745,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["provider.ts:16",{"_index":3500,"title":{},"body":{"classes/MappedValueProvider.html":{},"classes/SequentialValueProvider.html":{}}}],["provider.ts:20",{"_index":4099,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["provider.ts:26",{"_index":3972,"title":{},"body":{"classes/SequentialValueProvider.html":{}}}],["provider.ts:30",{"_index":3746,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["provider.ts:7",{"_index":3498,"title":{},"body":{"classes/MappedValueProvider.html":{},"classes/SequentialColorProvider.html":{}}}],["provider.ts:9",{"_index":3743,"title":{},"body":{"classes/ProcessedColorProvider.html":{},"classes/SequentialChartMarkerProvider.html":{}}}],["providers",{"_index":32,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"components/ChartComponent.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"modules/NuiChartsModule.html":{},"classes/RadialAccessors.html":{},"index.html":{},"overview.html":{}}}],["provides",{"_index":2076,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"injectables/ThresholdsService.html":{},"license.html":{}}}],["public",{"_index":94,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISpark.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{}}}],["publicly",{"_index":4705,"title":{},"body":{"license.html":{}}}],["publishes",{"_index":458,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["publishrenderstates",{"_index":3292,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["pull",{"_index":3667,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["purpose",{"_index":4683,"title":{},"body":{"license.html":{}}}],["purposes",{"_index":4615,"title":{},"body":{"license.html":{}}}],["put",{"_index":646,"title":{},"body":{"classes/Chart.html":{}}}],["px",{"_index":740,"title":{},"body":{"classes/Chart.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["quantity",{"_index":5015,"title":{},"body":{"miscellaneous/variables.html":{}}}],["querylist",{"_index":1310,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["quickly",{"_index":4551,"title":{},"body":{"index.html":{}}}],["quite",{"_index":4559,"title":{},"body":{"index.html":{}}}],["r",{"_index":2164,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/RadialTooltipsPlugin.html":{},"interfaces/ScalesIndex.html":{},"classes/TextColorProvider.html":{},"classes/UtilityService.html":{}}}],["radial",{"_index":3730,"title":{},"body":{"classes/PieRenderer.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["radialaccessors",{"_index":2295,"title":{"classes/RadialAccessors.html":{}},"body":{"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"classes/RadialAccessors.html":{}}}],["radialpopoverplugin",{"_index":3756,"title":{"classes/RadialPopoverPlugin.html":{}},"body":{"classes/RadialPopoverPlugin.html":{}}}],["radialrenderer",{"_index":970,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["radialrenderer:110",{"_index":3725,"title":{},"body":{"classes/PieRenderer.html":{}}}],["radialrenderer:119",{"_index":3727,"title":{},"body":{"classes/PieRenderer.html":{}}}],["radialrenderer:40",{"_index":3719,"title":{},"body":{"classes/PieRenderer.html":{}}}],["radialrenderer:46",{"_index":3722,"title":{},"body":{"classes/PieRenderer.html":{}}}],["radialrenderer:94",{"_index":3723,"title":{},"body":{"classes/PieRenderer.html":{}}}],["radialtooltipsplugin",{"_index":3777,"title":{"classes/RadialTooltipsPlugin.html":{}},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["radians",{"_index":3820,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["radii",{"_index":4530,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["radius",{"_index":972,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["range",{"_index":2183,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/MarkerUtils.html":{},"classes/NoopScale.html":{},"classes/PieRenderer.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{}}}],["range(range",{"_index":2184,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{}}}],["range.reverse",{"_index":3948,"title":{},"body":{"classes/Scale.html":{}}}],["range[0",{"_index":3733,"title":{},"body":{"classes/PieRenderer.html":{}}}],["range[1",{"_index":4422,"title":{},"body":{"classes/UtilityService.html":{}}}],["ranges",{"_index":2081,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["rarely",{"_index":1975,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["ratio",{"_index":4097,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["ratiodef",{"_index":4122,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["ratiotodark",{"_index":4116,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["ratiotolight",{"_index":4113,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["raw",{"_index":4390,"title":{},"body":{"classes/UtilityService.html":{}}}],["rc",{"_index":4102,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["reaches",{"_index":1954,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["readable",{"_index":4752,"title":{},"body":{"license.html":{}}}],["readonly",{"_index":97,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"classes/TimeScale.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{}}}],["reason",{"_index":4853,"title":{},"body":{"license.html":{}}}],["reasonable",{"_index":2155,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["recalculate",{"_index":2779,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["recalculated",{"_index":2040,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["recalculations",{"_index":2790,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["received",{"_index":456,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"license.html":{}}}],["recent",{"_index":1184,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["recipients",{"_index":4738,"title":{},"body":{"license.html":{}}}],["recommend",{"_index":4861,"title":{},"body":{"license.html":{}}}],["reconcilemarginsdebounce",{"_index":2362,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["reconcilemarginswithdebounce(oldmargin",{"_index":2793,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["reconfigurechart(chart",{"_index":4070,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["reconsider",{"_index":1827,"title":{},"body":{"classes/Grid.html":{}}}],["record",{"_index":1468,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LegendInteractionAssist.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/typealiases.html":{}}}],["rect",{"_index":2846,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["rect.attrs",{"_index":2865,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["rect.empty",{"_index":2855,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["rect.style(\"filter",{"_index":2858,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["rectangleaccessors",{"_index":204,"title":{"classes/RectangleAccessors.html":{}},"body":{"classes/BarAccessors.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["rectangleaccessors:34",{"_index":211,"title":{},"body":{"classes/BarAccessors.html":{},"classes/HorizontalBarAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["rectangleaccessors:35",{"_index":212,"title":{},"body":{"classes/BarAccessors.html":{},"classes/HorizontalBarAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["redistributing",{"_index":4806,"title":{},"body":{"license.html":{}}}],["redistribution",{"_index":4733,"title":{},"body":{"license.html":{}}}],["redraw",{"_index":872,"title":{},"body":{"components/ChartComponent.html":{}}}],["reduce",{"_index":3740,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["refactor",{"_index":1738,"title":{},"body":{"classes/Grid.html":{}}}],["refactoring",{"_index":1736,"title":{},"body":{"classes/Grid.html":{}}}],["reference",{"_index":4415,"title":{},"body":{"classes/UtilityService.html":{},"index.html":{}}}],["referenced",{"_index":2283,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{},"miscellaneous/variables.html":{}}}],["refresh",{"_index":4922,"title":{},"body":{"miscellaneous/variables.html":{}}}],["refresh_event",{"_index":891,"title":{},"body":{"components/ChartComponent.html":{},"miscellaneous/variables.html":{}}}],["regarding",{"_index":2018,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"license.html":{}}}],["registering",{"_index":817,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["registers",{"_index":851,"title":{},"body":{"injectables/ChartCollectionService.html":{}}}],["regularshapes",{"_index":4905,"title":{},"body":{"miscellaneous/variables.html":{}}}],["related",{"_index":3524,"title":{},"body":{"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{}}}],["relation",{"_index":2013,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["relative",{"_index":1514,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/InteractionLabelPlugin.html":{},"classes/TextColorProvider.html":{}}}],["relativeposition",{"_index":1518,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["relativeposition.x",{"_index":1522,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["relativeposition.y",{"_index":1524,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["release",{"_index":4565,"title":{},"body":{"index.html":{}}}],["relying",{"_index":650,"title":{},"body":{"classes/Chart.html":{}}}],["remain",{"_index":4659,"title":{},"body":{"license.html":{}}}],["remainder",{"_index":4523,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["removal",{"_index":2836,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["remove",{"_index":2971,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{}}}],["removemarker",{"_index":3511,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["removemarker(target",{"_index":3527,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["removeplugin",{"_index":540,"title":{},"body":{"classes/Chart.html":{},"interfaces/IChart.html":{}}}],["removeplugin(classref",{"_index":571,"title":{},"body":{"classes/Chart.html":{},"interfaces/IChart.html":{}}}],["removeplugin?(classref",{"_index":1994,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["removeplugins",{"_index":541,"title":{},"body":{"classes/Chart.html":{}}}],["removeplugins(...classrefs",{"_index":573,"title":{},"body":{"classes/Chart.html":{}}}],["rename",{"_index":841,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["render",{"_index":647,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"index.html":{}}}],["render_area_height_correction",{"_index":1700,"title":{},"body":{"classes/Grid.html":{}}}],["render_area_width_correction",{"_index":1702,"title":{},"body":{"classes/Grid.html":{}}}],["rendercontainers",{"_index":3628,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["rendered",{"_index":1654,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["renderengine",{"_index":566,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["renderengine(lasagna",{"_index":694,"title":{},"body":{"classes/Chart.html":{}}}],["renderengineplugin",{"_index":605,"title":{},"body":{"classes/Chart.html":{}}}],["renderengineplugin.chart",{"_index":654,"title":{},"body":{"classes/Chart.html":{}}}],["renderer",{"_index":303,"title":{"classes/Renderer.html":{}},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartDonutContentPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["renderer#draw",{"_index":2840,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/NoopRenderer.html":{},"classes/SideIndicatorAccessors.html":{}}}],["renderer#getdatapointposition",{"_index":3631,"title":{},"body":{"classes/NoopRenderer.html":{}}}],["renderer#getrequiredlayers",{"_index":2866,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/NoopRenderer.html":{},"classes/SideIndicatorAccessors.html":{}}}],["renderer#highlightdatapoint",{"_index":3630,"title":{},"body":{"classes/NoopRenderer.html":{}}}],["renderer's",{"_index":4181,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["renderer.barcontainerclass",{"_index":392,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["renderer.config.strokewidth",{"_index":3432,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["renderer.default_config",{"_index":3859,"title":{},"body":{"classes/Renderer.html":{}}}],["renderer.drawline(renderseries",{"_index":3443,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["renderer.getcontainerstatestyles",{"_index":387,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["renderer.getdatapoint(renderseries",{"_index":401,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["renderer.getdatapointposition(renderseries.dataseries",{"_index":3447,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["renderer.getouterradius(rscale.range",{"_index":3801,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["renderer.ts",{"_index":2816,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["renderer.ts:16",{"_index":3590,"title":{},"body":{"classes/NoopRenderer.html":{}}}],["renderer.ts:20",{"_index":3595,"title":{},"body":{"classes/NoopRenderer.html":{}}}],["renderer.ts:26",{"_index":3593,"title":{},"body":{"classes/NoopRenderer.html":{}}}],["renderer.ts:31",{"_index":3592,"title":{},"body":{"classes/NoopRenderer.html":{}}}],["renderer.ts:49",{"_index":3981,"title":{},"body":{"classes/SideIndicatorAccessors.html":{}}}],["renderer.ts:50",{"_index":3980,"title":{},"body":{"classes/SideIndicatorAccessors.html":{}}}],["renderer.ts:7",{"_index":4492,"title":{},"body":{"classes/XYRenderer.html":{}}}],["renderer:107",{"_index":3627,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["renderer:116",{"_index":3625,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["renderer:128",{"_index":3618,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["renderer:152",{"_index":3614,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["renderer:169",{"_index":3602,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["renderer:189",{"_index":3620,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["renderer:22",{"_index":3587,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["renderer:39",{"_index":3586,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["renderer:44",{"_index":3589,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["renderer:52",{"_index":3596,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["renderer:62",{"_index":3612,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["renderer:73",{"_index":3606,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["renderer:84",{"_index":3623,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["renderer:94",{"_index":3588,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["rendererconfig",{"_index":4164,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["renderers",{"_index":651,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineAccessors.html":{},"classes/MarkerUtils.html":{},"classes/Renderer.html":{},"classes/XYAccessors.html":{}}}],["renderers/area/area",{"_index":4220,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["renderers/bar/accessors/status",{"_index":4221,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["renderers/bar/bar",{"_index":4222,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["renderers/bar/types",{"_index":480,"title":{},"body":{"classes/BarTooltipsPlugin.html":{}}}],["renderers/constants",{"_index":4223,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["renderers/line/line",{"_index":4224,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["renderers/radial/radial",{"_index":971,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["renderers/side",{"_index":4225,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["renderers/types",{"_index":766,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/Renderer.html":{},"classes/SparkChartAssist.html":{},"classes/ZoomPlugin.html":{}}}],["renderersubject",{"_index":300,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYRenderer.html":{}}}],["renderersubject.next",{"_index":398,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["rendering",{"_index":1592,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{},"classes/Grid.html":{},"classes/RadialTooltipsPlugin.html":{},"injectables/ThresholdsService.html":{}}}],["rendering_area_clip_path_prefix",{"_index":1638,"title":{},"body":{"classes/Grid.html":{}}}],["rendering_area_layer_name",{"_index":1639,"title":{},"body":{"classes/Grid.html":{}}}],["renderingarea",{"_index":1709,"title":{},"body":{"classes/Grid.html":{}}}],["renderingareaattrs",{"_index":1797,"title":{},"body":{"classes/Grid.html":{}}}],["renderingareaclippath",{"_index":1708,"title":{},"body":{"classes/Grid.html":{}}}],["renderingareaclippathattrs",{"_index":1792,"title":{},"body":{"classes/Grid.html":{}}}],["renderingareaclippathattrs[\"y",{"_index":1796,"title":{},"body":{"classes/Grid.html":{}}}],["renderingareacontainer",{"_index":1806,"title":{},"body":{"classes/Grid.html":{}}}],["renderingareacontainer.append(\"rect",{"_index":1808,"title":{},"body":{"classes/Grid.html":{}}}],["renderlayername",{"_index":332,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/enumerations.html":{}}}],["renderlayername.unclippeddata",{"_index":2835,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["rendermarkersvg(svg",{"_index":1037,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["renderseries",{"_index":298,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["renderseries.containers[renderlayername.data",{"_index":385,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["renderseries.containers[renderlayername.unclippeddata",{"_index":2842,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["renderseries.dataseries",{"_index":2843,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/SideIndicatorAccessors.html":{}}}],["renderseries.dataseries.accessors",{"_index":2845,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["renderseries.dataseries.data",{"_index":2851,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["renderseries.dataseries.data[0",{"_index":3438,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["renderseries.dataseries.data[datapointindex",{"_index":402,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["renderseries.dataseries.id",{"_index":3436,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["renderseries.scales",{"_index":2844,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/SideIndicatorAccessors.html":{}}}],["renderstate",{"_index":333,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/SparkChartAssist.html":{},"classes/XYRenderer.html":{},"miscellaneous/enumerations.html":{}}}],["renderstate.deemphasized",{"_index":395,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/LegendInteractionAssist.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["renderstate.default",{"_index":394,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["renderstate.emphasisstate",{"_index":3329,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["renderstate.emphasized",{"_index":396,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"interfaces/IScaleSVGElement.html":{},"classes/LegendInteractionAssist.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["renderstate.hidden",{"_index":806,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ITooltipPosition.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["renderstate.visible",{"_index":3310,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["renderstatedata",{"_index":579,"title":{},"body":{"classes/Chart.html":{},"interfaces/IChart.html":{}}}],["renderstates",{"_index":2411,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["renderstatesindex",{"_index":3136,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["repeated",{"_index":2776,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["replaced",{"_index":3260,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"license.html":{}}}],["replacement",{"_index":4374,"title":{},"body":{"classes/UtilityService.html":{}}}],["report",{"_index":2910,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["represent",{"_index":3607,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["representation",{"_index":3598,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{}}}],["representatives",{"_index":4676,"title":{},"body":{"license.html":{}}}],["represented",{"_index":792,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"injectables/ThresholdsService.html":{}}}],["representing",{"_index":767,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"injectables/ThresholdsService.html":{}}}],["represents",{"_index":813,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/MarkerUtils.html":{},"injectables/ThresholdsService.html":{}}}],["reproduce",{"_index":4703,"title":{},"body":{"license.html":{}}}],["reproducing",{"_index":4789,"title":{},"body":{"license.html":{}}}],["reproduction",{"_index":4598,"title":{},"body":{"license.html":{}}}],["request",{"_index":1250,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["require",{"_index":1973,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/variables.html":{}}}],["require.context",{"_index":4999,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required",{"_index":1983,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineAccessors.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{},"license.html":{}}}],["requirements",{"_index":3781,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["requires",{"_index":4442,"title":{},"body":{"classes/UtilityService.html":{}}}],["reset",{"_index":2029,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/MappedValueProvider.html":{},"modules/NuiChartsModule.html":{},"classes/ProcessedColorProvider.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/TextColorProvider.html":{},"overview.html":{}}}],["resets",{"_index":3243,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["resetseries",{"_index":3139,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["resetvisibleseries",{"_index":798,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/LegendInteractionAssist.html":{},"miscellaneous/enumerations.html":{}}}],["resize",{"_index":887,"title":{},"body":{"components/ChartComponent.html":{},"dependencies.html":{}}}],["resized",{"_index":2622,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["resizehandler",{"_index":894,"title":{},"body":{"components/ChartComponent.html":{}}}],["resizeobserver",{"_index":873,"title":{},"body":{"components/ChartComponent.html":{}}}],["respond",{"_index":1203,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["responsibility",{"_index":4845,"title":{},"body":{"license.html":{}}}],["responsible",{"_index":4804,"title":{},"body":{"license.html":{}}}],["restore",{"_index":2625,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/LegendInteractionAssist.html":{}}}],["result",{"_index":78,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"components/BasicLegendTileComponent.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"modules/NuiChartsModule.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"additional-documentation/layout.html":{},"additional-documentation/chart-types.html":{},"additional-documentation/chart-types/line.html":{},"additional-documentation/chart-types/bar.html":{},"additional-documentation/chart-types/bar/bucketed-bar.html":{},"additional-documentation/chart-types/bar/status.html":{},"additional-documentation/chart-types/bar/waterfall.html":{},"additional-documentation/chart-types/area.html":{},"additional-documentation/chart-types/pie-and-donut.html":{},"additional-documentation/chart-types/spark.html":{},"additional-documentation/plugins.html":{},"additional-documentation/plugins/tooltips.html":{},"additional-documentation/plugins/popovers.html":{},"additional-documentation/thresholds.html":{},"additional-documentation/timeframe-selection.html":{},"additional-documentation/advanced-usage.html":{},"additional-documentation/advanced-usage/chart.html":{},"additional-documentation/advanced-usage/legend.html":{},"additional-documentation/advanced-usage/input-structure.html":{},"additional-documentation/advanced-usage/input-structure/data.html":{},"additional-documentation/advanced-usage/input-structure/colors.html":{},"additional-documentation/advanced-usage/input-structure/markers.html":{},"additional-documentation/advanced-usage/events.html":{},"additional-documentation/advanced-usage/grid.html":{},"additional-documentation/advanced-usage/scales.html":{},"additional-documentation/advanced-usage/scales/domains.html":{},"additional-documentation/advanced-usage/scales/formatters.html":{}}}],["result[next",{"_index":5025,"title":{},"body":{"miscellaneous/variables.html":{}}}],["result[next.id",{"_index":2999,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/UtilityService.html":{},"classes/ZoomPlugin.html":{}}}],["resulting",{"_index":2044,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/PathMarker.html":{},"license.html":{}}}],["results",{"_index":80,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"components/BasicLegendTileComponent.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"modules/NuiChartsModule.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"additional-documentation/layout.html":{},"additional-documentation/chart-types.html":{},"additional-documentation/chart-types/line.html":{},"additional-documentation/chart-types/bar.html":{},"additional-documentation/chart-types/bar/bucketed-bar.html":{},"additional-documentation/chart-types/bar/status.html":{},"additional-documentation/chart-types/bar/waterfall.html":{},"additional-documentation/chart-types/area.html":{},"additional-documentation/chart-types/pie-and-donut.html":{},"additional-documentation/chart-types/spark.html":{},"additional-documentation/plugins.html":{},"additional-documentation/plugins/tooltips.html":{},"additional-documentation/plugins/popovers.html":{},"additional-documentation/thresholds.html":{},"additional-documentation/timeframe-selection.html":{},"additional-documentation/advanced-usage.html":{},"additional-documentation/advanced-usage/chart.html":{},"additional-documentation/advanced-usage/legend.html":{},"additional-documentation/advanced-usage/input-structure.html":{},"additional-documentation/advanced-usage/input-structure/data.html":{},"additional-documentation/advanced-usage/input-structure/colors.html":{},"additional-documentation/advanced-usage/input-structure/markers.html":{},"additional-documentation/advanced-usage/events.html":{},"additional-documentation/advanced-usage/grid.html":{},"additional-documentation/advanced-usage/scales.html":{},"additional-documentation/advanced-usage/scales/domains.html":{},"additional-documentation/advanced-usage/scales/formatters.html":{}}}],["resume",{"_index":3262,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["retain",{"_index":4747,"title":{},"body":{"license.html":{}}}],["retrieve",{"_index":246,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["retrieves",{"_index":3170,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["return",{"_index":196,"title":{},"body":{"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"injectables/ChartCollectionService.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPalette.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISpark.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":253,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["returning",{"_index":340,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["returns",{"_index":179,"title":{},"body":{"classes/AxisConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"injectables/ChartCollectionService.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SparkChartAssist.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["reused",{"_index":715,"title":{},"body":{"classes/Chart.html":{}}}],["reverse",{"_index":2190,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{}}}],["reversed",{"_index":2192,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{}}}],["reversed(reversed",{"_index":2193,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{}}}],["review",{"_index":129,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/GridConfig.html":{},"classes/XYGridConfig.html":{}}}],["revisions",{"_index":4655,"title":{},"body":{"license.html":{}}}],["rgb",{"_index":1076,"title":{},"body":{"classes/ChartPalette.html":{},"classes/TextColorProvider.html":{}}}],["rgb(color",{"_index":1103,"title":{},"body":{"classes/ChartPalette.html":{},"classes/TextColorProvider.html":{}}}],["rgb(colordefinitions.dark",{"_index":4117,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["rgb(colordefinitions.light",{"_index":4115,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["rgbcolor",{"_index":1102,"title":{},"body":{"classes/ChartPalette.html":{},"classes/TextColorProvider.html":{}}}],["rgbcolor.b",{"_index":4143,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["rgbcolor.g",{"_index":4141,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["rgbcolor.opacity",{"_index":1104,"title":{},"body":{"classes/ChartPalette.html":{}}}],["rgbcolor.r",{"_index":4138,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["rgbcolor.tostring",{"_index":1106,"title":{},"body":{"classes/ChartPalette.html":{}}}],["rgbinput",{"_index":4112,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["rich",{"_index":523,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["richlegendtilecomponent",{"_index":522,"title":{"components/RichLegendTileComponent.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{},"overview.html":{}}}],["rid",{"_index":3444,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["right",{"_index":114,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/UtilityService.html":{},"classes/XYGridConfig.html":{},"classes/ZoomPlugin.html":{}}}],["rights",{"_index":4842,"title":{},"body":{"license.html":{}}}],["rightscaleid",{"_index":2374,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["rightscaleid(id",{"_index":2376,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["rightscalelabelx",{"_index":2514,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["risks",{"_index":4808,"title":{},"body":{"license.html":{}}}],["round",{"_index":2123,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["royalty",{"_index":4700,"title":{},"body":{"license.html":{}}}],["rs.series",{"_index":2416,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["rs.state",{"_index":2415,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["rscale",{"_index":3797,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["rsrgb",{"_index":4137,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["rule",{"_index":5050,"title":{},"body":{"miscellaneous/variables.html":{}}}],["running",{"_index":1387,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["runs",{"_index":1370,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["rxjs",{"_index":321,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Chart.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/ZoomPlugin.html":{}}}],["rxjs/operators",{"_index":589,"title":{},"body":{"classes/Chart.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/ZoomPlugin.html":{}}}],["s",{"_index":59,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IScaleSVGElement.html":{},"classes/LegendInteractionAssist.html":{},"classes/RadialTooltipsPlugin.html":{},"injectables/ThresholdsService.html":{},"classes/VerticalBarAccessors.html":{},"miscellaneous/variables.html":{}}}],["s.id",{"_index":3301,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["s.id.indexof(\"__",{"_index":3313,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["s.id.substring(0",{"_index":3315,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["s.renderstate",{"_index":3304,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["s.showinlegend",{"_index":3236,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["s?.scales[\"y",{"_index":2421,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["same",{"_index":822,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"components/ChartMarkerComponent.html":{},"classes/Grid.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{},"injectables/ThresholdsService.html":{},"license.html":{}}}],["sample",{"_index":2603,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["scale",{"_index":284,"title":{"classes/Scale.html":{}},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartAssistRenderStateData.html":{},"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IElementPosition.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/LinearScale.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["scale's",{"_index":2170,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{}}}],["scale((node",{"_index":2766,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["scale.__domaincalculatedwithticks",{"_index":2391,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["scale.bandwidth",{"_index":2195,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["scale.domaincalculator",{"_index":2389,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["scale.formatters[\"tick",{"_index":2555,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["scale.formatters[\"tick\"](datum",{"_index":2556,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["scale.formatters[fallback_formatter",{"_index":3046,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["scale.formatters[this.formattername",{"_index":3045,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["scale.id",{"_index":2561,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["scale.innerscale",{"_index":2199,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["scale.iscontinuous",{"_index":2562,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["scale.range()[1",{"_index":2769,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["scale.ts",{"_index":3449,"title":{},"body":{"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/TimeScale.html":{}}}],["scale.ts:10",{"_index":4351,"title":{},"body":{"classes/TimeScale.html":{}}}],["scale.ts:12",{"_index":3636,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:17",{"_index":3641,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:19",{"_index":3459,"title":{},"body":{"classes/LinearScale.html":{}}}],["scale.ts:22",{"_index":3651,"title":{},"body":{"classes/NoopScale.html":{},"classes/TimeScale.html":{}}}],["scale.ts:23",{"_index":3460,"title":{},"body":{"classes/LinearScale.html":{}}}],["scale.ts:26",{"_index":4353,"title":{},"body":{"classes/TimeScale.html":{}}}],["scale.ts:27",{"_index":3461,"title":{},"body":{"classes/LinearScale.html":{},"classes/NoopScale.html":{}}}],["scale.ts:28",{"_index":3644,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:29",{"_index":3645,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:31",{"_index":3462,"title":{},"body":{"classes/LinearScale.html":{}}}],["scale.ts:32",{"_index":4354,"title":{},"body":{"classes/TimeScale.html":{}}}],["scale.ts:34",{"_index":3637,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:35",{"_index":3638,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:36",{"_index":3639,"title":{},"body":{"classes/NoopScale.html":{},"classes/TimeScale.html":{}}}],["scale.ts:41",{"_index":3640,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:45",{"_index":3642,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:49",{"_index":3643,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:53",{"_index":3646,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:58",{"_index":3647,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:59",{"_index":3648,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:6",{"_index":3635,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:60",{"_index":3649,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:7",{"_index":3634,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:8",{"_index":3454,"title":{},"body":{"classes/LinearScale.html":{},"classes/NoopScale.html":{}}}],["scale:10",{"_index":3457,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:11",{"_index":3455,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:12",{"_index":3456,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:13",{"_index":3458,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:31",{"_index":3463,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:33",{"_index":3468,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:35",{"_index":3469,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:43",{"_index":3471,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:44",{"_index":3472,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:45",{"_index":3473,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:55",{"_index":3464,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:56",{"_index":3465,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:57",{"_index":3466,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:67",{"_index":3467,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:74",{"_index":3470,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:78",{"_index":3474,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:83",{"_index":3475,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:84",{"_index":3476,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:85",{"_index":3477,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale?.id",{"_index":2383,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["scaleid",{"_index":2027,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IElementPosition.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/ScalesIndex.html":{},"miscellaneous/variables.html":{}}}],["scalekey",{"_index":283,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISpark.html":{},"classes/LegendInteractionAssist.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/SparkChartAssist.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["scalelinear",{"_index":1905,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LinearScale.html":{}}}],["scalelinear](https://d3indepth.com/scales/#scalelinear",{"_index":3478,"title":{},"body":{"classes/LinearScale.html":{}}}],["scalename",{"_index":3601,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["scales",{"_index":289,"title":{"additional-documentation/advanced-usage/scales.html":{}},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"additional-documentation/advanced-usage.html":{}}}],["scales(scales",{"_index":1720,"title":{},"body":{"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{}}}],["scales.reduce(callbackfn",{"_index":4472,"title":{},"body":{"classes/UtilityService.html":{}}}],["scales.x.convert(dataseries.accessors.data.x(point",{"_index":4498,"title":{},"body":{"classes/XYRenderer.html":{}}}],["scales.y.convert(dataseries.accessors.data.y(point",{"_index":4499,"title":{},"body":{"classes/XYRenderer.html":{}}}],["scales.y.convert(end",{"_index":2861,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["scales.y.convert(start",{"_index":2864,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["scales.y.range()[0",{"_index":2862,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["scales/helpers/invert",{"_index":4399,"title":{},"body":{"classes/UtilityService.html":{}}}],["scales/types",{"_index":1910,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/Renderer.html":{},"classes/UtilityService.html":{}}}],["scalesindex",{"_index":1685,"title":{"interfaces/ScalesIndex.html":{}},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["scaletime",{"_index":4350,"title":{},"body":{"classes/TimeScale.html":{}}}],["scaletime](https://d3indepth.com/scales/#scaletime",{"_index":4357,"title":{},"body":{"classes/TimeScale.html":{}}}],["scaling",{"_index":1695,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/PathMarker.html":{}}}],["scenario",{"_index":2785,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["screen",{"_index":1517,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["scrollable",{"_index":2015,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["se",{"_index":3785,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["search",{"_index":4381,"title":{},"body":{"classes/UtilityService.html":{}}}],["searching",{"_index":286,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["second",{"_index":2800,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"miscellaneous/variables.html":{}}}],["secondary",{"_index":3353,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["section",{"_index":3828,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"license.html":{}}}],["sectionindex",{"_index":3822,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["sections",{"_index":3829,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"license.html":{}}}],["see",{"_index":134,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IXYScales.html":{},"classes/LineAccessors.html":{},"classes/LinearScale.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/TimeScale.html":{},"classes/XYGridConfig.html":{},"index.html":{},"license.html":{}}}],["select",{"_index":312,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/Chart.html":{},"components/ChartTooltipsComponent.html":{},"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITooltipNode.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["select(\"rect",{"_index":3073,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["select(elementstofilter[0]).text",{"_index":2668,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["select(group",{"_index":2541,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["select(group).classed(\"pointer",{"_index":2621,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["select(group).classed(\"sw",{"_index":2571,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["select(group).classed(\"tick",{"_index":2536,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["select(next).text",{"_index":2666,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["select(this).attrs(barstylesfn(renderstate",{"_index":397,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["select(this).classed(\"sw",{"_index":2530,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["select(this.borders.bottom",{"_index":1833,"title":{},"body":{"classes/Grid.html":{}}}],["select(this.borders.left",{"_index":1854,"title":{},"body":{"classes/Grid.html":{}}}],["select(this.borders.right",{"_index":1851,"title":{},"body":{"classes/Grid.html":{}}}],["select(this.borders.top",{"_index":1846,"title":{},"body":{"classes/Grid.html":{}}}],["select(this.element",{"_index":636,"title":{},"body":{"classes/Chart.html":{}}}],["select(tooltip.getoverlayelement",{"_index":1422,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["select_data_point",{"_index":4923,"title":{},"body":{"miscellaneous/variables.html":{}}}],["select_data_point_event",{"_index":4906,"title":{},"body":{"miscellaneous/variables.html":{}}}],["selectable",{"_index":2997,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["selectall(\".tick",{"_index":2463,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["selectallaxislabels(axisgroup",{"_index":2630,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["selected",{"_index":3357,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["selecteddatapointidx",{"_index":388,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["selecteddatapointidxfn",{"_index":280,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["selecteddatpointidxfn",{"_index":281,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["selection",{"_index":314,"title":{"additional-documentation/timeframe-selection.html":{}},"body":{"classes/BarHighlightStrategy.html":{},"classes/Chart.html":{},"components/ChartTooltipsComponent.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"modules/NuiChartsModule.html":{},"classes/Renderer.html":{},"classes/ZoomPlugin.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["selection/issues/81",{"_index":2915,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["selection[0",{"_index":2988,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["selection[1",{"_index":2989,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["selector",{"_index":492,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{},"classes/UtilityService.html":{}}}],["selector(haystack[mid",{"_index":4459,"title":{},"body":{"classes/UtilityService.html":{}}}],["sell",{"_index":4711,"title":{},"body":{"license.html":{}}}],["semantic",{"_index":4524,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["sense",{"_index":2644,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["sent",{"_index":4675,"title":{},"body":{"license.html":{}}}],["separable",{"_index":4660,"title":{},"body":{"license.html":{}}}],["separate",{"_index":4779,"title":{},"body":{"license.html":{}}}],["separated",{"_index":816,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["separatorindex",{"_index":3312,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["sequence",{"_index":4932,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sequential",{"_index":1082,"title":{},"body":{"classes/ChartPalette.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{}}}],["sequentialchartmarkerprovider",{"_index":3961,"title":{"classes/SequentialChartMarkerProvider.html":{}},"body":{"classes/SequentialChartMarkerProvider.html":{},"classes/SparkChartAssist.html":{}}}],["sequentialchartmarkerprovider(chart_markers",{"_index":3999,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["sequentialcolorprovider",{"_index":1081,"title":{"classes/SequentialColorProvider.html":{}},"body":{"classes/ChartPalette.html":{},"classes/SequentialColorProvider.html":{}}}],["sequentialvalueprovider",{"_index":3963,"title":{"classes/SequentialValueProvider.html":{}},"body":{"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{}}}],["sequentialvalueprovider:16",{"_index":3965,"title":{},"body":{"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{}}}],["sequentialvalueprovider:26",{"_index":3966,"title":{},"body":{"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{}}}],["series",{"_index":13,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartAssistRenderStateData.html":{},"components/ChartTooltipsComponent.html":{},"classes/DataSeries.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISpark.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MappedValueProvider.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYRenderer.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["series'},{'name",{"_index":521,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["series).valueof",{"_index":372,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["series.accessors.data",{"_index":353,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["series.component",{"_index":3684,"title":{},"body":{"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{}}}],["series.component.html",{"_index":3335,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts",{"_index":3334,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:100",{"_index":3362,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:103",{"_index":3360,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:109",{"_index":3347,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:128",{"_index":3363,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:137",{"_index":3364,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:144",{"_index":3365,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:29",{"_index":3348,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:39",{"_index":3355,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:48",{"_index":3369,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:55",{"_index":3356,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:60",{"_index":3359,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:65",{"_index":3350,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:70",{"_index":3352,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:75",{"_index":3354,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:80",{"_index":3349,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:86",{"_index":3358,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:89",{"_index":3372,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:96",{"_index":3361,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.data",{"_index":360,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/LegendInteractionAssist.html":{}}}],["series.data.length",{"_index":375,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["series.id",{"_index":240,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["series.name",{"_index":239,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["series.renderstate",{"_index":3307,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["series.state",{"_index":1480,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["series.ts",{"_index":1526,"title":{},"body":{"classes/DataSeries.html":{}}}],["series.ts:10",{"_index":1530,"title":{},"body":{"classes/DataSeries.html":{}}}],["series.ts:11",{"_index":1528,"title":{},"body":{"classes/DataSeries.html":{}}}],["series.ts:5",{"_index":1531,"title":{},"body":{"classes/DataSeries.html":{}}}],["series.ts:6",{"_index":1529,"title":{},"body":{"classes/DataSeries.html":{}}}],["series/legend",{"_index":3333,"title":{},"body":{"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{}}}],["series_id_suffix",{"_index":4149,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["series_state_change",{"_index":4924,"title":{},"body":{"miscellaneous/variables.html":{}}}],["series_state_change_event",{"_index":591,"title":{},"body":{"classes/Chart.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITooltipPosition.html":{},"miscellaneous/variables.html":{}}}],["seriesaccessor",{"_index":37,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/DataSeries.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineAccessors.html":{},"classes/RadialAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"miscellaneous/typealiases.html":{}}}],["seriescolor",{"_index":3108,"title":{},"body":{"components/LegendComponent.html":{}}}],["seriesgroups",{"_index":3295,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["seriesgroups[parentid",{"_index":3316,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["seriesgroups[parentid].push(s.id",{"_index":3317,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["serieshasadditionalcontent",{"_index":3891,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["serieshighlight",{"_index":3212,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["seriesicon",{"_index":3109,"title":{},"body":{"components/LegendComponent.html":{}}}],["seriesid",{"_index":238,"title":{},"body":{"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/ChartAssistRenderStateData.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"injectables/ThresholdsService.html":{}}}],["seriesindex",{"_index":3296,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["seriesprocessor",{"_index":3192,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["seriesprocessor(series",{"_index":3227,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["seriesrenderstate",{"_index":3341,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["seriesrenderstate(renderstate",{"_index":3383,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["seriesscale",{"_index":5021,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seriesscale.iscontinuous",{"_index":5023,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seriesset",{"_index":583,"title":{},"body":{"classes/Chart.html":{},"interfaces/IChart.html":{},"classes/LegendInteractionAssist.html":{}}}],["seriesset.filter(s",{"_index":3235,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["seriesstatessubject",{"_index":611,"title":{},"body":{"classes/Chart.html":{}}}],["seriestrackbyfn(index",{"_index":3251,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["seriesunitlabel",{"_index":3110,"title":{},"body":{"components/LegendComponent.html":{}}}],["seriesvisibilitymap",{"_index":1467,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["serve",{"_index":1612,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["service",{"_index":850,"title":{},"body":{"injectables/ChartCollectionService.html":{},"classes/Grid.html":{},"modules/NuiChartsModule.html":{},"injectables/ThresholdsService.html":{},"license.html":{}}}],["service.ts",{"_index":4145,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["service.ts:205",{"_index":4204,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["service.ts:229",{"_index":4200,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["service.ts:261",{"_index":4196,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["service.ts:27",{"_index":4160,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["service.ts:295",{"_index":4186,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["service.ts:363",{"_index":4191,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["service.ts:374",{"_index":4193,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["service.ts:40",{"_index":4209,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["service.ts:76",{"_index":4165,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["set",{"_index":198,"title":{},"body":{"classes/AxisConfig.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"components/LegendSeriesComponent.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["set_domain",{"_index":4925,"title":{},"body":{"miscellaneous/variables.html":{}}}],["set_domain_event",{"_index":2903,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["setactive(active",{"_index":3367,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["setapproximateticks(ticks",{"_index":180,"title":{},"body":{"classes/AxisConfig.html":{}}}],["setattributes(attrs",{"_index":3707,"title":{},"body":{"classes/PathMarker.html":{}}}],["setcolor",{"_index":2218,"title":{},"body":{"interfaces/IChartMarker.html":{},"classes/PathMarker.html":{},"classes/SvgMarker.html":{}}}],["setcolor(color",{"_index":1993,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/PathMarker.html":{},"classes/SvgMarker.html":{}}}],["setdatapointstate",{"_index":3584,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["setdatapointstate(target",{"_index":3624,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["setgroupstate",{"_index":3140,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["setgroupstate(groupid",{"_index":3151,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["setgroupvisibility",{"_index":3141,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["setgroupvisibility(groupid",{"_index":3154,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["setinteractive(interactive",{"_index":3370,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["setrenderstate",{"_index":3989,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["setrenderstate(_seriesid",{"_index":4008,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["setrenderstate(seriesid",{"_index":3328,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["sets",{"_index":2037,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"components/LegendSeriesComponent.html":{},"interfaces/ScalesIndex.html":{}}}],["setseriesrenderstate(renderstate",{"_index":3373,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["setseriesstate",{"_index":3585,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["setseriesstate(rendercontainers",{"_index":3626,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["setseriesstates",{"_index":542,"title":{},"body":{"classes/Chart.html":{},"interfaces/IChart.html":{}}}],["setseriesstates(renderstatedata",{"_index":576,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["setter",{"_index":2080,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["settimeout",{"_index":1043,"title":{},"body":{"components/ChartMarkerComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITooltipNode.html":{}}}],["setting",{"_index":2042,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"classes/SideIndicatorAccessors.html":{}}}],["settings",{"_index":3169,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["setvisibility(seriesid",{"_index":3332,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["seven",{"_index":4941,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shade",{"_index":4945,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shall",{"_index":4600,"title":{},"body":{"license.html":{}}}],["shape",{"_index":1598,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["shapes",{"_index":4990,"title":{},"body":{"miscellaneous/variables.html":{}}}],["share",{"_index":823,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["shares",{"_index":4628,"title":{},"body":{"license.html":{}}}],["shifted",{"_index":3811,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["shifting",{"_index":152,"title":{},"body":{"classes/AreaGridConfig.html":{}}}],["short",{"_index":1911,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/typealiases.html":{}}}],["shorthand",{"_index":2186,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["show",{"_index":463,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/LegendInteractionAssist.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["showbottomaxis",{"_index":420,"title":{},"body":{"classes/BarStatusGridConfig.html":{},"classes/SparkChartAssist.html":{}}}],["showing",{"_index":1205,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["showinlegend",{"_index":1990,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"injectables/ThresholdsService.html":{}}}],["shows",{"_index":1505,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["showsubject",{"_index":442,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["showtopborder",{"_index":3987,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["side",{"_index":1701,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/MarkerUtils.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["side_indicators_layer",{"_index":2838,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["sideindicator",{"_index":4344,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sideindicatoraccessors",{"_index":2828,"title":{"classes/SideIndicatorAccessors.html":{}},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["sideindicatoraccessors.series",{"_index":4339,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sideindicatorrenderer",{"_index":2832,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["sideindicatorrenderer(rendererconfig",{"_index":4337,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sideindicators",{"_index":4336,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sideindicators.push(sideindicator",{"_index":4347,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sides",{"_index":2032,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["signature",{"_index":1915,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/ScalesIndex.html":{},"miscellaneous/typealiases.html":{}}}],["similar",{"_index":1735,"title":{},"body":{"classes/Grid.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["simple",{"_index":4560,"title":{},"body":{"index.html":{}}}],["simplechanges",{"_index":884,"title":{},"body":{"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/LegendComponent.html":{}}}],["simplezones",{"_index":4203,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["simplezones.map((z",{"_index":4283,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["simplified",{"_index":2871,"title":{},"body":{"interfaces/ISimpleThresholdZone.html":{},"injectables/ThresholdsService.html":{},"interfaces/ZoneCross.html":{}}}],["simulation",{"_index":1316,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["simulation.on(\"tick",{"_index":1419,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["simulationnodedatum",{"_index":1317,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["single",{"_index":2021,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/variables.html":{}}}],["six",{"_index":4940,"title":{},"body":{"miscellaneous/variables.html":{}}}],["size",{"_index":962,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{},"classes/MarkerUtils.html":{}}}],["sizes",{"_index":2035,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["slice",{"_index":3819,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["small",{"_index":4531,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["smaller",{"_index":2065,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"injectables/ThresholdsService.html":{}}}],["smallestdiff",{"_index":2705,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["software",{"_index":4637,"title":{},"body":{"license.html":{}}}],["solarwinds",{"_index":4868,"title":{},"body":{"license.html":{}}}],["sole",{"_index":4844,"title":{},"body":{"license.html":{}}}],["solely",{"_index":4803,"title":{},"body":{"license.html":{}}}],["solutions",{"_index":4540,"title":{},"body":{"index.html":{}}}],["solve",{"_index":429,"title":{},"body":{"classes/BarStatusGridConfig.html":{},"index.html":{}}}],["solves",{"_index":4201,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sortby",{"_index":4216,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sortby(breakpoints",{"_index":4276,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"components/BasicLegendTileComponent.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"modules/NuiChartsModule.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["sourceaccessors",{"_index":4254,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sourceprovider",{"_index":3744,"title":{},"body":{"classes/ProcessedColorProvider.html":{},"classes/TextColorProvider.html":{}}}],["sourceseries",{"_index":4177,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sourceseries.accessors.data",{"_index":4255,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sourceseries.accessors.data.x",{"_index":4238,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sourceseries.data.length",{"_index":4229,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sourceseries.data[0].__thresholds",{"_index":4230,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sourceseries.id",{"_index":4246,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sourceseries.scales",{"_index":4288,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["space",{"_index":1618,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["spark",{"_index":432,"title":{"additional-documentation/chart-types/spark.html":{}},"body":{"classes/BarStatusGridConfig.html":{},"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/SparkChartAssist.html":{},"index.html":{},"additional-documentation/chart-types.html":{}}}],["spark.chart",{"_index":4052,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["spark.chart.update(spark.chartseriesset",{"_index":4055,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["spark.id",{"_index":4049,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["sparkchartassist",{"_index":3982,"title":{"classes/SparkChartAssist.html":{}},"body":{"classes/SparkChartAssist.html":{}}}],["sparkchartgridconfig",{"_index":4031,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["sparkchartgridconfig(new",{"_index":4034,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["sparks",{"_index":3988,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["spec\\.ts",{"_index":5000,"title":{},"body":{"miscellaneous/variables.html":{}}}],["special",{"_index":3780,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"license.html":{}}}],["specific",{"_index":1972,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"license.html":{}}}],["specified",{"_index":785,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IScale.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"classes/LegendInteractionAssist.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{}}}],["specifying",{"_index":2875,"title":{},"body":{"interfaces/ISimpleThresholdZone.html":{},"injectables/ThresholdsService.html":{},"interfaces/ZoneCross.html":{},"miscellaneous/enumerations.html":{}}}],["square",{"_index":4959,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../automatic",{"_index":4900,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../bar",{"_index":4882,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../chart",{"_index":4907,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../constants.ts",{"_index":4517,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../datetime",{"_index":4893,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../grid.ts",{"_index":4881,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../palettes.ts",{"_index":4885,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../radial",{"_index":4890,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../test.ts",{"_index":4892,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../types.ts",{"_index":4515,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/chart",{"_index":809,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["src/chart/chart.component.ts",{"_index":864,"title":{},"body":{"components/ChartComponent.html":{}}}],["src/chart/chart.component.ts:33",{"_index":881,"title":{},"body":{"components/ChartComponent.html":{}}}],["src/chart/chart.component.ts:35",{"_index":883,"title":{},"body":{"components/ChartComponent.html":{}}}],["src/chart/chart.component.ts:37",{"_index":879,"title":{},"body":{"components/ChartComponent.html":{}}}],["src/chart/chart.component.ts:82",{"_index":882,"title":{},"body":{"components/ChartComponent.html":{}}}],["src/charts.module.ts",{"_index":3663,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["src/constants.ts",{"_index":4908,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/core/chart",{"_index":746,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{},"miscellaneous/enumerations.html":{}}}],["src/core/chart.ts",{"_index":528,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:152",{"_index":582,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:156",{"_index":584,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:160",{"_index":570,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:166",{"_index":560,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:176",{"_index":578,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:19",{"_index":548,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:20",{"_index":547,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:21",{"_index":551,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:22",{"_index":549,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:31",{"_index":545,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:41",{"_index":563,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:45",{"_index":561,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:49",{"_index":565,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:53",{"_index":564,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:57",{"_index":554,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:62",{"_index":572,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:70",{"_index":556,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:76",{"_index":574,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:82",{"_index":568,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:86",{"_index":559,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/common/chart",{"_index":1107,"title":{},"body":{"classes/ChartPlugin.html":{}}}],["src/core/common/data",{"_index":1525,"title":{},"body":{"classes/DataSeries.html":{}}}],["src/core/common/event",{"_index":1622,"title":{},"body":{"classes/EventBus.html":{}}}],["src/core/common/palette/chart",{"_index":1058,"title":{},"body":{"classes/ChartPalette.html":{}}}],["src/core/common/palette/mapped",{"_index":3488,"title":{},"body":{"classes/MappedValueProvider.html":{}}}],["src/core/common/palette/markers/path",{"_index":3691,"title":{},"body":{"classes/PathMarker.html":{}}}],["src/core/common/palette/markers/svg",{"_index":4085,"title":{},"body":{"classes/SvgMarker.html":{}}}],["src/core/common/palette/palettes.ts",{"_index":4927,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/core/common/palette/processed",{"_index":3735,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["src/core/common/palette/sequential",{"_index":3962,"title":{},"body":{"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{}}}],["src/core/common/palette/text",{"_index":4095,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["src/core/common/renderer.ts",{"_index":3834,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:107",{"_index":3851,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:116",{"_index":3850,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:128",{"_index":3847,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:152",{"_index":3846,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:169",{"_index":3843,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:189",{"_index":3848,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:22",{"_index":3839,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:37",{"_index":3837,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:39",{"_index":3838,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:44",{"_index":3841,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:52",{"_index":3842,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:62",{"_index":3845,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:73",{"_index":3844,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:84",{"_index":3849,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:94",{"_index":3840,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/scales/constants.ts",{"_index":4926,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/core/common/scales/domain",{"_index":5016,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/core/common/scales/formatters/datetime",{"_index":5001,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/core/common/scales/linear",{"_index":3448,"title":{},"body":{"classes/LinearScale.html":{}}}],["src/core/common/scales/noop",{"_index":3633,"title":{},"body":{"classes/NoopScale.html":{}}}],["src/core/common/scales/scale.ts",{"_index":3918,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:10",{"_index":3921,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:11",{"_index":3919,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:12",{"_index":3920,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:13",{"_index":3922,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:31",{"_index":3923,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:33",{"_index":3928,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:35",{"_index":3929,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:38",{"_index":3938,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:43",{"_index":3931,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:44",{"_index":3932,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:45",{"_index":3933,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:55",{"_index":3924,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:56",{"_index":3925,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:57",{"_index":3926,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:67",{"_index":3927,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:74",{"_index":3930,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:78",{"_index":3934,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:83",{"_index":3935,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:84",{"_index":3936,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:85",{"_index":3937,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/time",{"_index":4349,"title":{},"body":{"classes/TimeScale.html":{}}}],["src/core/common/scales/types.ts",{"_index":2149,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/core/common/scales/types.ts:103",{"_index":2316,"title":{},"body":{"interfaces/IScale.html":{}}}],["src/core/common/scales/types.ts:110",{"_index":2309,"title":{},"body":{"interfaces/IScale.html":{}}}],["src/core/common/scales/types.ts:117",{"_index":2310,"title":{},"body":{"interfaces/IScale.html":{}}}],["src/core/common/scales/types.ts:124",{"_index":2311,"title":{},"body":{"interfaces/IScale.html":{}}}],["src/core/common/scales/types.ts:129",{"_index":2317,"title":{},"body":{"interfaces/IScale.html":{}}}],["src/core/common/scales/types.ts:134",{"_index":2318,"title":{},"body":{"interfaces/IScale.html":{}}}],["src/core/common/scales/types.ts:141",{"_index":2319,"title":{},"body":{"interfaces/IScale.html":{}}}],["src/core/common/scales/types.ts:146",{"_index":2152,"title":{},"body":{"interfaces/IBandScale.html":{}}}],["src/core/common/scales/types.ts:16",{"_index":2245,"title":{},"body":{"interfaces/IFormatters.html":{}}}],["src/core/common/scales/types.ts:25",{"_index":3960,"title":{},"body":{"interfaces/ScalesIndex.html":{}}}],["src/core/common/scales/types.ts:66",{"_index":2313,"title":{},"body":{"interfaces/IScale.html":{}}}],["src/core/common/scales/types.ts:73",{"_index":2314,"title":{},"body":{"interfaces/IScale.html":{}}}],["src/core/common/scales/types.ts:81",{"_index":2308,"title":{},"body":{"interfaces/IScale.html":{}}}],["src/core/common/scales/types.ts:89",{"_index":2312,"title":{},"body":{"interfaces/IScale.html":{}}}],["src/core/common/scales/types.ts:96",{"_index":2315,"title":{},"body":{"interfaces/IScale.html":{}}}],["src/core/common/types.ts",{"_index":1894,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/core/common/types.ts:135",{"_index":2226,"title":{},"body":{"interfaces/IDataAccessors.html":{}}}],["src/core/common/types.ts:139",{"_index":2811,"title":{},"body":{"interfaces/ISeriesAccessors.html":{}}}],["src/core/common/types.ts:166",{"_index":2228,"title":{},"body":{"interfaces/IDataSeries.html":{}}}],["src/core/common/types.ts:193",{"_index":2219,"title":{},"body":{"interfaces/IChartMarker.html":{}}}],["src/core/common/types.ts:194",{"_index":2220,"title":{},"body":{"interfaces/IChartMarker.html":{}}}],["src/core/common/types.ts:199",{"_index":2207,"title":{},"body":{"interfaces/IChart.html":{}}}],["src/core/common/types.ts:200",{"_index":2206,"title":{},"body":{"interfaces/IChart.html":{}}}],["src/core/common/types.ts:201",{"_index":2209,"title":{},"body":{"interfaces/IChart.html":{}}}],["src/core/common/types.ts:202",{"_index":2208,"title":{},"body":{"interfaces/IChart.html":{}}}],["src/core/common/types.ts:203",{"_index":2203,"title":{},"body":{"interfaces/IChart.html":{}}}],["src/core/common/types.ts:204",{"_index":2210,"title":{},"body":{"interfaces/IChart.html":{}}}],["src/core/common/types.ts:205",{"_index":2204,"title":{},"body":{"interfaces/IChart.html":{}}}],["src/core/common/types.ts:206",{"_index":2212,"title":{},"body":{"interfaces/IChart.html":{}}}],["src/core/common/types.ts:207",{"_index":2213,"title":{},"body":{"interfaces/IChart.html":{}}}],["src/core/common/types.ts:208",{"_index":2211,"title":{},"body":{"interfaces/IChart.html":{}}}],["src/core/common/types.ts:209",{"_index":2205,"title":{},"body":{"interfaces/IChart.html":{}}}],["src/core/common/types.ts:225",{"_index":2222,"title":{},"body":{"interfaces/IChartPlugin.html":{}}}],["src/core/common/types.ts:228",{"_index":2223,"title":{},"body":{"interfaces/IChartPlugin.html":{}}}],["src/core/common/types.ts:231",{"_index":2224,"title":{},"body":{"interfaces/IChartPlugin.html":{}}}],["src/core/common/types.ts:234",{"_index":2221,"title":{},"body":{"interfaces/IChartPlugin.html":{}}}],["src/core/common/types.ts:251",{"_index":2303,"title":{},"body":{"interfaces/IRenderContainers.html":{}}}],["src/core/common/types.ts:314",{"_index":2227,"title":{},"body":{"interfaces/IDataPointsPayload.html":{}}}],["src/core/common/types.ts:345",{"_index":2812,"title":{},"body":{"interfaces/ISetDomainEventPayload.html":{}}}],["src/core/common/types.ts:350",{"_index":2889,"title":{},"body":{"interfaces/IValueProvider.html":{}}}],["src/core/common/types.ts:351",{"_index":2891,"title":{},"body":{"interfaces/IValueProvider.html":{}}}],["src/core/common/utility.service.ts",{"_index":4360,"title":{},"body":{"classes/UtilityService.html":{}}}],["src/core/common/utility.service.ts:179",{"_index":4378,"title":{},"body":{"classes/UtilityService.html":{}}}],["src/core/common/utility.service.ts:204",{"_index":4395,"title":{},"body":{"classes/UtilityService.html":{}}}],["src/core/common/utility.service.ts:224",{"_index":4389,"title":{},"body":{"classes/UtilityService.html":{}}}],["src/core/common/utility.service.ts:24",{"_index":4387,"title":{},"body":{"classes/UtilityService.html":{}}}],["src/core/common/utility.service.ts:63",{"_index":4369,"title":{},"body":{"classes/UtilityService.html":{}}}],["src/core/common/utility.service.ts:75",{"_index":4396,"title":{},"body":{"classes/UtilityService.html":{}}}],["src/core/common/utility.service.ts:92",{"_index":4372,"title":{},"body":{"classes/UtilityService.html":{}}}],["src/core/grid/config/area",{"_index":82,"title":{},"body":{"classes/AreaGridConfig.html":{}}}],["src/core/grid/config/axis",{"_index":156,"title":{},"body":{"classes/AxisConfig.html":{}}}],["src/core/grid/config/bar",{"_index":256,"title":{},"body":{"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{}}}],["src/core/grid/config/dimension",{"_index":1544,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["src/core/grid/config/grid",{"_index":1856,"title":{},"body":{"classes/GridConfig.html":{}}}],["src/core/grid/config/xy",{"_index":4476,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["src/core/grid/grid.ts",{"_index":1633,"title":{},"body":{"classes/Grid.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/core/grid/grid.ts:108",{"_index":1669,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:110",{"_index":1671,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:112",{"_index":1672,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:121",{"_index":1675,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:123",{"_index":1677,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:125",{"_index":1678,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:134",{"_index":1662,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:174",{"_index":1664,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:179",{"_index":1679,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:190",{"_index":1681,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:206",{"_index":1682,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:27",{"_index":1650,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:30",{"_index":1645,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:33",{"_index":1657,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:36",{"_index":1651,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:39",{"_index":1660,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:51",{"_index":1661,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:54",{"_index":1648,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:88",{"_index":1673,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:93",{"_index":1674,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/types.ts",{"_index":2030,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"miscellaneous/typealiases.html":{}}}],["src/core/grid/types.ts:100",{"_index":2232,"title":{},"body":{"interfaces/IDimensionConfig.html":{}}}],["src/core/grid/types.ts:225",{"_index":2251,"title":{},"body":{"interfaces/IGrid.html":{}}}],["src/core/grid/types.ts:232",{"_index":2250,"title":{},"body":{"interfaces/IGrid.html":{}}}],["src/core/grid/types.ts:239",{"_index":2252,"title":{},"body":{"interfaces/IGrid.html":{}}}],["src/core/grid/types.ts:247",{"_index":2253,"title":{},"body":{"interfaces/IGrid.html":{}}}],["src/core/grid/types.ts:248",{"_index":2254,"title":{},"body":{"interfaces/IGrid.html":{}}}],["src/core/grid/types.ts:255",{"_index":2248,"title":{},"body":{"interfaces/IGrid.html":{}}}],["src/core/grid/types.ts:263",{"_index":2249,"title":{},"body":{"interfaces/IGrid.html":{}}}],["src/core/grid/types.ts:270",{"_index":2246,"title":{},"body":{"interfaces/IGrid.html":{}}}],["src/core/grid/types.ts:277",{"_index":2255,"title":{},"body":{"interfaces/IGrid.html":{}}}],["src/core/grid/types.ts:285",{"_index":2256,"title":{},"body":{"interfaces/IGrid.html":{}}}],["src/core/grid/types.ts:292",{"_index":2257,"title":{},"body":{"interfaces/IGrid.html":{}}}],["src/core/grid/types.ts:299",{"_index":2247,"title":{},"body":{"interfaces/IGrid.html":{}}}],["src/core/grid/types.ts:53",{"_index":2235,"title":{},"body":{"interfaces/IDimensionConfig.html":{}}}],["src/core/grid/types.ts:59",{"_index":2236,"title":{},"body":{"interfaces/IDimensionConfig.html":{}}}],["src/core/grid/types.ts:66",{"_index":2229,"title":{},"body":{"interfaces/IDimensionConfig.html":{}}}],["src/core/grid/types.ts:72",{"_index":2230,"title":{},"body":{"interfaces/IDimensionConfig.html":{}}}],["src/core/grid/types.ts:80",{"_index":2233,"title":{},"body":{"interfaces/IDimensionConfig.html":{}}}],["src/core/grid/types.ts:86",{"_index":2234,"title":{},"body":{"interfaces/IDimensionConfig.html":{}}}],["src/core/grid/types.ts:94",{"_index":2231,"title":{},"body":{"interfaces/IDimensionConfig.html":{}}}],["src/core/grid/xy",{"_index":2321,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["src/core/plugins/chart",{"_index":960,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["src/core/plugins/interaction/interaction",{"_index":3003,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["src/core/plugins/radial",{"_index":3757,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["src/core/plugins/tooltips/bar",{"_index":434,"title":{},"body":{"classes/BarTooltipsPlugin.html":{}}}],["src/core/plugins/tooltips/chart",{"_index":1428,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"miscellaneous/variables.html":{}}}],["src/core/plugins/tooltips/radial",{"_index":3778,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["src/core/plugins/types.ts",{"_index":2237,"title":{},"body":{"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{}}}],["src/core/plugins/types.ts:6",{"_index":2261,"title":{},"body":{"interfaces/IInteractionValues.html":{}}}],["src/core/plugins/zoom",{"_index":2896,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["src/core/types.ts",{"_index":4519,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/gauge/constants.ts",{"_index":4522,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/legend/legend",{"_index":485,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["src/legend/legend.component.ts",{"_index":3105,"title":{},"body":{"components/LegendComponent.html":{}}}],["src/legend/legend.component.ts:16",{"_index":3125,"title":{},"body":{"components/LegendComponent.html":{}}}],["src/legend/legend.component.ts:21",{"_index":3111,"title":{},"body":{"components/LegendComponent.html":{}}}],["src/legend/legend.component.ts:26",{"_index":3112,"title":{},"body":{"components/LegendComponent.html":{}}}],["src/legend/legend.component.ts:31",{"_index":3118,"title":{},"body":{"components/LegendComponent.html":{}}}],["src/legend/legend.component.ts:36",{"_index":3119,"title":{},"body":{"components/LegendComponent.html":{}}}],["src/legend/legend.component.ts:41",{"_index":3121,"title":{},"body":{"components/LegendComponent.html":{}}}],["src/legend/legend.component.ts:46",{"_index":3123,"title":{},"body":{"components/LegendComponent.html":{}}}],["src/legend/types.ts",{"_index":4521,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/renderers/accessors/noop",{"_index":2289,"title":{},"body":{"interfaces/INoopAccessors.html":{},"classes/NoopAccessors.html":{}}}],["src/renderers/accessors/rectangle",{"_index":2299,"title":{},"body":{"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RectangleAccessors.html":{}}}],["src/renderers/accessors/xy",{"_index":2892,"title":{},"body":{"interfaces/IXYDataAccessors.html":{},"classes/XYAccessors.html":{}}}],["src/renderers/area/area",{"_index":6,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["src/renderers/bar/accessors/bar",{"_index":203,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["src/renderers/bar/accessors/horizontal",{"_index":1875,"title":{},"body":{"classes/HorizontalBarAccessors.html":{}}}],["src/renderers/bar/accessors/status",{"_index":2879,"title":{},"body":{"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{}}}],["src/renderers/bar/accessors/vertical",{"_index":4474,"title":{},"body":{"classes/VerticalBarAccessors.html":{}}}],["src/renderers/bar/highlight",{"_index":268,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["src/renderers/bar/types.ts",{"_index":2200,"title":{},"body":{"interfaces/IBarChartConfig.html":{},"interfaces/IStackMetadata.html":{}}}],["src/renderers/constants.ts",{"_index":5011,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/renderers/line/interaction",{"_index":3416,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["src/renderers/line/line",{"_index":2262,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["src/renderers/line/missing",{"_index":3571,"title":{},"body":{"classes/MissingDataLineRendererConfig.html":{}}}],["src/renderers/marker",{"_index":3505,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["src/renderers/noop",{"_index":3578,"title":{},"body":{"classes/NoopRenderer.html":{}}}],["src/renderers/radial/accessors/radial",{"_index":2292,"title":{},"body":{"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"classes/RadialAccessors.html":{}}}],["src/renderers/radial/gauge/donut",{"_index":1590,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["src/renderers/radial/pie",{"_index":3716,"title":{},"body":{"classes/PieRenderer.html":{}}}],["src/renderers/radial/radial",{"_index":5014,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/renderers/side",{"_index":2814,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["src/renderers/types.ts",{"_index":2087,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"miscellaneous/enumerations.html":{}}}],["src/renderers/types.ts:105",{"_index":2259,"title":{},"body":{"interfaces/IHighlightStrategy.html":{}}}],["src/renderers/types.ts:107",{"_index":2260,"title":{},"body":{"interfaces/IHighlightStrategy.html":{}}}],["src/renderers/types.ts:110",{"_index":2258,"title":{},"body":{"interfaces/IHighlightStrategy.html":{}}}],["src/renderers/xy",{"_index":4491,"title":{},"body":{"classes/XYRenderer.html":{}}}],["src/styles.less",{"_index":4576,"title":{},"body":{"index.html":{}}}],["src/test.ts",{"_index":4998,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/thresholds/thresholds",{"_index":4144,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["src/thresholds/types.ts",{"_index":2870,"title":{},"body":{"interfaces/ISimpleThresholdZone.html":{},"interfaces/ZoneCross.html":{},"miscellaneous/enumerations.html":{}}}],["sstring",{"_index":4443,"title":{},"body":{"classes/UtilityService.html":{}}}],["sstring.charcodeat(0",{"_index":4448,"title":{},"body":{"classes/UtilityService.html":{}}}],["sstring.length",{"_index":4445,"title":{},"body":{"classes/UtilityService.html":{}}}],["stack",{"_index":2787,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["stacked",{"_index":1699,"title":{},"body":{"classes/Grid.html":{}}}],["standard",{"_index":2827,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/SideIndicatorAccessors.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["standard_render_layers",{"_index":2819,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/ZoomPlugin.html":{}}}],["standard_render_layers[renderlayername.foreground].order",{"_index":2935,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["standard_render_layers[renderlayername.unclippeddata",{"_index":2868,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["standardcolors",{"_index":1061,"title":{},"body":{"classes/ChartPalette.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["standardgaugecolor",{"_index":4516,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["standardgaugethresholdmarkerradius",{"_index":1908,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/enumerations.html":{}}}],["standardlineargaugethickness",{"_index":4518,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["standards",{"_index":93,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{}}}],["start",{"_index":216,"title":{},"body":{"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"interfaces/ZoneCross.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["start.length",{"_index":365,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["startaccessor",{"_index":354,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["startaccessor?.(d",{"_index":359,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["started",{"_index":4538,"title":{"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["starting",{"_index":3787,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"injectables/ThresholdsService.html":{},"miscellaneous/variables.html":{}}}],["starts",{"_index":1389,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["startsimulation(tooltipindex",{"_index":1392,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["startx",{"_index":1883,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["starty",{"_index":1887,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["state",{"_index":752,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/SparkChartAssist.html":{},"classes/XYRenderer.html":{},"license.html":{}}}],["stated",{"_index":4709,"title":{},"body":{"license.html":{}}}],["statement",{"_index":4769,"title":{},"body":{"license.html":{}}}],["states",{"_index":3303,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["statestyles",{"_index":1938,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["static",{"_index":96,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/StatusAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{}}}],["stating",{"_index":4745,"title":{},"body":{"license.html":{}}}],["status",{"_index":417,"title":{"additional-documentation/chart-types/bar/status.html":{}},"body":{"classes/BarStatusGridConfig.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"components/LegendSeriesComponent.html":{},"classes/StatusAccessors.html":{},"injectables/ThresholdsService.html":{},"interfaces/ZoneCross.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/chart-types.html":{}}}],["status_category",{"_index":2882,"title":{},"body":{"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{}}}],["status_domain",{"_index":2883,"title":{},"body":{"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{}}}],["statusaccessors",{"_index":2881,"title":{"classes/StatusAccessors.html":{}},"body":{"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["statusaccessors(colorprovider",{"_index":4232,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["statusaccessors.status_category",{"_index":2884,"title":{},"body":{"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{}}}],["statuses",{"_index":4210,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["step",{"_index":4212,"title":{},"body":{"injectables/ThresholdsService.html":{},"index.html":{}}}],["still",{"_index":2958,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"injectables/ThresholdsService.html":{},"classes/ZoomPlugin.html":{}}}],["stop",{"_index":1385,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["stoppage",{"_index":4827,"title":{},"body":{"license.html":{}}}],["stored",{"_index":1979,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["strategies/bar",{"_index":269,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["strategies/line",{"_index":3417,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["strategy",{"_index":2126,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["strategy.ts",{"_index":271,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["strategy.ts:115",{"_index":302,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["strategy.ts:12",{"_index":410,"title":{},"body":{"classes/BarSeriesHighlightStrategy.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["strategy.ts:14",{"_index":3420,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["strategy.ts:17",{"_index":282,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["strategy.ts:21",{"_index":414,"title":{},"body":{"classes/BarSeriesHighlightStrategy.html":{}}}],["strategy.ts:26",{"_index":308,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["strategy.ts:32",{"_index":413,"title":{},"body":{"classes/BarSeriesHighlightStrategy.html":{}}}],["strategy.ts:37",{"_index":305,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["strategy.ts:61",{"_index":3421,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["strategy.ts:65",{"_index":415,"title":{},"body":{"classes/BarSeriesHighlightStrategy.html":{}}}],["strategy.ts:66",{"_index":3422,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["strategy.ts:75",{"_index":412,"title":{},"body":{"classes/BarSeriesHighlightStrategy.html":{}}}],["strategy.ts:87",{"_index":311,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["stream",{"_index":1202,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/LegendInteractionAssist.html":{}}}],["streamid",{"_index":1628,"title":{},"body":{"classes/EventBus.html":{}}}],["streams",{"_index":1629,"title":{},"body":{"classes/EventBus.html":{}}}],["strength(0.5",{"_index":1414,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["strict",{"_index":633,"title":{},"body":{"classes/Chart.html":{}}}],["string",{"_index":136,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["string(value",{"_index":4444,"title":{},"body":{"classes/UtilityService.html":{}}}],["string).pipe",{"_index":1213,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["string).touppercase",{"_index":351,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["stringid",{"_index":1465,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["stroke",{"_index":2051,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/PathMarker.html":{},"classes/ZoomPlugin.html":{}}}],["strokelinecap",{"_index":2124,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["strokestyle",{"_index":2121,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/MissingDataLineRendererConfig.html":{},"injectables/ThresholdsService.html":{}}}],["strokewidth",{"_index":1957,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/MissingDataLineRendererConfig.html":{},"injectables/ThresholdsService.html":{}}}],["structure",{"_index":1969,"title":{"additional-documentation/advanced-usage/input-structure.html":{}},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"index.html":{},"additional-documentation/advanced-usage.html":{}}}],["style",{"_index":733,"title":{},"body":{"classes/Chart.html":{},"components/ChartTooltipComponent.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"miscellaneous/typealiases.html":{}}}],["style(\"pointer",{"_index":2969,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["style(\"text",{"_index":3060,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["style(this.isvertical",{"_index":1423,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["styledsvg",{"_index":4091,"title":{},"body":{"classes/SvgMarker.html":{}}}],["styles",{"_index":2091,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"index.html":{}}}],["styleurls",{"_index":496,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/RichLegendTileComponent.html":{}}}],["subject",{"_index":301,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"license.html":{}}}],["sublicense",{"_index":4706,"title":{},"body":{"license.html":{}}}],["submission",{"_index":4771,"title":{},"body":{"license.html":{}}}],["submit",{"_index":4669,"title":{},"body":{"license.html":{}}}],["submitted",{"_index":4667,"title":{},"body":{"license.html":{}}}],["subscribe",{"_index":666,"title":{},"body":{"classes/Chart.html":{},"components/ChartPopoverComponent.html":{}}}],["subscribe((chartevent",{"_index":2937,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["subscribe((d",{"_index":663,"title":{},"body":{"classes/Chart.html":{}}}],["subscribe((event",{"_index":1214,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{}}}],["subscribe((position",{"_index":1144,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["subscribe((rs",{"_index":669,"title":{},"body":{"classes/Chart.html":{}}}],["subscribers",{"_index":3127,"title":{},"body":{"components/LegendComponent.html":{}}}],["subscribing",{"_index":3184,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["subscription",{"_index":949,"title":{},"body":{"components/ChartDonutContentComponent.html":{},"classes/LegendInteractionAssist.html":{}}}],["subsequently",{"_index":4691,"title":{},"body":{"license.html":{}}}],["substitute",{"_index":4933,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subtract",{"_index":3056,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["subtracted",{"_index":2754,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["subtracting",{"_index":2047,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["successfully",{"_index":1268,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["such",{"_index":3186,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"license.html":{}}}],["suggested",{"_index":914,"title":{},"body":{"components/ChartComponent.html":{}}}],["summary",{"_index":4173,"title":{},"body":{"injectables/ThresholdsService.html":{},"miscellaneous/variables.html":{}}}],["super",{"_index":149,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LineAccessors.html":{},"classes/XYGridConfig.html":{},"classes/ZoomPlugin.html":{}}}],["super(colorprovider",{"_index":1882,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["super(colors",{"_index":3968,"title":{},"body":{"classes/SequentialColorProvider.html":{}}}],["super(config",{"_index":2839,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["super(id",{"_index":3479,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["super(markers",{"_index":3967,"title":{},"body":{"classes/SequentialChartMarkerProvider.html":{}}}],["super(sourceprovider",{"_index":4110,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["super.build",{"_index":2393,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["super.getabsoluteposition(relativeposition",{"_index":3810,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["super.update",{"_index":2438,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["super.updateranges",{"_index":2483,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["supersede",{"_index":4778,"title":{},"body":{"license.html":{}}}],["support",{"_index":4839,"title":{},"body":{"license.html":{},"modules.html":{}}}],["supporting",{"_index":2271,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["supports",{"_index":4435,"title":{},"body":{"classes/UtilityService.html":{}}}],["svg",{"_index":678,"title":{},"body":{"classes/Chart.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/MarkerUtils.html":{},"classes/PathMarker.html":{},"classes/RadialPopoverPlugin.html":{},"classes/SvgMarker.html":{},"classes/ZoomPlugin.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["svg_padding",{"_index":1020,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["svgcontainerelement",{"_index":1038,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["svgcontainerelement.getbbox",{"_index":1045,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["svgcontainerelement.innerhtml",{"_index":1040,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["svgcontainerelement.insertadjacenthtml(\"beforeend",{"_index":1042,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["svgcontent",{"_index":998,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["svgelement",{"_index":1815,"title":{},"body":{"classes/Grid.html":{}}}],["svgelements",{"_index":1770,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["svgmarker",{"_index":4084,"title":{"classes/SvgMarker.html":{}},"body":{"classes/SvgMarker.html":{},"miscellaneous/variables.html":{}}}],["svgmarker(s",{"_index":4930,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sw",{"_index":2648,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["switch",{"_index":3115,"title":{},"body":{"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{}}}],["switchmap",{"_index":3160,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["switchmap(highlightdata",{"_index":3222,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["symmetry",{"_index":1274,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["sync",{"_index":1703,"title":{},"body":{"classes/Grid.html":{}}}],["synchandlermap",{"_index":3188,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["synchronization",{"_index":2281,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["synchronize",{"_index":3258,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["synchronized",{"_index":3263,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["syncsubscription",{"_index":3190,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["syncwithchartassist",{"_index":3276,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["syncwithchartassist(chartassist",{"_index":3264,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["syntax",{"_index":4860,"title":{},"body":{"license.html":{}}}],["systems",{"_index":4679,"title":{},"body":{"license.html":{}}}],["t",{"_index":1916,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialValueProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{}}}],["t,i",{"_index":4386,"title":{},"body":{"classes/UtilityService.html":{}}}],["t,index",{"_index":4377,"title":{},"body":{"classes/UtilityService.html":{}}}],["tabs",{"_index":3997,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["take",{"_index":4259,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["taken",{"_index":3799,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["takeuntil",{"_index":588,"title":{},"body":{"classes/Chart.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/ZoomPlugin.html":{}}}],["takeuntil(chartassist.chart.geteventbus().getstream(destroy_event",{"_index":3270,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["takeuntil(this.destroy",{"_index":1142,"title":{},"body":{"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["takeuntil(this.eventbus.getstream(destroy_event",{"_index":2397,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["takeuntil(this.geteventbus().getstream(destroy_event",{"_index":661,"title":{},"body":{"classes/Chart.html":{}}}],["takeuntil(this.initplugin",{"_index":1141,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["target",{"_index":384,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/Chart.html":{},"components/ChartComponent.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialPopoverPlugin.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYRenderer.html":{}}}],["target(target",{"_index":1676,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["target.append(\"g",{"_index":3077,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/MarkerUtils.html":{}}}],["target.append(\"path",{"_index":3429,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["target.append(\"rect\").attrs",{"_index":2856,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["target.node().getboundingclientrect",{"_index":3890,"title":{},"body":{"classes/Renderer.html":{}}}],["target.on(nativeevent",{"_index":3889,"title":{},"body":{"classes/Renderer.html":{}}}],["target.select(\"path.interaction",{"_index":3425,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["target.select(\"rect",{"_index":2847,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["target.select(`g.${classname",{"_index":3536,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["target.select(`g.${classname}`).remove",{"_index":3569,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["target.selectall(`g",{"_index":391,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["targetevent",{"_index":3888,"title":{},"body":{"classes/Renderer.html":{}}}],["technically",{"_index":3666,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["template",{"_index":893,"title":{},"body":{"components/ChartComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["templateref",{"_index":1123,"title":{},"body":{"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{}}}],["templateurl",{"_index":498,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["ten",{"_index":4944,"title":{},"body":{"miscellaneous/variables.html":{}}}],["terminate",{"_index":4731,"title":{},"body":{"license.html":{}}}],["terms",{"_index":4596,"title":{},"body":{"license.html":{}}}],["test",{"_index":4420,"title":{},"body":{"classes/UtilityService.html":{}}}],["testtext",{"_index":2608,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["testtext.classed(\"sample",{"_index":2610,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["testtext.remove",{"_index":2614,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["text",{"_index":184,"title":{},"body":{"classes/AxisConfig.html":{},"classes/ChartPalette.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/InteractionLabelPlugin.html":{},"components/RichLegendTileComponent.html":{},"license.html":{}}}],["text\").node",{"_index":2764,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["text(labelcontent",{"_index":3051,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["text)\").each(function",{"_index":2633,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["text):last",{"_index":2762,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["textcolorprovider",{"_index":1083,"title":{"classes/TextColorProvider.html":{}},"body":{"classes/ChartPalette.html":{},"classes/TextColorProvider.html":{}}}],["textcolorprovider(this.standardcolors",{"_index":1092,"title":{},"body":{"classes/ChartPalette.html":{}}}],["textcolors",{"_index":1063,"title":{},"body":{"classes/ChartPalette.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["textinsidenext",{"_index":2665,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["textofticks",{"_index":2527,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["textofticks.push(this",{"_index":2532,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["textoverflowhandler",{"_index":2056,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"miscellaneous/typealiases.html":{}}}],["textpadding",{"_index":2695,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["textselection",{"_index":2057,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/InteractionLabelPlugin.html":{}}}],["textselection.node",{"_index":3052,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["texttohide",{"_index":2564,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["texttohide.foreach((group",{"_index":2567,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["theory",{"_index":4811,"title":{},"body":{"license.html":{}}}],["thereof",{"_index":4663,"title":{},"body":{"license.html":{}}}],["thick",{"_index":4484,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["thickness",{"_index":218,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYGridConfig.html":{},"classes/RectangleAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["thicknesses",{"_index":4534,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["thicknessmap",{"_index":4163,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["thicknessmap[d.__thresholds.status",{"_index":4244,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["thicknessmap[d.status",{"_index":4234,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["thicknessx",{"_index":2302,"title":{},"body":{"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["thicknessy",{"_index":1890,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RectangleAccessors.html":{}}}],["things",{"_index":345,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["third",{"_index":4757,"title":{},"body":{"license.html":{}}}],["this._active",{"_index":3380,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this._approximateticks",{"_index":197,"title":{},"body":{"classes/AxisConfig.html":{}}}],["this._backgroundcolors",{"_index":1098,"title":{},"body":{"classes/ChartPalette.html":{}}}],["this._bottomscaleid",{"_index":2367,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this._config",{"_index":1723,"title":{},"body":{"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{}}}],["this._config.borders.bottom?.visible",{"_index":1841,"title":{},"body":{"classes/Grid.html":{}}}],["this._config.borders.left?.visible",{"_index":1855,"title":{},"body":{"classes/Grid.html":{}}}],["this._config.borders.right?.visible",{"_index":1852,"title":{},"body":{"classes/Grid.html":{}}}],["this._config.borders.top?.visible",{"_index":1849,"title":{},"body":{"classes/Grid.html":{}}}],["this._config.dimension",{"_index":2716,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this._config.dimension.height",{"_index":2570,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this._config.dimension.margin",{"_index":2797,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this._config.dimension.marginlocked",{"_index":2626,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this._config.dimension.width",{"_index":2566,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this._d3scale",{"_index":3942,"title":{},"body":{"classes/Scale.html":{}}}],["this._d3scale(value",{"_index":3483,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["this._d3scale.domain",{"_index":3952,"title":{},"body":{"classes/Scale.html":{}}}],["this._d3scale.domain(domain",{"_index":3951,"title":{},"body":{"classes/Scale.html":{}}}],["this._d3scale.invert(coordinate",{"_index":3484,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["this._d3scale.range",{"_index":3949,"title":{},"body":{"classes/Scale.html":{}}}],["this._d3scale.range(this.isreversed",{"_index":3947,"title":{},"body":{"classes/Scale.html":{}}}],["this._height",{"_index":1579,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["this._interactive",{"_index":3382,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this._leftscaleid",{"_index":2371,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this._rightscaleid",{"_index":2375,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this._scales",{"_index":1721,"title":{},"body":{"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{}}}],["this._scales[scalekey]?.list?.filter((scale",{"_index":2381,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this._seriesrenderstate",{"_index":3384,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this._standardcolors",{"_index":1090,"title":{},"body":{"classes/ChartPalette.html":{}}}],["this._target",{"_index":1725,"title":{},"body":{"classes/Grid.html":{}}}],["this._target.append(\"clippath",{"_index":1804,"title":{},"body":{"classes/Grid.html":{}}}],["this._target.append(\"g",{"_index":1729,"title":{},"body":{"classes/Grid.html":{}}}],["this._textcolors",{"_index":1091,"title":{},"body":{"classes/ChartPalette.html":{}}}],["this._width",{"_index":1577,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["this.accessors",{"_index":1540,"title":{},"body":{"classes/DataSeries.html":{}}}],["this.activechanged.complete",{"_index":3132,"title":{},"body":{"components/LegendComponent.html":{}}}],["this.activechanged.emit(this.active",{"_index":3131,"title":{},"body":{"components/LegendComponent.html":{}}}],["this.addplugin(gridplugin",{"_index":658,"title":{},"body":{"classes/Chart.html":{}}}],["this.addplugin(plugin",{"_index":628,"title":{},"body":{"classes/Chart.html":{}}}],["this.adjustaxisticks(axis.labelgroup",{"_index":2457,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.adjustrenderingarea",{"_index":1746,"title":{},"body":{"classes/Grid.html":{}}}],["this.applydefaults(s",{"_index":3233,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.arelabelupdatesenabled",{"_index":3027,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["this.aremarginsapproximatelyequal(oldmargin",{"_index":2796,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.avoidtooltipcollisions",{"_index":1363,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.axis.bottom.fit",{"_index":405,"title":{},"body":{"classes/BarHorizontalGridConfig.html":{}}}],["this.axis.bottom.gridticks",{"_index":263,"title":{},"body":{"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{}}}],["this.axis.bottom.ticklabel.horizontalpadding",{"_index":4490,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["this.axis.bottom.ticksize",{"_index":265,"title":{},"body":{"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{}}}],["this.axis.bottom.visible",{"_index":423,"title":{},"body":{"classes/BarStatusGridConfig.html":{}}}],["this.axis.left.fit",{"_index":264,"title":{},"body":{"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{}}}],["this.axis.left.gridticks",{"_index":261,"title":{},"body":{"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["this.axis.left.padding",{"_index":4486,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["this.axis.left.ticksize",{"_index":262,"title":{},"body":{"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["this.axis.left.visible",{"_index":424,"title":{},"body":{"classes/BarStatusGridConfig.html":{}}}],["this.axis.right.fit",{"_index":4487,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["this.axis.right.padding",{"_index":4489,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["this.axis.right.ticksize",{"_index":4488,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["this.axisx",{"_index":2494,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisx.group",{"_index":2650,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisx.group.append(\"g",{"_index":2652,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisx.group.attr(\"transform",{"_index":2488,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisx.labelgroup",{"_index":2653,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisx.labelgroup.attr(\"transform",{"_index":2491,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisx.labelgroup.select(\".tick:not(.tick",{"_index":2761,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisx.tickgroup",{"_index":2651,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisyleft",{"_index":2508,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisyleft.group",{"_index":2405,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisyleft.group.append(\"g",{"_index":2655,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisyleft.labelgroup",{"_index":2656,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisyleft.labelgroup.attr",{"_index":2503,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisyleft.tickgroup",{"_index":2654,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisyright",{"_index":2522,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisyright.group",{"_index":2657,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisyright.group.append(\"g",{"_index":2659,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisyright.labelgroup",{"_index":2660,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisyright.labelgroup.attr",{"_index":2517,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisyright.tickgroup",{"_index":2658,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisyright.tickgroup.attr",{"_index":2519,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisyright?.group",{"_index":2406,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.backgroundcolor",{"_index":3908,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["this.baraccessors.data",{"_index":2885,"title":{},"body":{"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{}}}],["this.baraccessors.series",{"_index":2886,"title":{},"body":{"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{}}}],["this.borders",{"_index":1752,"title":{},"body":{"classes/Grid.html":{}}}],["this.borders.bottom",{"_index":1831,"title":{},"body":{"classes/Grid.html":{},"classes/XYGridConfig.html":{}}}],["this.borders.bottom.visible",{"_index":408,"title":{},"body":{"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{}}}],["this.borders.left",{"_index":1853,"title":{},"body":{"classes/Grid.html":{},"classes/XYGridConfig.html":{}}}],["this.borders.left.visible",{"_index":407,"title":{},"body":{"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["this.borders.right",{"_index":1850,"title":{},"body":{"classes/Grid.html":{}}}],["this.borders.top",{"_index":1845,"title":{},"body":{"classes/Grid.html":{}}}],["this.bottomscaleid",{"_index":2387,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.brush",{"_index":2948,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.brush(this.zoombrushlayer.select(\".brush",{"_index":2967,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.brush.extent([[0",{"_index":2965,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.brush.move(this.brushelement",{"_index":2984,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.brushelement",{"_index":2949,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.brushelement.select(\".overlay",{"_index":2968,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.brushelement.select(\".selection",{"_index":2974,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.brushend",{"_index":2928,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.brushmove",{"_index":2926,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.brushstart",{"_index":2925,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.brushstartx",{"_index":2980,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.buildaxes(this.gridelementslayer",{"_index":2395,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.buildborders(this.gridelementslayer",{"_index":1751,"title":{},"body":{"classes/Grid.html":{}}}],["this.builddatamanager",{"_index":644,"title":{},"body":{"classes/Chart.html":{}}}],["this.buildgrid",{"_index":643,"title":{},"body":{"classes/Chart.html":{}}}],["this.buildinteractionlabel(this.interactionlabellayer",{"_index":3043,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["this.buildrenderengine(this.grid.getlasagna",{"_index":645,"title":{},"body":{"classes/Chart.html":{}}}],["this.buildrenderingarea(clippathid",{"_index":1745,"title":{},"body":{"classes/Grid.html":{}}}],["this.calculateaxesstyles(e",{"_index":2407,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.cd.detectchanges",{"_index":924,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.changedetector.detectchanges",{"_index":1346,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/RichLegendTileComponent.html":{}}}],["this.changedetector.markforcheck",{"_index":1056,"title":{},"body":{"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{}}}],["this.chart",{"_index":906,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.chart.build(this.elref.nativeelement",{"_index":907,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.chart.getdatamanager().chartseriesset.reduce((prev",{"_index":973,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["this.chart.getdatamanager().getchartseries(datapoint.seriesid",{"_index":1497,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.chart.geteventbus().getstream(chart_view_status_event",{"_index":1481,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["this.chart.geteventbus().getstream(chart_view_status_event).next",{"_index":936,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.chart.geteventbus().getstream(interaction_coordinates_event",{"_index":2936,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.chart.geteventbus().getstream(interaction_data_points_event",{"_index":1473,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.chart.geteventbus().getstream(interaction_data_points_event).asobservable",{"_index":3213,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.chart.geteventbus().getstream(interaction_values_active_event).next",{"_index":2979,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.chart.geteventbus().getstream(interaction_values_event",{"_index":3021,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["this.chart.geteventbus().getstream(refresh_event).subscribe",{"_index":910,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.chart.geteventbus().getstream(series_state_change_event",{"_index":1477,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.chart.geteventbus().getstream(set_domain_event).next",{"_index":3002,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.chart.geteventbus().getstream(this.config.eventstreamid",{"_index":1212,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.chart.getgrid",{"_index":2929,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/ZoomPlugin.html":{}}}],["this.chart.getgrid().config().dimension",{"_index":3055,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["this.chart.getgrid().config().dimension.height",{"_index":3098,"title":{},"body":{"classes/InteractionLinePlugin.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["this.chart.getgrid().config().dimension.margin.left",{"_index":1242,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialPopoverPlugin.html":{}}}],["this.chart.getgrid().config().dimension.margin.top",{"_index":1244,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.chart.getgrid().config().dimension.outerheight",{"_index":988,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["this.chart.getgrid().config().dimension.outerwidth",{"_index":989,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["this.chart.getgrid().config().dimension.width",{"_index":3776,"title":{},"body":{"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["this.chart.getgrid().getinteractivearea",{"_index":2959,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.chart.getgrid().getlasagna().addlayer",{"_index":3018,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["this.chart.getgrid().getlasagna().removelayer(interactionlabelplugin.layer_name",{"_index":3075,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["this.chart.getgrid().getlasagna().removelayer(interactionlineplugin.layer_name",{"_index":3104,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["this.chart.getgrid().scales",{"_index":3026,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["this.chart.setseriesstates(this.legendinteractionassist.getseriesstates",{"_index":3293,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.chart.target?.node()?.parentnode",{"_index":1233,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialPopoverPlugin.html":{}}}],["this.chart.update(seriesset",{"_index":3238,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.chart.updatedimensions",{"_index":911,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.chart?.destroy",{"_index":923,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.chartassist.getvisibleserieswithlegend",{"_index":3324,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.chartassistsubject.next",{"_index":3242,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.chartcollectionservice.getchartcollection(this.collectionid).addchart(this.chartcomponent.chart",{"_index":846,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["this.closepending",{"_index":1357,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.closepopoversubject",{"_index":1228,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.closepopoversubject.complete",{"_index":1229,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.closepopoversubject.next",{"_index":1277,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.closetimeout",{"_index":1368,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.closetooltips.next",{"_index":1369,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.collections[collectionid",{"_index":862,"title":{},"body":{"injectables/ChartCollectionService.html":{}}}],["this.collisiontimeout",{"_index":1362,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.colorprovider",{"_index":73,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"classes/LineAccessors.html":{},"classes/RadialAccessors.html":{}}}],["this.colorprovider.get",{"_index":74,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"classes/LineAccessors.html":{},"classes/RadialAccessors.html":{}}}],["this.config",{"_index":1209,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/Grid.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/ZoomPlugin.html":{}}}],["this.config().axis",{"_index":2486,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.config().axis.bottom",{"_index":2388,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.config().axis.bottom.visible",{"_index":2635,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.config().axis.left",{"_index":2379,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.config().axis.right",{"_index":2386,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.config().axis.right.visible",{"_index":2641,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.config().borders",{"_index":1772,"title":{},"body":{"classes/Grid.html":{}}}],["this.config().dimension",{"_index":1757,"title":{},"body":{"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{}}}],["this.config().dimension.height",{"_index":1834,"title":{},"body":{"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{}}}],["this.config().dimension.margin",{"_index":2572,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.config().dimension.margin.left",{"_index":2749,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.config().dimension.margin.top",{"_index":2751,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.config().dimension.width",{"_index":1836,"title":{},"body":{"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{}}}],["this.config().disablerenderareaheightcorrection",{"_index":1789,"title":{},"body":{"classes/Grid.html":{}}}],["this.config().disablerenderareawidthcorrection",{"_index":1791,"title":{},"body":{"classes/Grid.html":{}}}],["this.config().interactive",{"_index":2394,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.config(config",{"_index":1727,"title":{},"body":{"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{}}}],["this.config.enableexternalevents",{"_index":2939,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.config.interactiontype",{"_index":1216,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.config.statestyles",{"_index":3860,"title":{},"body":{"classes/Renderer.html":{}}}],["this.config.statestyles[state",{"_index":3862,"title":{},"body":{"classes/Renderer.html":{}}}],["this.configurecharteventsubscriptions(chart.geteventbus",{"_index":3194,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.configurecssfilters",{"_index":642,"title":{},"body":{"classes/Chart.html":{}}}],["this.configureeventsubscriptions(chart.geteventbus",{"_index":4063,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.container",{"_index":1728,"title":{},"body":{"classes/Grid.html":{}}}],["this.contentposition",{"_index":957,"title":{},"body":{"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{}}}],["this.contentpositionupdatesubject.complete",{"_index":985,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["this.contentpositionupdatesubject.next(this.contentposition",{"_index":984,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["this.contentpositionupdatesubscription",{"_index":955,"title":{},"body":{"components/ChartDonutContentComponent.html":{}}}],["this.contentpositionupdatesubscription.unsubscribe",{"_index":959,"title":{},"body":{"components/ChartDonutContentComponent.html":{}}}],["this.contentpositionupdatesubscription?.unsubscribe",{"_index":954,"title":{},"body":{"components/ChartDonutContentComponent.html":{}}}],["this.createborder(container",{"_index":1785,"title":{},"body":{"classes/Grid.html":{}}}],["this.createchart(lastspark",{"_index":4054,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.created3scale",{"_index":3943,"title":{},"body":{"classes/Scale.html":{}}}],["this.data",{"_index":56,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"classes/DataSeries.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/NoopAccessors.html":{},"classes/RadialAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["this.data.category(d",{"_index":1888,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["this.data.defined",{"_index":2284,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["this.data.end(d",{"_index":1886,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["this.data.start(d",{"_index":1884,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["this.data.thickness",{"_index":1891,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["this.data.thickness(d",{"_index":1892,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["this.data.value",{"_index":242,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["this.data.value(data",{"_index":247,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["this.data.x(d",{"_index":61,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["this.data.x0(d",{"_index":65,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["this.data.x1(d",{"_index":67,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["this.data.y(d",{"_index":63,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["this.data.y0(d",{"_index":69,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["this.data.y1(d",{"_index":71,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["this.datamanager",{"_index":618,"title":{},"body":{"classes/Chart.html":{}}}],["this.datamanager.scalesindexbykey",{"_index":709,"title":{},"body":{"classes/Chart.html":{}}}],["this.datamanager.update(seriesset",{"_index":707,"title":{},"body":{"classes/Chart.html":{}}}],["this.datamanager.updatescaledomains",{"_index":710,"title":{},"body":{"classes/Chart.html":{}}}],["this.datapointpositions[seriesid",{"_index":1500,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.datapoints",{"_index":1264,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.datapoints[seriesid",{"_index":1496,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.default_config",{"_index":1211,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["this.defaultvalue",{"_index":3503,"title":{},"body":{"classes/MappedValueProvider.html":{}}}],["this.destroy",{"_index":1230,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.destroy$.complete",{"_index":1137,"title":{},"body":{"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/ZoomPlugin.html":{}}}],["this.destroy$.next",{"_index":1136,"title":{},"body":{"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/ZoomPlugin.html":{}}}],["this.dimension.autoheight",{"_index":425,"title":{},"body":{"classes/BarStatusGridConfig.html":{}}}],["this.dimension.height(30",{"_index":428,"title":{},"body":{"classes/BarStatusGridConfig.html":{}}}],["this.dimension.margin",{"_index":4481,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["this.dimension.margin.bottom",{"_index":427,"title":{},"body":{"classes/BarStatusGridConfig.html":{}}}],["this.dimension.margin.right",{"_index":266,"title":{},"body":{"classes/BarGridConfig.html":{}}}],["this.dimension.margin.top",{"_index":426,"title":{},"body":{"classes/BarStatusGridConfig.html":{}}}],["this.dimension.padding",{"_index":4479,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["this.dimension.padding.bottom",{"_index":150,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{}}}],["this.dimension.padding.left",{"_index":406,"title":{},"body":{"classes/BarHorizontalGridConfig.html":{}}}],["this.domain().findindex((value",{"_index":3485,"title":{},"body":{"classes/LinearScale.html":{},"classes/Scale.html":{},"classes/TimeScale.html":{}}}],["this.domain(domain",{"_index":3954,"title":{},"body":{"classes/Scale.html":{}}}],["this.drawgrids",{"_index":2509,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.drawgrids(axis.bottom",{"_index":2495,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.drawline",{"_index":1041,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["this.drawticks(axis.bottom",{"_index":2493,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.drawticks(axis.left",{"_index":2507,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.drawticks(axis.right",{"_index":2521,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.element",{"_index":630,"title":{},"body":{"classes/Chart.html":{},"classes/PathMarker.html":{}}}],["this.element.clientheight",{"_index":726,"title":{},"body":{"classes/Chart.html":{}}}],["this.element.clientwidth",{"_index":729,"title":{},"body":{"classes/Chart.html":{}}}],["this.element.nativeelement.style.left",{"_index":1153,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["this.element.nativeelement.style.top",{"_index":1155,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["this.element.outerhtml",{"_index":3714,"title":{},"body":{"classes/PathMarker.html":{}}}],["this.element.setattribute(attr",{"_index":3709,"title":{},"body":{"classes/PathMarker.html":{}}}],["this.emitevent(renderer",{"_index":3441,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["this.emphasisstate",{"_index":805,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{}}}],["this.emphasizeseries",{"_index":3200,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.emphasizeseries(data.seriesid",{"_index":3285,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.emphasizeseries(legendseries[0].id",{"_index":3327,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.eventbus",{"_index":617,"title":{},"body":{"classes/Chart.html":{}}}],["this.eventbus.destroy",{"_index":700,"title":{},"body":{"classes/Chart.html":{}}}],["this.eventbus.getstream(axes_style_change_event).next",{"_index":2401,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.eventbus.getstream(destroy_event).next",{"_index":699,"title":{},"body":{"classes/Chart.html":{}}}],["this.eventbus.getstream(series_state_change_event).next",{"_index":705,"title":{},"body":{"classes/Chart.html":{}}}],["this.eventbus.getstream(series_state_change_event).pipe(untildestroy()).subscribe((e",{"_index":2398,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.filterdatabydomain(filtereddata",{"_index":3871,"title":{},"body":{"classes/Renderer.html":{}}}],["this.filterdefs",{"_index":672,"title":{},"body":{"classes/Chart.html":{}}}],["this.filterdefs?.append(\"filter",{"_index":680,"title":{},"body":{"classes/Chart.html":{}}}],["this.filterrepeatedelements(textofticks",{"_index":2534,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.finddatapointbyvalue(series",{"_index":348,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["this.findnearestindex(haystack",{"_index":4411,"title":{},"body":{"classes/UtilityService.html":{}}}],["this.fitbottomaxis(d",{"_index":2738,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.fn(clr",{"_index":3753,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["this.formatters.tick",{"_index":3480,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["this.getabsoluteposition(tooltiprelativeposition",{"_index":1501,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.getabsoluteposition(validdatapointsvalues",{"_index":1263,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.getbackgroundsdataforcontinuousscale(sourceseries",{"_index":4245,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["this.getbreakpoints(sourceseries",{"_index":4253,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["this.getcontentposition(radius",{"_index":983,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["this.getcontrastratio(rgbinput",{"_index":4114,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["this.getcrosspointwithy(xy1",{"_index":4256,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["this.getdomain(filtereddata",{"_index":3873,"title":{},"body":{"classes/Renderer.html":{}}}],["this.getelementstohide(axislabels",{"_index":2565,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.getgrid().buildplugins(this",{"_index":657,"title":{},"body":{"classes/Chart.html":{}}}],["this.getinteractivearea",{"_index":2434,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.getmaxtextwidth(array",{"_index":2683,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.getmaxtextwidth(this.selectallaxislabels(this.axisyleft.labelgroup",{"_index":2725,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.getmaxtextwidth(this.selectallaxislabels(this.axisyright.labelgroup",{"_index":2730,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.getouterwidthdimensioncorrection",{"_index":1759,"title":{},"body":{"classes/Grid.html":{}}}],["this.getoverlayposition(a",{"_index":3808,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["this.getrelativeluminance(color1",{"_index":4128,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["this.getrelativeluminance(color2",{"_index":4130,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["this.getsectionindex(angle",{"_index":3823,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["this.getseriesgroups(seriesset",{"_index":3298,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.getsinglevalue(data",{"_index":232,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["this.gettextmeasurement(array",{"_index":2685,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.gettextmeasurement(elementstofilter",{"_index":2677,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.getthresholdline(limit.series",{"_index":4301,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["this.gettickdistance(array",{"_index":2684,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.gettickdistance(axislabels",{"_index":2584,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.gettooltipposition(datapoint",{"_index":1499,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.getvisibleserieswithlegend",{"_index":3266,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.getvisibleserieswithlegendbackup",{"_index":3265,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.grid",{"_index":620,"title":{},"body":{"classes/Chart.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.grid.build",{"_index":691,"title":{},"body":{"classes/Chart.html":{}}}],["this.grid.config",{"_index":2991,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.grid.config().dimension",{"_index":714,"title":{},"body":{"classes/Chart.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.grid.getlasagna().addlayer",{"_index":2931,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.grid.getlasagna().removelayer(zoomplugin.layer_name",{"_index":2976,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.grid.scales",{"_index":708,"title":{},"body":{"classes/Chart.html":{}}}],["this.grid.scales.x.list",{"_index":2987,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.grid.target(this.target",{"_index":690,"title":{},"body":{"classes/Chart.html":{}}}],["this.grid.updatedimensions(dimensions",{"_index":730,"title":{},"body":{"classes/Chart.html":{}}}],["this.grid.updateranges",{"_index":711,"title":{},"body":{"classes/Chart.html":{}}}],["this.gridconfig",{"_index":4033,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.gridconfig.interactionplugins",{"_index":4035,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.gridelementslayer",{"_index":1747,"title":{},"body":{"classes/Grid.html":{}}}],["this.gridx",{"_index":2496,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.gridx.tickgroup",{"_index":2497,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.gridy",{"_index":2511,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.gridy.tickgroup",{"_index":2645,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.handleclose",{"_index":1342,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.handlelabelupdate",{"_index":3024,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["this.handlelineupdate",{"_index":3089,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["this.handlemarginupdate",{"_index":2440,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.handleopen",{"_index":1340,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.handleseriesstatechange(e",{"_index":2400,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.handleticklabeloverflow(labelgroup",{"_index":2558,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.handleticklabeloverflowdebounceindex[scale.id",{"_index":2616,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.hasrightyaxis",{"_index":2728,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.height",{"_index":1054,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["this.hidesubject.next",{"_index":1483,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.highlighteddatapoints",{"_index":3253,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.highlighteddatapoints[chartseries.id",{"_index":3254,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["this.highlighteddatapoints[seriesid",{"_index":4067,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.icon",{"_index":3399,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this.id",{"_index":1532,"title":{},"body":{"classes/DataSeries.html":{},"classes/Scale.html":{}}}],["this.initialize",{"_index":659,"title":{},"body":{"classes/Chart.html":{}}}],["this.initplugin",{"_index":1135,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["this.initplugin$.complete",{"_index":1138,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["this.initplugin$.next",{"_index":1139,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["this.inputseriesset",{"_index":3229,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.interaction_margin",{"_index":3433,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["this.interactionhandlermap",{"_index":2923,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.interactionhandlermap[data.interactiontype",{"_index":2943,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.interactionhandlermap[data.interactiontype](xcoord",{"_index":2947,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.interactionlabellayer",{"_index":3017,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["this.interactionlabellayer.select(`.${interactionlabelplugin.layer_name",{"_index":3041,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["this.interactionlinelayer",{"_index":3087,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["this.interactionplugins",{"_index":260,"title":{},"body":{"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{}}}],["this.interactive",{"_index":421,"title":{},"body":{"classes/BarStatusGridConfig.html":{},"components/LegendSeriesComponent.html":{}}}],["this.interactivearea",{"_index":1717,"title":{},"body":{"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{}}}],["this.intersectionobserver",{"_index":898,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.intersectionobserver.observe(this.elref.nativeelement",{"_index":900,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.intersectionobserver?.unobserve(this.elref.nativeelement",{"_index":921,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.isapproximatelyequal(margin1.bottom",{"_index":2807,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.isapproximatelyequal(margin1.left",{"_index":2809,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.isapproximatelyequal(margin1.right",{"_index":2805,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.isapproximatelyequal(margin1.top",{"_index":2803,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.ischartinview",{"_index":1475,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["this.isdomainfixed",{"_index":3955,"title":{},"body":{"classes/Scale.html":{}}}],["this.ishorizontalclassapplied",{"_index":3403,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this.islegendactive",{"_index":3286,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["this.isopen",{"_index":1272,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipNode.html":{}}}],["this.isreversed",{"_index":3959,"title":{},"body":{"classes/Scale.html":{}}}],["this.isselectedchange.next(!this.isselected",{"_index":3408,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this.isserieshidden(s.id",{"_index":3257,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.isvertical",{"_index":1401,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.lasagna",{"_index":1719,"title":{},"body":{"classes/Grid.html":{}}}],["this.lasagna.addlayer",{"_index":1748,"title":{},"body":{"classes/Grid.html":{}}}],["this.lastgridconfig",{"_index":4036,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.lastgridconfig.interactionplugins",{"_index":4037,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.lastinteractionvaluespayload",{"_index":3022,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["this.lastinteractionvaluespayload.interactiontype",{"_index":3028,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["this.lastinteractionvaluespayload.values.x",{"_index":3033,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["this.lastinteractionvaluespayload.values.x[xscale.id",{"_index":3034,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["this.lastusedindex",{"_index":3976,"title":{},"body":{"classes/SequentialValueProvider.html":{}}}],["this.leftscaleid",{"_index":2384,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.legend",{"_index":3397,"title":{},"body":{"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["this.legend.active",{"_index":3401,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this.legend.activechanged.subscribe((active",{"_index":3398,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this.legend.interactive",{"_index":3402,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this.legend.orientation",{"_index":3404,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this.legend.seriescolor",{"_index":3909,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["this.legend.seriesicon",{"_index":3400,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this.legend.seriesunitlabel",{"_index":3907,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["this.legendinteractionassist",{"_index":3196,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.legendinteractionassist.emphasizeseries(seriesid",{"_index":3249,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.legendinteractionassist.isserieshidden(seriesid",{"_index":3250,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.legendinteractionassist.renderstatesindex",{"_index":3205,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.legendinteractionassist.resetseries",{"_index":3244,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.legendinteractionassist.setgroupvisibility(seriesid",{"_index":3240,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.legendinteractionassist.update(seriesset",{"_index":3237,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.legendseries",{"_index":3910,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["this.legendseries.hasinputdescription",{"_index":3912,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["this.legendseries.hasprojecteddescription",{"_index":3913,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["this.legendseriesset",{"_index":3234,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.legendseriesset.filter(s",{"_index":3256,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.loggerservice.warn(\"thresholds",{"_index":4231,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["this.margin.bottom",{"_index":1588,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["this.margin.left",{"_index":1583,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["this.margin.right",{"_index":1582,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["this.margin.top",{"_index":1587,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["this.marker",{"_index":1032,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["this.marker.getsvg",{"_index":1033,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["this.marker.setcolor(this.color",{"_index":1031,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["this.markerprovider",{"_index":76,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["this.markerprovider.get",{"_index":77,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["this.maxsize",{"_index":1053,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["this.movezoneindex(zoneindexes[zone.id",{"_index":4329,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["this.name",{"_index":1535,"title":{},"body":{"classes/DataSeries.html":{}}}],["this.ngzone.run",{"_index":917,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.ngzone.runoutsideangular",{"_index":918,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.onevent",{"_index":3290,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.onevent(event",{"_index":3291,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.onsetseriesstates(rs",{"_index":670,"title":{},"body":{"classes/Chart.html":{}}}],["this.onupdate(d",{"_index":664,"title":{},"body":{"classes/Chart.html":{}}}],["this.onupdatedimensions",{"_index":667,"title":{},"body":{"classes/Chart.html":{}}}],["this.openpopoversubject",{"_index":1226,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.openpopoversubject.complete",{"_index":1227,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.openpopoversubject.next",{"_index":1273,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.opentimeout",{"_index":1359,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.opentooltips.next",{"_index":1360,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.opposite(connection_points[sectionindex].x",{"_index":3826,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["this.opposite(connection_points[sectionindex].y",{"_index":3827,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["this.overlaysetup",{"_index":1470,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.plugin.chart.updatedimensions",{"_index":958,"title":{},"body":{"components/ChartDonutContentComponent.html":{}}}],["this.plugin.contentpositionupdatesubject.subscribe((contentposition",{"_index":956,"title":{},"body":{"components/ChartDonutContentComponent.html":{}}}],["this.plugin.hidesubject.pipe(takeuntil(this.unsubscribe$)).subscribe",{"_index":1341,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.plugin.orientation",{"_index":1427,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.plugin.showsubject.pipe(takeuntil(this.unsubscribe$)).subscribe",{"_index":1339,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.plugin?.openpopoversubject.pipe",{"_index":1140,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["this.plugin?.updatepositionsubject.pipe",{"_index":1143,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["this.plugins.findindex(plugin",{"_index":624,"title":{},"body":{"classes/Chart.html":{}}}],["this.plugins.foreach(p",{"_index":701,"title":{},"body":{"classes/Chart.html":{}}}],["this.plugins.push(plugin",{"_index":622,"title":{},"body":{"classes/Chart.html":{}}}],["this.plugins.splice(pluginindex",{"_index":627,"title":{},"body":{"classes/Chart.html":{}}}],["this.plugins.unshift(renderengineplugin",{"_index":655,"title":{},"body":{"classes/Chart.html":{}}}],["this.plugins[pluginindex].destroy",{"_index":626,"title":{},"body":{"classes/Chart.html":{}}}],["this.popover?.resetsize",{"_index":1145,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["this.popover?.updateposition",{"_index":1157,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["this.popovertargetposition",{"_index":1262,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.processdatapoints(datapoints",{"_index":1223,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.processedcolors",{"_index":3754,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["this.processedcolors[clr",{"_index":3752,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["this.processhighlighteddatapoints(datapoints",{"_index":1476,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.projecteddescription",{"_index":3411,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this.projecteddescription.nativeelement.children.length",{"_index":3412,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this.providedvalues",{"_index":3979,"title":{},"body":{"classes/SequentialValueProvider.html":{}}}],["this.providedvalues[entityid",{"_index":3975,"title":{},"body":{"classes/SequentialValueProvider.html":{}}}],["this.publishrenderstates",{"_index":3239,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.recalculatemargins(this.container",{"_index":2396,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.reconcilemarginsdebounce",{"_index":2794,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.reconcilemarginswithdebounce(oldmargin",{"_index":2639,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.reconfigurechart(this.sparks[existingsparkindex].chart",{"_index":4053,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.redraw",{"_index":908,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.removeplugin(classref",{"_index":629,"title":{},"body":{"classes/Chart.html":{}}}],["this.renderengine",{"_index":619,"title":{},"body":{"classes/Chart.html":{}}}],["this.renderengine.setseriesstates(renderstatedata",{"_index":744,"title":{},"body":{"classes/Chart.html":{}}}],["this.renderingarea",{"_index":1744,"title":{},"body":{"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{}}}],["this.renderingarea.attrs(renderingareaattrs",{"_index":1800,"title":{},"body":{"classes/Grid.html":{}}}],["this.renderingareaclippath",{"_index":1803,"title":{},"body":{"classes/Grid.html":{}}}],["this.renderingareaclippath.attrs(renderingareaclippathattrs",{"_index":1799,"title":{},"body":{"classes/Grid.html":{}}}],["this.rendermarkersvg(svg",{"_index":1028,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["this.renderstatesindex[series.id",{"_index":3305,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.renderstatesindex[seriesid",{"_index":3309,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.reset",{"_index":3501,"title":{},"body":{"classes/MappedValueProvider.html":{},"classes/ProcessedColorProvider.html":{},"classes/SequentialValueProvider.html":{}}}],["this.resetseries",{"_index":3302,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.resetvisibleseries",{"_index":3202,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.resizehandler",{"_index":912,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.resizeobserver",{"_index":913,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.resizeobserver?.observe((this.elref.nativeelement",{"_index":919,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.resizeobserver?.unobserve(this.elref.nativeelement",{"_index":922,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.reversed(!this.isreversed",{"_index":3957,"title":{},"body":{"classes/Scale.html":{}}}],["this.rightscaleid",{"_index":2385,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.rightscaleid?.length",{"_index":2642,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.scalekey",{"_index":349,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["this.scales",{"_index":2732,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.scales.x",{"_index":2471,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.scales.y",{"_index":2477,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.scales?.x?.list[0].d3scale",{"_index":2758,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.scales[\"x\"].index[this.bottomscaleid",{"_index":2485,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.scales[\"x\"].list[0].id",{"_index":2368,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.scales[\"x\"]?.index[this.bottomscaleid",{"_index":2733,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.scales[\"y\"].index[this.leftscaleid",{"_index":2501,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.scales[\"y\"].index[this.rightscaleid",{"_index":2513,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.scales[\"y\"].list[0].id",{"_index":2372,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.selectallaxislabels(labelgroup",{"_index":2538,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.selecteddatapointidxfn(renderseries.dataseries.id",{"_index":390,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["this.series",{"_index":72,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/LineAccessors.html":{},"classes/NoopAccessors.html":{},"classes/RadialAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["this.series.category",{"_index":224,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["this.series.category(dataseries.id",{"_index":225,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["this.seriesgroups",{"_index":3297,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.seriesgroups[groupid",{"_index":3318,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.serieshasadditionalcontent",{"_index":3911,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["this.seriesindex",{"_index":3299,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.seriesindex[seriesid",{"_index":3331,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.seriesprocessor",{"_index":3195,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.seriesprocessor(inputseriesset.map(series",{"_index":3231,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.seriesrenderstate",{"_index":3392,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this.seriesstatessubject.next(renderstatedata",{"_index":704,"title":{},"body":{"classes/Chart.html":{}}}],["this.seriesstatessubject.pipe(untildestroy",{"_index":668,"title":{},"body":{"classes/Chart.html":{}}}],["this.seriesvisibilitymap[d.seriesid",{"_index":1484,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.seriesvisibilitymap[series.seriesid",{"_index":1479,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.setattributes",{"_index":3703,"title":{},"body":{"classes/PathMarker.html":{}}}],["this.setattributes({\"fill",{"_index":3706,"title":{},"body":{"classes/PathMarker.html":{}}}],["this.setgroupstate(group",{"_index":3322,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.setrenderstate(s",{"_index":3319,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.setvisibility(s",{"_index":3320,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.showbottomaxis",{"_index":4061,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.showsubject.next",{"_index":1502,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.showtopborder",{"_index":4060,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.simulation",{"_index":1365,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.simulation.stop",{"_index":1366,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.sourceprovider.get(entityid",{"_index":3749,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["this.sparks",{"_index":4044,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.sparks.findindex(existingspark",{"_index":4050,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.startsimulation(this.tooltipdirectivesindex",{"_index":1388,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.streams[key].complete",{"_index":1632,"title":{},"body":{"classes/EventBus.html":{}}}],["this.streams[streamid",{"_index":1630,"title":{},"body":{"classes/EventBus.html":{}}}],["this.styledsvg",{"_index":4093,"title":{},"body":{"classes/SvgMarker.html":{}}}],["this.svg",{"_index":3712,"title":{},"body":{"classes/PathMarker.html":{},"classes/SvgMarker.html":{}}}],["this.svg.complete",{"_index":1036,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["this.svg.next(this.marker.getsvg",{"_index":1035,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["this.svg.subscribe((svg",{"_index":1027,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["this.svgcontent.nativeelement",{"_index":1039,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["this.synchandlermap",{"_index":3198,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.synchandlermap[event.type](...args",{"_index":3273,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.syncsubscription",{"_index":3268,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.syncsubscription.unsubscribe",{"_index":3279,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.target",{"_index":635,"title":{},"body":{"classes/Chart.html":{},"interfaces/IScaleSVGElement.html":{}}}],["this.target?.append(\"defs",{"_index":673,"title":{},"body":{"classes/Chart.html":{}}}],["this.target?.remove",{"_index":703,"title":{},"body":{"classes/Chart.html":{}}}],["this.target?.style(\"height",{"_index":738,"title":{},"body":{"classes/Chart.html":{}}}],["this.target?.style(\"width",{"_index":741,"title":{},"body":{"classes/Chart.html":{}}}],["this.toggleseries",{"_index":3204,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.tooltipdirectivesindex",{"_index":1356,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.tooltipdirectivesindex[seriesid",{"_index":1378,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.tooltippositionoffset",{"_index":3802,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["this.tooltips.foreach(tooltip",{"_index":1348,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.unitlabel",{"_index":3906,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["this.unsubscribe$.complete",{"_index":1343,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.unsubscribe$.next",{"_index":1338,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.update",{"_index":1763,"title":{},"body":{"classes/Grid.html":{}}}],["this.update(this.inputseriesset",{"_index":3241,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.update.next(this.plugin?.datapoints",{"_index":1158,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["this.updateaxes",{"_index":2439,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.updateborders",{"_index":1755,"title":{},"body":{"classes/Grid.html":{}}}],["this.updatebottomborder",{"_index":1844,"title":{},"body":{"classes/Grid.html":{}}}],["this.updatechartdimensionssubject?.next",{"_index":2798,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.updatedimensionssubject",{"_index":615,"title":{},"body":{"classes/Chart.html":{}}}],["this.updatedimensionssubject.next",{"_index":696,"title":{},"body":{"classes/Chart.html":{}}}],["this.updatedimensionssubject.pipe(untildestroy",{"_index":665,"title":{},"body":{"classes/Chart.html":{}}}],["this.updatelabel(xscale",{"_index":3035,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["this.updateline(this.interactionlinelayer",{"_index":3091,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["this.updatepositionsubject",{"_index":1224,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.updatepositionsubject.complete",{"_index":1225,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.updatepositionsubject.next(this.popovertargetposition",{"_index":1271,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.updateranges",{"_index":1761,"title":{},"body":{"classes/Grid.html":{}}}],["this.updatesparks(sparks",{"_index":4041,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.updatesubject.next(seriesset",{"_index":695,"title":{},"body":{"classes/Chart.html":{}}}],["this.updatesubject.pipe(untildestroy",{"_index":662,"title":{},"body":{"classes/Chart.html":{}}}],["this.updatesvg",{"_index":3711,"title":{},"body":{"classes/PathMarker.html":{}}}],["this.updatetargetdimensions(dimensionconfig",{"_index":722,"title":{},"body":{"classes/Chart.html":{}}}],["this.updatetargetdimensions(this.grid.config().dimension",{"_index":692,"title":{},"body":{"classes/Chart.html":{}}}],["this.updatexaxis",{"_index":2524,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.updateyaxes",{"_index":2525,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.valuemap[entityid",{"_index":3502,"title":{},"body":{"classes/MappedValueProvider.html":{}}}],["this.values.length",{"_index":3977,"title":{},"body":{"classes/SequentialValueProvider.html":{}}}],["this.values[index",{"_index":3978,"title":{},"body":{"classes/SequentialValueProvider.html":{}}}],["this.viewbox",{"_index":1046,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["this.visible",{"_index":804,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{}}}],["this.width",{"_index":1051,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["this.zoombrushlayer",{"_index":2930,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.zoombrushlayer.append(\"g",{"_index":2950,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["those",{"_index":3275,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"injectables/ThresholdsService.html":{},"license.html":{}}}],["three",{"_index":4937,"title":{},"body":{"miscellaneous/variables.html":{}}}],["threshold",{"_index":1613,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"interfaces/ZoneCross.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["thresholdfrom",{"_index":4184,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["thresholdfrom.x",{"_index":4320,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["thresholdfrom.y",{"_index":4322,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["thresholds",{"_index":4148,"title":{"additional-documentation/thresholds.html":{}},"body":{"injectables/ThresholdsService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["thresholds/thresholds",{"_index":3688,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["thresholds_main_chart_renderer_config",{"_index":4172,"title":{},"body":{"injectables/ThresholdsService.html":{},"miscellaneous/variables.html":{}}}],["thresholds_summary_renderer_config",{"_index":4176,"title":{},"body":{"injectables/ThresholdsService.html":{},"miscellaneous/variables.html":{}}}],["thresholdsdata",{"_index":1603,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["thresholdsdata.push(arcdatum",{"_index":1609,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["thresholdshift",{"_index":4318,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["thresholdshift.x",{"_index":4325,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["thresholdshift.y",{"_index":4326,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["thresholdsservice",{"_index":3662,"title":{"injectables/ThresholdsService.html":{}},"body":{"modules/NuiChartsModule.html":{},"injectables/ThresholdsService.html":{},"overview.html":{}}}],["thresholdsservice.series_id_suffix",{"_index":4247,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["thresholdto",{"_index":4185,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["thresholdto.x",{"_index":4319,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["thresholdto.y",{"_index":4321,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["through",{"_index":825,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"license.html":{}}}],["throw",{"_index":612,"title":{},"body":{"classes/Chart.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialPopoverPlugin.html":{},"classes/Renderer.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{}}}],["tick",{"_index":1705,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"classes/InteractionLabelPlugin.html":{},"interfaces/ScalesIndex.html":{},"miscellaneous/typealiases.html":{}}}],["tick.getattribute(\"transform",{"_index":2708,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["tick.getboundingclientrect().width",{"_index":2703,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["tick_dimension_correction",{"_index":1707,"title":{},"body":{"classes/Grid.html":{}}}],["tick_label_overflow_debounce_interval",{"_index":2352,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["tickaxis",{"_index":2450,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"miscellaneous/variables.html":{}}}],["tickaxis.scale().ticks(config.approximateticks",{"_index":5043,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tickaxis.ticks(config.approximateticks",{"_index":2455,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["tickformat",{"_index":2454,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["tickformat(scale.formatters[\"tick",{"_index":2447,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["tickgroup",{"_index":2085,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["ticklabel",{"_index":161,"title":{},"body":{"classes/AxisConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["ticks",{"_index":182,"title":{},"body":{"classes/AxisConfig.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{},"miscellaneous/variables.html":{}}}],["ticks(config.approximateticks",{"_index":2445,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["ticks.length",{"_index":5044,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ticks[0",{"_index":5046,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ticks[ticks.length",{"_index":5048,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ticksaverage",{"_index":5047,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ticksize",{"_index":162,"title":{},"body":{"classes/AxisConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["ticksize(0",{"_index":2446,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["ticksize(config.ticksize",{"_index":2452,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["ticksize(size",{"_index":2466,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["tickvalues(scale.bandticks",{"_index":2453,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["tile",{"_index":495,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["tile'},{'name",{"_index":504,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["tile.component",{"_index":3685,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["tile.component.html",{"_index":499,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["tile.component.less",{"_index":497,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["tile.component.ts",{"_index":488,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["tile.component.ts:26",{"_index":3900,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["tile.component.ts:31",{"_index":3901,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["tile.component.ts:36",{"_index":3898,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["tile.component.ts:41",{"_index":3899,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["tile.component.ts:43",{"_index":3897,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["tile.component.ts:63",{"_index":3903,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["tile.component.ts:67",{"_index":3902,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["tile/basic",{"_index":486,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"modules/NuiChartsModule.html":{}}}],["tile/rich",{"_index":3686,"title":{},"body":{"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{}}}],["time",{"_index":4168,"title":{},"body":{"injectables/ThresholdsService.html":{},"dependencies.html":{}}}],["timeframe",{"_index":4588,"title":{"additional-documentation/timeframe-selection.html":{}},"body":{"index.html":{}}}],["timeinterval",{"_index":4166,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["timeminute(date",{"_index":5002,"title":{},"body":{"miscellaneous/variables.html":{}}}],["timeout",{"_index":1265,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IScaleSVGElement.html":{}}}],["timescale",{"_index":4348,"title":{"classes/TimeScale.html":{}},"body":{"classes/TimeScale.html":{}}}],["timing",{"_index":1275,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["title",{"_index":2546,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/InteractionLabelPlugin.html":{},"license.html":{}}}],["titletext",{"_index":2554,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["toc",{"_index":4581,"title":{},"body":{"index.html":{}}}],["todo",{"_index":128,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/Chart.html":{},"classes/ChartPalette.html":{},"components/ChartTooltipsComponent.html":{},"classes/DataSeries.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IXYScales.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"interfaces/ScalesIndex.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYGridConfig.html":{}}}],["together",{"_index":431,"title":{},"body":{"classes/BarStatusGridConfig.html":{}}}],["toggleseries",{"_index":797,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/LegendInteractionAssist.html":{},"miscellaneous/enumerations.html":{}}}],["toggling",{"_index":2191,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["tooltip",{"_index":1282,"title":{},"body":{"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["tooltip'},{'name",{"_index":515,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["tooltip.component",{"_index":3680,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["tooltip.component.html",{"_index":1284,"title":{},"body":{"components/ChartTooltipComponent.html":{}}}],["tooltip.component.less",{"_index":1283,"title":{},"body":{"components/ChartTooltipComponent.html":{}}}],["tooltip.component.ts",{"_index":1279,"title":{},"body":{"components/ChartTooltipComponent.html":{}}}],["tooltip.component.ts:22",{"_index":1285,"title":{},"body":{"components/ChartTooltipComponent.html":{}}}],["tooltip.directive",{"_index":1326,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"modules/NuiChartsModule.html":{}}}],["tooltip.elementref.nativeelement.getattribute(\"series",{"_index":1351,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["tooltip.getoverlayelement",{"_index":1377,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["tooltip_position_offset",{"_index":1451,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"miscellaneous/variables.html":{}}}],["tooltipdirectivesindex",{"_index":1331,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["tooltipindex",{"_index":1391,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["tooltipindex[node.seriesid",{"_index":1421,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["tooltippositionoffset",{"_index":1431,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["tooltippositions",{"_index":1376,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["tooltippositions[seriesid",{"_index":1379,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["tooltiprelativeposition",{"_index":1498,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["tooltips",{"_index":435,"title":{"additional-documentation/plugins/tooltips.html":{}},"body":{"classes/BarTooltipsPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{},"injectables/ThresholdsService.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/plugins.html":{}}}],["tooltips'},{'name",{"_index":517,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["tooltips.component",{"_index":3681,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["tooltips.component.html",{"_index":1298,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["tooltips.component.less",{"_index":1297,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["tooltips.component.ts",{"_index":1296,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["tooltips.component.ts:27",{"_index":1303,"title":{},"body":{"components/ChartTooltipsComponent.html":{}}}],["tooltips.component.ts:29",{"_index":1304,"title":{},"body":{"components/ChartTooltipsComponent.html":{}}}],["tooltips.component.ts:31",{"_index":1312,"title":{},"body":{"components/ChartTooltipsComponent.html":{}}}],["tooltips.component.ts:33",{"_index":1309,"title":{},"body":{"components/ChartTooltipsComponent.html":{}}}],["tooltips.component.ts:34",{"_index":1308,"title":{},"body":{"components/ChartTooltipsComponent.html":{}}}],["tooltips.component.ts:44",{"_index":1302,"title":{},"body":{"components/ChartTooltipsComponent.html":{}}}],["tooltips.component.ts:65",{"_index":1307,"title":{},"body":{"components/ChartTooltipsComponent.html":{}}}],["tooltips/chart",{"_index":1278,"title":{},"body":{"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"modules/NuiChartsModule.html":{}}}],["top",{"_index":111,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYGridConfig.html":{},"classes/MarkerUtils.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYGridConfig.html":{},"miscellaneous/variables.html":{}}}],["topofrange",{"_index":2768,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["toremove",{"_index":2533,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["toremove.foreach((group",{"_index":2535,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["tort",{"_index":4812,"title":{},"body":{"license.html":{}}}],["track",{"_index":3492,"title":{},"body":{"classes/MappedValueProvider.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{}}}],["trackby",{"_index":4015,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["trackbyfn",{"_index":1301,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"classes/SparkChartAssist.html":{}}}],["trackbyfn(_index",{"_index":4012,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["trackbyfn(index",{"_index":1305,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["tracking",{"_index":4681,"title":{},"body":{"license.html":{}}}],["trade",{"_index":4784,"title":{},"body":{"license.html":{}}}],["trademark",{"_index":4748,"title":{},"body":{"license.html":{}}}],["trademarks",{"_index":4782,"title":{},"body":{"license.html":{}}}],["transfer",{"_index":1981,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"license.html":{}}}],["transform",{"_index":2490,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/InteractionLabelPlugin.html":{},"classes/MarkerUtils.html":{}}}],["transformation",{"_index":4641,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["transformed",{"_index":2913,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["transforms",{"_index":1161,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{}}}],["transformval",{"_index":2707,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["transformval.indexof",{"_index":2712,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["transition",{"_index":1287,"title":{},"body":{"components/ChartTooltipComponent.html":{}}}],["transition(\":enter",{"_index":1292,"title":{},"body":{"components/ChartTooltipComponent.html":{}}}],["transition(\":leave",{"_index":1295,"title":{},"body":{"components/ChartTooltipComponent.html":{}}}],["transitionduration",{"_index":1939,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["translate",{"_index":2504,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["translate(${clampedx},0",{"_index":3072,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["translate(${rightscalelabelx",{"_index":2518,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["translate(${this.config().dimension.width",{"_index":2520,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["translate(${tx",{"_index":2756,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["translate(${xcoord",{"_index":3540,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["translate(0",{"_index":2489,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/InteractionLabelPlugin.html":{}}}],["translate(0,${heightoffset",{"_index":3074,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["translating",{"_index":2543,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["translation",{"_index":4642,"title":{},"body":{"license.html":{}}}],["transparent",{"_index":1811,"title":{},"body":{"classes/Grid.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"injectables/ThresholdsService.html":{}}}],["triangle",{"_index":4969,"title":{},"body":{"miscellaneous/variables.html":{}}}],["trigger",{"_index":1204,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["trigger(\"tooltip",{"_index":1291,"title":{},"body":{"components/ChartTooltipComponent.html":{}}}],["triggered",{"_index":2956,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["triggering",{"_index":4914,"title":{},"body":{"miscellaneous/variables.html":{}}}],["true",{"_index":126,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/XYGridConfig.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["true).attr(\"opacity",{"_index":2611,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["try",{"_index":243,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["ts",{"_index":130,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/Chart.html":{},"classes/GridConfig.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/Renderer.html":{},"classes/XYGridConfig.html":{}}}],["tuned",{"_index":1410,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["two",{"_index":4120,"title":{},"body":{"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"miscellaneous/variables.html":{}}}],["tx",{"_index":2748,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["ty",{"_index":2750,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["type",{"_index":24,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"modules/NuiChartsModule.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":4879,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeerror(\"`cssescape",{"_index":4441,"title":{},"body":{"classes/UtilityService.html":{}}}],["typeof",{"_index":229,"title":{},"body":{"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Chart.html":{},"classes/ChartPopoverPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{}}}],["types",{"_index":187,"title":{"additional-documentation/chart-types.html":{}},"body":{"classes/AxisConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISpark.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MappedValueProvider.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/ProcessedColorProvider.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/XYGridConfig.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"additional-documentation/chart-types.html":{}}}],["types/d3",{"_index":4508,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":380,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/Grid.html":{},"classes/LegendInteractionAssist.html":{},"modules/NuiChartsModule.html":{}}}],["typical",{"_index":2239,"title":{},"body":{"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{}}}],["ui/bits",{"_index":1132,"title":{},"body":{"components/ChartPopoverComponent.html":{},"classes/MarkerUtils.html":{},"modules/NuiChartsModule.html":{},"injectables/ThresholdsService.html":{},"dependencies.html":{}}}],["ui/bits/bundles/css/styles.css",{"_index":4578,"title":{},"body":{"index.html":{}}}],["ui/charts",{"_index":4564,"title":{},"body":{"index.html":{}}}],["ui/charts/bundles/css/styles.css",{"_index":4579,"title":{},"body":{"index.html":{}}}],["unclipped",{"_index":2110,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"miscellaneous/enumerations.html":{}}}],["unclippeddata",{"_index":2109,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"miscellaneous/enumerations.html":{}}}],["undefined",{"_index":75,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialAccessors.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{}}}],["under",{"_index":4614,"title":{},"body":{"license.html":{}}}],["understand",{"_index":342,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["union",{"_index":4610,"title":{},"body":{"license.html":{}}}],["unionwith",{"_index":4218,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["unionwith(breakpoints",{"_index":4270,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["uniq",{"_index":2331,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["uniq(emphasizedseries.map(s",{"_index":2420,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["unique",{"_index":4269,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["unit",{"_index":3124,"title":{},"body":{"components/LegendComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["unitlabel",{"_index":3895,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["unknown",{"_index":4525,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["unless",{"_index":4773,"title":{},"body":{"license.html":{}}}],["unpredictable",{"_index":4571,"title":{},"body":{"index.html":{}}}],["unsubscribe",{"_index":1328,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["unsyncchartassist",{"_index":3278,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["unsynchronize",{"_index":3274,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["until",{"_index":1953,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["untildestroy",{"_index":660,"title":{},"body":{"classes/Chart.html":{},"interfaces/IScaleSVGElement.html":{}}}],["unused",{"_index":3669,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["up",{"_index":2789,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"miscellaneous/variables.html":{}}}],["update",{"_index":446,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/SparkChartAssist.html":{},"classes/ZoomPlugin.html":{}}}],["update(inputseriesset",{"_index":782,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["update(seriesset",{"_index":580,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{}}}],["updateaxes",{"_index":2523,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["updateborders",{"_index":1843,"title":{},"body":{"classes/Grid.html":{}}}],["updatebottomborder",{"_index":1830,"title":{},"body":{"classes/Grid.html":{}}}],["updatechartdimensionssubject",{"_index":1640,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["updated",{"_index":652,"title":{},"body":{"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["updatedimensions",{"_index":447,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGrid.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/ZoomPlugin.html":{}}}],["updatedimensions(dimensions",{"_index":1680,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["updatedimensionssubject",{"_index":610,"title":{},"body":{"classes/Chart.html":{}}}],["updatelabel(scale",{"_index":3039,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["updatelegend",{"_index":3228,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["updateline(layer",{"_index":3092,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["updatepositionsubject",{"_index":1173,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["updateranges",{"_index":1644,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["updates",{"_index":779,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["updatesparks",{"_index":3990,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["updatesparks(sparks",{"_index":4021,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["updatesubject",{"_index":609,"title":{},"body":{"classes/Chart.html":{}}}],["updatesvg",{"_index":3713,"title":{},"body":{"classes/PathMarker.html":{}}}],["updatetargetdimensions(dimensionconfig",{"_index":732,"title":{},"body":{"classes/Chart.html":{}}}],["updatexaxis",{"_index":2484,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["updateyaxes",{"_index":2499,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["updating",{"_index":1780,"title":{},"body":{"classes/Grid.html":{}}}],["upon",{"_index":2784,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["url(\"#${cssfilterid.grayscale",{"_index":5049,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usage",{"_index":777,"title":{"additional-documentation/advanced-usage.html":{}},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"injectables/ThresholdsService.html":{},"index.html":{},"additional-documentation/advanced-usage.html":{}}}],["use",{"_index":244,"title":{},"body":{"classes/BarAccessors.html":{},"classes/Chart.html":{},"components/ChartTooltipsComponent.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":285,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"injectables/ChartCollectionService.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"modules/NuiChartsModule.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["useenhancedlinecaps",{"_index":2131,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/MissingDataLineRendererConfig.html":{}}}],["useexisting",{"_index":870,"title":{},"body":{"components/ChartComponent.html":{}}}],["user",{"_index":1539,"title":{},"body":{"classes/DataSeries.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{}}}],["uses",{"_index":750,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["using",{"_index":1164,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/Grid.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IXYDataAccessors.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/Renderer.html":{},"injectables/ThresholdsService.html":{},"classes/XYAccessors.html":{},"classes/XYRenderer.html":{},"license.html":{}}}],["usually",{"_index":1976,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"injectables/ThresholdsService.html":{}}}],["util.ts",{"_index":1593,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["util.ts:6",{"_index":1596,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["utility.service",{"_index":3939,"title":{},"body":{"classes/Scale.html":{}}}],["utilityservice",{"_index":329,"title":{"classes/UtilityService.html":{}},"body":{"classes/BarHighlightStrategy.html":{},"classes/Grid.html":{},"classes/InteractionLabelPlugin.html":{},"classes/Scale.html":{},"classes/SparkChartAssist.html":{},"classes/UtilityService.html":{}}}],["utilityservice.clamptorange(x",{"_index":3071,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["utilityservice.findnearestindex(series.data",{"_index":374,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["utilityservice.getcloser",{"_index":4417,"title":{},"body":{"classes/UtilityService.html":{}}}],["utilityservice.getclosestindex(series.data",{"_index":382,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["utilityservice.getscalevalues(xscales",{"_index":4461,"title":{},"body":{"classes/UtilityService.html":{}}}],["utilityservice.getscalevalues(yscales",{"_index":4463,"title":{},"body":{"classes/UtilityService.html":{}}}],["utilityservice.getvalueaccessor(accessor",{"_index":4406,"title":{},"body":{"classes/UtilityService.html":{}}}],["utilityservice.uuid",{"_index":1733,"title":{},"body":{"classes/Grid.html":{},"classes/Scale.html":{},"classes/SparkChartAssist.html":{}}}],["utils.ts",{"_index":3506,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["utils.ts:157",{"_index":3528,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["utils.ts:23",{"_index":3512,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["utils.ts:26",{"_index":3514,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["utils.ts:37",{"_index":3522,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["utils.ts:96",{"_index":3518,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["utilservice",{"_index":3529,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["uuid",{"_index":4367,"title":{},"body":{"classes/UtilityService.html":{}}}],["ux",{"_index":92,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"index.html":{}}}],["v.12",{"_index":4934,"title":{},"body":{"miscellaneous/variables.html":{}}}],["v9",{"_index":2834,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["valid",{"_index":249,"title":{},"body":{"classes/BarAccessors.html":{},"classes/DataSeries.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{},"classes/XYGridConfig.html":{}}}],["validdatapoints",{"_index":1255,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{}}}],["validdatapointsvalues",{"_index":1259,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["validdatapointsvalues.length",{"_index":1261,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["value",{"_index":110,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"components/ChartComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISpark.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopRenderer.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.length",{"_index":364,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["value.valueof",{"_index":4402,"title":{},"body":{"classes/UtilityService.html":{}}}],["value?.tolocalestring",{"_index":3481,"title":{},"body":{"classes/LinearScale.html":{}}}],["valueaccessor",{"_index":3179,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{}}}],["valueaccessor(haystack[closestdataindex",{"_index":4418,"title":{},"body":{"classes/UtilityService.html":{}}}],["valueaccessor(straw",{"_index":4409,"title":{},"body":{"classes/UtilityService.html":{}}}],["valuemap",{"_index":1906,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/MappedValueProvider.html":{},"classes/Renderer.html":{}}}],["valueof",{"_index":371,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/UtilityService.html":{}}}],["values",{"_index":294,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values(limits).map((limit",{"_index":4300,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["values(this.renderstatesindex",{"_index":3308,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["values(validdatapoints",{"_index":1260,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["values(validdatapoints).length",{"_index":1485,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["values.x",{"_index":4465,"title":{},"body":{"classes/UtilityService.html":{}}}],["values.y",{"_index":4467,"title":{},"body":{"classes/UtilityService.html":{}}}],["values[this.scalekey",{"_index":338,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["var",{"_index":502,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variables",{"_index":4883,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["various",{"_index":3526,"title":{},"body":{"classes/MarkerUtils.html":{},"index.html":{}}}],["vars",{"_index":3670,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["vector",{"_index":3705,"title":{},"body":{"classes/PathMarker.html":{}}}],["verbal",{"_index":4672,"title":{},"body":{"license.html":{}}}],["version",{"_index":4566,"title":{},"body":{"index.html":{},"license.html":{}}}],["versions",{"_index":1863,"title":{},"body":{"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["vertical",{"_index":1454,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYGridConfig.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"miscellaneous/enumerations.html":{}}}],["verticalbaraccessors",{"_index":4473,"title":{"classes/VerticalBarAccessors.html":{}},"body":{"classes/VerticalBarAccessors.html":{}}}],["vertically",{"_index":1698,"title":{},"body":{"classes/Grid.html":{}}}],["very",{"_index":2775,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"index.html":{}}}],["view",{"_index":4583,"title":{},"body":{"index.html":{}}}],["viewbox",{"_index":999,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["viewchild",{"_index":1017,"title":{},"body":{"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/LegendSeriesComponent.html":{}}}],["viewchild(\"projecteddescription",{"_index":3385,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["viewchild(\"svgcontent",{"_index":1022,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["viewchild('svgcontent",{"_index":1013,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["viewchild(popovercomponent",{"_index":1129,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["viewchildren",{"_index":1313,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["viewchildren(charttooltipdirective",{"_index":1311,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["viewencapsulation",{"_index":500,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["viewencapsulation.emulated",{"_index":491,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/LegendComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["viewport",{"_index":1847,"title":{},"body":{"classes/Grid.html":{}}}],["visibility",{"_index":1781,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["visible",{"_index":163,"title":{},"body":{"classes/AxisConfig.html":{},"classes/ChartAssistRenderStateData.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{}}}],["visual",{"_index":3597,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{}}}],["visualization",{"_index":1249,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"injectables/ThresholdsService.html":{}}}],["visualizations",{"_index":1901,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"index.html":{}}}],["visualize",{"_index":1966,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["visualizing",{"_index":1984,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["void",{"_index":183,"title":{},"body":{"classes/AxisConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/EventBus.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{}}}],["warn",{"_index":1538,"title":{},"body":{"classes/DataSeries.html":{}}}],["warning",{"_index":4528,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["warranties",{"_index":4796,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":4791,"title":{},"body":{"license.html":{}}}],["waterfall",{"_index":4587,"title":{"additional-documentation/chart-types/bar/waterfall.html":{}},"body":{"index.html":{},"additional-documentation/chart-types.html":{}}}],["ways",{"_index":4572,"title":{},"body":{"index.html":{}}}],["we'll",{"_index":3219,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["we're",{"_index":339,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"components/ChartComponent.html":{},"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{},"classes/RadialTooltipsPlugin.html":{},"injectables/ThresholdsService.html":{}}}],["weird",{"_index":1828,"title":{},"body":{"classes/Grid.html":{}}}],["well",{"_index":721,"title":{},"body":{"classes/Chart.html":{}}}],["wherever",{"_index":4756,"title":{},"body":{"license.html":{}}}],["whether",{"_index":2010,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"components/LegendSeriesComponent.html":{},"classes/SideIndicatorAccessors.html":{},"license.html":{}}}],["white",{"_index":1094,"title":{},"body":{"classes/ChartPalette.html":{},"components/RichLegendTileComponent.html":{}}}],["whole",{"_index":1247,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"license.html":{}}}],["width",{"_index":641,"title":{},"body":{"classes/Chart.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/SideIndicatorAccessors.html":{},"classes/ZoomPlugin.html":{}}}],["width(value",{"_index":1567,"title":{},"body":{"classes/DimensionConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["width/height",{"_index":2691,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["widthcorrection",{"_index":2990,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["widthcorrection].map(x",{"_index":3000,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["widthlimit",{"_index":2054,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["widthoffset",{"_index":1151,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["wish",{"_index":4554,"title":{},"body":{"index.html":{}}}],["within",{"_index":1515,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["without",{"_index":4568,"title":{},"body":{"index.html":{},"license.html":{}}}],["words",{"_index":2954,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["work",{"_index":3437,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{},"injectables/ThresholdsService.html":{},"index.html":{},"license.html":{}}}],["workaround",{"_index":631,"title":{},"body":{"classes/Chart.html":{}}}],["works",{"_index":4167,"title":{},"body":{"injectables/ThresholdsService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["worldwide",{"_index":4697,"title":{},"body":{"license.html":{}}}],["wrapper",{"_index":3450,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["writing",{"_index":4689,"title":{},"body":{"license.html":{}}}],["written",{"_index":4673,"title":{},"body":{"license.html":{}}}],["x",{"_index":42,"title":{},"body":{"classes/AreaAccessors.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IElementPosition.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LineAccessors.html":{},"classes/MarkerUtils.html":{},"classes/RadialTooltipsPlugin.html":{},"interfaces/ScalesIndex.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYAccessors.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["x0",{"_index":43,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["x1",{"_index":44,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/Grid.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"classes/InteractionLinePlugin.html":{}}}],["x2",{"_index":1835,"title":{},"body":{"classes/Grid.html":{},"classes/InteractionLinePlugin.html":{}}}],["xcoord",{"_index":2944,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/MarkerUtils.html":{},"classes/ZoomPlugin.html":{}}}],["xcoord].sort((a",{"_index":2982,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["xcoordinate",{"_index":4393,"title":{},"body":{"classes/UtilityService.html":{}}}],["xfn",{"_index":3095,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["xscale",{"_index":2473,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["xscale.convert(d",{"_index":3096,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["xscale.range([padding.left",{"_index":2474,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["xscales",{"_index":2986,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/UtilityService.html":{},"classes/ZoomPlugin.html":{}}}],["xscales.reduce((result",{"_index":2998,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["xvalue",{"_index":3032,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/UtilityService.html":{}}}],["xvalue.length",{"_index":3038,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["xvalue.slice(0",{"_index":3037,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["xxxx",{"_index":4426,"title":{},"body":{"classes/UtilityService.html":{}}}],["xxxxxxxx",{"_index":4425,"title":{},"body":{"classes/UtilityService.html":{}}}],["xxxxxxxxxxxx\".replace(/[xy]/g",{"_index":4429,"title":{},"body":{"classes/UtilityService.html":{}}}],["xy",{"_index":147,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["xy.iszoneedge",{"_index":4267,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["xy.y",{"_index":4264,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["xy1",{"_index":4262,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["xy2",{"_index":4257,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["xy2].foreach((xy",{"_index":4263,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["xyaccessors",{"_index":2266,"title":{"classes/XYAccessors.html":{}},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"classes/LineAccessors.html":{},"classes/XYAccessors.html":{}}}],["xyaccessors:14",{"_index":3415,"title":{},"body":{"classes/LineAccessors.html":{}}}],["xygrid",{"_index":258,"title":{},"body":{"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/SparkChartAssist.html":{},"classes/XYGridConfig.html":{},"classes/ZoomPlugin.html":{}}}],["xygrid(lastspark",{"_index":4058,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["xygrid.tick_label_overflow_debounce_interval",{"_index":2629,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["xygridconfig",{"_index":87,"title":{"classes/XYGridConfig.html":{}},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"classes/SparkChartAssist.html":{},"classes/XYGridConfig.html":{}}}],["xygridconfig.default_margin",{"_index":4482,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["xygridconfig.default_padding",{"_index":4480,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["xygridconfig:16",{"_index":125,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{}}}],["xygridconfig:23",{"_index":118,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{}}}],["xygridconfig:32",{"_index":127,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{}}}],["xygridconfig:9",{"_index":123,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{}}}],["xyrenderer",{"_index":2822,"title":{"classes/XYRenderer.html":{}},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"classes/LineAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYRenderer.html":{}}}],["y",{"_index":47,"title":{},"body":{"classes/AreaAccessors.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IElementPosition.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LineAccessors.html":{},"classes/MarkerUtils.html":{},"classes/RadialTooltipsPlugin.html":{},"interfaces/ScalesIndex.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYAccessors.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["y0",{"_index":48,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["y1",{"_index":49,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/Grid.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"classes/InteractionLinePlugin.html":{}}}],["y2",{"_index":1839,"title":{},"body":{"classes/Grid.html":{},"classes/InteractionLinePlugin.html":{}}}],["ycoord",{"_index":3538,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["ycoordinate",{"_index":4394,"title":{},"body":{"classes/UtilityService.html":{}}}],["yes",{"_index":295,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IChartAssist.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/VerticalBarAccessors.html":{}}}],["yleftscale",{"_index":2500,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["yrightscale",{"_index":2512,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["yscale",{"_index":2479,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["yscale.range([dimension.height",{"_index":2480,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["yscales",{"_index":4392,"title":{},"body":{"classes/UtilityService.html":{}}}],["yvalue",{"_index":4462,"title":{},"body":{"classes/UtilityService.html":{}}}],["yxxx",{"_index":4428,"title":{},"body":{"classes/UtilityService.html":{}}}],["z",{"_index":4294,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["z.accessors.data.end",{"_index":4296,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["z.accessors.data.end?.(z.data[0",{"_index":4342,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["z.accessors.data.start",{"_index":4295,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["z.accessors.data.start?.(z.data[0",{"_index":4340,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["z.accessors.series.color?.(z.id",{"_index":4343,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["z.data",{"_index":4341,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["z.end",{"_index":4287,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["z.entered",{"_index":4228,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["z.id",{"_index":4345,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["z.start",{"_index":4286,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["z.status",{"_index":4285,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zdataaccessors",{"_index":4332,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zdataaccessors.end?.(zonedatapoint",{"_index":4335,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zdataaccessors.start?.(zonedatapoint",{"_index":4334,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zero",{"_index":153,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"interfaces/IScaleSVGElement.html":{}}}],["zone",{"_index":2008,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"injectables/ThresholdsService.html":{},"interfaces/ZoneCross.html":{},"miscellaneous/enumerations.html":{}}}],["zone.accessors.data",{"_index":4333,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zone.accessors.series.color",{"_index":4306,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zone.data",{"_index":4292,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zone.data[zoneindex",{"_index":4331,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zone.id}__${zoneboundary}__threshold",{"_index":4308,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zone.scales",{"_index":4310,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zone.value",{"_index":4309,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zoneboundary",{"_index":2877,"title":{},"body":{"interfaces/ISimpleThresholdZone.html":{},"injectables/ThresholdsService.html":{},"interfaces/ZoneCross.html":{},"miscellaneous/enumerations.html":{}}}],["zoneboundary.end",{"_index":4299,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zoneboundary.start",{"_index":4198,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zonecross",{"_index":2874,"title":{"interfaces/ZoneCross.html":{}},"body":{"interfaces/ISimpleThresholdZone.html":{},"injectables/ThresholdsService.html":{},"interfaces/ZoneCross.html":{}}}],["zonecrosspoints",{"_index":4271,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zonedatapoint",{"_index":4330,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zoneendy",{"_index":4266,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zoneindex",{"_index":4328,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zoneindexes",{"_index":4226,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zoneindexes[zone.id",{"_index":4327,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zones",{"_index":4162,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zones.findindex(z",{"_index":4289,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zones.foreach(z",{"_index":4227,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zonestarty",{"_index":4265,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zoom",{"_index":2917,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"modules/NuiChartsModule.html":{},"classes/ZoomPlugin.html":{},"overview.html":{}}}],["zoombrushlayer",{"_index":2918,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["zoomplugin",{"_index":2906,"title":{"classes/ZoomPlugin.html":{}},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["zoomplugin.default_config",{"_index":2922,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["zoomplugin.layer_name",{"_index":2932,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AreaAccessors.html":{"url":"classes/AreaAccessors.html","title":"class - AreaAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AreaAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/area/area-accessors.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IAreaAccessors\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                series\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(colorProvider, markerProvider)\n                    \n                \n                        \n                            \n                                Defined in src/renderers/area/area-accessors.ts:29\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        colorProvider\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        markerProvider\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAreaDataAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/area/area-accessors.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAreaSeriesAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/area/area-accessors.ts:29\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { defaultColorProvider, defaultMarkerProvider } from \"../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, IDataAccessors, ISeriesAccessors, SeriesAccessor } from \"../../core/common/types\";\n\nexport interface IAreaDataAccessors extends IDataAccessors {\n    x: DataAccessor;\n    x0: DataAccessor;\n    x1: DataAccessor;\n    absoluteX0: DataAccessor;\n    absoluteX1: DataAccessor;\n    y: DataAccessor;\n    y0: DataAccessor;\n    y1: DataAccessor;\n    absoluteY0: DataAccessor;\n    absoluteY1: DataAccessor;\n}\n\nexport interface IAreaSeriesAccessors extends ISeriesAccessors {\n    color?: SeriesAccessor;\n    marker?: SeriesAccessor;\n}\n\nexport interface IAreaAccessors extends IAccessors {\n    data: IAreaDataAccessors;\n    series: IAreaSeriesAccessors;\n}\n\nexport class AreaAccessors implements IAreaAccessors {\n    data: IAreaDataAccessors;\n    series: IAreaSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider(), private markerProvider = defaultMarkerProvider()) {\n        this.data = {\n            x: (d, i, ds, s) => d.x,\n            x0: (d, i, ds, s) => this.data.x(d, i, ds, s),\n            x1: (d, i, ds, s) => this.data.x(d, i, ds, s),\n            y: (d, i, ds, s) => d.y,\n            y0: (d, i, ds, s) => this.data.y(d, i, ds, s),\n            y1: (d, i, ds, s) => this.data.y(d, i, ds, s),\n            absoluteX0: (d, i, ds, s) => d[\"__stack_x\"]?.start ?? this.data.x0(d, i, ds, s),\n            absoluteX1: (d, i, ds, s) => d[\"__stack_x\"]?.end ?? this.data.x1(d, i, ds, s),\n            absoluteY0: (d, i, ds, s) => d[\"__stack_y\"]?.start ?? this.data.y0(d, i, ds, s),\n            absoluteY1: (d, i, ds, s) => d[\"__stack_y\"]?.end ?? this.data.y1(d, i, ds, s),\n        };\n\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n            marker: this.markerProvider ? this.markerProvider.get : undefined,\n        };\n    }\n}\n\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AreaGridConfig.html":{"url":"classes/AreaGridConfig.html","title":"class - AreaGridConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AreaGridConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/config/area-grid-config.ts\n        \n\n            \n                Description\n            \n            \n                Pre-defined XYGridConfig for conforming an area chart to Nova UX standards\n\n            \n\n            \n                Extends\n            \n            \n                        XYGridConfig\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                axis\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_MARGIN\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_PADDING\n                            \n                            \n                                    Public\n                                interactionPlugins\n                            \n                            \n                                    Public\n                                borders\n                            \n                            \n                                    Public\n                                cursor\n                            \n                            \n                                    Public\n                                dimension\n                            \n                            \n                                    Public\n                                disableRenderAreaHeightCorrection\n                            \n                            \n                                    Public\n                                disableRenderAreaWidthCorrection\n                            \n                            \n                                    Public\n                                interactive\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/core/grid/config/area-grid-config.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            axis\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: new AxisConfig(),\n        right: new AxisConfig(),\n        bottom: new AxisConfig(),\n        left: new AxisConfig(),\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:23\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_MARGIN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: 0,\n        right: 5,\n        bottom: 20,\n        left: 30,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:9\n\n                            \n                        \n\n                \n                    \n                        The default margin \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_PADDING\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        left: 0,\n        right: 0,\n        top: 5,\n        bottom: 5,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interactionPlugins\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:32\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            borders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        // TODO: Review this\n        // @ts-ignore\n        top: undefined,\n        // @ts-ignore\n        bottom: undefined,\n        // @ts-ignore\n        left: undefined,\n        // @ts-ignore\n        right: undefined,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:16\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            cursor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"crosshair\"\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:28\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dimension\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IDimensionConfig\n\n                        \n                    \n                    \n                        \n                            Default value : new DimensionConfig()\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:14\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            disableRenderAreaHeightCorrection\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:30\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            disableRenderAreaWidthCorrection\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:32\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interactive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:11\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { XYGridConfig } from \"./xy-grid-config\";\n\n/**\n * Pre-defined XYGridConfig for conforming an area chart to Nova UX standards\n */\nexport class AreaGridConfig extends XYGridConfig {\n    constructor() {\n        super();\n\n        this.dimension.padding.bottom = 2; // for shifting zero-line to bottom border\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AxisConfig.html":{"url":"classes/AxisConfig.html","title":"class - AxisConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AxisConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/config/axis-config.ts\n        \n\n            \n                Description\n            \n            \n                See IAxisConfig \n\n            \n\n\n            \n                Implements\n            \n            \n                            IAxisConfig\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                fit\n                            \n                            \n                                    Public\n                                gridTicks\n                            \n                            \n                                    Public\n                                padding\n                            \n                            \n                                    Public\n                                tickLabel\n                            \n                            \n                                    Public\n                                tickSize\n                            \n                            \n                                    Public\n                                visible\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    approximateTicks\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            fit\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/axis-config.ts:22\n                            \n                        \n\n                \n                    \n                        See IAxisConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            gridTicks\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/axis-config.ts:10\n                            \n                        \n\n                \n                    \n                        See IAxisConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            padding\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/axis-config.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            tickLabel\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ITickLabelConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        horizontalPadding: 0,\n        overflowHandler: defaultTextOverflowHandler,\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/axis-config.ts:16\n                            \n                        \n\n                \n                    \n                        See IAxisConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            tickSize\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 5\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/axis-config.ts:13\n                            \n                        \n\n                \n                    \n                        See IAxisConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/axis-config.ts:7\n                            \n                        \n\n                \n                    \n                        See IAxisConfig \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        approximateTicks\n                    \n                \n\n                \n                    \n                        getapproximateTicks()\n                    \n                \n                            \n                                \n                                    Defined in src/core/grid/config/axis-config.ts:27\n                                \n                            \n                    \n                        \n                                See IAxisConfig \n\n\n                                \n                                    Returns :         any\n\n                                \n                        \n                    \n\n                \n                    \n                        setapproximateTicks(ticks: any)\n                    \n                \n                            \n                                \n                                    Defined in src/core/grid/config/axis-config.ts:32\n                                \n                            \n                    \n                        \n                                See IAxisConfig \n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            ticks\n                                                    \n                                                            \n                                                                            any\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import { defaultTextOverflowHandler } from \"../default-text-overflow-handler\";\nimport { IAxisConfig, ITickLabelConfig } from \"../types\";\n\n/** See {@link IAxisConfig} */\nexport class AxisConfig implements IAxisConfig {\n    /** See {@link IAxisConfig#visible} */\n    public visible: boolean = true;\n\n    /** See {@link IAxisConfig#gridTicks} */\n    public gridTicks: boolean = false;\n\n    /** See {@link IAxisConfig#tickSize} */\n    public tickSize: number = 5;\n\n    /** See {@link IAxisConfig#tickLabel} */\n    public tickLabel: ITickLabelConfig = {\n        horizontalPadding: 0,\n        overflowHandler: defaultTextOverflowHandler,\n    };\n\n    /** See {@link IAxisConfig#fit} */\n    public fit: boolean = false;\n\n    private _approximateTicks: number = 5;\n\n    /** See {@link IAxisConfig#approximateTicks} */\n    get approximateTicks(): any {\n        return this._approximateTicks;\n    }\n\n    /** See {@link IAxisConfig#approximateTicks} */\n    set approximateTicks(ticks: any) {\n        this._approximateTicks = parseInt(ticks, 10);\n    }\n\n    public padding: number = 0;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BarAccessors.html":{"url":"classes/BarAccessors.html","title":"class - BarAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BarAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/bar/accessors/bar-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        RectangleAccessors\n            \n\n            \n                Implements\n            \n            \n                            IBarAccessors\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                series\n                            \n                            \n                                data\n                            \n                            \n                                series\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(colorProvider, markerProvider)\n                    \n                \n                        \n                            \n                                Defined in src/renderers/bar/accessors/bar-accessors.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        colorProvider\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        markerProvider\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IBarDataAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/bar/accessors/bar-accessors.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleSeriesAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/bar/accessors/bar-accessors.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleDataAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         RectangleAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         RectangleAccessors:34\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleSeriesAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         RectangleAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         RectangleAccessors:35\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { defaultColorProvider, defaultMarkerProvider } from \"../../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, IDataSeries } from \"../../../core/common/types\";\nimport { IRectangleDataAccessors, IRectangleSeriesAccessors, RectangleAccessors } from \"../../accessors/rectangle-accessors\";\n\nexport interface IBarDataAccessors extends IRectangleDataAccessors {\n    category: DataAccessor;\n    start: DataAccessor;\n    end: DataAccessor;\n    thickness?: DataAccessor;\n    value?: DataAccessor;\n    color?: DataAccessor;\n    marker?: DataAccessor;\n    cssClass?: DataAccessor;\n}\n\nexport interface IBarAccessors extends IAccessors {\n    data: IBarDataAccessors;\n    series: IRectangleSeriesAccessors;\n}\n\nexport abstract class BarAccessors extends RectangleAccessors implements IBarAccessors {\n    data: IBarDataAccessors;\n    series: IRectangleSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider(), private markerProvider = defaultMarkerProvider()) {\n        super();\n\n        this.data = {\n            value: (data: any) => data.value,\n            category: (d, i, series: any[], dataSeries: IDataSeries) => {\n                if (d.category) {\n                    return d.category;\n                }\n\n                if (this.series.category) {\n                    return this.series.category(dataSeries.id, dataSeries);\n                }\n\n                return null;\n            },\n            start: (data: any, index: number, series: any[], dataSeries: IDataSeries) => {\n                if (data.__bar) {\n                    return data.__bar.start;\n                }\n                if (typeof data.start !== \"undefined\") {\n                    return data.start;\n                }\n\n                const value = this.getSingleValue(data, index, series, dataSeries);\n                if (Number.isFinite(value)) {\n                    return Math.min(0, value);\n                }\n\n                return null;\n            },\n            end: (data: any, index: number, series: any[], dataSeries: IDataSeries) => {\n                if (data.__bar) {\n                    return data.__bar.end;\n                }\n                if (typeof data.end !== \"undefined\") {\n                    return data.end;\n                }\n\n                const value = this.getSingleValue(data, index, series, dataSeries);\n                if (Number.isFinite(value)) {\n                    return Math.max(0, value);\n                }\n\n                return null;\n            },\n        };\n\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n            marker: this.markerProvider ? this.markerProvider.get : undefined,\n            category: (seriesId, series) => series.name || series.id,\n        };\n\n    }\n\n    private getSingleValue(data: any, index: number, series: any[], dataSeries: IDataSeries) {\n        let value: any;\n        if (this.data.value) {\n            // try to use the value accessor to retrieve value\n            value = this.data.value(data, index, series, dataSeries);\n            // if it fails to retrieve a valid value, then we consider the data point to be a primitive value that is returned directly\n            if (typeof value === \"undefined\") {\n                value = data;\n            }\n        }\n        return value;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BarGridConfig.html":{"url":"classes/BarGridConfig.html","title":"class - BarGridConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BarGridConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/config/bar-grid-config.ts\n        \n\n            \n                Description\n            \n            \n                Pre-defined and conforming Nova UX standards configuration of XYGrid for bar chart\n\n            \n\n            \n                Extends\n            \n            \n                        XYGridConfig\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                axis\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_MARGIN\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_PADDING\n                            \n                            \n                                    Public\n                                interactionPlugins\n                            \n                            \n                                    Public\n                                borders\n                            \n                            \n                                    Public\n                                cursor\n                            \n                            \n                                    Public\n                                dimension\n                            \n                            \n                                    Public\n                                disableRenderAreaHeightCorrection\n                            \n                            \n                                    Public\n                                disableRenderAreaWidthCorrection\n                            \n                            \n                                    Public\n                                interactive\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/core/grid/config/bar-grid-config.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            axis\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: new AxisConfig(),\n        right: new AxisConfig(),\n        bottom: new AxisConfig(),\n        left: new AxisConfig(),\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:23\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_MARGIN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: 0,\n        right: 5,\n        bottom: 20,\n        left: 30,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:9\n\n                            \n                        \n\n                \n                    \n                        The default margin \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_PADDING\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        left: 0,\n        right: 0,\n        top: 5,\n        bottom: 5,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interactionPlugins\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:32\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            borders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        // TODO: Review this\n        // @ts-ignore\n        top: undefined,\n        // @ts-ignore\n        bottom: undefined,\n        // @ts-ignore\n        left: undefined,\n        // @ts-ignore\n        right: undefined,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:16\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            cursor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"crosshair\"\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:28\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dimension\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IDimensionConfig\n\n                        \n                    \n                    \n                        \n                            Default value : new DimensionConfig()\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:14\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            disableRenderAreaHeightCorrection\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:30\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            disableRenderAreaWidthCorrection\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:32\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interactive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:11\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { XYGridConfig } from \"./xy-grid-config\";\n\n/**\n * Pre-defined and conforming Nova UX standards configuration of XYGrid for bar chart\n */\nexport class BarGridConfig extends XYGridConfig {\n    constructor() {\n        super();\n\n        this.interactionPlugins = false;\n\n        this.axis.left.gridTicks = true;\n        this.axis.left.tickSize = 5;\n        this.axis.bottom.gridTicks = false;\n        this.axis.left.fit = true;\n        this.axis.bottom.tickSize = 5;\n        this.axis.left.tickSize = 0;\n        this.dimension.margin.right = 0;\n        this.dimension.padding.bottom =  2; // 2 for border\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BarHighlightStrategy.html":{"url":"classes/BarHighlightStrategy.html","title":"class - BarHighlightStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BarHighlightStrategy\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/bar/highlight-strategies/bar-highlight-strategy.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IHighlightStrategy\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                draw\n                            \n                            \n                                    Public\n                                findDataPointByValue\n                            \n                            \n                                    Public\n                                getDataPointIndex\n                            \n                            \n                                    Public\n                                highlightDataPoint\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(scaleKey, levels: number, selectedDataPointIdxFn?: SelectedDatPointIdxFn)\n                    \n                \n                        \n                            \n                                Defined in src/renderers/bar/highlight-strategies/bar-highlight-strategy.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        scaleKey\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                scale that will be used for searching for the data point that will be highlighted\n\n                                                        \n                                                \n                                                \n                                                        levels\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                for band scales, how many levels deep do we go to compare values\n\n                                                        \n                                                \n                                                \n                                                        selectedDataPointIdxFn\n                                                  \n                                                        \n                                                                        SelectedDatPointIdxFn\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            draw\n                        \n                        \n                    \n                \n            \n            \n                \ndraw(renderer: BarRenderer, renderSeries: IRenderSeries, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/bar/highlight-strategies/bar-highlight-strategy.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                                BarRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            findDataPointByValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findDataPointByValue(series: IDataSeries, value: any, scaleKey, scales?: Scales)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/bar/highlight-strategies/bar-highlight-strategy.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    series\n                                    \n                                            IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scaleKey\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDataPointIndex\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointIndex(renderer: BarRenderer, series: IDataSeries, values: literal type, scales: Scales)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/bar/highlight-strategies/bar-highlight-strategy.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                                BarRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    series\n                                    \n                                            IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    values\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            highlightDataPoint\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    highlightDataPoint(renderer: BarRenderer, renderSeries: IRenderSeries, dataPointIndex: number, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/bar/highlight-strategies/bar-highlight-strategy.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                                BarRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dataPointIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { select } from \"d3-selection\";\nimport findIndex from \"lodash/findIndex\";\nimport isArray from \"lodash/isArray\";\nimport isUndefined from \"lodash/isUndefined\";\nimport { Subject } from \"rxjs\";\n\nimport { DATA_POINT_INTERACTION_RESET, DATA_POINT_NOT_FOUND } from \"../../../constants\";\nimport { isBandScale, IXYScales, Scales } from \"../../../core/common/scales/types\";\nimport { IDataSeries, IRendererEventPayload } from \"../../../core/common/types\";\nimport { UtilityService } from \"../../../core/common/utility.service\";\nimport { IRectangleAccessors } from \"../../accessors/rectangle-accessors\";\nimport { IHighlightStrategy, IRenderSeries, RenderLayerName, RenderState } from \"../../types\";\nimport { BarRenderer } from \"../bar-renderer\";\n\nexport type SelectedDatPointIdxFn = (seriesId: string) => number;\n\nexport class BarHighlightStrategy implements IHighlightStrategy {\n\n    /**\n     * @param scaleKey scale that will be used for searching for the data point that will be highlighted\n     * @param levels for band scales, how many levels deep do we go to compare values\n     */\n    constructor(private scaleKey: keyof IXYScales, private levels = 1, private selectedDataPointIdxFn?: SelectedDatPointIdxFn) {\n    }\n\n    public getDataPointIndex(renderer: BarRenderer, series: IDataSeries, values: { [p: string]: any }, scales: Scales) {\n        const value = values[this.scaleKey];\n        if (typeof value === \"undefined\") {\n            // if there is no value we're returning -2 (DATA_POINT_INTERACTION_RESET) which helps highlightDataPoint\n            // to understand that we need to emphasise things when we are moving outside of an interactive area\n            return DATA_POINT_INTERACTION_RESET;\n        }\n\n        return this.findDataPointByValue(series, value, this.scaleKey, scales);\n    }\n\n    public findDataPointByValue(series: IDataSeries, value: any, scaleKey: keyof IXYScales, scales?: Scales) {\n        const accessorSuffix = (scaleKey as string).toUpperCase();\n        const dataAccessors = series.accessors.data;\n\n        const startAccessor = dataAccessors[\"start\" + accessorSuffix];\n        const endAccessor = dataAccessors[\"end\" + accessorSuffix];\n\n        if (typeof value === \"string\") {\n            return findIndex(series.data,\n                             (d, i) => value === startAccessor?.(d, i, series.data, series));\n        } else if (isArray(value)) {\n            return findIndex(series.data,\n                             (d, i) => {\n                                 const start = startAccessor?.(d, i, series.data, series);\n                                 const lengthLimit = Math.min(this.levels, value.length, start.length);\n                                 // diy efficient array comparison\n                                 for (let j = 0; j  valueOf >= startAccessor?.(d, i, series.data, series).valueOf() &&\n                        valueOf  startAccessor?.(d, i, series.data, series);\n                        const nearestIndex = UtilityService.findNearestIndex(series.data, value, accessor);\n                        index = (nearestIndex >= series.data.length || accessor(series.data[nearestIndex], nearestIndex) > valueOf) ? -1 : nearestIndex;\n                    } else {\n                        // @ts-ignore\n                        // Needs to catch -1 otherwise typescript errors\n                        index = UtilityService.getClosestIndex(series.data, (d, i) => endAccessor(d, i, series.data, series), value) ?? -1;\n                    }\n                }\n                return index;\n            }\n            return findIndex(series.data,\n                             (d, i) => valueOf >= startAccessor?.(d, i, series.data, series).valueOf() &&\n                    valueOf ,\n                              dataPointIndex: number, rendererSubject: Subject): void {\n        const target = renderSeries.containers[RenderLayerName.data];\n        const barStylesFn = renderer.getContainerStateStyles;\n        const selectedDataPointIdx = !isUndefined(this.selectedDataPointIdxFn) ? this.selectedDataPointIdxFn(renderSeries.dataSeries.id) : DATA_POINT_NOT_FOUND;\n\n        target.selectAll(`g.${ renderer.barContainerClass }`).each(function (d: any, index: number) {\n            let renderState: RenderState;\n            if (dataPointIndex === DATA_POINT_INTERACTION_RESET) {\n                if (index === selectedDataPointIdx || selectedDataPointIdx === DATA_POINT_NOT_FOUND) {\n                    renderState = RenderState.default;\n                } else {\n                    renderState = RenderState.deemphasized;\n                }\n            } else if (dataPointIndex === index || index === selectedDataPointIdx) {\n                renderState = RenderState.emphasized;\n            } else {\n                renderState = RenderState.deemphasized;\n            }\n            select(this).attrs(barStylesFn(renderState));\n        });\n\n        // rendererSubject.next({\n        //     eventName: HIGHLIGHT_SERIES_EVENT,\n        //     data: renderer.getDataPoint(renderSeries, renderSeries.dataSeries.data[dataPointIndex], dataPointIndex),\n        // });\n    }\n\n    draw(renderer: BarRenderer, renderSeries: IRenderSeries, rendererSubject: Subject) {\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BarHorizontalGridConfig.html":{"url":"classes/BarHorizontalGridConfig.html","title":"class - BarHorizontalGridConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BarHorizontalGridConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/config/bar-horizontal-grid-config.ts\n        \n\n            \n                Description\n            \n            \n                Pre-defined and conforming Nova UX standards configuration of XYGrid for horizontal bar chart\n\n            \n\n            \n                Extends\n            \n            \n                        XYGridConfig\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                axis\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_MARGIN\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_PADDING\n                            \n                            \n                                    Public\n                                interactionPlugins\n                            \n                            \n                                    Public\n                                borders\n                            \n                            \n                                    Public\n                                cursor\n                            \n                            \n                                    Public\n                                dimension\n                            \n                            \n                                    Public\n                                disableRenderAreaHeightCorrection\n                            \n                            \n                                    Public\n                                disableRenderAreaWidthCorrection\n                            \n                            \n                                    Public\n                                interactive\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/core/grid/config/bar-horizontal-grid-config.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            axis\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: new AxisConfig(),\n        right: new AxisConfig(),\n        bottom: new AxisConfig(),\n        left: new AxisConfig(),\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:23\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_MARGIN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: 0,\n        right: 5,\n        bottom: 20,\n        left: 30,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:9\n\n                            \n                        \n\n                \n                    \n                        The default margin \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_PADDING\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        left: 0,\n        right: 0,\n        top: 5,\n        bottom: 5,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interactionPlugins\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:32\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            borders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        // TODO: Review this\n        // @ts-ignore\n        top: undefined,\n        // @ts-ignore\n        bottom: undefined,\n        // @ts-ignore\n        left: undefined,\n        // @ts-ignore\n        right: undefined,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:16\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            cursor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"crosshair\"\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:28\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dimension\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IDimensionConfig\n\n                        \n                    \n                    \n                        \n                            Default value : new DimensionConfig()\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:14\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            disableRenderAreaHeightCorrection\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:30\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            disableRenderAreaWidthCorrection\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:32\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interactive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:11\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { XYGridConfig } from \"./xy-grid-config\";\n\n/**\n * Pre-defined and conforming Nova UX standards configuration of XYGrid for horizontal bar chart\n */\nexport class BarHorizontalGridConfig extends XYGridConfig {\n    constructor() {\n        super();\n\n        this.interactionPlugins = false;\n\n        this.axis.left.gridTicks = false;\n        this.axis.left.tickSize = 0;\n        this.axis.bottom.gridTicks = true;\n        this.axis.left.fit = true;\n        this.axis.bottom.fit = true;\n        this.axis.bottom.tickSize = 0;\n        this.axis.left.tickSize = 5;\n        this.dimension.padding.left =  2; // 2 for border\n        this.borders.left.visible = true;\n        this.borders.bottom.visible = false;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BarSeriesHighlightStrategy.html":{"url":"classes/BarSeriesHighlightStrategy.html","title":"class - BarSeriesHighlightStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BarSeriesHighlightStrategy\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/bar/highlight-strategies/bar-series-highlight-strategy.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IHighlightStrategy\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                draw\n                            \n                            \n                                    Public\n                                findDataPointByValue\n                            \n                            \n                                    Public\n                                getDataPointIndex\n                            \n                            \n                                    Public\n                                highlightDataPoint\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(scaleKey, levels: number)\n                    \n                \n                        \n                            \n                                Defined in src/renderers/bar/highlight-strategies/bar-series-highlight-strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        scaleKey\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                scale that will be used for searching for the datapoint that will be highlighted\n\n                                                        \n                                                \n                                                \n                                                        levels\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                for band scales, how many levels deep do we go to compare values\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            draw\n                        \n                        \n                    \n                \n            \n            \n                \ndraw(renderer: BarRenderer, renderSeries: IRenderSeries, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/bar/highlight-strategies/bar-series-highlight-strategy.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                                BarRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            findDataPointByValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findDataPointByValue(series: IDataSeries, value: any, scaleKey)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/bar/highlight-strategies/bar-series-highlight-strategy.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    series\n                                    \n                                            IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scaleKey\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDataPointIndex\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointIndex(renderer: BarRenderer, series: IDataSeries, values: literal type, scales: Scales)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/bar/highlight-strategies/bar-series-highlight-strategy.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                                BarRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    series\n                                    \n                                            IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    values\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            highlightDataPoint\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    highlightDataPoint(renderer: BarRenderer, renderSeries: IRenderSeries, dataPointIndex: number, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/bar/highlight-strategies/bar-series-highlight-strategy.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                                BarRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dataPointIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import findIndex from \"lodash/findIndex\";\nimport isArray from \"lodash/isArray\";\nimport { Subject } from \"rxjs\";\n\nimport { DATA_POINT_INTERACTION_RESET, HIGHLIGHT_SERIES_EVENT } from \"../../../constants\";\nimport { IXYScales, Scales } from \"../../../core/common/scales/types\";\nimport { IDataSeries, IRendererEventPayload } from \"../../../core/common/types\";\nimport { IRectangleAccessors } from \"../../accessors/rectangle-accessors\";\nimport { IHighlightStrategy, IRenderSeries } from \"../../types\";\nimport { BarRenderer } from \"../bar-renderer\";\n\nexport class BarSeriesHighlightStrategy implements IHighlightStrategy {\n\n    /**\n     * @param scaleKey scale that will be used for searching for the datapoint that will be highlighted\n     * @param levels for band scales, how many levels deep do we go to compare values\n     */\n    constructor(private scaleKey: keyof IXYScales, private levels = 1) {\n    }\n\n    public getDataPointIndex(renderer: BarRenderer, series: IDataSeries, values: { [p: string]: any }, scales: Scales) {\n        const value = values[this.scaleKey];\n        if (typeof value === \"undefined\") {\n            // if there is no value we're returning -2 (DATA_POINT_INTERACTION_RESET) which helps highlightDataPoint\n            // to understand that we need to emphasise things when we are moving outside of an interactive area\n            return DATA_POINT_INTERACTION_RESET;\n        }\n\n        return this.findDataPointByValue(series, value, this.scaleKey);\n    }\n\n    public findDataPointByValue(series: IDataSeries, value: any, scaleKey: keyof IXYScales) {\n        const accessorSuffix = (scaleKey as string).toUpperCase();\n        const dataAccessors = series.accessors.data;\n\n        const startAccessor = dataAccessors[\"start\" + accessorSuffix];\n        const endAccessor = dataAccessors[\"end\" + accessorSuffix];\n\n        if (typeof value === \"string\") {\n            return findIndex(series.data,\n                             (d, i) => value === startAccessor?.(d, i, series.data, series));\n        } else if (isArray(value)) {\n            return findIndex(series.data,\n                             (d, i) => {\n                                 const start = startAccessor?.(d, i, series.data, series);\n                                 const lengthLimit = Math.min(this.levels, value.length, start.length);\n                                 // diy efficient array comparison\n                                 for (let j = 0; j  valueOf >= startAccessor?.(d, i, series.data, series).valueOf() &&\n                    valueOf ,\n                              dataPointIndex: number, rendererSubject: Subject): void {\n        if (dataPointIndex >= 0 || dataPointIndex === DATA_POINT_INTERACTION_RESET) {\n            rendererSubject.next({\n                eventName: HIGHLIGHT_SERIES_EVENT,\n                data: renderer.getDataPoint(renderSeries, renderSeries.dataSeries.data[dataPointIndex], dataPointIndex),\n            });\n        }\n    }\n\n    draw(renderer: BarRenderer, renderSeries: IRenderSeries, rendererSubject: Subject) {\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BarStatusGridConfig.html":{"url":"classes/BarStatusGridConfig.html","title":"class - BarStatusGridConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BarStatusGridConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/config/bar-status-grid-config.ts\n        \n\n\n            \n                Extends\n            \n            \n                        XYGridConfig\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                axis\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_MARGIN\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_PADDING\n                            \n                            \n                                    Public\n                                interactionPlugins\n                            \n                            \n                                    Public\n                                borders\n                            \n                            \n                                    Public\n                                cursor\n                            \n                            \n                                    Public\n                                dimension\n                            \n                            \n                                    Public\n                                disableRenderAreaHeightCorrection\n                            \n                            \n                                    Public\n                                disableRenderAreaWidthCorrection\n                            \n                            \n                                    Public\n                                interactive\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/core/grid/config/bar-status-grid-config.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            axis\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: new AxisConfig(),\n        right: new AxisConfig(),\n        bottom: new AxisConfig(),\n        left: new AxisConfig(),\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:23\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_MARGIN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: 0,\n        right: 5,\n        bottom: 20,\n        left: 30,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:9\n\n                            \n                        \n\n                \n                    \n                        The default margin \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_PADDING\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        left: 0,\n        right: 0,\n        top: 5,\n        bottom: 5,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interactionPlugins\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:32\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            borders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        // TODO: Review this\n        // @ts-ignore\n        top: undefined,\n        // @ts-ignore\n        bottom: undefined,\n        // @ts-ignore\n        left: undefined,\n        // @ts-ignore\n        right: undefined,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:16\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            cursor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"crosshair\"\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:28\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dimension\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IDimensionConfig\n\n                        \n                    \n                    \n                        \n                            Default value : new DimensionConfig()\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:14\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            disableRenderAreaHeightCorrection\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:30\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            disableRenderAreaWidthCorrection\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:32\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interactive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:11\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { XYGridConfig } from \"./xy-grid-config\";\n\nexport class BarStatusGridConfig extends XYGridConfig {\n    constructor(config: { showBottomAxis: boolean } = {showBottomAxis: true}) {\n        super();\n\n        this.interactive = true;\n        this.interactionPlugins = false;\n        if (!config.showBottomAxis) {\n            this.axis.bottom.visible = false;\n            this.borders.bottom.visible = false;\n        }\n        this.axis.left.visible = false;\n        this.axis.left.gridTicks = false;\n        this.borders.left.visible = false;\n\n        this.dimension.autoHeight = false;\n        this.dimension.margin.top = 0;\n        if (!config.showBottomAxis) {\n            this.dimension.margin.bottom = 0;\n        }\n        this.dimension.height(30); // TODO: solve magic number together with spark chart\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BarTooltipsPlugin.html":{"url":"classes/BarTooltipsPlugin.html","title":"class - BarTooltipsPlugin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BarTooltipsPlugin\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/tooltips/bar-tooltips-plugin.ts\n        \n\n\n            \n                Extends\n            \n            \n                        ChartTooltipsPlugin\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                dataPointPositions\n                            \n                            \n                                    Public\n                                dataPoints\n                            \n                            \n                                    Public\n                                hideSubject\n                            \n                            \n                                    Public\n                                orientation\n                            \n                            \n                                    Public\n                                showSubject\n                            \n                            \n                                    Public\n                                chart\n                            \n                            \n                                    Public\n                                chart\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                processHighlightedDataPoints\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config?: IBarChartConfig)\n                    \n                \n                        \n                            \n                                Defined in src/core/plugins/tooltips/bar-tooltips-plugin.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        IBarChartConfig\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dataPointPositions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartTooltipsPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartTooltipsPlugin:65\n\n                            \n                        \n\n                \n                    \n                        Calculated positions for the data point tooltips \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dataPoints\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IDataPointsPayload\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartTooltipsPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartTooltipsPlugin:63\n\n                            \n                        \n\n                \n                    \n                        Highlighted data points received from the chart \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            hideSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartTooltipsPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartTooltipsPlugin:75\n\n                            \n                        \n\n                \n                    \n                        This publishes an event to hide tooltips\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            orientation\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     \"right\" | \"top\"\n\n                        \n                    \n                    \n                        \n                            Default value : \"right\"\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartTooltipsPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartTooltipsPlugin:88\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            showSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartTooltipsPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartTooltipsPlugin:70\n\n                            \n                        \n\n                \n                    \n                        This publishes an event to show tooltips\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IChart\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartTooltipsPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartTooltipsPlugin:7\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IChart\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPlugin:7\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartTooltipsPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartTooltipsPlugin:126\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartTooltipsPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartTooltipsPlugin:98\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            processHighlightedDataPoints\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processHighlightedDataPoints(dataPoints: IDataPointsPayload)\n                \n            \n\n\n            \n                \n                    Inherited from         ChartTooltipsPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartTooltipsPlugin:131\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataPoints\n                                    \n                                                IDataPointsPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartTooltipsPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartTooltipsPlugin:15\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartTooltipsPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartTooltipsPlugin:9\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartTooltipsPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartTooltipsPlugin:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartTooltipsPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartTooltipsPlugin:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:15\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:9\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IBarChartConfig } from \"../../../renderers/bar/types\";\n\nimport { ChartTooltipsPlugin } from \"./chart-tooltips-plugin\";\n\nexport class BarTooltipsPlugin extends ChartTooltipsPlugin {\n\n    constructor(config?: IBarChartConfig) {\n        super();\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BasicLegendTileComponent.html":{"url":"components/BasicLegendTileComponent.html","title":"component - BasicLegendTileComponent","body":"\n                   \n\n\n\n\n\n  Components\n  BasicLegendTileComponent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n    File\n\n\n    src/legend/legend-tile/basic-legend-tile/basic-legend-tile.component.ts\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n            \n                encapsulation\n                ViewEncapsulation.Emulated\n            \n\n\n\n\n\n\n\n\n\n            \n                selector\n                nui-basic-legend-tile\n            \n\n            \n                styleUrls\n                ./basic-legend-tile.component.less\n            \n\n\n\n            \n                templateUrl\n                ./basic-legend-tile.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import {\n    Component,\n    ViewEncapsulation,\n} from \"@angular/core\";\n\n@Component({\n    selector: \"nui-basic-legend-tile\",\n    templateUrl: \"./basic-legend-tile.component.html\",\n    styleUrls: [\"./basic-legend-tile.component.less\"],\n    encapsulation: ViewEncapsulation.Emulated,\n})\nexport class BasicLegendTileComponent { }\n\n    \n\n\n\n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    '\n    var COMPONENTS = [{'name': 'BasicLegendTileComponent', 'selector': 'nui-basic-legend-tile'},{'name': 'ChartComponent', 'selector': 'nui-chart'},{'name': 'ChartDonutContentComponent', 'selector': 'nui-chart-donut-content'},{'name': 'ChartMarkerComponent', 'selector': 'nui-chart-marker'},{'name': 'ChartPopoverComponent', 'selector': 'nui-chart-popover'},{'name': 'ChartTooltipComponent', 'selector': 'nui-chart-tooltip'},{'name': 'ChartTooltipsComponent', 'selector': 'nui-chart-tooltips'},{'name': 'LegendComponent', 'selector': 'nui-legend'},{'name': 'LegendSeriesComponent', 'selector': 'nui-legend-series'},{'name': 'RichLegendTileComponent', 'selector': 'nui-rich-legend-tile'}];\n    var DIRECTIVES = [{'name': 'ChartCollectionIdDirective', 'selector': '[nuiChartCollectionId]'}];\n    var ACTUAL_COMPONENT = {'name': 'BasicLegendTileComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Chart.html":{"url":"classes/Chart.html","title":"class - Chart","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Chart\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/chart.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IChart\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                element\n                            \n                            \n                                    Public\n                                    Readonly\n                                eventBus\n                            \n                            \n                                    Public\n                                    Optional\n                                filterDefs\n                            \n                            \n                                    Public\n                                    Optional\n                                target\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addPlugin\n                            \n                            \n                                    Public\n                                addPlugins\n                            \n                            \n                                    Public\n                                build\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                getDataManager\n                            \n                            \n                                    Public\n                                getEventBus\n                            \n                            \n                                    Public\n                                getGrid\n                            \n                            \n                                    Public\n                                getRenderEngine\n                            \n                            \n                                    Public\n                                hasPlugin\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                removePlugin\n                            \n                            \n                                    Public\n                                removePlugins\n                            \n                            \n                                    Public\n                                setSeriesStates\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(grid: IGrid)\n                    \n                \n                        \n                            \n                                Defined in src/core/chart.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        grid\n                                                  \n                                                        \n                                                                        IGrid\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            element\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLElement\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            eventBus\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new EventBus()\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            filterDefs\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Selection\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            target\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         D3Selection\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart.ts:21\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addPlugin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addPlugin(plugin: IChartPlugin)\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    plugin\n                                    \n                                                IChartPlugin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addPlugins\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addPlugins(...plugins: IChartPlugin[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    plugins\n                                    \n                                            IChartPlugin[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            build\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    build(element: HTMLElement)\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    element\n                                    \n                                            HTMLElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:166\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDataManager\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataManager()\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     DataManager\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventBus\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventBus()\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     EventBus\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getGrid\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getGrid()\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         IGrid\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getRenderEngine\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRenderEngine()\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     RenderEngine\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            hasPlugin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hasPlugin(classRef)\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    classRef\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:160\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removePlugin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removePlugin(classRef)\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    classRef\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removePlugins\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removePlugins(...classRefs: ()[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    classRefs\n                                    \n                                            ()[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setSeriesStates\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setSeriesStates(renderStateData: IRenderStateData[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:176\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderStateData\n                                    \n                                                IRenderStateData[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(seriesSet: IChartSeries[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:152\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    seriesSet\n                                    \n                                                IChartSeries[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:156\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { select, Selection } from \"d3-selection\";\nimport each from \"lodash/each\";\nimport { BehaviorSubject, Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\nimport { DESTROY_EVENT, SERIES_STATE_CHANGE_EVENT } from \"../constants\";\n\nimport { ChartPlugin } from \"./common/chart-plugin\";\nimport { DataManager } from \"./common/data-manager\";\nimport { EventBus } from \"./common/event-bus\";\nimport { Lasagna } from \"./common/lasagna\";\nimport { RenderEngine } from \"./common/render-engine\";\nimport { D3Selection, IAccessors, IChart, IChartEvent, IChartPlugin, IChartSeries, IRenderStateData } from \"./common/types\";\nimport { IDimensionConfig, IDimensions, IGrid } from \"./grid/types\";\nimport { RenderEnginePlugin } from \"./plugins/render-engine-plugin\";\nimport { CssFilterId, GRAYSCALE_COLOR_MATRIX } from \"./types\";\n\nexport class Chart implements IChart {\n    public readonly eventBus = new EventBus();\n    public element: HTMLElement;\n    public target?: D3Selection;\n    public filterDefs?: Selection;\n\n    private dataManager: DataManager; // TODO: interface\n    private renderEngine: RenderEngine; // TODO: interface\n\n    private updateSubject = new BehaviorSubject[]>([]);\n    private updateDimensionsSubject = new Subject();\n    private seriesStatesSubject = new BehaviorSubject([]);\n\n    private plugins: IChartPlugin[] = [];\n\n    constructor(private grid: IGrid) {\n        if (!grid) {\n            throw new Error(\"Grid has to be defined!\");\n        }\n        grid.updateChartDimensionsSubject = this.updateDimensionsSubject;\n        grid.eventBus = this.eventBus;\n    }\n\n    public getEventBus(): EventBus {\n        return this.eventBus;\n    }\n\n    public getDataManager(): DataManager {\n        return this.dataManager;\n    }\n\n    public getRenderEngine(): RenderEngine {\n        return this.renderEngine;\n    }\n\n    public getGrid(): IGrid {\n        return this.grid;\n    }\n\n    public addPlugin(plugin: IChartPlugin) {\n        plugin.chart = this;\n        this.plugins.push(plugin);\n    }\n\n    public removePlugin(classRef: typeof ChartPlugin) {\n        const pluginIndex = this.plugins.findIndex(plugin => plugin instanceof classRef);\n        if (-1 !== pluginIndex) {\n            this.plugins[pluginIndex].destroy();\n            this.plugins.splice(pluginIndex, 1);\n        }\n    }\n\n    public addPlugins(...plugins: IChartPlugin[]) {\n        for (const plugin of plugins) {\n            this.addPlugin(plugin);\n        }\n    }\n\n    public removePlugins(...classRefs: (typeof ChartPlugin)[]) {\n        for (const classRef of classRefs) {\n            this.removePlugin(classRef);\n        }\n    }\n\n    public hasPlugin(classRef: typeof ChartPlugin) {\n        return -1 !== this.plugins.findIndex(plugin => plugin instanceof classRef);\n    }\n\n    public build(element: HTMLElement) {\n        this.element = element;\n\n        // @ts-ignore: Workaround to avoid strict build crash because of type\n        this.target = select(this.element)\n            .append(\"svg\")\n            .attrs({\n                \"class\": \"nui-chart\",\n                \"height\": \"100%\",\n                \"width\": \"100%\",\n            });\n\n        this.configureCssFilters();\n        this.buildGrid();\n\n        this.dataManager = this.buildDataManager();\n        this.renderEngine = this.buildRenderEngine(this.grid.getLasagna(), this.dataManager);\n\n        // Put the render engine at the front of the list since other plugins may be relying on renderers to be updated first\n        const renderEnginePlugin = new RenderEnginePlugin();\n        renderEnginePlugin.chart = this;\n        this.plugins.unshift(renderEnginePlugin);\n\n        for (const gridPlugin of this.getGrid().buildPlugins(this)) {\n            this.addPlugin(gridPlugin);\n        }\n\n        this.initialize();\n\n        const untilDestroy = () => takeUntil(this.getEventBus().getStream(DESTROY_EVENT));\n        this.updateSubject.pipe(untilDestroy())\n            .subscribe((d: IChartSeries[]) => this.onUpdate(d));\n        this.updateDimensionsSubject.pipe(untilDestroy())\n            .subscribe(() => this.onUpdateDimensions());\n        this.seriesStatesSubject.pipe(untilDestroy())\n            .subscribe((rs: IRenderStateData[]) => this.onSetSeriesStates(rs));\n    }\n\n    private configureCssFilters() {\n        this.filterDefs = this.target?.append(\"defs\");\n\n        // filter for applying a grayscale appearance to svg elements\n        this.filterDefs?.append(\"filter\")\n            .attr(\"id\", CssFilterId.Grayscale)\n            .append(\"feColorMatrix\")\n            .attr(\"type\", \"matrix\")\n            .attr(\"values\", GRAYSCALE_COLOR_MATRIX);\n    }\n\n    protected buildDataManager(): DataManager {\n        return new DataManager();\n    }\n\n    protected buildGrid() {\n        if (this.target) {\n            this.grid.target(this.target);\n            this.grid.build();\n\n            this.updateTargetDimensions(this.grid.config().dimension);\n        }\n    }\n\n    protected buildRenderEngine(lasagna: Lasagna, dataManager: DataManager): RenderEngine {\n        return new RenderEngine(lasagna, dataManager);\n    }\n\n    public update(seriesSet: IChartSeries[]) {\n        this.updateSubject.next(seriesSet);\n    }\n\n    public updateDimensions() {\n        this.updateDimensionsSubject.next();\n    }\n\n    public initialize() {\n        each(this.plugins, (p: IChartPlugin) => {\n            p.initialize();\n        });\n    }\n\n    public destroy() {\n        this.eventBus.getStream(DESTROY_EVENT).next({ data: null });\n        this.eventBus.destroy();\n\n        this.plugins.forEach(p => p.destroy());\n\n        this.target?.remove();\n        this.target = undefined;\n    }\n\n    public setSeriesStates(renderStateData: IRenderStateData[]) {\n        this.seriesStatesSubject.next(renderStateData);\n        this.eventBus.getStream(SERIES_STATE_CHANGE_EVENT).next({ data: renderStateData });\n    }\n\n    private onUpdate(seriesSet: IChartSeries[]) {\n        this.dataManager.update(seriesSet);\n\n        this.grid.scales = this.dataManager.scalesIndexByKey;\n        this.dataManager.updateScaleDomains();\n        this.grid.updateRanges();\n\n        this.plugins.forEach(p => p.update());\n    }\n\n    private onUpdateDimensions() {\n        const dimensionConfig = this.grid.config().dimension;\n\n        // if the chart is reused with different grid dimensions, the chart's container dimensions need to be adjusted as well\n        this.updateTargetDimensions(dimensionConfig);\n\n        const dimensions: Partial = {};\n        if (dimensionConfig.autoHeight) {\n            dimensions.height = this.element.clientHeight;\n        }\n        if (dimensionConfig.autoWidth) {\n            dimensions.width = this.element.clientWidth;\n        }\n        this.grid.updateDimensions(dimensions);\n\n        this.plugins.forEach(p => p.updateDimensions());\n    }\n\n    private updateTargetDimensions(dimensionConfig: IDimensionConfig) {\n        if (!dimensionConfig.autoHeight) {\n            // use style instead of attr to override css style\n            this.target?.style(\"height\", dimensionConfig.outerHeight() + \"px\");\n        }\n        if (!dimensionConfig.autoWidth) {\n            // use style instead of attr to override css style\n            this.target?.style(\"width\", dimensionConfig.outerWidth() + \"px\");\n        }\n    }\n\n    private onSetSeriesStates(renderStateData: IRenderStateData[]) {\n        this.renderEngine.setSeriesStates(renderStateData);\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChartAssistRenderStateData.html":{"url":"classes/ChartAssistRenderStateData.html","title":"class - ChartAssistRenderStateData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChartAssistRenderStateData\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/chart-assists/types.ts\n        \n\n            \n                Description\n            \n            \n                Legend interaction assist uses this class to present the state that consists of emphasisState+visible as one state\n\n            \n\n\n            \n                Implements\n            \n            \n                            IRenderStateData\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                emphasisState\n                            \n                            \n                                    Public\n                                series\n                            \n                            \n                                    Public\n                                seriesId\n                            \n                            \n                                    Public\n                                visible\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    state\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(seriesId: string, series: IChartAssistSeries, emphasisState, visible)\n                    \n                \n                        \n                            \n                                Defined in src/core/chart-assists/types.ts:58\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        seriesId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        series\n                                                  \n                                                        \n                                                                    IChartAssistSeries\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        emphasisState\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        visible\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            emphasisState\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : RenderState.default\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/types.ts:61\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     IChartAssistSeries\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/types.ts:60\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            seriesId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/types.ts:59\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/types.ts:62\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        state\n                    \n                \n\n                \n                    \n                        getstate()\n                    \n                \n                            \n                                \n                                    Defined in src/core/chart-assists/types.ts:65\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { RenderState } from \"../../renderers/types\";\nimport { IAccessors, IChart, IChartAssistSeries, IChartSeries, IRenderStateData } from \"../common/types\";\n\n/**\n * Interface representing the spark chart assist's\n * association between one of its charts and a series set\n */\nexport interface ISpark {\n    chartSeriesSet: IChartAssistSeries[];\n    id?: string;\n    chart?: IChart;\n}\n\n/**\n * Interface representing an assistant that aids in chart usage\n */\nexport interface IChartAssist {\n    /**\n     * Updates the series set for the chart assist's associated chart\n     *\n     * @param inputSeriesSet The updated set of series\n     */\n    update(inputSeriesSet: IChartAssistSeries[]): void;\n\n    /**\n     * Gets the current highlighted value for the specified series\n     *\n     * @param {IChartSeries} chartSeries The chart series to get the highlighted value for\n     * @param {string} scaleKey The key for the datapoint value scale\n     * @param {string} [formatterName] The name of the formatter if a custom formatter name is set on the scale\n     *\n     * @returns {string} The highlighted value\n     */\n    getHighlightedValue(chartSeries: IChartSeries, scaleKey: string, formatterName?: string): string | number | undefined;\n\n    /**\n     * Returns visible series that are represented by a legend\n     */\n    getVisibleSeriesWithLegend(): IChartAssistSeries[];\n}\n\n/** Event types that can be emitted from a chart assist */\nexport enum ChartAssistEventType {\n    ToggleSeries = \"ToggleSeries\",\n    ResetVisibleSeries = \"ResetVisibleSeries\",\n    EmphasizeSeries = \"EmphasizeSeries\",\n}\n\n/** Interface for chart assist events */\nexport interface IChartAssistEvent {\n    type: ChartAssistEventType;\n    payload: any;\n}\n\n/**\n * Legend interaction assist uses this class to present the state that consists of emphasisState+visible as one state\n */\nexport class ChartAssistRenderStateData implements IRenderStateData {\n    constructor(public seriesId: string,\n                public series: IChartAssistSeries,\n                public emphasisState = RenderState.default,\n                public visible = true) {\n    }\n\n    get state(): RenderState {\n        return this.visible ? this.emphasisState : RenderState.hidden;\n    }\n}\n\nexport interface IRenderStatesIndex {\n    [seriesId: string]: ChartAssistRenderStateData;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/ChartCollectionIdDirective.html":{"url":"directives/ChartCollectionIdDirective.html","title":"directive - ChartCollectionIdDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  ChartCollectionIdDirective\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chart-collection/chart-collection-id.directive.ts\n        \n\n            \n                Description\n            \n            \n                This directive represents a grouping behavior that is separated from chart components. Any chart component\nregistering the CHART_COMPONENT provider can be injected into this.\nA group of charts with the same associated chart collection id will share events broadcasted through their event buses.\n\n            \n\n            \n                Implements\n            \n            \n                            AfterViewInit\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [nuiChartCollectionId]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                nuiChartCollectionId\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(chartComponent: IChartComponent, chartCollectionService: ChartCollectionService)\n                    \n                \n                        \n                            \n                                Defined in src/chart-collection/chart-collection-id.directive.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        chartComponent\n                                                  \n                                                        \n                                                                        IChartComponent\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        chartCollectionService\n                                                  \n                                                        \n                                                                        ChartCollectionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        nuiChartCollectionId\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/chart-collection/chart-collection-id.directive.ts:20\n                            \n                        \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { AfterViewInit, Directive, Inject, Input } from \"@angular/core\";\n\nimport { CHART_COMPONENT } from \"../constants\";\nimport { IChartComponent } from \"../core/common/types\";\n\nimport { ChartCollectionService } from \"./chart-collection.service\";\n\n/**\n * This directive represents a grouping behavior that is separated from chart components. Any chart component\n * registering the CHART_COMPONENT provider can be injected into this.\n *\n * A group of charts with the same associated chart collection id will share events broadcasted through their event buses.\n */\n@Directive({\n    selector: \"[nuiChartCollectionId]\",\n})\nexport class ChartCollectionIdDirective implements AfterViewInit {\n    /* eslint-disable-next-line @angular-eslint/no-input-rename */\n    @Input(\"nuiChartCollectionId\")\n    public collectionId: string;\n\n    constructor(@Inject(CHART_COMPONENT) private chartComponent: IChartComponent,\n                private chartCollectionService: ChartCollectionService) {\n    }\n\n    public ngAfterViewInit(): void {\n        this.chartCollectionService.getChartCollection(this.collectionId).addChart(this.chartComponent.chart);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ChartCollectionService.html":{"url":"injectables/ChartCollectionService.html","title":"injectable - ChartCollectionService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ChartCollectionService\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chart-collection/chart-collection.service.ts\n        \n\n            \n                Description\n            \n            \n                This service registers collections of charts identified by given id. It is used primarily by the ChartCollectionId directive.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getChartCollection\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getChartCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getChartCollection(collectionId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/chart-collection/chart-collection.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    collectionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport isUndefined from \"lodash/isUndefined\";\n\nimport { ChartCollection } from \"../core/chart-collection\";\n\n/**\n * This service registers collections of charts identified by given id. It is used primarily by the ChartCollectionId directive.\n */\n@Injectable()\nexport class ChartCollectionService {\n\n    private collections: { [key: string]: ChartCollection } = {};\n\n    public getChartCollection(collectionId: string) {\n        let collection = this.collections[collectionId];\n        if (isUndefined(collection)) {\n            collection = new ChartCollection();\n            this.collections[collectionId] = collection;\n        }\n        return collection;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ChartComponent.html":{"url":"components/ChartComponent.html","title":"component - ChartComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ChartComponent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n    File\n\n\n    src/chart/chart.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    AfterContentInit\n                    AfterViewInit\n                    OnDestroy\n                    IChartComponent\n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n            \n                providers\n                \n                                {\n    provide: CHART_COMPONENT, useExisting: forwardRef(() => ChartComponent),\n}\n                \n            \n\n\n            \n                selector\n                nui-chart\n            \n\n\n\n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                redraw\n                            \n                            \n                                    Public\n                                    Optional\n                                resizeObserver\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                chart\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(elRef: ElementRef, ngZone: NgZone, cd: ChangeDetectorRef)\n                    \n                \n                        \n                            \n                                Defined in src/chart/chart.component.ts:37\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        elRef\n                                                  \n                                                        \n                                                                        ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        ngZone\n                                                  \n                                                        \n                                                                        NgZone\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cd\n                                                  \n                                                        \n                                                                        ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        chart\n                    \n                \n                \n                    \n                        Type :         IChart\n\n                    \n                \n                        \n                            \n                                    Defined in src/chart/chart.component.ts:33\n                            \n                        \n            \n        \n\n\n\n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            redraw\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/chart/chart.component.ts:82\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            resizeObserver\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ResizeObserver\n\n                        \n                    \n                        \n                            \n                                    Defined in src/chart/chart.component.ts:35\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import {\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    forwardRef,\n    Input,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    SimpleChanges,\n} from \"@angular/core\";\nimport debounce from \"lodash/debounce\";\nimport ResizeObserver from \"resize-observer-polyfill\";\n\nimport { CHART_COMPONENT, CHART_VIEW_STATUS_EVENT, REFRESH_EVENT } from \"../constants\";\nimport { IChart, IChartComponent, IChartViewStatusEventPayload } from \"../core/common/types\";\n\n@Component({\n    selector: \"nui-chart\",\n    template: \"\",\n    providers: [\n        {\n            provide: CHART_COMPONENT,\n            useExisting: forwardRef(() => ChartComponent),\n        },\n    ],\n})\nexport class ChartComponent implements OnInit, AfterContentInit, AfterViewInit, OnDestroy, IChartComponent, OnChanges {\n\n    @Input() public chart: IChart;\n\n    public resizeObserver?: ResizeObserver;\n    private resizeHandler: Function;\n    private intersectionObserver: IntersectionObserver;\n\n    constructor(private elRef: ElementRef, private ngZone: NgZone, private cd: ChangeDetectorRef) {\n    }\n\n    public ngOnInit() {\n        this.intersectionObserver = new IntersectionObserver(this.intersectionObserverCallback);\n        this.intersectionObserver.observe(this.elRef.nativeElement);\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes[\"chart\"]) {\n            const previousChart: IChart = changes[\"chart\"].previousValue;\n            if (previousChart) {\n                previousChart.destroy();\n            }\n\n            if (this.chart) {\n                this.chart.build(this.elRef.nativeElement);\n                this.redraw();\n            }\n        }\n    }\n\n    public ngAfterContentInit() {\n        this.chart.getEventBus().getStream(REFRESH_EVENT).subscribe(() => {\n            this.chart.updateDimensions();\n        });\n    }\n\n    public ngAfterViewInit() {\n        this.resizeHandler = debounce(() => this.redraw(), 10);\n        this.resizeObserver = new ResizeObserver(() => {\n            // This was suggested here https://github.com/angular/zone.js/issues/1011\n            this.ngZone.run(() => this.resizeHandler());\n        });\n        this.ngZone.runOutsideAngular(() => this.resizeObserver?.observe((this.elRef.nativeElement)));\n    }\n\n    public ngOnDestroy() {\n        this.intersectionObserver?.unobserve(this.elRef.nativeElement);\n        this.resizeObserver?.unobserve(this.elRef.nativeElement);\n        this.chart?.destroy();\n    }\n\n    public redraw = () => {\n        this.chart.updateDimensions();\n        this.cd.detectChanges();\n    }\n\n    private intersectionObserverCallback = (entries: IntersectionObserverEntry[], observer: IntersectionObserver): void => {\n        // Since we're only listening for intersection changes for one target (the chart itself), the 'entries' argument always has just one element.\n        const data: IChartViewStatusEventPayload = { isChartInView: entries[0].isIntersecting };\n        this.chart.getEventBus().getStream(CHART_VIEW_STATUS_EVENT).next({ data });\n    }\n}\n\n    \n\n\n\n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'BasicLegendTileComponent', 'selector': 'nui-basic-legend-tile'},{'name': 'ChartComponent', 'selector': 'nui-chart'},{'name': 'ChartDonutContentComponent', 'selector': 'nui-chart-donut-content'},{'name': 'ChartMarkerComponent', 'selector': 'nui-chart-marker'},{'name': 'ChartPopoverComponent', 'selector': 'nui-chart-popover'},{'name': 'ChartTooltipComponent', 'selector': 'nui-chart-tooltip'},{'name': 'ChartTooltipsComponent', 'selector': 'nui-chart-tooltips'},{'name': 'LegendComponent', 'selector': 'nui-legend'},{'name': 'LegendSeriesComponent', 'selector': 'nui-legend-series'},{'name': 'RichLegendTileComponent', 'selector': 'nui-rich-legend-tile'}];\n    var DIRECTIVES = [{'name': 'ChartCollectionIdDirective', 'selector': '[nuiChartCollectionId]'}];\n    var ACTUAL_COMPONENT = {'name': 'ChartComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ChartDonutContentComponent.html":{"url":"components/ChartDonutContentComponent.html","title":"component - ChartDonutContentComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ChartDonutContentComponent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n    File\n\n\n    src/chart-donut-content/chart-donut-content.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnDestroy\n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                nui-chart-donut-content\n            \n\n            \n                styleUrls\n                ./chart-donut-content.component.less\n            \n\n\n\n            \n                templateUrl\n                ./chart-donut-content.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                contentPosition\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                plugin\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        plugin\n                    \n                \n                \n                    \n                        Type :         ChartDonutContentPlugin\n\n                    \n                \n                        \n                            \n                                    Defined in src/chart-donut-content/chart-donut-content.component.ts:15\n                            \n                        \n                \n                    \n                        The plugin instance \n\n                    \n                \n            \n        \n\n\n\n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            contentPosition\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IElementPosition\n\n                        \n                    \n                        \n                            \n                                    Defined in src/chart-donut-content/chart-donut-content.component.ts:18\n                            \n                        \n\n                \n                    \n                        The current content position \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, Input, OnChanges, OnDestroy, SimpleChanges } from \"@angular/core\";\nimport { Subscription } from \"rxjs\";\n\nimport { ChartDonutContentPlugin } from \"../core/plugins/chart-donut-content-plugin\";\nimport { IElementPosition } from \"../core/plugins/types\";\n\n@Component({\n    selector: \"nui-chart-donut-content\",\n    templateUrl: \"./chart-donut-content.component.html\",\n    styleUrls: [\"./chart-donut-content.component.less\"],\n})\nexport class ChartDonutContentComponent implements OnDestroy, OnChanges {\n\n    /** The plugin instance */\n    @Input() public plugin: ChartDonutContentPlugin;\n\n    /** The current content position */\n    public contentPosition: IElementPosition;\n\n    private contentPositionUpdateSubscription: Subscription;\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes.plugin) {\n            this.contentPositionUpdateSubscription?.unsubscribe();\n\n            this.contentPositionUpdateSubscription = this.plugin.contentPositionUpdateSubject.subscribe((contentPosition: IElementPosition) => {\n                this.contentPosition = contentPosition;\n            });\n\n            this.plugin.chart.updateDimensions();\n        }\n    }\n\n    public ngOnDestroy() {\n        if (this.contentPositionUpdateSubscription) {\n            this.contentPositionUpdateSubscription.unsubscribe();\n        }\n    }\n}\n\n    \n\n\n\n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    '\n    var COMPONENTS = [{'name': 'BasicLegendTileComponent', 'selector': 'nui-basic-legend-tile'},{'name': 'ChartComponent', 'selector': 'nui-chart'},{'name': 'ChartDonutContentComponent', 'selector': 'nui-chart-donut-content'},{'name': 'ChartMarkerComponent', 'selector': 'nui-chart-marker'},{'name': 'ChartPopoverComponent', 'selector': 'nui-chart-popover'},{'name': 'ChartTooltipComponent', 'selector': 'nui-chart-tooltip'},{'name': 'ChartTooltipsComponent', 'selector': 'nui-chart-tooltips'},{'name': 'LegendComponent', 'selector': 'nui-legend'},{'name': 'LegendSeriesComponent', 'selector': 'nui-legend-series'},{'name': 'RichLegendTileComponent', 'selector': 'nui-rich-legend-tile'}];\n    var DIRECTIVES = [{'name': 'ChartCollectionIdDirective', 'selector': '[nuiChartCollectionId]'}];\n    var ACTUAL_COMPONENT = {'name': 'ChartDonutContentComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChartDonutContentPlugin.html":{"url":"classes/ChartDonutContentPlugin.html","title":"class - ChartDonutContentPlugin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChartDonutContentPlugin\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/chart-donut-content-plugin.ts\n        \n\n            \n                Description\n            \n            \n                This plugin calculates new size and position for content inside donut chart\n\n            \n\n            \n                Extends\n            \n            \n                        ChartPlugin\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                contentPosition\n                            \n                            \n                                    Public\n                                contentPositionUpdateSubject\n                            \n                            \n                                    Public\n                                chart\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            contentPosition\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IElementPosition\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: 0,\n        left: 0,\n        width: 0,\n        height: 0,\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/chart-donut-content-plugin.ts:17\n                            \n                        \n\n                \n                    \n                        The current content position \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            contentPositionUpdateSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/chart-donut-content-plugin.ts:14\n                            \n                        \n\n                \n                    \n                        Subject for getting updates on the content position \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IChart\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPlugin:7\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/chart-donut-content-plugin.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/chart-donut-content-plugin.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:15\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:9\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import isUndefined from \"lodash/isUndefined\";\nimport { Subject } from \"rxjs\";\n\nimport { RadialRenderer } from \"../../renderers/radial/radial-renderer\";\nimport { ChartPlugin } from \"../common/chart-plugin\";\n\nimport { IElementPosition } from \"./types\";\n\n/**\n* This plugin calculates new size and position for content inside donut chart\n*/\nexport class ChartDonutContentPlugin extends ChartPlugin {\n    /** Subject for getting updates on the content position */\n    public contentPositionUpdateSubject = new Subject();\n\n    /** The current content position */\n    public contentPosition: IElementPosition = {\n        top: 0,\n        left: 0,\n        width: 0,\n        height: 0,\n    };\n\n    public updateDimensions() {\n        const radius = this.chart.getDataManager().chartSeriesSet.reduce((prev: number | undefined, current) => {\n            if (current.renderer instanceof RadialRenderer && !isUndefined(prev)) {\n                return Math.min(prev, current.renderer.getInnerRadius(current.scales.r.range(), current.data.length - 1));\n            }\n            return prev;\n        }, Infinity);\n\n        if (isUndefined(radius)) {\n            throw new Error(\"Radius is undefined\");\n        }\n\n        this.contentPosition = this.getContentPosition(radius);\n        this.contentPositionUpdateSubject.next(this.contentPosition);\n    }\n\n    public destroy(): void {\n        this.contentPositionUpdateSubject.complete();\n    }\n\n    private getContentPosition(areaSize: number): IElementPosition {\n        const basics = [this.chart.getGrid().config().dimension.outerHeight() / 2, this.chart.getGrid().config().dimension.outerWidth() / 2];\n        return {\n            top: basics[0] - (areaSize / Math.sqrt(2)),\n            left: basics[1] - (areaSize / Math.sqrt(2)),\n            width: areaSize * Math.sqrt(2),\n            height: areaSize * Math.sqrt(2),\n        };\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ChartMarkerComponent.html":{"url":"components/ChartMarkerComponent.html","title":"component - ChartMarkerComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ChartMarkerComponent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n    File\n\n\n    src/chart-marker/chart-marker.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnDestroy\n                    AfterViewInit\n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                nui-chart-marker\n            \n\n            \n                styleUrls\n                ./chart-marker.component.less\n            \n\n\n\n            \n                templateUrl\n                ./chart-marker.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                height\n                            \n                            \n                                    Public\n                                svgContent\n                            \n                            \n                                    Public\n                                viewBox\n                            \n                            \n                                    Public\n                                width\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                color\n                            \n                            \n                                drawLine\n                            \n                            \n                                marker\n                            \n                            \n                                maxSize\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(changeDetector: ChangeDetectorRef)\n                    \n                \n                        \n                            \n                                Defined in src/chart-marker/chart-marker.component.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        changeDetector\n                                                  \n                                                        \n                                                                        ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        color\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/chart-marker/chart-marker.component.ts:18\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        drawLine\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/chart-marker/chart-marker.component.ts:17\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        marker\n                    \n                \n                \n                    \n                        Type :         IChartMarker\n\n                    \n                \n                        \n                            \n                                    Defined in src/chart-marker/chart-marker.component.ts:16\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        maxSize\n                    \n                \n                \n                    \n                        Default value : 20\n                    \n                \n                        \n                            \n                                    Defined in src/chart-marker/chart-marker.component.ts:19\n                            \n                        \n            \n        \n\n\n\n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            height\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"10px\"\n                        \n                    \n                        \n                            \n                                    Defined in src/chart-marker/chart-marker.component.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            svgContent\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ElementRef\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild('svgContent')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/chart-marker/chart-marker.component.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            viewBox\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/chart-marker/chart-marker.component.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            width\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"10px\"\n                        \n                    \n                        \n                            \n                                    Defined in src/chart-marker/chart-marker.component.ts:25\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { AfterViewInit, ChangeDetectorRef, Component, ElementRef, Input, OnChanges, OnDestroy, SimpleChanges, ViewChild } from \"@angular/core\";\nimport isFunction from \"lodash/isFunction\";\nimport { BehaviorSubject } from \"rxjs\";\n\nimport { IChartMarker } from \"../core/common/types\";\n\n/** @ignore */\nconst SVG_PADDING = 3;\n\n@Component({\n    selector: \"nui-chart-marker\",\n    templateUrl: \"./chart-marker.component.html\",\n    styleUrls: [\"./chart-marker.component.less\"],\n})\nexport class ChartMarkerComponent implements OnDestroy, AfterViewInit, OnChanges {\n    @Input() marker: IChartMarker;\n    @Input() drawLine: boolean;\n    @Input() color: string;\n    @Input() maxSize = 20;\n\n    @ViewChild(\"svgContent\") public svgContent: ElementRef;\n\n    public viewBox: string;\n    public height: string = \"10px\"; // size needs to be defined by default to prevent initial svg element from being huge\n    public width: string = \"10px\"; // same here\n\n    private svg = new BehaviorSubject(\"\");\n\n    constructor(private changeDetector: ChangeDetectorRef) {\n    }\n\n    public ngAfterViewInit() {\n        this.svg.subscribe((svg: string) => {\n            this.renderMarkerSvg(svg);\n        });\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes[\"marker\"] || changes[\"color\"]) {\n            if (changes[\"color\"]) {\n                this.marker.setColor(this.color);\n            }\n            if (this.marker && this.marker.getSvg && isFunction(this.marker.getSvg)) {\n                this.svg.next(this.marker.getSvg());\n            }\n        }\n    }\n\n    public ngOnDestroy(): void {\n        this.svg.complete();\n    }\n\n    private renderMarkerSvg(svg: string) {\n        const svgContainerElement: any = this.svgContent.nativeElement;\n        const line = ``;\n        svgContainerElement.innerHTML = \"\";\n\n        if (this.drawLine) {\n            svgContainerElement.insertAdjacentHTML(\"beforeend\", line);\n        }\n        svgContainerElement.insertAdjacentHTML(\"beforeend\", svg);\n\n        setTimeout(() => {\n            const clientRect = svgContainerElement.getBBox();\n            this.viewBox = `${clientRect.x - SVG_PADDING} ${clientRect.y - SVG_PADDING} ` +\n                `${clientRect.width + 2 * SVG_PADDING} ${clientRect.height + 2 * SVG_PADDING}`;\n            this.width = Math.min(clientRect.width + 2 * SVG_PADDING, this.maxSize) + \"px\";\n            this.height = Math.min(clientRect.height + 2 * SVG_PADDING, this.maxSize) + \"px\";\n\n            this.changeDetector.markForCheck();\n        });\n    }\n}\n\n    \n\n\n\n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    '\n    var COMPONENTS = [{'name': 'BasicLegendTileComponent', 'selector': 'nui-basic-legend-tile'},{'name': 'ChartComponent', 'selector': 'nui-chart'},{'name': 'ChartDonutContentComponent', 'selector': 'nui-chart-donut-content'},{'name': 'ChartMarkerComponent', 'selector': 'nui-chart-marker'},{'name': 'ChartPopoverComponent', 'selector': 'nui-chart-popover'},{'name': 'ChartTooltipComponent', 'selector': 'nui-chart-tooltip'},{'name': 'ChartTooltipsComponent', 'selector': 'nui-chart-tooltips'},{'name': 'LegendComponent', 'selector': 'nui-legend'},{'name': 'LegendSeriesComponent', 'selector': 'nui-legend-series'},{'name': 'RichLegendTileComponent', 'selector': 'nui-rich-legend-tile'}];\n    var DIRECTIVES = [{'name': 'ChartCollectionIdDirective', 'selector': '[nuiChartCollectionId]'}];\n    var ACTUAL_COMPONENT = {'name': 'ChartMarkerComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChartPalette.html":{"url":"classes/ChartPalette.html","title":"class - ChartPalette","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChartPalette\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/palette/chart-palette.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IChartPalette\n            \n\n\n            \n    Index\n    \n        \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    standardColors\n                                \n                                \n                                    backgroundColors\n                                \n                                \n                                    textColors\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(colors: string[] | IValueProvider, options: object)\n                    \n                \n                        \n                            \n                                Defined in src/core/common/palette/chart-palette.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        colors\n                                                  \n                                                        \n                                                                        string[] | IValueProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        object\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        standardColors\n                    \n                \n\n                \n                    \n                        getstandardColors()\n                    \n                \n                            \n                                \n                                    Defined in src/core/common/palette/chart-palette.ts:31\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        backgroundColors\n                    \n                \n\n                \n                    \n                        getbackgroundColors()\n                    \n                \n                            \n                                \n                                    Defined in src/core/common/palette/chart-palette.ts:35\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        textColors\n                    \n                \n\n                \n                    \n                        gettextColors()\n                    \n                \n                            \n                                \n                                    Defined in src/core/common/palette/chart-palette.ts:39\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { rgb } from \"d3-color\";\nimport isArray from \"lodash/isArray\";\n\nimport { IChartPalette, IValueProvider } from \"../types\";\n\nimport { getColorValueByName } from \"./color.helper\";\nimport { ProcessedColorProvider } from \"./processed-color-provider\";\nimport { SequentialColorProvider } from \"./sequential-color-provider\";\nimport { TextColorProvider } from \"./text-color-provider\";\n\nexport class ChartPalette implements IChartPalette {\n    private _standardColors: IValueProvider;\n    private _textColors: TextColorProvider;\n    private _backgroundColors: IValueProvider;\n\n    constructor(colors: string[] | IValueProvider, options = {backgroundOpacity: 0.15}) {\n        if (isArray(colors)) {\n            this._standardColors = new SequentialColorProvider( colors);\n        } else {\n            this._standardColors = > colors;\n        }\n        this._textColors = new TextColorProvider(this.standardColors, {light: \"white\", dark: \"black\"}); // TODO: oops!\n        this._backgroundColors = new ProcessedColorProvider(this.standardColors, (c: string) => {\n            const color = getColorValueByName(c);\n            const rgbColor = rgb(color);\n            rgbColor.opacity = options.backgroundOpacity;\n            return rgbColor.toString();\n        });\n    }\n\n    public get standardColors(): IValueProvider {\n        return this._standardColors;\n    }\n\n    public get backgroundColors(): IValueProvider {\n        return this._backgroundColors;\n    }\n\n    public get textColors(): IValueProvider {\n        return this._textColors;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChartPlugin.html":{"url":"classes/ChartPlugin.html","title":"class - ChartPlugin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChartPlugin\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/chart-plugin.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IChartPlugin\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                chart\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/core/common/chart-plugin.ts:3\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IChart\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/chart-plugin.ts:7\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/chart-plugin.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/chart-plugin.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/chart-plugin.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/chart-plugin.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IChart, IChartPlugin } from \"./types\";\n\nexport abstract class ChartPlugin implements IChartPlugin {\n\n    constructor() { }\n\n    public chart: IChart;\n\n    public initialize(): void { }\n\n    public update(): void { }\n\n    public updateDimensions(): void { }\n\n    public destroy(): void { }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ChartPopoverComponent.html":{"url":"components/ChartPopoverComponent.html","title":"component - ChartPopoverComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ChartPopoverComponent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n    File\n\n\n    src/chart-popover/chart-popover.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnChanges\n                    OnInit\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                nui-chart-popover\n            \n\n            \n                styleUrls\n                ./chart-popover.component.less\n            \n\n\n\n            \n                templateUrl\n                ./chart-popover.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                element\n                            \n                            \n                                popover\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                plugin\n                            \n                            \n                                template\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(changeDetector: ChangeDetectorRef, element: ElementRef)\n                    \n                \n                        \n                            \n                                Defined in src/chart-popover/chart-popover.component.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        changeDetector\n                                                  \n                                                        \n                                                                        ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        element\n                                                  \n                                                        \n                                                                        ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        plugin\n                    \n                \n                \n                    \n                        Type :         ChartPopoverPlugin\n\n                    \n                \n                        \n                            \n                                    Defined in src/chart-popover/chart-popover.component.ts:30\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        template\n                    \n                \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                        \n                            \n                                    Defined in src/chart-popover/chart-popover.component.ts:32\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        update\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/chart-popover/chart-popover.component.ts:34\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            element\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ElementRef\n\n                        \n                    \n                        \n                            \n                                    Defined in src/chart-popover/chart-popover.component.ts:41\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            popover\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     PopoverComponent\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild(PopoverComponent)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/chart-popover/chart-popover.component.ts:36\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import {\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    SimpleChanges,\n    TemplateRef,\n    ViewChild,\n} from \"@angular/core\";\nimport { PopoverComponent } from \"@nova-ui/bits\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\nimport { IDataPointsPayload } from \"../core/common/types\";\nimport { ChartPopoverPlugin } from \"../core/plugins/chart-popover-plugin\";\nimport { IElementPosition } from \"../core/plugins/types\";\n\n@Component({\n    selector: \"nui-chart-popover\",\n    templateUrl: \"./chart-popover.component.html\",\n    styleUrls: [\"./chart-popover.component.less\"],\n})\nexport class ChartPopoverComponent implements OnChanges, OnInit, OnDestroy {\n\n    @Input() plugin: ChartPopoverPlugin;\n\n    @Input() template: TemplateRef;\n\n    @Output() update = new EventEmitter();\n\n    @ViewChild(PopoverComponent) popover: PopoverComponent;\n\n    private destroy$ = new Subject();\n    private initPlugin$ = new Subject();\n\n    constructor(private changeDetector: ChangeDetectorRef, public element: ElementRef) { }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes.plugin && !changes.plugin.isFirstChange()) {\n            this.initPlugin();\n        }\n    }\n\n    public ngOnInit() {\n        this.initPlugin();\n    }\n\n    public ngOnDestroy(): void {\n        this.destroy$.next();\n        this.destroy$.complete();\n        this.initPlugin$.complete();\n    }\n\n    private initPlugin() {\n        this.initPlugin$.next();\n\n        this.plugin?.openPopoverSubject.pipe(\n            takeUntil(this.initPlugin$),\n            takeUntil(this.destroy$)\n        ).subscribe(() => {\n            this.changeDetector.markForCheck();\n        });\n\n        this.plugin?.updatePositionSubject.pipe(\n            takeUntil(this.initPlugin$),\n            takeUntil(this.destroy$)\n        ).subscribe((position: IElementPosition) => {\n            this.popover?.resetSize();\n            // calculating a width offset to position the popover's host element at the midpoint of the popover target\n            const widthOffset = position.width / 2;\n            this.element.nativeElement.style.left = position.left + widthOffset + \"px\";\n            this.element.nativeElement.style.top = position.top + \"px\";\n            this.popover?.updatePosition();\n            this.update.next(this.plugin?.dataPoints);\n        });\n    }\n}\n\n    \n\n\n\n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                        '\n    var COMPONENTS = [{'name': 'BasicLegendTileComponent', 'selector': 'nui-basic-legend-tile'},{'name': 'ChartComponent', 'selector': 'nui-chart'},{'name': 'ChartDonutContentComponent', 'selector': 'nui-chart-donut-content'},{'name': 'ChartMarkerComponent', 'selector': 'nui-chart-marker'},{'name': 'ChartPopoverComponent', 'selector': 'nui-chart-popover'},{'name': 'ChartTooltipComponent', 'selector': 'nui-chart-tooltip'},{'name': 'ChartTooltipsComponent', 'selector': 'nui-chart-tooltips'},{'name': 'LegendComponent', 'selector': 'nui-legend'},{'name': 'LegendSeriesComponent', 'selector': 'nui-legend-series'},{'name': 'RichLegendTileComponent', 'selector': 'nui-rich-legend-tile'}];\n    var DIRECTIVES = [{'name': 'ChartCollectionIdDirective', 'selector': '[nuiChartCollectionId]'}];\n    var ACTUAL_COMPONENT = {'name': 'ChartPopoverComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChartPopoverPlugin.html":{"url":"classes/ChartPopoverPlugin.html","title":"class - ChartPopoverPlugin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChartPopoverPlugin\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/chart-popover-plugin.ts\n        \n\n            \n                Description\n            \n            \n                This plugin listens for the INTERACTION_DATA_POINTS_EVENT by default and transforms received data into\npopover inputs. The listened event can be configured using the 'config.eventStreamId' property.\nThe actual popover is handled by the ChartPopoverComponent.\n\n            \n\n            \n                Extends\n            \n            \n                        ChartPlugin\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                closePopoverSubject\n                            \n                            \n                                    Public\n                                config\n                            \n                            \n                                    Public\n                                dataPoints\n                            \n                            \n                                    Public\n                                DEFAULT_CONFIG\n                            \n                            \n                                    Public\n                                openPopoverSubject\n                            \n                            \n                                    Public\n                                popoverTargetPosition\n                            \n                            \n                                    Public\n                                updatePositionSubject\n                            \n                            \n                                    Public\n                                chart\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: IPopoverPluginConfig)\n                    \n                \n                        \n                            \n                                Defined in src/core/plugins/chart-popover-plugin.ts:49\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        IPopoverPluginConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            closePopoverSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/chart-popover-plugin.ts:34\n                            \n                        \n\n                \n                    \n                        Emits an event indicating the popover should close \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IPopoverPluginConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/chart-popover-plugin.ts:51\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dataPoints\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IDataPointsPayload\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/chart-popover-plugin.ts:28\n                            \n                        \n\n                \n                    \n                        Info about the data point(s) received in the most recent interaction event \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            DEFAULT_CONFIG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IPopoverPluginConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        eventStreamId: INTERACTION_DATA_POINTS_EVENT,\n        interactionType: InteractionType.MouseMove,\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/chart-popover-plugin.ts:43\n                            \n                        \n\n                \n                    \n                        The default plugin configuration \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            openPopoverSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/chart-popover-plugin.ts:32\n                            \n                        \n\n                \n                    \n                        Emits an event indicating the popover should open \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            popoverTargetPosition\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IElementPosition\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: 0,\n        left: 0,\n        width: 0,\n        height: 0,\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/chart-popover-plugin.ts:36\n                            \n                        \n\n                \n                    \n                        The target position of the popover \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            updatePositionSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/chart-popover-plugin.ts:30\n                            \n                        \n\n                \n                    \n                        Emits the popover's target position \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IChart\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPlugin:7\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/chart-popover-plugin.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/chart-popover-plugin.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:15\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:9\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import defaultsDeep from \"lodash/defaultsDeep\";\nimport pickBy from \"lodash/pickBy\";\nimport values from \"lodash/values\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\nimport { INTERACTION_DATA_POINTS_EVENT, INTERACTION_DATA_POINT_EVENT } from \"../../constants\";\nimport { ChartPlugin } from \"../common/chart-plugin\";\nimport { IChartEvent, IDataPoint, IDataPointsPayload, InteractionType } from \"../common/types\";\n\nimport { IElementPosition } from \"./types\";\n\n/** Configuration for the popover plugin */\nexport interface IPopoverPluginConfig {\n    /** ID of the event stream the plugin will respond to */\n    eventStreamId?: typeof INTERACTION_DATA_POINTS_EVENT | typeof INTERACTION_DATA_POINT_EVENT;\n    /** The type of interaction that will trigger the showing and hiding of the popovers */\n    interactionType?: InteractionType;\n}\n\n/**\n * This plugin listens for the INTERACTION_DATA_POINTS_EVENT by default and transforms received data into\n * popover inputs. The listened event can be configured using the 'config.eventStreamId' property.\n * The actual popover is handled by the ChartPopoverComponent.\n */\nexport class ChartPopoverPlugin extends ChartPlugin {\n    /** Info about the data point(s) received in the most recent interaction event */\n    public dataPoints: IDataPointsPayload;\n    /** Emits the popover's target position */\n    public updatePositionSubject = new Subject();\n    /** Emits an event indicating the popover should open */\n    public openPopoverSubject = new Subject();\n    /** Emits an event indicating the popover should close */\n    public closePopoverSubject = new Subject();\n    /** The target position of the popover */\n    public popoverTargetPosition: IElementPosition = {\n        top: 0,\n        left: 0,\n        width: 0,\n        height: 0,\n    };\n    /** The default plugin configuration */\n    public DEFAULT_CONFIG: IPopoverPluginConfig = {\n        eventStreamId: INTERACTION_DATA_POINTS_EVENT,\n        interactionType: InteractionType.MouseMove,\n    };\n\n    private isOpen = false;\n    private destroy$ = new Subject();\n\n    constructor(public config: IPopoverPluginConfig = {}) {\n        super();\n        this.config = defaultsDeep(this.config, this.DEFAULT_CONFIG);\n    }\n\n    public initialize(): void {\n        this.chart.getEventBus().getStream(this.config.eventStreamId as string).pipe(\n            takeUntil(this.destroy$)\n        ).subscribe((event: IChartEvent) => {\n            if (event.data.interactionType === this.config.interactionType) {\n                // here we handle data either of type IInteractionDataPointsEvent or IInteractionDataPointEvent\n                const dataPoints: IDataPointsPayload = event.data.dataPoints ?? { [event.data.dataPoint.seriesId]: event.data.dataPoint };\n                this.processDataPoints(dataPoints);\n            }\n        });\n    }\n\n    public destroy(): void {\n        if (this.updatePositionSubject) {\n            this.updatePositionSubject.complete();\n        }\n        if (this.openPopoverSubject) {\n            this.openPopoverSubject.complete();\n        }\n        if (this.closePopoverSubject) {\n            this.closePopoverSubject.complete();\n        }\n        if (this.destroy$) {\n            this.destroy$.next();\n            this.destroy$.complete();\n        }\n    }\n\n    protected getAbsolutePosition(valuesArray: any[]) {\n        const chartElement: any = this.chart.target?.node()?.parentNode; // the one above svg\n\n        if (!chartElement) {\n            throw new Error(\"Chart parent node is not defined\");\n        }\n\n        const dataPointsLeft = Math.min(...valuesArray.map(d => d.position.x));\n        const left = chartElement.offsetLeft + this.chart.getGrid().config().dimension.margin.left + dataPointsLeft;\n        const top = chartElement.offsetTop + this.chart.getGrid().config().dimension.margin.top;\n        // area for popovers is enlarged to cover the whole chart (top to bottom),\n        // so that we avoid collision of chart visualization and popover (by UX request)\n        return {\n            top: top,\n            left: left,\n            height: chartElement.offsetHeight,\n            width: Math.max(...valuesArray.map(d => d.position.x + (d.position.width || 0))) - dataPointsLeft,\n        };\n    }\n\n    private processDataPoints(dataPoints: IDataPointsPayload) {\n        const validDataPoints = pickBy(dataPoints, (d: IDataPoint) => d.index >= 0 && d.position);\n        const validDataPointsValues = values(validDataPoints);\n        if (validDataPointsValues.length > 0) {\n            this.popoverTargetPosition = this.getAbsolutePosition(validDataPointsValues);\n            this.dataPoints = validDataPoints;\n            // timeout is needed in order to successfully open popover on initial hover over the chart\n            setTimeout(() => {\n                this.updatePositionSubject.next(this.popoverTargetPosition);\n                if (!this.isOpen) {\n                    this.isOpen = true;\n                    this.openPopoverSubject.next();\n                }\n            });\n\n        } else {\n            // timeout is needed for symmetry of timing with above timeout for opening the popover\n            setTimeout(() => {\n                this.closePopoverSubject.next();\n                this.isOpen = false;\n            });\n        }\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ChartTooltipComponent.html":{"url":"components/ChartTooltipComponent.html","title":"component - ChartTooltipComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ChartTooltipComponent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n    File\n\n\n    src/chart-tooltips/chart-tooltip.component.ts\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                nui-chart-tooltip\n            \n\n            \n                styleUrls\n                ./chart-tooltip.component.less\n            \n\n\n\n            \n                templateUrl\n                ./chart-tooltip.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                template\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        template\n                    \n                \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                        \n                            \n                                    Defined in src/chart-tooltips/chart-tooltip.component.ts:22\n                            \n                        \n            \n        \n\n\n\n\n\n\n\n\n\n    \n        import { animate, style, transition, trigger } from \"@angular/animations\";\nimport { ChangeDetectionStrategy, Component, Input, TemplateRef } from \"@angular/core\";\n\n@Component({\n    selector: \"nui-chart-tooltip\",\n    styleUrls: [\"./chart-tooltip.component.less\"],\n    templateUrl: \"./chart-tooltip.component.html\",\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [\n        trigger(\"tooltip\", [\n            transition(\":enter\", [\n                style({ opacity: 0 }),\n                animate(300, style({ opacity: 1 })),\n            ]),\n            transition(\":leave\", [\n                animate(300, style({ opacity: 0 })),\n            ]),\n        ]),\n    ],\n})\nexport class ChartTooltipComponent {\n    @Input() template: TemplateRef;\n}\n\n    \n\n\n\n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                '\n    var COMPONENTS = [{'name': 'BasicLegendTileComponent', 'selector': 'nui-basic-legend-tile'},{'name': 'ChartComponent', 'selector': 'nui-chart'},{'name': 'ChartDonutContentComponent', 'selector': 'nui-chart-donut-content'},{'name': 'ChartMarkerComponent', 'selector': 'nui-chart-marker'},{'name': 'ChartPopoverComponent', 'selector': 'nui-chart-popover'},{'name': 'ChartTooltipComponent', 'selector': 'nui-chart-tooltip'},{'name': 'ChartTooltipsComponent', 'selector': 'nui-chart-tooltips'},{'name': 'LegendComponent', 'selector': 'nui-legend'},{'name': 'LegendSeriesComponent', 'selector': 'nui-legend-series'},{'name': 'RichLegendTileComponent', 'selector': 'nui-rich-legend-tile'}];\n    var DIRECTIVES = [{'name': 'ChartCollectionIdDirective', 'selector': '[nuiChartCollectionId]'}];\n    var ACTUAL_COMPONENT = {'name': 'ChartTooltipComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ChartTooltipsComponent.html":{"url":"components/ChartTooltipsComponent.html","title":"component - ChartTooltipsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ChartTooltipsComponent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n    File\n\n\n    src/chart-tooltips/chart-tooltips.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnChanges\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                nui-chart-tooltips\n            \n\n            \n                styleUrls\n                ./chart-tooltips.component.less\n            \n\n\n\n            \n                templateUrl\n                ./chart-tooltips.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                closeTooltips\n                            \n                            \n                                    Public\n                                openTooltips\n                            \n                            \n                                tooltips\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                trackByFn\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                plugin\n                            \n                            \n                                template\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(changeDetector: ChangeDetectorRef)\n                    \n                \n                        \n                            \n                                Defined in src/chart-tooltips/chart-tooltips.component.ts:44\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        changeDetector\n                                                  \n                                                        \n                                                                        ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        plugin\n                    \n                \n                \n                    \n                        Type :         ChartTooltipsPlugin\n\n                    \n                \n                        \n                            \n                                    Defined in src/chart-tooltips/chart-tooltips.component.ts:27\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        template\n                    \n                \n                \n                    \n                        Type :         ElementRef\n\n                    \n                \n                        \n                            \n                                    Defined in src/chart-tooltips/chart-tooltips.component.ts:29\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            trackByFn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    trackByFn(index: number, item: any)\n                \n            \n\n\n            \n                \n                    Defined in src/chart-tooltips/chart-tooltips.component.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    item\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            closeTooltips\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/chart-tooltips/chart-tooltips.component.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            openTooltips\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/chart-tooltips/chart-tooltips.component.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tooltips\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         QueryList\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChildren(ChartTooltipDirective)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/chart-tooltips/chart-tooltips.component.ts:31\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { ChangeDetectorRef, Component, ElementRef, Input, OnChanges, OnDestroy, QueryList, SimpleChanges, ViewChildren } from \"@angular/core\";\nimport { forceCollide, forceSimulation, Simulation, SimulationNodeDatum } from \"d3-force\";\nimport { select } from \"d3-selection\";\nimport each from \"lodash/each\";\nimport isEqual from \"lodash/isEqual\";\nimport isNil from \"lodash/isNil\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\nimport { IPosition } from \"../core/common/types\";\nimport { ChartTooltipsPlugin } from \"../core/plugins/tooltips/chart-tooltips-plugin\";\n\nimport { ChartTooltipDirective } from \"./chart-tooltip.directive\";\n\ninterface ITooltipNode extends SimulationNodeDatum {\n    seriesId: string;\n    radius: number;\n}\n\n@Component({\n    selector: \"nui-chart-tooltips\",\n    templateUrl: \"./chart-tooltips.component.html\",\n    styleUrls: [\"./chart-tooltips.component.less\"],\n})\nexport class ChartTooltipsComponent implements OnChanges, OnDestroy {\n\n    @Input() plugin: ChartTooltipsPlugin;\n\n    @Input() template: ElementRef;\n\n    @ViewChildren(ChartTooltipDirective) tooltips: QueryList;\n\n    public openTooltips = new Subject();\n    public closeTooltips = new Subject();\n\n    private unsubscribe$ = new Subject();\n    private simulation: Simulation;\n    // index we use for fast access of tooltip directives by seriesId\n    private tooltipDirectivesIndex: { [seriesId: string]: ChartTooltipDirective } = {};\n    private closePending = false;\n    private isOpen = false;\n    private openTimeout: number;\n    private collisionTimeout: number;\n    private closeTimeout: number;\n\n    constructor(private changeDetector: ChangeDetectorRef) {\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (!(changes[\"plugin\"] && changes[\"plugin\"].currentValue)) {\n            return;\n        }\n\n        this.unsubscribe$.next();\n\n        this.plugin.showSubject.pipe(takeUntil(this.unsubscribe$)).subscribe(() => this.handleOpen());\n        this.plugin.hideSubject.pipe(takeUntil(this.unsubscribe$)).subscribe(() => this.handleClose());\n    }\n\n    public ngOnDestroy(): void {\n        this.unsubscribe$.next();\n        this.unsubscribe$.complete();\n    }\n\n    public trackByFn(index: number, item: any) {\n        return item.value.seriesId;\n    }\n\n    private handleOpen() {\n        this.changeDetector.detectChanges();\n\n        const currentTooltipDirectivesIndex: { [seriesId: string]: ChartTooltipDirective } = {};\n        this.tooltips.forEach(tooltip => {\n            // this is how we identify which series does the tooltip belong to\n            const seriesId: string | undefined = tooltip.elementRef.nativeElement.getAttribute(\"series-id\") ?? undefined;\n\n            if (!seriesId) {\n                throw new Error(\"SeriesId is not defined\");\n            }\n\n            currentTooltipDirectivesIndex[seriesId] = tooltip;\n        });\n\n        const directivesChanged = !isEqual(currentTooltipDirectivesIndex, this.tooltipDirectivesIndex);\n        if (this.closePending || directivesChanged || !this.isOpen) {\n            clearTimeout(this.openTimeout);\n\n            this.openTimeout = setTimeout(() => {\n                this.openTooltips.next();\n                clearTimeout(this.collisionTimeout);\n\n                this.collisionTimeout = setTimeout(() => {\n                    this.avoidTooltipCollisions();\n                    this.isOpen = true;\n                });\n            });\n        } else {\n            this.openTooltips.next();\n            this.avoidTooltipCollisions();\n            this.isOpen = true;\n        }\n    }\n\n    private handleClose() {\n        if (this.simulation) {\n            this.simulation.stop();\n        }\n\n        this.closePending = true;\n        clearTimeout(this.closeTimeout);\n\n        this.closeTimeout = setTimeout(() => {\n            this.closeTooltips.next();\n            this.closePending = false;\n            this.isOpen = false;\n        });\n    }\n\n    /**\n     * Runs the D3 forceCollide based tooltip collision avoidance algorithm\n     */\n    private avoidTooltipCollisions() {\n        // extracted tooltip positions from tooltip directives\n        const tooltipPositions: { [seriesId: string]: IPosition } = {};\n\n        this.tooltips.forEach(tooltip => {\n            const element = tooltip.getOverlayElement();\n\n            // this is how we identify which series does the tooltip belong to\n            const seriesId: string | undefined = tooltip.elementRef.nativeElement.getAttribute(\"series-id\") ?? undefined;\n\n            if (!seriesId) {\n                throw new Error(\"SeriesId is not defined\");\n            }\n\n            this.tooltipDirectivesIndex[seriesId] = tooltip;\n\n            tooltipPositions[seriesId] = {\n                x: element.offsetLeft,\n                y: element.offsetTop,\n                width: element.clientWidth,\n                height: element.clientHeight,\n            };\n        });\n\n        // if there was a previous simulation, then stop it before running a new one\n        if (this.simulation) {\n            this.simulation.stop();\n        }\n\n        this.simulation = this.startSimulation(this.tooltipDirectivesIndex, tooltipPositions);\n    }\n\n    /**\n     * Starts the force simulation to avoid tooltip overlap\n     *\n     * @param tooltipIndex\n     * @param tooltipPositions\n     */\n    private startSimulation(tooltipIndex: { [p: string]: ChartTooltipDirective },\n                            tooltipPositions: { [seriesId: string]: IPosition }) {\n        const nodes = Object.keys(tooltipPositions).map(seriesId => {\n            const position = tooltipPositions[seriesId];\n\n            if (isNil(position.height) || isNil(position.width)) {\n                throw new Error(\"Position height or width are not defined\");\n            }\n\n            const props: any = {\n                seriesId: seriesId,\n                x: position.x,\n                y: position.y,\n                radius: this.isVertical() ? position.height / 2 : position.width / 2,\n            };\n            if (this.isVertical()) {\n                props.fx = position.x;\n            } else {\n                props.fy = position.y;\n            }\n            return props;\n        });\n\n        // TODO: these numbers are only based on playing with the library for the while, it's not fine tuned at all\n        const collisionForce = forceCollide((node: any) => node.radius)\n            .strength(0.5)\n            .iterations(20);\n\n        const simulation = forceSimulation(nodes)\n            .alphaDecay(0.3)\n            .force(\"collisionForce\", collisionForce);\n\n        simulation.on(\"tick\", () => {\n            each(nodes, (node: ITooltipNode) => {\n                const tooltip = tooltipIndex[node.seriesId];\n\n                select(tooltip.getOverlayElement())\n                    .style(this.isVertical() ? \"top\" : \"left\", (this.isVertical() ? node.y : node.x) + \"px\");\n            });\n        });\n\n        return simulation;\n    }\n\n    private isVertical() {\n        return this.plugin.orientation === \"right\";\n    }\n\n}\n\n    \n\n\n\n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                            '\n    var COMPONENTS = [{'name': 'BasicLegendTileComponent', 'selector': 'nui-basic-legend-tile'},{'name': 'ChartComponent', 'selector': 'nui-chart'},{'name': 'ChartDonutContentComponent', 'selector': 'nui-chart-donut-content'},{'name': 'ChartMarkerComponent', 'selector': 'nui-chart-marker'},{'name': 'ChartPopoverComponent', 'selector': 'nui-chart-popover'},{'name': 'ChartTooltipComponent', 'selector': 'nui-chart-tooltip'},{'name': 'ChartTooltipsComponent', 'selector': 'nui-chart-tooltips'},{'name': 'LegendComponent', 'selector': 'nui-legend'},{'name': 'LegendSeriesComponent', 'selector': 'nui-legend-series'},{'name': 'RichLegendTileComponent', 'selector': 'nui-rich-legend-tile'}];\n    var DIRECTIVES = [{'name': 'ChartCollectionIdDirective', 'selector': '[nuiChartCollectionId]'}];\n    var ACTUAL_COMPONENT = {'name': 'ChartTooltipsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChartTooltipsPlugin.html":{"url":"classes/ChartTooltipsPlugin.html","title":"class - ChartTooltipsPlugin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChartTooltipsPlugin\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/tooltips/chart-tooltips-plugin.ts\n        \n\n            \n                Description\n            \n            \n                This plugin listens to the INTERACTION_DATA_POINTS_EVENT and transforms received data into tooltips inputs.\nThe actual tooltips are handled by the ChartTooltipsComponent.\n\n            \n\n            \n                Extends\n            \n            \n                        ChartPlugin\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                dataPointPositions\n                            \n                            \n                                    Public\n                                dataPoints\n                            \n                            \n                                    Public\n                                hideSubject\n                            \n                            \n                                    Public\n                                orientation\n                            \n                            \n                                    Public\n                                showSubject\n                            \n                            \n                                    Public\n                                chart\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                processHighlightedDataPoints\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tooltipPositionOffset: number, orientation: \"right\" | \"top\")\n                    \n                \n                        \n                            \n                                Defined in src/core/plugins/tooltips/chart-tooltips-plugin.ts:81\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        tooltipPositionOffset\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Offset of a tooltip from edge of a highlighted element\n\n                                                        \n                                                \n                                                \n                                                        orientation\n                                                  \n                                                        \n                                                                    \"right\" | \"top\"\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dataPointPositions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/tooltips/chart-tooltips-plugin.ts:65\n                            \n                        \n\n                \n                    \n                        Calculated positions for the data point tooltips \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dataPoints\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IDataPointsPayload\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/tooltips/chart-tooltips-plugin.ts:63\n                            \n                        \n\n                \n                    \n                        Highlighted data points received from the chart \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            hideSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/tooltips/chart-tooltips-plugin.ts:75\n                            \n                        \n\n                \n                    \n                        This publishes an event to hide tooltips\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            orientation\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     \"right\" | \"top\"\n\n                        \n                    \n                    \n                        \n                            Default value : \"right\"\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/tooltips/chart-tooltips-plugin.ts:88\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            showSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/tooltips/chart-tooltips-plugin.ts:70\n                            \n                        \n\n                \n                    \n                        This publishes an event to show tooltips\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IChart\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPlugin:7\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/tooltips/chart-tooltips-plugin.ts:126\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/tooltips/chart-tooltips-plugin.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            processHighlightedDataPoints\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processHighlightedDataPoints(dataPoints: IDataPointsPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/tooltips/chart-tooltips-plugin.ts:131\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataPoints\n                                    \n                                                IDataPointsPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:15\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:9\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ConnectedPosition } from \"@angular/cdk/overlay\";\nimport each from \"lodash/each\";\nimport pickBy from \"lodash/pickBy\";\nimport values from \"lodash/values\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\nimport { CHART_VIEW_STATUS_EVENT, INTERACTION_DATA_POINTS_EVENT, SERIES_STATE_CHANGE_EVENT } from \"../../../constants\";\nimport { RenderState } from \"../../../renderers/types\";\nimport { ChartPlugin } from \"../../common/chart-plugin\";\nimport {\n    IAccessors, IChartEvent, IChartSeries, IChartViewStatusEventPayload, IDataPoint, IDataPointsPayload, InteractionType, IPosition,\n    IRenderStateData,\n} from \"../../common/types\";\n\n/** Position with extended information for positioning a tooltip */\nexport interface ITooltipPosition extends IPosition {\n    overlayPositions: ConnectedPosition[];\n}\n\n/** How far away from the data point position will the tooltip be positioned */\nexport const TOOLTIP_POSITION_OFFSET = 10;\n\n/** @ignore\n * Used for charts where tooltips should be placed aside of some vertical line */\nexport const getVerticalSetup = (offset: number): ConnectedPosition[] => [{\n    originX: \"end\",\n    originY: \"top\",\n    overlayX: \"start\",\n    overlayY: \"center\",\n    offsetX: offset,\n}, {\n    originX: \"start\",\n    originY: \"center\",\n    overlayX: \"end\",\n    overlayY: \"center\",\n    offsetX: -offset,\n}];\n\n/** @ignore\n * Used for charts where tooltips should be placed aligned to some horizontal line (as Horizontal Bar Charts) */\nexport const getHorizontalSetup = (offset: number): ConnectedPosition[] => [{\n    originX: \"end\",\n    originY: \"top\",\n    overlayX: \"center\",\n    overlayY: \"bottom\",\n    offsetY: -offset,\n}, {\n    originX: \"end\",\n    originY: \"bottom\",\n    overlayX: \"center\",\n    overlayY: \"top\",\n    offsetY: offset,\n}];\n\n/**\n * This plugin listens to the INTERACTION_DATA_POINTS_EVENT and transforms received data into tooltips inputs.\n * The actual tooltips are handled by the ChartTooltipsComponent.\n */\nexport class ChartTooltipsPlugin extends ChartPlugin {\n\n    /** Highlighted data points received from the chart */\n    public dataPoints: IDataPointsPayload;\n    /** Calculated positions for the data point tooltips */\n    public dataPointPositions: { [stringId: string]: ITooltipPosition } = {};\n\n    /**\n     * This publishes an event to show tooltips\n     */\n    public showSubject = new Subject();\n\n    /**\n     * This publishes an event to hide tooltips\n     */\n    public hideSubject = new Subject();\n\n    protected overlaySetup: ConnectedPosition[];\n\n    private isChartInView = false;\n    private destroy$ = new Subject();\n    private seriesVisibilityMap:  Record = {};\n\n    /**\n     * @param tooltipPositionOffset Offset of a tooltip from edge of a highlighted element\n     * @param orientation\n     */\n    constructor(readonly tooltipPositionOffset: number = TOOLTIP_POSITION_OFFSET,\n        public orientation: \"right\" | \"top\" = \"right\") {\n        super();\n\n        if (orientation === \"right\") {\n            this.overlaySetup = getVerticalSetup(tooltipPositionOffset);\n        } else if (orientation === \"top\") {\n            this.overlaySetup = getHorizontalSetup(tooltipPositionOffset);\n        }\n    }\n\n    public initialize(): void {\n        this.chart.getEventBus().getStream(INTERACTION_DATA_POINTS_EVENT)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((event: IChartEvent) => {\n                if (event.data.interactionType === InteractionType.MouseMove && this.isChartInView) {\n                    const dataPoints: IDataPointsPayload = event.data.dataPoints;\n                    this.processHighlightedDataPoints(dataPoints);\n                }\n            });\n        \n        this.chart.getEventBus().getStream(SERIES_STATE_CHANGE_EVENT)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((event: IChartEvent) => {\n                event.data.forEach(series => {\n                    this.seriesVisibilityMap[series.seriesId] = series.state !== RenderState.hidden;\n                });\n            });\n\n        this.chart.getEventBus().getStream(CHART_VIEW_STATUS_EVENT)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((event: IChartEvent) => {\n                this.isChartInView = event.data.isChartInView;\n                if (!this.isChartInView) {\n                    this.hideSubject.next();\n                }\n            });\n    }\n\n    public destroy(): void {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n\n    public processHighlightedDataPoints(dataPoints: IDataPointsPayload) {\n        const validDataPoints = pickBy(dataPoints, (d: IDataPoint) => d.index >= 0 && d.position && (this.seriesVisibilityMap[d.seriesId] !== false));\n\n        if (values(validDataPoints).length === 0) {\n            this.hideSubject.next();\n            return;\n        }\n\n        this.dataPoints = validDataPoints;\n        const chartElement: any = this.chart.target?.node()?.parentNode; // the one above svg\n\n        if (!chartElement) {\n            throw new Error(\"Chart parent node is not defined\");\n        }\n\n        const bbox = chartElement.getBoundingClientRect();\n        const offsetParentBbox = chartElement.offsetParent.getBoundingClientRect();\n        const chartPosition: IPosition = {\n            x: bbox.left - offsetParentBbox.left,\n            y: bbox.top - offsetParentBbox.top,\n        };\n\n        each(Object.keys(this.dataPoints), seriesId => {\n            const dataPoint = this.dataPoints[seriesId];\n\n            const chartSeries = this.chart.getDataManager().getChartSeries(dataPoint.seriesId);\n            const tooltipRelativePosition = this.getTooltipPosition(dataPoint, chartSeries);\n            this.dataPointPositions[seriesId] = this.getAbsolutePosition(tooltipRelativePosition, chartPosition);\n        });\n\n        this.showSubject.next();\n    }\n\n    /**\n     * Calculate tooltip position. Default implementation shows the tooltip on left / right with\n     * @param dataPoint\n     * @param chartSeries\n     */\n    protected getTooltipPosition(dataPoint: IDataPoint, chartSeries: IChartSeries): ITooltipPosition {\n\n        if (!dataPoint.position) {\n            throw new Error(\"Unable to get tooltip position\");\n        }\n\n        return {\n            x: dataPoint.position.x,\n            y: dataPoint.position.y,\n            height: dataPoint.position?.height || 1,\n            width: dataPoint.position?.width || 1,\n            overlayPositions: this.overlaySetup,\n        };\n    }\n\n    /**\n     * Converts the relative position within a chart into an absolute position on the screen\n     *\n     * @param relativePosition\n     * @param chartPosition\n     */\n    protected getAbsolutePosition(relativePosition: ITooltipPosition, chartPosition: IPosition): ITooltipPosition {\n        return Object.assign({}, relativePosition, {\n            x: chartPosition.x + this.chart.getGrid().config().dimension.margin.left + relativePosition.x,\n            y: chartPosition.y + this.chart.getGrid().config().dimension.margin.top + relativePosition.y,\n        });\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DataSeries.html":{"url":"classes/DataSeries.html","title":"class - DataSeries","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DataSeries\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/data-series.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IDataSeries\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                accessors\n                            \n                            \n                                    Public\n                                data\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSeries: IDataSeries)\n                    \n                \n                        \n                            \n                                Defined in src/core/common/data-series.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dataSeries\n                                                  \n                                                        \n                                                                        IDataSeries\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            accessors\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/data-series.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/data-series.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/data-series.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/data-series.ts:11\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { DataAccessor, IAccessors, IDataSeries, SeriesAccessor } from \"./types\";\n\nexport class DataSeries implements IDataSeries {\n\n    public id: string;\n    public accessors: {\n        data?: Record;\n        series?: Record;\n    };\n    public data: any[];\n    public name: string;\n\n    constructor(dataSeries: IDataSeries) {\n        this.id = dataSeries.id;\n        this.data = dataSeries.data;\n        this.name = dataSeries.name;\n        // TODO: here we can check if default accessors are valid and warn user\n        this.accessors = dataSeries.accessors || {\n            data: {\n                category: (d: any) => d.name,\n                value: (d: any) => d.value,\n            }, series: {},\n        };\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DimensionConfig.html":{"url":"classes/DimensionConfig.html","title":"class - DimensionConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DimensionConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/config/dimension-config.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IDimensionConfig\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                autoHeight\n                            \n                            \n                                    Public\n                                autoWidth\n                            \n                            \n                                    Public\n                                margin\n                            \n                            \n                                    Public\n                                marginLocked\n                            \n                            \n                                    Public\n                                padding\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                height\n                            \n                            \n                                    Public\n                                height\n                            \n                            \n                                    Public\n                                height\n                            \n                            \n                                    Public\n                                outerHeight\n                            \n                            \n                                    Public\n                                outerHeight\n                            \n                            \n                                    Public\n                                outerHeight\n                            \n                            \n                                    Public\n                                outerWidth\n                            \n                            \n                                    Public\n                                outerWidth\n                            \n                            \n                                    Public\n                                outerWidth\n                            \n                            \n                                    Public\n                                width\n                            \n                            \n                                    Public\n                                width\n                            \n                            \n                                    Public\n                                width\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            autoHeight\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/dimension-config.ts:31\n                            \n                        \n\n                \n                    \n                        See IDimensionConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            autoWidth\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/dimension-config.ts:29\n                            \n                        \n\n                \n                    \n                        See IDimensionConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            margin\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/dimension-config.ts:7\n                            \n                        \n\n                \n                    \n                        See IDimensionConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            marginLocked\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: false,\n        right: false,\n        bottom: false,\n        left: false,\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/dimension-config.ts:21\n                            \n                        \n\n                \n                    \n                        See IDimensionConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            padding\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/dimension-config.ts:14\n                            \n                        \n\n                \n                    \n                        See IDimensionConfig \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            height\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    height()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/config/dimension-config.ts:47\n                \n            \n\n\n            \n                \n                    See IDimensionConfig \n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            height\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    height(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/config/dimension-config.ts:49\n                \n            \n\n\n            \n                \n                    See IDimensionConfig \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IDimensionConfig\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            height\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    height(value?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/config/dimension-config.ts:51\n                \n            \n\n\n            \n                \n                    See IDimensionConfig \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            outerHeight\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    outerHeight()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/config/dimension-config.ts:74\n                \n            \n\n\n            \n                \n                    See IDimensionConfig \n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            outerHeight\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    outerHeight(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/config/dimension-config.ts:76\n                \n            \n\n\n            \n                \n                    See IDimensionConfig \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IDimensionConfig\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            outerHeight\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    outerHeight(value?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/config/dimension-config.ts:78\n                \n            \n\n\n            \n                \n                    See IDimensionConfig \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            outerWidth\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    outerWidth()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/config/dimension-config.ts:60\n                \n            \n\n\n            \n                \n                    See IDimensionConfig \n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            outerWidth\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    outerWidth(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/config/dimension-config.ts:62\n                \n            \n\n\n            \n                \n                    See IDimensionConfig \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IDimensionConfig\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            outerWidth\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    outerWidth(value?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/config/dimension-config.ts:64\n                \n            \n\n\n            \n                \n                    See IDimensionConfig \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            width\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    width()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/config/dimension-config.ts:34\n                \n            \n\n\n            \n                \n                    See IDimensionConfig \n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            width\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    width(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/config/dimension-config.ts:36\n                \n            \n\n\n            \n                \n                    See IDimensionConfig \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IDimensionConfig\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            width\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    width(value?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/config/dimension-config.ts:38\n                \n            \n\n\n            \n                \n                    See IDimensionConfig \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IAllAround, IDimensionConfig } from \"../types\";\n\nexport class DimensionConfig implements IDimensionConfig {\n    private _width: number = 0;\n    private _height: number = 0;\n    /** See {@link IDimensionConfig#margin} */\n    public margin: IAllAround = {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n    };\n    /** See {@link IDimensionConfig#padding} */\n    public padding: IAllAround = {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n    };\n    /** See {@link IDimensionConfig#marginLocked} */\n    public marginLocked: IAllAround = {\n        top: false,\n        right: false,\n        bottom: false,\n        left: false,\n    };\n\n    /** See {@link IDimensionConfig#autoWidth} */\n    public autoWidth = true;\n    /** See {@link IDimensionConfig#autoHeight} */\n    public autoHeight = true;\n\n    /** See {@link IDimensionConfig#width} */\n    public width(): number;\n    /** See {@link IDimensionConfig#width} */\n    public width(value: number): IDimensionConfig;\n    /** See {@link IDimensionConfig#width} */\n    public width(value?: number): any {\n        if (value === undefined) {\n            return this._width;\n        }\n        this._width = value;\n        return this;\n    }\n\n    /** See {@link IDimensionConfig#height} */\n    public height(): number;\n    /** See {@link IDimensionConfig#height} */\n    public height(value: number): IDimensionConfig;\n    /** See {@link IDimensionConfig#height} */\n    public height(value?: number): any {\n        if (value === undefined) {\n            return this._height;\n        }\n        this._height = value;\n        return this;\n    }\n\n    /** See {@link IDimensionConfig#outerWidth} */\n    public outerWidth(): number;\n    /** See {@link IDimensionConfig#outerWidth} */\n    public outerWidth(value: number): IDimensionConfig;\n    /** See {@link IDimensionConfig#outerWidth} */\n    public outerWidth(value?: number): any {\n        const marginsWidth = this.margin.right + this.margin.left;\n        if (value === undefined) {\n            return this._width + marginsWidth;\n        }\n        this._width = Math.max(value - marginsWidth, 0);\n        return this;\n    }\n\n    /** See {@link IDimensionConfig#outerHeight} */\n    public outerHeight(): number;\n    /** See {@link IDimensionConfig#outerHeight} */\n    public outerHeight(value: number): IDimensionConfig;\n    /** See {@link IDimensionConfig#outerHeight} */\n    public outerHeight(value?: number): any {\n        const marginsHeight = this.margin.top + this.margin.bottom;\n        if (value === undefined) {\n            return this._height + marginsHeight;\n        }\n        this._height = value - marginsHeight;\n        return this;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DonutGaugeRenderingUtil.html":{"url":"classes/DonutGaugeRenderingUtil.html","title":"class - DonutGaugeRenderingUtil","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DonutGaugeRenderingUtil\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/radial/gauge/donut-gauge-rendering-util.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                generateThresholdRenderingData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            generateThresholdRenderingData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    generateThresholdRenderingData(data: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/radial/gauge/donut-gauge-rendering-util.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { pie } from \"d3-shape\";\n\nimport { IGaugeThreshold } from \"../../../gauge/types\";\n\nexport class DonutGaugeRenderingUtil {\n    public static generateThresholdRenderingData(data: any[]) {\n        const arcData: number[] = DonutGaugeRenderingUtil.generateArcData(data);\n        const thresholdsData: any[] = [];\n        const pieGenerator = pie().sort(null);\n        const arcsForMarkers = pieGenerator(arcData);\n\n        arcsForMarkers.forEach((arcDatum: any, i: number) => {\n            if (i % 2 === 1) {\n                thresholdsData.push(arcDatum);\n            }\n        });\n        return thresholdsData;\n    }\n\n    private static generateArcData(data: any[]) {\n        // arcs with a value of zero serve as the threshold points\n        const arcData: number[] = Array(data.length * 2 - 1).fill(0);\n        data.forEach((d: IGaugeThreshold, i: number) => {\n            // arcs with a non-zero value serve as the space between the threshold points\n            arcData[i * 2] = i === 0 ? d.value : d.value - data[i - 1].value;\n        });\n        return arcData;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EventBus.html":{"url":"classes/EventBus.html","title":"class - EventBus","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EventBus\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/event-bus.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                getStream\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/event-bus.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getStream\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getStream(streamId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/event-bus.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    streamId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Subject\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import each from \"lodash/each\";\nimport { Subject } from \"rxjs\";\n\nexport class EventBus {\n\n    private streams: { [key: string]: Subject } = {};\n\n    public getStream(streamId: string): Subject {\n        if (!this.streams[streamId]) {\n            this.streams[streamId] = new Subject();\n        }\n        return this.streams[streamId];\n    }\n\n    public destroy() {\n        each(Object.keys(this.streams), (key: string) => {\n            this.streams[key].complete();\n        });\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Grid.html":{"url":"classes/Grid.html","title":"class - Grid","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Grid\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/grid.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IGrid\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                DEFAULT_BORDER_CLASS_NAME\n                            \n                            \n                                    Public\n                                eventBus\n                            \n                            \n                                    Static\n                                GRID_CLASS_NAME\n                            \n                            \n                                    Static\n                                GRID_ELEMENTS_LAYER_NAME\n                            \n                            \n                                    Static\n                                RENDERING_AREA_CLIP_PATH_PREFIX\n                            \n                            \n                                    Static\n                                RENDERING_AREA_LAYER_NAME\n                            \n                            \n                                    Public\n                                updateChartDimensionsSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                build\n                            \n                            \n                                    Public\n                                buildPlugins\n                            \n                            \n                                    Public\n                                config\n                            \n                            \n                                    Public\n                                config\n                            \n                            \n                                    Public\n                                config\n                            \n                            \n                                    Public\n                                getInteractiveArea\n                            \n                            \n                                    Public\n                                getLasagna\n                            \n                            \n                                    Public\n                                target\n                            \n                            \n                                    Public\n                                target\n                            \n                            \n                                    Public\n                                target\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                            \n                                    Public\n                                updateRanges\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            DEFAULT_BORDER_CLASS_NAME\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"nui-chart-border\"\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/grid.ts:30\n                            \n                        \n\n                \n                    \n                        Class name applied to each of the grid's borders by default \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            eventBus\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     EventBus\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/grid.ts:54\n                            \n                        \n\n                \n                    \n                        Event bus provided by the chart \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            GRID_CLASS_NAME\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"nui-chart-grid\"\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/grid.ts:27\n                            \n                        \n\n                \n                    \n                        Class name for the grid \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            GRID_ELEMENTS_LAYER_NAME\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"grid-elements\"\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/grid.ts:36\n                            \n                        \n\n                \n                    \n                        Name for the lasagna layer containing the grid's rendered elements \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            RENDERING_AREA_CLIP_PATH_PREFIX\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"clip-path_\"\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/grid.ts:33\n                            \n                        \n\n                \n                    \n                        Prefix applied to the rendering area clip path id \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            RENDERING_AREA_LAYER_NAME\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"rendering-area\"\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/grid.ts:39\n                            \n                        \n\n                \n                    \n                        Name for the rendering area lasagna layer \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            updateChartDimensionsSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/grid.ts:51\n                            \n                        \n\n                \n                    \n                        Subject for indicating that the chart's dimensions should be updated \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            build\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    build()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/grid.ts:134\n                \n            \n\n\n            \n                \n                    See IGrid \n\n\n                    \n                        Returns :         IGrid\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            buildPlugins\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    buildPlugins(chart: IChart)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/grid.ts:174\n                \n            \n\n\n            \n                \n                    Derived classes override this method to build the grid's plugins\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    chart\n                                    \n                                                IChart\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The chart instance to pass to each plugin\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IChartPlugin[]\n\n                    \n                    \n                        Default implementation returns an empty array\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            config\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    config()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/grid.ts:108\n                \n            \n\n\n            \n                \n                    See IGrid \n\n\n                    \n                        Returns :         IGridConfig\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            config\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    config(config: IGridConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/grid.ts:110\n                \n            \n\n\n            \n                \n                    See IGrid \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                IGridConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            config\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    config(config?: IGridConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/grid.ts:112\n                \n            \n\n\n            \n                \n                    See IGrid \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                IGridConfig\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IGridConfig | \n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getInteractiveArea\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getInteractiveArea()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/grid.ts:88\n                \n            \n\n\n            \n                \n                    See IGrid \n\n\n                    \n                        Returns :         D3Selection\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLasagna\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLasagna()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/grid.ts:93\n                \n            \n\n\n            \n                \n                    See IGrid \n\n\n                    \n                        Returns :     Lasagna\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            target\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    target()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/grid.ts:121\n                \n            \n\n\n            \n                \n                    See IGrid \n\n\n                    \n                        Returns :         D3Selection\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            target\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    target(target: D3Selection)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/grid.ts:123\n                \n            \n\n\n            \n                \n                    See IGrid \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                                D3Selection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IGrid\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            target\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    target(target?: D3Selection)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/grid.ts:125\n                \n            \n\n\n            \n                \n                    See IGrid \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                                D3Selection\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         D3Selection | IGrid\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/grid.ts:179\n                \n            \n\n\n            \n                \n                    See IGrid \n\n\n                    \n                        Returns :         IGrid\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions(dimensions: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/grid.ts:190\n                \n            \n\n\n            \n                \n                    See IGrid \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dimensions\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IGrid\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateRanges\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRanges()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/grid.ts:206\n                \n            \n\n\n            \n                \n                    See IGrid \n\n\n                    \n                        Returns :         IGrid\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { select, Selection } from \"d3-selection\";\nimport each from \"lodash/each\";\nimport isEmpty from \"lodash/isEmpty\";\nimport { Subject } from \"rxjs\";\n\nimport { EventBus } from \"../common/event-bus\";\nimport { Lasagna } from \"../common/lasagna\";\nimport { ScalesIndex } from \"../common/scales/types\";\nimport { IChart, IChartEvent, IChartPlugin } from \"../common/types\";\nimport { D3Selection } from \"../common/types\";\nimport { UtilityService } from \"../common/utility.service\";\n\nimport { GridConfig } from \"./config/grid-config\";\nimport { IAllAround, IBorderConfig, IBorders, IDimensions, IGrid, IGridConfig } from \"./types\";\n\nexport const borderMidpoint = 0.5;\n\n// eslint-disable-next-line @typescript-eslint/no-type-alias\ntype BorderKey = keyof IAllAround;\n\n/**\n * @implements {IGrid}\n * Implementation for the dimensions, scaling, interactive area, and borders of a basic grid\n */\nexport abstract class Grid implements IGrid {\n    /** Class name for the grid */\n    public static GRID_CLASS_NAME = \"nui-chart-grid\";\n\n    /** Class name applied to each of the grid's borders by default */\n    public static DEFAULT_BORDER_CLASS_NAME = \"nui-chart-border\";\n\n    /** Prefix applied to the rendering area clip path id */\n    public static RENDERING_AREA_CLIP_PATH_PREFIX = \"clip-path_\";\n\n    /** Name for the lasagna layer containing the grid's rendered elements */\n    public static GRID_ELEMENTS_LAYER_NAME = \"grid-elements\";\n\n    /** Name for the rendering area lasagna layer */\n    public static RENDERING_AREA_LAYER_NAME = \"rendering-area\";\n\n    /** @ignore Height correction needed to prevent interaction gap between vertically stacked charts */\n    public static RENDER_AREA_HEIGHT_CORRECTION = 1;\n\n    /** @ignore Width correction needed to prevent interaction gap between right side of grid and the edge of the rendering area */\n    public static RENDER_AREA_WIDTH_CORRECTION = 1;\n\n    /** @ignore Width correction needed to sync bottom border length and grid width to tick placement */\n    public static TICK_DIMENSION_CORRECTION = 1;\n\n    /** Subject for indicating that the chart's dimensions should be updated */\n    public updateChartDimensionsSubject: Subject;\n\n    /** Event bus provided by the chart */\n    public eventBus: EventBus;\n\n    /** d3 container for the grid */\n    protected container: D3Selection;\n\n    /** d3 selection for the grid's rendering area clip path */\n    protected renderingAreaClipPath: D3Selection;\n\n    /** d3 selection for the grid's rendering area */\n    protected renderingArea: D3Selection;\n\n    /** d3 selection for the grid's interactive area */\n    protected interactiveArea: D3Selection;\n\n    /** The grid's layer manager */\n    protected lasagna: Lasagna;\n\n    /** Lasagna layer for the grid's rendered elements */\n    protected gridElementsLayer: Selection;\n\n    /** Definition of the grid's borders as rendered */\n    protected borders: Partial = {};\n\n    /** Property value of the grid's scales */\n    protected _scales: ScalesIndex;\n\n    /** Property value of the grid's configuration */\n    protected _config: IGridConfig;\n\n    /** Property value of the grid's target d3 selection */\n    protected _target: D3Selection;\n\n\n    /** See {@link IGrid#getInteractiveArea} */\n    public getInteractiveArea(): D3Selection {\n        return this.interactiveArea;\n    }\n\n    /** See {@link IGrid#getLasagna} */\n    public getLasagna(): Lasagna {\n        return this.lasagna;\n    }\n\n    /** @ignore */\n    public set scales(scales: ScalesIndex) {\n        this._scales = scales;\n    }\n\n    /** @ignore */\n    public get scales(): ScalesIndex {\n        return this._scales;\n    }\n\n    /** See {@link IGrid#config} */\n    public config(): IGridConfig;\n    /** See {@link IGrid#config} */\n    public config(config: IGridConfig): this;\n    /** See {@link IGrid#config} */\n    public config(config?: IGridConfig): IGridConfig | this {\n        if (config === undefined) {\n            return this._config;\n        }\n        this._config = config;\n        return this;\n    }\n\n    /** See {@link IGrid#target} */\n    public target(): D3Selection;\n    /** See {@link IGrid#target} */\n    public target(target: D3Selection): IGrid;\n    /** See {@link IGrid#target} */\n    public target(target?: D3Selection): D3Selection | IGrid {\n        if (target === undefined) {\n            return this._target;\n        }\n        this._target = target;\n        return this;\n    }\n\n    /** See {@link IGrid#build} */\n    public build(): IGrid {\n        if (!this.config()) {\n            const config = new GridConfig();\n            this.config(config);\n        }\n\n        this.container = this._target.append(\"g\")\n            .attrs({\n                \"class\": Grid.GRID_CLASS_NAME,\n            });\n\n        const clipPathId = Grid.RENDERING_AREA_CLIP_PATH_PREFIX + UtilityService.uuid();\n        // Asserting similar type to avoid refactoring all the grids\n        // TODO: Refactor lasagna service to accept multiple D3Selection types\n        //  or refactor grid implementations/interfaces to maintain the same selection type\n        this.lasagna = new Lasagna(>(this.container), clipPathId);\n        this.renderingArea = this.buildRenderingArea(clipPathId);\n        this.adjustRenderingArea();\n\n        this.gridElementsLayer = this.lasagna.addLayer({\n            name: Grid.GRID_ELEMENTS_LAYER_NAME,\n            order: 100,\n            clipped: false,\n        });\n\n        const borders = this.buildBorders(this.gridElementsLayer);\n        if (borders) {\n            this.borders = borders;\n        }\n\n        return this;\n    }\n\n    /**\n     * Derived classes override this method to build the grid's plugins\n     *\n     * @param {IChart} chart The chart instance to pass to each plugin\n     *\n     * @returns {IChartPlugin[]} Default implementation returns an empty array\n     */\n    public buildPlugins(chart: IChart): IChartPlugin[] {\n        return [];\n    }\n\n    /** See {@link IGrid#update} */\n    public update(): IGrid {\n        if (isEmpty(this.scales)) {\n            return this;\n        }\n\n        this.updateBorders();\n        this.adjustRenderingArea();\n        return this;\n    }\n\n    /** See {@link IGrid#updateDimensions} */\n    public updateDimensions(dimensions: Partial): IGrid {\n        const dimensionConfig = this.config().dimension;\n\n        if (dimensions.width) {\n            dimensionConfig.outerWidth(dimensions.width - this.getOuterWidthDimensionCorrection());\n        }\n        if (dimensions.height) {\n            dimensionConfig.outerHeight(dimensions.height);\n        }\n\n        this.adjustRenderingArea();\n        this.updateRanges();\n\n        return this;\n    }\n    /** See {@link IGrid#updateRanges} */\n    public updateRanges(): IGrid {\n        this.update();\n        return this;\n    }\n\n    /**\n     * Calculate the width correction needed for accommodating grid elements that may extend beyond the chart's configured width\n     */\n    protected getOuterWidthDimensionCorrection() {\n        return Grid.TICK_DIMENSION_CORRECTION;\n    }\n\n    /**\n     * Builds the grid borders as SVGElements based on the specified configuration\n     *\n     * @param {D3Selection} container d3 container for the borders\n     *\n     * @returns {Partial} The grid's borders\n     */\n    protected buildBorders(container: D3Selection): Partial | undefined {\n        if (!this.config() || !this.config().borders) {\n            return;\n        }\n\n        const borderConfigs = this.config().borders;\n        const borders: Partial = {};\n        const borderKeys = Object.keys(borderConfigs);\n        each(borderKeys, (side: BorderKey) => {\n            // We're creating even invisible borders and updating visibility afterwards\n            if (borderConfigs[side]) {\n                borders[side] = this.createBorder(container, borderConfigs[side]) ?? undefined;\n            }\n        });\n\n        return borders;\n    }\n\n    /**\n     * Adjusts the grid's rendering area and clip path based on the grid's configured width and height\n     */\n    protected adjustRenderingArea = () => {\n        const d = this.config().dimension;\n        const disableHeightCorrection = this.config().disableRenderAreaHeightCorrection;\n        const disableWidthCorrection = this.config().disableRenderAreaWidthCorrection;\n\n        const renderingAreaClipPathAttrs = {\n            \"width\": d.width(),\n            \"height\": d.height() + (disableHeightCorrection ? 0 : Grid.RENDER_AREA_HEIGHT_CORRECTION),\n        } as any;\n\n        if (!disableHeightCorrection) {\n            renderingAreaClipPathAttrs[\"y\"] = -Grid.RENDER_AREA_HEIGHT_CORRECTION;\n        }\n\n        const renderingAreaAttrs = {\n            ...renderingAreaClipPathAttrs,\n            // Width correction needed to prevent interaction gap between right side of grid and the edge of the rendering area\n            \"width\": d.width() > 0 ? d.width() - (disableWidthCorrection ? 0 : Grid.RENDER_AREA_WIDTH_CORRECTION) : d.width(),\n        };\n\n        this.renderingAreaClipPath.attrs(renderingAreaClipPathAttrs);\n        this.renderingArea.attrs(renderingAreaAttrs);\n    }\n\n    /**\n     * Builds the grid's rendering area as a layer on the lasagna\n     *\n     * @param {string} clipPathId The clip path identifier\n     *\n     * @returns {D3Selection} The grid's rendering area\n     */\n    private buildRenderingArea(clipPathId: string): D3Selection {\n        this.renderingAreaClipPath = this._target.append(\"clipPath\")\n            .attr(\"id\", clipPathId)\n            .append(\"rect\");\n\n        const renderingAreaContainer = this.lasagna.addLayer({\n            name: Grid.RENDERING_AREA_LAYER_NAME,\n            order: -1,\n            clipped: true,\n        });\n        return renderingAreaContainer.append(\"rect\")\n            .attrs({\n                \"pointer-events\": \"all\",\n                \"fill\": \"transparent\",\n            });\n    }\n\n    /**\n     * Creates a border with the specified configuration in the provided container\n     *\n     * @param {D3Selection} container The container to append the border to\n     * @param {IBorderConfig} config The configuration to apply to the border\n     *\n     * @returns {SVGElement} The created border\n     */\n    private createBorder(container: D3Selection, config: IBorderConfig): SVGElement | null {\n        const border = container.append(\"line\")\n            .attr(\"class\", config.className || Grid.DEFAULT_BORDER_CLASS_NAME);\n\n        if (config.width) {\n            // use style instead of attr to override css style\n            border.style(\"stroke-width\", config.width);\n        }\n        if (config.color) {\n            // use style instead of attr to override css style\n            border.style(\"stroke\", config.color);\n        }\n\n        return border.node();\n    }\n\n    // TODO: borders are evil. reconsider!\n    // We're using borders instead of axis line and because of that we need to do these weird size adjustments\n    protected updateBottomBorder() {\n        if (!this.borders.bottom) {\n            throw new Error(\"BottomBorder is not defined\");\n        }\n        select(this.borders.bottom)\n            .attrs({\n                \"x1\": 0,\n                \"y1\": this.config().dimension.height() - borderMidpoint,\n                \"x2\": this.config().dimension.width() + Grid.TICK_DIMENSION_CORRECTION, // to get nice alignment with ticks\n                \"y2\": this.config().dimension.height() - borderMidpoint,\n            })\n            .classed(\"hidden\", !this._config.borders.bottom?.visible);\n    }\n\n    /**\n     * Updates the d3 line positioning and visibility attributes of each of the configured borders\n     */\n    protected updateBorders() {\n        if (this.borders.bottom) {\n            this.updateBottomBorder();\n        }\n        if (this.borders.top) {\n            select(this.borders.top)\n                .attrs({\n                    \"x1\": 0,\n                    \"y1\": borderMidpoint, // the line was outside of the viewport in some browser when set to 0\n                    \"x2\": this.config().dimension.width() + Grid.TICK_DIMENSION_CORRECTION, // to get nice alignment with ticks\n                    \"y2\": borderMidpoint,\n                })\n                .classed(\"hidden\", !this._config.borders.top?.visible);\n        }\n        if (this.borders.right) {\n            select(this.borders.right)\n                .attrs({\n                    \"x1\": this.config().dimension.width() - borderMidpoint,\n                    \"y1\": 0,\n                    \"x2\": this.config().dimension.width() - borderMidpoint,\n                    \"y2\": this.config().dimension.height() + Grid.TICK_DIMENSION_CORRECTION, // to get nice alignment with ticks\n                })\n                .classed(\"hidden\", !this._config.borders.right?.visible);\n        }\n        if (this.borders.left) {\n            select(this.borders.left)\n                .attrs({\n                    \"x1\": borderMidpoint,\n                    \"y1\": 0,\n                    \"x2\": borderMidpoint,\n                    \"y2\": this.config().dimension.height() + Grid.TICK_DIMENSION_CORRECTION, // to get nice alignment with ticks\n                })\n                .classed(\"hidden\", !this._config.borders.left?.visible);\n        }\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GridConfig.html":{"url":"classes/GridConfig.html","title":"class - GridConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GridConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/config/grid-config.ts\n        \n\n            \n                Description\n            \n            \n                See IGridConfig \n\n            \n\n\n            \n                Implements\n            \n            \n                            IGridConfig\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                borders\n                            \n                            \n                                    Public\n                                cursor\n                            \n                            \n                                    Public\n                                dimension\n                            \n                            \n                                    Public\n                                disableRenderAreaHeightCorrection\n                            \n                            \n                                    Public\n                                disableRenderAreaWidthCorrection\n                            \n                            \n                                    Public\n                                interactive\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            borders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        // TODO: Review this\n        // @ts-ignore\n        top: undefined,\n        // @ts-ignore\n        bottom: undefined,\n        // @ts-ignore\n        left: undefined,\n        // @ts-ignore\n        right: undefined,\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/grid-config.ts:16\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            cursor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"crosshair\"\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/grid-config.ts:28\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dimension\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IDimensionConfig\n\n                        \n                    \n                    \n                        \n                            Default value : new DimensionConfig()\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/grid-config.ts:14\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            disableRenderAreaHeightCorrection\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/grid-config.ts:30\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            disableRenderAreaWidthCorrection\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/grid-config.ts:32\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interactive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/grid-config.ts:11\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IAllAround, IBorderConfig, IDimensionConfig, IGridConfig } from \"../types\";\n\nimport { DimensionConfig } from \"./dimension-config\";\n\n/** See {@link IGridConfig} */\nexport class GridConfig implements IGridConfig {\n\n    // We should avoid this kind of option in future versions of GridConfig\n    // because ideally all plugins should be added manually (NUI-3304).\n    /** See {@link IGridConfig#interactive} */\n    public interactive: boolean = true;\n\n    /** See {@link IGridConfig#dimension} */\n    public dimension: IDimensionConfig = new DimensionConfig();\n    /** See {@link IGridConfig#borders} */\n    public borders: IAllAround = {\n        // TODO: Review this\n        // @ts-ignore\n        top: undefined,\n        // @ts-ignore\n        bottom: undefined,\n        // @ts-ignore\n        left: undefined,\n        // @ts-ignore\n        right: undefined,\n    };\n    /** See {@link IGridConfig#cursor} */\n    public cursor = \"crosshair\";\n    /** See {@link IGridConfig#disableRenderAreaHeightCorrection} */\n    public disableRenderAreaHeightCorrection = false;\n    /** See {@link IGridConfig#disableRenderAreaWidthCorrection} */\n    public disableRenderAreaWidthCorrection = false;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HorizontalBarAccessors.html":{"url":"classes/HorizontalBarAccessors.html","title":"class - HorizontalBarAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HorizontalBarAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/bar/accessors/horizontal-bar-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        BarAccessors\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                series\n                            \n                            \n                                data\n                            \n                            \n                                series\n                            \n                            \n                                data\n                            \n                            \n                                series\n                            \n                            \n                                data\n                            \n                            \n                                series\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(colorProvider?: IValueProvider, markerProvider?: IValueProvider)\n                    \n                \n                        \n                            \n                                Defined in src/renderers/bar/accessors/horizontal-bar-accessors.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        colorProvider\n                                                  \n                                                        \n                                                                        IValueProvider\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        markerProvider\n                                                  \n                                                        \n                                                                        IValueProvider\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IBarDataAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/bar/accessors/horizontal-bar-accessors.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleSeriesAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/bar/accessors/horizontal-bar-accessors.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IBarDataAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BarAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         BarAccessors:22\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleSeriesAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BarAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         BarAccessors:23\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleDataAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BarAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         BarAccessors:34\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleSeriesAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BarAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         BarAccessors:35\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleDataAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         RectangleAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         RectangleAccessors:34\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleSeriesAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         RectangleAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         RectangleAccessors:35\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IChartMarker, IValueProvider } from \"../../../core/common/types\";\nimport { IRectangleSeriesAccessors } from \"../../accessors/rectangle-accessors\";\n\nimport { BarAccessors, IBarDataAccessors } from \"./bar-accessors\";\n\nexport class HorizontalBarAccessors extends BarAccessors {\n    data: IBarDataAccessors;\n    series: IRectangleSeriesAccessors;\n\n    constructor(colorProvider?: IValueProvider, markerProvider?: IValueProvider) {\n        super(colorProvider, markerProvider);\n\n        this.data = {\n            ...this.data,\n            startX: (d, i, s, ds) => this.data.start(d, i, s, ds),\n            endX: (d, i, s, ds) => this.data.end(d, i, s, ds),\n            startY: (d, i, s, ds) => this.data.category(d, i, s, ds),\n            endY: (d, i, s, ds) => this.data.category(d, i, s, ds),\n            thicknessY: (d, i, s, ds) => this.data.thickness ? this.data.thickness(d, i, s, ds) : undefined,\n        };\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAccessors.html":{"url":"interfaces/IAccessors.html","title":"interface - IAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                Accessors describe the data for the consumers.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        data\n                                \n                                \n                                            Optional\n                                        series\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         IDataAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDataAccessors\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Data point level accessors for defining what part of a datum is used for visualizations \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        series\n                                    \n                                \n                                \n                                    \n                                        series:         ISeriesAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ISeriesAccessors\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Series level accessors - e.g. for colors, markers, etc. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAllAround.html":{"url":"interfaces/IAllAround.html","title":"interface - IAllAround","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IAllAround\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/types.ts\n        \n\n            \n                Description\n            \n            \n                Interface for defining aspects of the top, right, bottom, and left sides of a grid\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        bottom\n                                \n                                \n                                        left\n                                \n                                \n                                        right\n                                \n                                \n                                        top\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        bottom\n                                    \n                                \n                                \n                                    \n                                        bottom:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Object defining aspects of the bottom of an entity \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        left\n                                    \n                                \n                                \n                                    \n                                        left:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Object defining aspects of the left side of an entity \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        right\n                                    \n                                \n                                \n                                    \n                                        right:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Object defining aspects of the right side of an entity \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        top\n                                    \n                                \n                                \n                                    \n                                        top:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Object defining aspects of the top of an entity \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { BaseType } from \"d3\";\nimport { Axis } from \"d3-axis\";\nimport { Selection } from \"d3-selection\";\nimport { Subject } from \"rxjs\";\n\nimport { EventBus } from \"../common/event-bus\";\nimport { Lasagna } from \"../common/lasagna\";\nimport { ScalesIndex } from \"../common/scales/types\";\nimport { D3Selection, IChart, IChartEvent, IChartPlugin } from \"../common/types\";\n\n/**\n * Interface for defining aspects of the top, right, bottom, and left sides of a grid\n */\nexport interface IAllAround {\n    /** Object defining aspects of the top of an entity */\n    top: T;\n    /** Object defining aspects of the right side of an entity */\n    right: T;\n    /** Object defining aspects of the bottom of an entity */\n    bottom: T;\n    /** Object defining aspects of the left side of an entity */\n    left: T;\n}\n\n/**\n * The width and height of an grid\n */\nexport interface IDimensions {\n    width: number;\n    height: number;\n}\n\n/**\n * Configuration of grid dimensions\n */\nexport interface IDimensionConfig {\n    /** The top, right, bottom, and left margin sizes in pixels */\n    margin: IAllAround;\n    /** The top, right, bottom, and left padding sizes in pixels */\n    padding: IAllAround;\n    /** Sets whether the grid uses the chart's container to determine its width */\n    autoWidth: boolean;\n    /** Sets whether the grid uses the chart's container to determine its height */\n    autoHeight: boolean;\n    /** Set of booleans indicating whether a specific margin will be recalculated on chart dimension updates */\n    marginLocked?: IAllAround;\n    /**\n     * Sets the grid's width. Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid width\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    width(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- excluding margins.\n     *\n     * @returns {number} The grid's width\n     */\n    width(): number;\n    /**\n     * Sets the grid's height. Note: 'autoHeight' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid height\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    height(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- excluding margins.\n     *\n     * @returns {number} The grid's height\n     */\n    height(): number;\n    /**\n     * Sets the grid's width by subtracting the grid's horizontal margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new width plus the grid's horizontal margins\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerWidth(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- including horizontal margins.\n     *\n     * @returns {number} The grid's width plus horizontal margins\n     */\n    outerWidth(): number;\n    /**\n     * Sets the grid's height by subtracting the grid's vertical margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new height plus the grid's vertical margins     *\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerHeight(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- including vertical margins.\n     *\n     * @returns {number} The grid's height plus vertical margins\n     */\n    outerHeight(): number;\n}\n\n/**\n * Interface for defining the SVGElements forming the top, right, bottom, and left borders of an entity\n */\nexport interface IBorders extends IAllAround {\n}\n\n/**\n * Configuration of grid borders\n */\nexport interface IBorderConfig {\n    /** The stroke color */\n    color?: string;\n    /** The thickness of the border */\n    width?: number;\n    /** The class name */\n    className?: string;\n    /** Boolean indicating whether the border should be visible */\n    visible?: boolean;\n}\n\nexport interface ITextOverflowArgs {\n    widthLimit: number;\n    horizontalPadding: number;\n    ellipsisWidth: number;\n}\n\n/** Type for tick overflow handler */\nexport type TextOverflowHandler = (textSelection: Selection, args: ITextOverflowArgs) => void;\n\n/** Interface representing the configuration for tick labels */\nexport interface ITickLabelConfig {\n    /**\n     * Padding for left and right sides of label used for calculating text overflow limits\n     * (number represents the padding on each side)\n     */\n    horizontalPadding: number;\n    /** Handler for text overflow. Set to 'undefined' to disable overflow handling */\n    overflowHandler?: TextOverflowHandler;\n    /**\n     * Setting this insures the label's width is smaller or equal to the provided number\n     */\n    maxWidth?: number;\n}\n\n/** Configuration of a grid axis */\nexport interface IAxisConfig {\n    /** Boolean indicating whether the axis should be visible */\n    visible: boolean;\n    /** The approximate number of ticks to display */\n    approximateTicks: number;\n    /** Boolean indicating whether grid ticks should be displayed */\n    gridTicks: boolean;\n    /** The length of the ticks in pixels */\n    tickSize: number;\n    /** Configuration for the tick labels */\n    tickLabel: ITickLabelConfig;\n    /** Sets whether to fit the grid margins to the axis labels */\n    fit: boolean;\n    /** Sets the axis padding */\n    padding: number;\n}\n\n/**\n * Basic grid configuration\n */\nexport interface IGridConfig {\n    /** Boolean indicating whether the grid will respond to mouse events */\n    interactive: boolean;\n    /** Configuration for the grid's dimensions */\n    dimension: IDimensionConfig;\n    /** Configuration for the grid's borders */\n    borders: IAllAround;\n    /** String indicating the desired cursor style */\n    cursor: string;\n    /** Set to true to disable the render area height correction */\n    disableRenderAreaHeightCorrection?: boolean;\n    /** Set to true to disable the render area width correction */\n    disableRenderAreaWidthCorrection?: boolean;\n}\n\n/**\n * Configuration for an XYGrid\n */\nexport interface IXYGridConfig extends IGridConfig {\n    /** The IAllAround value for the grid's axis configurations */\n    axis: IAllAround;\n\n    /**\n     * Add interaction line and label plugins automatically\n     * Note: This was added to prevent a breaking change. We should avoid this kind of option in future\n     * versions of IXYGridConfig because ideally all plugins should be added manually (NUI-3304).\n     */\n    interactionPlugins: boolean;\n}\n\n/**\n * The basic interface for a grid's dimensions, scaling, interaction, and borders\n *\n * @interface\n */\nexport interface IGrid {\n    /** The grid scales\n     *\n     * @type {ScalesIndex}\n     */\n    scales: ScalesIndex;\n\n    /**\n     * Subject for indicating that the chart's dimensions should be updated\n     */\n    updateChartDimensionsSubject?: Subject;\n\n    /**\n     * Chart event bus\n     */\n    eventBus: EventBus;\n\n    /**\n     * Provides access to the grid's layering mechanism\n     *\n     * @returns {Lasagna} The grid's layering mechanism\n     */\n    getLasagna(): Lasagna;\n\n    /**\n     * Provides access to the grid's interactive area\n     *\n     * @returns {D3Selection} The grid's interactive area\n     */\n    getInteractiveArea(): D3Selection;\n\n    /**\n     * getter for the grid's target d3 selection\n     *\n     * @returns {D3Selection} The grid's target d3 selection\n     */\n    target(): D3Selection;\n\n    /**\n     * setter for the grid's target d3 selection\n     *\n     * @param {D3Selection} [target] The grid's new target d3 selection\n     * @returns {IGrid} The grid instance\n     */\n    target(target: D3Selection): IGrid;\n    target(target: D3Selection): D3Selection | IGrid;\n\n    /**\n     * getter for the grid configuration\n     *\n     * @returns {IGridConfig} The grid configuration\n     */\n    config(): IGridConfig;\n\n    /**\n     * setter for the grid configuration\n     *\n     * @param {IGridConfig} config The new grid configuration\n     * @returns {this} The grid instance\n     */\n    config(config: IGridConfig): this;\n\n    /**\n     * Builds the grid's rendered elements\n     *\n     * @returns {IGrid} The grid instance\n     */\n    build(): IGrid;\n\n    /**\n     * Updates the grid's rendered elements based on the current scales and configuration\n     *\n     * @returns {IGrid} The grid instance\n     */\n    update(): IGrid;\n\n    /**\n     * Updates the grid's dimensions as specified\n     *\n     * @param {Partial} dimensions The new grid dimensions\n     * @returns {IGrid} The grid instance\n     */\n    updateDimensions(dimensions: Partial): IGrid;\n\n    /**\n     * Updates the ranges on the grid's scales based on the grid's configured dimensions\n     *\n     * @returns {IGrid} The grid instance\n     */\n    updateRanges(): IGrid;\n\n    /**\n     * Builds the grid's plugins\n     *\n     * @returns {IChartPlugin[]} The set of generated plugins\n     */\n    buildPlugins(chart: IChart): IChartPlugin[];\n}\n\n/**\n * Interface for a d3 axis entity\n */\nexport interface IAxis {\n    /** The d3 group element for the axis label */\n    labelGroup: D3Selection;\n    /** The d3 group element for the axis ticks */\n    tickGroup: D3Selection;\n    /** The d3 group element for the axis */\n    group: D3Selection;\n    /** The d3 axis */\n    axis: Axis;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAreaAccessors.html":{"url":"interfaces/IAreaAccessors.html","title":"interface - IAreaAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IAreaAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/area/area-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                                \n                                        series\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         IAreaDataAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IAreaDataAccessors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        series\n                                    \n                                \n                                \n                                    \n                                        series:         IAreaSeriesAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IAreaSeriesAccessors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { defaultColorProvider, defaultMarkerProvider } from \"../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, IDataAccessors, ISeriesAccessors, SeriesAccessor } from \"../../core/common/types\";\n\nexport interface IAreaDataAccessors extends IDataAccessors {\n    x: DataAccessor;\n    x0: DataAccessor;\n    x1: DataAccessor;\n    absoluteX0: DataAccessor;\n    absoluteX1: DataAccessor;\n    y: DataAccessor;\n    y0: DataAccessor;\n    y1: DataAccessor;\n    absoluteY0: DataAccessor;\n    absoluteY1: DataAccessor;\n}\n\nexport interface IAreaSeriesAccessors extends ISeriesAccessors {\n    color?: SeriesAccessor;\n    marker?: SeriesAccessor;\n}\n\nexport interface IAreaAccessors extends IAccessors {\n    data: IAreaDataAccessors;\n    series: IAreaSeriesAccessors;\n}\n\nexport class AreaAccessors implements IAreaAccessors {\n    data: IAreaDataAccessors;\n    series: IAreaSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider(), private markerProvider = defaultMarkerProvider()) {\n        this.data = {\n            x: (d, i, ds, s) => d.x,\n            x0: (d, i, ds, s) => this.data.x(d, i, ds, s),\n            x1: (d, i, ds, s) => this.data.x(d, i, ds, s),\n            y: (d, i, ds, s) => d.y,\n            y0: (d, i, ds, s) => this.data.y(d, i, ds, s),\n            y1: (d, i, ds, s) => this.data.y(d, i, ds, s),\n            absoluteX0: (d, i, ds, s) => d[\"__stack_x\"]?.start ?? this.data.x0(d, i, ds, s),\n            absoluteX1: (d, i, ds, s) => d[\"__stack_x\"]?.end ?? this.data.x1(d, i, ds, s),\n            absoluteY0: (d, i, ds, s) => d[\"__stack_y\"]?.start ?? this.data.y0(d, i, ds, s),\n            absoluteY1: (d, i, ds, s) => d[\"__stack_y\"]?.end ?? this.data.y1(d, i, ds, s),\n        };\n\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n            marker: this.markerProvider ? this.markerProvider.get : undefined,\n        };\n    }\n}\n\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAreaDataAccessors.html":{"url":"interfaces/IAreaDataAccessors.html","title":"interface - IAreaDataAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IAreaDataAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/area/area-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IDataAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        absoluteX0\n                                \n                                \n                                        absoluteX1\n                                \n                                \n                                        absoluteY0\n                                \n                                \n                                        absoluteY1\n                                \n                                \n                                        x\n                                \n                                \n                                        x0\n                                \n                                \n                                        x1\n                                \n                                \n                                        y\n                                \n                                \n                                        y0\n                                \n                                \n                                        y1\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        absoluteX0\n                                    \n                                \n                                \n                                    \n                                        absoluteX0:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        absoluteX1\n                                    \n                                \n                                \n                                    \n                                        absoluteX1:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        absoluteY0\n                                    \n                                \n                                \n                                    \n                                        absoluteY0:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        absoluteY1\n                                    \n                                \n                                \n                                    \n                                        absoluteY1:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x0\n                                    \n                                \n                                \n                                    \n                                        x0:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x1\n                                    \n                                \n                                \n                                    \n                                        x1:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y0\n                                    \n                                \n                                \n                                    \n                                        y0:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y1\n                                    \n                                \n                                \n                                    \n                                        y1:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { defaultColorProvider, defaultMarkerProvider } from \"../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, IDataAccessors, ISeriesAccessors, SeriesAccessor } from \"../../core/common/types\";\n\nexport interface IAreaDataAccessors extends IDataAccessors {\n    x: DataAccessor;\n    x0: DataAccessor;\n    x1: DataAccessor;\n    absoluteX0: DataAccessor;\n    absoluteX1: DataAccessor;\n    y: DataAccessor;\n    y0: DataAccessor;\n    y1: DataAccessor;\n    absoluteY0: DataAccessor;\n    absoluteY1: DataAccessor;\n}\n\nexport interface IAreaSeriesAccessors extends ISeriesAccessors {\n    color?: SeriesAccessor;\n    marker?: SeriesAccessor;\n}\n\nexport interface IAreaAccessors extends IAccessors {\n    data: IAreaDataAccessors;\n    series: IAreaSeriesAccessors;\n}\n\nexport class AreaAccessors implements IAreaAccessors {\n    data: IAreaDataAccessors;\n    series: IAreaSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider(), private markerProvider = defaultMarkerProvider()) {\n        this.data = {\n            x: (d, i, ds, s) => d.x,\n            x0: (d, i, ds, s) => this.data.x(d, i, ds, s),\n            x1: (d, i, ds, s) => this.data.x(d, i, ds, s),\n            y: (d, i, ds, s) => d.y,\n            y0: (d, i, ds, s) => this.data.y(d, i, ds, s),\n            y1: (d, i, ds, s) => this.data.y(d, i, ds, s),\n            absoluteX0: (d, i, ds, s) => d[\"__stack_x\"]?.start ?? this.data.x0(d, i, ds, s),\n            absoluteX1: (d, i, ds, s) => d[\"__stack_x\"]?.end ?? this.data.x1(d, i, ds, s),\n            absoluteY0: (d, i, ds, s) => d[\"__stack_y\"]?.start ?? this.data.y0(d, i, ds, s),\n            absoluteY1: (d, i, ds, s) => d[\"__stack_y\"]?.end ?? this.data.y1(d, i, ds, s),\n        };\n\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n            marker: this.markerProvider ? this.markerProvider.get : undefined,\n        };\n    }\n}\n\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAreaRendererConfig.html":{"url":"interfaces/IAreaRendererConfig.html","title":"interface - IAreaRendererConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IAreaRendererConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/types.ts\n        \n\n            \n                Description\n            \n            \n                The configuration interface for the area renderer \n\n            \n\n            \n                Extends\n            \n            \n                        IRendererConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        areaClass\n                                \n                                \n                                            Optional\n                                        curveType\n                                \n                                \n                                            Optional\n                                        markerInteraction\n                                \n                                \n                                            Optional\n                                        strokeWidth\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        areaClass\n                                    \n                                \n                                \n                                    \n                                        areaClass:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the class name to apply custom styles to the areas \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        curveType\n                                    \n                                \n                                \n                                    \n                                        curveType:     CurveFactory\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     CurveFactory\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the d3 curve algorithm to be used for drawing the area boundaries \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        markerInteraction\n                                    \n                                \n                                \n                                    \n                                        markerInteraction:         IMarkerInteractionConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IMarkerInteractionConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Enables the pointer cursor when data point markers are hovered \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        strokeWidth\n                                    \n                                \n                                \n                                    \n                                        strokeWidth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The width of the area path's stroke in pixels. Default is 1. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { CurveFactory } from \"d3-shape\";\nimport { Subject } from \"rxjs\";\n\nimport { Renderer } from \"../core/common/renderer\";\nimport { Scales } from \"../core/common/scales/types\";\nimport { IAccessors, IDataSeries, IRenderContainers, IRendererConfig, IRendererEventPayload } from \"../core/common/types\";\n\nimport { IRectangleAccessors } from \"./accessors/rectangle-accessors\";\nimport { BarRenderer } from \"./bar/bar-renderer\";\nimport { ILineAccessors } from \"./line/line-accessors\";\nimport { LineRenderer } from \"./line/line-renderer\";\n\nexport enum RenderState {\n    hidden = \"hidden\",\n    deemphasized = \"deemphasized\",\n    emphasized = \"emphasized\",\n    default = \"default\",\n}\n\nexport enum RenderLayerName {\n    background = \"background\",\n    data = \"data\",\n    unclippedData = \"unclipped-data\",\n    foreground = \"foreground\",\n}\n\n/** The configuration interface for marker interaction */\nexport interface IMarkerInteractionConfig {\n    /** Enables mouse events on data point markers */\n    enabled: boolean;\n    /** Enables the pointer style mouse cursor when data point markers are hovered */\n    clickable?: boolean;\n}\n\n/** The configuration interface for the enhanced line caps */\nexport interface IEnhancedLineCapConfig {\n    /** Set the stroke color */\n    stroke?: string;\n    /** Set the stroke width in pixels */\n    strokeWidth?: number;\n    /** Set the fill color */\n    fill?: string;\n    /** Set the radius in pixels */\n    radius?: number;\n}\n\n/** The configuration interface for the line renderer */\nexport interface ILineRendererConfig extends IRendererConfig {\n    /** Set the width of the line in pixels */\n    strokeWidth?: number;\n    /** Set the stroke-dasharray of the line, e.g. \"1,1\", \"2,2\", etc. */\n    strokeStyle?: string;\n    /** Set the stroke-linecap of the line, e.g. \"round\" */\n    strokeLinecap?: string;\n    /** Set the d3 curve algorithm to be used for drawing the lines */\n    curveType?: CurveFactory;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. LineSelectSeriesInteractionStrategy */\n    interactionStrategy?: IHighlightStrategy;\n    /** Configure the interaction behavior for markers */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** Set whether enhanced line caps should be displayed */\n    useEnhancedLineCaps?: boolean;\n    /** Optionally configure enhanced line caps. Prerequisite: 'useEnhancedLineCaps' is set to true */\n    enhancedLineCap?: IEnhancedLineCapConfig;\n}\n\n/** The configuration interface for the bar renderer */\nexport interface IBarRendererConfig extends IRendererConfig {\n    /** Set the padding on both sides of each bar */\n    padding?: number;\n    /** Set the class name to apply custom styles to the bars */\n    barClass?: string;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. BarHighlightStrategy */\n    highlightStrategy?: IHighlightStrategy;\n    /** Set the mouse cursor style to use when hovering over individual bars */\n    cursor?: string;\n    /** Enables pointer events on the bars */\n    pointerEvents?: boolean;\n    /** Set the stroke width in pixels */\n    strokeWidth?: number;\n    /** Enable the minimum bar thickness (BarRenderer.MIN_BAR_THICKNESS) */\n    enableMinBarThickness?: boolean;\n}\n\n/** The configuration interface for the area renderer */\nexport interface IAreaRendererConfig extends IRendererConfig {\n    /** Set the d3 curve algorithm to be used for drawing the area boundaries */\n    curveType?: CurveFactory;\n    /** Set the class name to apply custom styles to the areas */\n    areaClass?: string;\n    /** Enables the pointer cursor when data point markers are hovered */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** The width of the area path's stroke in pixels. Default is 1. */\n    strokeWidth?: number;\n}\n\nexport interface IRenderSeries {\n    dataSeries: IDataSeries;\n    containers: IRenderContainers;\n    scales: Scales;\n}\n\nexport interface IHighlightStrategy> {\n\n    getDataPointIndex(renderer: T, series: IDataSeries, values: { [p: string]: any }, scales: Scales): number;\n\n    highlightDataPoint(renderer: T, renderSeries: IRenderSeries,\n                       dataPointIndex: number, rendererSubject: Subject): void;\n\n    draw(renderer: T, renderSeries: IRenderSeries, rendererSubject: Subject): void;\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAreaSeriesAccessors.html":{"url":"interfaces/IAreaSeriesAccessors.html","title":"interface - IAreaSeriesAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IAreaSeriesAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/area/area-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        ISeriesAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        color\n                                \n                                \n                                            Optional\n                                        marker\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                    \n                                \n                                \n                                    \n                                        color:         SeriesAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SeriesAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        marker\n                                    \n                                \n                                \n                                    \n                                        marker:         SeriesAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SeriesAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { defaultColorProvider, defaultMarkerProvider } from \"../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, IDataAccessors, ISeriesAccessors, SeriesAccessor } from \"../../core/common/types\";\n\nexport interface IAreaDataAccessors extends IDataAccessors {\n    x: DataAccessor;\n    x0: DataAccessor;\n    x1: DataAccessor;\n    absoluteX0: DataAccessor;\n    absoluteX1: DataAccessor;\n    y: DataAccessor;\n    y0: DataAccessor;\n    y1: DataAccessor;\n    absoluteY0: DataAccessor;\n    absoluteY1: DataAccessor;\n}\n\nexport interface IAreaSeriesAccessors extends ISeriesAccessors {\n    color?: SeriesAccessor;\n    marker?: SeriesAccessor;\n}\n\nexport interface IAreaAccessors extends IAccessors {\n    data: IAreaDataAccessors;\n    series: IAreaSeriesAccessors;\n}\n\nexport class AreaAccessors implements IAreaAccessors {\n    data: IAreaDataAccessors;\n    series: IAreaSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider(), private markerProvider = defaultMarkerProvider()) {\n        this.data = {\n            x: (d, i, ds, s) => d.x,\n            x0: (d, i, ds, s) => this.data.x(d, i, ds, s),\n            x1: (d, i, ds, s) => this.data.x(d, i, ds, s),\n            y: (d, i, ds, s) => d.y,\n            y0: (d, i, ds, s) => this.data.y(d, i, ds, s),\n            y1: (d, i, ds, s) => this.data.y(d, i, ds, s),\n            absoluteX0: (d, i, ds, s) => d[\"__stack_x\"]?.start ?? this.data.x0(d, i, ds, s),\n            absoluteX1: (d, i, ds, s) => d[\"__stack_x\"]?.end ?? this.data.x1(d, i, ds, s),\n            absoluteY0: (d, i, ds, s) => d[\"__stack_y\"]?.start ?? this.data.y0(d, i, ds, s),\n            absoluteY1: (d, i, ds, s) => d[\"__stack_y\"]?.end ?? this.data.y1(d, i, ds, s),\n        };\n\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n            marker: this.markerProvider ? this.markerProvider.get : undefined,\n        };\n    }\n}\n\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAxis.html":{"url":"interfaces/IAxis.html","title":"interface - IAxis","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IAxis\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/types.ts\n        \n\n            \n                Description\n            \n            \n                Interface for a d3 axis entity\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        axis\n                                \n                                \n                                        group\n                                \n                                \n                                        labelGroup\n                                \n                                \n                                        tickGroup\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        axis\n                                    \n                                \n                                \n                                    \n                                        axis:     Axis\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Axis\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The d3 axis \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        group\n                                    \n                                \n                                \n                                    \n                                        group:         D3Selection\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         D3Selection\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The d3 group element for the axis \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        labelGroup\n                                    \n                                \n                                \n                                    \n                                        labelGroup:         D3Selection\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         D3Selection\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The d3 group element for the axis label \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tickGroup\n                                    \n                                \n                                \n                                    \n                                        tickGroup:         D3Selection\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         D3Selection\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The d3 group element for the axis ticks \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { BaseType } from \"d3\";\nimport { Axis } from \"d3-axis\";\nimport { Selection } from \"d3-selection\";\nimport { Subject } from \"rxjs\";\n\nimport { EventBus } from \"../common/event-bus\";\nimport { Lasagna } from \"../common/lasagna\";\nimport { ScalesIndex } from \"../common/scales/types\";\nimport { D3Selection, IChart, IChartEvent, IChartPlugin } from \"../common/types\";\n\n/**\n * Interface for defining aspects of the top, right, bottom, and left sides of a grid\n */\nexport interface IAllAround {\n    /** Object defining aspects of the top of an entity */\n    top: T;\n    /** Object defining aspects of the right side of an entity */\n    right: T;\n    /** Object defining aspects of the bottom of an entity */\n    bottom: T;\n    /** Object defining aspects of the left side of an entity */\n    left: T;\n}\n\n/**\n * The width and height of an grid\n */\nexport interface IDimensions {\n    width: number;\n    height: number;\n}\n\n/**\n * Configuration of grid dimensions\n */\nexport interface IDimensionConfig {\n    /** The top, right, bottom, and left margin sizes in pixels */\n    margin: IAllAround;\n    /** The top, right, bottom, and left padding sizes in pixels */\n    padding: IAllAround;\n    /** Sets whether the grid uses the chart's container to determine its width */\n    autoWidth: boolean;\n    /** Sets whether the grid uses the chart's container to determine its height */\n    autoHeight: boolean;\n    /** Set of booleans indicating whether a specific margin will be recalculated on chart dimension updates */\n    marginLocked?: IAllAround;\n    /**\n     * Sets the grid's width. Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid width\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    width(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- excluding margins.\n     *\n     * @returns {number} The grid's width\n     */\n    width(): number;\n    /**\n     * Sets the grid's height. Note: 'autoHeight' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid height\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    height(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- excluding margins.\n     *\n     * @returns {number} The grid's height\n     */\n    height(): number;\n    /**\n     * Sets the grid's width by subtracting the grid's horizontal margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new width plus the grid's horizontal margins\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerWidth(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- including horizontal margins.\n     *\n     * @returns {number} The grid's width plus horizontal margins\n     */\n    outerWidth(): number;\n    /**\n     * Sets the grid's height by subtracting the grid's vertical margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new height plus the grid's vertical margins     *\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerHeight(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- including vertical margins.\n     *\n     * @returns {number} The grid's height plus vertical margins\n     */\n    outerHeight(): number;\n}\n\n/**\n * Interface for defining the SVGElements forming the top, right, bottom, and left borders of an entity\n */\nexport interface IBorders extends IAllAround {\n}\n\n/**\n * Configuration of grid borders\n */\nexport interface IBorderConfig {\n    /** The stroke color */\n    color?: string;\n    /** The thickness of the border */\n    width?: number;\n    /** The class name */\n    className?: string;\n    /** Boolean indicating whether the border should be visible */\n    visible?: boolean;\n}\n\nexport interface ITextOverflowArgs {\n    widthLimit: number;\n    horizontalPadding: number;\n    ellipsisWidth: number;\n}\n\n/** Type for tick overflow handler */\nexport type TextOverflowHandler = (textSelection: Selection, args: ITextOverflowArgs) => void;\n\n/** Interface representing the configuration for tick labels */\nexport interface ITickLabelConfig {\n    /**\n     * Padding for left and right sides of label used for calculating text overflow limits\n     * (number represents the padding on each side)\n     */\n    horizontalPadding: number;\n    /** Handler for text overflow. Set to 'undefined' to disable overflow handling */\n    overflowHandler?: TextOverflowHandler;\n    /**\n     * Setting this insures the label's width is smaller or equal to the provided number\n     */\n    maxWidth?: number;\n}\n\n/** Configuration of a grid axis */\nexport interface IAxisConfig {\n    /** Boolean indicating whether the axis should be visible */\n    visible: boolean;\n    /** The approximate number of ticks to display */\n    approximateTicks: number;\n    /** Boolean indicating whether grid ticks should be displayed */\n    gridTicks: boolean;\n    /** The length of the ticks in pixels */\n    tickSize: number;\n    /** Configuration for the tick labels */\n    tickLabel: ITickLabelConfig;\n    /** Sets whether to fit the grid margins to the axis labels */\n    fit: boolean;\n    /** Sets the axis padding */\n    padding: number;\n}\n\n/**\n * Basic grid configuration\n */\nexport interface IGridConfig {\n    /** Boolean indicating whether the grid will respond to mouse events */\n    interactive: boolean;\n    /** Configuration for the grid's dimensions */\n    dimension: IDimensionConfig;\n    /** Configuration for the grid's borders */\n    borders: IAllAround;\n    /** String indicating the desired cursor style */\n    cursor: string;\n    /** Set to true to disable the render area height correction */\n    disableRenderAreaHeightCorrection?: boolean;\n    /** Set to true to disable the render area width correction */\n    disableRenderAreaWidthCorrection?: boolean;\n}\n\n/**\n * Configuration for an XYGrid\n */\nexport interface IXYGridConfig extends IGridConfig {\n    /** The IAllAround value for the grid's axis configurations */\n    axis: IAllAround;\n\n    /**\n     * Add interaction line and label plugins automatically\n     * Note: This was added to prevent a breaking change. We should avoid this kind of option in future\n     * versions of IXYGridConfig because ideally all plugins should be added manually (NUI-3304).\n     */\n    interactionPlugins: boolean;\n}\n\n/**\n * The basic interface for a grid's dimensions, scaling, interaction, and borders\n *\n * @interface\n */\nexport interface IGrid {\n    /** The grid scales\n     *\n     * @type {ScalesIndex}\n     */\n    scales: ScalesIndex;\n\n    /**\n     * Subject for indicating that the chart's dimensions should be updated\n     */\n    updateChartDimensionsSubject?: Subject;\n\n    /**\n     * Chart event bus\n     */\n    eventBus: EventBus;\n\n    /**\n     * Provides access to the grid's layering mechanism\n     *\n     * @returns {Lasagna} The grid's layering mechanism\n     */\n    getLasagna(): Lasagna;\n\n    /**\n     * Provides access to the grid's interactive area\n     *\n     * @returns {D3Selection} The grid's interactive area\n     */\n    getInteractiveArea(): D3Selection;\n\n    /**\n     * getter for the grid's target d3 selection\n     *\n     * @returns {D3Selection} The grid's target d3 selection\n     */\n    target(): D3Selection;\n\n    /**\n     * setter for the grid's target d3 selection\n     *\n     * @param {D3Selection} [target] The grid's new target d3 selection\n     * @returns {IGrid} The grid instance\n     */\n    target(target: D3Selection): IGrid;\n    target(target: D3Selection): D3Selection | IGrid;\n\n    /**\n     * getter for the grid configuration\n     *\n     * @returns {IGridConfig} The grid configuration\n     */\n    config(): IGridConfig;\n\n    /**\n     * setter for the grid configuration\n     *\n     * @param {IGridConfig} config The new grid configuration\n     * @returns {this} The grid instance\n     */\n    config(config: IGridConfig): this;\n\n    /**\n     * Builds the grid's rendered elements\n     *\n     * @returns {IGrid} The grid instance\n     */\n    build(): IGrid;\n\n    /**\n     * Updates the grid's rendered elements based on the current scales and configuration\n     *\n     * @returns {IGrid} The grid instance\n     */\n    update(): IGrid;\n\n    /**\n     * Updates the grid's dimensions as specified\n     *\n     * @param {Partial} dimensions The new grid dimensions\n     * @returns {IGrid} The grid instance\n     */\n    updateDimensions(dimensions: Partial): IGrid;\n\n    /**\n     * Updates the ranges on the grid's scales based on the grid's configured dimensions\n     *\n     * @returns {IGrid} The grid instance\n     */\n    updateRanges(): IGrid;\n\n    /**\n     * Builds the grid's plugins\n     *\n     * @returns {IChartPlugin[]} The set of generated plugins\n     */\n    buildPlugins(chart: IChart): IChartPlugin[];\n}\n\n/**\n * Interface for a d3 axis entity\n */\nexport interface IAxis {\n    /** The d3 group element for the axis label */\n    labelGroup: D3Selection;\n    /** The d3 group element for the axis ticks */\n    tickGroup: D3Selection;\n    /** The d3 group element for the axis */\n    group: D3Selection;\n    /** The d3 axis */\n    axis: Axis;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAxisConfig.html":{"url":"interfaces/IAxisConfig.html","title":"interface - IAxisConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IAxisConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/types.ts\n        \n\n            \n                Description\n            \n            \n                Configuration of a grid axis \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        approximateTicks\n                                \n                                \n                                        fit\n                                \n                                \n                                        gridTicks\n                                \n                                \n                                        padding\n                                \n                                \n                                        tickLabel\n                                \n                                \n                                        tickSize\n                                \n                                \n                                        visible\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        approximateTicks\n                                    \n                                \n                                \n                                    \n                                        approximateTicks:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The approximate number of ticks to display \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fit\n                                    \n                                \n                                \n                                    \n                                        fit:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Sets whether to fit the grid margins to the axis labels \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        gridTicks\n                                    \n                                \n                                \n                                    \n                                        gridTicks:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Boolean indicating whether grid ticks should be displayed \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        padding\n                                    \n                                \n                                \n                                    \n                                        padding:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Sets the axis padding \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tickLabel\n                                    \n                                \n                                \n                                    \n                                        tickLabel:         ITickLabelConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ITickLabelConfig\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Configuration for the tick labels \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tickSize\n                                    \n                                \n                                \n                                    \n                                        tickSize:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The length of the ticks in pixels \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        visible\n                                    \n                                \n                                \n                                    \n                                        visible:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Boolean indicating whether the axis should be visible \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { BaseType } from \"d3\";\nimport { Axis } from \"d3-axis\";\nimport { Selection } from \"d3-selection\";\nimport { Subject } from \"rxjs\";\n\nimport { EventBus } from \"../common/event-bus\";\nimport { Lasagna } from \"../common/lasagna\";\nimport { ScalesIndex } from \"../common/scales/types\";\nimport { D3Selection, IChart, IChartEvent, IChartPlugin } from \"../common/types\";\n\n/**\n * Interface for defining aspects of the top, right, bottom, and left sides of a grid\n */\nexport interface IAllAround {\n    /** Object defining aspects of the top of an entity */\n    top: T;\n    /** Object defining aspects of the right side of an entity */\n    right: T;\n    /** Object defining aspects of the bottom of an entity */\n    bottom: T;\n    /** Object defining aspects of the left side of an entity */\n    left: T;\n}\n\n/**\n * The width and height of an grid\n */\nexport interface IDimensions {\n    width: number;\n    height: number;\n}\n\n/**\n * Configuration of grid dimensions\n */\nexport interface IDimensionConfig {\n    /** The top, right, bottom, and left margin sizes in pixels */\n    margin: IAllAround;\n    /** The top, right, bottom, and left padding sizes in pixels */\n    padding: IAllAround;\n    /** Sets whether the grid uses the chart's container to determine its width */\n    autoWidth: boolean;\n    /** Sets whether the grid uses the chart's container to determine its height */\n    autoHeight: boolean;\n    /** Set of booleans indicating whether a specific margin will be recalculated on chart dimension updates */\n    marginLocked?: IAllAround;\n    /**\n     * Sets the grid's width. Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid width\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    width(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- excluding margins.\n     *\n     * @returns {number} The grid's width\n     */\n    width(): number;\n    /**\n     * Sets the grid's height. Note: 'autoHeight' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid height\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    height(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- excluding margins.\n     *\n     * @returns {number} The grid's height\n     */\n    height(): number;\n    /**\n     * Sets the grid's width by subtracting the grid's horizontal margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new width plus the grid's horizontal margins\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerWidth(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- including horizontal margins.\n     *\n     * @returns {number} The grid's width plus horizontal margins\n     */\n    outerWidth(): number;\n    /**\n     * Sets the grid's height by subtracting the grid's vertical margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new height plus the grid's vertical margins     *\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerHeight(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- including vertical margins.\n     *\n     * @returns {number} The grid's height plus vertical margins\n     */\n    outerHeight(): number;\n}\n\n/**\n * Interface for defining the SVGElements forming the top, right, bottom, and left borders of an entity\n */\nexport interface IBorders extends IAllAround {\n}\n\n/**\n * Configuration of grid borders\n */\nexport interface IBorderConfig {\n    /** The stroke color */\n    color?: string;\n    /** The thickness of the border */\n    width?: number;\n    /** The class name */\n    className?: string;\n    /** Boolean indicating whether the border should be visible */\n    visible?: boolean;\n}\n\nexport interface ITextOverflowArgs {\n    widthLimit: number;\n    horizontalPadding: number;\n    ellipsisWidth: number;\n}\n\n/** Type for tick overflow handler */\nexport type TextOverflowHandler = (textSelection: Selection, args: ITextOverflowArgs) => void;\n\n/** Interface representing the configuration for tick labels */\nexport interface ITickLabelConfig {\n    /**\n     * Padding for left and right sides of label used for calculating text overflow limits\n     * (number represents the padding on each side)\n     */\n    horizontalPadding: number;\n    /** Handler for text overflow. Set to 'undefined' to disable overflow handling */\n    overflowHandler?: TextOverflowHandler;\n    /**\n     * Setting this insures the label's width is smaller or equal to the provided number\n     */\n    maxWidth?: number;\n}\n\n/** Configuration of a grid axis */\nexport interface IAxisConfig {\n    /** Boolean indicating whether the axis should be visible */\n    visible: boolean;\n    /** The approximate number of ticks to display */\n    approximateTicks: number;\n    /** Boolean indicating whether grid ticks should be displayed */\n    gridTicks: boolean;\n    /** The length of the ticks in pixels */\n    tickSize: number;\n    /** Configuration for the tick labels */\n    tickLabel: ITickLabelConfig;\n    /** Sets whether to fit the grid margins to the axis labels */\n    fit: boolean;\n    /** Sets the axis padding */\n    padding: number;\n}\n\n/**\n * Basic grid configuration\n */\nexport interface IGridConfig {\n    /** Boolean indicating whether the grid will respond to mouse events */\n    interactive: boolean;\n    /** Configuration for the grid's dimensions */\n    dimension: IDimensionConfig;\n    /** Configuration for the grid's borders */\n    borders: IAllAround;\n    /** String indicating the desired cursor style */\n    cursor: string;\n    /** Set to true to disable the render area height correction */\n    disableRenderAreaHeightCorrection?: boolean;\n    /** Set to true to disable the render area width correction */\n    disableRenderAreaWidthCorrection?: boolean;\n}\n\n/**\n * Configuration for an XYGrid\n */\nexport interface IXYGridConfig extends IGridConfig {\n    /** The IAllAround value for the grid's axis configurations */\n    axis: IAllAround;\n\n    /**\n     * Add interaction line and label plugins automatically\n     * Note: This was added to prevent a breaking change. We should avoid this kind of option in future\n     * versions of IXYGridConfig because ideally all plugins should be added manually (NUI-3304).\n     */\n    interactionPlugins: boolean;\n}\n\n/**\n * The basic interface for a grid's dimensions, scaling, interaction, and borders\n *\n * @interface\n */\nexport interface IGrid {\n    /** The grid scales\n     *\n     * @type {ScalesIndex}\n     */\n    scales: ScalesIndex;\n\n    /**\n     * Subject for indicating that the chart's dimensions should be updated\n     */\n    updateChartDimensionsSubject?: Subject;\n\n    /**\n     * Chart event bus\n     */\n    eventBus: EventBus;\n\n    /**\n     * Provides access to the grid's layering mechanism\n     *\n     * @returns {Lasagna} The grid's layering mechanism\n     */\n    getLasagna(): Lasagna;\n\n    /**\n     * Provides access to the grid's interactive area\n     *\n     * @returns {D3Selection} The grid's interactive area\n     */\n    getInteractiveArea(): D3Selection;\n\n    /**\n     * getter for the grid's target d3 selection\n     *\n     * @returns {D3Selection} The grid's target d3 selection\n     */\n    target(): D3Selection;\n\n    /**\n     * setter for the grid's target d3 selection\n     *\n     * @param {D3Selection} [target] The grid's new target d3 selection\n     * @returns {IGrid} The grid instance\n     */\n    target(target: D3Selection): IGrid;\n    target(target: D3Selection): D3Selection | IGrid;\n\n    /**\n     * getter for the grid configuration\n     *\n     * @returns {IGridConfig} The grid configuration\n     */\n    config(): IGridConfig;\n\n    /**\n     * setter for the grid configuration\n     *\n     * @param {IGridConfig} config The new grid configuration\n     * @returns {this} The grid instance\n     */\n    config(config: IGridConfig): this;\n\n    /**\n     * Builds the grid's rendered elements\n     *\n     * @returns {IGrid} The grid instance\n     */\n    build(): IGrid;\n\n    /**\n     * Updates the grid's rendered elements based on the current scales and configuration\n     *\n     * @returns {IGrid} The grid instance\n     */\n    update(): IGrid;\n\n    /**\n     * Updates the grid's dimensions as specified\n     *\n     * @param {Partial} dimensions The new grid dimensions\n     * @returns {IGrid} The grid instance\n     */\n    updateDimensions(dimensions: Partial): IGrid;\n\n    /**\n     * Updates the ranges on the grid's scales based on the grid's configured dimensions\n     *\n     * @returns {IGrid} The grid instance\n     */\n    updateRanges(): IGrid;\n\n    /**\n     * Builds the grid's plugins\n     *\n     * @returns {IChartPlugin[]} The set of generated plugins\n     */\n    buildPlugins(chart: IChart): IChartPlugin[];\n}\n\n/**\n * Interface for a d3 axis entity\n */\nexport interface IAxis {\n    /** The d3 group element for the axis label */\n    labelGroup: D3Selection;\n    /** The d3 group element for the axis ticks */\n    tickGroup: D3Selection;\n    /** The d3 group element for the axis */\n    group: D3Selection;\n    /** The d3 axis */\n    axis: Axis;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IBandScale.html":{"url":"interfaces/IBandScale.html","title":"interface - IBandScale","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IBandScale\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/scales/types.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IScale\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    bandwidth\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            bandwidth\n                        \n                        \n                    \n                \n            \n            \n                \nbandwidth()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/types.ts:146\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { AxisScale } from \"d3-axis\";\n\nimport { IAccessors, IChartSeries } from \"../types\";\n\n/** Domain for series with empty or null data */\nexport const EMPTY_CONTINUOUS_DOMAIN = [0, 0];\n/** A reasonable non-data-driven domain for charts  */\nexport const NORMALIZED_DOMAIN = [0, 1];\n\n/** Signature for domain calculator */\nexport type DomainCalculator = (chartSeriesSet: IChartSeries[], scaleId: string, scale: IScale) => any[];\n\n/** Interface for scale formatters */\nexport interface IFormatters {\n    /** Formatter for tick labels */\n    tick?: Formatter;\n    /** Additional formatters */\n    [p: string]: Formatter | undefined;\n}\n\n/** Signature for label formatters */\nexport type Formatter = (value: T) => string;\n\n/** Dictionary of scale collections in index and array form */\nexport interface ScalesIndex {\n    [key: string]: {\n        /** Scale collection as an index */\n        index: { [scaleId: string]: IScale };\n        /** Scale collection as an array */\n        list: IScale[];\n    };\n}\n\n/** Dictionary of scales */\nexport type Scales = Record>;\n\nexport interface IXYScales extends Scales {\n    x: IScale;\n    y: IScale;\n}\n\nexport interface IRadialScales extends Scales {\n    r: IScale;\n}\n\n/** Interface for a scale */\nexport interface IScale {\n    /** The scale identifier */\n    readonly id: string;\n    readonly d3Scale: AxisScale; // TODO: maybe AxisScale is to narrow?\n\n    /** If this flag is enabled, the domain of this scale is not recalculated */\n    isDomainFixed?: boolean;\n    /** Method used to calculate the scale's domain */\n    domainCalculator?: DomainCalculator;\n    /** The scales formatters */\n    formatters: IFormatters;\n    /** If this flag is enabled, the domain has been recalculated with ticks in mind */\n    __domainCalculatedWithTicks?: boolean;\n\n    /**\n     * Determines if the scale's domain is continuous\n     *\n     * @returns {boolean} true if the scale's domain is continuous (numeric), false otherwise\n     */\n    isContinuous(): boolean;\n\n    /**\n     * Determines if the scale's domain is valid\n     *\n     * @returns {boolean} true if the scale's domain is valid, false otherwise\n     */\n    isDomainValid(): boolean;\n\n    /**\n     * Converts a value to its corresponding coordinate\n     *\n     * @param {T} value The value to be converted\n     * @returns {number} The coordinate corresponding to the specified value\n     */\n    convert(value: T): number;\n\n    /**\n     * Converts a coordinate to its corresponding value\n     *\n     * @param {number} coordinate The coordinate to be converted\n     * @returns {T} The value corresponding to the specified coordinate\n     */\n    invert(coordinate: number): T | undefined;\n\n    /**\n     * Gets the scale's range\n     *\n     * @returns {[number, number]} The scale's range\n     */\n    range(): [number, number];\n\n    /**\n     * Sets the scale's range\n     *\n     * @param {[number, number]} range The scale's new range\n     */\n    range(range: [number, number]): this;\n\n    /**\n     * Gets the scale's domain\n     *\n     * @returns {T[]} The scale's domain\n     */\n    domain(): T[];\n\n    /**\n     * Sets the scale's domain\n     *\n     * @param {T[]} domain The scale's new domain\n     */\n    domain(domain: T[]): this;\n\n    /**\n     * Shorthand method for setting the domain and isDomainFixed at once\n     *\n     * @param {T[]} domain The scale's fixed domain\n     */\n    fixDomain(domain: T[]): void;\n\n    /**\n     * Reverse the scale orientation by toggling the reversed flag\n     */\n    reverse(): this;\n\n    /**\n     * Getter for the reversed flag (see #reverse)\n     */\n    reversed(): boolean;\n\n    /**\n     * Setter for the reversed flag (see #reverse)\n     *\n     * @param reversed\n     */\n    reversed(reversed: boolean): this;\n}\n\n\nexport interface IBandScale extends IScale {\n    bandwidth(): number;\n}\n\nexport function isBandScale(scale: any): scale is IBandScale {\n    return typeof scale.bandwidth === \"function\";\n}\n\nexport interface IHasInnerScale extends IScale {\n    innerScale: IScale;\n}\n\nexport function hasInnerScale(scale: any): scale is IHasInnerScale {\n    return typeof scale.innerScale !== \"undefined\";\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IBarAccessors.html":{"url":"interfaces/IBarAccessors.html","title":"interface - IBarAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IBarAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/bar/accessors/bar-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                                \n                                        series\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         IBarDataAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IBarDataAccessors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        series\n                                    \n                                \n                                \n                                    \n                                        series:         IRectangleSeriesAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IRectangleSeriesAccessors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { defaultColorProvider, defaultMarkerProvider } from \"../../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, IDataSeries } from \"../../../core/common/types\";\nimport { IRectangleDataAccessors, IRectangleSeriesAccessors, RectangleAccessors } from \"../../accessors/rectangle-accessors\";\n\nexport interface IBarDataAccessors extends IRectangleDataAccessors {\n    category: DataAccessor;\n    start: DataAccessor;\n    end: DataAccessor;\n    thickness?: DataAccessor;\n    value?: DataAccessor;\n    color?: DataAccessor;\n    marker?: DataAccessor;\n    cssClass?: DataAccessor;\n}\n\nexport interface IBarAccessors extends IAccessors {\n    data: IBarDataAccessors;\n    series: IRectangleSeriesAccessors;\n}\n\nexport abstract class BarAccessors extends RectangleAccessors implements IBarAccessors {\n    data: IBarDataAccessors;\n    series: IRectangleSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider(), private markerProvider = defaultMarkerProvider()) {\n        super();\n\n        this.data = {\n            value: (data: any) => data.value,\n            category: (d, i, series: any[], dataSeries: IDataSeries) => {\n                if (d.category) {\n                    return d.category;\n                }\n\n                if (this.series.category) {\n                    return this.series.category(dataSeries.id, dataSeries);\n                }\n\n                return null;\n            },\n            start: (data: any, index: number, series: any[], dataSeries: IDataSeries) => {\n                if (data.__bar) {\n                    return data.__bar.start;\n                }\n                if (typeof data.start !== \"undefined\") {\n                    return data.start;\n                }\n\n                const value = this.getSingleValue(data, index, series, dataSeries);\n                if (Number.isFinite(value)) {\n                    return Math.min(0, value);\n                }\n\n                return null;\n            },\n            end: (data: any, index: number, series: any[], dataSeries: IDataSeries) => {\n                if (data.__bar) {\n                    return data.__bar.end;\n                }\n                if (typeof data.end !== \"undefined\") {\n                    return data.end;\n                }\n\n                const value = this.getSingleValue(data, index, series, dataSeries);\n                if (Number.isFinite(value)) {\n                    return Math.max(0, value);\n                }\n\n                return null;\n            },\n        };\n\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n            marker: this.markerProvider ? this.markerProvider.get : undefined,\n            category: (seriesId, series) => series.name || series.id,\n        };\n\n    }\n\n    private getSingleValue(data: any, index: number, series: any[], dataSeries: IDataSeries) {\n        let value: any;\n        if (this.data.value) {\n            // try to use the value accessor to retrieve value\n            value = this.data.value(data, index, series, dataSeries);\n            // if it fails to retrieve a valid value, then we consider the data point to be a primitive value that is returned directly\n            if (typeof value === \"undefined\") {\n                value = data;\n            }\n        }\n        return value;\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IBarChartConfig.html":{"url":"interfaces/IBarChartConfig.html","title":"interface - IBarChartConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IBarChartConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/bar/types.ts\n        \n\n            \n                Description\n            \n            \n                Configuration for bar charts\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        grouped\n                                \n                                \n                                            Optional\n                                        horizontal\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        grouped\n                                    \n                                \n                                \n                                    \n                                        grouped:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        horizontal\n                                    \n                                \n                                \n                                    \n                                        horizontal:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IBarChartConfig {\n    horizontal?: boolean;\n    grouped?: boolean;\n}\n\nexport interface IStackMetadata {\n    start: number;\n    end: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IBarDataAccessors.html":{"url":"interfaces/IBarDataAccessors.html","title":"interface - IBarDataAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IBarDataAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/bar/accessors/bar-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IRectangleDataAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        category\n                                \n                                \n                                            Optional\n                                        color\n                                \n                                \n                                            Optional\n                                        cssClass\n                                \n                                \n                                        end\n                                \n                                \n                                            Optional\n                                        marker\n                                \n                                \n                                        start\n                                \n                                \n                                            Optional\n                                        thickness\n                                \n                                \n                                            Optional\n                                        value\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        category\n                                    \n                                \n                                \n                                    \n                                        category:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                    \n                                \n                                \n                                    \n                                        color:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cssClass\n                                    \n                                \n                                \n                                    \n                                        cssClass:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        end\n                                    \n                                \n                                \n                                    \n                                        end:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        marker\n                                    \n                                \n                                \n                                    \n                                        marker:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        start\n                                    \n                                \n                                \n                                    \n                                        start:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        thickness\n                                    \n                                \n                                \n                                    \n                                        thickness:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                    \n                                \n                                \n                                    \n                                        value:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { defaultColorProvider, defaultMarkerProvider } from \"../../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, IDataSeries } from \"../../../core/common/types\";\nimport { IRectangleDataAccessors, IRectangleSeriesAccessors, RectangleAccessors } from \"../../accessors/rectangle-accessors\";\n\nexport interface IBarDataAccessors extends IRectangleDataAccessors {\n    category: DataAccessor;\n    start: DataAccessor;\n    end: DataAccessor;\n    thickness?: DataAccessor;\n    value?: DataAccessor;\n    color?: DataAccessor;\n    marker?: DataAccessor;\n    cssClass?: DataAccessor;\n}\n\nexport interface IBarAccessors extends IAccessors {\n    data: IBarDataAccessors;\n    series: IRectangleSeriesAccessors;\n}\n\nexport abstract class BarAccessors extends RectangleAccessors implements IBarAccessors {\n    data: IBarDataAccessors;\n    series: IRectangleSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider(), private markerProvider = defaultMarkerProvider()) {\n        super();\n\n        this.data = {\n            value: (data: any) => data.value,\n            category: (d, i, series: any[], dataSeries: IDataSeries) => {\n                if (d.category) {\n                    return d.category;\n                }\n\n                if (this.series.category) {\n                    return this.series.category(dataSeries.id, dataSeries);\n                }\n\n                return null;\n            },\n            start: (data: any, index: number, series: any[], dataSeries: IDataSeries) => {\n                if (data.__bar) {\n                    return data.__bar.start;\n                }\n                if (typeof data.start !== \"undefined\") {\n                    return data.start;\n                }\n\n                const value = this.getSingleValue(data, index, series, dataSeries);\n                if (Number.isFinite(value)) {\n                    return Math.min(0, value);\n                }\n\n                return null;\n            },\n            end: (data: any, index: number, series: any[], dataSeries: IDataSeries) => {\n                if (data.__bar) {\n                    return data.__bar.end;\n                }\n                if (typeof data.end !== \"undefined\") {\n                    return data.end;\n                }\n\n                const value = this.getSingleValue(data, index, series, dataSeries);\n                if (Number.isFinite(value)) {\n                    return Math.max(0, value);\n                }\n\n                return null;\n            },\n        };\n\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n            marker: this.markerProvider ? this.markerProvider.get : undefined,\n            category: (seriesId, series) => series.name || series.id,\n        };\n\n    }\n\n    private getSingleValue(data: any, index: number, series: any[], dataSeries: IDataSeries) {\n        let value: any;\n        if (this.data.value) {\n            // try to use the value accessor to retrieve value\n            value = this.data.value(data, index, series, dataSeries);\n            // if it fails to retrieve a valid value, then we consider the data point to be a primitive value that is returned directly\n            if (typeof value === \"undefined\") {\n                value = data;\n            }\n        }\n        return value;\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IBarRendererConfig.html":{"url":"interfaces/IBarRendererConfig.html","title":"interface - IBarRendererConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IBarRendererConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/types.ts\n        \n\n            \n                Description\n            \n            \n                The configuration interface for the bar renderer \n\n            \n\n            \n                Extends\n            \n            \n                        IRendererConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        barClass\n                                \n                                \n                                            Optional\n                                        cursor\n                                \n                                \n                                            Optional\n                                        enableMinBarThickness\n                                \n                                \n                                            Optional\n                                        highlightStrategy\n                                \n                                \n                                            Optional\n                                        padding\n                                \n                                \n                                            Optional\n                                        pointerEvents\n                                \n                                \n                                            Optional\n                                        strokeWidth\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        barClass\n                                    \n                                \n                                \n                                    \n                                        barClass:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the class name to apply custom styles to the bars \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cursor\n                                    \n                                \n                                \n                                    \n                                        cursor:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the mouse cursor style to use when hovering over individual bars \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enableMinBarThickness\n                                    \n                                \n                                \n                                    \n                                        enableMinBarThickness:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Enable the minimum bar thickness (BarRenderer.MIN_BAR_THICKNESS) \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        highlightStrategy\n                                    \n                                \n                                \n                                    \n                                        highlightStrategy:     IHighlightStrategy\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     IHighlightStrategy\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. BarHighlightStrategy \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        padding\n                                    \n                                \n                                \n                                    \n                                        padding:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the padding on both sides of each bar \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pointerEvents\n                                    \n                                \n                                \n                                    \n                                        pointerEvents:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Enables pointer events on the bars \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        strokeWidth\n                                    \n                                \n                                \n                                    \n                                        strokeWidth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the stroke width in pixels \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { CurveFactory } from \"d3-shape\";\nimport { Subject } from \"rxjs\";\n\nimport { Renderer } from \"../core/common/renderer\";\nimport { Scales } from \"../core/common/scales/types\";\nimport { IAccessors, IDataSeries, IRenderContainers, IRendererConfig, IRendererEventPayload } from \"../core/common/types\";\n\nimport { IRectangleAccessors } from \"./accessors/rectangle-accessors\";\nimport { BarRenderer } from \"./bar/bar-renderer\";\nimport { ILineAccessors } from \"./line/line-accessors\";\nimport { LineRenderer } from \"./line/line-renderer\";\n\nexport enum RenderState {\n    hidden = \"hidden\",\n    deemphasized = \"deemphasized\",\n    emphasized = \"emphasized\",\n    default = \"default\",\n}\n\nexport enum RenderLayerName {\n    background = \"background\",\n    data = \"data\",\n    unclippedData = \"unclipped-data\",\n    foreground = \"foreground\",\n}\n\n/** The configuration interface for marker interaction */\nexport interface IMarkerInteractionConfig {\n    /** Enables mouse events on data point markers */\n    enabled: boolean;\n    /** Enables the pointer style mouse cursor when data point markers are hovered */\n    clickable?: boolean;\n}\n\n/** The configuration interface for the enhanced line caps */\nexport interface IEnhancedLineCapConfig {\n    /** Set the stroke color */\n    stroke?: string;\n    /** Set the stroke width in pixels */\n    strokeWidth?: number;\n    /** Set the fill color */\n    fill?: string;\n    /** Set the radius in pixels */\n    radius?: number;\n}\n\n/** The configuration interface for the line renderer */\nexport interface ILineRendererConfig extends IRendererConfig {\n    /** Set the width of the line in pixels */\n    strokeWidth?: number;\n    /** Set the stroke-dasharray of the line, e.g. \"1,1\", \"2,2\", etc. */\n    strokeStyle?: string;\n    /** Set the stroke-linecap of the line, e.g. \"round\" */\n    strokeLinecap?: string;\n    /** Set the d3 curve algorithm to be used for drawing the lines */\n    curveType?: CurveFactory;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. LineSelectSeriesInteractionStrategy */\n    interactionStrategy?: IHighlightStrategy;\n    /** Configure the interaction behavior for markers */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** Set whether enhanced line caps should be displayed */\n    useEnhancedLineCaps?: boolean;\n    /** Optionally configure enhanced line caps. Prerequisite: 'useEnhancedLineCaps' is set to true */\n    enhancedLineCap?: IEnhancedLineCapConfig;\n}\n\n/** The configuration interface for the bar renderer */\nexport interface IBarRendererConfig extends IRendererConfig {\n    /** Set the padding on both sides of each bar */\n    padding?: number;\n    /** Set the class name to apply custom styles to the bars */\n    barClass?: string;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. BarHighlightStrategy */\n    highlightStrategy?: IHighlightStrategy;\n    /** Set the mouse cursor style to use when hovering over individual bars */\n    cursor?: string;\n    /** Enables pointer events on the bars */\n    pointerEvents?: boolean;\n    /** Set the stroke width in pixels */\n    strokeWidth?: number;\n    /** Enable the minimum bar thickness (BarRenderer.MIN_BAR_THICKNESS) */\n    enableMinBarThickness?: boolean;\n}\n\n/** The configuration interface for the area renderer */\nexport interface IAreaRendererConfig extends IRendererConfig {\n    /** Set the d3 curve algorithm to be used for drawing the area boundaries */\n    curveType?: CurveFactory;\n    /** Set the class name to apply custom styles to the areas */\n    areaClass?: string;\n    /** Enables the pointer cursor when data point markers are hovered */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** The width of the area path's stroke in pixels. Default is 1. */\n    strokeWidth?: number;\n}\n\nexport interface IRenderSeries {\n    dataSeries: IDataSeries;\n    containers: IRenderContainers;\n    scales: Scales;\n}\n\nexport interface IHighlightStrategy> {\n\n    getDataPointIndex(renderer: T, series: IDataSeries, values: { [p: string]: any }, scales: Scales): number;\n\n    highlightDataPoint(renderer: T, renderSeries: IRenderSeries,\n                       dataPointIndex: number, rendererSubject: Subject): void;\n\n    draw(renderer: T, renderSeries: IRenderSeries, rendererSubject: Subject): void;\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IBorderConfig.html":{"url":"interfaces/IBorderConfig.html","title":"interface - IBorderConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IBorderConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/types.ts\n        \n\n            \n                Description\n            \n            \n                Configuration of grid borders\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        className\n                                \n                                \n                                            Optional\n                                        color\n                                \n                                \n                                            Optional\n                                        visible\n                                \n                                \n                                            Optional\n                                        width\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        className\n                                    \n                                \n                                \n                                    \n                                        className:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The class name \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                    \n                                \n                                \n                                    \n                                        color:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The stroke color \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        visible\n                                    \n                                \n                                \n                                    \n                                        visible:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Boolean indicating whether the border should be visible \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                    \n                                \n                                \n                                    \n                                        width:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The thickness of the border \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { BaseType } from \"d3\";\nimport { Axis } from \"d3-axis\";\nimport { Selection } from \"d3-selection\";\nimport { Subject } from \"rxjs\";\n\nimport { EventBus } from \"../common/event-bus\";\nimport { Lasagna } from \"../common/lasagna\";\nimport { ScalesIndex } from \"../common/scales/types\";\nimport { D3Selection, IChart, IChartEvent, IChartPlugin } from \"../common/types\";\n\n/**\n * Interface for defining aspects of the top, right, bottom, and left sides of a grid\n */\nexport interface IAllAround {\n    /** Object defining aspects of the top of an entity */\n    top: T;\n    /** Object defining aspects of the right side of an entity */\n    right: T;\n    /** Object defining aspects of the bottom of an entity */\n    bottom: T;\n    /** Object defining aspects of the left side of an entity */\n    left: T;\n}\n\n/**\n * The width and height of an grid\n */\nexport interface IDimensions {\n    width: number;\n    height: number;\n}\n\n/**\n * Configuration of grid dimensions\n */\nexport interface IDimensionConfig {\n    /** The top, right, bottom, and left margin sizes in pixels */\n    margin: IAllAround;\n    /** The top, right, bottom, and left padding sizes in pixels */\n    padding: IAllAround;\n    /** Sets whether the grid uses the chart's container to determine its width */\n    autoWidth: boolean;\n    /** Sets whether the grid uses the chart's container to determine its height */\n    autoHeight: boolean;\n    /** Set of booleans indicating whether a specific margin will be recalculated on chart dimension updates */\n    marginLocked?: IAllAround;\n    /**\n     * Sets the grid's width. Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid width\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    width(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- excluding margins.\n     *\n     * @returns {number} The grid's width\n     */\n    width(): number;\n    /**\n     * Sets the grid's height. Note: 'autoHeight' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid height\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    height(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- excluding margins.\n     *\n     * @returns {number} The grid's height\n     */\n    height(): number;\n    /**\n     * Sets the grid's width by subtracting the grid's horizontal margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new width plus the grid's horizontal margins\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerWidth(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- including horizontal margins.\n     *\n     * @returns {number} The grid's width plus horizontal margins\n     */\n    outerWidth(): number;\n    /**\n     * Sets the grid's height by subtracting the grid's vertical margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new height plus the grid's vertical margins     *\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerHeight(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- including vertical margins.\n     *\n     * @returns {number} The grid's height plus vertical margins\n     */\n    outerHeight(): number;\n}\n\n/**\n * Interface for defining the SVGElements forming the top, right, bottom, and left borders of an entity\n */\nexport interface IBorders extends IAllAround {\n}\n\n/**\n * Configuration of grid borders\n */\nexport interface IBorderConfig {\n    /** The stroke color */\n    color?: string;\n    /** The thickness of the border */\n    width?: number;\n    /** The class name */\n    className?: string;\n    /** Boolean indicating whether the border should be visible */\n    visible?: boolean;\n}\n\nexport interface ITextOverflowArgs {\n    widthLimit: number;\n    horizontalPadding: number;\n    ellipsisWidth: number;\n}\n\n/** Type for tick overflow handler */\nexport type TextOverflowHandler = (textSelection: Selection, args: ITextOverflowArgs) => void;\n\n/** Interface representing the configuration for tick labels */\nexport interface ITickLabelConfig {\n    /**\n     * Padding for left and right sides of label used for calculating text overflow limits\n     * (number represents the padding on each side)\n     */\n    horizontalPadding: number;\n    /** Handler for text overflow. Set to 'undefined' to disable overflow handling */\n    overflowHandler?: TextOverflowHandler;\n    /**\n     * Setting this insures the label's width is smaller or equal to the provided number\n     */\n    maxWidth?: number;\n}\n\n/** Configuration of a grid axis */\nexport interface IAxisConfig {\n    /** Boolean indicating whether the axis should be visible */\n    visible: boolean;\n    /** The approximate number of ticks to display */\n    approximateTicks: number;\n    /** Boolean indicating whether grid ticks should be displayed */\n    gridTicks: boolean;\n    /** The length of the ticks in pixels */\n    tickSize: number;\n    /** Configuration for the tick labels */\n    tickLabel: ITickLabelConfig;\n    /** Sets whether to fit the grid margins to the axis labels */\n    fit: boolean;\n    /** Sets the axis padding */\n    padding: number;\n}\n\n/**\n * Basic grid configuration\n */\nexport interface IGridConfig {\n    /** Boolean indicating whether the grid will respond to mouse events */\n    interactive: boolean;\n    /** Configuration for the grid's dimensions */\n    dimension: IDimensionConfig;\n    /** Configuration for the grid's borders */\n    borders: IAllAround;\n    /** String indicating the desired cursor style */\n    cursor: string;\n    /** Set to true to disable the render area height correction */\n    disableRenderAreaHeightCorrection?: boolean;\n    /** Set to true to disable the render area width correction */\n    disableRenderAreaWidthCorrection?: boolean;\n}\n\n/**\n * Configuration for an XYGrid\n */\nexport interface IXYGridConfig extends IGridConfig {\n    /** The IAllAround value for the grid's axis configurations */\n    axis: IAllAround;\n\n    /**\n     * Add interaction line and label plugins automatically\n     * Note: This was added to prevent a breaking change. We should avoid this kind of option in future\n     * versions of IXYGridConfig because ideally all plugins should be added manually (NUI-3304).\n     */\n    interactionPlugins: boolean;\n}\n\n/**\n * The basic interface for a grid's dimensions, scaling, interaction, and borders\n *\n * @interface\n */\nexport interface IGrid {\n    /** The grid scales\n     *\n     * @type {ScalesIndex}\n     */\n    scales: ScalesIndex;\n\n    /**\n     * Subject for indicating that the chart's dimensions should be updated\n     */\n    updateChartDimensionsSubject?: Subject;\n\n    /**\n     * Chart event bus\n     */\n    eventBus: EventBus;\n\n    /**\n     * Provides access to the grid's layering mechanism\n     *\n     * @returns {Lasagna} The grid's layering mechanism\n     */\n    getLasagna(): Lasagna;\n\n    /**\n     * Provides access to the grid's interactive area\n     *\n     * @returns {D3Selection} The grid's interactive area\n     */\n    getInteractiveArea(): D3Selection;\n\n    /**\n     * getter for the grid's target d3 selection\n     *\n     * @returns {D3Selection} The grid's target d3 selection\n     */\n    target(): D3Selection;\n\n    /**\n     * setter for the grid's target d3 selection\n     *\n     * @param {D3Selection} [target] The grid's new target d3 selection\n     * @returns {IGrid} The grid instance\n     */\n    target(target: D3Selection): IGrid;\n    target(target: D3Selection): D3Selection | IGrid;\n\n    /**\n     * getter for the grid configuration\n     *\n     * @returns {IGridConfig} The grid configuration\n     */\n    config(): IGridConfig;\n\n    /**\n     * setter for the grid configuration\n     *\n     * @param {IGridConfig} config The new grid configuration\n     * @returns {this} The grid instance\n     */\n    config(config: IGridConfig): this;\n\n    /**\n     * Builds the grid's rendered elements\n     *\n     * @returns {IGrid} The grid instance\n     */\n    build(): IGrid;\n\n    /**\n     * Updates the grid's rendered elements based on the current scales and configuration\n     *\n     * @returns {IGrid} The grid instance\n     */\n    update(): IGrid;\n\n    /**\n     * Updates the grid's dimensions as specified\n     *\n     * @param {Partial} dimensions The new grid dimensions\n     * @returns {IGrid} The grid instance\n     */\n    updateDimensions(dimensions: Partial): IGrid;\n\n    /**\n     * Updates the ranges on the grid's scales based on the grid's configured dimensions\n     *\n     * @returns {IGrid} The grid instance\n     */\n    updateRanges(): IGrid;\n\n    /**\n     * Builds the grid's plugins\n     *\n     * @returns {IChartPlugin[]} The set of generated plugins\n     */\n    buildPlugins(chart: IChart): IChartPlugin[];\n}\n\n/**\n * Interface for a d3 axis entity\n */\nexport interface IAxis {\n    /** The d3 group element for the axis label */\n    labelGroup: D3Selection;\n    /** The d3 group element for the axis ticks */\n    tickGroup: D3Selection;\n    /** The d3 group element for the axis */\n    group: D3Selection;\n    /** The d3 axis */\n    axis: Axis;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IBorders.html":{"url":"interfaces/IBorders.html","title":"interface - IBorders","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IBorders\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/types.ts\n        \n\n            \n                Description\n            \n            \n                Interface for defining the SVGElements forming the top, right, bottom, and left borders of an entity\n\n            \n\n            \n                Extends\n            \n            \n                        IAllAround\n            \n\n\n\n\n    \n\n\n    \n        import { BaseType } from \"d3\";\nimport { Axis } from \"d3-axis\";\nimport { Selection } from \"d3-selection\";\nimport { Subject } from \"rxjs\";\n\nimport { EventBus } from \"../common/event-bus\";\nimport { Lasagna } from \"../common/lasagna\";\nimport { ScalesIndex } from \"../common/scales/types\";\nimport { D3Selection, IChart, IChartEvent, IChartPlugin } from \"../common/types\";\n\n/**\n * Interface for defining aspects of the top, right, bottom, and left sides of a grid\n */\nexport interface IAllAround {\n    /** Object defining aspects of the top of an entity */\n    top: T;\n    /** Object defining aspects of the right side of an entity */\n    right: T;\n    /** Object defining aspects of the bottom of an entity */\n    bottom: T;\n    /** Object defining aspects of the left side of an entity */\n    left: T;\n}\n\n/**\n * The width and height of an grid\n */\nexport interface IDimensions {\n    width: number;\n    height: number;\n}\n\n/**\n * Configuration of grid dimensions\n */\nexport interface IDimensionConfig {\n    /** The top, right, bottom, and left margin sizes in pixels */\n    margin: IAllAround;\n    /** The top, right, bottom, and left padding sizes in pixels */\n    padding: IAllAround;\n    /** Sets whether the grid uses the chart's container to determine its width */\n    autoWidth: boolean;\n    /** Sets whether the grid uses the chart's container to determine its height */\n    autoHeight: boolean;\n    /** Set of booleans indicating whether a specific margin will be recalculated on chart dimension updates */\n    marginLocked?: IAllAround;\n    /**\n     * Sets the grid's width. Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid width\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    width(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- excluding margins.\n     *\n     * @returns {number} The grid's width\n     */\n    width(): number;\n    /**\n     * Sets the grid's height. Note: 'autoHeight' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid height\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    height(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- excluding margins.\n     *\n     * @returns {number} The grid's height\n     */\n    height(): number;\n    /**\n     * Sets the grid's width by subtracting the grid's horizontal margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new width plus the grid's horizontal margins\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerWidth(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- including horizontal margins.\n     *\n     * @returns {number} The grid's width plus horizontal margins\n     */\n    outerWidth(): number;\n    /**\n     * Sets the grid's height by subtracting the grid's vertical margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new height plus the grid's vertical margins     *\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerHeight(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- including vertical margins.\n     *\n     * @returns {number} The grid's height plus vertical margins\n     */\n    outerHeight(): number;\n}\n\n/**\n * Interface for defining the SVGElements forming the top, right, bottom, and left borders of an entity\n */\nexport interface IBorders extends IAllAround {\n}\n\n/**\n * Configuration of grid borders\n */\nexport interface IBorderConfig {\n    /** The stroke color */\n    color?: string;\n    /** The thickness of the border */\n    width?: number;\n    /** The class name */\n    className?: string;\n    /** Boolean indicating whether the border should be visible */\n    visible?: boolean;\n}\n\nexport interface ITextOverflowArgs {\n    widthLimit: number;\n    horizontalPadding: number;\n    ellipsisWidth: number;\n}\n\n/** Type for tick overflow handler */\nexport type TextOverflowHandler = (textSelection: Selection, args: ITextOverflowArgs) => void;\n\n/** Interface representing the configuration for tick labels */\nexport interface ITickLabelConfig {\n    /**\n     * Padding for left and right sides of label used for calculating text overflow limits\n     * (number represents the padding on each side)\n     */\n    horizontalPadding: number;\n    /** Handler for text overflow. Set to 'undefined' to disable overflow handling */\n    overflowHandler?: TextOverflowHandler;\n    /**\n     * Setting this insures the label's width is smaller or equal to the provided number\n     */\n    maxWidth?: number;\n}\n\n/** Configuration of a grid axis */\nexport interface IAxisConfig {\n    /** Boolean indicating whether the axis should be visible */\n    visible: boolean;\n    /** The approximate number of ticks to display */\n    approximateTicks: number;\n    /** Boolean indicating whether grid ticks should be displayed */\n    gridTicks: boolean;\n    /** The length of the ticks in pixels */\n    tickSize: number;\n    /** Configuration for the tick labels */\n    tickLabel: ITickLabelConfig;\n    /** Sets whether to fit the grid margins to the axis labels */\n    fit: boolean;\n    /** Sets the axis padding */\n    padding: number;\n}\n\n/**\n * Basic grid configuration\n */\nexport interface IGridConfig {\n    /** Boolean indicating whether the grid will respond to mouse events */\n    interactive: boolean;\n    /** Configuration for the grid's dimensions */\n    dimension: IDimensionConfig;\n    /** Configuration for the grid's borders */\n    borders: IAllAround;\n    /** String indicating the desired cursor style */\n    cursor: string;\n    /** Set to true to disable the render area height correction */\n    disableRenderAreaHeightCorrection?: boolean;\n    /** Set to true to disable the render area width correction */\n    disableRenderAreaWidthCorrection?: boolean;\n}\n\n/**\n * Configuration for an XYGrid\n */\nexport interface IXYGridConfig extends IGridConfig {\n    /** The IAllAround value for the grid's axis configurations */\n    axis: IAllAround;\n\n    /**\n     * Add interaction line and label plugins automatically\n     * Note: This was added to prevent a breaking change. We should avoid this kind of option in future\n     * versions of IXYGridConfig because ideally all plugins should be added manually (NUI-3304).\n     */\n    interactionPlugins: boolean;\n}\n\n/**\n * The basic interface for a grid's dimensions, scaling, interaction, and borders\n *\n * @interface\n */\nexport interface IGrid {\n    /** The grid scales\n     *\n     * @type {ScalesIndex}\n     */\n    scales: ScalesIndex;\n\n    /**\n     * Subject for indicating that the chart's dimensions should be updated\n     */\n    updateChartDimensionsSubject?: Subject;\n\n    /**\n     * Chart event bus\n     */\n    eventBus: EventBus;\n\n    /**\n     * Provides access to the grid's layering mechanism\n     *\n     * @returns {Lasagna} The grid's layering mechanism\n     */\n    getLasagna(): Lasagna;\n\n    /**\n     * Provides access to the grid's interactive area\n     *\n     * @returns {D3Selection} The grid's interactive area\n     */\n    getInteractiveArea(): D3Selection;\n\n    /**\n     * getter for the grid's target d3 selection\n     *\n     * @returns {D3Selection} The grid's target d3 selection\n     */\n    target(): D3Selection;\n\n    /**\n     * setter for the grid's target d3 selection\n     *\n     * @param {D3Selection} [target] The grid's new target d3 selection\n     * @returns {IGrid} The grid instance\n     */\n    target(target: D3Selection): IGrid;\n    target(target: D3Selection): D3Selection | IGrid;\n\n    /**\n     * getter for the grid configuration\n     *\n     * @returns {IGridConfig} The grid configuration\n     */\n    config(): IGridConfig;\n\n    /**\n     * setter for the grid configuration\n     *\n     * @param {IGridConfig} config The new grid configuration\n     * @returns {this} The grid instance\n     */\n    config(config: IGridConfig): this;\n\n    /**\n     * Builds the grid's rendered elements\n     *\n     * @returns {IGrid} The grid instance\n     */\n    build(): IGrid;\n\n    /**\n     * Updates the grid's rendered elements based on the current scales and configuration\n     *\n     * @returns {IGrid} The grid instance\n     */\n    update(): IGrid;\n\n    /**\n     * Updates the grid's dimensions as specified\n     *\n     * @param {Partial} dimensions The new grid dimensions\n     * @returns {IGrid} The grid instance\n     */\n    updateDimensions(dimensions: Partial): IGrid;\n\n    /**\n     * Updates the ranges on the grid's scales based on the grid's configured dimensions\n     *\n     * @returns {IGrid} The grid instance\n     */\n    updateRanges(): IGrid;\n\n    /**\n     * Builds the grid's plugins\n     *\n     * @returns {IChartPlugin[]} The set of generated plugins\n     */\n    buildPlugins(chart: IChart): IChartPlugin[];\n}\n\n/**\n * Interface for a d3 axis entity\n */\nexport interface IAxis {\n    /** The d3 group element for the axis label */\n    labelGroup: D3Selection;\n    /** The d3 group element for the axis ticks */\n    tickGroup: D3Selection;\n    /** The d3 group element for the axis */\n    group: D3Selection;\n    /** The d3 axis */\n    axis: Axis;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IChart.html":{"url":"interfaces/IChart.html","title":"interface - IChart","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IChart\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        target\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    addPlugin\n                                \n                                \n                                    build\n                                \n                                \n                                    destroy\n                                \n                                \n                                    getDataManager\n                                \n                                \n                                    getEventBus\n                                \n                                \n                                    getGrid\n                                \n                                \n                                    getRenderEngine\n                                \n                                \n                                        Optional\n                                    removePlugin\n                                \n                                \n                                    setSeriesStates\n                                \n                                \n                                    update\n                                \n                                \n                                    updateDimensions\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addPlugin\n                        \n                        \n                    \n                \n            \n            \n                \naddPlugin(plugin: IChartPlugin)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:203\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    plugin\n                                    \n                                                IChartPlugin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            build\n                        \n                        \n                    \n                \n            \n            \n                \nbuild(element: HTMLElement)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:205\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    element\n                                    \n                                            HTMLElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \ndestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:209\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getDataManager\n                        \n                        \n                    \n                \n            \n            \n                \ngetDataManager()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:200\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     DataManager\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventBus\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventBus()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:199\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     EventBus\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getGrid\n                        \n                        \n                    \n                \n            \n            \n                \ngetGrid()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:202\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         IGrid\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getRenderEngine\n                        \n                        \n                    \n                \n            \n            \n                \ngetRenderEngine()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:201\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     RenderEngine\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Optional\n                            removePlugin\n                        \n                        \n                    \n                \n            \n            \n                \nremovePlugin(classRef)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:204\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    classRef\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setSeriesStates\n                        \n                        \n                    \n                \n            \n            \n                \nsetSeriesStates(renderStateData: IRenderStateData[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:208\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderStateData\n                                    \n                                                IRenderStateData[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(seriesSet: IChartSeries[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:206\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    seriesSet\n                                    \n                                                IChartSeries[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \nupdateDimensions()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:207\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        target\n                                    \n                                \n                                \n                                    \n                                        target:         D3Selection\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         D3Selection\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IChartAssist.html":{"url":"interfaces/IChartAssist.html","title":"interface - IChartAssist","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IChartAssist\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/chart-assists/types.ts\n        \n\n            \n                Description\n            \n            \n                Interface representing an assistant that aids in chart usage\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getHighlightedValue\n                                \n                                \n                                    getVisibleSeriesWithLegend\n                                \n                                \n                                    update\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHighlightedValue\n                        \n                        \n                    \n                \n            \n            \n                \ngetHighlightedValue(chartSeries: IChartSeries, scaleKey: string, formatterName?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/types.ts:34\n                \n            \n\n\n            \n                \n                    Gets the current highlighted value for the specified series\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    chartSeries\n                                    \n                                                IChartSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The chart series to get the highlighted value for\n\n                                    \n                                \n                                \n                                    scaleKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The key for the datapoint value scale\n\n                                    \n                                \n                                \n                                    formatterName\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The name of the formatter if a custom formatter name is set on the scale\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | number | undefined\n\n                    \n                    \n                        The highlighted value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getVisibleSeriesWithLegend\n                        \n                        \n                    \n                \n            \n            \n                \ngetVisibleSeriesWithLegend()\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/types.ts:39\n                \n            \n\n\n            \n                \n                    Returns visible series that are represented by a legend\n\n\n                    \n                        Returns :     IChartAssistSeries[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(inputSeriesSet: IChartAssistSeries[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/types.ts:23\n                \n            \n\n\n            \n                \n                    Updates the series set for the chart assist's associated chart\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    inputSeriesSet\n                                    \n                                            IChartAssistSeries[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The updated set of series\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { RenderState } from \"../../renderers/types\";\nimport { IAccessors, IChart, IChartAssistSeries, IChartSeries, IRenderStateData } from \"../common/types\";\n\n/**\n * Interface representing the spark chart assist's\n * association between one of its charts and a series set\n */\nexport interface ISpark {\n    chartSeriesSet: IChartAssistSeries[];\n    id?: string;\n    chart?: IChart;\n}\n\n/**\n * Interface representing an assistant that aids in chart usage\n */\nexport interface IChartAssist {\n    /**\n     * Updates the series set for the chart assist's associated chart\n     *\n     * @param inputSeriesSet The updated set of series\n     */\n    update(inputSeriesSet: IChartAssistSeries[]): void;\n\n    /**\n     * Gets the current highlighted value for the specified series\n     *\n     * @param {IChartSeries} chartSeries The chart series to get the highlighted value for\n     * @param {string} scaleKey The key for the datapoint value scale\n     * @param {string} [formatterName] The name of the formatter if a custom formatter name is set on the scale\n     *\n     * @returns {string} The highlighted value\n     */\n    getHighlightedValue(chartSeries: IChartSeries, scaleKey: string, formatterName?: string): string | number | undefined;\n\n    /**\n     * Returns visible series that are represented by a legend\n     */\n    getVisibleSeriesWithLegend(): IChartAssistSeries[];\n}\n\n/** Event types that can be emitted from a chart assist */\nexport enum ChartAssistEventType {\n    ToggleSeries = \"ToggleSeries\",\n    ResetVisibleSeries = \"ResetVisibleSeries\",\n    EmphasizeSeries = \"EmphasizeSeries\",\n}\n\n/** Interface for chart assist events */\nexport interface IChartAssistEvent {\n    type: ChartAssistEventType;\n    payload: any;\n}\n\n/**\n * Legend interaction assist uses this class to present the state that consists of emphasisState+visible as one state\n */\nexport class ChartAssistRenderStateData implements IRenderStateData {\n    constructor(public seriesId: string,\n                public series: IChartAssistSeries,\n                public emphasisState = RenderState.default,\n                public visible = true) {\n    }\n\n    get state(): RenderState {\n        return this.visible ? this.emphasisState : RenderState.hidden;\n    }\n}\n\nexport interface IRenderStatesIndex {\n    [seriesId: string]: ChartAssistRenderStateData;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IChartAssistEvent.html":{"url":"interfaces/IChartAssistEvent.html","title":"interface - IChartAssistEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IChartAssistEvent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/chart-assists/types.ts\n        \n\n            \n                Description\n            \n            \n                Interface for chart assist events \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        payload\n                                \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        payload\n                                    \n                                \n                                \n                                    \n                                        payload:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         ChartAssistEventType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ChartAssistEventType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { RenderState } from \"../../renderers/types\";\nimport { IAccessors, IChart, IChartAssistSeries, IChartSeries, IRenderStateData } from \"../common/types\";\n\n/**\n * Interface representing the spark chart assist's\n * association between one of its charts and a series set\n */\nexport interface ISpark {\n    chartSeriesSet: IChartAssistSeries[];\n    id?: string;\n    chart?: IChart;\n}\n\n/**\n * Interface representing an assistant that aids in chart usage\n */\nexport interface IChartAssist {\n    /**\n     * Updates the series set for the chart assist's associated chart\n     *\n     * @param inputSeriesSet The updated set of series\n     */\n    update(inputSeriesSet: IChartAssistSeries[]): void;\n\n    /**\n     * Gets the current highlighted value for the specified series\n     *\n     * @param {IChartSeries} chartSeries The chart series to get the highlighted value for\n     * @param {string} scaleKey The key for the datapoint value scale\n     * @param {string} [formatterName] The name of the formatter if a custom formatter name is set on the scale\n     *\n     * @returns {string} The highlighted value\n     */\n    getHighlightedValue(chartSeries: IChartSeries, scaleKey: string, formatterName?: string): string | number | undefined;\n\n    /**\n     * Returns visible series that are represented by a legend\n     */\n    getVisibleSeriesWithLegend(): IChartAssistSeries[];\n}\n\n/** Event types that can be emitted from a chart assist */\nexport enum ChartAssistEventType {\n    ToggleSeries = \"ToggleSeries\",\n    ResetVisibleSeries = \"ResetVisibleSeries\",\n    EmphasizeSeries = \"EmphasizeSeries\",\n}\n\n/** Interface for chart assist events */\nexport interface IChartAssistEvent {\n    type: ChartAssistEventType;\n    payload: any;\n}\n\n/**\n * Legend interaction assist uses this class to present the state that consists of emphasisState+visible as one state\n */\nexport class ChartAssistRenderStateData implements IRenderStateData {\n    constructor(public seriesId: string,\n                public series: IChartAssistSeries,\n                public emphasisState = RenderState.default,\n                public visible = true) {\n    }\n\n    get state(): RenderState {\n        return this.visible ? this.emphasisState : RenderState.hidden;\n    }\n}\n\nexport interface IRenderStatesIndex {\n    [seriesId: string]: ChartAssistRenderStateData;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IChartAssistSeries.html":{"url":"interfaces/IChartAssistSeries.html","title":"interface - IChartAssistSeries","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IChartAssistSeries\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IChartSeries\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        preprocess\n                                \n                                \n                                            Optional\n                                        renderState\n                                \n                                \n                                            Optional\n                                        showInLegend\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        preprocess\n                                    \n                                \n                                \n                                    \n                                        preprocess:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        renderState\n                                    \n                                \n                                \n                                    \n                                        renderState:         RenderState\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         RenderState\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        showInLegend\n                                    \n                                \n                                \n                                    \n                                        showInLegend:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IChartEvent.html":{"url":"interfaces/IChartEvent.html","title":"interface - IChartEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IChartEvent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        broadcast\n                                \n                                \n                                        data\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        broadcast\n                                    \n                                \n                                \n                                    \n                                        broadcast:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IChartMarker.html":{"url":"interfaces/IChartMarker.html","title":"interface - IChartMarker","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IChartMarker\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getSvg\n                                \n                                \n                                    setColor\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getSvg\n                        \n                        \n                    \n                \n            \n            \n                \ngetSvg()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:193\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setColor\n                        \n                        \n                    \n                \n            \n            \n                \nsetColor(color: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:194\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    color\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IChartPalette.html":{"url":"interfaces/IChartPalette.html","title":"interface - IChartPalette","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IChartPalette\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        backgroundColors\n                                \n                                \n                                        standardColors\n                                \n                                \n                                        textColors\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        backgroundColors\n                                    \n                                \n                                \n                                    \n                                        backgroundColors:         IValueProvider\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IValueProvider\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        standardColors\n                                    \n                                \n                                \n                                    \n                                        standardColors:         IValueProvider\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IValueProvider\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        textColors\n                                    \n                                \n                                \n                                    \n                                        textColors:         IValueProvider\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IValueProvider\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IChartPlugin.html":{"url":"interfaces/IChartPlugin.html","title":"interface - IChartPlugin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IChartPlugin\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                Interface defining a chart plugin \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        chart\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    destroy\n                                \n                                \n                                    initialize\n                                \n                                \n                                    update\n                                \n                                \n                                    updateDimensions\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \ndestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:234\n                \n            \n\n\n            \n                \n                    Perform plugin cleanup - Invoked automatically on chart destruction \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \ninitialize()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:225\n                \n            \n\n\n            \n                \n                    Initialize the plugin - Invoked automatically on chart initialization \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:228\n                \n            \n\n\n            \n                \n                    Update the plugin - Invoked automatically on chart update \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \nupdateDimensions()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:231\n                \n            \n\n\n            \n                \n                    Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        chart\n                                    \n                                \n                                \n                                    \n                                        chart:         IChart\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IChart\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Associated chart - set automatically on chart initialization\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IChartSeries.html":{"url":"interfaces/IChartSeries.html","title":"interface - IChartSeries","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IChartSeries\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                The set of elements required for a chart to visualize some data\n\n            \n\n            \n                Extends\n            \n            \n                        IDataSeries\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        renderer\n                                \n                                \n                                        scales\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        renderer\n                                    \n                                \n                                \n                                    \n                                        renderer:         Renderer\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Renderer\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The renderer to be used for visualizing the data \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scales\n                                    \n                                \n                                \n                                    \n                                        scales:         Scales\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Scales\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Information about how chart data should conform to the drawable area.\nGrids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\nuses 'x' and 'y' as the keys for its scales.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IChartViewStatusEventPayload.html":{"url":"interfaces/IChartViewStatusEventPayload.html","title":"interface - IChartViewStatusEventPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IChartViewStatusEventPayload\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                Payload for the chart's visibility status in relation to the nearest scrollable parent\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        isChartInView\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isChartInView\n                                    \n                                \n                                \n                                    \n                                        isChartInView:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Indicates whether at least one pixel of the chart's parent element has\nintersected with the visible area of its nearest scrollable parent\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDataAccessors.html":{"url":"interfaces/IDataAccessors.html","title":"interface - IDataAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IDataAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        DataAccessor | undefined\n\n                    \n                \n                        \n                            \n                                Defined in src/core/common/types.ts:135\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDataPoint.html":{"url":"interfaces/IDataPoint.html","title":"interface - IDataPoint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IDataPoint\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                Information about a data point\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                                \n                                        dataSeries\n                                \n                                \n                                        index\n                                \n                                \n                                            Optional\n                                        position\n                                \n                                \n                                        seriesId\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Data \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dataSeries\n                                    \n                                \n                                \n                                    \n                                        dataSeries:         IDataSeries\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDataSeries\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Series \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        index\n                                    \n                                \n                                \n                                    \n                                        index:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Data index \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        position\n                                    \n                                \n                                \n                                    \n                                        position:         IPosition\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IPosition\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Position \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        seriesId\n                                    \n                                \n                                \n                                    \n                                        seriesId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Series identifier \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDataPointsPayload.html":{"url":"interfaces/IDataPointsPayload.html","title":"interface - IDataPointsPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IDataPointsPayload\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                Collection of one or more data points as a dictionary of seriesId to IDataPoint\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [seriesId: string]:        IDataPoint\n\n                    \n                \n                        \n                            \n                                Defined in src/core/common/types.ts:314\n                            \n                        \n                \n                    \n                        Series id as key to highlighted data point \n\n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDataSeries.html":{"url":"interfaces/IDataSeries.html","title":"interface - IDataSeries","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IDataSeries\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                A set of data to visualize on the chart\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        accessors\n                                \n                                \n                                        data\n                                \n                                \n                                        id\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in src/core/common/types.ts:166\n                            \n                        \n                \n                    \n                        Allow any properties to be stored on this object to facilitate the transfer of data from APIs \n\n                    \n                \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accessors\n                                    \n                                \n                                \n                                    \n                                        accessors:     A\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     A\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Accessors describing the data \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:     D[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     D[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\nrenderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\ndata point properties directly, but usually through accessors.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The series identifier \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDimensionConfig.html":{"url":"interfaces/IDimensionConfig.html","title":"interface - IDimensionConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IDimensionConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/types.ts\n        \n\n            \n                Description\n            \n            \n                Configuration of grid dimensions\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        autoHeight\n                                \n                                \n                                        autoWidth\n                                \n                                \n                                        margin\n                                \n                                \n                                            Optional\n                                        marginLocked\n                                \n                                \n                                        padding\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    height\n                                \n                                \n                                    height\n                                \n                                \n                                    outerHeight\n                                \n                                \n                                    outerHeight\n                                \n                                \n                                    outerWidth\n                                \n                                \n                                    outerWidth\n                                \n                                \n                                    width\n                                \n                                \n                                    width\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            height\n                        \n                        \n                    \n                \n            \n            \n                \nheight(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:66\n                \n            \n\n\n            \n                \n                    Sets the grid's height. Note: 'autoHeight' must be set to false for this setting to have an effect.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new grid height\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IDimensionConfig\n\n                    \n                    \n                        The resulting dimension config\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            height\n                        \n                        \n                    \n                \n            \n            \n                \nheight()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:72\n                \n            \n\n\n            \n                \n                    Gets the grid's height -- excluding margins.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The grid's height\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            outerHeight\n                        \n                        \n                    \n                \n            \n            \n                \nouterHeight(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:94\n                \n            \n\n\n            \n                \n                    Sets the grid's height by subtracting the grid's vertical margins from the specified value.\nNote: 'autoWidth' must be set to false for this setting to have an effect.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new height plus the grid's vertical margins     *\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IDimensionConfig\n\n                    \n                    \n                        The resulting dimension config\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            outerHeight\n                        \n                        \n                    \n                \n            \n            \n                \nouterHeight()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:100\n                \n            \n\n\n            \n                \n                    Gets the grid's height -- including vertical margins.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The grid's height plus vertical margins\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            outerWidth\n                        \n                        \n                    \n                \n            \n            \n                \nouterWidth(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:80\n                \n            \n\n\n            \n                \n                    Sets the grid's width by subtracting the grid's horizontal margins from the specified value.\nNote: 'autoWidth' must be set to false for this setting to have an effect.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new width plus the grid's horizontal margins\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IDimensionConfig\n\n                    \n                    \n                        The resulting dimension config\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            outerWidth\n                        \n                        \n                    \n                \n            \n            \n                \nouterWidth()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:86\n                \n            \n\n\n            \n                \n                    Gets the grid's width -- including horizontal margins.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The grid's width plus horizontal margins\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            width\n                        \n                        \n                    \n                \n            \n            \n                \nwidth(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:53\n                \n            \n\n\n            \n                \n                    Sets the grid's width. Note: 'autoWidth' must be set to false for this setting to have an effect.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new grid width\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IDimensionConfig\n\n                    \n                    \n                        The resulting dimension config\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            width\n                        \n                        \n                    \n                \n            \n            \n                \nwidth()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:59\n                \n            \n\n\n            \n                \n                    Gets the grid's width -- excluding margins.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The grid's width\n\n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        autoHeight\n                                    \n                                \n                                \n                                    \n                                        autoHeight:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Sets whether the grid uses the chart's container to determine its height \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        autoWidth\n                                    \n                                \n                                \n                                    \n                                        autoWidth:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Sets whether the grid uses the chart's container to determine its width \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        margin\n                                    \n                                \n                                \n                                    \n                                        margin:         IAllAround\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IAllAround\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The top, right, bottom, and left margin sizes in pixels \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        marginLocked\n                                    \n                                \n                                \n                                    \n                                        marginLocked:         IAllAround\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IAllAround\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set of booleans indicating whether a specific margin will be recalculated on chart dimension updates \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        padding\n                                    \n                                \n                                \n                                    \n                                        padding:         IAllAround\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IAllAround\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The top, right, bottom, and left padding sizes in pixels \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { BaseType } from \"d3\";\nimport { Axis } from \"d3-axis\";\nimport { Selection } from \"d3-selection\";\nimport { Subject } from \"rxjs\";\n\nimport { EventBus } from \"../common/event-bus\";\nimport { Lasagna } from \"../common/lasagna\";\nimport { ScalesIndex } from \"../common/scales/types\";\nimport { D3Selection, IChart, IChartEvent, IChartPlugin } from \"../common/types\";\n\n/**\n * Interface for defining aspects of the top, right, bottom, and left sides of a grid\n */\nexport interface IAllAround {\n    /** Object defining aspects of the top of an entity */\n    top: T;\n    /** Object defining aspects of the right side of an entity */\n    right: T;\n    /** Object defining aspects of the bottom of an entity */\n    bottom: T;\n    /** Object defining aspects of the left side of an entity */\n    left: T;\n}\n\n/**\n * The width and height of an grid\n */\nexport interface IDimensions {\n    width: number;\n    height: number;\n}\n\n/**\n * Configuration of grid dimensions\n */\nexport interface IDimensionConfig {\n    /** The top, right, bottom, and left margin sizes in pixels */\n    margin: IAllAround;\n    /** The top, right, bottom, and left padding sizes in pixels */\n    padding: IAllAround;\n    /** Sets whether the grid uses the chart's container to determine its width */\n    autoWidth: boolean;\n    /** Sets whether the grid uses the chart's container to determine its height */\n    autoHeight: boolean;\n    /** Set of booleans indicating whether a specific margin will be recalculated on chart dimension updates */\n    marginLocked?: IAllAround;\n    /**\n     * Sets the grid's width. Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid width\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    width(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- excluding margins.\n     *\n     * @returns {number} The grid's width\n     */\n    width(): number;\n    /**\n     * Sets the grid's height. Note: 'autoHeight' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid height\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    height(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- excluding margins.\n     *\n     * @returns {number} The grid's height\n     */\n    height(): number;\n    /**\n     * Sets the grid's width by subtracting the grid's horizontal margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new width plus the grid's horizontal margins\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerWidth(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- including horizontal margins.\n     *\n     * @returns {number} The grid's width plus horizontal margins\n     */\n    outerWidth(): number;\n    /**\n     * Sets the grid's height by subtracting the grid's vertical margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new height plus the grid's vertical margins     *\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerHeight(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- including vertical margins.\n     *\n     * @returns {number} The grid's height plus vertical margins\n     */\n    outerHeight(): number;\n}\n\n/**\n * Interface for defining the SVGElements forming the top, right, bottom, and left borders of an entity\n */\nexport interface IBorders extends IAllAround {\n}\n\n/**\n * Configuration of grid borders\n */\nexport interface IBorderConfig {\n    /** The stroke color */\n    color?: string;\n    /** The thickness of the border */\n    width?: number;\n    /** The class name */\n    className?: string;\n    /** Boolean indicating whether the border should be visible */\n    visible?: boolean;\n}\n\nexport interface ITextOverflowArgs {\n    widthLimit: number;\n    horizontalPadding: number;\n    ellipsisWidth: number;\n}\n\n/** Type for tick overflow handler */\nexport type TextOverflowHandler = (textSelection: Selection, args: ITextOverflowArgs) => void;\n\n/** Interface representing the configuration for tick labels */\nexport interface ITickLabelConfig {\n    /**\n     * Padding for left and right sides of label used for calculating text overflow limits\n     * (number represents the padding on each side)\n     */\n    horizontalPadding: number;\n    /** Handler for text overflow. Set to 'undefined' to disable overflow handling */\n    overflowHandler?: TextOverflowHandler;\n    /**\n     * Setting this insures the label's width is smaller or equal to the provided number\n     */\n    maxWidth?: number;\n}\n\n/** Configuration of a grid axis */\nexport interface IAxisConfig {\n    /** Boolean indicating whether the axis should be visible */\n    visible: boolean;\n    /** The approximate number of ticks to display */\n    approximateTicks: number;\n    /** Boolean indicating whether grid ticks should be displayed */\n    gridTicks: boolean;\n    /** The length of the ticks in pixels */\n    tickSize: number;\n    /** Configuration for the tick labels */\n    tickLabel: ITickLabelConfig;\n    /** Sets whether to fit the grid margins to the axis labels */\n    fit: boolean;\n    /** Sets the axis padding */\n    padding: number;\n}\n\n/**\n * Basic grid configuration\n */\nexport interface IGridConfig {\n    /** Boolean indicating whether the grid will respond to mouse events */\n    interactive: boolean;\n    /** Configuration for the grid's dimensions */\n    dimension: IDimensionConfig;\n    /** Configuration for the grid's borders */\n    borders: IAllAround;\n    /** String indicating the desired cursor style */\n    cursor: string;\n    /** Set to true to disable the render area height correction */\n    disableRenderAreaHeightCorrection?: boolean;\n    /** Set to true to disable the render area width correction */\n    disableRenderAreaWidthCorrection?: boolean;\n}\n\n/**\n * Configuration for an XYGrid\n */\nexport interface IXYGridConfig extends IGridConfig {\n    /** The IAllAround value for the grid's axis configurations */\n    axis: IAllAround;\n\n    /**\n     * Add interaction line and label plugins automatically\n     * Note: This was added to prevent a breaking change. We should avoid this kind of option in future\n     * versions of IXYGridConfig because ideally all plugins should be added manually (NUI-3304).\n     */\n    interactionPlugins: boolean;\n}\n\n/**\n * The basic interface for a grid's dimensions, scaling, interaction, and borders\n *\n * @interface\n */\nexport interface IGrid {\n    /** The grid scales\n     *\n     * @type {ScalesIndex}\n     */\n    scales: ScalesIndex;\n\n    /**\n     * Subject for indicating that the chart's dimensions should be updated\n     */\n    updateChartDimensionsSubject?: Subject;\n\n    /**\n     * Chart event bus\n     */\n    eventBus: EventBus;\n\n    /**\n     * Provides access to the grid's layering mechanism\n     *\n     * @returns {Lasagna} The grid's layering mechanism\n     */\n    getLasagna(): Lasagna;\n\n    /**\n     * Provides access to the grid's interactive area\n     *\n     * @returns {D3Selection} The grid's interactive area\n     */\n    getInteractiveArea(): D3Selection;\n\n    /**\n     * getter for the grid's target d3 selection\n     *\n     * @returns {D3Selection} The grid's target d3 selection\n     */\n    target(): D3Selection;\n\n    /**\n     * setter for the grid's target d3 selection\n     *\n     * @param {D3Selection} [target] The grid's new target d3 selection\n     * @returns {IGrid} The grid instance\n     */\n    target(target: D3Selection): IGrid;\n    target(target: D3Selection): D3Selection | IGrid;\n\n    /**\n     * getter for the grid configuration\n     *\n     * @returns {IGridConfig} The grid configuration\n     */\n    config(): IGridConfig;\n\n    /**\n     * setter for the grid configuration\n     *\n     * @param {IGridConfig} config The new grid configuration\n     * @returns {this} The grid instance\n     */\n    config(config: IGridConfig): this;\n\n    /**\n     * Builds the grid's rendered elements\n     *\n     * @returns {IGrid} The grid instance\n     */\n    build(): IGrid;\n\n    /**\n     * Updates the grid's rendered elements based on the current scales and configuration\n     *\n     * @returns {IGrid} The grid instance\n     */\n    update(): IGrid;\n\n    /**\n     * Updates the grid's dimensions as specified\n     *\n     * @param {Partial} dimensions The new grid dimensions\n     * @returns {IGrid} The grid instance\n     */\n    updateDimensions(dimensions: Partial): IGrid;\n\n    /**\n     * Updates the ranges on the grid's scales based on the grid's configured dimensions\n     *\n     * @returns {IGrid} The grid instance\n     */\n    updateRanges(): IGrid;\n\n    /**\n     * Builds the grid's plugins\n     *\n     * @returns {IChartPlugin[]} The set of generated plugins\n     */\n    buildPlugins(chart: IChart): IChartPlugin[];\n}\n\n/**\n * Interface for a d3 axis entity\n */\nexport interface IAxis {\n    /** The d3 group element for the axis label */\n    labelGroup: D3Selection;\n    /** The d3 group element for the axis ticks */\n    tickGroup: D3Selection;\n    /** The d3 group element for the axis */\n    group: D3Selection;\n    /** The d3 axis */\n    axis: Axis;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDimensions.html":{"url":"interfaces/IDimensions.html","title":"interface - IDimensions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IDimensions\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/types.ts\n        \n\n            \n                Description\n            \n            \n                The width and height of an grid\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        height\n                                \n                                \n                                        width\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                    \n                                \n                                \n                                    \n                                        height:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                    \n                                \n                                \n                                    \n                                        width:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BaseType } from \"d3\";\nimport { Axis } from \"d3-axis\";\nimport { Selection } from \"d3-selection\";\nimport { Subject } from \"rxjs\";\n\nimport { EventBus } from \"../common/event-bus\";\nimport { Lasagna } from \"../common/lasagna\";\nimport { ScalesIndex } from \"../common/scales/types\";\nimport { D3Selection, IChart, IChartEvent, IChartPlugin } from \"../common/types\";\n\n/**\n * Interface for defining aspects of the top, right, bottom, and left sides of a grid\n */\nexport interface IAllAround {\n    /** Object defining aspects of the top of an entity */\n    top: T;\n    /** Object defining aspects of the right side of an entity */\n    right: T;\n    /** Object defining aspects of the bottom of an entity */\n    bottom: T;\n    /** Object defining aspects of the left side of an entity */\n    left: T;\n}\n\n/**\n * The width and height of an grid\n */\nexport interface IDimensions {\n    width: number;\n    height: number;\n}\n\n/**\n * Configuration of grid dimensions\n */\nexport interface IDimensionConfig {\n    /** The top, right, bottom, and left margin sizes in pixels */\n    margin: IAllAround;\n    /** The top, right, bottom, and left padding sizes in pixels */\n    padding: IAllAround;\n    /** Sets whether the grid uses the chart's container to determine its width */\n    autoWidth: boolean;\n    /** Sets whether the grid uses the chart's container to determine its height */\n    autoHeight: boolean;\n    /** Set of booleans indicating whether a specific margin will be recalculated on chart dimension updates */\n    marginLocked?: IAllAround;\n    /**\n     * Sets the grid's width. Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid width\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    width(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- excluding margins.\n     *\n     * @returns {number} The grid's width\n     */\n    width(): number;\n    /**\n     * Sets the grid's height. Note: 'autoHeight' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid height\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    height(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- excluding margins.\n     *\n     * @returns {number} The grid's height\n     */\n    height(): number;\n    /**\n     * Sets the grid's width by subtracting the grid's horizontal margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new width plus the grid's horizontal margins\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerWidth(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- including horizontal margins.\n     *\n     * @returns {number} The grid's width plus horizontal margins\n     */\n    outerWidth(): number;\n    /**\n     * Sets the grid's height by subtracting the grid's vertical margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new height plus the grid's vertical margins     *\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerHeight(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- including vertical margins.\n     *\n     * @returns {number} The grid's height plus vertical margins\n     */\n    outerHeight(): number;\n}\n\n/**\n * Interface for defining the SVGElements forming the top, right, bottom, and left borders of an entity\n */\nexport interface IBorders extends IAllAround {\n}\n\n/**\n * Configuration of grid borders\n */\nexport interface IBorderConfig {\n    /** The stroke color */\n    color?: string;\n    /** The thickness of the border */\n    width?: number;\n    /** The class name */\n    className?: string;\n    /** Boolean indicating whether the border should be visible */\n    visible?: boolean;\n}\n\nexport interface ITextOverflowArgs {\n    widthLimit: number;\n    horizontalPadding: number;\n    ellipsisWidth: number;\n}\n\n/** Type for tick overflow handler */\nexport type TextOverflowHandler = (textSelection: Selection, args: ITextOverflowArgs) => void;\n\n/** Interface representing the configuration for tick labels */\nexport interface ITickLabelConfig {\n    /**\n     * Padding for left and right sides of label used for calculating text overflow limits\n     * (number represents the padding on each side)\n     */\n    horizontalPadding: number;\n    /** Handler for text overflow. Set to 'undefined' to disable overflow handling */\n    overflowHandler?: TextOverflowHandler;\n    /**\n     * Setting this insures the label's width is smaller or equal to the provided number\n     */\n    maxWidth?: number;\n}\n\n/** Configuration of a grid axis */\nexport interface IAxisConfig {\n    /** Boolean indicating whether the axis should be visible */\n    visible: boolean;\n    /** The approximate number of ticks to display */\n    approximateTicks: number;\n    /** Boolean indicating whether grid ticks should be displayed */\n    gridTicks: boolean;\n    /** The length of the ticks in pixels */\n    tickSize: number;\n    /** Configuration for the tick labels */\n    tickLabel: ITickLabelConfig;\n    /** Sets whether to fit the grid margins to the axis labels */\n    fit: boolean;\n    /** Sets the axis padding */\n    padding: number;\n}\n\n/**\n * Basic grid configuration\n */\nexport interface IGridConfig {\n    /** Boolean indicating whether the grid will respond to mouse events */\n    interactive: boolean;\n    /** Configuration for the grid's dimensions */\n    dimension: IDimensionConfig;\n    /** Configuration for the grid's borders */\n    borders: IAllAround;\n    /** String indicating the desired cursor style */\n    cursor: string;\n    /** Set to true to disable the render area height correction */\n    disableRenderAreaHeightCorrection?: boolean;\n    /** Set to true to disable the render area width correction */\n    disableRenderAreaWidthCorrection?: boolean;\n}\n\n/**\n * Configuration for an XYGrid\n */\nexport interface IXYGridConfig extends IGridConfig {\n    /** The IAllAround value for the grid's axis configurations */\n    axis: IAllAround;\n\n    /**\n     * Add interaction line and label plugins automatically\n     * Note: This was added to prevent a breaking change. We should avoid this kind of option in future\n     * versions of IXYGridConfig because ideally all plugins should be added manually (NUI-3304).\n     */\n    interactionPlugins: boolean;\n}\n\n/**\n * The basic interface for a grid's dimensions, scaling, interaction, and borders\n *\n * @interface\n */\nexport interface IGrid {\n    /** The grid scales\n     *\n     * @type {ScalesIndex}\n     */\n    scales: ScalesIndex;\n\n    /**\n     * Subject for indicating that the chart's dimensions should be updated\n     */\n    updateChartDimensionsSubject?: Subject;\n\n    /**\n     * Chart event bus\n     */\n    eventBus: EventBus;\n\n    /**\n     * Provides access to the grid's layering mechanism\n     *\n     * @returns {Lasagna} The grid's layering mechanism\n     */\n    getLasagna(): Lasagna;\n\n    /**\n     * Provides access to the grid's interactive area\n     *\n     * @returns {D3Selection} The grid's interactive area\n     */\n    getInteractiveArea(): D3Selection;\n\n    /**\n     * getter for the grid's target d3 selection\n     *\n     * @returns {D3Selection} The grid's target d3 selection\n     */\n    target(): D3Selection;\n\n    /**\n     * setter for the grid's target d3 selection\n     *\n     * @param {D3Selection} [target] The grid's new target d3 selection\n     * @returns {IGrid} The grid instance\n     */\n    target(target: D3Selection): IGrid;\n    target(target: D3Selection): D3Selection | IGrid;\n\n    /**\n     * getter for the grid configuration\n     *\n     * @returns {IGridConfig} The grid configuration\n     */\n    config(): IGridConfig;\n\n    /**\n     * setter for the grid configuration\n     *\n     * @param {IGridConfig} config The new grid configuration\n     * @returns {this} The grid instance\n     */\n    config(config: IGridConfig): this;\n\n    /**\n     * Builds the grid's rendered elements\n     *\n     * @returns {IGrid} The grid instance\n     */\n    build(): IGrid;\n\n    /**\n     * Updates the grid's rendered elements based on the current scales and configuration\n     *\n     * @returns {IGrid} The grid instance\n     */\n    update(): IGrid;\n\n    /**\n     * Updates the grid's dimensions as specified\n     *\n     * @param {Partial} dimensions The new grid dimensions\n     * @returns {IGrid} The grid instance\n     */\n    updateDimensions(dimensions: Partial): IGrid;\n\n    /**\n     * Updates the ranges on the grid's scales based on the grid's configured dimensions\n     *\n     * @returns {IGrid} The grid instance\n     */\n    updateRanges(): IGrid;\n\n    /**\n     * Builds the grid's plugins\n     *\n     * @returns {IChartPlugin[]} The set of generated plugins\n     */\n    buildPlugins(chart: IChart): IChartPlugin[];\n}\n\n/**\n * Interface for a d3 axis entity\n */\nexport interface IAxis {\n    /** The d3 group element for the axis label */\n    labelGroup: D3Selection;\n    /** The d3 group element for the axis ticks */\n    tickGroup: D3Selection;\n    /** The d3 group element for the axis */\n    group: D3Selection;\n    /** The d3 axis */\n    axis: Axis;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IElementPosition.html":{"url":"interfaces/IElementPosition.html","title":"interface - IElementPosition","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IElementPosition\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/types.ts\n        \n\n            \n                Description\n            \n            \n                Interface for defining an element's position \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        height\n                                \n                                \n                                        left\n                                \n                                \n                                        top\n                                \n                                \n                                        width\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                    \n                                \n                                \n                                    \n                                        height:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        left\n                                    \n                                \n                                \n                                    \n                                        left:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        top\n                                    \n                                \n                                \n                                    \n                                        top:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                    \n                                \n                                \n                                    \n                                        width:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ICoordinates, IInteractionPayload } from \"../common/types\";\n\n/**\n * Interface used for interaction values with scaleKey as key to a dictionary of scaleId to value. Typical scale keys are \"x\" and \"y\"\n */\nexport interface IInteractionValues {\n    [scaleKey: string]: { [scaleId: string]: any };\n}\n\n/**\n * Payload for an INTERACTION_VALUES_EVENT\n */\nexport interface IInteractionValuesPayload extends IInteractionPayload {\n    /** The values of the interaction */\n    values: IInteractionValues;\n}\n\n/**\n * Payload for an INTERACTION_COORDINATES_EVENT\n */\nexport interface IInteractionCoordinatesPayload extends IInteractionPayload {\n    /** The coordinates of an interaction */\n    coordinates: ICoordinates;\n}\n\n/** Interface for defining an element's position */\nexport interface IElementPosition {\n    top: number;\n    left: number;\n    width: number;\n    height: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IEnhancedLineCapConfig.html":{"url":"interfaces/IEnhancedLineCapConfig.html","title":"interface - IEnhancedLineCapConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IEnhancedLineCapConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/types.ts\n        \n\n            \n                Description\n            \n            \n                The configuration interface for the enhanced line caps \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        fill\n                                \n                                \n                                            Optional\n                                        radius\n                                \n                                \n                                            Optional\n                                        stroke\n                                \n                                \n                                            Optional\n                                        strokeWidth\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        fill\n                                    \n                                \n                                \n                                    \n                                        fill:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the fill color \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        radius\n                                    \n                                \n                                \n                                    \n                                        radius:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the radius in pixels \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stroke\n                                    \n                                \n                                \n                                    \n                                        stroke:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the stroke color \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        strokeWidth\n                                    \n                                \n                                \n                                    \n                                        strokeWidth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the stroke width in pixels \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { CurveFactory } from \"d3-shape\";\nimport { Subject } from \"rxjs\";\n\nimport { Renderer } from \"../core/common/renderer\";\nimport { Scales } from \"../core/common/scales/types\";\nimport { IAccessors, IDataSeries, IRenderContainers, IRendererConfig, IRendererEventPayload } from \"../core/common/types\";\n\nimport { IRectangleAccessors } from \"./accessors/rectangle-accessors\";\nimport { BarRenderer } from \"./bar/bar-renderer\";\nimport { ILineAccessors } from \"./line/line-accessors\";\nimport { LineRenderer } from \"./line/line-renderer\";\n\nexport enum RenderState {\n    hidden = \"hidden\",\n    deemphasized = \"deemphasized\",\n    emphasized = \"emphasized\",\n    default = \"default\",\n}\n\nexport enum RenderLayerName {\n    background = \"background\",\n    data = \"data\",\n    unclippedData = \"unclipped-data\",\n    foreground = \"foreground\",\n}\n\n/** The configuration interface for marker interaction */\nexport interface IMarkerInteractionConfig {\n    /** Enables mouse events on data point markers */\n    enabled: boolean;\n    /** Enables the pointer style mouse cursor when data point markers are hovered */\n    clickable?: boolean;\n}\n\n/** The configuration interface for the enhanced line caps */\nexport interface IEnhancedLineCapConfig {\n    /** Set the stroke color */\n    stroke?: string;\n    /** Set the stroke width in pixels */\n    strokeWidth?: number;\n    /** Set the fill color */\n    fill?: string;\n    /** Set the radius in pixels */\n    radius?: number;\n}\n\n/** The configuration interface for the line renderer */\nexport interface ILineRendererConfig extends IRendererConfig {\n    /** Set the width of the line in pixels */\n    strokeWidth?: number;\n    /** Set the stroke-dasharray of the line, e.g. \"1,1\", \"2,2\", etc. */\n    strokeStyle?: string;\n    /** Set the stroke-linecap of the line, e.g. \"round\" */\n    strokeLinecap?: string;\n    /** Set the d3 curve algorithm to be used for drawing the lines */\n    curveType?: CurveFactory;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. LineSelectSeriesInteractionStrategy */\n    interactionStrategy?: IHighlightStrategy;\n    /** Configure the interaction behavior for markers */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** Set whether enhanced line caps should be displayed */\n    useEnhancedLineCaps?: boolean;\n    /** Optionally configure enhanced line caps. Prerequisite: 'useEnhancedLineCaps' is set to true */\n    enhancedLineCap?: IEnhancedLineCapConfig;\n}\n\n/** The configuration interface for the bar renderer */\nexport interface IBarRendererConfig extends IRendererConfig {\n    /** Set the padding on both sides of each bar */\n    padding?: number;\n    /** Set the class name to apply custom styles to the bars */\n    barClass?: string;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. BarHighlightStrategy */\n    highlightStrategy?: IHighlightStrategy;\n    /** Set the mouse cursor style to use when hovering over individual bars */\n    cursor?: string;\n    /** Enables pointer events on the bars */\n    pointerEvents?: boolean;\n    /** Set the stroke width in pixels */\n    strokeWidth?: number;\n    /** Enable the minimum bar thickness (BarRenderer.MIN_BAR_THICKNESS) */\n    enableMinBarThickness?: boolean;\n}\n\n/** The configuration interface for the area renderer */\nexport interface IAreaRendererConfig extends IRendererConfig {\n    /** Set the d3 curve algorithm to be used for drawing the area boundaries */\n    curveType?: CurveFactory;\n    /** Set the class name to apply custom styles to the areas */\n    areaClass?: string;\n    /** Enables the pointer cursor when data point markers are hovered */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** The width of the area path's stroke in pixels. Default is 1. */\n    strokeWidth?: number;\n}\n\nexport interface IRenderSeries {\n    dataSeries: IDataSeries;\n    containers: IRenderContainers;\n    scales: Scales;\n}\n\nexport interface IHighlightStrategy> {\n\n    getDataPointIndex(renderer: T, series: IDataSeries, values: { [p: string]: any }, scales: Scales): number;\n\n    highlightDataPoint(renderer: T, renderSeries: IRenderSeries,\n                       dataPointIndex: number, rendererSubject: Subject): void;\n\n    draw(renderer: T, renderSeries: IRenderSeries, rendererSubject: Subject): void;\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IFormatters.html":{"url":"interfaces/IFormatters.html","title":"interface - IFormatters","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IFormatters\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/scales/types.ts\n        \n\n            \n                Description\n            \n            \n                Interface for scale formatters \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        tick\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [p: string]:        Formatter | undefined\n\n                    \n                \n                        \n                            \n                                Defined in src/core/common/scales/types.ts:16\n                            \n                        \n                \n                    \n                        Additional formatters \n\n                    \n                \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        tick\n                                    \n                                \n                                \n                                    \n                                        tick:         Formatter\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Formatter\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Formatter for tick labels \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { AxisScale } from \"d3-axis\";\n\nimport { IAccessors, IChartSeries } from \"../types\";\n\n/** Domain for series with empty or null data */\nexport const EMPTY_CONTINUOUS_DOMAIN = [0, 0];\n/** A reasonable non-data-driven domain for charts  */\nexport const NORMALIZED_DOMAIN = [0, 1];\n\n/** Signature for domain calculator */\nexport type DomainCalculator = (chartSeriesSet: IChartSeries[], scaleId: string, scale: IScale) => any[];\n\n/** Interface for scale formatters */\nexport interface IFormatters {\n    /** Formatter for tick labels */\n    tick?: Formatter;\n    /** Additional formatters */\n    [p: string]: Formatter | undefined;\n}\n\n/** Signature for label formatters */\nexport type Formatter = (value: T) => string;\n\n/** Dictionary of scale collections in index and array form */\nexport interface ScalesIndex {\n    [key: string]: {\n        /** Scale collection as an index */\n        index: { [scaleId: string]: IScale };\n        /** Scale collection as an array */\n        list: IScale[];\n    };\n}\n\n/** Dictionary of scales */\nexport type Scales = Record>;\n\nexport interface IXYScales extends Scales {\n    x: IScale;\n    y: IScale;\n}\n\nexport interface IRadialScales extends Scales {\n    r: IScale;\n}\n\n/** Interface for a scale */\nexport interface IScale {\n    /** The scale identifier */\n    readonly id: string;\n    readonly d3Scale: AxisScale; // TODO: maybe AxisScale is to narrow?\n\n    /** If this flag is enabled, the domain of this scale is not recalculated */\n    isDomainFixed?: boolean;\n    /** Method used to calculate the scale's domain */\n    domainCalculator?: DomainCalculator;\n    /** The scales formatters */\n    formatters: IFormatters;\n    /** If this flag is enabled, the domain has been recalculated with ticks in mind */\n    __domainCalculatedWithTicks?: boolean;\n\n    /**\n     * Determines if the scale's domain is continuous\n     *\n     * @returns {boolean} true if the scale's domain is continuous (numeric), false otherwise\n     */\n    isContinuous(): boolean;\n\n    /**\n     * Determines if the scale's domain is valid\n     *\n     * @returns {boolean} true if the scale's domain is valid, false otherwise\n     */\n    isDomainValid(): boolean;\n\n    /**\n     * Converts a value to its corresponding coordinate\n     *\n     * @param {T} value The value to be converted\n     * @returns {number} The coordinate corresponding to the specified value\n     */\n    convert(value: T): number;\n\n    /**\n     * Converts a coordinate to its corresponding value\n     *\n     * @param {number} coordinate The coordinate to be converted\n     * @returns {T} The value corresponding to the specified coordinate\n     */\n    invert(coordinate: number): T | undefined;\n\n    /**\n     * Gets the scale's range\n     *\n     * @returns {[number, number]} The scale's range\n     */\n    range(): [number, number];\n\n    /**\n     * Sets the scale's range\n     *\n     * @param {[number, number]} range The scale's new range\n     */\n    range(range: [number, number]): this;\n\n    /**\n     * Gets the scale's domain\n     *\n     * @returns {T[]} The scale's domain\n     */\n    domain(): T[];\n\n    /**\n     * Sets the scale's domain\n     *\n     * @param {T[]} domain The scale's new domain\n     */\n    domain(domain: T[]): this;\n\n    /**\n     * Shorthand method for setting the domain and isDomainFixed at once\n     *\n     * @param {T[]} domain The scale's fixed domain\n     */\n    fixDomain(domain: T[]): void;\n\n    /**\n     * Reverse the scale orientation by toggling the reversed flag\n     */\n    reverse(): this;\n\n    /**\n     * Getter for the reversed flag (see #reverse)\n     */\n    reversed(): boolean;\n\n    /**\n     * Setter for the reversed flag (see #reverse)\n     *\n     * @param reversed\n     */\n    reversed(reversed: boolean): this;\n}\n\n\nexport interface IBandScale extends IScale {\n    bandwidth(): number;\n}\n\nexport function isBandScale(scale: any): scale is IBandScale {\n    return typeof scale.bandwidth === \"function\";\n}\n\nexport interface IHasInnerScale extends IScale {\n    innerScale: IScale;\n}\n\nexport function hasInnerScale(scale: any): scale is IHasInnerScale {\n    return typeof scale.innerScale !== \"undefined\";\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IGrid.html":{"url":"interfaces/IGrid.html","title":"interface - IGrid","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IGrid\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/types.ts\n        \n\n            \n                Description\n            \n            \n                The basic interface for a grid's dimensions, scaling, interaction, and borders\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        eventBus\n                                \n                                \n                                        scales\n                                \n                                \n                                            Optional\n                                        updateChartDimensionsSubject\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    build\n                                \n                                \n                                    buildPlugins\n                                \n                                \n                                    config\n                                \n                                \n                                    config\n                                \n                                \n                                    getInteractiveArea\n                                \n                                \n                                    getLasagna\n                                \n                                \n                                    target\n                                \n                                \n                                    target\n                                \n                                \n                                    target\n                                \n                                \n                                    update\n                                \n                                \n                                    updateDimensions\n                                \n                                \n                                    updateRanges\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            build\n                        \n                        \n                    \n                \n            \n            \n                \nbuild()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:270\n                \n            \n\n\n            \n                \n                    Builds the grid's rendered elements\n\n\n                    \n                    \n                    \n                        Returns :         IGrid\n\n                    \n                    \n                        The grid instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            buildPlugins\n                        \n                        \n                    \n                \n            \n            \n                \nbuildPlugins(chart: IChart)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:299\n                \n            \n\n\n            \n                \n                    Builds the grid's plugins\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    chart\n                                    \n                                                IChart\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IChartPlugin[]\n\n                    \n                    \n                        The set of generated plugins\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            config\n                        \n                        \n                    \n                \n            \n            \n                \nconfig()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:255\n                \n            \n\n\n            \n                \n                    getter for the grid configuration\n\n\n                    \n                    \n                    \n                        Returns :         IGridConfig\n\n                    \n                    \n                        The grid configuration\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            config\n                        \n                        \n                    \n                \n            \n            \n                \nconfig(config: IGridConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:263\n                \n            \n\n\n            \n                \n                    setter for the grid configuration\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                IGridConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new grid configuration\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getInteractiveArea\n                        \n                        \n                    \n                \n            \n            \n                \ngetInteractiveArea()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:232\n                \n            \n\n\n            \n                \n                    Provides access to the grid's interactive area\n\n\n                    \n                    \n                    \n                        Returns :         D3Selection\n\n                    \n                    \n                        The grid's interactive area\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getLasagna\n                        \n                        \n                    \n                \n            \n            \n                \ngetLasagna()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:225\n                \n            \n\n\n            \n                \n                    Provides access to the grid's layering mechanism\n\n\n                    \n                    \n                    \n                        Returns :     Lasagna\n\n                    \n                    \n                        The grid's layering mechanism\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            target\n                        \n                        \n                    \n                \n            \n            \n                \ntarget()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:239\n                \n            \n\n\n            \n                \n                    getter for the grid's target d3 selection\n\n\n                    \n                    \n                    \n                        Returns :         D3Selection\n\n                    \n                    \n                        The grid's target d3 selection\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            target\n                        \n                        \n                    \n                \n            \n            \n                \ntarget(target: D3Selection)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:247\n                \n            \n\n\n            \n                \n                    setter for the grid's target d3 selection\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                                D3Selection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The grid's new target d3 selection\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IGrid\n\n                    \n                    \n                        The grid instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            target\n                        \n                        \n                    \n                \n            \n            \n                \ntarget(target: D3Selection)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:248\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                                D3Selection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         D3Selection | IGrid\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:277\n                \n            \n\n\n            \n                \n                    Updates the grid's rendered elements based on the current scales and configuration\n\n\n                    \n                    \n                    \n                        Returns :         IGrid\n\n                    \n                    \n                        The grid instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \nupdateDimensions(dimensions: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:285\n                \n            \n\n\n            \n                \n                    Updates the grid's dimensions as specified\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dimensions\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new grid dimensions\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IGrid\n\n                    \n                    \n                        The grid instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateRanges\n                        \n                        \n                    \n                \n            \n            \n                \nupdateRanges()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:292\n                \n            \n\n\n            \n                \n                    Updates the ranges on the grid's scales based on the grid's configured dimensions\n\n\n                    \n                    \n                    \n                        Returns :         IGrid\n\n                    \n                    \n                        The grid instance\n\n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        eventBus\n                                    \n                                \n                                \n                                    \n                                        eventBus:     EventBus\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     EventBus\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Chart event bus\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scales\n                                    \n                                \n                                \n                                    \n                                        scales:         ScalesIndex\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ScalesIndex\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The grid scales\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updateChartDimensionsSubject\n                                    \n                                \n                                \n                                    \n                                        updateChartDimensionsSubject:     Subject\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Subject\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Subject for indicating that the chart's dimensions should be updated\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { BaseType } from \"d3\";\nimport { Axis } from \"d3-axis\";\nimport { Selection } from \"d3-selection\";\nimport { Subject } from \"rxjs\";\n\nimport { EventBus } from \"../common/event-bus\";\nimport { Lasagna } from \"../common/lasagna\";\nimport { ScalesIndex } from \"../common/scales/types\";\nimport { D3Selection, IChart, IChartEvent, IChartPlugin } from \"../common/types\";\n\n/**\n * Interface for defining aspects of the top, right, bottom, and left sides of a grid\n */\nexport interface IAllAround {\n    /** Object defining aspects of the top of an entity */\n    top: T;\n    /** Object defining aspects of the right side of an entity */\n    right: T;\n    /** Object defining aspects of the bottom of an entity */\n    bottom: T;\n    /** Object defining aspects of the left side of an entity */\n    left: T;\n}\n\n/**\n * The width and height of an grid\n */\nexport interface IDimensions {\n    width: number;\n    height: number;\n}\n\n/**\n * Configuration of grid dimensions\n */\nexport interface IDimensionConfig {\n    /** The top, right, bottom, and left margin sizes in pixels */\n    margin: IAllAround;\n    /** The top, right, bottom, and left padding sizes in pixels */\n    padding: IAllAround;\n    /** Sets whether the grid uses the chart's container to determine its width */\n    autoWidth: boolean;\n    /** Sets whether the grid uses the chart's container to determine its height */\n    autoHeight: boolean;\n    /** Set of booleans indicating whether a specific margin will be recalculated on chart dimension updates */\n    marginLocked?: IAllAround;\n    /**\n     * Sets the grid's width. Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid width\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    width(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- excluding margins.\n     *\n     * @returns {number} The grid's width\n     */\n    width(): number;\n    /**\n     * Sets the grid's height. Note: 'autoHeight' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid height\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    height(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- excluding margins.\n     *\n     * @returns {number} The grid's height\n     */\n    height(): number;\n    /**\n     * Sets the grid's width by subtracting the grid's horizontal margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new width plus the grid's horizontal margins\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerWidth(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- including horizontal margins.\n     *\n     * @returns {number} The grid's width plus horizontal margins\n     */\n    outerWidth(): number;\n    /**\n     * Sets the grid's height by subtracting the grid's vertical margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new height plus the grid's vertical margins     *\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerHeight(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- including vertical margins.\n     *\n     * @returns {number} The grid's height plus vertical margins\n     */\n    outerHeight(): number;\n}\n\n/**\n * Interface for defining the SVGElements forming the top, right, bottom, and left borders of an entity\n */\nexport interface IBorders extends IAllAround {\n}\n\n/**\n * Configuration of grid borders\n */\nexport interface IBorderConfig {\n    /** The stroke color */\n    color?: string;\n    /** The thickness of the border */\n    width?: number;\n    /** The class name */\n    className?: string;\n    /** Boolean indicating whether the border should be visible */\n    visible?: boolean;\n}\n\nexport interface ITextOverflowArgs {\n    widthLimit: number;\n    horizontalPadding: number;\n    ellipsisWidth: number;\n}\n\n/** Type for tick overflow handler */\nexport type TextOverflowHandler = (textSelection: Selection, args: ITextOverflowArgs) => void;\n\n/** Interface representing the configuration for tick labels */\nexport interface ITickLabelConfig {\n    /**\n     * Padding for left and right sides of label used for calculating text overflow limits\n     * (number represents the padding on each side)\n     */\n    horizontalPadding: number;\n    /** Handler for text overflow. Set to 'undefined' to disable overflow handling */\n    overflowHandler?: TextOverflowHandler;\n    /**\n     * Setting this insures the label's width is smaller or equal to the provided number\n     */\n    maxWidth?: number;\n}\n\n/** Configuration of a grid axis */\nexport interface IAxisConfig {\n    /** Boolean indicating whether the axis should be visible */\n    visible: boolean;\n    /** The approximate number of ticks to display */\n    approximateTicks: number;\n    /** Boolean indicating whether grid ticks should be displayed */\n    gridTicks: boolean;\n    /** The length of the ticks in pixels */\n    tickSize: number;\n    /** Configuration for the tick labels */\n    tickLabel: ITickLabelConfig;\n    /** Sets whether to fit the grid margins to the axis labels */\n    fit: boolean;\n    /** Sets the axis padding */\n    padding: number;\n}\n\n/**\n * Basic grid configuration\n */\nexport interface IGridConfig {\n    /** Boolean indicating whether the grid will respond to mouse events */\n    interactive: boolean;\n    /** Configuration for the grid's dimensions */\n    dimension: IDimensionConfig;\n    /** Configuration for the grid's borders */\n    borders: IAllAround;\n    /** String indicating the desired cursor style */\n    cursor: string;\n    /** Set to true to disable the render area height correction */\n    disableRenderAreaHeightCorrection?: boolean;\n    /** Set to true to disable the render area width correction */\n    disableRenderAreaWidthCorrection?: boolean;\n}\n\n/**\n * Configuration for an XYGrid\n */\nexport interface IXYGridConfig extends IGridConfig {\n    /** The IAllAround value for the grid's axis configurations */\n    axis: IAllAround;\n\n    /**\n     * Add interaction line and label plugins automatically\n     * Note: This was added to prevent a breaking change. We should avoid this kind of option in future\n     * versions of IXYGridConfig because ideally all plugins should be added manually (NUI-3304).\n     */\n    interactionPlugins: boolean;\n}\n\n/**\n * The basic interface for a grid's dimensions, scaling, interaction, and borders\n *\n * @interface\n */\nexport interface IGrid {\n    /** The grid scales\n     *\n     * @type {ScalesIndex}\n     */\n    scales: ScalesIndex;\n\n    /**\n     * Subject for indicating that the chart's dimensions should be updated\n     */\n    updateChartDimensionsSubject?: Subject;\n\n    /**\n     * Chart event bus\n     */\n    eventBus: EventBus;\n\n    /**\n     * Provides access to the grid's layering mechanism\n     *\n     * @returns {Lasagna} The grid's layering mechanism\n     */\n    getLasagna(): Lasagna;\n\n    /**\n     * Provides access to the grid's interactive area\n     *\n     * @returns {D3Selection} The grid's interactive area\n     */\n    getInteractiveArea(): D3Selection;\n\n    /**\n     * getter for the grid's target d3 selection\n     *\n     * @returns {D3Selection} The grid's target d3 selection\n     */\n    target(): D3Selection;\n\n    /**\n     * setter for the grid's target d3 selection\n     *\n     * @param {D3Selection} [target] The grid's new target d3 selection\n     * @returns {IGrid} The grid instance\n     */\n    target(target: D3Selection): IGrid;\n    target(target: D3Selection): D3Selection | IGrid;\n\n    /**\n     * getter for the grid configuration\n     *\n     * @returns {IGridConfig} The grid configuration\n     */\n    config(): IGridConfig;\n\n    /**\n     * setter for the grid configuration\n     *\n     * @param {IGridConfig} config The new grid configuration\n     * @returns {this} The grid instance\n     */\n    config(config: IGridConfig): this;\n\n    /**\n     * Builds the grid's rendered elements\n     *\n     * @returns {IGrid} The grid instance\n     */\n    build(): IGrid;\n\n    /**\n     * Updates the grid's rendered elements based on the current scales and configuration\n     *\n     * @returns {IGrid} The grid instance\n     */\n    update(): IGrid;\n\n    /**\n     * Updates the grid's dimensions as specified\n     *\n     * @param {Partial} dimensions The new grid dimensions\n     * @returns {IGrid} The grid instance\n     */\n    updateDimensions(dimensions: Partial): IGrid;\n\n    /**\n     * Updates the ranges on the grid's scales based on the grid's configured dimensions\n     *\n     * @returns {IGrid} The grid instance\n     */\n    updateRanges(): IGrid;\n\n    /**\n     * Builds the grid's plugins\n     *\n     * @returns {IChartPlugin[]} The set of generated plugins\n     */\n    buildPlugins(chart: IChart): IChartPlugin[];\n}\n\n/**\n * Interface for a d3 axis entity\n */\nexport interface IAxis {\n    /** The d3 group element for the axis label */\n    labelGroup: D3Selection;\n    /** The d3 group element for the axis ticks */\n    tickGroup: D3Selection;\n    /** The d3 group element for the axis */\n    group: D3Selection;\n    /** The d3 axis */\n    axis: Axis;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IGridConfig.html":{"url":"interfaces/IGridConfig.html","title":"interface - IGridConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IGridConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/types.ts\n        \n\n            \n                Description\n            \n            \n                Basic grid configuration\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        borders\n                                \n                                \n                                        cursor\n                                \n                                \n                                        dimension\n                                \n                                \n                                            Optional\n                                        disableRenderAreaHeightCorrection\n                                \n                                \n                                            Optional\n                                        disableRenderAreaWidthCorrection\n                                \n                                \n                                        interactive\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        borders\n                                    \n                                \n                                \n                                    \n                                        borders:     IAllAround\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     IAllAround\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Configuration for the grid's borders \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cursor\n                                    \n                                \n                                \n                                    \n                                        cursor:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    String indicating the desired cursor style \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dimension\n                                    \n                                \n                                \n                                    \n                                        dimension:         IDimensionConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDimensionConfig\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Configuration for the grid's dimensions \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disableRenderAreaHeightCorrection\n                                    \n                                \n                                \n                                    \n                                        disableRenderAreaHeightCorrection:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set to true to disable the render area height correction \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disableRenderAreaWidthCorrection\n                                    \n                                \n                                \n                                    \n                                        disableRenderAreaWidthCorrection:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set to true to disable the render area width correction \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        interactive\n                                    \n                                \n                                \n                                    \n                                        interactive:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Boolean indicating whether the grid will respond to mouse events \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { BaseType } from \"d3\";\nimport { Axis } from \"d3-axis\";\nimport { Selection } from \"d3-selection\";\nimport { Subject } from \"rxjs\";\n\nimport { EventBus } from \"../common/event-bus\";\nimport { Lasagna } from \"../common/lasagna\";\nimport { ScalesIndex } from \"../common/scales/types\";\nimport { D3Selection, IChart, IChartEvent, IChartPlugin } from \"../common/types\";\n\n/**\n * Interface for defining aspects of the top, right, bottom, and left sides of a grid\n */\nexport interface IAllAround {\n    /** Object defining aspects of the top of an entity */\n    top: T;\n    /** Object defining aspects of the right side of an entity */\n    right: T;\n    /** Object defining aspects of the bottom of an entity */\n    bottom: T;\n    /** Object defining aspects of the left side of an entity */\n    left: T;\n}\n\n/**\n * The width and height of an grid\n */\nexport interface IDimensions {\n    width: number;\n    height: number;\n}\n\n/**\n * Configuration of grid dimensions\n */\nexport interface IDimensionConfig {\n    /** The top, right, bottom, and left margin sizes in pixels */\n    margin: IAllAround;\n    /** The top, right, bottom, and left padding sizes in pixels */\n    padding: IAllAround;\n    /** Sets whether the grid uses the chart's container to determine its width */\n    autoWidth: boolean;\n    /** Sets whether the grid uses the chart's container to determine its height */\n    autoHeight: boolean;\n    /** Set of booleans indicating whether a specific margin will be recalculated on chart dimension updates */\n    marginLocked?: IAllAround;\n    /**\n     * Sets the grid's width. Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid width\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    width(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- excluding margins.\n     *\n     * @returns {number} The grid's width\n     */\n    width(): number;\n    /**\n     * Sets the grid's height. Note: 'autoHeight' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid height\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    height(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- excluding margins.\n     *\n     * @returns {number} The grid's height\n     */\n    height(): number;\n    /**\n     * Sets the grid's width by subtracting the grid's horizontal margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new width plus the grid's horizontal margins\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerWidth(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- including horizontal margins.\n     *\n     * @returns {number} The grid's width plus horizontal margins\n     */\n    outerWidth(): number;\n    /**\n     * Sets the grid's height by subtracting the grid's vertical margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new height plus the grid's vertical margins     *\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerHeight(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- including vertical margins.\n     *\n     * @returns {number} The grid's height plus vertical margins\n     */\n    outerHeight(): number;\n}\n\n/**\n * Interface for defining the SVGElements forming the top, right, bottom, and left borders of an entity\n */\nexport interface IBorders extends IAllAround {\n}\n\n/**\n * Configuration of grid borders\n */\nexport interface IBorderConfig {\n    /** The stroke color */\n    color?: string;\n    /** The thickness of the border */\n    width?: number;\n    /** The class name */\n    className?: string;\n    /** Boolean indicating whether the border should be visible */\n    visible?: boolean;\n}\n\nexport interface ITextOverflowArgs {\n    widthLimit: number;\n    horizontalPadding: number;\n    ellipsisWidth: number;\n}\n\n/** Type for tick overflow handler */\nexport type TextOverflowHandler = (textSelection: Selection, args: ITextOverflowArgs) => void;\n\n/** Interface representing the configuration for tick labels */\nexport interface ITickLabelConfig {\n    /**\n     * Padding for left and right sides of label used for calculating text overflow limits\n     * (number represents the padding on each side)\n     */\n    horizontalPadding: number;\n    /** Handler for text overflow. Set to 'undefined' to disable overflow handling */\n    overflowHandler?: TextOverflowHandler;\n    /**\n     * Setting this insures the label's width is smaller or equal to the provided number\n     */\n    maxWidth?: number;\n}\n\n/** Configuration of a grid axis */\nexport interface IAxisConfig {\n    /** Boolean indicating whether the axis should be visible */\n    visible: boolean;\n    /** The approximate number of ticks to display */\n    approximateTicks: number;\n    /** Boolean indicating whether grid ticks should be displayed */\n    gridTicks: boolean;\n    /** The length of the ticks in pixels */\n    tickSize: number;\n    /** Configuration for the tick labels */\n    tickLabel: ITickLabelConfig;\n    /** Sets whether to fit the grid margins to the axis labels */\n    fit: boolean;\n    /** Sets the axis padding */\n    padding: number;\n}\n\n/**\n * Basic grid configuration\n */\nexport interface IGridConfig {\n    /** Boolean indicating whether the grid will respond to mouse events */\n    interactive: boolean;\n    /** Configuration for the grid's dimensions */\n    dimension: IDimensionConfig;\n    /** Configuration for the grid's borders */\n    borders: IAllAround;\n    /** String indicating the desired cursor style */\n    cursor: string;\n    /** Set to true to disable the render area height correction */\n    disableRenderAreaHeightCorrection?: boolean;\n    /** Set to true to disable the render area width correction */\n    disableRenderAreaWidthCorrection?: boolean;\n}\n\n/**\n * Configuration for an XYGrid\n */\nexport interface IXYGridConfig extends IGridConfig {\n    /** The IAllAround value for the grid's axis configurations */\n    axis: IAllAround;\n\n    /**\n     * Add interaction line and label plugins automatically\n     * Note: This was added to prevent a breaking change. We should avoid this kind of option in future\n     * versions of IXYGridConfig because ideally all plugins should be added manually (NUI-3304).\n     */\n    interactionPlugins: boolean;\n}\n\n/**\n * The basic interface for a grid's dimensions, scaling, interaction, and borders\n *\n * @interface\n */\nexport interface IGrid {\n    /** The grid scales\n     *\n     * @type {ScalesIndex}\n     */\n    scales: ScalesIndex;\n\n    /**\n     * Subject for indicating that the chart's dimensions should be updated\n     */\n    updateChartDimensionsSubject?: Subject;\n\n    /**\n     * Chart event bus\n     */\n    eventBus: EventBus;\n\n    /**\n     * Provides access to the grid's layering mechanism\n     *\n     * @returns {Lasagna} The grid's layering mechanism\n     */\n    getLasagna(): Lasagna;\n\n    /**\n     * Provides access to the grid's interactive area\n     *\n     * @returns {D3Selection} The grid's interactive area\n     */\n    getInteractiveArea(): D3Selection;\n\n    /**\n     * getter for the grid's target d3 selection\n     *\n     * @returns {D3Selection} The grid's target d3 selection\n     */\n    target(): D3Selection;\n\n    /**\n     * setter for the grid's target d3 selection\n     *\n     * @param {D3Selection} [target] The grid's new target d3 selection\n     * @returns {IGrid} The grid instance\n     */\n    target(target: D3Selection): IGrid;\n    target(target: D3Selection): D3Selection | IGrid;\n\n    /**\n     * getter for the grid configuration\n     *\n     * @returns {IGridConfig} The grid configuration\n     */\n    config(): IGridConfig;\n\n    /**\n     * setter for the grid configuration\n     *\n     * @param {IGridConfig} config The new grid configuration\n     * @returns {this} The grid instance\n     */\n    config(config: IGridConfig): this;\n\n    /**\n     * Builds the grid's rendered elements\n     *\n     * @returns {IGrid} The grid instance\n     */\n    build(): IGrid;\n\n    /**\n     * Updates the grid's rendered elements based on the current scales and configuration\n     *\n     * @returns {IGrid} The grid instance\n     */\n    update(): IGrid;\n\n    /**\n     * Updates the grid's dimensions as specified\n     *\n     * @param {Partial} dimensions The new grid dimensions\n     * @returns {IGrid} The grid instance\n     */\n    updateDimensions(dimensions: Partial): IGrid;\n\n    /**\n     * Updates the ranges on the grid's scales based on the grid's configured dimensions\n     *\n     * @returns {IGrid} The grid instance\n     */\n    updateRanges(): IGrid;\n\n    /**\n     * Builds the grid's plugins\n     *\n     * @returns {IChartPlugin[]} The set of generated plugins\n     */\n    buildPlugins(chart: IChart): IChartPlugin[];\n}\n\n/**\n * Interface for a d3 axis entity\n */\nexport interface IAxis {\n    /** The d3 group element for the axis label */\n    labelGroup: D3Selection;\n    /** The d3 group element for the axis ticks */\n    tickGroup: D3Selection;\n    /** The d3 group element for the axis */\n    group: D3Selection;\n    /** The d3 axis */\n    axis: Axis;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IHasInnerScale.html":{"url":"interfaces/IHasInnerScale.html","title":"interface - IHasInnerScale","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IHasInnerScale\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/scales/types.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IScale\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        innerScale\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        innerScale\n                                    \n                                \n                                \n                                    \n                                        innerScale:         IScale\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IScale\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { AxisScale } from \"d3-axis\";\n\nimport { IAccessors, IChartSeries } from \"../types\";\n\n/** Domain for series with empty or null data */\nexport const EMPTY_CONTINUOUS_DOMAIN = [0, 0];\n/** A reasonable non-data-driven domain for charts  */\nexport const NORMALIZED_DOMAIN = [0, 1];\n\n/** Signature for domain calculator */\nexport type DomainCalculator = (chartSeriesSet: IChartSeries[], scaleId: string, scale: IScale) => any[];\n\n/** Interface for scale formatters */\nexport interface IFormatters {\n    /** Formatter for tick labels */\n    tick?: Formatter;\n    /** Additional formatters */\n    [p: string]: Formatter | undefined;\n}\n\n/** Signature for label formatters */\nexport type Formatter = (value: T) => string;\n\n/** Dictionary of scale collections in index and array form */\nexport interface ScalesIndex {\n    [key: string]: {\n        /** Scale collection as an index */\n        index: { [scaleId: string]: IScale };\n        /** Scale collection as an array */\n        list: IScale[];\n    };\n}\n\n/** Dictionary of scales */\nexport type Scales = Record>;\n\nexport interface IXYScales extends Scales {\n    x: IScale;\n    y: IScale;\n}\n\nexport interface IRadialScales extends Scales {\n    r: IScale;\n}\n\n/** Interface for a scale */\nexport interface IScale {\n    /** The scale identifier */\n    readonly id: string;\n    readonly d3Scale: AxisScale; // TODO: maybe AxisScale is to narrow?\n\n    /** If this flag is enabled, the domain of this scale is not recalculated */\n    isDomainFixed?: boolean;\n    /** Method used to calculate the scale's domain */\n    domainCalculator?: DomainCalculator;\n    /** The scales formatters */\n    formatters: IFormatters;\n    /** If this flag is enabled, the domain has been recalculated with ticks in mind */\n    __domainCalculatedWithTicks?: boolean;\n\n    /**\n     * Determines if the scale's domain is continuous\n     *\n     * @returns {boolean} true if the scale's domain is continuous (numeric), false otherwise\n     */\n    isContinuous(): boolean;\n\n    /**\n     * Determines if the scale's domain is valid\n     *\n     * @returns {boolean} true if the scale's domain is valid, false otherwise\n     */\n    isDomainValid(): boolean;\n\n    /**\n     * Converts a value to its corresponding coordinate\n     *\n     * @param {T} value The value to be converted\n     * @returns {number} The coordinate corresponding to the specified value\n     */\n    convert(value: T): number;\n\n    /**\n     * Converts a coordinate to its corresponding value\n     *\n     * @param {number} coordinate The coordinate to be converted\n     * @returns {T} The value corresponding to the specified coordinate\n     */\n    invert(coordinate: number): T | undefined;\n\n    /**\n     * Gets the scale's range\n     *\n     * @returns {[number, number]} The scale's range\n     */\n    range(): [number, number];\n\n    /**\n     * Sets the scale's range\n     *\n     * @param {[number, number]} range The scale's new range\n     */\n    range(range: [number, number]): this;\n\n    /**\n     * Gets the scale's domain\n     *\n     * @returns {T[]} The scale's domain\n     */\n    domain(): T[];\n\n    /**\n     * Sets the scale's domain\n     *\n     * @param {T[]} domain The scale's new domain\n     */\n    domain(domain: T[]): this;\n\n    /**\n     * Shorthand method for setting the domain and isDomainFixed at once\n     *\n     * @param {T[]} domain The scale's fixed domain\n     */\n    fixDomain(domain: T[]): void;\n\n    /**\n     * Reverse the scale orientation by toggling the reversed flag\n     */\n    reverse(): this;\n\n    /**\n     * Getter for the reversed flag (see #reverse)\n     */\n    reversed(): boolean;\n\n    /**\n     * Setter for the reversed flag (see #reverse)\n     *\n     * @param reversed\n     */\n    reversed(reversed: boolean): this;\n}\n\n\nexport interface IBandScale extends IScale {\n    bandwidth(): number;\n}\n\nexport function isBandScale(scale: any): scale is IBandScale {\n    return typeof scale.bandwidth === \"function\";\n}\n\nexport interface IHasInnerScale extends IScale {\n    innerScale: IScale;\n}\n\nexport function hasInnerScale(scale: any): scale is IHasInnerScale {\n    return typeof scale.innerScale !== \"undefined\";\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IHighlightStrategy.html":{"url":"interfaces/IHighlightStrategy.html","title":"interface - IHighlightStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IHighlightStrategy\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    draw\n                                \n                                \n                                    getDataPointIndex\n                                \n                                \n                                    highlightDataPoint\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            draw\n                        \n                        \n                    \n                \n            \n            \n                \ndraw(renderer: T, renderSeries: IRenderSeries, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/types.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getDataPointIndex\n                        \n                        \n                    \n                \n            \n            \n                \ngetDataPointIndex(renderer: T, series: IDataSeries, values: literal type, scales: Scales)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/types.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    series\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    values\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            highlightDataPoint\n                        \n                        \n                    \n                \n            \n            \n                \nhighlightDataPoint(renderer: T, renderSeries: IRenderSeries, dataPointIndex: number, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/types.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dataPointIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CurveFactory } from \"d3-shape\";\nimport { Subject } from \"rxjs\";\n\nimport { Renderer } from \"../core/common/renderer\";\nimport { Scales } from \"../core/common/scales/types\";\nimport { IAccessors, IDataSeries, IRenderContainers, IRendererConfig, IRendererEventPayload } from \"../core/common/types\";\n\nimport { IRectangleAccessors } from \"./accessors/rectangle-accessors\";\nimport { BarRenderer } from \"./bar/bar-renderer\";\nimport { ILineAccessors } from \"./line/line-accessors\";\nimport { LineRenderer } from \"./line/line-renderer\";\n\nexport enum RenderState {\n    hidden = \"hidden\",\n    deemphasized = \"deemphasized\",\n    emphasized = \"emphasized\",\n    default = \"default\",\n}\n\nexport enum RenderLayerName {\n    background = \"background\",\n    data = \"data\",\n    unclippedData = \"unclipped-data\",\n    foreground = \"foreground\",\n}\n\n/** The configuration interface for marker interaction */\nexport interface IMarkerInteractionConfig {\n    /** Enables mouse events on data point markers */\n    enabled: boolean;\n    /** Enables the pointer style mouse cursor when data point markers are hovered */\n    clickable?: boolean;\n}\n\n/** The configuration interface for the enhanced line caps */\nexport interface IEnhancedLineCapConfig {\n    /** Set the stroke color */\n    stroke?: string;\n    /** Set the stroke width in pixels */\n    strokeWidth?: number;\n    /** Set the fill color */\n    fill?: string;\n    /** Set the radius in pixels */\n    radius?: number;\n}\n\n/** The configuration interface for the line renderer */\nexport interface ILineRendererConfig extends IRendererConfig {\n    /** Set the width of the line in pixels */\n    strokeWidth?: number;\n    /** Set the stroke-dasharray of the line, e.g. \"1,1\", \"2,2\", etc. */\n    strokeStyle?: string;\n    /** Set the stroke-linecap of the line, e.g. \"round\" */\n    strokeLinecap?: string;\n    /** Set the d3 curve algorithm to be used for drawing the lines */\n    curveType?: CurveFactory;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. LineSelectSeriesInteractionStrategy */\n    interactionStrategy?: IHighlightStrategy;\n    /** Configure the interaction behavior for markers */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** Set whether enhanced line caps should be displayed */\n    useEnhancedLineCaps?: boolean;\n    /** Optionally configure enhanced line caps. Prerequisite: 'useEnhancedLineCaps' is set to true */\n    enhancedLineCap?: IEnhancedLineCapConfig;\n}\n\n/** The configuration interface for the bar renderer */\nexport interface IBarRendererConfig extends IRendererConfig {\n    /** Set the padding on both sides of each bar */\n    padding?: number;\n    /** Set the class name to apply custom styles to the bars */\n    barClass?: string;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. BarHighlightStrategy */\n    highlightStrategy?: IHighlightStrategy;\n    /** Set the mouse cursor style to use when hovering over individual bars */\n    cursor?: string;\n    /** Enables pointer events on the bars */\n    pointerEvents?: boolean;\n    /** Set the stroke width in pixels */\n    strokeWidth?: number;\n    /** Enable the minimum bar thickness (BarRenderer.MIN_BAR_THICKNESS) */\n    enableMinBarThickness?: boolean;\n}\n\n/** The configuration interface for the area renderer */\nexport interface IAreaRendererConfig extends IRendererConfig {\n    /** Set the d3 curve algorithm to be used for drawing the area boundaries */\n    curveType?: CurveFactory;\n    /** Set the class name to apply custom styles to the areas */\n    areaClass?: string;\n    /** Enables the pointer cursor when data point markers are hovered */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** The width of the area path's stroke in pixels. Default is 1. */\n    strokeWidth?: number;\n}\n\nexport interface IRenderSeries {\n    dataSeries: IDataSeries;\n    containers: IRenderContainers;\n    scales: Scales;\n}\n\nexport interface IHighlightStrategy> {\n\n    getDataPointIndex(renderer: T, series: IDataSeries, values: { [p: string]: any }, scales: Scales): number;\n\n    highlightDataPoint(renderer: T, renderSeries: IRenderSeries,\n                       dataPointIndex: number, rendererSubject: Subject): void;\n\n    draw(renderer: T, renderSeries: IRenderSeries, rendererSubject: Subject): void;\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IInteractionCoordinatesPayload.html":{"url":"interfaces/IInteractionCoordinatesPayload.html","title":"interface - IInteractionCoordinatesPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IInteractionCoordinatesPayload\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/types.ts\n        \n\n            \n                Description\n            \n            \n                Payload for an INTERACTION_COORDINATES_EVENT\n\n            \n\n            \n                Extends\n            \n            \n                        IInteractionPayload\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        coordinates\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        coordinates\n                                    \n                                \n                                \n                                    \n                                        coordinates:     ICoordinates\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ICoordinates\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The coordinates of an interaction \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ICoordinates, IInteractionPayload } from \"../common/types\";\n\n/**\n * Interface used for interaction values with scaleKey as key to a dictionary of scaleId to value. Typical scale keys are \"x\" and \"y\"\n */\nexport interface IInteractionValues {\n    [scaleKey: string]: { [scaleId: string]: any };\n}\n\n/**\n * Payload for an INTERACTION_VALUES_EVENT\n */\nexport interface IInteractionValuesPayload extends IInteractionPayload {\n    /** The values of the interaction */\n    values: IInteractionValues;\n}\n\n/**\n * Payload for an INTERACTION_COORDINATES_EVENT\n */\nexport interface IInteractionCoordinatesPayload extends IInteractionPayload {\n    /** The coordinates of an interaction */\n    coordinates: ICoordinates;\n}\n\n/** Interface for defining an element's position */\nexport interface IElementPosition {\n    top: number;\n    left: number;\n    width: number;\n    height: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IInteractionDataPointEvent.html":{"url":"interfaces/IInteractionDataPointEvent.html","title":"interface - IInteractionDataPointEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IInteractionDataPointEvent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                Payload for interaction events regarding a single data point\n\n            \n\n            \n                Extends\n            \n            \n                        IInteractionPayload\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        dataPoint\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dataPoint\n                                    \n                                \n                                \n                                    \n                                        dataPoint:         IDataPoint\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDataPoint\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IInteractionDataPointsEvent.html":{"url":"interfaces/IInteractionDataPointsEvent.html","title":"interface - IInteractionDataPointsEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IInteractionDataPointsEvent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                Payload for interaction events regarding one or more data points\n\n            \n\n            \n                Extends\n            \n            \n                        IInteractionPayload\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        dataPoints\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dataPoints\n                                    \n                                \n                                \n                                    \n                                        dataPoints:         IDataPointsPayload\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDataPointsPayload\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IInteractionPayload.html":{"url":"interfaces/IInteractionPayload.html","title":"interface - IInteractionPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IInteractionPayload\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                Payload for interaction events\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        interactionType\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        interactionType\n                                    \n                                \n                                \n                                    \n                                        interactionType:         InteractionType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         InteractionType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IInteractionValues.html":{"url":"interfaces/IInteractionValues.html","title":"interface - IInteractionValues","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IInteractionValues\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/types.ts\n        \n\n            \n                Description\n            \n            \n                Interface used for interaction values with scaleKey as key to a dictionary of scaleId to value. Typical scale keys are \"x\" and \"y\"\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [scaleKey: string]:    literal type\n\n                    \n                \n                        \n                            \n                                Defined in src/core/plugins/types.ts:6\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import { ICoordinates, IInteractionPayload } from \"../common/types\";\n\n/**\n * Interface used for interaction values with scaleKey as key to a dictionary of scaleId to value. Typical scale keys are \"x\" and \"y\"\n */\nexport interface IInteractionValues {\n    [scaleKey: string]: { [scaleId: string]: any };\n}\n\n/**\n * Payload for an INTERACTION_VALUES_EVENT\n */\nexport interface IInteractionValuesPayload extends IInteractionPayload {\n    /** The values of the interaction */\n    values: IInteractionValues;\n}\n\n/**\n * Payload for an INTERACTION_COORDINATES_EVENT\n */\nexport interface IInteractionCoordinatesPayload extends IInteractionPayload {\n    /** The coordinates of an interaction */\n    coordinates: ICoordinates;\n}\n\n/** Interface for defining an element's position */\nexport interface IElementPosition {\n    top: number;\n    left: number;\n    width: number;\n    height: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IInteractionValuesPayload.html":{"url":"interfaces/IInteractionValuesPayload.html","title":"interface - IInteractionValuesPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IInteractionValuesPayload\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/types.ts\n        \n\n            \n                Description\n            \n            \n                Payload for an INTERACTION_VALUES_EVENT\n\n            \n\n            \n                Extends\n            \n            \n                        IInteractionPayload\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        values\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        values\n                                    \n                                \n                                \n                                    \n                                        values:         IInteractionValues\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IInteractionValues\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The values of the interaction \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ICoordinates, IInteractionPayload } from \"../common/types\";\n\n/**\n * Interface used for interaction values with scaleKey as key to a dictionary of scaleId to value. Typical scale keys are \"x\" and \"y\"\n */\nexport interface IInteractionValues {\n    [scaleKey: string]: { [scaleId: string]: any };\n}\n\n/**\n * Payload for an INTERACTION_VALUES_EVENT\n */\nexport interface IInteractionValuesPayload extends IInteractionPayload {\n    /** The values of the interaction */\n    values: IInteractionValues;\n}\n\n/**\n * Payload for an INTERACTION_COORDINATES_EVENT\n */\nexport interface IInteractionCoordinatesPayload extends IInteractionPayload {\n    /** The coordinates of an interaction */\n    coordinates: ICoordinates;\n}\n\n/** Interface for defining an element's position */\nexport interface IElementPosition {\n    top: number;\n    left: number;\n    width: number;\n    height: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ILineAccessors.html":{"url":"interfaces/ILineAccessors.html","title":"interface - ILineAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ILineAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/line/line-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                                \n                                        series\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         ILineDataAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ILineDataAccessors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        series\n                                    \n                                \n                                \n                                    \n                                        series:         ILineSeriesAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ILineSeriesAccessors\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Series level accessors - e.g. for colors, markers, etc. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { defaultColorProvider, defaultMarkerProvider } from \"../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, SeriesAccessor } from \"../../core/common/types\";\nimport { IXYDataAccessors, XYAccessors } from \"../accessors/xy-accessors\";\n\nexport interface ILineDataAccessors extends IXYDataAccessors {\n    defined?: DataAccessor;\n}\n\n/**\n * Series accessors used in {@link LineAccessors}.\n */\nexport interface ILineSeriesAccessors {\n    /** Color of the series */\n    color?: SeriesAccessor;\n    /** Marker for the series */\n    marker?: SeriesAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: SeriesAccessor | undefined;\n}\n\nexport interface ILineAccessors extends IAccessors {\n    data: ILineDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series: ILineSeriesAccessors;\n}\n\n/**\n * Accessor class supporting the {@link LineRenderer}, that defines required inputs acquired from data points.\n * This class includes default behavior for all required fields. It's using properties of the same name for data accessors.\n * \n * If colorProvider or markerProvider is not defined in the constructor, every new instance of LineAccessors will instantiate it's own, so that has to be\n * kept in mind when configuring charts as it could cause potential color synchronization problems.\n *\n * See referenced data and series interfaces for required properties.\n */\nexport class LineAccessors extends XYAccessors implements ILineAccessors {\n    public data: ILineDataAccessors;\n    public series: ILineSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider(), private markerProvider = defaultMarkerProvider()) {\n        super();\n\n        this.data.defined = (d: any, i) => d.hasOwnProperty(\"defined\") ? d.defined : true;\n\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n            marker: this.markerProvider ? this.markerProvider.get : undefined,\n        };\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ILineDataAccessors.html":{"url":"interfaces/ILineDataAccessors.html","title":"interface - ILineDataAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ILineDataAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/line/line-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IXYDataAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        defined\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        defined\n                                    \n                                \n                                \n                                    \n                                        defined:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { defaultColorProvider, defaultMarkerProvider } from \"../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, SeriesAccessor } from \"../../core/common/types\";\nimport { IXYDataAccessors, XYAccessors } from \"../accessors/xy-accessors\";\n\nexport interface ILineDataAccessors extends IXYDataAccessors {\n    defined?: DataAccessor;\n}\n\n/**\n * Series accessors used in {@link LineAccessors}.\n */\nexport interface ILineSeriesAccessors {\n    /** Color of the series */\n    color?: SeriesAccessor;\n    /** Marker for the series */\n    marker?: SeriesAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: SeriesAccessor | undefined;\n}\n\nexport interface ILineAccessors extends IAccessors {\n    data: ILineDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series: ILineSeriesAccessors;\n}\n\n/**\n * Accessor class supporting the {@link LineRenderer}, that defines required inputs acquired from data points.\n * This class includes default behavior for all required fields. It's using properties of the same name for data accessors.\n * \n * If colorProvider or markerProvider is not defined in the constructor, every new instance of LineAccessors will instantiate it's own, so that has to be\n * kept in mind when configuring charts as it could cause potential color synchronization problems.\n *\n * See referenced data and series interfaces for required properties.\n */\nexport class LineAccessors extends XYAccessors implements ILineAccessors {\n    public data: ILineDataAccessors;\n    public series: ILineSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider(), private markerProvider = defaultMarkerProvider()) {\n        super();\n\n        this.data.defined = (d: any, i) => d.hasOwnProperty(\"defined\") ? d.defined : true;\n\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n            marker: this.markerProvider ? this.markerProvider.get : undefined,\n        };\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ILineRendererConfig.html":{"url":"interfaces/ILineRendererConfig.html","title":"interface - ILineRendererConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ILineRendererConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/types.ts\n        \n\n            \n                Description\n            \n            \n                The configuration interface for the line renderer \n\n            \n\n            \n                Extends\n            \n            \n                        IRendererConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        curveType\n                                \n                                \n                                            Optional\n                                        enhancedLineCap\n                                \n                                \n                                            Optional\n                                        interactionStrategy\n                                \n                                \n                                            Optional\n                                        markerInteraction\n                                \n                                \n                                            Optional\n                                        strokeLinecap\n                                \n                                \n                                            Optional\n                                        strokeStyle\n                                \n                                \n                                            Optional\n                                        strokeWidth\n                                \n                                \n                                            Optional\n                                        useEnhancedLineCaps\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        curveType\n                                    \n                                \n                                \n                                    \n                                        curveType:     CurveFactory\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     CurveFactory\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the d3 curve algorithm to be used for drawing the lines \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enhancedLineCap\n                                    \n                                \n                                \n                                    \n                                        enhancedLineCap:         IEnhancedLineCapConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IEnhancedLineCapConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optionally configure enhanced line caps. Prerequisite: 'useEnhancedLineCaps' is set to true \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        interactionStrategy\n                                    \n                                \n                                \n                                    \n                                        interactionStrategy:     IHighlightStrategy\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     IHighlightStrategy\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. LineSelectSeriesInteractionStrategy \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        markerInteraction\n                                    \n                                \n                                \n                                    \n                                        markerInteraction:         IMarkerInteractionConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IMarkerInteractionConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Configure the interaction behavior for markers \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        strokeLinecap\n                                    \n                                \n                                \n                                    \n                                        strokeLinecap:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the stroke-linecap of the line, e.g. \"round\" \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        strokeStyle\n                                    \n                                \n                                \n                                    \n                                        strokeStyle:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the stroke-dasharray of the line, e.g. \"1,1\", \"2,2\", etc. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        strokeWidth\n                                    \n                                \n                                \n                                    \n                                        strokeWidth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the width of the line in pixels \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        useEnhancedLineCaps\n                                    \n                                \n                                \n                                    \n                                        useEnhancedLineCaps:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set whether enhanced line caps should be displayed \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { CurveFactory } from \"d3-shape\";\nimport { Subject } from \"rxjs\";\n\nimport { Renderer } from \"../core/common/renderer\";\nimport { Scales } from \"../core/common/scales/types\";\nimport { IAccessors, IDataSeries, IRenderContainers, IRendererConfig, IRendererEventPayload } from \"../core/common/types\";\n\nimport { IRectangleAccessors } from \"./accessors/rectangle-accessors\";\nimport { BarRenderer } from \"./bar/bar-renderer\";\nimport { ILineAccessors } from \"./line/line-accessors\";\nimport { LineRenderer } from \"./line/line-renderer\";\n\nexport enum RenderState {\n    hidden = \"hidden\",\n    deemphasized = \"deemphasized\",\n    emphasized = \"emphasized\",\n    default = \"default\",\n}\n\nexport enum RenderLayerName {\n    background = \"background\",\n    data = \"data\",\n    unclippedData = \"unclipped-data\",\n    foreground = \"foreground\",\n}\n\n/** The configuration interface for marker interaction */\nexport interface IMarkerInteractionConfig {\n    /** Enables mouse events on data point markers */\n    enabled: boolean;\n    /** Enables the pointer style mouse cursor when data point markers are hovered */\n    clickable?: boolean;\n}\n\n/** The configuration interface for the enhanced line caps */\nexport interface IEnhancedLineCapConfig {\n    /** Set the stroke color */\n    stroke?: string;\n    /** Set the stroke width in pixels */\n    strokeWidth?: number;\n    /** Set the fill color */\n    fill?: string;\n    /** Set the radius in pixels */\n    radius?: number;\n}\n\n/** The configuration interface for the line renderer */\nexport interface ILineRendererConfig extends IRendererConfig {\n    /** Set the width of the line in pixels */\n    strokeWidth?: number;\n    /** Set the stroke-dasharray of the line, e.g. \"1,1\", \"2,2\", etc. */\n    strokeStyle?: string;\n    /** Set the stroke-linecap of the line, e.g. \"round\" */\n    strokeLinecap?: string;\n    /** Set the d3 curve algorithm to be used for drawing the lines */\n    curveType?: CurveFactory;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. LineSelectSeriesInteractionStrategy */\n    interactionStrategy?: IHighlightStrategy;\n    /** Configure the interaction behavior for markers */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** Set whether enhanced line caps should be displayed */\n    useEnhancedLineCaps?: boolean;\n    /** Optionally configure enhanced line caps. Prerequisite: 'useEnhancedLineCaps' is set to true */\n    enhancedLineCap?: IEnhancedLineCapConfig;\n}\n\n/** The configuration interface for the bar renderer */\nexport interface IBarRendererConfig extends IRendererConfig {\n    /** Set the padding on both sides of each bar */\n    padding?: number;\n    /** Set the class name to apply custom styles to the bars */\n    barClass?: string;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. BarHighlightStrategy */\n    highlightStrategy?: IHighlightStrategy;\n    /** Set the mouse cursor style to use when hovering over individual bars */\n    cursor?: string;\n    /** Enables pointer events on the bars */\n    pointerEvents?: boolean;\n    /** Set the stroke width in pixels */\n    strokeWidth?: number;\n    /** Enable the minimum bar thickness (BarRenderer.MIN_BAR_THICKNESS) */\n    enableMinBarThickness?: boolean;\n}\n\n/** The configuration interface for the area renderer */\nexport interface IAreaRendererConfig extends IRendererConfig {\n    /** Set the d3 curve algorithm to be used for drawing the area boundaries */\n    curveType?: CurveFactory;\n    /** Set the class name to apply custom styles to the areas */\n    areaClass?: string;\n    /** Enables the pointer cursor when data point markers are hovered */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** The width of the area path's stroke in pixels. Default is 1. */\n    strokeWidth?: number;\n}\n\nexport interface IRenderSeries {\n    dataSeries: IDataSeries;\n    containers: IRenderContainers;\n    scales: Scales;\n}\n\nexport interface IHighlightStrategy> {\n\n    getDataPointIndex(renderer: T, series: IDataSeries, values: { [p: string]: any }, scales: Scales): number;\n\n    highlightDataPoint(renderer: T, renderSeries: IRenderSeries,\n                       dataPointIndex: number, rendererSubject: Subject): void;\n\n    draw(renderer: T, renderSeries: IRenderSeries, rendererSubject: Subject): void;\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ILineSeriesAccessors.html":{"url":"interfaces/ILineSeriesAccessors.html","title":"interface - ILineSeriesAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ILineSeriesAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/line/line-accessors.ts\n        \n\n            \n                Description\n            \n            \n                Series accessors used in LineAccessors.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        color\n                                \n                                \n                                            Optional\n                                        marker\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        SeriesAccessor | undefined\n\n                    \n                \n                        \n                            \n                                Defined in src/renderers/line/line-accessors.ts:16\n                            \n                        \n                \n                    \n                        Additional custom keys to match the base interface \n\n                    \n                \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                    \n                                \n                                \n                                    \n                                        color:         SeriesAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SeriesAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Color of the series \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        marker\n                                    \n                                \n                                \n                                    \n                                        marker:         SeriesAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SeriesAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Marker for the series \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { defaultColorProvider, defaultMarkerProvider } from \"../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, SeriesAccessor } from \"../../core/common/types\";\nimport { IXYDataAccessors, XYAccessors } from \"../accessors/xy-accessors\";\n\nexport interface ILineDataAccessors extends IXYDataAccessors {\n    defined?: DataAccessor;\n}\n\n/**\n * Series accessors used in {@link LineAccessors}.\n */\nexport interface ILineSeriesAccessors {\n    /** Color of the series */\n    color?: SeriesAccessor;\n    /** Marker for the series */\n    marker?: SeriesAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: SeriesAccessor | undefined;\n}\n\nexport interface ILineAccessors extends IAccessors {\n    data: ILineDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series: ILineSeriesAccessors;\n}\n\n/**\n * Accessor class supporting the {@link LineRenderer}, that defines required inputs acquired from data points.\n * This class includes default behavior for all required fields. It's using properties of the same name for data accessors.\n * \n * If colorProvider or markerProvider is not defined in the constructor, every new instance of LineAccessors will instantiate it's own, so that has to be\n * kept in mind when configuring charts as it could cause potential color synchronization problems.\n *\n * See referenced data and series interfaces for required properties.\n */\nexport class LineAccessors extends XYAccessors implements ILineAccessors {\n    public data: ILineDataAccessors;\n    public series: ILineSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider(), private markerProvider = defaultMarkerProvider()) {\n        super();\n\n        this.data.defined = (d: any, i) => d.hasOwnProperty(\"defined\") ? d.defined : true;\n\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n            marker: this.markerProvider ? this.markerProvider.get : undefined,\n        };\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ILinearScales.html":{"url":"interfaces/ILinearScales.html","title":"interface - ILinearScales","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ILinearScales\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        x\n                                \n                                \n                                        y\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:         ScaleLinear\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ScaleLinear\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:         ScaleLinear\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ScaleLinear\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IMarkerInteractionConfig.html":{"url":"interfaces/IMarkerInteractionConfig.html","title":"interface - IMarkerInteractionConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IMarkerInteractionConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/types.ts\n        \n\n            \n                Description\n            \n            \n                The configuration interface for marker interaction \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        clickable\n                                \n                                \n                                        enabled\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clickable\n                                    \n                                \n                                \n                                    \n                                        clickable:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Enables the pointer style mouse cursor when data point markers are hovered \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enabled\n                                    \n                                \n                                \n                                    \n                                        enabled:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Enables mouse events on data point markers \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { CurveFactory } from \"d3-shape\";\nimport { Subject } from \"rxjs\";\n\nimport { Renderer } from \"../core/common/renderer\";\nimport { Scales } from \"../core/common/scales/types\";\nimport { IAccessors, IDataSeries, IRenderContainers, IRendererConfig, IRendererEventPayload } from \"../core/common/types\";\n\nimport { IRectangleAccessors } from \"./accessors/rectangle-accessors\";\nimport { BarRenderer } from \"./bar/bar-renderer\";\nimport { ILineAccessors } from \"./line/line-accessors\";\nimport { LineRenderer } from \"./line/line-renderer\";\n\nexport enum RenderState {\n    hidden = \"hidden\",\n    deemphasized = \"deemphasized\",\n    emphasized = \"emphasized\",\n    default = \"default\",\n}\n\nexport enum RenderLayerName {\n    background = \"background\",\n    data = \"data\",\n    unclippedData = \"unclipped-data\",\n    foreground = \"foreground\",\n}\n\n/** The configuration interface for marker interaction */\nexport interface IMarkerInteractionConfig {\n    /** Enables mouse events on data point markers */\n    enabled: boolean;\n    /** Enables the pointer style mouse cursor when data point markers are hovered */\n    clickable?: boolean;\n}\n\n/** The configuration interface for the enhanced line caps */\nexport interface IEnhancedLineCapConfig {\n    /** Set the stroke color */\n    stroke?: string;\n    /** Set the stroke width in pixels */\n    strokeWidth?: number;\n    /** Set the fill color */\n    fill?: string;\n    /** Set the radius in pixels */\n    radius?: number;\n}\n\n/** The configuration interface for the line renderer */\nexport interface ILineRendererConfig extends IRendererConfig {\n    /** Set the width of the line in pixels */\n    strokeWidth?: number;\n    /** Set the stroke-dasharray of the line, e.g. \"1,1\", \"2,2\", etc. */\n    strokeStyle?: string;\n    /** Set the stroke-linecap of the line, e.g. \"round\" */\n    strokeLinecap?: string;\n    /** Set the d3 curve algorithm to be used for drawing the lines */\n    curveType?: CurveFactory;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. LineSelectSeriesInteractionStrategy */\n    interactionStrategy?: IHighlightStrategy;\n    /** Configure the interaction behavior for markers */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** Set whether enhanced line caps should be displayed */\n    useEnhancedLineCaps?: boolean;\n    /** Optionally configure enhanced line caps. Prerequisite: 'useEnhancedLineCaps' is set to true */\n    enhancedLineCap?: IEnhancedLineCapConfig;\n}\n\n/** The configuration interface for the bar renderer */\nexport interface IBarRendererConfig extends IRendererConfig {\n    /** Set the padding on both sides of each bar */\n    padding?: number;\n    /** Set the class name to apply custom styles to the bars */\n    barClass?: string;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. BarHighlightStrategy */\n    highlightStrategy?: IHighlightStrategy;\n    /** Set the mouse cursor style to use when hovering over individual bars */\n    cursor?: string;\n    /** Enables pointer events on the bars */\n    pointerEvents?: boolean;\n    /** Set the stroke width in pixels */\n    strokeWidth?: number;\n    /** Enable the minimum bar thickness (BarRenderer.MIN_BAR_THICKNESS) */\n    enableMinBarThickness?: boolean;\n}\n\n/** The configuration interface for the area renderer */\nexport interface IAreaRendererConfig extends IRendererConfig {\n    /** Set the d3 curve algorithm to be used for drawing the area boundaries */\n    curveType?: CurveFactory;\n    /** Set the class name to apply custom styles to the areas */\n    areaClass?: string;\n    /** Enables the pointer cursor when data point markers are hovered */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** The width of the area path's stroke in pixels. Default is 1. */\n    strokeWidth?: number;\n}\n\nexport interface IRenderSeries {\n    dataSeries: IDataSeries;\n    containers: IRenderContainers;\n    scales: Scales;\n}\n\nexport interface IHighlightStrategy> {\n\n    getDataPointIndex(renderer: T, series: IDataSeries, values: { [p: string]: any }, scales: Scales): number;\n\n    highlightDataPoint(renderer: T, renderSeries: IRenderSeries,\n                       dataPointIndex: number, rendererSubject: Subject): void;\n\n    draw(renderer: T, renderSeries: IRenderSeries, rendererSubject: Subject): void;\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/INoopAccessors.html":{"url":"interfaces/INoopAccessors.html","title":"interface - INoopAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  INoopAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/accessors/noop-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                                \n                                        series\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        series\n                                    \n                                \n                                \n                                    \n                                        series:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Series level accessors - e.g. for colors, markers, etc. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {IAccessors} from \"../../core/common/types\";\n\n\nexport interface INoopAccessors extends IAccessors {\n    data: any;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series: any;\n}\n\nexport class NoopAccessors implements INoopAccessors {\n    public series: any;\n    public data: any;\n\n    constructor() {\n        this.series = undefined;\n        this.data = undefined;\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPopoverPluginConfig.html":{"url":"interfaces/IPopoverPluginConfig.html","title":"interface - IPopoverPluginConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IPopoverPluginConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/chart-popover-plugin.ts\n        \n\n            \n                Description\n            \n            \n                Configuration for the popover plugin \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        eventStreamId\n                                \n                                \n                                            Optional\n                                        interactionType\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        eventStreamId\n                                    \n                                \n                                \n                                    \n                                        eventStreamId:      | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :      | \n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    ID of the event stream the plugin will respond to \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        interactionType\n                                    \n                                \n                                \n                                    \n                                        interactionType:         InteractionType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         InteractionType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The type of interaction that will trigger the showing and hiding of the popovers \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import defaultsDeep from \"lodash/defaultsDeep\";\nimport pickBy from \"lodash/pickBy\";\nimport values from \"lodash/values\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\nimport { INTERACTION_DATA_POINTS_EVENT, INTERACTION_DATA_POINT_EVENT } from \"../../constants\";\nimport { ChartPlugin } from \"../common/chart-plugin\";\nimport { IChartEvent, IDataPoint, IDataPointsPayload, InteractionType } from \"../common/types\";\n\nimport { IElementPosition } from \"./types\";\n\n/** Configuration for the popover plugin */\nexport interface IPopoverPluginConfig {\n    /** ID of the event stream the plugin will respond to */\n    eventStreamId?: typeof INTERACTION_DATA_POINTS_EVENT | typeof INTERACTION_DATA_POINT_EVENT;\n    /** The type of interaction that will trigger the showing and hiding of the popovers */\n    interactionType?: InteractionType;\n}\n\n/**\n * This plugin listens for the INTERACTION_DATA_POINTS_EVENT by default and transforms received data into\n * popover inputs. The listened event can be configured using the 'config.eventStreamId' property.\n * The actual popover is handled by the ChartPopoverComponent.\n */\nexport class ChartPopoverPlugin extends ChartPlugin {\n    /** Info about the data point(s) received in the most recent interaction event */\n    public dataPoints: IDataPointsPayload;\n    /** Emits the popover's target position */\n    public updatePositionSubject = new Subject();\n    /** Emits an event indicating the popover should open */\n    public openPopoverSubject = new Subject();\n    /** Emits an event indicating the popover should close */\n    public closePopoverSubject = new Subject();\n    /** The target position of the popover */\n    public popoverTargetPosition: IElementPosition = {\n        top: 0,\n        left: 0,\n        width: 0,\n        height: 0,\n    };\n    /** The default plugin configuration */\n    public DEFAULT_CONFIG: IPopoverPluginConfig = {\n        eventStreamId: INTERACTION_DATA_POINTS_EVENT,\n        interactionType: InteractionType.MouseMove,\n    };\n\n    private isOpen = false;\n    private destroy$ = new Subject();\n\n    constructor(public config: IPopoverPluginConfig = {}) {\n        super();\n        this.config = defaultsDeep(this.config, this.DEFAULT_CONFIG);\n    }\n\n    public initialize(): void {\n        this.chart.getEventBus().getStream(this.config.eventStreamId as string).pipe(\n            takeUntil(this.destroy$)\n        ).subscribe((event: IChartEvent) => {\n            if (event.data.interactionType === this.config.interactionType) {\n                // here we handle data either of type IInteractionDataPointsEvent or IInteractionDataPointEvent\n                const dataPoints: IDataPointsPayload = event.data.dataPoints ?? { [event.data.dataPoint.seriesId]: event.data.dataPoint };\n                this.processDataPoints(dataPoints);\n            }\n        });\n    }\n\n    public destroy(): void {\n        if (this.updatePositionSubject) {\n            this.updatePositionSubject.complete();\n        }\n        if (this.openPopoverSubject) {\n            this.openPopoverSubject.complete();\n        }\n        if (this.closePopoverSubject) {\n            this.closePopoverSubject.complete();\n        }\n        if (this.destroy$) {\n            this.destroy$.next();\n            this.destroy$.complete();\n        }\n    }\n\n    protected getAbsolutePosition(valuesArray: any[]) {\n        const chartElement: any = this.chart.target?.node()?.parentNode; // the one above svg\n\n        if (!chartElement) {\n            throw new Error(\"Chart parent node is not defined\");\n        }\n\n        const dataPointsLeft = Math.min(...valuesArray.map(d => d.position.x));\n        const left = chartElement.offsetLeft + this.chart.getGrid().config().dimension.margin.left + dataPointsLeft;\n        const top = chartElement.offsetTop + this.chart.getGrid().config().dimension.margin.top;\n        // area for popovers is enlarged to cover the whole chart (top to bottom),\n        // so that we avoid collision of chart visualization and popover (by UX request)\n        return {\n            top: top,\n            left: left,\n            height: chartElement.offsetHeight,\n            width: Math.max(...valuesArray.map(d => d.position.x + (d.position.width || 0))) - dataPointsLeft,\n        };\n    }\n\n    private processDataPoints(dataPoints: IDataPointsPayload) {\n        const validDataPoints = pickBy(dataPoints, (d: IDataPoint) => d.index >= 0 && d.position);\n        const validDataPointsValues = values(validDataPoints);\n        if (validDataPointsValues.length > 0) {\n            this.popoverTargetPosition = this.getAbsolutePosition(validDataPointsValues);\n            this.dataPoints = validDataPoints;\n            // timeout is needed in order to successfully open popover on initial hover over the chart\n            setTimeout(() => {\n                this.updatePositionSubject.next(this.popoverTargetPosition);\n                if (!this.isOpen) {\n                    this.isOpen = true;\n                    this.openPopoverSubject.next();\n                }\n            });\n\n        } else {\n            // timeout is needed for symmetry of timing with above timeout for opening the popover\n            setTimeout(() => {\n                this.closePopoverSubject.next();\n                this.isOpen = false;\n            });\n        }\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPosition.html":{"url":"interfaces/IPosition.html","title":"interface - IPosition","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IPosition\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                Position on the chart\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        height\n                                \n                                \n                                            Optional\n                                        width\n                                \n                                \n                                        x\n                                \n                                \n                                        y\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                    \n                                \n                                \n                                    \n                                        height:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                    \n                                \n                                \n                                    \n                                        width:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRadialAccessors.html":{"url":"interfaces/IRadialAccessors.html","title":"interface - IRadialAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRadialAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/radial/accessors/radial-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                                \n                                        series\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         IRadialDataAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IRadialDataAccessors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        series\n                                    \n                                \n                                \n                                    \n                                        series:         IRadialSeriesAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IRadialSeriesAccessors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { defaultColorProvider } from \"../../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, SeriesAccessor } from \"../../../core/common/types\";\n\nexport interface IRadialDataAccessors {\n    value: DataAccessor;\n    color?: DataAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface IRadialSeriesAccessors {\n    color?: SeriesAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: SeriesAccessor | undefined;\n}\n\nexport interface IRadialAccessors extends IAccessors {\n    data: IRadialDataAccessors;\n    series: IRadialSeriesAccessors;\n}\n\nexport class RadialAccessors implements IRadialAccessors {\n    data: IRadialDataAccessors;\n    series: IRadialSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider()) {\n        this.data = {\n            value: (d: any) => Number.isFinite(d) ? d : d.value,\n        };\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n        };\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRadialDataAccessors.html":{"url":"interfaces/IRadialDataAccessors.html","title":"interface - IRadialDataAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRadialDataAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/radial/accessors/radial-accessors.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        color\n                                \n                                \n                                        value\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        DataAccessor | undefined\n\n                    \n                \n                        \n                            \n                                Defined in src/renderers/radial/accessors/radial-accessors.ts:6\n                            \n                        \n                \n                    \n                        Additional custom keys to match the base interface \n\n                    \n                \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                    \n                                \n                                \n                                    \n                                        color:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                    \n                                \n                                \n                                    \n                                        value:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { defaultColorProvider } from \"../../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, SeriesAccessor } from \"../../../core/common/types\";\n\nexport interface IRadialDataAccessors {\n    value: DataAccessor;\n    color?: DataAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface IRadialSeriesAccessors {\n    color?: SeriesAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: SeriesAccessor | undefined;\n}\n\nexport interface IRadialAccessors extends IAccessors {\n    data: IRadialDataAccessors;\n    series: IRadialSeriesAccessors;\n}\n\nexport class RadialAccessors implements IRadialAccessors {\n    data: IRadialDataAccessors;\n    series: IRadialSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider()) {\n        this.data = {\n            value: (d: any) => Number.isFinite(d) ? d : d.value,\n        };\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n        };\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRadialRendererConfig.html":{"url":"interfaces/IRadialRendererConfig.html","title":"interface - IRadialRendererConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRadialRendererConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IRendererConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        annularGrowth\n                                \n                                \n                                            Optional\n                                        annularPadding\n                                \n                                \n                                            Optional\n                                        annularWidth\n                                \n                                \n                                            Optional\n                                        cursor\n                                \n                                \n                                            Optional\n                                        enableDataPointHighlighting\n                                \n                                \n                                            Optional\n                                        enableSeriesHighlighting\n                                \n                                \n                                            Optional\n                                        maxThickness\n                                \n                                \n                                            Optional\n                                        strokeWidth\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        annularGrowth\n                                    \n                                \n                                \n                                    \n                                        annularGrowth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        annularPadding\n                                    \n                                \n                                \n                                    \n                                        annularPadding:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        annularWidth\n                                    \n                                \n                                \n                                    \n                                        annularWidth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cursor\n                                    \n                                \n                                \n                                    \n                                        cursor:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enableDataPointHighlighting\n                                    \n                                \n                                \n                                    \n                                        enableDataPointHighlighting:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enableSeriesHighlighting\n                                    \n                                \n                                \n                                    \n                                        enableSeriesHighlighting:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxThickness\n                                    \n                                \n                                \n                                    \n                                        maxThickness:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    annularGrowth is a percentage value to define annular width automatically.\nIt will grow until it reaches maxThickness.\nSet one to 0 to use annularWidth constant value instead \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        strokeWidth\n                                    \n                                \n                                \n                                    \n                                        strokeWidth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRadialScales.html":{"url":"interfaces/IRadialScales.html","title":"interface - IRadialScales","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRadialScales\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/scales/types.ts\n        \n\n\n            \n                Extends\n            \n            \n                        Scales\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        r\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        r\n                                    \n                                \n                                \n                                    \n                                        r:         IScale\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IScale\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { AxisScale } from \"d3-axis\";\n\nimport { IAccessors, IChartSeries } from \"../types\";\n\n/** Domain for series with empty or null data */\nexport const EMPTY_CONTINUOUS_DOMAIN = [0, 0];\n/** A reasonable non-data-driven domain for charts  */\nexport const NORMALIZED_DOMAIN = [0, 1];\n\n/** Signature for domain calculator */\nexport type DomainCalculator = (chartSeriesSet: IChartSeries[], scaleId: string, scale: IScale) => any[];\n\n/** Interface for scale formatters */\nexport interface IFormatters {\n    /** Formatter for tick labels */\n    tick?: Formatter;\n    /** Additional formatters */\n    [p: string]: Formatter | undefined;\n}\n\n/** Signature for label formatters */\nexport type Formatter = (value: T) => string;\n\n/** Dictionary of scale collections in index and array form */\nexport interface ScalesIndex {\n    [key: string]: {\n        /** Scale collection as an index */\n        index: { [scaleId: string]: IScale };\n        /** Scale collection as an array */\n        list: IScale[];\n    };\n}\n\n/** Dictionary of scales */\nexport type Scales = Record>;\n\nexport interface IXYScales extends Scales {\n    x: IScale;\n    y: IScale;\n}\n\nexport interface IRadialScales extends Scales {\n    r: IScale;\n}\n\n/** Interface for a scale */\nexport interface IScale {\n    /** The scale identifier */\n    readonly id: string;\n    readonly d3Scale: AxisScale; // TODO: maybe AxisScale is to narrow?\n\n    /** If this flag is enabled, the domain of this scale is not recalculated */\n    isDomainFixed?: boolean;\n    /** Method used to calculate the scale's domain */\n    domainCalculator?: DomainCalculator;\n    /** The scales formatters */\n    formatters: IFormatters;\n    /** If this flag is enabled, the domain has been recalculated with ticks in mind */\n    __domainCalculatedWithTicks?: boolean;\n\n    /**\n     * Determines if the scale's domain is continuous\n     *\n     * @returns {boolean} true if the scale's domain is continuous (numeric), false otherwise\n     */\n    isContinuous(): boolean;\n\n    /**\n     * Determines if the scale's domain is valid\n     *\n     * @returns {boolean} true if the scale's domain is valid, false otherwise\n     */\n    isDomainValid(): boolean;\n\n    /**\n     * Converts a value to its corresponding coordinate\n     *\n     * @param {T} value The value to be converted\n     * @returns {number} The coordinate corresponding to the specified value\n     */\n    convert(value: T): number;\n\n    /**\n     * Converts a coordinate to its corresponding value\n     *\n     * @param {number} coordinate The coordinate to be converted\n     * @returns {T} The value corresponding to the specified coordinate\n     */\n    invert(coordinate: number): T | undefined;\n\n    /**\n     * Gets the scale's range\n     *\n     * @returns {[number, number]} The scale's range\n     */\n    range(): [number, number];\n\n    /**\n     * Sets the scale's range\n     *\n     * @param {[number, number]} range The scale's new range\n     */\n    range(range: [number, number]): this;\n\n    /**\n     * Gets the scale's domain\n     *\n     * @returns {T[]} The scale's domain\n     */\n    domain(): T[];\n\n    /**\n     * Sets the scale's domain\n     *\n     * @param {T[]} domain The scale's new domain\n     */\n    domain(domain: T[]): this;\n\n    /**\n     * Shorthand method for setting the domain and isDomainFixed at once\n     *\n     * @param {T[]} domain The scale's fixed domain\n     */\n    fixDomain(domain: T[]): void;\n\n    /**\n     * Reverse the scale orientation by toggling the reversed flag\n     */\n    reverse(): this;\n\n    /**\n     * Getter for the reversed flag (see #reverse)\n     */\n    reversed(): boolean;\n\n    /**\n     * Setter for the reversed flag (see #reverse)\n     *\n     * @param reversed\n     */\n    reversed(reversed: boolean): this;\n}\n\n\nexport interface IBandScale extends IScale {\n    bandwidth(): number;\n}\n\nexport function isBandScale(scale: any): scale is IBandScale {\n    return typeof scale.bandwidth === \"function\";\n}\n\nexport interface IHasInnerScale extends IScale {\n    innerScale: IScale;\n}\n\nexport function hasInnerScale(scale: any): scale is IHasInnerScale {\n    return typeof scale.innerScale !== \"undefined\";\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRadialSeriesAccessors.html":{"url":"interfaces/IRadialSeriesAccessors.html","title":"interface - IRadialSeriesAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRadialSeriesAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/radial/accessors/radial-accessors.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        color\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        SeriesAccessor | undefined\n\n                    \n                \n                        \n                            \n                                Defined in src/renderers/radial/accessors/radial-accessors.ts:12\n                            \n                        \n                \n                    \n                        Additional custom keys to match the base interface \n\n                    \n                \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                    \n                                \n                                \n                                    \n                                        color:         SeriesAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SeriesAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { defaultColorProvider } from \"../../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, SeriesAccessor } from \"../../../core/common/types\";\n\nexport interface IRadialDataAccessors {\n    value: DataAccessor;\n    color?: DataAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface IRadialSeriesAccessors {\n    color?: SeriesAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: SeriesAccessor | undefined;\n}\n\nexport interface IRadialAccessors extends IAccessors {\n    data: IRadialDataAccessors;\n    series: IRadialSeriesAccessors;\n}\n\nexport class RadialAccessors implements IRadialAccessors {\n    data: IRadialDataAccessors;\n    series: IRadialSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider()) {\n        this.data = {\n            value: (d: any) => Number.isFinite(d) ? d : d.value,\n        };\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n        };\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRectangleAccessors.html":{"url":"interfaces/IRectangleAccessors.html","title":"interface - IRectangleAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRectangleAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/accessors/rectangle-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                                \n                                        series\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         IRectangleDataAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IRectangleDataAccessors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        series\n                                    \n                                \n                                \n                                    \n                                        series:         IRectangleSeriesAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IRectangleSeriesAccessors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DataAccessor, IAccessors, IDataAccessors, ISeriesAccessors, SeriesAccessor } from \"../../core/common/types\";\n\nexport interface IStartEndRangeAccessors extends IDataAccessors {\n    start: DataAccessor;\n    end: DataAccessor;\n}\n\nexport interface IValueThicknessAccessors extends IDataAccessors {\n    value: DataAccessor;\n    thickness: DataAccessor;\n}\n\nexport interface IRectangleDataAccessors extends IDataAccessors {\n    startX?: DataAccessor;\n    endX?: DataAccessor;\n    thicknessX?: DataAccessor;\n\n    startY?: DataAccessor;\n    endY?: DataAccessor;\n    thicknessY?: DataAccessor;\n}\n\nexport interface IRectangleSeriesAccessors extends ISeriesAccessors {\n    color?: SeriesAccessor;\n    marker?: SeriesAccessor;\n}\n\nexport interface IRectangleAccessors extends IAccessors {\n    data: IRectangleDataAccessors;\n    series: IRectangleSeriesAccessors;\n}\n\nexport class RectangleAccessors implements IRectangleAccessors {\n    data: IRectangleDataAccessors;\n    series: IRectangleSeriesAccessors;\n\n    constructor() {\n\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRectangleDataAccessors.html":{"url":"interfaces/IRectangleDataAccessors.html","title":"interface - IRectangleDataAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRectangleDataAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/accessors/rectangle-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IDataAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        endX\n                                \n                                \n                                            Optional\n                                        endY\n                                \n                                \n                                            Optional\n                                        startX\n                                \n                                \n                                            Optional\n                                        startY\n                                \n                                \n                                            Optional\n                                        thicknessX\n                                \n                                \n                                            Optional\n                                        thicknessY\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        endX\n                                    \n                                \n                                \n                                    \n                                        endX:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        endY\n                                    \n                                \n                                \n                                    \n                                        endY:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        startX\n                                    \n                                \n                                \n                                    \n                                        startX:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        startY\n                                    \n                                \n                                \n                                    \n                                        startY:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        thicknessX\n                                    \n                                \n                                \n                                    \n                                        thicknessX:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        thicknessY\n                                    \n                                \n                                \n                                    \n                                        thicknessY:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DataAccessor, IAccessors, IDataAccessors, ISeriesAccessors, SeriesAccessor } from \"../../core/common/types\";\n\nexport interface IStartEndRangeAccessors extends IDataAccessors {\n    start: DataAccessor;\n    end: DataAccessor;\n}\n\nexport interface IValueThicknessAccessors extends IDataAccessors {\n    value: DataAccessor;\n    thickness: DataAccessor;\n}\n\nexport interface IRectangleDataAccessors extends IDataAccessors {\n    startX?: DataAccessor;\n    endX?: DataAccessor;\n    thicknessX?: DataAccessor;\n\n    startY?: DataAccessor;\n    endY?: DataAccessor;\n    thicknessY?: DataAccessor;\n}\n\nexport interface IRectangleSeriesAccessors extends ISeriesAccessors {\n    color?: SeriesAccessor;\n    marker?: SeriesAccessor;\n}\n\nexport interface IRectangleAccessors extends IAccessors {\n    data: IRectangleDataAccessors;\n    series: IRectangleSeriesAccessors;\n}\n\nexport class RectangleAccessors implements IRectangleAccessors {\n    data: IRectangleDataAccessors;\n    series: IRectangleSeriesAccessors;\n\n    constructor() {\n\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRectangleSeriesAccessors.html":{"url":"interfaces/IRectangleSeriesAccessors.html","title":"interface - IRectangleSeriesAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRectangleSeriesAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/accessors/rectangle-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        ISeriesAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        color\n                                \n                                \n                                            Optional\n                                        marker\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                    \n                                \n                                \n                                    \n                                        color:         SeriesAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SeriesAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        marker\n                                    \n                                \n                                \n                                    \n                                        marker:         SeriesAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SeriesAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DataAccessor, IAccessors, IDataAccessors, ISeriesAccessors, SeriesAccessor } from \"../../core/common/types\";\n\nexport interface IStartEndRangeAccessors extends IDataAccessors {\n    start: DataAccessor;\n    end: DataAccessor;\n}\n\nexport interface IValueThicknessAccessors extends IDataAccessors {\n    value: DataAccessor;\n    thickness: DataAccessor;\n}\n\nexport interface IRectangleDataAccessors extends IDataAccessors {\n    startX?: DataAccessor;\n    endX?: DataAccessor;\n    thicknessX?: DataAccessor;\n\n    startY?: DataAccessor;\n    endY?: DataAccessor;\n    thicknessY?: DataAccessor;\n}\n\nexport interface IRectangleSeriesAccessors extends ISeriesAccessors {\n    color?: SeriesAccessor;\n    marker?: SeriesAccessor;\n}\n\nexport interface IRectangleAccessors extends IAccessors {\n    data: IRectangleDataAccessors;\n    series: IRectangleSeriesAccessors;\n}\n\nexport class RectangleAccessors implements IRectangleAccessors {\n    data: IRectangleDataAccessors;\n    series: IRectangleSeriesAccessors;\n\n    constructor() {\n\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRenderContainers.html":{"url":"interfaces/IRenderContainers.html","title":"interface - IRenderContainers","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRenderContainers\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                Dictionary of render container name to render container\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [name: string]:        D3Selection\n\n                    \n                \n                        \n                            \n                                Defined in src/core/common/types.ts:251\n                            \n                        \n                \n                    \n                        Container name as key to render container \n\n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRenderSeries.html":{"url":"interfaces/IRenderSeries.html","title":"interface - IRenderSeries","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRenderSeries\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        containers\n                                \n                                \n                                        dataSeries\n                                \n                                \n                                        scales\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        containers\n                                    \n                                \n                                \n                                    \n                                        containers:         IRenderContainers\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IRenderContainers\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dataSeries\n                                    \n                                \n                                \n                                    \n                                        dataSeries:         IDataSeries\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDataSeries\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scales\n                                    \n                                \n                                \n                                    \n                                        scales:         Scales\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Scales\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { CurveFactory } from \"d3-shape\";\nimport { Subject } from \"rxjs\";\n\nimport { Renderer } from \"../core/common/renderer\";\nimport { Scales } from \"../core/common/scales/types\";\nimport { IAccessors, IDataSeries, IRenderContainers, IRendererConfig, IRendererEventPayload } from \"../core/common/types\";\n\nimport { IRectangleAccessors } from \"./accessors/rectangle-accessors\";\nimport { BarRenderer } from \"./bar/bar-renderer\";\nimport { ILineAccessors } from \"./line/line-accessors\";\nimport { LineRenderer } from \"./line/line-renderer\";\n\nexport enum RenderState {\n    hidden = \"hidden\",\n    deemphasized = \"deemphasized\",\n    emphasized = \"emphasized\",\n    default = \"default\",\n}\n\nexport enum RenderLayerName {\n    background = \"background\",\n    data = \"data\",\n    unclippedData = \"unclipped-data\",\n    foreground = \"foreground\",\n}\n\n/** The configuration interface for marker interaction */\nexport interface IMarkerInteractionConfig {\n    /** Enables mouse events on data point markers */\n    enabled: boolean;\n    /** Enables the pointer style mouse cursor when data point markers are hovered */\n    clickable?: boolean;\n}\n\n/** The configuration interface for the enhanced line caps */\nexport interface IEnhancedLineCapConfig {\n    /** Set the stroke color */\n    stroke?: string;\n    /** Set the stroke width in pixels */\n    strokeWidth?: number;\n    /** Set the fill color */\n    fill?: string;\n    /** Set the radius in pixels */\n    radius?: number;\n}\n\n/** The configuration interface for the line renderer */\nexport interface ILineRendererConfig extends IRendererConfig {\n    /** Set the width of the line in pixels */\n    strokeWidth?: number;\n    /** Set the stroke-dasharray of the line, e.g. \"1,1\", \"2,2\", etc. */\n    strokeStyle?: string;\n    /** Set the stroke-linecap of the line, e.g. \"round\" */\n    strokeLinecap?: string;\n    /** Set the d3 curve algorithm to be used for drawing the lines */\n    curveType?: CurveFactory;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. LineSelectSeriesInteractionStrategy */\n    interactionStrategy?: IHighlightStrategy;\n    /** Configure the interaction behavior for markers */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** Set whether enhanced line caps should be displayed */\n    useEnhancedLineCaps?: boolean;\n    /** Optionally configure enhanced line caps. Prerequisite: 'useEnhancedLineCaps' is set to true */\n    enhancedLineCap?: IEnhancedLineCapConfig;\n}\n\n/** The configuration interface for the bar renderer */\nexport interface IBarRendererConfig extends IRendererConfig {\n    /** Set the padding on both sides of each bar */\n    padding?: number;\n    /** Set the class name to apply custom styles to the bars */\n    barClass?: string;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. BarHighlightStrategy */\n    highlightStrategy?: IHighlightStrategy;\n    /** Set the mouse cursor style to use when hovering over individual bars */\n    cursor?: string;\n    /** Enables pointer events on the bars */\n    pointerEvents?: boolean;\n    /** Set the stroke width in pixels */\n    strokeWidth?: number;\n    /** Enable the minimum bar thickness (BarRenderer.MIN_BAR_THICKNESS) */\n    enableMinBarThickness?: boolean;\n}\n\n/** The configuration interface for the area renderer */\nexport interface IAreaRendererConfig extends IRendererConfig {\n    /** Set the d3 curve algorithm to be used for drawing the area boundaries */\n    curveType?: CurveFactory;\n    /** Set the class name to apply custom styles to the areas */\n    areaClass?: string;\n    /** Enables the pointer cursor when data point markers are hovered */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** The width of the area path's stroke in pixels. Default is 1. */\n    strokeWidth?: number;\n}\n\nexport interface IRenderSeries {\n    dataSeries: IDataSeries;\n    containers: IRenderContainers;\n    scales: Scales;\n}\n\nexport interface IHighlightStrategy> {\n\n    getDataPointIndex(renderer: T, series: IDataSeries, values: { [p: string]: any }, scales: Scales): number;\n\n    highlightDataPoint(renderer: T, renderSeries: IRenderSeries,\n                       dataPointIndex: number, rendererSubject: Subject): void;\n\n    draw(renderer: T, renderSeries: IRenderSeries, rendererSubject: Subject): void;\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRenderStateData.html":{"url":"interfaces/IRenderStateData.html","title":"interface - IRenderStateData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRenderStateData\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                Information about the render state of a series\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        series\n                                \n                                \n                                        seriesId\n                                \n                                \n                                        state\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        series\n                                    \n                                \n                                \n                                    \n                                        series:         IChartSeries\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IChartSeries\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Series \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        seriesId\n                                    \n                                \n                                \n                                    \n                                        seriesId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Series identifier \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                    \n                                \n                                \n                                    \n                                        state:         RenderState\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         RenderState\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Series render state \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRenderStatesIndex.html":{"url":"interfaces/IRenderStatesIndex.html","title":"interface - IRenderStatesIndex","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRenderStatesIndex\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/chart-assists/types.ts\n        \n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [seriesId: string]:        ChartAssistRenderStateData\n\n                    \n                \n                        \n                            \n                                Defined in src/core/chart-assists/types.ts:70\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import { RenderState } from \"../../renderers/types\";\nimport { IAccessors, IChart, IChartAssistSeries, IChartSeries, IRenderStateData } from \"../common/types\";\n\n/**\n * Interface representing the spark chart assist's\n * association between one of its charts and a series set\n */\nexport interface ISpark {\n    chartSeriesSet: IChartAssistSeries[];\n    id?: string;\n    chart?: IChart;\n}\n\n/**\n * Interface representing an assistant that aids in chart usage\n */\nexport interface IChartAssist {\n    /**\n     * Updates the series set for the chart assist's associated chart\n     *\n     * @param inputSeriesSet The updated set of series\n     */\n    update(inputSeriesSet: IChartAssistSeries[]): void;\n\n    /**\n     * Gets the current highlighted value for the specified series\n     *\n     * @param {IChartSeries} chartSeries The chart series to get the highlighted value for\n     * @param {string} scaleKey The key for the datapoint value scale\n     * @param {string} [formatterName] The name of the formatter if a custom formatter name is set on the scale\n     *\n     * @returns {string} The highlighted value\n     */\n    getHighlightedValue(chartSeries: IChartSeries, scaleKey: string, formatterName?: string): string | number | undefined;\n\n    /**\n     * Returns visible series that are represented by a legend\n     */\n    getVisibleSeriesWithLegend(): IChartAssistSeries[];\n}\n\n/** Event types that can be emitted from a chart assist */\nexport enum ChartAssistEventType {\n    ToggleSeries = \"ToggleSeries\",\n    ResetVisibleSeries = \"ResetVisibleSeries\",\n    EmphasizeSeries = \"EmphasizeSeries\",\n}\n\n/** Interface for chart assist events */\nexport interface IChartAssistEvent {\n    type: ChartAssistEventType;\n    payload: any;\n}\n\n/**\n * Legend interaction assist uses this class to present the state that consists of emphasisState+visible as one state\n */\nexport class ChartAssistRenderStateData implements IRenderStateData {\n    constructor(public seriesId: string,\n                public series: IChartAssistSeries,\n                public emphasisState = RenderState.default,\n                public visible = true) {\n    }\n\n    get state(): RenderState {\n        return this.visible ? this.emphasisState : RenderState.hidden;\n    }\n}\n\nexport interface IRenderStatesIndex {\n    [seriesId: string]: ChartAssistRenderStateData;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRendererConfig.html":{"url":"interfaces/IRendererConfig.html","title":"interface - IRendererConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRendererConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        ignoreForDomainCalculation\n                                \n                                \n                                            Optional\n                                        interactive\n                                \n                                \n                                            Optional\n                                        stateStyles\n                                \n                                \n                                            Optional\n                                        transitionDuration\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ignoreForDomainCalculation\n                                    \n                                \n                                \n                                    \n                                        ignoreForDomainCalculation:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Excludes series from scale domain calculations \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        interactive\n                                    \n                                \n                                \n                                    \n                                        interactive:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stateStyles\n                                    \n                                \n                                \n                                    \n                                        stateStyles:         Record>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Record>\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        transitionDuration\n                                    \n                                \n                                \n                                    \n                                        transitionDuration:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRendererEventPayload.html":{"url":"interfaces/IRendererEventPayload.html","title":"interface - IRendererEventPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRendererEventPayload\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                Payload for events regarding a data point\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                                \n                                        eventName\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Information about the data point \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        eventName\n                                    \n                                \n                                \n                                    \n                                        eventName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Name of the event \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IScale.html":{"url":"interfaces/IScale.html","title":"interface - IScale","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IScale\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/scales/types.ts\n        \n\n            \n                Description\n            \n            \n                Interface for a scale \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        __domainCalculatedWithTicks\n                                \n                                \n                                        d3Scale\n                                \n                                \n                                            Optional\n                                        domainCalculator\n                                \n                                \n                                        formatters\n                                \n                                \n                                        id\n                                \n                                \n                                            Optional\n                                        isDomainFixed\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    convert\n                                \n                                \n                                    domain\n                                \n                                \n                                    domain\n                                \n                                \n                                    fixDomain\n                                \n                                \n                                    invert\n                                \n                                \n                                    isContinuous\n                                \n                                \n                                    isDomainValid\n                                \n                                \n                                    range\n                                \n                                \n                                    range\n                                \n                                \n                                    reverse\n                                \n                                \n                                    reversed\n                                \n                                \n                                    reversed\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            convert\n                        \n                        \n                    \n                \n            \n            \n                \nconvert(value: T)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/types.ts:81\n                \n            \n\n\n            \n                \n                    Converts a value to its corresponding coordinate\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The value to be converted\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The coordinate corresponding to the specified value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \ndomain()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/types.ts:110\n                \n            \n\n\n            \n                \n                    Gets the scale's domain\n\n\n                    \n                    \n                    \n                        Returns :     T[]\n\n                    \n                    \n                        The scale's domain\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \ndomain(domain: T[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/types.ts:117\n                \n            \n\n\n            \n                \n                    Sets the scale's domain\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scale's new domain\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            fixDomain\n                        \n                        \n                    \n                \n            \n            \n                \nfixDomain(domain: T[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/types.ts:124\n                \n            \n\n\n            \n                \n                    Shorthand method for setting the domain and isDomainFixed at once\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scale's fixed domain\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            invert\n                        \n                        \n                    \n                \n            \n            \n                \ninvert(coordinate: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/types.ts:89\n                \n            \n\n\n            \n                \n                    Converts a coordinate to its corresponding value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    coordinate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The coordinate to be converted\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        The value corresponding to the specified coordinate\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isContinuous\n                        \n                        \n                    \n                \n            \n            \n                \nisContinuous()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/types.ts:66\n                \n            \n\n\n            \n                \n                    Determines if the scale's domain is continuous\n\n\n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        true if the scale's domain is continuous (numeric), false otherwise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isDomainValid\n                        \n                        \n                    \n                \n            \n            \n                \nisDomainValid()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/types.ts:73\n                \n            \n\n\n            \n                \n                    Determines if the scale's domain is valid\n\n\n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        true if the scale's domain is valid, false otherwise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            range\n                        \n                        \n                    \n                \n            \n            \n                \nrange()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/types.ts:96\n                \n            \n\n\n            \n                \n                    Gets the scale's range\n\n\n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            range\n                        \n                        \n                    \n                \n            \n            \n                \nrange(range: [number, number])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/types.ts:103\n                \n            \n\n\n            \n                \n                    Sets the scale's range\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                            [number, number]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scale's new range\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reverse\n                        \n                        \n                    \n                \n            \n            \n                \nreverse()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/types.ts:129\n                \n            \n\n\n            \n                \n                    Reverse the scale orientation by toggling the reversed flag\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \nreversed()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/types.ts:134\n                \n            \n\n\n            \n                \n                    Getter for the reversed flag (see #reverse)\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \nreversed(reversed: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/types.ts:141\n                \n            \n\n\n            \n                \n                    Setter for the reversed flag (see #reverse)\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reversed\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        __domainCalculatedWithTicks\n                                    \n                                \n                                \n                                    \n                                        __domainCalculatedWithTicks:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If this flag is enabled, the domain has been recalculated with ticks in mind \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        d3Scale\n                                    \n                                \n                                \n                                    \n                                        d3Scale:         AxisScale\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AxisScale\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        domainCalculator\n                                    \n                                \n                                \n                                    \n                                        domainCalculator:         DomainCalculator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DomainCalculator\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Method used to calculate the scale's domain \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        formatters\n                                    \n                                \n                                \n                                    \n                                        formatters:         IFormatters\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IFormatters\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The scales formatters \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The scale identifier \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isDomainFixed\n                                    \n                                \n                                \n                                    \n                                        isDomainFixed:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If this flag is enabled, the domain of this scale is not recalculated \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { AxisScale } from \"d3-axis\";\n\nimport { IAccessors, IChartSeries } from \"../types\";\n\n/** Domain for series with empty or null data */\nexport const EMPTY_CONTINUOUS_DOMAIN = [0, 0];\n/** A reasonable non-data-driven domain for charts  */\nexport const NORMALIZED_DOMAIN = [0, 1];\n\n/** Signature for domain calculator */\nexport type DomainCalculator = (chartSeriesSet: IChartSeries[], scaleId: string, scale: IScale) => any[];\n\n/** Interface for scale formatters */\nexport interface IFormatters {\n    /** Formatter for tick labels */\n    tick?: Formatter;\n    /** Additional formatters */\n    [p: string]: Formatter | undefined;\n}\n\n/** Signature for label formatters */\nexport type Formatter = (value: T) => string;\n\n/** Dictionary of scale collections in index and array form */\nexport interface ScalesIndex {\n    [key: string]: {\n        /** Scale collection as an index */\n        index: { [scaleId: string]: IScale };\n        /** Scale collection as an array */\n        list: IScale[];\n    };\n}\n\n/** Dictionary of scales */\nexport type Scales = Record>;\n\nexport interface IXYScales extends Scales {\n    x: IScale;\n    y: IScale;\n}\n\nexport interface IRadialScales extends Scales {\n    r: IScale;\n}\n\n/** Interface for a scale */\nexport interface IScale {\n    /** The scale identifier */\n    readonly id: string;\n    readonly d3Scale: AxisScale; // TODO: maybe AxisScale is to narrow?\n\n    /** If this flag is enabled, the domain of this scale is not recalculated */\n    isDomainFixed?: boolean;\n    /** Method used to calculate the scale's domain */\n    domainCalculator?: DomainCalculator;\n    /** The scales formatters */\n    formatters: IFormatters;\n    /** If this flag is enabled, the domain has been recalculated with ticks in mind */\n    __domainCalculatedWithTicks?: boolean;\n\n    /**\n     * Determines if the scale's domain is continuous\n     *\n     * @returns {boolean} true if the scale's domain is continuous (numeric), false otherwise\n     */\n    isContinuous(): boolean;\n\n    /**\n     * Determines if the scale's domain is valid\n     *\n     * @returns {boolean} true if the scale's domain is valid, false otherwise\n     */\n    isDomainValid(): boolean;\n\n    /**\n     * Converts a value to its corresponding coordinate\n     *\n     * @param {T} value The value to be converted\n     * @returns {number} The coordinate corresponding to the specified value\n     */\n    convert(value: T): number;\n\n    /**\n     * Converts a coordinate to its corresponding value\n     *\n     * @param {number} coordinate The coordinate to be converted\n     * @returns {T} The value corresponding to the specified coordinate\n     */\n    invert(coordinate: number): T | undefined;\n\n    /**\n     * Gets the scale's range\n     *\n     * @returns {[number, number]} The scale's range\n     */\n    range(): [number, number];\n\n    /**\n     * Sets the scale's range\n     *\n     * @param {[number, number]} range The scale's new range\n     */\n    range(range: [number, number]): this;\n\n    /**\n     * Gets the scale's domain\n     *\n     * @returns {T[]} The scale's domain\n     */\n    domain(): T[];\n\n    /**\n     * Sets the scale's domain\n     *\n     * @param {T[]} domain The scale's new domain\n     */\n    domain(domain: T[]): this;\n\n    /**\n     * Shorthand method for setting the domain and isDomainFixed at once\n     *\n     * @param {T[]} domain The scale's fixed domain\n     */\n    fixDomain(domain: T[]): void;\n\n    /**\n     * Reverse the scale orientation by toggling the reversed flag\n     */\n    reverse(): this;\n\n    /**\n     * Getter for the reversed flag (see #reverse)\n     */\n    reversed(): boolean;\n\n    /**\n     * Setter for the reversed flag (see #reverse)\n     *\n     * @param reversed\n     */\n    reversed(reversed: boolean): this;\n}\n\n\nexport interface IBandScale extends IScale {\n    bandwidth(): number;\n}\n\nexport function isBandScale(scale: any): scale is IBandScale {\n    return typeof scale.bandwidth === \"function\";\n}\n\nexport interface IHasInnerScale extends IScale {\n    innerScale: IScale;\n}\n\nexport function hasInnerScale(scale: any): scale is IHasInnerScale {\n    return typeof scale.innerScale !== \"undefined\";\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IScaleSVGElement.html":{"url":"interfaces/IScaleSVGElement.html","title":"interface - IScaleSVGElement","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IScaleSVGElement\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/xy-grid.ts\n        \n\n            \n                Description\n            \n            \n                Locally used interface for passing scales and associated SVG elements\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        element\n                                \n                                \n                                        scaleId\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        element\n                                    \n                                \n                                \n                                    \n                                        element:         D3Selection\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         D3Selection\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scaleId\n                                    \n                                \n                                \n                                    \n                                        scaleId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { axisBottom, axisLeft, axisRight, axisTop } from \"d3-axis\";\nimport { select } from \"d3-selection\";\nimport clone from \"lodash/clone\";\nimport each from \"lodash/each\";\nimport isEmpty from \"lodash/isEmpty\";\nimport isNil from \"lodash/isNil\";\nimport isUndefined from \"lodash/isUndefined\";\nimport uniq from \"lodash/uniq\";\nimport { takeUntil } from \"rxjs/operators\";\n\nimport { AXES_STYLE_CHANGE_EVENT, DESTROY_EVENT, IGNORE_INTERACTION_CLASS, SERIES_STATE_CHANGE_EVENT } from \"../../constants\";\nimport { RenderState } from \"../../renderers/types\";\nimport { MouseInteractiveArea } from \"../common/mouse-interactive-area\";\nimport { BandScale } from \"../common/scales/band-scale\";\nimport { getAutomaticDomain, getAutomaticDomainWithTicks } from \"../common/scales/domain-calculation/automatic-domain\";\nimport { LinearScale } from \"../common/scales/linear-scale\";\nimport { IBandScale, IScale, ScalesIndex } from \"../common/scales/types\";\nimport { D3Selection, IAxesStyleChangeEventPayload, IChart, IChartEvent, IChartPlugin, IRenderStateData } from \"../common/types\";\nimport { InteractionLabelPlugin } from \"../plugins/interaction/interaction-label-plugin\";\nimport { InteractionLinePlugin } from \"../plugins/interaction/interaction-line-plugin\";\nimport { MouseInteractiveAreaPlugin } from \"../plugins/mouse-interactive-area-plugin\";\n\nimport { XYGridConfig } from \"./config/xy-grid-config\";\nimport { Grid } from \"./grid\";\nimport { IAllAround, IAxis, IAxisConfig, IDimensionConfig, IGrid, IXYGridConfig, TextOverflowHandler } from \"./types\";\n\n/**\n * Locally used interface for passing scales and associated SVG elements\n *\n * @internal\n */\ninterface IScaleSVGElement {\n    scaleId: string;\n    element: D3Selection;\n}\n\nexport class XYGrid extends Grid implements IGrid {\n    public static TICK_LABEL_OVERFLOW_DEBOUNCE_INTERVAL = 200;\n\n    protected axisX: IAxis = {};\n    protected axisYLeft: IAxis = {};\n    protected axisYRight: IAxis = {};\n    protected gridY: IAxis = {};\n    protected gridX: IAxis = {};\n\n    private _bottomScaleId?: string;\n    private _leftScaleId?: string;\n    private _rightScaleId: string;\n    private reconcileMarginsDebounce: any;\n    // map of scale id to pending debounce timeout\n    private handleTickLabelOverflowDebounceIndex: Record = {};\n\n    /**\n     * Returns the id of the bottom axis scale\n     */\n    public get bottomScaleId(): string | undefined {\n        if (this._bottomScaleId) {\n            return this._bottomScaleId;\n        }\n        if (!isEmpty(this.scales)) {\n            return this.scales[\"x\"].list[0].id;\n        }\n    }\n\n    /**\n     * Sets the id of the bottom axis scale\n     */\n    public set bottomScaleId(id: string | undefined) {\n        this._bottomScaleId = id;\n    }\n\n    /**\n     * Returns the id of the left axis scale\n     */\n    public get leftScaleId(): string | undefined {\n        if (this._leftScaleId) {\n            return this._leftScaleId;\n        }\n        if (!isEmpty(this.scales)) {\n            return this.scales[\"y\"].list[0].id;\n        }\n    }\n\n    /**\n     * Sets the id of the left axis scale\n     */\n    public set leftScaleId(id: string | undefined) {\n        this._leftScaleId = id;\n    }\n\n    /**\n     * Returns the id of the right axis scale\n     */\n    public get rightScaleId() {\n        return this._rightScaleId;\n    }\n\n    /**\n     * Sets the id of the right axis scale\n     */\n    public set rightScaleId(id: string) {\n        this._rightScaleId = id;\n    }\n\n    /** @ignore */\n    public set scales(scales: ScalesIndex) {\n        this._scales = scales;\n\n        if (this._scales) {\n            Object.keys(this._scales).forEach((scaleKey) => {\n                // Defaulting to left\n                let config: IAxisConfig = this.config().axis.left;\n                let axisGenerator: any;\n                if (scaleKey !== \"x\" && scaleKey !== \"y\") {\n                    return;\n                }\n                this._scales[scaleKey]?.list?.filter((scale) => scale instanceof LinearScale).forEach((scale) => {\n                    if (scale?.id === this.leftScaleId) {\n                        config = this.config().axis.left;\n                        axisGenerator = axisLeft;\n                    } else if (scale?.id === this.rightScaleId) {\n                        config = this.config().axis.right;\n                        axisGenerator = axisRight;\n                    } else if (scale?.id === this.bottomScaleId) {\n                        config = this.config().axis.bottom;\n                        axisGenerator = axisBottom;\n                    }\n                    if (scale.domainCalculator === getAutomaticDomain && config.gridTicks) {\n                        scale.__domainCalculatedWithTicks = true;\n                        scale.domainCalculator = getAutomaticDomainWithTicks(config, axisGenerator);\n                    }\n                });\n            });\n        }\n    }\n\n    /** @ignore */\n    public get scales(): ScalesIndex {\n        return this._scales;\n    }\n\n    /** See {@link IGrid#config} */\n    public config(): IXYGridConfig;\n    /** See {@link IGrid#config} */\n    public config(config: IXYGridConfig): this;\n    /** See {@link IGrid#config} */\n    public config(config?: IXYGridConfig): any {\n        if (config === undefined) {\n            return this._config;\n        }\n        this._config = config;\n        return this;\n    }\n\n    constructor(config?: IXYGridConfig) {\n        super();\n        this.config(config || new XYGridConfig());\n    }\n\n    /** See {@link IGrid#build} */\n    public build(): IGrid {\n        super.build();\n        if (this.config().interactive) {\n            this.interactiveArea = this.renderingArea;\n        }\n\n        this.buildAxes(this.gridElementsLayer);\n        this.recalculateMargins(this.container);\n\n        const untilDestroy = () => takeUntil(this.eventBus.getStream(DESTROY_EVENT));\n        this.eventBus.getStream(SERIES_STATE_CHANGE_EVENT).pipe(untilDestroy()).subscribe((e: IChartEvent) => {\n            const axesStyles = this.handleSeriesStateChange(e);\n\n            this.eventBus.getStream(AXES_STYLE_CHANGE_EVENT).next({ data: axesStyles } as IChartEvent);\n        });\n\n        return this;\n    }\n\n    /**\n     * Handle axis opacity when emphasizing/deemphasizing chart series\n     *\n     * @param e\n     * @private\n     */\n    public handleSeriesStateChange(e: IChartEvent) {\n        if (!this.rightScaleId) {\n            return;\n        }\n\n        const axes: IScaleSVGElement[] = [\n            { scaleId: this.leftScaleId as string, element: this.axisYLeft.group },\n            { scaleId: this.rightScaleId, element: this.axisYRight?.group },\n        ];\n\n        const axesStyles = this.calculateAxesStyles(e, axes);\n\n        for (const a of axes) {\n            if (a.scaleId) {\n                a.element.attrs(axesStyles[a.scaleId]);\n            }\n        }\n\n        return axesStyles;\n    }\n\n    /**\n     * Return opacity for each axis\n     *\n     * @param e\n     * @param axes\n     * @private\n     */\n    private calculateAxesStyles(e: IChartEvent, axes: IScaleSVGElement[]): Record> {\n        const renderStates = e.data as IRenderStateData[];\n\n        const emphasizedSeries = renderStates\n            .filter(rs => rs.state === RenderState.emphasized && rs.series)\n            .map(rs => rs.series);\n\n        if (emphasizedSeries.length > 0) {\n            const emphasizedYScales = uniq(emphasizedSeries.map(s => s?.scales[\"y\"] as IScale).filter(s => !!s));\n            if (emphasizedYScales.length  {\n                        acc[next.scaleId] = { opacity: emphasizedYScale.id === next.scaleId ? 1 : 0.1 };\n                        return acc;\n                    }, {} as Record>);\n                }\n            }\n            return {};\n        } else {\n            return axes.reduce((acc, next) => {\n                acc[next.scaleId] = { opacity: 1 };\n                return acc;\n            }, {} as Record>);\n        }\n    }\n\n    /** See {@link IGrid#buildPlugins} */\n    public buildPlugins(chart: IChart): IChartPlugin[] {\n        const plugins: IChartPlugin[] = [];\n\n        const config = this.config();\n        if (config.interactive) {\n            plugins.push(new MouseInteractiveAreaPlugin(\n                new MouseInteractiveArea(this.getLasagna().getContainer(), this.getInteractiveArea(), config.cursor, config.dimension.margin)));\n        }\n\n        if (config.interactionPlugins) {\n            plugins.push(new InteractionLinePlugin());\n            plugins.push(new InteractionLabelPlugin());\n        }\n\n        return plugins;\n    }\n\n    /** See {@link IGrid#update} */\n    public update(): IGrid {\n        super.update();\n\n        this.updateAxes();\n        this.handleMarginUpdate();\n\n        return this;\n    }\n\n    /** @ignore */\n    public drawTicks(config: IAxisConfig, axis: IAxis, scale: IScale, axisGenerator: any) {\n        if (config.visible) {\n            const bottomLabelAxis = axisGenerator(scale.d3Scale)\n                .ticks(config.approximateTicks)\n                .tickSize(0)\n                .tickFormat(scale.formatters[\"tick\"]);\n\n            axis.labelGroup\n                .call(bottomLabelAxis);\n            let tickAxis;\n            if (scale instanceof BandScale) {\n                tickAxis = axisGenerator(scale.copyToLinear().d3Scale)\n                    .tickSize(config.tickSize)\n                    .tickValues(scale.bandTicks())\n                    .tickFormat(() => \"\");\n            } else {\n                tickAxis = axisGenerator(scale.d3Scale)\n                    .tickSize(config.tickSize)\n                    .tickFormat(() => \"\");\n                tickAxis.ticks(config.approximateTicks);\n            }\n            axis.tickGroup.call(tickAxis);\n\n            this.adjustAxisTicks(axis.labelGroup, scale);\n        } else {\n            axis.labelGroup.selectAll(\"*\").remove();\n            axis.tickGroup.selectAll(\"*\").remove();\n        }\n    }\n\n    /** @ignore */\n    public drawGrids(config: IAxisConfig, axis: IAxis, axisGenerator: any, scale: IScale, size: number) {\n        const modifyZeroLines = (gridGroupSelection: any) =>\n            gridGroupSelection\n                .selectAll(\".tick line\")\n                .classed(\"nui-zero-line\", (d: any) => d === 0);\n\n        const leftGridLines = axisGenerator(scale.d3Scale)\n            .tickSize(size)\n            .tickFormat(() => \"\")\n            .ticks(config.approximateTicks);\n\n        if (config.gridTicks) {\n            const gridSelection = axis.tickGroup.call(leftGridLines);\n            modifyZeroLines(gridSelection);\n        } else {\n            axis.tickGroup.selectAll(\"*\").remove();\n        }\n    }\n\n    /** See {@link IGrid#updateRanges} */\n    public updateRanges(): IGrid {\n        if (isEmpty(this.scales)) {\n            return this;\n        }\n\n        const dimension = this.config().dimension;\n        const padding = dimension.padding;\n\n        if (this.scales.x) {\n            each(this.scales.x.list, xScale => {\n                xScale.range([padding.left, dimension.width() - padding.right]);\n            });\n        }\n        if (this.scales.y) {\n            each(this.scales.y.list, yScale => {\n                yScale.range([dimension.height() - padding.bottom, padding.top]);\n            });\n        }\n\n        super.updateRanges();\n        return this;\n    }\n\n    protected updateXAxis() {\n        const xScale = this.bottomScaleId ? this.scales[\"x\"].index[this.bottomScaleId] : undefined;\n        const axis = this.config().axis;\n\n        if (!xScale) {\n            throw new Error(\"xScale is not defined\");\n        }\n\n        this.axisX.group.attr(\"transform\", `translate(0, ${this.config().dimension.height()})`);\n        // Additional transform to not overlap with ticks\n        this.axisX.labelGroup.attr(\"transform\", `translate(0, ${axis.bottom.tickSize})`);\n\n        this.drawTicks(axis.bottom, this.axisX, xScale, axisBottom);\n        this.drawGrids(axis.bottom, this.gridX, axisTop, xScale, this.config().dimension.height());\n\n        this.gridX.tickGroup\n            .attr(\"transform\", `translate(0, ${this.config().dimension.height()})`);\n    }\n\n    protected updateYAxes() {\n        const axis = this.config().axis;\n        const yLeftScale = this.leftScaleId ? this.scales[\"y\"].index[this.leftScaleId] : undefined;\n\n        if (!yLeftScale) {\n            throw new Error(\"yLeftScale is not defined\");\n        }\n\n        this.axisYLeft.labelGroup.attr(\n            \"transform\",\n            `translate(${-axis.left.tickSize - axis.left.padding}, 0)`\n        );\n\n        this.drawTicks(axis.left, this.axisYLeft, yLeftScale, axisLeft);\n        this.drawGrids(\n            axis.left,\n            this.gridY,\n            axisRight,\n            yLeftScale,\n            this.config().dimension.width()\n        );\n\n        if (this.rightScaleId) {\n            const yRightScale = this.scales[\"y\"].index[this.rightScaleId];\n            const rightScaleLabelX = axis.right.padding + this.config().dimension.width() + axis.right.tickSize;\n            this.axisYRight.labelGroup.attr(\n                \"transform\",\n                `translate(${rightScaleLabelX}, 0)`\n            );\n            this.axisYRight.tickGroup.attr(\n                \"transform\",\n                `translate(${this.config().dimension.width()}, 0)`\n            );\n            this.drawTicks(axis.right, this.axisYRight, yRightScale, axisRight);\n        }\n    }\n\n    protected updateAxes(): void {\n        if (!this.target()) {\n            return;\n        }\n\n        this.updateXAxis();\n        this.updateYAxes();\n    }\n\n    protected adjustAxisTicks(labelGroup: D3Selection, scale: IScale) {\n        const textOfTicks: HTMLElement[] = [];\n\n        labelGroup.attr(\"cursor\", \"default\");\n\n        labelGroup.selectAll(\"g\").each(function () {\n            select(this).classed(\"sw-hidden\", false).classed(\"tick-hidden-text\", false);\n            textOfTicks.push(this);\n        });\n\n        const toRemove = this.filterRepeatedElements(textOfTicks);\n        toRemove.forEach((group: HTMLElement) => {\n            select(group).classed(\"tick-hidden-text\", true);\n        });\n\n        const allAxisLabels = this.selectAllAxisLabels(labelGroup);\n        allAxisLabels.forEach((group: HTMLElement) => {\n            const groupSelection = select(group);\n            // zero-out the d3-provided x position of all labels since we're manually translating the x position of the entire group;\n            // add IGNORE_INTERACTION_CLASS so that mouse events used for displaying the title don't propagate from the mouse-interactive-area\n            groupSelection.select(\"text\").attr(\"x\", 0).classed(IGNORE_INTERACTION_CLASS, true);\n            groupSelection.classed(\"pointer-events\", true);\n            if (groupSelection.select(\"title\").empty()) {\n                const datum = groupSelection.data()[0];\n                const titleText = (scale.formatters[\"tick\"] ? scale.formatters[\"tick\"](datum) : datum) as string;\n                groupSelection.append(\"title\").text(titleText);\n            }\n        });\n\n        this.handleTickLabelOverflow(labelGroup, scale, allAxisLabels);\n    }\n\n    protected handleTickLabelOverflow(labelGroup: D3Selection, scale: IScale, axisLabels: HTMLElement[]) {\n        const axisConfig = this.config().axis;\n        if (scale.id === this.bottomScaleId && (scale.isContinuous() || !axisConfig.bottom.tickLabel.overflowHandler)) {\n            const textToHide = this.getElementsToHide(axisLabels, this._config.dimension.width(), true);\n            textToHide.forEach((group: HTMLElement) => {\n                const groupSelection = select(group);\n                groupSelection.classed(\"tick-hidden-text\", true);\n                // disable pointer-events so the title doesn't display for hidden labels\n                groupSelection.classed(\"pointer-events\", false);\n            });\n            return;\n        }\n\n        if (scale.id === this.rightScaleId || scale.id === this.leftScaleId) {\n            const textToHide = this.getElementsToHide(axisLabels, this._config.dimension.height(), false);\n            textToHide.forEach((group: HTMLElement) => {\n                select(group).classed(\"sw-hidden\", true);\n            });\n        }\n\n        const margin = this.config().dimension.margin;\n        let widthLimit = 0;\n        let horizontalPadding = 0;\n        let overflowHandler: TextOverflowHandler | undefined;\n        let fixLeftMargin = false;\n        let fixRightMargin = false;\n        const maxRightWidth = axisConfig.right.tickLabel.maxWidth;\n        const maxLeftWidth = axisConfig.left.tickLabel.maxWidth;\n\n        if (scale.id === this.bottomScaleId) {\n            const maxBottomWidth = axisConfig.bottom.tickLabel.maxWidth;\n            const calculatedBottomWidth = (scale as any).bandwidth ? (scale as IBandScale).bandwidth() : this.getTickDistance(axisLabels);\n\n            if (!isUndefined(maxBottomWidth)) {\n                widthLimit = calculatedBottomWidth > maxBottomWidth ? maxBottomWidth : calculatedBottomWidth;\n            } else {\n                widthLimit = calculatedBottomWidth;\n            }\n\n            horizontalPadding = axisConfig.bottom.tickLabel.horizontalPadding;\n            overflowHandler = axisConfig.bottom.tickLabel.overflowHandler;\n\n        } else if (scale.id === this.rightScaleId && !axisConfig.right.fit) {\n            const calculatedRightWidth = margin.right - axisConfig.right.padding - axisConfig.right.tickSize;\n\n            if (!isUndefined(maxRightWidth)) {\n                widthLimit = calculatedRightWidth > maxRightWidth ? maxRightWidth : calculatedRightWidth;\n            } else {\n                widthLimit = calculatedRightWidth;\n            }\n\n            horizontalPadding = axisConfig.right.tickLabel.horizontalPadding;\n            overflowHandler = axisConfig.right.tickLabel.overflowHandler;\n\n        } else if (scale.id === this.leftScaleId && !axisConfig.left.fit) {\n            const calculatedLeftWidth = margin.left - axisConfig.left.padding - axisConfig.left.tickSize;\n\n            if (!isUndefined(maxLeftWidth)) {\n                widthLimit = calculatedLeftWidth > maxLeftWidth ? maxLeftWidth : calculatedLeftWidth;\n            } else {\n                widthLimit = calculatedLeftWidth;\n            }\n\n            horizontalPadding = axisConfig.left.tickLabel.horizontalPadding;\n            overflowHandler = axisConfig.left.tickLabel.overflowHandler;\n\n        } else if (scale.id === this.rightScaleId && axisConfig.right.fit && !isUndefined(maxRightWidth)) {\n            widthLimit = maxRightWidth;\n            horizontalPadding = axisConfig.right.tickLabel.horizontalPadding;\n            overflowHandler = axisConfig.right.tickLabel.overflowHandler;\n            fixRightMargin = true;\n\n        } else if (scale.id === this.leftScaleId && axisConfig.left.fit && !isUndefined(maxLeftWidth)) {\n            widthLimit = maxLeftWidth;\n            horizontalPadding = axisConfig.left.tickLabel.horizontalPadding;\n            overflowHandler = axisConfig.left.tickLabel.overflowHandler;\n            fixLeftMargin = true;\n\n        } else {\n            return;\n        }\n\n        if (!overflowHandler) {\n            return;\n        }\n\n        // sample the length of an ellipsis in the current environment\n        let ellipsisWidth = 0;\n        if (labelGroup.select(\".sample-ellipsis\").empty()) {\n            const testText = labelGroup.append(\"text\");\n            const ellipsis = testText.classed(\"sample-ellipsis\", true).attr(\"opacity\", 0).append(\"tspan\").text(\"...\");\n            ellipsisWidth = ellipsis.node()?.getComputedTextLength() || 0;\n            testText.remove();\n        }\n\n        // reset debounce if necessary\n        if (this.handleTickLabelOverflowDebounceIndex[scale.id]) {\n            clearTimeout(this.handleTickLabelOverflowDebounceIndex[scale.id]);\n            this.handleTickLabelOverflowDebounceIndex[scale.id] = null;\n        }\n\n        // hide the labels and disable pointer-events while debouncing\n        labelGroup.classed(\"tick-hidden-text\", true);\n        axisLabels.forEach((group: HTMLElement) => {\n            select(group).classed(\"pointer-events\", false);\n        });\n        // setTimeout used for debounce when the chart is resized\n        this.handleTickLabelOverflowDebounceIndex[scale.id] = setTimeout(() => {\n            axisLabels.forEach((group: HTMLElement) => {\n                const groupSelection = select(group);\n                // invoke the handler for each text element\n                groupSelection.select(\"text\").call(overflowHandler as TextOverflowHandler, { widthLimit, horizontalPadding, ellipsisWidth });\n                // restore pointer events\n                groupSelection.classed(\"pointer-events\", true);\n            });\n\n            const marginLocked = this._config.dimension.marginLocked;\n            if (marginLocked && (fixRightMargin || fixLeftMargin)) {\n                this.handleMarginUpdate();\n                marginLocked.right = fixRightMargin;\n                marginLocked.left = fixLeftMargin;\n            }\n\n            // display the labels\n            labelGroup.classed(\"tick-hidden-text\", false);\n        }, XYGrid.TICK_LABEL_OVERFLOW_DEBOUNCE_INTERVAL);\n    }\n\n    protected selectAllAxisLabels(axisGroup: D3Selection) {\n        const actualTextElements: HTMLElement[] = [];\n        axisGroup.selectAll(\"g:not(.tick-hidden-text)\").each(function () {\n            actualTextElements.push(this);\n        });\n        return actualTextElements;\n    }\n\n    protected getOuterWidthDimensionCorrection() {\n        return this.config().axis.bottom.visible ? Grid.TICK_DIMENSION_CORRECTION : 0;\n    }\n\n    private handleMarginUpdate() {\n        const oldMargin = clone(this._config.dimension.margin);\n        this.recalculateMargins(this.container);\n        this.reconcileMarginsWithDebounce(oldMargin);\n    }\n\n    private hasRightYAxis(): boolean {\n        return this.config().axis.right.visible && this.rightScaleId?.length > 0;\n    }\n\n    private buildAxes(container: D3Selection) {\n        // Grid lines: no sense to have right\n        this.gridY.tickGroup = container.append(\"g\")\n            .classed(\"sw-axis sw-axis-grid sw-axis-gridY\", true);\n        this.gridX.tickGroup = container.append(\"g\")\n            .classed(\"sw-axis sw-axis-grid sw-axis-gridX\", true);\n\n        // Axis groups\n        this.axisX.group = container.append(\"g\")\n            .classed(\"sw-axis sw-axis-x\", true);\n        this.axisX.tickGroup = this.axisX.group.append(\"g\")\n            .classed(\"sw-axis sw-axis-x sw-axis-x-ticks\", true);\n        this.axisX.labelGroup = this.axisX.group.append(\"g\")\n            .classed(\"sw-axis sw-axis-x sw-axis-x-labels\", true);\n\n        this.axisYLeft.group = container.append(\"g\")\n            .classed(\"sw-axis sw-axis-y sw-axis-y-left\", true);\n        this.axisYLeft.tickGroup = this.axisYLeft.group.append(\"g\")\n            .classed(\"sw-axis sw-axis-y sw-axis-y-ticks\", true);\n        this.axisYLeft.labelGroup = this.axisYLeft.group.append(\"g\")\n            .classed(\"sw-axis sw-axis-y sw-axis-y-labels\", true);\n\n        this.axisYRight.group = container.append(\"g\")\n            .classed(\"sw-axis sw-axis-y sw-axis-y-right\", true);\n        this.axisYRight.tickGroup = this.axisYRight.group.append(\"g\")\n            .classed(\"sw-axis sw-axis-y sw-axis-y-ticks\", true);\n        this.axisYRight.labelGroup = this.axisYRight.group.append(\"g\")\n            .classed(\"sw-axis sw-axis-y sw-axis-y-labels\", true);\n    }\n\n    private filterRepeatedElements(elementsToFilter: HTMLElement[]) {\n        const arr: HTMLElement[] = [elementsToFilter[0]];\n        elementsToFilter.reduce((prev: any, next: any) => {\n            const textInsideNext = select(next).text();\n            if (textInsideNext !== prev) {\n                arr.push(next);\n            }\n            return textInsideNext;\n        }, elementsToFilter[0] && select(elementsToFilter[0]).text());\n        return elementsToFilter.filter(element => arr.indexOf(element) === -1);\n    }\n\n    private getElementsToHide(elementsToFilter: HTMLElement[], measurement: number, isBottomAxis: boolean) {\n        let elementsToDisplay: HTMLElement[];\n        const measureType = isBottomAxis ? \"width\" : \"height\";\n        const measurementComparison = (this.getTextMeasurement(elementsToFilter, measureType)  elementsToDisplay.indexOf(element) === -1);\n    }\n\n    private elementsFiltering(elementsToFilter: HTMLElement[],\n                              parameter: number,\n                              measureType: string) {\n        let elementsToDisplay: HTMLElement[];\n        let counter = 2;\n        const condition = (array: HTMLElement[]) => measureType === \"width\"\n            ? this.getMaxTextWidth(array) > this.getTickDistance(array)\n            : this.getTextMeasurement(array, measureType) > parameter;\n        do {\n            elementsToDisplay = elementsToFilter.filter((element: HTMLElement, index: number) => (index % counter) === 0);\n            counter++;\n            // Break the loop when we have only 1 tick and its size is bigger than available width/height\n            if (elementsToDisplay.length === 1 && condition(elementsToDisplay)) {\n                break;\n            }\n        } while (condition(elementsToDisplay));\n        return elementsToDisplay;\n    }\n\n    private getTextMeasurement(array: HTMLElement[], measureType: string) {\n        const textPadding = measureType === \"width\" ? 5 : 0;\n        return array.reduce((prev: number, next: HTMLElement) =>\n            prev + (next.getBoundingClientRect() as any)[measureType] + textPadding, 0);\n    }\n\n    private getMaxTextWidth(array: HTMLElement[]) {\n        if (array.length === 0) {\n            return 0;\n        }\n        return Math.max.apply(null, array.map((tick: HTMLElement) => tick.getBoundingClientRect().width));\n    }\n\n    private getTickDistance(array: HTMLElement[]) {\n        if (array.length === 0) {\n            return 0;\n        }\n        let smallestDiff = Infinity;\n        const arrayOfPositions = array.map((tick: HTMLElement) => {\n            const transformVal = tick.getAttribute(\"transform\");\n\n            if (isNil(transformVal)) {\n                throw new Error(\"tick transform is not defined\");\n            }\n\n            return parseFloat(transformVal.slice(transformVal.indexOf(\"(\") + 1, transformVal.indexOf(\",\")));\n        });\n\n        arrayOfPositions.reduce((p: number, n: number) => {\n            const diff = n - p;\n            if (diff ) {\n        if (!container) {\n            return;\n        }\n        const d = this._config.dimension;\n        const axis = this.config().axis;\n\n        const oldOuterWidth = d.outerWidth();\n        const oldOuterHeight = d.outerHeight();\n\n        if (!d.marginLocked?.left && axis.left.fit && axis.left.visible) {\n            d.margin.left = this.getMaxTextWidth(this.selectAllAxisLabels(this.axisYLeft.labelGroup)) + axis.left.tickSize + axis.left.padding;\n        }\n\n        if (!d.marginLocked?.right && axis.right.fit && this.hasRightYAxis()) {\n            d.margin.right = this.getMaxTextWidth(this.selectAllAxisLabels(this.axisYRight.labelGroup)) + axis.right.tickSize + axis.right.padding;\n        }\n\n        const bottomScale = this.bottomScaleId && this.scales ? this.scales[\"x\"]?.index[this.bottomScaleId] : undefined;\n        if (axis.bottom.fit && axis.bottom.visible && (bottomScale?.isContinuous() || !axis.bottom.tickLabel.overflowHandler)) {\n            this.fitBottomAxis(d);\n        }\n\n        const newTopMargin = d.margin.top; // TODO: Do the calculation, if needed\n        const newBottomMargin = d.margin.bottom; // TODO: Do the calculation, based on bottom Axis height\n\n        d.margin.top = newTopMargin;\n        d.margin.bottom = newBottomMargin;\n\n        // adjust width and height accordingly\n        d.outerWidth(oldOuterWidth);\n        d.outerHeight(oldOuterHeight);\n\n        const tx = this.config().dimension.margin.left;\n        const ty = this.config().dimension.margin.top;\n\n        // Note: This transform results in a firefox hack in MouseInteractiveArea in which\n        // the margins must be subtracted from the mouse event coordinates\n        container.attr(\"transform\", `translate(${tx}, ${ty})`);\n    }\n\n    private fitBottomAxis(d: IDimensionConfig) {\n        const scale = this.scales?.x?.list[0].d3Scale;\n        if (!scale) {\n            return;\n        }\n        let lastTextWidth: number = 0;\n        let lastTickScaleValue: number = 0;\n        const node = this.axisX.labelGroup.select(\".tick:not(.tick-hidden-text):last-child text\").node();\n        if (node) {\n            lastTextWidth = (node as any).getBoundingClientRect().width;\n            lastTickScaleValue = scale((node as any).innerHTML) ?? 0;\n            const topOfRange = scale.range()[1];\n            const diff = (lastTextWidth / 2) - (Math.abs(topOfRange - lastTickScaleValue) / 2);\n            d.margin.right = diff > 0 ? diff : 0;\n        }\n    }\n\n    /**\n     * This method invokes updateRanges if the margins have changed, but only after a debounce period.\n     * ----\n     * The debounce is necessary because, in the case of a very short axis, repeated attempts to\n     * alternately fit axis labels and recalculate ticks may conflict with each other\n     * causing the old and new margins to never be equal upon comparison. This scenario can cause a d3\n     * call stack overflow, but with a debounce, d3 can keep up with the recalculations until the chart\n     * is resized to consistently accommodate the width of the labels.\n     */\n    private reconcileMarginsWithDebounce(oldMargin: IAllAround) {\n        if (this.reconcileMarginsDebounce) {\n            clearTimeout(this.reconcileMarginsDebounce);\n            this.reconcileMarginsDebounce = null;\n        }\n\n        this.reconcileMarginsDebounce = setTimeout(() => {\n            if (!this.areMarginsApproximatelyEqual(oldMargin, this._config.dimension.margin)) {\n                this.updateChartDimensionsSubject?.next();\n            }\n        }, 100);\n    }\n\n    private isApproximatelyEqual = (first: number, second: number) => Math.abs(first - second) , margin2: IAllAround): boolean {\n        return this.isApproximatelyEqual(margin1.top, margin2.top) &&\n            this.isApproximatelyEqual(margin1.right, margin2.right) &&\n            this.isApproximatelyEqual(margin1.bottom, margin2.bottom) &&\n            this.isApproximatelyEqual(margin1.left, margin2.left);\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISeriesAccessors.html":{"url":"interfaces/ISeriesAccessors.html","title":"interface - ISeriesAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ISeriesAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        SeriesAccessor | undefined\n\n                    \n                \n                        \n                            \n                                Defined in src/core/common/types.ts:139\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISetDomainEventPayload.html":{"url":"interfaces/ISetDomainEventPayload.html","title":"interface - ISetDomainEventPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ISetDomainEventPayload\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [scaleId: string]:    any[]\n\n                    \n                \n                        \n                            \n                                Defined in src/core/common/types.ts:345\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISideIndicatorAccessors.html":{"url":"interfaces/ISideIndicatorAccessors.html","title":"interface - ISideIndicatorAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ISideIndicatorAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/side-indicator-renderer.ts\n        \n\n            \n                Description\n            \n            \n                Interface for side indicator accessors \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                                \n                                        series\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         ISideIndicatorDataAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ISideIndicatorDataAccessors\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Accessors for the side indicator data \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        series\n                                    \n                                \n                                \n                                    \n                                        series:         ISideIndicatorSeriesAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ISideIndicatorSeriesAccessors\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Accessors for the side indicator series \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import defaultsDeep from \"lodash/defaultsDeep\";\nimport { Subject } from \"rxjs\";\n\nimport { STANDARD_RENDER_LAYERS } from \"../constants\";\nimport { Scales } from \"../core/common/scales/types\";\nimport {\n    DataAccessor,\n    IDataAccessors,\n    IDataSeries,\n    ILasagnaLayer,\n    IRendererConfig,\n    IRendererEventPayload,\n    ISeriesAccessors,\n    SeriesAccessor,\n} from \"../core/common/types\";\nimport { GRAYSCALE_FILTER } from \"../core/types\";\n\nimport { IRenderSeries, RenderLayerName } from \"./types\";\nimport { XYRenderer } from \"./xy-renderer\";\n\n/** Interface for side indicator data accessors */\nexport interface ISideIndicatorDataAccessors extends IDataAccessors {\n    /** Accessor indicating whether the side indicator should be active */\n    active: DataAccessor;\n}\n\n/** Interface for side indicator series accessors */\nexport interface ISideIndicatorSeriesAccessors extends ISeriesAccessors {\n    /** Indicates the start value of the side indicator */\n    start: SeriesAccessor;\n    /** Indicates the end value of the side indicator */\n    end: SeriesAccessor;\n    /** Indicates the active color of the side indicator */\n    activeColor: SeriesAccessor;\n    /** Optional accessor indicating the inactive color of the side indicator. A grayscale filter is applied to the active color by default */\n    inactiveColor?: SeriesAccessor;\n}\n\n/** Interface for side indicator accessors */\nexport interface ISideIndicatorAccessors {\n    /** Accessors for the side indicator data */\n    data: ISideIndicatorDataAccessors;\n    /** Accessors for the side indicator series */\n    series: ISideIndicatorSeriesAccessors;\n}\n\n/** Standard definition for side indicator series and data accessors */\nexport class SideIndicatorAccessors implements ISideIndicatorAccessors {\n    public data: ISideIndicatorDataAccessors;\n    public series: ISideIndicatorSeriesAccessors;\n\n    constructor() {\n        this.data = {\n            active: (d: any) => d.active,\n        };\n        this.series = {\n            start: () => null,\n            end: () => null,\n            activeColor: () => \"magenta\",\n        };\n    }\n}\n\n/**\n * Renderer for drawing threshold side indicators\n */\nexport class SideIndicatorRenderer extends XYRenderer {\n\n    /** @deprecated As of Nova v9, use RenderLayerName.unclippedData enum value instead. Removal: NUI-5753 */\n    public static SIDE_INDICATORS_LAYER = \"side-indicators\";\n\n    private DEFAULT_CONFIG: IRendererConfig = {};\n\n    /**\n     * Creates an instance of SideIndicatorRenderer.\n     * @param {IRendererConfig} [config={}] Renderer configuration object\n     */\n    constructor(config: IRendererConfig = {}) {\n        super(config);\n        // setting default values to the properties that were not set by user\n        this.config = defaultsDeep(this.config, this.DEFAULT_CONFIG);\n    }\n\n    /** See {@link Renderer#draw} */\n    public draw(renderSeries: IRenderSeries, rendererSubject: Subject): void {\n        const target = renderSeries.containers[RenderLayerName.unclippedData];\n        const dataSeries = renderSeries.dataSeries;\n        const scales = renderSeries.scales;\n        const accessors = renderSeries.dataSeries.accessors;\n\n        let rect = target.select(\"rect\");\n        const isActive = dataSeries.data.length > 0 ?\n            accessors.data.active(dataSeries.data[0], 0, renderSeries.dataSeries.data, renderSeries.dataSeries) : false;\n        const colorAccessor = !isActive && accessors.series.inactiveColor ? accessors.series.inactiveColor : accessors.series.activeColor;\n        if (rect.empty()) {\n            rect = target.append(\"rect\").attrs({\n                \"fill\": colorAccessor(dataSeries.id, dataSeries),\n            });\n\n            if (!isActive && !accessors.series.inactiveColor) {\n                rect.style(\"filter\", GRAYSCALE_FILTER);\n            }\n        }\n\n        const start = accessors.series.start(dataSeries.id, dataSeries);\n        const end = accessors.series.end(dataSeries.id, dataSeries);\n        const top = end == null ? 0 : scales.y.convert(end);\n        const bottom = start == null ? scales.y.range()[0] : Math.min(scales.y.range()[0], scales.y.convert(start));\n        const height = bottom - top;\n        const width = 2;\n        rect.attrs({\n            \"x\": -width,\n            \"y\": top,\n            \"height\": height , values: { [p: string]: any }, scales: Scales) {\n        return -1;\n    }\n\n    /** See {@link Renderer#getRequiredLayers} */\n    public getRequiredLayers(): ILasagnaLayer[] {\n        return [\n            STANDARD_RENDER_LAYERS[RenderLayerName.unclippedData],\n        ];\n    }\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISideIndicatorDataAccessors.html":{"url":"interfaces/ISideIndicatorDataAccessors.html","title":"interface - ISideIndicatorDataAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ISideIndicatorDataAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/side-indicator-renderer.ts\n        \n\n            \n                Description\n            \n            \n                Interface for side indicator data accessors \n\n            \n\n            \n                Extends\n            \n            \n                        IDataAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        active\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        active\n                                    \n                                \n                                \n                                    \n                                        active:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Accessor indicating whether the side indicator should be active \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import defaultsDeep from \"lodash/defaultsDeep\";\nimport { Subject } from \"rxjs\";\n\nimport { STANDARD_RENDER_LAYERS } from \"../constants\";\nimport { Scales } from \"../core/common/scales/types\";\nimport {\n    DataAccessor,\n    IDataAccessors,\n    IDataSeries,\n    ILasagnaLayer,\n    IRendererConfig,\n    IRendererEventPayload,\n    ISeriesAccessors,\n    SeriesAccessor,\n} from \"../core/common/types\";\nimport { GRAYSCALE_FILTER } from \"../core/types\";\n\nimport { IRenderSeries, RenderLayerName } from \"./types\";\nimport { XYRenderer } from \"./xy-renderer\";\n\n/** Interface for side indicator data accessors */\nexport interface ISideIndicatorDataAccessors extends IDataAccessors {\n    /** Accessor indicating whether the side indicator should be active */\n    active: DataAccessor;\n}\n\n/** Interface for side indicator series accessors */\nexport interface ISideIndicatorSeriesAccessors extends ISeriesAccessors {\n    /** Indicates the start value of the side indicator */\n    start: SeriesAccessor;\n    /** Indicates the end value of the side indicator */\n    end: SeriesAccessor;\n    /** Indicates the active color of the side indicator */\n    activeColor: SeriesAccessor;\n    /** Optional accessor indicating the inactive color of the side indicator. A grayscale filter is applied to the active color by default */\n    inactiveColor?: SeriesAccessor;\n}\n\n/** Interface for side indicator accessors */\nexport interface ISideIndicatorAccessors {\n    /** Accessors for the side indicator data */\n    data: ISideIndicatorDataAccessors;\n    /** Accessors for the side indicator series */\n    series: ISideIndicatorSeriesAccessors;\n}\n\n/** Standard definition for side indicator series and data accessors */\nexport class SideIndicatorAccessors implements ISideIndicatorAccessors {\n    public data: ISideIndicatorDataAccessors;\n    public series: ISideIndicatorSeriesAccessors;\n\n    constructor() {\n        this.data = {\n            active: (d: any) => d.active,\n        };\n        this.series = {\n            start: () => null,\n            end: () => null,\n            activeColor: () => \"magenta\",\n        };\n    }\n}\n\n/**\n * Renderer for drawing threshold side indicators\n */\nexport class SideIndicatorRenderer extends XYRenderer {\n\n    /** @deprecated As of Nova v9, use RenderLayerName.unclippedData enum value instead. Removal: NUI-5753 */\n    public static SIDE_INDICATORS_LAYER = \"side-indicators\";\n\n    private DEFAULT_CONFIG: IRendererConfig = {};\n\n    /**\n     * Creates an instance of SideIndicatorRenderer.\n     * @param {IRendererConfig} [config={}] Renderer configuration object\n     */\n    constructor(config: IRendererConfig = {}) {\n        super(config);\n        // setting default values to the properties that were not set by user\n        this.config = defaultsDeep(this.config, this.DEFAULT_CONFIG);\n    }\n\n    /** See {@link Renderer#draw} */\n    public draw(renderSeries: IRenderSeries, rendererSubject: Subject): void {\n        const target = renderSeries.containers[RenderLayerName.unclippedData];\n        const dataSeries = renderSeries.dataSeries;\n        const scales = renderSeries.scales;\n        const accessors = renderSeries.dataSeries.accessors;\n\n        let rect = target.select(\"rect\");\n        const isActive = dataSeries.data.length > 0 ?\n            accessors.data.active(dataSeries.data[0], 0, renderSeries.dataSeries.data, renderSeries.dataSeries) : false;\n        const colorAccessor = !isActive && accessors.series.inactiveColor ? accessors.series.inactiveColor : accessors.series.activeColor;\n        if (rect.empty()) {\n            rect = target.append(\"rect\").attrs({\n                \"fill\": colorAccessor(dataSeries.id, dataSeries),\n            });\n\n            if (!isActive && !accessors.series.inactiveColor) {\n                rect.style(\"filter\", GRAYSCALE_FILTER);\n            }\n        }\n\n        const start = accessors.series.start(dataSeries.id, dataSeries);\n        const end = accessors.series.end(dataSeries.id, dataSeries);\n        const top = end == null ? 0 : scales.y.convert(end);\n        const bottom = start == null ? scales.y.range()[0] : Math.min(scales.y.range()[0], scales.y.convert(start));\n        const height = bottom - top;\n        const width = 2;\n        rect.attrs({\n            \"x\": -width,\n            \"y\": top,\n            \"height\": height , values: { [p: string]: any }, scales: Scales) {\n        return -1;\n    }\n\n    /** See {@link Renderer#getRequiredLayers} */\n    public getRequiredLayers(): ILasagnaLayer[] {\n        return [\n            STANDARD_RENDER_LAYERS[RenderLayerName.unclippedData],\n        ];\n    }\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISideIndicatorSeriesAccessors.html":{"url":"interfaces/ISideIndicatorSeriesAccessors.html","title":"interface - ISideIndicatorSeriesAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ISideIndicatorSeriesAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/side-indicator-renderer.ts\n        \n\n            \n                Description\n            \n            \n                Interface for side indicator series accessors \n\n            \n\n            \n                Extends\n            \n            \n                        ISeriesAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        activeColor\n                                \n                                \n                                        end\n                                \n                                \n                                            Optional\n                                        inactiveColor\n                                \n                                \n                                        start\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        activeColor\n                                    \n                                \n                                \n                                    \n                                        activeColor:         SeriesAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SeriesAccessor\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Indicates the active color of the side indicator \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        end\n                                    \n                                \n                                \n                                    \n                                        end:         SeriesAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SeriesAccessor\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Indicates the end value of the side indicator \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        inactiveColor\n                                    \n                                \n                                \n                                    \n                                        inactiveColor:         SeriesAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SeriesAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional accessor indicating the inactive color of the side indicator. A grayscale filter is applied to the active color by default \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        start\n                                    \n                                \n                                \n                                    \n                                        start:         SeriesAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SeriesAccessor\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Indicates the start value of the side indicator \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import defaultsDeep from \"lodash/defaultsDeep\";\nimport { Subject } from \"rxjs\";\n\nimport { STANDARD_RENDER_LAYERS } from \"../constants\";\nimport { Scales } from \"../core/common/scales/types\";\nimport {\n    DataAccessor,\n    IDataAccessors,\n    IDataSeries,\n    ILasagnaLayer,\n    IRendererConfig,\n    IRendererEventPayload,\n    ISeriesAccessors,\n    SeriesAccessor,\n} from \"../core/common/types\";\nimport { GRAYSCALE_FILTER } from \"../core/types\";\n\nimport { IRenderSeries, RenderLayerName } from \"./types\";\nimport { XYRenderer } from \"./xy-renderer\";\n\n/** Interface for side indicator data accessors */\nexport interface ISideIndicatorDataAccessors extends IDataAccessors {\n    /** Accessor indicating whether the side indicator should be active */\n    active: DataAccessor;\n}\n\n/** Interface for side indicator series accessors */\nexport interface ISideIndicatorSeriesAccessors extends ISeriesAccessors {\n    /** Indicates the start value of the side indicator */\n    start: SeriesAccessor;\n    /** Indicates the end value of the side indicator */\n    end: SeriesAccessor;\n    /** Indicates the active color of the side indicator */\n    activeColor: SeriesAccessor;\n    /** Optional accessor indicating the inactive color of the side indicator. A grayscale filter is applied to the active color by default */\n    inactiveColor?: SeriesAccessor;\n}\n\n/** Interface for side indicator accessors */\nexport interface ISideIndicatorAccessors {\n    /** Accessors for the side indicator data */\n    data: ISideIndicatorDataAccessors;\n    /** Accessors for the side indicator series */\n    series: ISideIndicatorSeriesAccessors;\n}\n\n/** Standard definition for side indicator series and data accessors */\nexport class SideIndicatorAccessors implements ISideIndicatorAccessors {\n    public data: ISideIndicatorDataAccessors;\n    public series: ISideIndicatorSeriesAccessors;\n\n    constructor() {\n        this.data = {\n            active: (d: any) => d.active,\n        };\n        this.series = {\n            start: () => null,\n            end: () => null,\n            activeColor: () => \"magenta\",\n        };\n    }\n}\n\n/**\n * Renderer for drawing threshold side indicators\n */\nexport class SideIndicatorRenderer extends XYRenderer {\n\n    /** @deprecated As of Nova v9, use RenderLayerName.unclippedData enum value instead. Removal: NUI-5753 */\n    public static SIDE_INDICATORS_LAYER = \"side-indicators\";\n\n    private DEFAULT_CONFIG: IRendererConfig = {};\n\n    /**\n     * Creates an instance of SideIndicatorRenderer.\n     * @param {IRendererConfig} [config={}] Renderer configuration object\n     */\n    constructor(config: IRendererConfig = {}) {\n        super(config);\n        // setting default values to the properties that were not set by user\n        this.config = defaultsDeep(this.config, this.DEFAULT_CONFIG);\n    }\n\n    /** See {@link Renderer#draw} */\n    public draw(renderSeries: IRenderSeries, rendererSubject: Subject): void {\n        const target = renderSeries.containers[RenderLayerName.unclippedData];\n        const dataSeries = renderSeries.dataSeries;\n        const scales = renderSeries.scales;\n        const accessors = renderSeries.dataSeries.accessors;\n\n        let rect = target.select(\"rect\");\n        const isActive = dataSeries.data.length > 0 ?\n            accessors.data.active(dataSeries.data[0], 0, renderSeries.dataSeries.data, renderSeries.dataSeries) : false;\n        const colorAccessor = !isActive && accessors.series.inactiveColor ? accessors.series.inactiveColor : accessors.series.activeColor;\n        if (rect.empty()) {\n            rect = target.append(\"rect\").attrs({\n                \"fill\": colorAccessor(dataSeries.id, dataSeries),\n            });\n\n            if (!isActive && !accessors.series.inactiveColor) {\n                rect.style(\"filter\", GRAYSCALE_FILTER);\n            }\n        }\n\n        const start = accessors.series.start(dataSeries.id, dataSeries);\n        const end = accessors.series.end(dataSeries.id, dataSeries);\n        const top = end == null ? 0 : scales.y.convert(end);\n        const bottom = start == null ? scales.y.range()[0] : Math.min(scales.y.range()[0], scales.y.convert(start));\n        const height = bottom - top;\n        const width = 2;\n        rect.attrs({\n            \"x\": -width,\n            \"y\": top,\n            \"height\": height , values: { [p: string]: any }, scales: Scales) {\n        return -1;\n    }\n\n    /** See {@link Renderer#getRequiredLayers} */\n    public getRequiredLayers(): ILasagnaLayer[] {\n        return [\n            STANDARD_RENDER_LAYERS[RenderLayerName.unclippedData],\n        ];\n    }\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISimpleThresholdZone.html":{"url":"interfaces/ISimpleThresholdZone.html","title":"interface - ISimpleThresholdZone","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ISimpleThresholdZone\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/thresholds/types.ts\n        \n\n            \n                Description\n            \n            \n                Used for simplified threshold zone definition. It is expected the start to be .\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        end\n                                \n                                \n                                            Optional\n                                        start\n                                \n                                \n                                        status\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        end\n                                    \n                                \n                                \n                                    \n                                        end:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        start\n                                    \n                                \n                                \n                                    \n                                        start:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                    \n                                \n                                \n                                    \n                                        status:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Numeric } from \"d3-array\";\n\n/**\n * Used for simplified threshold zone definition. It is expected the start to be &lt; end.\n */\nexport interface ISimpleThresholdZone {\n    status: string;\n    start?: number;\n    end?: number;\n}\n\nexport interface ZoneCross {\n    status: string;\n    start?: Numeric;\n    end?: Numeric;\n}\n\n/**\n * Used for specifying the start or end boundary of a zone\n */\nexport enum ZoneBoundary {\n    Start = \"start\",\n    End = \"end\",\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISpark.html":{"url":"interfaces/ISpark.html","title":"interface - ISpark","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ISpark\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/chart-assists/types.ts\n        \n\n            \n                Description\n            \n            \n                Interface representing the spark chart assist's\nassociation between one of its charts and a series set\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        chart\n                                \n                                \n                                        chartSeriesSet\n                                \n                                \n                                            Optional\n                                        id\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        chart\n                                    \n                                \n                                \n                                    \n                                        chart:         IChart\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IChart\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        chartSeriesSet\n                                    \n                                \n                                \n                                    \n                                        chartSeriesSet:     IChartAssistSeries[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     IChartAssistSeries[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { RenderState } from \"../../renderers/types\";\nimport { IAccessors, IChart, IChartAssistSeries, IChartSeries, IRenderStateData } from \"../common/types\";\n\n/**\n * Interface representing the spark chart assist's\n * association between one of its charts and a series set\n */\nexport interface ISpark {\n    chartSeriesSet: IChartAssistSeries[];\n    id?: string;\n    chart?: IChart;\n}\n\n/**\n * Interface representing an assistant that aids in chart usage\n */\nexport interface IChartAssist {\n    /**\n     * Updates the series set for the chart assist's associated chart\n     *\n     * @param inputSeriesSet The updated set of series\n     */\n    update(inputSeriesSet: IChartAssistSeries[]): void;\n\n    /**\n     * Gets the current highlighted value for the specified series\n     *\n     * @param {IChartSeries} chartSeries The chart series to get the highlighted value for\n     * @param {string} scaleKey The key for the datapoint value scale\n     * @param {string} [formatterName] The name of the formatter if a custom formatter name is set on the scale\n     *\n     * @returns {string} The highlighted value\n     */\n    getHighlightedValue(chartSeries: IChartSeries, scaleKey: string, formatterName?: string): string | number | undefined;\n\n    /**\n     * Returns visible series that are represented by a legend\n     */\n    getVisibleSeriesWithLegend(): IChartAssistSeries[];\n}\n\n/** Event types that can be emitted from a chart assist */\nexport enum ChartAssistEventType {\n    ToggleSeries = \"ToggleSeries\",\n    ResetVisibleSeries = \"ResetVisibleSeries\",\n    EmphasizeSeries = \"EmphasizeSeries\",\n}\n\n/** Interface for chart assist events */\nexport interface IChartAssistEvent {\n    type: ChartAssistEventType;\n    payload: any;\n}\n\n/**\n * Legend interaction assist uses this class to present the state that consists of emphasisState+visible as one state\n */\nexport class ChartAssistRenderStateData implements IRenderStateData {\n    constructor(public seriesId: string,\n                public series: IChartAssistSeries,\n                public emphasisState = RenderState.default,\n                public visible = true) {\n    }\n\n    get state(): RenderState {\n        return this.visible ? this.emphasisState : RenderState.hidden;\n    }\n}\n\nexport interface IRenderStatesIndex {\n    [seriesId: string]: ChartAssistRenderStateData;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IStackMetadata.html":{"url":"interfaces/IStackMetadata.html","title":"interface - IStackMetadata","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IStackMetadata\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/bar/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        end\n                                \n                                \n                                        start\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        end\n                                    \n                                \n                                \n                                    \n                                        end:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        start\n                                    \n                                \n                                \n                                    \n                                        start:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IBarChartConfig {\n    horizontal?: boolean;\n    grouped?: boolean;\n}\n\nexport interface IStackMetadata {\n    start: number;\n    end: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IStartEndRangeAccessors.html":{"url":"interfaces/IStartEndRangeAccessors.html","title":"interface - IStartEndRangeAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IStartEndRangeAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/accessors/rectangle-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IDataAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        end\n                                \n                                \n                                        start\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        end\n                                    \n                                \n                                \n                                    \n                                        end:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        start\n                                    \n                                \n                                \n                                    \n                                        start:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DataAccessor, IAccessors, IDataAccessors, ISeriesAccessors, SeriesAccessor } from \"../../core/common/types\";\n\nexport interface IStartEndRangeAccessors extends IDataAccessors {\n    start: DataAccessor;\n    end: DataAccessor;\n}\n\nexport interface IValueThicknessAccessors extends IDataAccessors {\n    value: DataAccessor;\n    thickness: DataAccessor;\n}\n\nexport interface IRectangleDataAccessors extends IDataAccessors {\n    startX?: DataAccessor;\n    endX?: DataAccessor;\n    thicknessX?: DataAccessor;\n\n    startY?: DataAccessor;\n    endY?: DataAccessor;\n    thicknessY?: DataAccessor;\n}\n\nexport interface IRectangleSeriesAccessors extends ISeriesAccessors {\n    color?: SeriesAccessor;\n    marker?: SeriesAccessor;\n}\n\nexport interface IRectangleAccessors extends IAccessors {\n    data: IRectangleDataAccessors;\n    series: IRectangleSeriesAccessors;\n}\n\nexport class RectangleAccessors implements IRectangleAccessors {\n    data: IRectangleDataAccessors;\n    series: IRectangleSeriesAccessors;\n\n    constructor() {\n\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IStatusAccessors.html":{"url":"interfaces/IStatusAccessors.html","title":"interface - IStatusAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IStatusAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/bar/accessors/status-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IBarAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         IStatusDataAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IStatusDataAccessors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DataAccessor } from \"../../../core/common/types\";\nimport { IRectangleSeriesAccessors } from \"../../accessors/rectangle-accessors\";\n\nimport { IBarAccessors, IBarDataAccessors } from \"./bar-accessors\";\n\nexport interface IStatusDataAccessors extends IBarDataAccessors {\n    status: DataAccessor;\n}\n\nexport interface IStatusAccessors extends IBarAccessors {\n    data: IStatusDataAccessors;\n}\n\nexport class StatusAccessors implements IStatusAccessors {\n    public static STATUS_CATEGORY = \"status\";\n    public static STATUS_DOMAIN = [StatusAccessors.STATUS_CATEGORY];\n\n    public get data(): IStatusDataAccessors {\n        return this.barAccessors.data as IStatusDataAccessors;\n    }\n\n    public get series(): IRectangleSeriesAccessors {\n        return this.barAccessors.series;\n    }\n\n    constructor(private barAccessors: IBarAccessors) {\n        barAccessors.data.status = (d: any) => d.status;\n    }\n}\n\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IStatusDataAccessors.html":{"url":"interfaces/IStatusDataAccessors.html","title":"interface - IStatusDataAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IStatusDataAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/bar/accessors/status-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IBarDataAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        status\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                    \n                                \n                                \n                                    \n                                        status:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DataAccessor } from \"../../../core/common/types\";\nimport { IRectangleSeriesAccessors } from \"../../accessors/rectangle-accessors\";\n\nimport { IBarAccessors, IBarDataAccessors } from \"./bar-accessors\";\n\nexport interface IStatusDataAccessors extends IBarDataAccessors {\n    status: DataAccessor;\n}\n\nexport interface IStatusAccessors extends IBarAccessors {\n    data: IStatusDataAccessors;\n}\n\nexport class StatusAccessors implements IStatusAccessors {\n    public static STATUS_CATEGORY = \"status\";\n    public static STATUS_DOMAIN = [StatusAccessors.STATUS_CATEGORY];\n\n    public get data(): IStatusDataAccessors {\n        return this.barAccessors.data as IStatusDataAccessors;\n    }\n\n    public get series(): IRectangleSeriesAccessors {\n        return this.barAccessors.series;\n    }\n\n    constructor(private barAccessors: IBarAccessors) {\n        barAccessors.data.status = (d: any) => d.status;\n    }\n}\n\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ITextOverflowArgs.html":{"url":"interfaces/ITextOverflowArgs.html","title":"interface - ITextOverflowArgs","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ITextOverflowArgs\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        ellipsisWidth\n                                \n                                \n                                        horizontalPadding\n                                \n                                \n                                        widthLimit\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ellipsisWidth\n                                    \n                                \n                                \n                                    \n                                        ellipsisWidth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        horizontalPadding\n                                    \n                                \n                                \n                                    \n                                        horizontalPadding:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        widthLimit\n                                    \n                                \n                                \n                                    \n                                        widthLimit:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BaseType } from \"d3\";\nimport { Axis } from \"d3-axis\";\nimport { Selection } from \"d3-selection\";\nimport { Subject } from \"rxjs\";\n\nimport { EventBus } from \"../common/event-bus\";\nimport { Lasagna } from \"../common/lasagna\";\nimport { ScalesIndex } from \"../common/scales/types\";\nimport { D3Selection, IChart, IChartEvent, IChartPlugin } from \"../common/types\";\n\n/**\n * Interface for defining aspects of the top, right, bottom, and left sides of a grid\n */\nexport interface IAllAround {\n    /** Object defining aspects of the top of an entity */\n    top: T;\n    /** Object defining aspects of the right side of an entity */\n    right: T;\n    /** Object defining aspects of the bottom of an entity */\n    bottom: T;\n    /** Object defining aspects of the left side of an entity */\n    left: T;\n}\n\n/**\n * The width and height of an grid\n */\nexport interface IDimensions {\n    width: number;\n    height: number;\n}\n\n/**\n * Configuration of grid dimensions\n */\nexport interface IDimensionConfig {\n    /** The top, right, bottom, and left margin sizes in pixels */\n    margin: IAllAround;\n    /** The top, right, bottom, and left padding sizes in pixels */\n    padding: IAllAround;\n    /** Sets whether the grid uses the chart's container to determine its width */\n    autoWidth: boolean;\n    /** Sets whether the grid uses the chart's container to determine its height */\n    autoHeight: boolean;\n    /** Set of booleans indicating whether a specific margin will be recalculated on chart dimension updates */\n    marginLocked?: IAllAround;\n    /**\n     * Sets the grid's width. Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid width\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    width(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- excluding margins.\n     *\n     * @returns {number} The grid's width\n     */\n    width(): number;\n    /**\n     * Sets the grid's height. Note: 'autoHeight' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid height\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    height(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- excluding margins.\n     *\n     * @returns {number} The grid's height\n     */\n    height(): number;\n    /**\n     * Sets the grid's width by subtracting the grid's horizontal margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new width plus the grid's horizontal margins\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerWidth(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- including horizontal margins.\n     *\n     * @returns {number} The grid's width plus horizontal margins\n     */\n    outerWidth(): number;\n    /**\n     * Sets the grid's height by subtracting the grid's vertical margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new height plus the grid's vertical margins     *\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerHeight(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- including vertical margins.\n     *\n     * @returns {number} The grid's height plus vertical margins\n     */\n    outerHeight(): number;\n}\n\n/**\n * Interface for defining the SVGElements forming the top, right, bottom, and left borders of an entity\n */\nexport interface IBorders extends IAllAround {\n}\n\n/**\n * Configuration of grid borders\n */\nexport interface IBorderConfig {\n    /** The stroke color */\n    color?: string;\n    /** The thickness of the border */\n    width?: number;\n    /** The class name */\n    className?: string;\n    /** Boolean indicating whether the border should be visible */\n    visible?: boolean;\n}\n\nexport interface ITextOverflowArgs {\n    widthLimit: number;\n    horizontalPadding: number;\n    ellipsisWidth: number;\n}\n\n/** Type for tick overflow handler */\nexport type TextOverflowHandler = (textSelection: Selection, args: ITextOverflowArgs) => void;\n\n/** Interface representing the configuration for tick labels */\nexport interface ITickLabelConfig {\n    /**\n     * Padding for left and right sides of label used for calculating text overflow limits\n     * (number represents the padding on each side)\n     */\n    horizontalPadding: number;\n    /** Handler for text overflow. Set to 'undefined' to disable overflow handling */\n    overflowHandler?: TextOverflowHandler;\n    /**\n     * Setting this insures the label's width is smaller or equal to the provided number\n     */\n    maxWidth?: number;\n}\n\n/** Configuration of a grid axis */\nexport interface IAxisConfig {\n    /** Boolean indicating whether the axis should be visible */\n    visible: boolean;\n    /** The approximate number of ticks to display */\n    approximateTicks: number;\n    /** Boolean indicating whether grid ticks should be displayed */\n    gridTicks: boolean;\n    /** The length of the ticks in pixels */\n    tickSize: number;\n    /** Configuration for the tick labels */\n    tickLabel: ITickLabelConfig;\n    /** Sets whether to fit the grid margins to the axis labels */\n    fit: boolean;\n    /** Sets the axis padding */\n    padding: number;\n}\n\n/**\n * Basic grid configuration\n */\nexport interface IGridConfig {\n    /** Boolean indicating whether the grid will respond to mouse events */\n    interactive: boolean;\n    /** Configuration for the grid's dimensions */\n    dimension: IDimensionConfig;\n    /** Configuration for the grid's borders */\n    borders: IAllAround;\n    /** String indicating the desired cursor style */\n    cursor: string;\n    /** Set to true to disable the render area height correction */\n    disableRenderAreaHeightCorrection?: boolean;\n    /** Set to true to disable the render area width correction */\n    disableRenderAreaWidthCorrection?: boolean;\n}\n\n/**\n * Configuration for an XYGrid\n */\nexport interface IXYGridConfig extends IGridConfig {\n    /** The IAllAround value for the grid's axis configurations */\n    axis: IAllAround;\n\n    /**\n     * Add interaction line and label plugins automatically\n     * Note: This was added to prevent a breaking change. We should avoid this kind of option in future\n     * versions of IXYGridConfig because ideally all plugins should be added manually (NUI-3304).\n     */\n    interactionPlugins: boolean;\n}\n\n/**\n * The basic interface for a grid's dimensions, scaling, interaction, and borders\n *\n * @interface\n */\nexport interface IGrid {\n    /** The grid scales\n     *\n     * @type {ScalesIndex}\n     */\n    scales: ScalesIndex;\n\n    /**\n     * Subject for indicating that the chart's dimensions should be updated\n     */\n    updateChartDimensionsSubject?: Subject;\n\n    /**\n     * Chart event bus\n     */\n    eventBus: EventBus;\n\n    /**\n     * Provides access to the grid's layering mechanism\n     *\n     * @returns {Lasagna} The grid's layering mechanism\n     */\n    getLasagna(): Lasagna;\n\n    /**\n     * Provides access to the grid's interactive area\n     *\n     * @returns {D3Selection} The grid's interactive area\n     */\n    getInteractiveArea(): D3Selection;\n\n    /**\n     * getter for the grid's target d3 selection\n     *\n     * @returns {D3Selection} The grid's target d3 selection\n     */\n    target(): D3Selection;\n\n    /**\n     * setter for the grid's target d3 selection\n     *\n     * @param {D3Selection} [target] The grid's new target d3 selection\n     * @returns {IGrid} The grid instance\n     */\n    target(target: D3Selection): IGrid;\n    target(target: D3Selection): D3Selection | IGrid;\n\n    /**\n     * getter for the grid configuration\n     *\n     * @returns {IGridConfig} The grid configuration\n     */\n    config(): IGridConfig;\n\n    /**\n     * setter for the grid configuration\n     *\n     * @param {IGridConfig} config The new grid configuration\n     * @returns {this} The grid instance\n     */\n    config(config: IGridConfig): this;\n\n    /**\n     * Builds the grid's rendered elements\n     *\n     * @returns {IGrid} The grid instance\n     */\n    build(): IGrid;\n\n    /**\n     * Updates the grid's rendered elements based on the current scales and configuration\n     *\n     * @returns {IGrid} The grid instance\n     */\n    update(): IGrid;\n\n    /**\n     * Updates the grid's dimensions as specified\n     *\n     * @param {Partial} dimensions The new grid dimensions\n     * @returns {IGrid} The grid instance\n     */\n    updateDimensions(dimensions: Partial): IGrid;\n\n    /**\n     * Updates the ranges on the grid's scales based on the grid's configured dimensions\n     *\n     * @returns {IGrid} The grid instance\n     */\n    updateRanges(): IGrid;\n\n    /**\n     * Builds the grid's plugins\n     *\n     * @returns {IChartPlugin[]} The set of generated plugins\n     */\n    buildPlugins(chart: IChart): IChartPlugin[];\n}\n\n/**\n * Interface for a d3 axis entity\n */\nexport interface IAxis {\n    /** The d3 group element for the axis label */\n    labelGroup: D3Selection;\n    /** The d3 group element for the axis ticks */\n    tickGroup: D3Selection;\n    /** The d3 group element for the axis */\n    group: D3Selection;\n    /** The d3 axis */\n    axis: Axis;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ITickLabelConfig.html":{"url":"interfaces/ITickLabelConfig.html","title":"interface - ITickLabelConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ITickLabelConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/types.ts\n        \n\n            \n                Description\n            \n            \n                Interface representing the configuration for tick labels \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        horizontalPadding\n                                \n                                \n                                            Optional\n                                        maxWidth\n                                \n                                \n                                            Optional\n                                        overflowHandler\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        horizontalPadding\n                                    \n                                \n                                \n                                    \n                                        horizontalPadding:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Padding for left and right sides of label used for calculating text overflow limits\n(number represents the padding on each side)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxWidth\n                                    \n                                \n                                \n                                    \n                                        maxWidth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Setting this insures the label's width is smaller or equal to the provided number\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        overflowHandler\n                                    \n                                \n                                \n                                    \n                                        overflowHandler:         TextOverflowHandler\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TextOverflowHandler\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Handler for text overflow. Set to 'undefined' to disable overflow handling \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { BaseType } from \"d3\";\nimport { Axis } from \"d3-axis\";\nimport { Selection } from \"d3-selection\";\nimport { Subject } from \"rxjs\";\n\nimport { EventBus } from \"../common/event-bus\";\nimport { Lasagna } from \"../common/lasagna\";\nimport { ScalesIndex } from \"../common/scales/types\";\nimport { D3Selection, IChart, IChartEvent, IChartPlugin } from \"../common/types\";\n\n/**\n * Interface for defining aspects of the top, right, bottom, and left sides of a grid\n */\nexport interface IAllAround {\n    /** Object defining aspects of the top of an entity */\n    top: T;\n    /** Object defining aspects of the right side of an entity */\n    right: T;\n    /** Object defining aspects of the bottom of an entity */\n    bottom: T;\n    /** Object defining aspects of the left side of an entity */\n    left: T;\n}\n\n/**\n * The width and height of an grid\n */\nexport interface IDimensions {\n    width: number;\n    height: number;\n}\n\n/**\n * Configuration of grid dimensions\n */\nexport interface IDimensionConfig {\n    /** The top, right, bottom, and left margin sizes in pixels */\n    margin: IAllAround;\n    /** The top, right, bottom, and left padding sizes in pixels */\n    padding: IAllAround;\n    /** Sets whether the grid uses the chart's container to determine its width */\n    autoWidth: boolean;\n    /** Sets whether the grid uses the chart's container to determine its height */\n    autoHeight: boolean;\n    /** Set of booleans indicating whether a specific margin will be recalculated on chart dimension updates */\n    marginLocked?: IAllAround;\n    /**\n     * Sets the grid's width. Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid width\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    width(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- excluding margins.\n     *\n     * @returns {number} The grid's width\n     */\n    width(): number;\n    /**\n     * Sets the grid's height. Note: 'autoHeight' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid height\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    height(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- excluding margins.\n     *\n     * @returns {number} The grid's height\n     */\n    height(): number;\n    /**\n     * Sets the grid's width by subtracting the grid's horizontal margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new width plus the grid's horizontal margins\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerWidth(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- including horizontal margins.\n     *\n     * @returns {number} The grid's width plus horizontal margins\n     */\n    outerWidth(): number;\n    /**\n     * Sets the grid's height by subtracting the grid's vertical margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new height plus the grid's vertical margins     *\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerHeight(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- including vertical margins.\n     *\n     * @returns {number} The grid's height plus vertical margins\n     */\n    outerHeight(): number;\n}\n\n/**\n * Interface for defining the SVGElements forming the top, right, bottom, and left borders of an entity\n */\nexport interface IBorders extends IAllAround {\n}\n\n/**\n * Configuration of grid borders\n */\nexport interface IBorderConfig {\n    /** The stroke color */\n    color?: string;\n    /** The thickness of the border */\n    width?: number;\n    /** The class name */\n    className?: string;\n    /** Boolean indicating whether the border should be visible */\n    visible?: boolean;\n}\n\nexport interface ITextOverflowArgs {\n    widthLimit: number;\n    horizontalPadding: number;\n    ellipsisWidth: number;\n}\n\n/** Type for tick overflow handler */\nexport type TextOverflowHandler = (textSelection: Selection, args: ITextOverflowArgs) => void;\n\n/** Interface representing the configuration for tick labels */\nexport interface ITickLabelConfig {\n    /**\n     * Padding for left and right sides of label used for calculating text overflow limits\n     * (number represents the padding on each side)\n     */\n    horizontalPadding: number;\n    /** Handler for text overflow. Set to 'undefined' to disable overflow handling */\n    overflowHandler?: TextOverflowHandler;\n    /**\n     * Setting this insures the label's width is smaller or equal to the provided number\n     */\n    maxWidth?: number;\n}\n\n/** Configuration of a grid axis */\nexport interface IAxisConfig {\n    /** Boolean indicating whether the axis should be visible */\n    visible: boolean;\n    /** The approximate number of ticks to display */\n    approximateTicks: number;\n    /** Boolean indicating whether grid ticks should be displayed */\n    gridTicks: boolean;\n    /** The length of the ticks in pixels */\n    tickSize: number;\n    /** Configuration for the tick labels */\n    tickLabel: ITickLabelConfig;\n    /** Sets whether to fit the grid margins to the axis labels */\n    fit: boolean;\n    /** Sets the axis padding */\n    padding: number;\n}\n\n/**\n * Basic grid configuration\n */\nexport interface IGridConfig {\n    /** Boolean indicating whether the grid will respond to mouse events */\n    interactive: boolean;\n    /** Configuration for the grid's dimensions */\n    dimension: IDimensionConfig;\n    /** Configuration for the grid's borders */\n    borders: IAllAround;\n    /** String indicating the desired cursor style */\n    cursor: string;\n    /** Set to true to disable the render area height correction */\n    disableRenderAreaHeightCorrection?: boolean;\n    /** Set to true to disable the render area width correction */\n    disableRenderAreaWidthCorrection?: boolean;\n}\n\n/**\n * Configuration for an XYGrid\n */\nexport interface IXYGridConfig extends IGridConfig {\n    /** The IAllAround value for the grid's axis configurations */\n    axis: IAllAround;\n\n    /**\n     * Add interaction line and label plugins automatically\n     * Note: This was added to prevent a breaking change. We should avoid this kind of option in future\n     * versions of IXYGridConfig because ideally all plugins should be added manually (NUI-3304).\n     */\n    interactionPlugins: boolean;\n}\n\n/**\n * The basic interface for a grid's dimensions, scaling, interaction, and borders\n *\n * @interface\n */\nexport interface IGrid {\n    /** The grid scales\n     *\n     * @type {ScalesIndex}\n     */\n    scales: ScalesIndex;\n\n    /**\n     * Subject for indicating that the chart's dimensions should be updated\n     */\n    updateChartDimensionsSubject?: Subject;\n\n    /**\n     * Chart event bus\n     */\n    eventBus: EventBus;\n\n    /**\n     * Provides access to the grid's layering mechanism\n     *\n     * @returns {Lasagna} The grid's layering mechanism\n     */\n    getLasagna(): Lasagna;\n\n    /**\n     * Provides access to the grid's interactive area\n     *\n     * @returns {D3Selection} The grid's interactive area\n     */\n    getInteractiveArea(): D3Selection;\n\n    /**\n     * getter for the grid's target d3 selection\n     *\n     * @returns {D3Selection} The grid's target d3 selection\n     */\n    target(): D3Selection;\n\n    /**\n     * setter for the grid's target d3 selection\n     *\n     * @param {D3Selection} [target] The grid's new target d3 selection\n     * @returns {IGrid} The grid instance\n     */\n    target(target: D3Selection): IGrid;\n    target(target: D3Selection): D3Selection | IGrid;\n\n    /**\n     * getter for the grid configuration\n     *\n     * @returns {IGridConfig} The grid configuration\n     */\n    config(): IGridConfig;\n\n    /**\n     * setter for the grid configuration\n     *\n     * @param {IGridConfig} config The new grid configuration\n     * @returns {this} The grid instance\n     */\n    config(config: IGridConfig): this;\n\n    /**\n     * Builds the grid's rendered elements\n     *\n     * @returns {IGrid} The grid instance\n     */\n    build(): IGrid;\n\n    /**\n     * Updates the grid's rendered elements based on the current scales and configuration\n     *\n     * @returns {IGrid} The grid instance\n     */\n    update(): IGrid;\n\n    /**\n     * Updates the grid's dimensions as specified\n     *\n     * @param {Partial} dimensions The new grid dimensions\n     * @returns {IGrid} The grid instance\n     */\n    updateDimensions(dimensions: Partial): IGrid;\n\n    /**\n     * Updates the ranges on the grid's scales based on the grid's configured dimensions\n     *\n     * @returns {IGrid} The grid instance\n     */\n    updateRanges(): IGrid;\n\n    /**\n     * Builds the grid's plugins\n     *\n     * @returns {IChartPlugin[]} The set of generated plugins\n     */\n    buildPlugins(chart: IChart): IChartPlugin[];\n}\n\n/**\n * Interface for a d3 axis entity\n */\nexport interface IAxis {\n    /** The d3 group element for the axis label */\n    labelGroup: D3Selection;\n    /** The d3 group element for the axis ticks */\n    tickGroup: D3Selection;\n    /** The d3 group element for the axis */\n    group: D3Selection;\n    /** The d3 axis */\n    axis: Axis;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ITooltipNode.html":{"url":"interfaces/ITooltipNode.html","title":"interface - ITooltipNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ITooltipNode\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chart-tooltips/chart-tooltips.component.ts\n        \n\n\n            \n                Extends\n            \n            \n                    SimulationNodeDatum\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        radius\n                                \n                                \n                                        seriesId\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        radius\n                                    \n                                \n                                \n                                    \n                                        radius:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        seriesId\n                                    \n                                \n                                \n                                    \n                                        seriesId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ChangeDetectorRef, Component, ElementRef, Input, OnChanges, OnDestroy, QueryList, SimpleChanges, ViewChildren } from \"@angular/core\";\nimport { forceCollide, forceSimulation, Simulation, SimulationNodeDatum } from \"d3-force\";\nimport { select } from \"d3-selection\";\nimport each from \"lodash/each\";\nimport isEqual from \"lodash/isEqual\";\nimport isNil from \"lodash/isNil\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\nimport { IPosition } from \"../core/common/types\";\nimport { ChartTooltipsPlugin } from \"../core/plugins/tooltips/chart-tooltips-plugin\";\n\nimport { ChartTooltipDirective } from \"./chart-tooltip.directive\";\n\ninterface ITooltipNode extends SimulationNodeDatum {\n    seriesId: string;\n    radius: number;\n}\n\n@Component({\n    selector: \"nui-chart-tooltips\",\n    templateUrl: \"./chart-tooltips.component.html\",\n    styleUrls: [\"./chart-tooltips.component.less\"],\n})\nexport class ChartTooltipsComponent implements OnChanges, OnDestroy {\n\n    @Input() plugin: ChartTooltipsPlugin;\n\n    @Input() template: ElementRef;\n\n    @ViewChildren(ChartTooltipDirective) tooltips: QueryList;\n\n    public openTooltips = new Subject();\n    public closeTooltips = new Subject();\n\n    private unsubscribe$ = new Subject();\n    private simulation: Simulation;\n    // index we use for fast access of tooltip directives by seriesId\n    private tooltipDirectivesIndex: { [seriesId: string]: ChartTooltipDirective } = {};\n    private closePending = false;\n    private isOpen = false;\n    private openTimeout: number;\n    private collisionTimeout: number;\n    private closeTimeout: number;\n\n    constructor(private changeDetector: ChangeDetectorRef) {\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (!(changes[\"plugin\"] && changes[\"plugin\"].currentValue)) {\n            return;\n        }\n\n        this.unsubscribe$.next();\n\n        this.plugin.showSubject.pipe(takeUntil(this.unsubscribe$)).subscribe(() => this.handleOpen());\n        this.plugin.hideSubject.pipe(takeUntil(this.unsubscribe$)).subscribe(() => this.handleClose());\n    }\n\n    public ngOnDestroy(): void {\n        this.unsubscribe$.next();\n        this.unsubscribe$.complete();\n    }\n\n    public trackByFn(index: number, item: any) {\n        return item.value.seriesId;\n    }\n\n    private handleOpen() {\n        this.changeDetector.detectChanges();\n\n        const currentTooltipDirectivesIndex: { [seriesId: string]: ChartTooltipDirective } = {};\n        this.tooltips.forEach(tooltip => {\n            // this is how we identify which series does the tooltip belong to\n            const seriesId: string | undefined = tooltip.elementRef.nativeElement.getAttribute(\"series-id\") ?? undefined;\n\n            if (!seriesId) {\n                throw new Error(\"SeriesId is not defined\");\n            }\n\n            currentTooltipDirectivesIndex[seriesId] = tooltip;\n        });\n\n        const directivesChanged = !isEqual(currentTooltipDirectivesIndex, this.tooltipDirectivesIndex);\n        if (this.closePending || directivesChanged || !this.isOpen) {\n            clearTimeout(this.openTimeout);\n\n            this.openTimeout = setTimeout(() => {\n                this.openTooltips.next();\n                clearTimeout(this.collisionTimeout);\n\n                this.collisionTimeout = setTimeout(() => {\n                    this.avoidTooltipCollisions();\n                    this.isOpen = true;\n                });\n            });\n        } else {\n            this.openTooltips.next();\n            this.avoidTooltipCollisions();\n            this.isOpen = true;\n        }\n    }\n\n    private handleClose() {\n        if (this.simulation) {\n            this.simulation.stop();\n        }\n\n        this.closePending = true;\n        clearTimeout(this.closeTimeout);\n\n        this.closeTimeout = setTimeout(() => {\n            this.closeTooltips.next();\n            this.closePending = false;\n            this.isOpen = false;\n        });\n    }\n\n    /**\n     * Runs the D3 forceCollide based tooltip collision avoidance algorithm\n     */\n    private avoidTooltipCollisions() {\n        // extracted tooltip positions from tooltip directives\n        const tooltipPositions: { [seriesId: string]: IPosition } = {};\n\n        this.tooltips.forEach(tooltip => {\n            const element = tooltip.getOverlayElement();\n\n            // this is how we identify which series does the tooltip belong to\n            const seriesId: string | undefined = tooltip.elementRef.nativeElement.getAttribute(\"series-id\") ?? undefined;\n\n            if (!seriesId) {\n                throw new Error(\"SeriesId is not defined\");\n            }\n\n            this.tooltipDirectivesIndex[seriesId] = tooltip;\n\n            tooltipPositions[seriesId] = {\n                x: element.offsetLeft,\n                y: element.offsetTop,\n                width: element.clientWidth,\n                height: element.clientHeight,\n            };\n        });\n\n        // if there was a previous simulation, then stop it before running a new one\n        if (this.simulation) {\n            this.simulation.stop();\n        }\n\n        this.simulation = this.startSimulation(this.tooltipDirectivesIndex, tooltipPositions);\n    }\n\n    /**\n     * Starts the force simulation to avoid tooltip overlap\n     *\n     * @param tooltipIndex\n     * @param tooltipPositions\n     */\n    private startSimulation(tooltipIndex: { [p: string]: ChartTooltipDirective },\n                            tooltipPositions: { [seriesId: string]: IPosition }) {\n        const nodes = Object.keys(tooltipPositions).map(seriesId => {\n            const position = tooltipPositions[seriesId];\n\n            if (isNil(position.height) || isNil(position.width)) {\n                throw new Error(\"Position height or width are not defined\");\n            }\n\n            const props: any = {\n                seriesId: seriesId,\n                x: position.x,\n                y: position.y,\n                radius: this.isVertical() ? position.height / 2 : position.width / 2,\n            };\n            if (this.isVertical()) {\n                props.fx = position.x;\n            } else {\n                props.fy = position.y;\n            }\n            return props;\n        });\n\n        // TODO: these numbers are only based on playing with the library for the while, it's not fine tuned at all\n        const collisionForce = forceCollide((node: any) => node.radius)\n            .strength(0.5)\n            .iterations(20);\n\n        const simulation = forceSimulation(nodes)\n            .alphaDecay(0.3)\n            .force(\"collisionForce\", collisionForce);\n\n        simulation.on(\"tick\", () => {\n            each(nodes, (node: ITooltipNode) => {\n                const tooltip = tooltipIndex[node.seriesId];\n\n                select(tooltip.getOverlayElement())\n                    .style(this.isVertical() ? \"top\" : \"left\", (this.isVertical() ? node.y : node.x) + \"px\");\n            });\n        });\n\n        return simulation;\n    }\n\n    private isVertical() {\n        return this.plugin.orientation === \"right\";\n    }\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ITooltipPosition.html":{"url":"interfaces/ITooltipPosition.html","title":"interface - ITooltipPosition","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ITooltipPosition\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/tooltips/chart-tooltips-plugin.ts\n        \n\n            \n                Description\n            \n            \n                Position with extended information for positioning a tooltip \n\n            \n\n            \n                Extends\n            \n            \n                        IPosition\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        overlayPositions\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        overlayPositions\n                                    \n                                \n                                \n                                    \n                                        overlayPositions:     ConnectedPosition[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ConnectedPosition[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ConnectedPosition } from \"@angular/cdk/overlay\";\nimport each from \"lodash/each\";\nimport pickBy from \"lodash/pickBy\";\nimport values from \"lodash/values\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\nimport { CHART_VIEW_STATUS_EVENT, INTERACTION_DATA_POINTS_EVENT, SERIES_STATE_CHANGE_EVENT } from \"../../../constants\";\nimport { RenderState } from \"../../../renderers/types\";\nimport { ChartPlugin } from \"../../common/chart-plugin\";\nimport {\n    IAccessors, IChartEvent, IChartSeries, IChartViewStatusEventPayload, IDataPoint, IDataPointsPayload, InteractionType, IPosition,\n    IRenderStateData,\n} from \"../../common/types\";\n\n/** Position with extended information for positioning a tooltip */\nexport interface ITooltipPosition extends IPosition {\n    overlayPositions: ConnectedPosition[];\n}\n\n/** How far away from the data point position will the tooltip be positioned */\nexport const TOOLTIP_POSITION_OFFSET = 10;\n\n/** @ignore\n * Used for charts where tooltips should be placed aside of some vertical line */\nexport const getVerticalSetup = (offset: number): ConnectedPosition[] => [{\n    originX: \"end\",\n    originY: \"top\",\n    overlayX: \"start\",\n    overlayY: \"center\",\n    offsetX: offset,\n}, {\n    originX: \"start\",\n    originY: \"center\",\n    overlayX: \"end\",\n    overlayY: \"center\",\n    offsetX: -offset,\n}];\n\n/** @ignore\n * Used for charts where tooltips should be placed aligned to some horizontal line (as Horizontal Bar Charts) */\nexport const getHorizontalSetup = (offset: number): ConnectedPosition[] => [{\n    originX: \"end\",\n    originY: \"top\",\n    overlayX: \"center\",\n    overlayY: \"bottom\",\n    offsetY: -offset,\n}, {\n    originX: \"end\",\n    originY: \"bottom\",\n    overlayX: \"center\",\n    overlayY: \"top\",\n    offsetY: offset,\n}];\n\n/**\n * This plugin listens to the INTERACTION_DATA_POINTS_EVENT and transforms received data into tooltips inputs.\n * The actual tooltips are handled by the ChartTooltipsComponent.\n */\nexport class ChartTooltipsPlugin extends ChartPlugin {\n\n    /** Highlighted data points received from the chart */\n    public dataPoints: IDataPointsPayload;\n    /** Calculated positions for the data point tooltips */\n    public dataPointPositions: { [stringId: string]: ITooltipPosition } = {};\n\n    /**\n     * This publishes an event to show tooltips\n     */\n    public showSubject = new Subject();\n\n    /**\n     * This publishes an event to hide tooltips\n     */\n    public hideSubject = new Subject();\n\n    protected overlaySetup: ConnectedPosition[];\n\n    private isChartInView = false;\n    private destroy$ = new Subject();\n    private seriesVisibilityMap:  Record = {};\n\n    /**\n     * @param tooltipPositionOffset Offset of a tooltip from edge of a highlighted element\n     * @param orientation\n     */\n    constructor(readonly tooltipPositionOffset: number = TOOLTIP_POSITION_OFFSET,\n        public orientation: \"right\" | \"top\" = \"right\") {\n        super();\n\n        if (orientation === \"right\") {\n            this.overlaySetup = getVerticalSetup(tooltipPositionOffset);\n        } else if (orientation === \"top\") {\n            this.overlaySetup = getHorizontalSetup(tooltipPositionOffset);\n        }\n    }\n\n    public initialize(): void {\n        this.chart.getEventBus().getStream(INTERACTION_DATA_POINTS_EVENT)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((event: IChartEvent) => {\n                if (event.data.interactionType === InteractionType.MouseMove && this.isChartInView) {\n                    const dataPoints: IDataPointsPayload = event.data.dataPoints;\n                    this.processHighlightedDataPoints(dataPoints);\n                }\n            });\n        \n        this.chart.getEventBus().getStream(SERIES_STATE_CHANGE_EVENT)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((event: IChartEvent) => {\n                event.data.forEach(series => {\n                    this.seriesVisibilityMap[series.seriesId] = series.state !== RenderState.hidden;\n                });\n            });\n\n        this.chart.getEventBus().getStream(CHART_VIEW_STATUS_EVENT)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((event: IChartEvent) => {\n                this.isChartInView = event.data.isChartInView;\n                if (!this.isChartInView) {\n                    this.hideSubject.next();\n                }\n            });\n    }\n\n    public destroy(): void {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n\n    public processHighlightedDataPoints(dataPoints: IDataPointsPayload) {\n        const validDataPoints = pickBy(dataPoints, (d: IDataPoint) => d.index >= 0 && d.position && (this.seriesVisibilityMap[d.seriesId] !== false));\n\n        if (values(validDataPoints).length === 0) {\n            this.hideSubject.next();\n            return;\n        }\n\n        this.dataPoints = validDataPoints;\n        const chartElement: any = this.chart.target?.node()?.parentNode; // the one above svg\n\n        if (!chartElement) {\n            throw new Error(\"Chart parent node is not defined\");\n        }\n\n        const bbox = chartElement.getBoundingClientRect();\n        const offsetParentBbox = chartElement.offsetParent.getBoundingClientRect();\n        const chartPosition: IPosition = {\n            x: bbox.left - offsetParentBbox.left,\n            y: bbox.top - offsetParentBbox.top,\n        };\n\n        each(Object.keys(this.dataPoints), seriesId => {\n            const dataPoint = this.dataPoints[seriesId];\n\n            const chartSeries = this.chart.getDataManager().getChartSeries(dataPoint.seriesId);\n            const tooltipRelativePosition = this.getTooltipPosition(dataPoint, chartSeries);\n            this.dataPointPositions[seriesId] = this.getAbsolutePosition(tooltipRelativePosition, chartPosition);\n        });\n\n        this.showSubject.next();\n    }\n\n    /**\n     * Calculate tooltip position. Default implementation shows the tooltip on left / right with\n     * @param dataPoint\n     * @param chartSeries\n     */\n    protected getTooltipPosition(dataPoint: IDataPoint, chartSeries: IChartSeries): ITooltipPosition {\n\n        if (!dataPoint.position) {\n            throw new Error(\"Unable to get tooltip position\");\n        }\n\n        return {\n            x: dataPoint.position.x,\n            y: dataPoint.position.y,\n            height: dataPoint.position?.height || 1,\n            width: dataPoint.position?.width || 1,\n            overlayPositions: this.overlaySetup,\n        };\n    }\n\n    /**\n     * Converts the relative position within a chart into an absolute position on the screen\n     *\n     * @param relativePosition\n     * @param chartPosition\n     */\n    protected getAbsolutePosition(relativePosition: ITooltipPosition, chartPosition: IPosition): ITooltipPosition {\n        return Object.assign({}, relativePosition, {\n            x: chartPosition.x + this.chart.getGrid().config().dimension.margin.left + relativePosition.x,\n            y: chartPosition.y + this.chart.getGrid().config().dimension.margin.top + relativePosition.y,\n        });\n    }\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IValueProvider.html":{"url":"interfaces/IValueProvider.html","title":"interface - IValueProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IValueProvider\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    get\n                                \n                                \n                                    reset\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            get\n                        \n                        \n                    \n                \n            \n            \n                \nget(entityId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:350\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entityId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \nreset()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:351\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IValueThicknessAccessors.html":{"url":"interfaces/IValueThicknessAccessors.html","title":"interface - IValueThicknessAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IValueThicknessAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/accessors/rectangle-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IDataAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        thickness\n                                \n                                \n                                        value\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        thickness\n                                    \n                                \n                                \n                                    \n                                        thickness:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                    \n                                \n                                \n                                    \n                                        value:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DataAccessor, IAccessors, IDataAccessors, ISeriesAccessors, SeriesAccessor } from \"../../core/common/types\";\n\nexport interface IStartEndRangeAccessors extends IDataAccessors {\n    start: DataAccessor;\n    end: DataAccessor;\n}\n\nexport interface IValueThicknessAccessors extends IDataAccessors {\n    value: DataAccessor;\n    thickness: DataAccessor;\n}\n\nexport interface IRectangleDataAccessors extends IDataAccessors {\n    startX?: DataAccessor;\n    endX?: DataAccessor;\n    thicknessX?: DataAccessor;\n\n    startY?: DataAccessor;\n    endY?: DataAccessor;\n    thicknessY?: DataAccessor;\n}\n\nexport interface IRectangleSeriesAccessors extends ISeriesAccessors {\n    color?: SeriesAccessor;\n    marker?: SeriesAccessor;\n}\n\nexport interface IRectangleAccessors extends IAccessors {\n    data: IRectangleDataAccessors;\n    series: IRectangleSeriesAccessors;\n}\n\nexport class RectangleAccessors implements IRectangleAccessors {\n    data: IRectangleDataAccessors;\n    series: IRectangleSeriesAccessors;\n\n    constructor() {\n\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IXYDataAccessors.html":{"url":"interfaces/IXYDataAccessors.html","title":"interface - IXYDataAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IXYDataAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/accessors/xy-accessors.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        x\n                                \n                                \n                                        y\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        DataAccessor | undefined\n\n                    \n                \n                        \n                            \n                                Defined in src/renderers/accessors/xy-accessors.ts:7\n                            \n                        \n                \n                    \n                        Additional custom keys to match the base interface \n\n                    \n                \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Accessor for value plotted on the x coordinate \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Accessor for value plotted on the y coordinate \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { DataAccessor, IAccessors } from \"../../core/common/types\";\n\nexport interface IXYDataAccessors {\n    /** Accessor for value plotted on the x coordinate */\n    x: DataAccessor;\n    /** Accessor for value plotted on the y coordinate */\n    y: DataAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: DataAccessor | undefined;\n}\n\nexport abstract class XYAccessors implements IAccessors {\n    /** The default data accessors for using with renderers deriving from XYRenderer */\n    public data: IXYDataAccessors = {\n        x: (d: any) => d.x,\n        y: (d: any) => d.y,\n    };\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IXYGridConfig.html":{"url":"interfaces/IXYGridConfig.html","title":"interface - IXYGridConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IXYGridConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/types.ts\n        \n\n            \n                Description\n            \n            \n                Configuration for an XYGrid\n\n            \n\n            \n                Extends\n            \n            \n                        IGridConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        axis\n                                \n                                \n                                        interactionPlugins\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        axis\n                                    \n                                \n                                \n                                    \n                                        axis:         IAllAround\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IAllAround\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The IAllAround value for the grid's axis configurations \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        interactionPlugins\n                                    \n                                \n                                \n                                    \n                                        interactionPlugins:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Add interaction line and label plugins automatically\nNote: This was added to prevent a breaking change. We should avoid this kind of option in future\nversions of IXYGridConfig because ideally all plugins should be added manually (NUI-3304).\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { BaseType } from \"d3\";\nimport { Axis } from \"d3-axis\";\nimport { Selection } from \"d3-selection\";\nimport { Subject } from \"rxjs\";\n\nimport { EventBus } from \"../common/event-bus\";\nimport { Lasagna } from \"../common/lasagna\";\nimport { ScalesIndex } from \"../common/scales/types\";\nimport { D3Selection, IChart, IChartEvent, IChartPlugin } from \"../common/types\";\n\n/**\n * Interface for defining aspects of the top, right, bottom, and left sides of a grid\n */\nexport interface IAllAround {\n    /** Object defining aspects of the top of an entity */\n    top: T;\n    /** Object defining aspects of the right side of an entity */\n    right: T;\n    /** Object defining aspects of the bottom of an entity */\n    bottom: T;\n    /** Object defining aspects of the left side of an entity */\n    left: T;\n}\n\n/**\n * The width and height of an grid\n */\nexport interface IDimensions {\n    width: number;\n    height: number;\n}\n\n/**\n * Configuration of grid dimensions\n */\nexport interface IDimensionConfig {\n    /** The top, right, bottom, and left margin sizes in pixels */\n    margin: IAllAround;\n    /** The top, right, bottom, and left padding sizes in pixels */\n    padding: IAllAround;\n    /** Sets whether the grid uses the chart's container to determine its width */\n    autoWidth: boolean;\n    /** Sets whether the grid uses the chart's container to determine its height */\n    autoHeight: boolean;\n    /** Set of booleans indicating whether a specific margin will be recalculated on chart dimension updates */\n    marginLocked?: IAllAround;\n    /**\n     * Sets the grid's width. Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid width\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    width(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- excluding margins.\n     *\n     * @returns {number} The grid's width\n     */\n    width(): number;\n    /**\n     * Sets the grid's height. Note: 'autoHeight' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid height\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    height(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- excluding margins.\n     *\n     * @returns {number} The grid's height\n     */\n    height(): number;\n    /**\n     * Sets the grid's width by subtracting the grid's horizontal margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new width plus the grid's horizontal margins\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerWidth(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- including horizontal margins.\n     *\n     * @returns {number} The grid's width plus horizontal margins\n     */\n    outerWidth(): number;\n    /**\n     * Sets the grid's height by subtracting the grid's vertical margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new height plus the grid's vertical margins     *\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerHeight(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- including vertical margins.\n     *\n     * @returns {number} The grid's height plus vertical margins\n     */\n    outerHeight(): number;\n}\n\n/**\n * Interface for defining the SVGElements forming the top, right, bottom, and left borders of an entity\n */\nexport interface IBorders extends IAllAround {\n}\n\n/**\n * Configuration of grid borders\n */\nexport interface IBorderConfig {\n    /** The stroke color */\n    color?: string;\n    /** The thickness of the border */\n    width?: number;\n    /** The class name */\n    className?: string;\n    /** Boolean indicating whether the border should be visible */\n    visible?: boolean;\n}\n\nexport interface ITextOverflowArgs {\n    widthLimit: number;\n    horizontalPadding: number;\n    ellipsisWidth: number;\n}\n\n/** Type for tick overflow handler */\nexport type TextOverflowHandler = (textSelection: Selection, args: ITextOverflowArgs) => void;\n\n/** Interface representing the configuration for tick labels */\nexport interface ITickLabelConfig {\n    /**\n     * Padding for left and right sides of label used for calculating text overflow limits\n     * (number represents the padding on each side)\n     */\n    horizontalPadding: number;\n    /** Handler for text overflow. Set to 'undefined' to disable overflow handling */\n    overflowHandler?: TextOverflowHandler;\n    /**\n     * Setting this insures the label's width is smaller or equal to the provided number\n     */\n    maxWidth?: number;\n}\n\n/** Configuration of a grid axis */\nexport interface IAxisConfig {\n    /** Boolean indicating whether the axis should be visible */\n    visible: boolean;\n    /** The approximate number of ticks to display */\n    approximateTicks: number;\n    /** Boolean indicating whether grid ticks should be displayed */\n    gridTicks: boolean;\n    /** The length of the ticks in pixels */\n    tickSize: number;\n    /** Configuration for the tick labels */\n    tickLabel: ITickLabelConfig;\n    /** Sets whether to fit the grid margins to the axis labels */\n    fit: boolean;\n    /** Sets the axis padding */\n    padding: number;\n}\n\n/**\n * Basic grid configuration\n */\nexport interface IGridConfig {\n    /** Boolean indicating whether the grid will respond to mouse events */\n    interactive: boolean;\n    /** Configuration for the grid's dimensions */\n    dimension: IDimensionConfig;\n    /** Configuration for the grid's borders */\n    borders: IAllAround;\n    /** String indicating the desired cursor style */\n    cursor: string;\n    /** Set to true to disable the render area height correction */\n    disableRenderAreaHeightCorrection?: boolean;\n    /** Set to true to disable the render area width correction */\n    disableRenderAreaWidthCorrection?: boolean;\n}\n\n/**\n * Configuration for an XYGrid\n */\nexport interface IXYGridConfig extends IGridConfig {\n    /** The IAllAround value for the grid's axis configurations */\n    axis: IAllAround;\n\n    /**\n     * Add interaction line and label plugins automatically\n     * Note: This was added to prevent a breaking change. We should avoid this kind of option in future\n     * versions of IXYGridConfig because ideally all plugins should be added manually (NUI-3304).\n     */\n    interactionPlugins: boolean;\n}\n\n/**\n * The basic interface for a grid's dimensions, scaling, interaction, and borders\n *\n * @interface\n */\nexport interface IGrid {\n    /** The grid scales\n     *\n     * @type {ScalesIndex}\n     */\n    scales: ScalesIndex;\n\n    /**\n     * Subject for indicating that the chart's dimensions should be updated\n     */\n    updateChartDimensionsSubject?: Subject;\n\n    /**\n     * Chart event bus\n     */\n    eventBus: EventBus;\n\n    /**\n     * Provides access to the grid's layering mechanism\n     *\n     * @returns {Lasagna} The grid's layering mechanism\n     */\n    getLasagna(): Lasagna;\n\n    /**\n     * Provides access to the grid's interactive area\n     *\n     * @returns {D3Selection} The grid's interactive area\n     */\n    getInteractiveArea(): D3Selection;\n\n    /**\n     * getter for the grid's target d3 selection\n     *\n     * @returns {D3Selection} The grid's target d3 selection\n     */\n    target(): D3Selection;\n\n    /**\n     * setter for the grid's target d3 selection\n     *\n     * @param {D3Selection} [target] The grid's new target d3 selection\n     * @returns {IGrid} The grid instance\n     */\n    target(target: D3Selection): IGrid;\n    target(target: D3Selection): D3Selection | IGrid;\n\n    /**\n     * getter for the grid configuration\n     *\n     * @returns {IGridConfig} The grid configuration\n     */\n    config(): IGridConfig;\n\n    /**\n     * setter for the grid configuration\n     *\n     * @param {IGridConfig} config The new grid configuration\n     * @returns {this} The grid instance\n     */\n    config(config: IGridConfig): this;\n\n    /**\n     * Builds the grid's rendered elements\n     *\n     * @returns {IGrid} The grid instance\n     */\n    build(): IGrid;\n\n    /**\n     * Updates the grid's rendered elements based on the current scales and configuration\n     *\n     * @returns {IGrid} The grid instance\n     */\n    update(): IGrid;\n\n    /**\n     * Updates the grid's dimensions as specified\n     *\n     * @param {Partial} dimensions The new grid dimensions\n     * @returns {IGrid} The grid instance\n     */\n    updateDimensions(dimensions: Partial): IGrid;\n\n    /**\n     * Updates the ranges on the grid's scales based on the grid's configured dimensions\n     *\n     * @returns {IGrid} The grid instance\n     */\n    updateRanges(): IGrid;\n\n    /**\n     * Builds the grid's plugins\n     *\n     * @returns {IChartPlugin[]} The set of generated plugins\n     */\n    buildPlugins(chart: IChart): IChartPlugin[];\n}\n\n/**\n * Interface for a d3 axis entity\n */\nexport interface IAxis {\n    /** The d3 group element for the axis label */\n    labelGroup: D3Selection;\n    /** The d3 group element for the axis ticks */\n    tickGroup: D3Selection;\n    /** The d3 group element for the axis */\n    group: D3Selection;\n    /** The d3 axis */\n    axis: Axis;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IXYScales.html":{"url":"interfaces/IXYScales.html","title":"interface - IXYScales","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IXYScales\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/scales/types.ts\n        \n\n\n            \n                Extends\n            \n            \n                        Scales\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        x\n                                \n                                \n                                        y\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:         IScale\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IScale\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:         IScale\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IScale\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { AxisScale } from \"d3-axis\";\n\nimport { IAccessors, IChartSeries } from \"../types\";\n\n/** Domain for series with empty or null data */\nexport const EMPTY_CONTINUOUS_DOMAIN = [0, 0];\n/** A reasonable non-data-driven domain for charts  */\nexport const NORMALIZED_DOMAIN = [0, 1];\n\n/** Signature for domain calculator */\nexport type DomainCalculator = (chartSeriesSet: IChartSeries[], scaleId: string, scale: IScale) => any[];\n\n/** Interface for scale formatters */\nexport interface IFormatters {\n    /** Formatter for tick labels */\n    tick?: Formatter;\n    /** Additional formatters */\n    [p: string]: Formatter | undefined;\n}\n\n/** Signature for label formatters */\nexport type Formatter = (value: T) => string;\n\n/** Dictionary of scale collections in index and array form */\nexport interface ScalesIndex {\n    [key: string]: {\n        /** Scale collection as an index */\n        index: { [scaleId: string]: IScale };\n        /** Scale collection as an array */\n        list: IScale[];\n    };\n}\n\n/** Dictionary of scales */\nexport type Scales = Record>;\n\nexport interface IXYScales extends Scales {\n    x: IScale;\n    y: IScale;\n}\n\nexport interface IRadialScales extends Scales {\n    r: IScale;\n}\n\n/** Interface for a scale */\nexport interface IScale {\n    /** The scale identifier */\n    readonly id: string;\n    readonly d3Scale: AxisScale; // TODO: maybe AxisScale is to narrow?\n\n    /** If this flag is enabled, the domain of this scale is not recalculated */\n    isDomainFixed?: boolean;\n    /** Method used to calculate the scale's domain */\n    domainCalculator?: DomainCalculator;\n    /** The scales formatters */\n    formatters: IFormatters;\n    /** If this flag is enabled, the domain has been recalculated with ticks in mind */\n    __domainCalculatedWithTicks?: boolean;\n\n    /**\n     * Determines if the scale's domain is continuous\n     *\n     * @returns {boolean} true if the scale's domain is continuous (numeric), false otherwise\n     */\n    isContinuous(): boolean;\n\n    /**\n     * Determines if the scale's domain is valid\n     *\n     * @returns {boolean} true if the scale's domain is valid, false otherwise\n     */\n    isDomainValid(): boolean;\n\n    /**\n     * Converts a value to its corresponding coordinate\n     *\n     * @param {T} value The value to be converted\n     * @returns {number} The coordinate corresponding to the specified value\n     */\n    convert(value: T): number;\n\n    /**\n     * Converts a coordinate to its corresponding value\n     *\n     * @param {number} coordinate The coordinate to be converted\n     * @returns {T} The value corresponding to the specified coordinate\n     */\n    invert(coordinate: number): T | undefined;\n\n    /**\n     * Gets the scale's range\n     *\n     * @returns {[number, number]} The scale's range\n     */\n    range(): [number, number];\n\n    /**\n     * Sets the scale's range\n     *\n     * @param {[number, number]} range The scale's new range\n     */\n    range(range: [number, number]): this;\n\n    /**\n     * Gets the scale's domain\n     *\n     * @returns {T[]} The scale's domain\n     */\n    domain(): T[];\n\n    /**\n     * Sets the scale's domain\n     *\n     * @param {T[]} domain The scale's new domain\n     */\n    domain(domain: T[]): this;\n\n    /**\n     * Shorthand method for setting the domain and isDomainFixed at once\n     *\n     * @param {T[]} domain The scale's fixed domain\n     */\n    fixDomain(domain: T[]): void;\n\n    /**\n     * Reverse the scale orientation by toggling the reversed flag\n     */\n    reverse(): this;\n\n    /**\n     * Getter for the reversed flag (see #reverse)\n     */\n    reversed(): boolean;\n\n    /**\n     * Setter for the reversed flag (see #reverse)\n     *\n     * @param reversed\n     */\n    reversed(reversed: boolean): this;\n}\n\n\nexport interface IBandScale extends IScale {\n    bandwidth(): number;\n}\n\nexport function isBandScale(scale: any): scale is IBandScale {\n    return typeof scale.bandwidth === \"function\";\n}\n\nexport interface IHasInnerScale extends IScale {\n    innerScale: IScale;\n}\n\nexport function hasInnerScale(scale: any): scale is IHasInnerScale {\n    return typeof scale.innerScale !== \"undefined\";\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IZoneCrossPoint.html":{"url":"interfaces/IZoneCrossPoint.html","title":"interface - IZoneCrossPoint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IZoneCrossPoint\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                A point at which a data series enters or exits a threshold zone\n\n            \n\n            \n                Extends\n            \n            \n                        IPosition\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        isZoneEdge\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isZoneEdge\n                                    \n                                \n                                \n                                    \n                                        isZoneEdge:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Indicates whether the cross point is on the edge of a threshold zone \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IZoomPluginConfiguration.html":{"url":"interfaces/IZoomPluginConfiguration.html","title":"interface - IZoomPluginConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IZoomPluginConfiguration\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/zoom-plugin.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        enableExternalEvents\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        enableExternalEvents\n                                    \n                                \n                                \n                                    \n                                        enableExternalEvents:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BrushBehavior, BrushSelection, brushX } from \"d3-brush\";\nimport { event } from \"d3-selection\";\nimport defaultsDeep from \"lodash/defaultsDeep\";\nimport isEmpty from \"lodash/isEmpty\";\nimport isUndefined from \"lodash/isUndefined\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\nimport { INTERACTION_COORDINATES_EVENT, INTERACTION_VALUES_ACTIVE_EVENT, SET_DOMAIN_EVENT, STANDARD_RENDER_LAYERS } from \"../../constants\";\nimport { RenderLayerName } from \"../../renderers/types\";\nimport { ChartPlugin } from \"../common/chart-plugin\";\nimport { IScale } from \"../common/scales/types\";\nimport { D3Selection, IChartEvent, InteractionType, ISetDomainEventPayload } from \"../common/types\";\nimport { Grid } from \"../grid/grid\";\nimport { XYGrid } from \"../grid/xy-grid\";\n\nimport { IInteractionCoordinatesPayload } from \"./types\";\n\nexport interface IZoomPluginConfiguration {\n    enableExternalEvents?: boolean;\n}\n\nexport class ZoomPlugin extends ChartPlugin {\n    // *Note:* This plugin manually moves the d3 brush across the screen to accommodate a known Firefox\n    // bug in which mouse events report an incorrect pointer position for svg children of an element\n    // transformed by a translate function: https://github.com/d3/d3-selection/issues/81\n\n    public static LAYER_NAME = \"zoom-brush\";\n    public static readonly DEFAULT_CONFIG: IZoomPluginConfiguration = {\n        enableExternalEvents: false,\n    };\n\n    private grid: XYGrid;\n    private brush: BrushBehavior;\n    private zoomBrushLayer: D3Selection;\n    private brushElement: D3Selection;\n    private destroy$ = new Subject();\n    private brushStartX: number | undefined;\n    private interactionHandlerMap: Record;\n\n    constructor(public config: IZoomPluginConfiguration = {}) {\n        super();\n        this.config = defaultsDeep(this.config, ZoomPlugin.DEFAULT_CONFIG);\n        this.interactionHandlerMap = {\n            [InteractionType.MouseDown]: this.brushStart,\n            [InteractionType.MouseMove]: this.brushMove,\n            [InteractionType.MouseUp]: this.brushEnd,\n        };\n    }\n\n    public initialize(): void {\n        this.grid = this.chart.getGrid() as XYGrid;\n        this.zoomBrushLayer = this.grid.getLasagna().addLayer({\n            name: ZoomPlugin.LAYER_NAME,\n            // add 1 to the foreground layer's order to ensure the brush is rendered in front of it\n            order: STANDARD_RENDER_LAYERS[RenderLayerName.foreground].order + 1,\n            clipped: true,\n        });\n\n        this.chart.getEventBus().getStream(INTERACTION_COORDINATES_EVENT)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((chartEvent: IChartEvent) => {\n                if (chartEvent.broadcast && !this.config.enableExternalEvents) {\n                    return;\n                }\n\n                const data: IInteractionCoordinatesPayload = chartEvent.data;\n                if (isEmpty(this.grid.scales) || isEmpty(data.coordinates)) {\n                    return;\n                }\n\n                if (this.interactionHandlerMap[data.interactionType]) {\n                    const xCoord = data.coordinates && data.coordinates.x;\n                    this.interactionHandlerMap[data.interactionType](xCoord);\n                }\n            });\n\n        this.brush = brushX();\n        this.brushElement = this.zoomBrushLayer.append(\"g\")\n            .attr(\"class\", \"brush\");\n\n        // engage pointer capture to confine mouse events to the interactive area\n        // (in other words, if the 'mouseup' is physically triggered outside the interactive area,\n        // the pointer capture allows us to still zoom based on that event)\n        this.chart.getGrid().getInteractiveArea()\n            .on(\"pointerdown\", () => event.target.setPointerCapture(event.pointerId))\n            .on(\"pointerup\", () => event.target.releasePointerCapture(event.pointerId));\n    }\n\n    public updateDimensions(): void {\n        const dimension = this.grid.config().dimension;\n\n        // set the brush area's dimensions\n        this.brush.extent([[0, 0], [dimension.width(), dimension.height()]]);\n\n        // render the brush area after we have dimensions\n        this.brush(this.zoomBrushLayer.select(\".brush\"));\n\n        // prevent the brush from handling its own pointer events\n        this.brushElement.select(\".overlay\")\n            .style(\"pointer-events\", \"none\");\n\n        // remove stroke per mockups\n        this.brushElement.select(\".selection\")\n            .attr(\"stroke\", null);\n    }\n\n    public destroy(): void {\n        this.grid.getLasagna().removeLayer(ZoomPlugin.LAYER_NAME);\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n\n    private brushStart = (xCoord: number) => {\n        if (!isUndefined(this.brushStartX)) {\n            return;\n        }\n\n        this.chart.getEventBus().getStream(INTERACTION_VALUES_ACTIVE_EVENT).next({ data: false });\n        this.brushStartX = xCoord;\n    }\n\n    private brushMove = (xCoord: number) => {\n        if (isUndefined(this.brushStartX)) {\n            return;\n        }\n\n        const selection = [this.brushStartX, xCoord].sort((a, b) => a - b);\n        this.brush.move(this.brushElement, selection as BrushSelection);\n    }\n\n    private brushEnd = (xCoord: number) => {\n        if (isUndefined(this.brushStartX)) {\n            return;\n        }\n\n        const selection = [this.brushStartX, xCoord].sort((a, b) => a - b);\n        this.brushStartX = undefined;\n        this.chart.getEventBus().getStream(INTERACTION_VALUES_ACTIVE_EVENT).next({ data: true });\n\n        // remove the brush\n        this.brush.move(this.brushElement, null);\n\n        const xScales = this.grid.scales.x.list;\n        if (!xScales || selection[0] === selection[1]) {\n            return;\n        }\n\n        let widthCorrection = 0;\n        const gridConfig = this.grid.config();\n        if (!gridConfig.disableRenderAreaWidthCorrection && selection[1] === gridConfig.dimension.width() - Grid.RENDER_AREA_WIDTH_CORRECTION) {\n            // Width correction to accommodate similar adjustment in grid. This ensures that the right-most column of pixels on the chart is selectable.\n            widthCorrection = Grid.RENDER_AREA_WIDTH_CORRECTION;\n        }\n\n        const data: ISetDomainEventPayload = xScales.reduce((result, next: IScale) => {\n            result[next.id] = [selection[0], selection[1] as number + widthCorrection].map(x => next.invert(x as number));\n            return result;\n        }, {});\n\n        // zoom the chart\n        this.chart.getEventBus().getStream(SET_DOMAIN_EVENT).next({ data });\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InteractionLabelPlugin.html":{"url":"classes/InteractionLabelPlugin.html","title":"class - InteractionLabelPlugin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InteractionLabelPlugin\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/interaction/interaction-label-plugin.ts\n        \n\n            \n                Description\n            \n            \n                Highlights the label on x-axis that corresponds to interaction position\n\n            \n\n            \n                Extends\n            \n            \n                        ChartPlugin\n            \n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                areLabelUpdatesEnabled\n                            \n                            \n                                    Static\n                                LAYER_NAME\n                            \n                            \n                                    Public\n                                chart\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(formatterName: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/plugins/interaction/interaction-label-plugin.ts:33\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        formatterName\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            areLabelUpdatesEnabled\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/interaction/interaction-label-plugin.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            LAYER_NAME\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"interaction-label\"\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/interaction/interaction-label-plugin.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IChart\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPlugin:7\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/interaction/interaction-label-plugin.ts:131\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/interaction/interaction-label-plugin.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:15\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:9\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import find from \"lodash/find\";\nimport isArray from \"lodash/isArray\";\nimport isEmpty from \"lodash/isEmpty\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\nimport { CHART_VIEW_STATUS_EVENT, INTERACTION_VALUES_EVENT } from \"../../../constants\";\nimport { ChartPlugin } from \"../../common/chart-plugin\";\nimport { convert } from \"../../common/scales/helpers/convert\";\nimport { IScale } from \"../../common/scales/types\";\nimport { D3Selection, IChartEvent, IChartViewStatusEventPayload, InteractionType } from \"../../common/types\";\nimport { UtilityService } from \"../../common/utility.service\";\nimport { XYGrid } from \"../../grid/xy-grid\";\nimport { IInteractionValuesPayload } from \"../types\";\n\n/** @ignore */\nconst FALLBACK_FORMATTER = \"tick\";\n\n/**\n * Highlights the label on x-axis that corresponds to interaction position\n *\n * @class InteractionLabelPlugin\n * @extends {ChartPlugin}\n */\nexport class InteractionLabelPlugin extends ChartPlugin {\n    public static LAYER_NAME = \"interaction-label\";\n\n    public areLabelUpdatesEnabled = true;\n\n    private isChartInView = false;\n    private lastInteractionValuesPayload: IInteractionValuesPayload;\n    private interactionLabelLayer: D3Selection;\n    private destroy$ = new Subject();\n\n    constructor(private formatterName = \"title\") {\n        super();\n    }\n\n    public initialize(): void {\n        this.interactionLabelLayer = this.chart.getGrid().getLasagna().addLayer({\n            name: InteractionLabelPlugin.LAYER_NAME,\n            order: 901,\n            clipped: false,\n        });\n\n        this.chart.getEventBus().getStream(INTERACTION_VALUES_EVENT)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((event: IChartEvent) => {\n                this.lastInteractionValuesPayload = event.data;\n                if (this.isChartInView) {\n                    this.handleLabelUpdate();\n                }\n            });\n\n        this.chart.getEventBus().getStream(CHART_VIEW_STATUS_EVENT)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((event: IChartEvent) => {\n                this.isChartInView = event.data.isChartInView;\n                if (this.isChartInView && this.lastInteractionValuesPayload) {\n                    this.handleLabelUpdate();\n                }\n            });\n    }\n\n    protected handleLabelUpdate() {\n        const scales = this.chart.getGrid().scales;\n        if (!this.areLabelUpdatesEnabled || this.lastInteractionValuesPayload.interactionType !== InteractionType.MouseMove || isEmpty(scales)) {\n            return;\n        }\n\n        const grid: XYGrid = this.chart.getGrid();\n        const xScale = find(scales[\"x\"].index, { id: grid.bottomScaleId });\n\n        if (!xScale) {\n            throw new Error(\"xScale is not defined\");\n        }\n\n        const xValue = this.lastInteractionValuesPayload.values.x ? this.lastInteractionValuesPayload.values.x[xScale.id] : null;\n        this.updateLabel(xScale, isArray(xValue) ? xValue.slice(0, xValue.length - 1) : xValue);\n    }\n\n    protected updateLabel(scale: IScale, value: any) {\n        let interactionLabel: D3Selection = this.interactionLabelLayer.select(`.${InteractionLabelPlugin.LAYER_NAME}`);\n        if (interactionLabel.empty() && !!value) {\n            interactionLabel = this.buildInteractionLabel(this.interactionLabelLayer);\n        } else if (!value) {\n            interactionLabel.remove();\n            return;\n        }\n\n        const formatter = scale.formatters[this.formatterName] || scale.formatters[FALLBACK_FORMATTER];\n        const labelContent = formatter?.(value);\n\n        if (!labelContent) {\n            throw new Error(\"labelContent is not defined\");\n        }\n\n        const textSelection = interactionLabel.select(\"text\")\n            .text(labelContent);\n        const bbox = (textSelection.node() as any).getBBox();\n        const gridDimension = this.chart.getGrid().config().dimension;\n\n        // subtract the relative vertical text offset inside the bbox from\n        // the grid height to determine the label's vertical placement\n        const heightOffset = (gridDimension.height() - bbox.y);\n\n        textSelection\n            .attr(\"transform\", `translate(0, ${heightOffset})`)\n            .style(\"text-anchor\", \"middle\");\n\n        // match the horizontal padding to the built-in bbox vertical padding\n        const horizontalPadding = (bbox.height + bbox.y) * 2;\n\n        const labelWidth = bbox.width + horizontalPadding;\n        const allowedRange: [number, number] = [(labelWidth / 2), gridDimension.width() - (labelWidth / 2)];\n        const x = convert(scale, value, 0.5);\n        const clampedX = UtilityService.clampToRange(x, allowedRange);\n\n        interactionLabel\n            .attr(\"transform\", `translate(${clampedX},0)`)\n            .select(\"rect\")\n            .attrs({\n                \"transform\": `translate(0,${heightOffset})`,\n                \"x\": -(labelWidth / 2),\n                \"y\": bbox.y,\n                \"width\": labelWidth,\n                \"height\": bbox.height,\n            });\n    }\n\n    public destroy(): void {\n        this.chart.getGrid().getLasagna().removeLayer(InteractionLabelPlugin.LAYER_NAME);\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n\n    private buildInteractionLabel(target: D3Selection): D3Selection {\n        const label = target.append(\"g\")\n            .attr(\"class\", InteractionLabelPlugin.LAYER_NAME);\n\n        label.append(\"rect\")\n            .attr(\"class\", `${InteractionLabelPlugin.LAYER_NAME}__rect`);\n\n        label.append(\"text\")\n            .attr(\"class\", `${InteractionLabelPlugin.LAYER_NAME}__text`);\n\n        return label;\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InteractionLinePlugin.html":{"url":"classes/InteractionLinePlugin.html","title":"class - InteractionLinePlugin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InteractionLinePlugin\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/interaction/interaction-line-plugin.ts\n        \n\n            \n                Description\n            \n            \n                Draws a vertical line on the x-axis that corresponds to interaction position\n\n            \n\n            \n                Extends\n            \n            \n                        ChartPlugin\n            \n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                LAYER_NAME\n                            \n                            \n                                    Public\n                                chart\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            LAYER_NAME\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"interaction-line\"\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/interaction/interaction-line-plugin.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IChart\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPlugin:7\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/interaction/interaction-line-plugin.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/interaction/interaction-line-plugin.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:15\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:9\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import find from \"lodash/find\";\nimport isEmpty from \"lodash/isEmpty\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\nimport { CHART_VIEW_STATUS_EVENT, INTERACTION_VALUES_EVENT } from \"../../../constants\";\nimport { ChartPlugin } from \"../../common/chart-plugin\";\nimport { IScale } from \"../../common/scales/types\";\nimport { D3Selection, IChartEvent, IChartViewStatusEventPayload, InteractionType } from \"../../common/types\";\nimport { XYGrid } from \"../../grid/xy-grid\";\nimport { IInteractionValuesPayload } from \"../types\";\n\n/**\n * Draws a vertical line on the x-axis that corresponds to interaction position\n *\n * @class InteractionLinePlugin\n * @extends {ChartPlugin}\n */\nexport class InteractionLinePlugin extends ChartPlugin {\n    public static LAYER_NAME = \"interaction-line\";\n\n    private isChartInView = false;\n    private lastInteractionValuesPayload: IInteractionValuesPayload;\n    private interactionLineLayer: D3Selection;\n    private destroy$ = new Subject();\n\n    public initialize(): void {\n        this.interactionLineLayer = this.chart.getGrid().getLasagna().addLayer({\n            name: \"interaction-line\",\n            order: 900,\n            clipped: true,\n        });\n\n        this.chart.getEventBus().getStream(INTERACTION_VALUES_EVENT)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((event: IChartEvent) => {\n                this.lastInteractionValuesPayload = event.data;\n                if (this.isChartInView) {\n                    this.handleLineUpdate();\n                }\n            });\n\n        this.chart.getEventBus().getStream(CHART_VIEW_STATUS_EVENT)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((event: IChartEvent) => {\n                this.isChartInView = event.data.isChartInView;\n                if (this.isChartInView && this.lastInteractionValuesPayload) {\n                    this.handleLineUpdate();\n                }\n            });\n    }\n\n    private handleLineUpdate() {\n        const scales = this.chart.getGrid().scales;\n        if (this.lastInteractionValuesPayload.interactionType !== InteractionType.MouseMove || isEmpty(scales)) {\n            return;\n        }\n\n        const grid: XYGrid = this.chart.getGrid();\n        const xScale = find(scales[\"x\"].index, { id: grid.bottomScaleId });\n\n        if (!xScale) {\n            throw new Error(\"xScale is not defined\");\n        }\n\n        const xValue = this.lastInteractionValuesPayload.values.x ? this.lastInteractionValuesPayload.values.x[xScale.id] : null;\n        this.updateLine(this.interactionLineLayer, xScale, xValue);\n    }\n\n    private updateLine(layer: D3Selection, xScale: IScale, value: any) {\n        const data = [];\n        if (value) {\n            data.push(value);\n        }\n        const line = layer.selectAll(`.${InteractionLinePlugin.LAYER_NAME}`).data(data);\n\n        const xFn = (d: any) => xScale.convert(d);\n        const attrs = {\n            \"class\": InteractionLinePlugin.LAYER_NAME,\n            \"x1\": xFn,\n            \"y1\": 0,\n            \"x2\": xFn,\n            \"y2\": this.chart.getGrid().config().dimension.height(),\n        };\n\n        line.enter()\n            .append(\"line\")\n            .merge(line as any)\n            .attrs(attrs);\n\n        line.exit().remove();\n    }\n\n    public destroy(): void {\n        this.chart.getGrid().getLasagna().removeLayer(InteractionLinePlugin.LAYER_NAME);\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LegendComponent.html":{"url":"components/LegendComponent.html","title":"component - LegendComponent","body":"\n                   \n\n\n\n\n\n  Components\n  LegendComponent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n    File\n\n\n    src/legend/legend.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnChanges\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n            \n                encapsulation\n                ViewEncapsulation.Emulated\n            \n\n\n\n            \n                host\n                {}\n            \n\n\n\n\n\n\n            \n                selector\n                nui-legend\n            \n\n\n\n\n            \n                templateUrl\n                ./legend.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                activeChanged\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                active\n                            \n                            \n                                interactive\n                            \n                            \n                                orientation\n                            \n                            \n                                seriesColor\n                            \n                            \n                                seriesIcon\n                            \n                            \n                                seriesUnitLabel\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        active\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend.component.ts:21\n                            \n                        \n                \n                    \n                        The active state\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        interactive\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend.component.ts:26\n                            \n                        \n                \n                    \n                        The legend's interactive mode switch\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        orientation\n                    \n                \n                \n                    \n                        Type :         LegendOrientation\n\n                    \n                \n                \n                    \n                        Default value : LegendOrientation.vertical\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend.component.ts:31\n                            \n                        \n                \n                    \n                        The legend's orientation\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        seriesColor\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend.component.ts:36\n                            \n                        \n                \n                    \n                        The legend's overall series color. Individual legend series may override this.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        seriesIcon\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend.component.ts:41\n                            \n                        \n                \n                    \n                        The legend's overall series icon. Individual legend series may override this.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        seriesUnitLabel\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend.component.ts:46\n                            \n                        \n                \n                    \n                        The legend's overall series unit label. Individual legend series may override this.\n\n                    \n                \n            \n        \n\n\n\n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            activeChanged\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new EventEmitter()\n                        \n                    \n                        \n                            \n                                    Defined in src/legend/legend.component.ts:16\n                            \n                        \n\n                \n                    \n                        EventEmitter for notifying subscribers of a change in the active state\n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, EventEmitter, Input, OnChanges, OnDestroy, SimpleChanges, ViewEncapsulation } from \"@angular/core\";\n\nimport { LegendOrientation } from \"./types\";\n\n@Component({\n    selector: \"nui-legend\",\n    // eslint-disable-next-line\n    host: { \"class\": \"d-inline-block\" },\n    templateUrl: \"./legend.component.html\",\n    encapsulation: ViewEncapsulation.Emulated,\n})\nexport class LegendComponent implements OnChanges, OnDestroy {\n    /**\n     * EventEmitter for notifying subscribers of a change in the active state\n     */\n    public activeChanged = new EventEmitter();\n\n    /**\n     * The active state\n     */\n    @Input() public active = false;\n\n    /**\n     * The legend's interactive mode switch\n     */\n    @Input() public interactive = false;\n\n    /**\n     * The legend's orientation\n     */\n    @Input() public orientation: LegendOrientation = LegendOrientation.vertical;\n\n    /**\n     * The legend's overall series color. Individual legend series may override this.\n     */\n    @Input() public seriesColor: string;\n\n    /**\n     * The legend's overall series icon. Individual legend series may override this.\n     */\n    @Input() public seriesIcon: string;\n\n    /**\n     * The legend's overall series unit label. Individual legend series may override this.\n     */\n    @Input() public seriesUnitLabel: string;\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes[\"active\"]) {\n            this.activeChanged.emit(this.active);\n        }\n    }\n\n    public ngOnDestroy(): void {\n        this.activeChanged.complete();\n    }\n\n}\n\n    \n\n\n\n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    '\n    var COMPONENTS = [{'name': 'BasicLegendTileComponent', 'selector': 'nui-basic-legend-tile'},{'name': 'ChartComponent', 'selector': 'nui-chart'},{'name': 'ChartDonutContentComponent', 'selector': 'nui-chart-donut-content'},{'name': 'ChartMarkerComponent', 'selector': 'nui-chart-marker'},{'name': 'ChartPopoverComponent', 'selector': 'nui-chart-popover'},{'name': 'ChartTooltipComponent', 'selector': 'nui-chart-tooltip'},{'name': 'ChartTooltipsComponent', 'selector': 'nui-chart-tooltips'},{'name': 'LegendComponent', 'selector': 'nui-legend'},{'name': 'LegendSeriesComponent', 'selector': 'nui-legend-series'},{'name': 'RichLegendTileComponent', 'selector': 'nui-rich-legend-tile'}];\n    var DIRECTIVES = [{'name': 'ChartCollectionIdDirective', 'selector': '[nuiChartCollectionId]'}];\n    var ACTUAL_COMPONENT = {'name': 'LegendComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LegendInteractionAssist.html":{"url":"classes/LegendInteractionAssist.html","title":"class - LegendInteractionAssist","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LegendInteractionAssist\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/chart-assists/chart-assist.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                renderStatesIndex\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                emphasizeSeries\n                            \n                            \n                                    Public\n                                getSeriesStates\n                            \n                            \n                                    Public\n                                isSeriesHidden\n                            \n                            \n                                    Public\n                                resetSeries\n                            \n                            \n                                    Public\n                                setGroupState\n                            \n                            \n                                    Public\n                                setGroupVisibility\n                            \n                            \n                                    Public\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(chartAssist: ChartAssist)\n                    \n                \n                        \n                            \n                                Defined in src/core/chart-assists/chart-assist.ts:310\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        chartAssist\n                                                  \n                                                        \n                                                                        ChartAssist\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            renderStatesIndex\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRenderStatesIndex\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/chart-assist.ts:310\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            emphasizeSeries\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    emphasizeSeries(seriesId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/chart-assist.ts:384\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    seriesId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getSeriesStates\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSeriesStates()\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/chart-assist.ts:331\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         IRenderStateData[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isSeriesHidden\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isSeriesHidden(seriesId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/chart-assist.ts:335\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    seriesId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            resetSeries\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    resetSeries()\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/chart-assist.ts:390\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setGroupState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setGroupState(groupId: string, renderState: RenderState)\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/chart-assist.ts:360\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    groupId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        id of the parent series\n\n                                    \n                                \n                                \n                                    renderState\n                                    \n                                                RenderState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setGroupVisibility\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setGroupVisibility(groupId: string, visible: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/chart-assist.ts:374\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    groupId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        id of the parent series\n\n                                    \n                                \n                                \n                                    visible\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(seriesSet: IChartAssistSeries[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/chart-assist.ts:315\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    seriesSet\n                                    \n                                            IChartAssistSeries[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import each from \"lodash/each\";\nimport keyBy from \"lodash/keyBy\";\nimport values from \"lodash/values\";\nimport { Observable, of, Subject, Subscription } from \"rxjs\";\nimport { filter, map, switchMap, takeUntil } from \"rxjs/operators\";\n\nimport { DESTROY_EVENT, HIGHLIGHT_SERIES_EVENT, INTERACTION_DATA_POINTS_EVENT, MOUSE_ACTIVE_EVENT } from \"../../constants\";\nimport { RenderState } from \"../../renderers/types\";\nimport { EventBus } from \"../common/event-bus\";\nimport { defaultMarkerProvider, defaultPalette } from \"../common/palette/default-providers\";\nimport {\n    IAccessors,\n    IChart,\n    IChartAssistSeries,\n    IChartEvent,\n    IChartMarker,\n    IChartPalette,\n    IChartSeries,\n    IDataPoint,\n    IDataPointsPayload,\n    IInteractionDataPointsEvent,\n    InteractionType,\n    IRenderStateData,\n    IValueProvider,\n} from \"../common/types\";\n\nimport { ChartAssistEventType, ChartAssistRenderStateData, IChartAssist, IChartAssistEvent, IRenderStatesIndex } from \"./types\";\n\n/** @ignore */\nconst chartAssistSeriesDefaults: Partial> = {\n    showInLegend: true,\n    preprocess: true,\n};\n\n/**\n * Helper class that helps to bootstrap a chart with legend, using data pre-processor.\n * It will use the most common settings.\n */\nexport class ChartAssist implements IChartAssist {\n\n    /**\n     * Retrieves the display value for a data point on the specified series\n     *\n     * @param chartSeries The series containing the data point to get a label for\n     * @param dataPoint The data point to get a label for\n     * @param scaleKey The key for the scale potentially containing a formatter that can be used to format the label\n     * @param formatterName The name of the formatter to use for formatting the label\n     * @param dataAccessorKey The accessor key to use for accessing the data value if the accessor key differs from the scale key\n     *\n     * @returns The display value for a data point\n     */\n    public static getLabel(chartSeries: IChartSeries, dataPoint: any, scaleKey: string, formatterName?: string, dataAccessorKey?: string): any {\n        if (!dataPoint || chartSeries.data.length === 0) {\n            return null;\n        }\n\n        const valueAccessor = chartSeries.accessors.data?.[dataAccessorKey || scaleKey];\n        if (!valueAccessor) {\n            return null;\n        }\n\n        const adjustedIndex = dataPoint.index [] = [];\n    public legendSeriesSet: IChartAssistSeries[] = [];\n\n    /**\n     * Subject for subscribing to IChartAssistEvents such as\n     * ToggleSeries, EmphasizeSeries, and ResetVisibleSeries\n     */\n    public chartAssistSubject = new Subject();\n\n    private syncHandlerMap: Record;\n    private getVisibleSeriesWithLegendBackup: () => IChartAssistSeries>[];\n    private syncSubscription: Subscription;\n    private legendInteractionAssist: LegendInteractionAssist;\n\n    public onEvent: (event: IChartEvent) => void;\n\n    constructor(public chart: IChart,\n                seriesProcessor?: (series: IChartAssistSeries[]) => IChartAssistSeries[],\n                public palette: IChartPalette = defaultPalette(),\n                public markers: IValueProvider = defaultMarkerProvider()) {\n        this.configureChartEventSubscriptions(chart.getEventBus());\n        if (seriesProcessor) {\n            this.seriesProcessor = seriesProcessor;\n        }\n\n        /* eslint-disable-next-line @typescript-eslint/no-use-before-define */\n        this.legendInteractionAssist = new LegendInteractionAssist(this);\n\n        this.syncHandlerMap = {\n            [ChartAssistEventType.EmphasizeSeries]: this.emphasizeSeries,\n            [ChartAssistEventType.ResetVisibleSeries]: this.resetVisibleSeries,\n            [ChartAssistEventType.ToggleSeries]: this.toggleSeries,\n        };\n    }\n\n    public get renderStatesIndex(): IRenderStatesIndex {\n        return this.legendInteractionAssist.renderStatesIndex;\n    }\n\n    /**\n     * Convenience stream of highlight events that can be used to populate legend.\n     * It will return highlighted value for the series (while hovering over datapoints) or the last value from series (while not hovering over and if possible),\n     * otherwise it'll return null\n     * @param chartSeries\n     */\n    public legendLabelData$(chartSeries: IChartSeries): Observable {\n        const seriesHighlight$ = this.chart.getEventBus().getStream(INTERACTION_DATA_POINTS_EVENT).asObservable()\n            .pipe(\n                filter(event => event.data.interactionType === InteractionType.MouseMove),\n                map(event => event.data.dataPoints[chartSeries.id])\n            );\n\n        // if there is no highlightData, or index is \"-1\", we'll show the last value from series (if possible)\n        const highlightDataPresentPredicate = (highlightData: any) => highlightData && highlightData.index >= 0;\n\n        return seriesHighlight$\n            .pipe(\n                switchMap(highlightData => highlightDataPresentPredicate(highlightData)\n                    ? of(highlightData.data)\n                    : of((chartSeries.data && chartSeries.data.length) ? chartSeries.data[chartSeries.data.length - 1] : null))\n            );\n    }\n\n    public seriesProcessor(series: IChartAssistSeries[]): IChartAssistSeries[] {\n        return series;\n    }\n\n    public update(inputSeriesSet: IChartAssistSeries[], updateLegend = true): void {\n        this.inputSeriesSet = inputSeriesSet;\n\n        const processedSeriesSet = this.seriesProcessor(inputSeriesSet.map(series => ({\n            ...series,\n            data: series.data || [],\n        })));\n\n        const seriesSet = processedSeriesSet.map(s => this.applyDefaults(s));\n\n        this.legendSeriesSet = seriesSet.filter(s => s.showInLegend);\n\n        if (updateLegend) {\n            this.legendInteractionAssist.update(seriesSet);\n        }\n        this.chart.update(seriesSet);\n\n        this.publishRenderStates();\n    }\n\n    public toggleSeries = (seriesId: string, visible: boolean): void => {\n        this.legendInteractionAssist.setGroupVisibility(seriesId, visible);\n\n        this.update(this.inputSeriesSet, false);\n        this.chartAssistSubject.next({ type: ChartAssistEventType.ToggleSeries, payload: { seriesId, visible } });\n    }\n\n    /**\n     * Resets all visible series to default state\n     */\n    public resetVisibleSeries = (): void => {\n        this.legendInteractionAssist.resetSeries();\n\n        this.publishRenderStates();\n        this.chartAssistSubject.next({ type: ChartAssistEventType.ResetVisibleSeries, payload: {} });\n    }\n\n    /**\n     * For series that are currently visible, emphasize the given series and deemphasizes all the other ones\n     *\n     * @param seriesId\n     */\n    public emphasizeSeries = (seriesId: string): void => {\n        this.legendInteractionAssist.emphasizeSeries(seriesId);\n\n        this.publishRenderStates();\n        this.chartAssistSubject.next({ type: ChartAssistEventType.EmphasizeSeries, payload: { seriesId } });\n    }\n\n    public isSeriesHidden(seriesId: string): boolean {\n        return this.legendInteractionAssist.isSeriesHidden(seriesId);\n    }\n\n    public seriesTrackByFn(index: number, item: IChartAssistSeries): string {\n        return item.id;\n    }\n\n    /**\n    * Retrieves the display value for the highlighted data point on the specified series\n    *\n    * @param chartSeries The series containing the highlighted data point to get a label for\n    * @param scaleKey The key for the scale potentially containing a formatter that can be used to format the label\n    * @param formatterName The name of the formatter to use for formatting the label\n    * @param dataAccessorKey The accessor key to use for accessing the data value if the accessor key differs from the scale key\n    *\n    * @returns The display value for the highlighted data point\n    */\n    public getHighlightedValue(chartSeries: IChartSeries,\n                               scaleKey: string,\n                               formatterName?: string,\n                               dataAccessorKey?: string): string | number | undefined {\n\n        if (!this.highlightedDataPoints) {\n            return undefined;\n        }\n\n        const dataPoint = this.highlightedDataPoints[chartSeries.id];\n        return ChartAssist.getLabel(chartSeries, dataPoint, scaleKey, formatterName, dataAccessorKey);\n    }\n\n    public getVisibleSeriesWithLegend = (): IChartAssistSeries>[] =>\n        this.legendSeriesSet.filter(s => !this.isSeriesHidden(s.id))\n\n    /**\n     * Synchronize this chart assist's actions with IChartAssistEvents emitted by the specified\n     * chart assist, and override this chart assist's getVisibleSeriesWithLegend method with the\n     * specified chart assist's getVisibleSeriesWithLegend.\n     *\n     * Note: If the chart instance of the specified chart assist is replaced by a new chart,\n     * this method must be invoked again to resume synchronized behavior.\n     *\n     * @param {ChartAssist} chartAssist The chart assist to synchronize with\n     */\n    public syncWithChartAssist(chartAssist: ChartAssist): void {\n        this.getVisibleSeriesWithLegendBackup = this.getVisibleSeriesWithLegend;\n        this.getVisibleSeriesWithLegend = chartAssist.getVisibleSeriesWithLegend;\n\n        this.syncSubscription = chartAssist.chartAssistSubject.pipe(\n            takeUntil(chartAssist.chart.getEventBus().getStream(DESTROY_EVENT))\n        ).subscribe((event: IChartAssistEvent) => {\n            const args = Object.keys(event.payload).map(key => event.payload[key]);\n            this.syncHandlerMap[event.type](...args);\n        });\n    }\n\n    /**\n     * Unsynchronize this chart assist's actions from those of the chart assist\n     * specified in a previous syncWithChartAssist call, and restore this chart\n     * assist's getVisibleSeriesWithLegend method with the instance used before\n     * syncWithChartAssist was called.\n     */\n    public unsyncChartAssist(): void {\n        this.getVisibleSeriesWithLegend = this.getVisibleSeriesWithLegendBackup;\n\n        if (this.syncSubscription) {\n            this.syncSubscription.unsubscribe();\n        }\n    }\n\n    private configureChartEventSubscriptions(eventBus: EventBus): void {\n        const eventHandlers: { [eventName: string]: (data?: any) => void } = {\n            [INTERACTION_DATA_POINTS_EVENT]: (data: IInteractionDataPointsEvent) => {\n                if (data.interactionType === InteractionType.MouseMove) {\n                    this.highlightedDataPoints = Object.assign({}, data.dataPoints);\n                }\n            },\n            [HIGHLIGHT_SERIES_EVENT]: (data: IDataPoint) => {\n                if (data.index >= 0) {\n                    this.emphasizeSeries(data.seriesId);\n                } else {\n                    this.resetVisibleSeries();\n                }\n            },\n            [MOUSE_ACTIVE_EVENT]: (data: boolean) => {\n                this.isLegendActive = data;\n            },\n        };\n\n        each(Object.keys(eventHandlers), key => {\n            eventBus.getStream(key).subscribe((event) => {\n                eventHandlers[key](event.data);\n                if (this.onEvent) {\n                    this.onEvent(event);\n                }\n            });\n        });\n    }\n\n    private publishRenderStates(): void {\n        this.chart.setSeriesStates(this.legendInteractionAssist.getSeriesStates());\n    }\n\n    private applyDefaults(chartSeries: IChartSeries): IChartAssistSeries {\n        return Object.assign({}, chartAssistSeriesDefaults, chartSeries);\n    }\n}\n\nexport class LegendInteractionAssist {\n\n    private seriesGroups: Record = {};\n    private seriesIndex: Record>;\n\n    public renderStatesIndex: IRenderStatesIndex = {};\n\n    constructor(private chartAssist: ChartAssist) {\n    }\n\n    public update(seriesSet: IChartAssistSeries[]): void {\n        this.seriesGroups = this.getSeriesGroups(seriesSet);\n        this.seriesIndex = keyBy(seriesSet, s => s.id);\n\n        this.resetSeries();\n\n        // override render states\n        for (const series of seriesSet.filter(s => s.renderState)) {\n            this.renderStatesIndex[series.id] =\n                new ChartAssistRenderStateData(series.id,\n                                               series,\n                                               series.renderState === RenderState.hidden ? RenderState.default : series.renderState,\n                                               series.renderState !== RenderState.hidden);\n        }\n    }\n\n    public getSeriesStates(): IRenderStateData[] {\n        return values(this.renderStatesIndex);\n    }\n\n    public isSeriesHidden(seriesId: string): boolean {\n        const renderState = this.renderStatesIndex[seriesId];\n        return renderState && !renderState.visible;\n    }\n\n    private getSeriesGroups(seriesSet: IChartAssistSeries[]) {\n        const seriesGroups: Record = {};\n\n        for (const s of seriesSet) {\n            const separatorIndex = s.id.indexOf(\"__\");\n            const parentId = (separatorIndex >= 0) ? s.id.substring(0, separatorIndex) : s.id;\n\n            if (!seriesGroups[parentId]) {\n                seriesGroups[parentId] = [];\n            }\n            seriesGroups[parentId].push(s.id);\n        }\n\n        return seriesGroups;\n    }\n\n    /**\n     * @param groupId id of the parent series\n     * @param renderState\n     */\n    public setGroupState(groupId: string, renderState: RenderState): void {\n        if (!this.seriesGroups[groupId]) {\n            return;\n        }\n\n        for (const s of this.seriesGroups[groupId]) {\n            this.setRenderState(s, renderState);\n        }\n    }\n\n    /**\n     * @param groupId id of the parent series\n     * @param visible\n     */\n    public setGroupVisibility(groupId: string, visible: boolean): void {\n        if (!this.seriesGroups[groupId]) {\n            return;\n        }\n\n        for (const s of this.seriesGroups[groupId]) {\n            this.setVisibility(s, visible);\n        }\n    }\n\n    public emphasizeSeries(seriesId: string): void {\n        for (const group of Object.keys(this.seriesGroups)) {\n            this.setGroupState(group, group === seriesId ? RenderState.emphasized : RenderState.deemphasized);\n        }\n    }\n\n    public resetSeries(): void {\n        const legendSeries = this.chartAssist.getVisibleSeriesWithLegend();\n        const oneSeriesMode = legendSeries.length === 1;\n\n        if (oneSeriesMode) {\n            this.emphasizeSeries(legendSeries[0].id);\n        } else {\n            for (const group of Object.keys(this.seriesGroups)) {\n                this.setGroupState(group, RenderState.default);\n            }\n        }\n    }\n\n    private setRenderState(seriesId: string, state: RenderState) {\n        let renderState = this.renderStatesIndex[seriesId];\n        if (renderState) {\n            renderState.emphasisState = state;\n        } else {\n            renderState = new ChartAssistRenderStateData(seriesId, this.seriesIndex[seriesId], state);\n            this.renderStatesIndex[seriesId] = renderState;\n        }\n    }\n\n    private setVisibility(seriesId: string, visible: boolean) {\n        let renderState = this.renderStatesIndex[seriesId];\n        if (renderState) {\n            renderState.visible = visible;\n        } else {\n            renderState = new ChartAssistRenderStateData(seriesId, this.seriesIndex[seriesId], RenderState.default, visible);\n            this.renderStatesIndex[seriesId] = renderState;\n        }\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LegendSeriesComponent.html":{"url":"components/LegendSeriesComponent.html","title":"component - LegendSeriesComponent","body":"\n                   \n\n\n\n\n\n  Components\n  LegendSeriesComponent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n    File\n\n\n    src/legend/legend-series/legend-series.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    AfterContentInit\n    \n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n            \n                host\n                {}\n            \n\n\n\n\n\n\n            \n                selector\n                nui-legend-series\n            \n\n\n\n\n            \n                templateUrl\n                ./legend-series.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                hasInputDescription\n                            \n                            \n                                    Public\n                                hasProjectedDescription\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                active\n                            \n                            \n                                color\n                            \n                            \n                                descriptionPrimary\n                            \n                            \n                                descriptionSecondary\n                            \n                            \n                                icon\n                            \n                            \n                                interactive\n                            \n                            \n                                isSelected\n                            \n                            \n                                seriesRenderState\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                isSelectedChange\n                            \n                        \n                    \n                \n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                class.inverse\n                            \n                            \n                                \n                            \n                            \n                                \n                            \n                        \n                    \n                \n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                        \n                    \n                \n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    active\n                                \n                                \n                                    interactive\n                                \n                                \n                                    seriesRenderState\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(legend: LegendComponent)\n                    \n                \n                        \n                            \n                                Defined in src/legend/legend-series/legend-series.component.ts:109\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        legend\n                                                  \n                                                        \n                                                                        LegendComponent\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        active\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-series/legend-series.component.ts:29\n                            \n                        \n                \n                    \n                        Sets the series active status\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        color\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-series/legend-series.component.ts:80\n                            \n                        \n                \n                    \n                        Color of the series\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        descriptionPrimary\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-series/legend-series.component.ts:65\n                            \n                        \n                \n                    \n                        The primary description of the series\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        descriptionSecondary\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-series/legend-series.component.ts:70\n                            \n                        \n                \n                    \n                        The secondary description of the series\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        icon\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-series/legend-series.component.ts:75\n                            \n                        \n                \n                    \n                        The series icon\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        interactive\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-series/legend-series.component.ts:39\n                            \n                        \n                \n                    \n                        Sets the series interactive mode switch\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        isSelected\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-series/legend-series.component.ts:55\n                            \n                        \n                \n                    \n                        Set whether the series is selected\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        seriesRenderState\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-series/legend-series.component.ts:86\n                            \n                        \n                \n                    \n                        The render state of the legend series\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        isSelectedChange\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-series/legend-series.component.ts:60\n                            \n                        \n                \n                    \n                        Emits an event with a boolean value indicating a new selected status\n\n                    \n                \n            \n        \n\n    \n    HostBindings        \n            \n                \n                    \n                        \n                        \n                            \n                            class.inverse\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-series/legend-series.component.ts:103\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            \n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-series/legend-series.component.ts:96\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            \n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/legend/legend-series/legend-series.component.ts:100\n                            \n                        \n\n\n            \n        \n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            click\n                        \n                        \n                    \n                \n            \n            \n                \nclick()\n                \n            \n\n\n            \n                \n                    Defined in src/legend/legend-series/legend-series.component.ts:128\n                \n            \n\n\n            \n                \n                    Emits an isSelectedChange event on series click if the series is in interactive mode\n\n\n                \n            \n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            hasInputDescription\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hasInputDescription()\n                \n            \n\n\n            \n                \n                    Defined in src/legend/legend-series/legend-series.component.ts:137\n                \n            \n\n\n            \n                \n\n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        boolean indicating whether the series has a primary or secondary description\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            hasProjectedDescription\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hasProjectedDescription()\n                \n            \n\n\n            \n                \n                    Defined in src/legend/legend-series/legend-series.component.ts:144\n                \n            \n\n\n            \n                \n\n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        boolean indicating whether the series has a projected description\n\n                    \n                \n            \n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        active\n                    \n                \n\n\n                \n                    \n                        setactive(active: boolean)\n                    \n                \n                            \n                                \n                                    Defined in src/legend/legend-series/legend-series.component.ts:29\n                                \n                            \n                    \n                        \n                                Sets the series active status\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                        Description\n                                                \n                                            \n                                            \n                                                    \n                                                            active\n                                                    \n                                                            \n                                                                            boolean\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                            \n                                                                    The new active status\n\n                                                            \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        interactive\n                    \n                \n\n                \n                    \n                        getinteractive()\n                    \n                \n                            \n                                \n                                    Defined in src/legend/legend-series/legend-series.component.ts:48\n                                \n                            \n                    \n                        \n                                Gets the series interactive mode value\n\n\n                                \n                                \n                                \n                                    Returns :         boolean\n\n                                \n                        \n                    \n\n                \n                    \n                        setinteractive(interactive: boolean)\n                    \n                \n                            \n                                \n                                    Defined in src/legend/legend-series/legend-series.component.ts:39\n                                \n                            \n                    \n                        \n                                Sets the series interactive mode switch\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                        Description\n                                                \n                                            \n                                            \n                                                    \n                                                            interactive\n                                                    \n                                                            \n                                                                            boolean\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                            \n                                                                    The new interactive mode\n\n                                                            \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        seriesRenderState\n                    \n                \n\n                \n                    \n                        getseriesRenderState()\n                    \n                \n                            \n                                \n                                    Defined in src/legend/legend-series/legend-series.component.ts:89\n                                \n                            \n\n                \n                    \n                        setseriesRenderState(renderState)\n                    \n                \n                            \n                                \n                                    Defined in src/legend/legend-series/legend-series.component.ts:86\n                                \n                            \n                    \n                        \n                                The render state of the legend series\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            renderState\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import {\n    AfterContentInit, ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Host, HostBinding, HostListener, Input, Optional, Output, ViewChild,\n    ViewEncapsulation,\n} from \"@angular/core\";\nimport _isEmpty from \"lodash/isEmpty\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { LegendComponent } from \"../legend.component\";\nimport { LegendOrientation } from \"../types\";\n\n/** @ignore */\nexport const LEGEND_SERIES_CLASS_NAME = \"nui-legend-series\";\n\n@Component({\n    // eslint-disable-next-line\n    host: { \"class\": LEGEND_SERIES_CLASS_NAME },\n    selector: \"nui-legend-series\",\n    templateUrl: \"./legend-series.component.html\",\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LegendSeriesComponent implements AfterContentInit {\n\n    /**\n     * Sets the series active status\n     *\n     * @param {boolean} active The new active status\n     */\n    @Input()\n    public set active(active: boolean) {\n        this._active = active;\n    }\n\n    /**\n     * Sets the series interactive mode switch\n     *\n     * @param {boolean} interactive The new interactive mode\n     */\n    @Input()\n    public set interactive(interactive: boolean) {\n        this._interactive = interactive;\n    }\n\n    /**\n     * Gets the series interactive mode value\n     *\n     * @returns {boolean} The current interactive mode\n     */\n    public get interactive(): boolean {\n        return this._interactive;\n    }\n\n    /**\n     * Set whether the series is selected\n     */\n    @Input() public isSelected = true;\n\n    /**\n     * Emits an event with a boolean value indicating a new selected status\n     */\n    @Output() public isSelectedChange = new EventEmitter();\n\n    /**\n     * The primary description of the series\n     */\n    @Input() public descriptionPrimary: string;\n\n    /**\n     * The secondary description of the series\n     */\n    @Input() public descriptionSecondary: string;\n\n    /**\n     * The series icon\n     */\n    @Input() public icon: string;\n\n    /**\n     * Color of the series\n     */\n    @Input() public color: string;\n\n    /**\n     * The render state of the legend series\n     */\n    @Input()\n    public set seriesRenderState(renderState: RenderState) {\n        this._seriesRenderState = renderState;\n    }\n    public get seriesRenderState(): RenderState {\n        return this._seriesRenderState || RenderState.default;\n    }\n\n    @ViewChild(\"projectedDescription\") private projectedDescription: ElementRef;\n\n    @HostBinding(`class.${LEGEND_SERIES_CLASS_NAME}--interactive`)\n    public get isInteractiveClassApplied() {\n        return this._interactive;\n    }\n\n    @HostBinding(`class.${LEGEND_SERIES_CLASS_NAME}--horizontal`) public isHorizontalClassApplied = false;\n\n    @HostBinding(`class.inverse`)\n    public get isActiveClassApplied() {\n        return this._active && this.seriesRenderState !== RenderState.hidden;\n    }\n\n    private _seriesRenderState: RenderState;\n    private _active = false;\n    private _interactive = false;\n\n    constructor(@Optional() @Host() private legend: LegendComponent) { }\n\n    public ngAfterContentInit(): void {\n        if (this.legend) {\n            this.legend.activeChanged.subscribe((active: boolean) => this._active = active);\n\n            this.icon = this.icon || this.legend.seriesIcon;\n            this._active = this.legend.active;\n            this.interactive = this.legend.interactive;\n            this.isHorizontalClassApplied = this.legend.orientation === LegendOrientation.horizontal;\n        }\n    }\n\n    /**\n     * Emits an isSelectedChange event on series click if the series is in interactive mode\n     */\n    @HostListener(\"click\")\n    public onClick(): void {\n        if (this.interactive) {\n            this.isSelectedChange.next(!this.isSelected);\n        }\n    }\n\n    /**\n     * @returns boolean indicating whether the series has a primary or secondary description\n     */\n    public hasInputDescription(): boolean {\n        return !_isEmpty(this.descriptionPrimary) || !_isEmpty(this.descriptionSecondary);\n    }\n\n    /**\n     * @returns boolean indicating whether the series has a projected description\n     */\n    public hasProjectedDescription(): boolean {\n        return !!this.projectedDescription && this.projectedDescription.nativeElement.children.length !== 0;\n    }\n}\n\n    \n\n\n\n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                                        {{ descriptionPrimary }}        {{ descriptionSecondary }}                    '\n    var COMPONENTS = [{'name': 'BasicLegendTileComponent', 'selector': 'nui-basic-legend-tile'},{'name': 'ChartComponent', 'selector': 'nui-chart'},{'name': 'ChartDonutContentComponent', 'selector': 'nui-chart-donut-content'},{'name': 'ChartMarkerComponent', 'selector': 'nui-chart-marker'},{'name': 'ChartPopoverComponent', 'selector': 'nui-chart-popover'},{'name': 'ChartTooltipComponent', 'selector': 'nui-chart-tooltip'},{'name': 'ChartTooltipsComponent', 'selector': 'nui-chart-tooltips'},{'name': 'LegendComponent', 'selector': 'nui-legend'},{'name': 'LegendSeriesComponent', 'selector': 'nui-legend-series'},{'name': 'RichLegendTileComponent', 'selector': 'nui-rich-legend-tile'}];\n    var DIRECTIVES = [{'name': 'ChartCollectionIdDirective', 'selector': '[nuiChartCollectionId]'}];\n    var ACTUAL_COMPONENT = {'name': 'LegendSeriesComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LineAccessors.html":{"url":"classes/LineAccessors.html","title":"class - LineAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LineAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/line/line-accessors.ts\n        \n\n            \n                Description\n            \n            \n                Accessor class supporting the LineRenderer, that defines required inputs acquired from data points.\nThis class includes default behavior for all required fields. It's using properties of the same name for data accessors.\n\nIf colorProvider or markerProvider is not defined in the constructor, every new instance of LineAccessors will instantiate it's own, so that has to be\nkept in mind when configuring charts as it could cause potential color synchronization problems.\n\nSee referenced data and series interfaces for required properties.\n            \n\n            \n                Extends\n            \n            \n                        XYAccessors\n            \n\n            \n                Implements\n            \n            \n                            ILineAccessors\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                data\n                            \n                            \n                                    Public\n                                series\n                            \n                            \n                                    Public\n                                data\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(colorProvider, markerProvider)\n                    \n                \n                        \n                            \n                                Defined in src/renderers/line/line-accessors.ts:38\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        colorProvider\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        markerProvider\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ILineDataAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/line/line-accessors.ts:37\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ILineSeriesAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/line/line-accessors.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IXYDataAccessors\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        x: (d: any) => d.x,\n        y: (d: any) => d.y,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         XYAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYAccessors:14\n\n                            \n                        \n\n                \n                    \n                        The default data accessors for using with renderers deriving from XYRenderer \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { defaultColorProvider, defaultMarkerProvider } from \"../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, SeriesAccessor } from \"../../core/common/types\";\nimport { IXYDataAccessors, XYAccessors } from \"../accessors/xy-accessors\";\n\nexport interface ILineDataAccessors extends IXYDataAccessors {\n    defined?: DataAccessor;\n}\n\n/**\n * Series accessors used in {@link LineAccessors}.\n */\nexport interface ILineSeriesAccessors {\n    /** Color of the series */\n    color?: SeriesAccessor;\n    /** Marker for the series */\n    marker?: SeriesAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: SeriesAccessor | undefined;\n}\n\nexport interface ILineAccessors extends IAccessors {\n    data: ILineDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series: ILineSeriesAccessors;\n}\n\n/**\n * Accessor class supporting the {@link LineRenderer}, that defines required inputs acquired from data points.\n * This class includes default behavior for all required fields. It's using properties of the same name for data accessors.\n * \n * If colorProvider or markerProvider is not defined in the constructor, every new instance of LineAccessors will instantiate it's own, so that has to be\n * kept in mind when configuring charts as it could cause potential color synchronization problems.\n *\n * See referenced data and series interfaces for required properties.\n */\nexport class LineAccessors extends XYAccessors implements ILineAccessors {\n    public data: ILineDataAccessors;\n    public series: ILineSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider(), private markerProvider = defaultMarkerProvider()) {\n        super();\n\n        this.data.defined = (d: any, i) => d.hasOwnProperty(\"defined\") ? d.defined : true;\n\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n            marker: this.markerProvider ? this.markerProvider.get : undefined,\n        };\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LineSelectSeriesInteractionStrategy.html":{"url":"classes/LineSelectSeriesInteractionStrategy.html","title":"class - LineSelectSeriesInteractionStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LineSelectSeriesInteractionStrategy\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/line/interaction-strategies/line-select-series-interaction-strategy.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IHighlightStrategy\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                INTERACTION_MARGIN\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                draw\n                            \n                            \n                                    Public\n                                getDataPointIndex\n                            \n                            \n                                    Public\n                                highlightDataPoint\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            INTERACTION_MARGIN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 8\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/line/interaction-strategies/line-select-series-interaction-strategy.ts:12\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            draw\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    draw(renderer: LineRenderer, renderSeries: IRenderSeries, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/line/interaction-strategies/line-select-series-interaction-strategy.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                                LineRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDataPointIndex\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointIndex(renderer: LineRenderer, series: IDataSeries, values: literal type, scales: Scales)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/line/interaction-strategies/line-select-series-interaction-strategy.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                                LineRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    series\n                                    \n                                            IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    values\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            highlightDataPoint\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    highlightDataPoint(renderer: LineRenderer, renderSeries: IRenderSeries, dataPointIndex: number, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/line/interaction-strategies/line-select-series-interaction-strategy.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                                LineRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dataPointIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import isNil from \"lodash/isNil\";\nimport { Subject } from \"rxjs\";\n\nimport { DATA_POINT_NOT_FOUND, HIGHLIGHT_SERIES_EVENT, INTERACTION_SERIES_EVENT } from \"../../../constants\";\nimport { Scales } from \"../../../core/common/scales/types\";\nimport { D3Selection, IDataPoint, IDataSeries, InteractionType, IRendererEventPayload } from \"../../../core/common/types\";\nimport { IHighlightStrategy, IRenderSeries, RenderLayerName } from \"../../types\";\nimport { ILineAccessors } from \"../line-accessors\";\nimport { LineRenderer } from \"../line-renderer\";\n\nexport class LineSelectSeriesInteractionStrategy implements IHighlightStrategy {\n    public readonly INTERACTION_MARGIN = 8;\n\n    public draw(renderer: LineRenderer, renderSeries: IRenderSeries, rendererSubject: Subject): void {\n        const target = renderSeries.containers[RenderLayerName.data];\n\n        let interactionPath: D3Selection = target.select(\"path.interaction\");\n\n        if (isNil(renderer.config.strokeWidth)) {\n            throw new Error(\"renderer.config.strokeWidth is not defined\");\n        }\n\n        if (interactionPath.empty()) {\n            interactionPath = target.append(\"path\")\n                .classed(\"interaction\", true)\n                .classed(`pointer-events pointer-events-click`, true)\n                .attrs({\n                    \"stroke-width\": renderer.config.strokeWidth + (2 * this.INTERACTION_MARGIN),\n                    \"stroke\": \"transparent\",\n                    \"fill\": \"none\",\n                })\n                .on(\"mouseenter\", () => {\n                    const dataPoint: Omit = {\n                        seriesId: renderSeries.dataSeries.id,\n                        dataSeries: renderSeries.dataSeries,\n                        // TODO: doesn't work with empty data\n                        index: 0,\n                        data: renderSeries.dataSeries.data[0],\n                    };\n\n                    rendererSubject.next({ eventName: HIGHLIGHT_SERIES_EVENT, data: dataPoint });\n                })\n                .on(\"mouseleave\", () => {\n                    const dataPoint: Omit = {\n                        seriesId: renderSeries.dataSeries.id,\n                        dataSeries: renderSeries.dataSeries,\n                        index: DATA_POINT_NOT_FOUND,\n                    };\n\n                    rendererSubject.next({ eventName: HIGHLIGHT_SERIES_EVENT, data: dataPoint });\n                })\n                .on(\"click\", (d: any, i: number) => {\n                    this.emitEvent(renderer, INTERACTION_SERIES_EVENT, InteractionType.Click, renderSeries, d, i, rendererSubject);\n                });\n        }\n\n        renderer.drawLine(renderSeries, interactionPath);\n    }\n\n    // TODO: Get rid of this function or make it optional in interface\n    public getDataPointIndex(renderer: LineRenderer, series: IDataSeries, values: { [p: string]: any }, scales: Scales): number {\n        // @ts-ignore\n        return;\n    }\n\n    public highlightDataPoint(renderer: LineRenderer, renderSeries: IRenderSeries,\n                              dataPointIndex: number, rendererSubject: Subject): void {\n    }\n\n    private emitEvent(renderer: LineRenderer, eventName: string, interactionType: InteractionType, renderSeries: IRenderSeries,\n                      data: any, i: number, rendererSubject: Subject) {\n        const dataPoint: IDataPoint = {\n            seriesId: renderSeries.dataSeries.id,\n            dataSeries: renderSeries.dataSeries,\n            index: i,\n            data: data,\n            position: renderer.getDataPointPosition(renderSeries.dataSeries, i, renderSeries.scales),\n        };\n        rendererSubject.next({\n            eventName: eventName,\n            data: {\n                interactionType: interactionType,\n                payload: dataPoint,\n            },\n        });\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LinearScale.html":{"url":"classes/LinearScale.html","title":"class - LinearScale","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LinearScale\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/scales/linear-scale.ts\n        \n\n            \n                Description\n            \n            \n                Nova wrapper around D3's scaleLinear\n\n            \n\n            \n                Extends\n            \n            \n                        Scale\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                domainCalculator\n                            \n                            \n                                    Public\n                                formatters\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                isDomainFixed\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                convert\n                            \n                            \n                                    Public\n                                invert\n                            \n                            \n                                    Public\n                                isContinuous\n                            \n                            \n                                    Public\n                                isDomainValid\n                            \n                            \n                                    Public\n                                    Abstract\n                                convert\n                            \n                            \n                                    Public\n                                domain\n                            \n                            \n                                    Public\n                                domain\n                            \n                            \n                                    Public\n                                domain\n                            \n                            \n                                    Public\n                                fixDomain\n                            \n                            \n                                    Public\n                                    Abstract\n                                invert\n                            \n                            \n                                    Public\n                                    Abstract\n                                isContinuous\n                            \n                            \n                                    Public\n                                isDomainValid\n                            \n                            \n                                    Public\n                                range\n                            \n                            \n                                    Public\n                                range\n                            \n                            \n                                    Public\n                                range\n                            \n                            \n                                    Public\n                                reverse\n                            \n                            \n                                    Public\n                                reversed\n                            \n                            \n                                    Public\n                                reversed\n                            \n                            \n                                    Public\n                                reversed\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/common/scales/linear-scale.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            domainCalculator\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         DomainCalculator\n\n                        \n                    \n                    \n                        \n                            Default value : getAutomaticDomain\n                        \n                    \n                            \n                                \n                                    Inherited from         Scale\n\n                                \n                            \n                        \n                            \n                                    Defined in         Scale:11\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            formatters\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IFormatters\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         Scale\n\n                                \n                            \n                        \n                            \n                                    Defined in         Scale:12\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Scale\n\n                                \n                            \n                        \n                            \n                                    Defined in         Scale:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            isDomainFixed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Scale\n\n                                \n                            \n                        \n                            \n                                    Defined in         Scale:13\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            convert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    convert(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/linear-scale.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            invert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    invert(coordinate: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/linear-scale.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    coordinate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isContinuous\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isContinuous()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/linear-scale.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isDomainValid\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isDomainValid()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/linear-scale.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            convert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    convert(value: T)\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:31\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    domain()\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:55\n\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                    \n                        Returns :     T[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    domain(domain: T[])\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:56\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    domain(domain?: T[])\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:57\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            fixDomain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fixDomain(domain: T[])\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:67\n\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            invert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    invert(coordinate: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:33\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    coordinate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            isContinuous\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isContinuous()\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:35\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isDomainValid\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isDomainValid()\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:74\n\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            range\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    range()\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:43\n\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            range\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    range(range: [number, number])\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:44\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                            [number, number]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            range\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    range(range?: [number, number])\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:45\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                            [number, number]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reverse\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reverse()\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:78\n\n                \n            \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reversed()\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:83\n\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reversed(reversed: boolean)\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:84\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reversed\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reversed(reversed?: boolean)\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:85\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reversed\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | \n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { scaleLinear } from \"d3-scale\";\n\nimport { Scale } from \"./scale\";\n\n/**\n * Nova wrapper around [D3's scaleLinear](https://d3indepth.com/scales/#scalelinear)\n */\nexport class LinearScale extends Scale {\n    constructor(id?: string) {\n        super(id);\n\n        this.formatters.tick = value => value?.toLocaleString();\n    }\n\n    protected createD3Scale(): any {\n        return scaleLinear();\n    }\n\n    public convert(value: number): number {\n        return this._d3Scale(value);\n    }\n\n    public invert(coordinate: number): number {\n        return this._d3Scale.invert(coordinate);\n    }\n\n    public isContinuous(): boolean {\n        return true;\n    }\n\n    public isDomainValid(): boolean {\n        return -1 === this.domain().findIndex((value) => isNaN(value));\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MappedValueProvider.html":{"url":"classes/MappedValueProvider.html","title":"class - MappedValueProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MappedValueProvider\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/palette/mapped-value-provider.ts\n        \n\n            \n                Description\n            \n            \n                This class matches the provided colors to given series.\nIt keeps track of already given colors to given entities to avoid conflicts.\n\n            \n\n\n            \n                Implements\n            \n            \n                            IValueProvider\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                get\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                reset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(valueMap: literal type, defaultValue?: T)\n                    \n                \n                        \n                            \n                                Defined in src/core/common/palette/mapped-value-provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        valueMap\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        defaultValue\n                                                  \n                                                        \n                                                                    T\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/palette/mapped-value-provider.ts:13\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reset()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/palette/mapped-value-provider.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IValueProvider } from \"../types\";\n\n/**\n * This class matches the provided colors to given series.\n * It keeps track of already given colors to given entities to avoid conflicts.\n */\nexport class MappedValueProvider implements IValueProvider {\n\n    constructor(private valueMap: { [key: string]: T }, private defaultValue?: T) {\n        this.reset();\n    }\n\n    public get = (entityId: string): T | undefined =>\n        this.valueMap[entityId] || this.defaultValue\n\n    public reset(): void {\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MarkerUtils.html":{"url":"classes/MarkerUtils.html","title":"class - MarkerUtils","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MarkerUtils\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/marker-utils.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_MARKER_CONTAINER_CLASS\n                            \n                            \n                                    Static\n                                    Readonly\n                                MARKER_PATH_CLASS\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                drawMarker\n                            \n                            \n                                    Static\n                                manageMarker\n                            \n                            \n                                    Static\n                                removeMarker\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_MARKER_CONTAINER_CLASS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"marker\"\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/marker-utils.ts:23\n                            \n                        \n\n                \n                    \n                        The default class for the marker's container \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            MARKER_PATH_CLASS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"marker-path\"\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/marker-utils.ts:26\n                            \n                        \n\n                \n                    \n                        The class used for the marker's svg path \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            drawMarker\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    drawMarker(dataPoint: IDataPoint, marker: IChartMarker, color: string, target: D3Selection, dataPointSubject: Subject>, className: string, markerInteractionConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/marker-utils.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    dataPoint\n                                    \n                                                IDataPoint\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    marker\n                                    \n                                                IChartMarker\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    color\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    target\n                                    \n                                                D3Selection\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    dataPointSubject\n                                    \n                                                Subject>\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    className\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        MarkerUtils.DEFAULT_MARKER_CONTAINER_CLASS\n                                    \n\n                                \n                                \n                                    markerInteractionConfig\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        DEFAULT_MARKER_INTERACTION_CONFIG\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            manageMarker\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    manageMarker(dataSeries: IDataSeries, scales: IXYScales, dataPointIndex: number, container: D3Selection, rendererSubject: Subject, markerInteractionConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/marker-utils.ts:37\n                \n            \n\n\n            \n                \n                    This method impersonates marker related logic used in various renderers\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    scales\n                                    \n                                                IXYScales\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    dataPointIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    container\n                                    \n                                                D3Selection\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    markerInteractionConfig\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        DEFAULT_MARKER_INTERACTION_CONFIG\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            removeMarker\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeMarker(target: D3Selection, className: string)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/marker-utils.ts:157\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                                D3Selection\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    className\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        MarkerUtils.DEFAULT_MARKER_CONTAINER_CLASS\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UtilService } from \"@nova-ui/bits\";\nimport { Subject } from \"rxjs\";\n\nimport { DATA_POINT_INTERACTION_RESET, INTERACTION_DATA_POINT_EVENT } from \"../constants\";\nimport { isInRange } from \"../core/common/scales/helpers/is-in-range\";\nimport { IXYScales } from \"../core/common/scales/types\";\nimport {\n    D3Selection,\n    IAccessors,\n    IChartMarker,\n    IDataPoint,\n    IDataSeries,\n    IInteractionDataPointEvent,\n    InteractionType,\n    IRendererEventPayload,\n} from \"../core/common/types\";\n\nimport { DEFAULT_MARKER_INTERACTION_CONFIG } from \"./constants\";\n\nexport class MarkerUtils {\n\n    /** The default class for the marker's container */\n    public static readonly DEFAULT_MARKER_CONTAINER_CLASS = \"marker\";\n\n    /** The class used for the marker's svg path */\n    public static readonly MARKER_PATH_CLASS = \"marker-path\";\n\n    /**\n     * This method impersonates marker related logic used in various renderers\n     *\n     * @param dataSeries\n     * @param scales\n     * @param dataPointIndex\n     * @param container\n     * @param rendererSubject\n     */\n    public static manageMarker(dataSeries: IDataSeries,\n                               scales: IXYScales,\n                               dataPointIndex: number,\n                               container: D3Selection,\n                               rendererSubject: Subject,\n                               markerInteractionConfig = DEFAULT_MARKER_INTERACTION_CONFIG): void {\n        if (!container) {\n            throw new Error(\"Container doesn't exist!\");\n        }\n\n        if (dataSeries.data.length === 0) {\n            MarkerUtils.removeMarker(container);\n            return;\n        }\n\n        const accessors = dataSeries.accessors;\n\n        if (dataPointIndex ,\n                             dataPointSubject: Subject>,\n                             className: string = MarkerUtils.DEFAULT_MARKER_CONTAINER_CLASS,\n                             markerInteractionConfig = DEFAULT_MARKER_INTERACTION_CONFIG) {\n        let markerTarget: D3Selection | D3Selection = target.select(`g.${className}`);\n        const xCoord = dataPoint?.position?.x;\n        const yCoord = dataPoint?.position?.y;\n        const attrs = {\n            \"transform\": `translate(${xCoord}, ${yCoord})`,\n            \"cursor\": \"crosshair\",\n        };\n\n        const getPointerEventsClass = () => `${markerInteractionConfig.enabled ? \" pointer-events\" : \"\"}`;\n        const getPointerEventsClickClass = () => `${markerInteractionConfig.enabled && markerInteractionConfig.clickable ? \" pointer-events-click\" : \"\"}`;\n\n        if (markerTarget.empty()) {\n            markerTarget = target.append(\"g\")\n                .classed(`${className}${getPointerEventsClass()}${getPointerEventsClickClass()}`, true);\n        }\n\n        marker.setColor(color);\n        markerTarget.attrs(attrs);\n\n        markerTarget.on(\"mouseenter\", () => {\n            dataPointSubject.next({ eventName: INTERACTION_DATA_POINT_EVENT, data: { interactionType: InteractionType.Hover, dataPoint } });\n        });\n        markerTarget.on(\"mouseleave\", () => {\n            dataPointSubject.next({\n                eventName: INTERACTION_DATA_POINT_EVENT,\n                data: {\n                    interactionType: InteractionType.Hover,\n                    dataPoint: {\n                        ...dataPoint,\n                        index: DATA_POINT_INTERACTION_RESET,\n                    },\n                },\n            });\n        });\n        markerTarget.on(\"click\", () => {\n            dataPointSubject.next({ eventName: INTERACTION_DATA_POINT_EVENT, data: { interactionType: InteractionType.Click, dataPoint } });\n        });\n\n        if (!(>markerTarget).selectAll(\"g > *\").size() && markerTarget.node()) {\n            markerTarget.node()?.appendChild(UtilService.getSvgFromString(marker.getSvg()));\n            (>markerTarget).select(\"path\").classed(MarkerUtils.MARKER_PATH_CLASS, true);\n        }\n\n        const path = (>markerTarget).select(\"path\").node() as HTMLElement;\n        if (path && markerInteractionConfig.enabled) {\n            // Hack to accommodate existing Firefox hack in MouseInteractiveArea\n            const pathRect = path.getBoundingClientRect();\n            // 'x' in this case represents the absolute position of the left side of the marker\n            path.setAttribute(\"x\", Math.ceil(((dataPoint?.position?.x as number) - pathRect.width / 2)).toString());\n            // 'y' in this case represents the absolute position of the top side of the marker\n            path.setAttribute(\"y\", Math.ceil(((dataPoint?.position?.y as number) - pathRect.height / 2)).toString());\n        }\n    }\n\n    public static removeMarker(target: D3Selection, className: string = MarkerUtils.DEFAULT_MARKER_CONTAINER_CLASS) {\n        target.select(`g.${className}`).remove();\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MissingDataLineRendererConfig.html":{"url":"classes/MissingDataLineRendererConfig.html","title":"class - MissingDataLineRendererConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MissingDataLineRendererConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/line/missing-data-line-renderer-config.ts\n        \n\n            \n                Description\n            \n            \n                Standard line renderer config for visualizing missing data \n\n            \n\n\n            \n                Implements\n            \n            \n                            ILineRendererConfig\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                interactive\n                            \n                            \n                                    Public\n                                strokeStyle\n                            \n                            \n                                    Public\n                                strokeWidth\n                            \n                            \n                                    Public\n                                useEnhancedLineCaps\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interactive\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/line/missing-data-line-renderer-config.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            strokeStyle\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : LineRenderer.getStrokeStyleDashed(1)\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/line/missing-data-line-renderer-config.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            strokeWidth\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 1\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/line/missing-data-line-renderer-config.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            useEnhancedLineCaps\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/line/missing-data-line-renderer-config.ts:10\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ILineRendererConfig } from \"../types\";\n\nimport { LineRenderer } from \"./line-renderer\";\n\n/** Standard line renderer config for visualizing missing data */\nexport class MissingDataLineRendererConfig implements ILineRendererConfig {\n    public strokeWidth = 1;\n    public interactive = false;\n    public strokeStyle = LineRenderer.getStrokeStyleDashed(1);\n    public useEnhancedLineCaps = true;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NoopAccessors.html":{"url":"classes/NoopAccessors.html","title":"class - NoopAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NoopAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/accessors/noop-accessors.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            INoopAccessors\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                data\n                            \n                            \n                                    Public\n                                series\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/renderers/accessors/noop-accessors.ts:12\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/accessors/noop-accessors.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/accessors/noop-accessors.ts:11\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {IAccessors} from \"../../core/common/types\";\n\n\nexport interface INoopAccessors extends IAccessors {\n    data: any;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series: any;\n}\n\nexport class NoopAccessors implements INoopAccessors {\n    public series: any;\n    public data: any;\n\n    constructor() {\n        this.series = undefined;\n        this.data = undefined;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NoopRenderer.html":{"url":"classes/NoopRenderer.html","title":"class - NoopRenderer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NoopRenderer\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/noop-renderer.ts\n        \n\n            \n                Description\n            \n            \n                Renderer that is able to draw line chart\n\n            \n\n            \n                Extends\n            \n            \n                        Renderer\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                config\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_CONFIG\n                            \n                            \n                                    Public\n                                getContainerStateStyles\n                            \n                            \n                                    Public\n                                interaction\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                draw\n                            \n                            \n                                    Public\n                                getDataPointPosition\n                            \n                            \n                                    Public\n                                getRequiredLayers\n                            \n                            \n                                    Public\n                                highlightDataPoint\n                            \n                            \n                                    Public\n                                    Abstract\n                                draw\n                            \n                            \n                                    Public\n                                filterDataByDomain\n                            \n                            \n                                    Public\n                                getDataPointIndex\n                            \n                            \n                                    Public\n                                    Abstract\n                                getDataPointPosition\n                            \n                            \n                                    Public\n                                getDomain\n                            \n                            \n                                    Public\n                                getDomainOfFilteredData\n                            \n                            \n                                    Public\n                                getRequiredLayers\n                            \n                            \n                                    Public\n                                highlightDataPoint\n                            \n                            \n                                    Public\n                                setDataPointState\n                            \n                            \n                                    Public\n                                setSeriesState\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRendererConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:39\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_CONFIG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRendererConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        stateStyles: {\n            [RenderState.default]: {\n                opacity: 1,\n            },\n            [RenderState.hidden]: {\n                opacity: 0,\n            },\n            [RenderState.deemphasized]: {\n                opacity: 0.1,\n            },\n            [RenderState.emphasized]: {\n                opacity: 1,\n            },\n        },\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:22\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getContainerStateStyles\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:94\n\n                            \n                        \n\n                \n                    \n                        Get the style attributes for the specified state that we need to apply to a series container\n\n                    \n                \n\n                    \n                        \n                          \n                                  Parameters :\n                                  \n                                      \n                                          \n                                                Name\n                                                    Description\n                                          \n                                      \n                                      \n                                                \n                                                        state\n                                                        \n                                                                the state for which to retrieve container styles\n\n                                                        \n                                                \n                                      \n                                  \n                          \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interaction\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Record\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:44\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            draw\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    draw(renderSeries: IRenderSeries, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/noop-renderer.ts:16\n                \n            \n\n\n            \n                \n                    See Renderer \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDataPointPosition\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointPosition(dataSeries: IDataSeries, index: number, scales: Scales)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/noop-renderer.ts:31\n                \n            \n\n\n            \n                \n                    See Renderer \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSeries\n                                    \n                                            IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IPosition\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getRequiredLayers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRequiredLayers()\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/noop-renderer.ts:26\n                \n            \n\n\n            \n                \n                    See Renderer \n\n\n                    \n                        Returns :     ILasagnaLayer[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            highlightDataPoint\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    highlightDataPoint(renderSeries: IRenderSeries, dataPointIndex: number, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/noop-renderer.ts:20\n                \n            \n\n\n            \n                \n                    See Renderer \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dataPointIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            draw\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    draw(renderSeries: IRenderSeries, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:52\n\n                \n            \n\n\n            \n                \n                    Draw the visual representation of the provided data series\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The series to render\n\n                                    \n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A subject to optionally invoke for emitting events regarding a data point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            filterDataByDomain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    filterDataByDomain(data: any[], dataSeries: IDataSeries, scaleName: string, domain: any[])\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:169\n\n                \n            \n\n\n            \n                \n                    Filters given dataset by domain of provided scale\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scaleName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    domain\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDataPointIndex\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointIndex(series: IDataSeries, values: literal type, scales: Scales)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:73\n\n                \n            \n\n\n            \n                \n                    Based on provided values, return the nearest data point that the given coordinates represent. This is used for mouse hover behavior\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    series\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        series from which to determine the index corresponding to the specified values\n\n                                    \n                                \n                                \n                                    values\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the values from which a data point index can be determined\n\n                                    \n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the scales to be used in the index calculation\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        negative value means that index is not found\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            getDataPointPosition\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointPosition(dataSeries: IDataSeries, index: number, scales: Scales)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:62\n\n                \n            \n\n\n            \n                \n                    Return position of a specified datapoint\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IPosition | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDomain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDomain(data: any[], dataSeries: IDataSeries, scaleName: string, scale: IScale)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:152\n\n                \n            \n\n\n            \n                \n                    Calculate the domain using the data of a series\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        source data, can be filtered\n\n                                    \n                                \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        related data series\n\n                                    \n                                \n                                \n                                    scaleName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the scale for which domain calculation is needed\n\n                                    \n                                \n                                \n                                    scale\n                                    \n                                                IScale\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        min and max values as an array\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDomainOfFilteredData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDomainOfFilteredData(dataSeries: IDataSeries, filterScales: Record>, scaleKey: string, scale: IScale)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:128\n\n                \n            \n\n\n            \n                \n                    Calculate domain for data filtered by given filterScales\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filterScales\n                                    \n                                                Record>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scaleKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scale\n                                    \n                                                IScale\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        array of datapoints from dataSeries filtered by domains of given filterScales\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getRequiredLayers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRequiredLayers()\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:189\n\n                \n            \n\n\n            \n                \n                    Get the definitions of lasagna layers required for visualizing data\n\n\n                    \n                    \n                    \n                        Returns :     ILasagnaLayer[]\n\n                    \n                    \n                        lasagna layer definitions\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            highlightDataPoint\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    highlightDataPoint(renderSeries: IRenderSeries, dataPointIndex: number, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:84\n\n                \n            \n\n\n            \n                \n                    Highlight the data point corresponding to the specified data point index\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The series on which to render the data point highlight\n\n                                    \n                                \n                                \n                                    dataPointIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        index of the highlighted point within the data series (pass -1 to remove the highlight marker)\n\n                                    \n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A subject to optionally invoke for emitting events regarding a data point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setDataPointState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setDataPointState(target: D3Selection, state: RenderState)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:116\n\n                \n            \n\n\n            \n                \n                    Set the RenderState of the target data point\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                                D3Selection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the target data point\n\n                                    \n                                \n                                \n                                    state\n                                    \n                                                RenderState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new state for the target data point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setSeriesState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setSeriesState(renderContainers: IRenderContainers, state: RenderState)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:107\n\n                \n            \n\n\n            \n                \n                    Set the RenderState of the target data series\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderContainers\n                                    \n                                                IRenderContainers\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the render containers of the series\n\n                                    \n                                \n                                \n                                    state\n                                    \n                                                RenderState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new state for the target series\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {Subject} from \"rxjs\";\n\nimport {Renderer} from \"../core/common/renderer\";\nimport {Scales} from \"../core/common/scales/types\";\nimport {IDataSeries, ILasagnaLayer, IPosition, IRendererEventPayload} from \"../core/common/types\";\n\nimport {INoopAccessors} from \"./accessors/noop-accessors\";\nimport {IRenderSeries} from \"./types\";\n\n/**\n * Renderer that is able to draw line chart\n */\nexport class NoopRenderer extends Renderer {\n\n    /** See {@link Renderer#draw} */\n    public draw(renderSeries: IRenderSeries, rendererSubject: Subject): void {\n    }\n\n    /** See {@link Renderer#highlightDataPoint} */\n    public highlightDataPoint(renderSeries: IRenderSeries,\n                              dataPointIndex: number,\n                              rendererSubject: Subject): void {\n    }\n\n    /** See {@link Renderer#getRequiredLayers} */\n    public getRequiredLayers(): ILasagnaLayer[] {\n        return [];\n    }\n\n    /** See {@link Renderer#getDataPointPosition} */\n    public getDataPointPosition(dataSeries: IDataSeries, index: number, scales: Scales): IPosition {\n        // @ts-ignore\n        return;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NoopScale.html":{"url":"classes/NoopScale.html","title":"class - NoopScale","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NoopScale\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/scales/noop-scale.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IScale\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                formatters\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                isDomainFixed\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                convert\n                            \n                            \n                                domain\n                            \n                            \n                                domain\n                            \n                            \n                                domain\n                            \n                            \n                                    Public\n                                fixDomain\n                            \n                            \n                                    Public\n                                invert\n                            \n                            \n                                    Public\n                                isContinuous\n                            \n                            \n                                    Public\n                                isDomainValid\n                            \n                            \n                                range\n                            \n                            \n                                range\n                            \n                            \n                                range\n                            \n                            \n                                    Public\n                                reverse\n                            \n                            \n                                    Public\n                                reversed\n                            \n                            \n                                    Public\n                                reversed\n                            \n                            \n                                    Public\n                                reversed\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    d3Scale\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/common/scales/noop-scale.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            formatters\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IFormatters\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/scales/noop-scale.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/scales/noop-scale.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            isDomainFixed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/scales/noop-scale.ts:8\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            convert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    convert()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \ndomain()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     T[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \ndomain(domain: T[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \ndomain(domain?: T[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            fixDomain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fixDomain(domain: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            invert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    invert()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     T\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isContinuous\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isContinuous()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isDomainValid\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isDomainValid()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            range\n                        \n                        \n                    \n                \n            \n            \n                \nrange()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:27\n                \n            \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            range\n                        \n                        \n                    \n                \n            \n            \n                \nrange(range: [number, number])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                            [number, number]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            range\n                        \n                        \n                    \n                \n            \n            \n                \nrange(range?: [number, number])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                            [number, number]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :      | \n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reverse\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reverse()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:53\n                \n            \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reversed()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reversed(reversed: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reversed\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reversed(reversed?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reversed\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | \n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        d3Scale\n                    \n                \n\n                \n                    \n                        getd3Scale()\n                    \n                \n                            \n                                \n                                    Defined in src/core/common/scales/noop-scale.ts:22\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { AxisScale } from \"d3-axis\";\n\nimport { IFormatters, IScale } from \"./types\";\n\nexport class NoopScale implements IScale {\n    public readonly id: string;\n    public formatters: IFormatters;\n    public isDomainFixed: boolean;\n\n    constructor(id?: string) {}\n\n    public convert(): number {\n        // @ts-ignore\n        return;\n    }\n\n    public invert(): T {\n        // @ts-ignore\n        return;\n    }\n\n    public get d3Scale(): AxisScale {\n        // @ts-ignore\n        return;\n    }\n\n    range(): [number, number];\n    range(range: [number, number]): this;\n    range(range?: [number, number]): [number, number] | this {\n        // @ts-ignore\n        return;\n    }\n\n    domain(): T[];\n    domain(domain: T[]): this;\n    domain(domain?: T[]): any {\n        // @ts-ignore\n        return;\n    }\n\n    public fixDomain(domain: any[]): null {\n        return null;\n    }\n\n    public isContinuous(): boolean {\n        return false;\n    }\n\n    public isDomainValid(): boolean {\n        return true;\n    }\n\n    public reverse(): this {\n        // @ts-ignore\n        return;\n    }\n\n    public reversed(): boolean;\n    public reversed(reversed: boolean): this;\n    public reversed(reversed?: boolean): boolean | this {\n        // @ts-ignore\n        return;\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NuiChartsModule.html":{"url":"modules/NuiChartsModule.html","title":"module - NuiChartsModule","body":"\n                   \n\n\n\n\n    Modules\n    NuiChartsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NuiChartsModule\n\n\n\ncluster_NuiChartsModule_declarations\n\n\n\ncluster_NuiChartsModule_providers\n\n\n\ncluster_NuiChartsModule_exports\n\n\n\n\nBasicLegendTileComponent\n\nBasicLegendTileComponent\n\n\n\nNuiChartsModule\n\nNuiChartsModule\n\nNuiChartsModule -->\n\nBasicLegendTileComponent->NuiChartsModule\n\n\n\n\n\nChartCollectionIdDirective\n\nChartCollectionIdDirective\n\nNuiChartsModule -->\n\nChartCollectionIdDirective->NuiChartsModule\n\n\n\n\n\nChartComponent\n\nChartComponent\n\nNuiChartsModule -->\n\nChartComponent->NuiChartsModule\n\n\n\n\n\nChartDonutContentComponent\n\nChartDonutContentComponent\n\nNuiChartsModule -->\n\nChartDonutContentComponent->NuiChartsModule\n\n\n\n\n\nChartMarkerComponent\n\nChartMarkerComponent\n\nNuiChartsModule -->\n\nChartMarkerComponent->NuiChartsModule\n\n\n\n\n\nChartPopoverComponent\n\nChartPopoverComponent\n\nNuiChartsModule -->\n\nChartPopoverComponent->NuiChartsModule\n\n\n\n\n\nChartTooltipComponent\n\nChartTooltipComponent\n\nNuiChartsModule -->\n\nChartTooltipComponent->NuiChartsModule\n\n\n\n\n\nChartTooltipsComponent\n\nChartTooltipsComponent\n\nNuiChartsModule -->\n\nChartTooltipsComponent->NuiChartsModule\n\n\n\n\n\nLegendComponent\n\nLegendComponent\n\nNuiChartsModule -->\n\nLegendComponent->NuiChartsModule\n\n\n\n\n\nLegendSeriesComponent\n\nLegendSeriesComponent\n\nNuiChartsModule -->\n\nLegendSeriesComponent->NuiChartsModule\n\n\n\n\n\nRichLegendTileComponent\n\nRichLegendTileComponent\n\nNuiChartsModule -->\n\nRichLegendTileComponent->NuiChartsModule\n\n\n\n\n\nBasicLegendTileComponent \n\nBasicLegendTileComponent \n\nBasicLegendTileComponent  -->\n\nNuiChartsModule->BasicLegendTileComponent \n\n\n\n\n\nChartCollectionIdDirective \n\nChartCollectionIdDirective \n\nChartCollectionIdDirective  -->\n\nNuiChartsModule->ChartCollectionIdDirective \n\n\n\n\n\nChartComponent \n\nChartComponent \n\nChartComponent  -->\n\nNuiChartsModule->ChartComponent \n\n\n\n\n\nChartDonutContentComponent \n\nChartDonutContentComponent \n\nChartDonutContentComponent  -->\n\nNuiChartsModule->ChartDonutContentComponent \n\n\n\n\n\nChartMarkerComponent \n\nChartMarkerComponent \n\nChartMarkerComponent  -->\n\nNuiChartsModule->ChartMarkerComponent \n\n\n\n\n\nChartPopoverComponent \n\nChartPopoverComponent \n\nChartPopoverComponent  -->\n\nNuiChartsModule->ChartPopoverComponent \n\n\n\n\n\nChartTooltipComponent \n\nChartTooltipComponent \n\nChartTooltipComponent  -->\n\nNuiChartsModule->ChartTooltipComponent \n\n\n\n\n\nChartTooltipsComponent \n\nChartTooltipsComponent \n\nChartTooltipsComponent  -->\n\nNuiChartsModule->ChartTooltipsComponent \n\n\n\n\n\nLegendComponent \n\nLegendComponent \n\nLegendComponent  -->\n\nNuiChartsModule->LegendComponent \n\n\n\n\n\nLegendSeriesComponent \n\nLegendSeriesComponent \n\nLegendSeriesComponent  -->\n\nNuiChartsModule->LegendSeriesComponent \n\n\n\n\n\nRichLegendTileComponent \n\nRichLegendTileComponent \n\nRichLegendTileComponent  -->\n\nNuiChartsModule->RichLegendTileComponent \n\n\n\n\n\nChartCollectionService\n\nChartCollectionService\n\nNuiChartsModule -->\n\nChartCollectionService->NuiChartsModule\n\n\n\n\n\nThresholdsService\n\nThresholdsService\n\nNuiChartsModule -->\n\nThresholdsService->NuiChartsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        API\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/charts.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            BasicLegendTileComponent\n                        \n                        \n                            ChartCollectionIdDirective\n                        \n                        \n                            ChartComponent\n                        \n                        \n                            ChartDonutContentComponent\n                        \n                        \n                            ChartMarkerComponent\n                        \n                        \n                            ChartPopoverComponent\n                        \n                        \n                            ChartTooltipComponent\n                        \n                        \n                            ChartTooltipsComponent\n                        \n                        \n                            LegendComponent\n                        \n                        \n                            LegendSeriesComponent\n                        \n                        \n                            RichLegendTileComponent\n                        \n                    \n                \n                \n                    Providers\n                    \n                        \n                            ChartCollectionService\n                        \n                        \n                            ThresholdsService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BasicLegendTileComponent\n                        \n                        \n                            ChartCollectionIdDirective\n                        \n                        \n                            ChartComponent\n                        \n                        \n                            ChartDonutContentComponent\n                        \n                        \n                            ChartMarkerComponent\n                        \n                        \n                            ChartPopoverComponent\n                        \n                        \n                            ChartTooltipComponent\n                        \n                        \n                            ChartTooltipsComponent\n                        \n                        \n                            LegendComponent\n                        \n                        \n                            LegendSeriesComponent\n                        \n                        \n                            RichLegendTileComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { OverlayModule } from \"@angular/cdk/overlay\";\nimport { NgModule } from \"@angular/core\";\n// This is not technically used here, but it does pull in the type for $localize\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { LocalizeFn } from \"@angular/localize/init\";\nimport { NuiCommonModule, NuiIconModule, NuiPopoverModule } from \"@nova-ui/bits\";\nimport \"d3-selection-multi\";\n\nimport { ChartCollectionIdDirective } from \"./chart-collection/chart-collection-id.directive\";\nimport { ChartCollectionService } from \"./chart-collection/chart-collection.service\";\nimport { ChartDonutContentComponent } from \"./chart-donut-content/chart-donut-content.component\";\nimport { ChartMarkerComponent } from \"./chart-marker/chart-marker.component\";\nimport { ChartPopoverComponent } from \"./chart-popover/chart-popover.component\";\nimport { ChartTooltipComponent } from \"./chart-tooltips/chart-tooltip.component\";\nimport { ChartTooltipDirective } from \"./chart-tooltips/chart-tooltip.directive\";\nimport { ChartTooltipsComponent } from \"./chart-tooltips/chart-tooltips.component\";\nimport { ChartComponent } from \"./chart/chart.component\";\nimport { LegendSeriesComponent } from \"./legend/legend-series/legend-series.component\";\nimport { BasicLegendTileComponent } from \"./legend/legend-tile/basic-legend-tile/basic-legend-tile.component\";\nimport { RichLegendTileComponent } from \"./legend/legend-tile/rich-legend-tile/rich-legend-tile.component\";\nimport { LegendComponent } from \"./legend/legend.component\";\nimport { ThresholdsService } from \"./thresholds/thresholds-service\";\n\n@NgModule({\n    imports: [\n        NuiCommonModule,\n        NuiIconModule,\n        NuiPopoverModule,\n        OverlayModule,\n    ],\n    declarations: [\n        LegendComponent,\n        LegendSeriesComponent,\n        BasicLegendTileComponent,\n        RichLegendTileComponent,\n        ChartComponent,\n        ChartCollectionIdDirective,\n        ChartMarkerComponent,\n        ChartPopoverComponent,\n        ChartDonutContentComponent,\n        ChartTooltipsComponent,\n        ChartTooltipComponent,\n        ChartTooltipDirective,\n    ],\n    exports: [\n        LegendComponent,\n        LegendSeriesComponent,\n        RichLegendTileComponent,\n        BasicLegendTileComponent,\n        ChartComponent,\n        ChartCollectionIdDirective,\n        ChartMarkerComponent,\n        ChartPopoverComponent,\n        ChartDonutContentComponent,\n        ChartTooltipsComponent,\n        ChartTooltipComponent,\n        ChartTooltipDirective,\n    ],\n    providers: [\n        ChartCollectionService,\n        ThresholdsService,\n    ],\n})\nexport class NuiChartsModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PathMarker.html":{"url":"classes/PathMarker.html","title":"class - PathMarker","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PathMarker\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/palette/markers/path-marker.ts\n        \n\n            \n                Description\n            \n            \n                This class creates a ChartMarker based on provided data for svg path\n\n            \n\n\n            \n                Implements\n            \n            \n                            IChartMarker\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                element\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getSvg\n                            \n                            \n                                    Public\n                                setColor\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(d: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/common/palette/markers/path-marker.ts:9\n                            \n                        \n\n                \n                    \n                            Creates an instance of PathMarker.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        d\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                value that has to be assigned to 'd' attribute of 'path' element in svg\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            element\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLElement\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/palette/markers/path-marker.ts:8\n                            \n                        \n\n                \n                    \n                        Resulting  HTMLElement \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getSvg\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSvg()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/palette/markers/path-marker.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setColor\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setColor(color: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/palette/markers/path-marker.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    color\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IChartMarker } from \"../../types\";\n\n/**\n * This class creates a ChartMarker based on provided data for svg path\n */\nexport class PathMarker implements IChartMarker {\n    /** Resulting  HTMLElement */\n    public element: HTMLElement;\n    protected svg: string;\n\n    /**\n     * Creates an instance of PathMarker.\n     * @param {string} d value that has to be assigned to 'd' attribute of 'path' element in svg\n     * @memberof PathMarker\n     */\n    constructor(d: string) {\n        this.element = document.createElement(\"path\");\n\n        this.setAttributes({\n            \"class\": \"nui-chart-element-marker nui-chart--path__outline\",\n            \"vector-effect\": \"non-scaling-stroke\",\n            \"d\": d,\n        });\n    }\n\n    public setColor(color: string): void {\n        this.setAttributes({\"fill\": color});\n    }\n\n    private setAttributes(attrs: { [key: string]: string }) {\n        for (const attr of Object.keys(attrs)) {\n            this.element.setAttribute(attr, attrs[attr]);\n        }\n\n        this.updateSvg();\n    }\n\n    public getSvg(): string {\n        return this.svg;\n    }\n\n    protected updateSvg() {\n        this.svg = this.element.outerHTML;\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PieRenderer.html":{"url":"classes/PieRenderer.html","title":"class - PieRenderer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PieRenderer\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/radial/pie-renderer.ts\n        \n\n            \n                Description\n            \n            \n                Renderer that is able to draw pie chart\n\n            \n\n            \n                Extends\n            \n            \n                        RadialRenderer\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                config\n                            \n                            \n                                    Public\n                                config\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_CONFIG\n                            \n                            \n                                    Public\n                                getContainerStateStyles\n                            \n                            \n                                    Public\n                                interaction\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                draw\n                            \n                            \n                                    Public\n                                getDataPointPosition\n                            \n                            \n                                    Public\n                                getInnerRadius\n                            \n                            \n                                    Public\n                                getOuterRadius\n                            \n                            \n                                    Public\n                                    Abstract\n                                draw\n                            \n                            \n                                    Public\n                                filterDataByDomain\n                            \n                            \n                                    Public\n                                getDataPointIndex\n                            \n                            \n                                    Public\n                                    Abstract\n                                getDataPointPosition\n                            \n                            \n                                    Public\n                                getDomain\n                            \n                            \n                                    Public\n                                getDomainOfFilteredData\n                            \n                            \n                                    Public\n                                getRequiredLayers\n                            \n                            \n                                    Public\n                                highlightDataPoint\n                            \n                            \n                                    Public\n                                setDataPointState\n                            \n                            \n                                    Public\n                                setSeriesState\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRadialRendererConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         RadialRenderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         RadialRenderer:40\n\n                            \n                        \n\n                \n                    \n                        Renderer configuration object. Defaults to `DEFAULT_RADIAL_RENDERER_CONFIG` constant value.\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRendererConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:39\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_CONFIG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRendererConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        stateStyles: {\n            [RenderState.default]: {\n                opacity: 1,\n            },\n            [RenderState.hidden]: {\n                opacity: 0,\n            },\n            [RenderState.deemphasized]: {\n                opacity: 0.1,\n            },\n            [RenderState.emphasized]: {\n                opacity: 1,\n            },\n        },\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:22\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getContainerStateStyles\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:94\n\n                            \n                        \n\n                \n                    \n                        Get the style attributes for the specified state that we need to apply to a series container\n\n                    \n                \n\n                    \n                        \n                          \n                                  Parameters :\n                                  \n                                      \n                                          \n                                                Name\n                                                    Description\n                                          \n                                      \n                                      \n                                                \n                                                        state\n                                                        \n                                                                the state for which to retrieve container styles\n\n                                                        \n                                                \n                                      \n                                  \n                          \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interaction\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Record\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:44\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            draw\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    draw(renderSeries: IRenderSeries, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Inherited from         RadialRenderer\n\n                \n            \n            \n                \n                        Defined in         RadialRenderer:46\n\n                \n            \n\n\n            \n                \n                    See Renderer \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDataPointPosition\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointPosition(dataSeries: IDataSeries, index: number, scales: Scales)\n                \n            \n\n\n            \n                \n                    Inherited from         RadialRenderer\n\n                \n            \n            \n                \n                        Defined in         RadialRenderer:94\n\n                \n            \n\n\n            \n                \n                    See Renderer \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSeries\n                                    \n                                            IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IPosition | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getInnerRadius\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getInnerRadius(range: number[], index: number)\n                \n            \n\n\n            \n                \n                    Inherited from         RadialRenderer\n\n                \n            \n            \n                \n                        Defined in         RadialRenderer:110\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getOuterRadius\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOuterRadius(range: [number, number], index: number)\n                \n            \n\n\n            \n                \n                    Inherited from         RadialRenderer\n\n                \n            \n            \n                \n                        Defined in         RadialRenderer:119\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                            [number, number]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            draw\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    draw(renderSeries: IRenderSeries, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:52\n\n                \n            \n\n\n            \n                \n                    Draw the visual representation of the provided data series\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The series to render\n\n                                    \n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A subject to optionally invoke for emitting events regarding a data point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            filterDataByDomain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    filterDataByDomain(data: any[], dataSeries: IDataSeries, scaleName: string, domain: any[])\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:169\n\n                \n            \n\n\n            \n                \n                    Filters given dataset by domain of provided scale\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scaleName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    domain\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDataPointIndex\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointIndex(series: IDataSeries, values: literal type, scales: Scales)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:73\n\n                \n            \n\n\n            \n                \n                    Based on provided values, return the nearest data point that the given coordinates represent. This is used for mouse hover behavior\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    series\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        series from which to determine the index corresponding to the specified values\n\n                                    \n                                \n                                \n                                    values\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the values from which a data point index can be determined\n\n                                    \n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the scales to be used in the index calculation\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        negative value means that index is not found\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            getDataPointPosition\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointPosition(dataSeries: IDataSeries, index: number, scales: Scales)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:62\n\n                \n            \n\n\n            \n                \n                    Return position of a specified datapoint\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IPosition | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDomain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDomain(data: any[], dataSeries: IDataSeries, scaleName: string, scale: IScale)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:152\n\n                \n            \n\n\n            \n                \n                    Calculate the domain using the data of a series\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        source data, can be filtered\n\n                                    \n                                \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        related data series\n\n                                    \n                                \n                                \n                                    scaleName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the scale for which domain calculation is needed\n\n                                    \n                                \n                                \n                                    scale\n                                    \n                                                IScale\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        min and max values as an array\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDomainOfFilteredData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDomainOfFilteredData(dataSeries: IDataSeries, filterScales: Record>, scaleKey: string, scale: IScale)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:128\n\n                \n            \n\n\n            \n                \n                    Calculate domain for data filtered by given filterScales\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filterScales\n                                    \n                                                Record>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scaleKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scale\n                                    \n                                                IScale\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        array of datapoints from dataSeries filtered by domains of given filterScales\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getRequiredLayers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRequiredLayers()\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:189\n\n                \n            \n\n\n            \n                \n                    Get the definitions of lasagna layers required for visualizing data\n\n\n                    \n                    \n                    \n                        Returns :     ILasagnaLayer[]\n\n                    \n                    \n                        lasagna layer definitions\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            highlightDataPoint\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    highlightDataPoint(renderSeries: IRenderSeries, dataPointIndex: number, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:84\n\n                \n            \n\n\n            \n                \n                    Highlight the data point corresponding to the specified data point index\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The series on which to render the data point highlight\n\n                                    \n                                \n                                \n                                    dataPointIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        index of the highlighted point within the data series (pass -1 to remove the highlight marker)\n\n                                    \n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A subject to optionally invoke for emitting events regarding a data point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setDataPointState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setDataPointState(target: D3Selection, state: RenderState)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:116\n\n                \n            \n\n\n            \n                \n                    Set the RenderState of the target data point\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                                D3Selection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the target data point\n\n                                    \n                                \n                                \n                                    state\n                                    \n                                                RenderState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new state for the target data point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setSeriesState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setSeriesState(renderContainers: IRenderContainers, state: RenderState)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:107\n\n                \n            \n\n\n            \n                \n                    Set the RenderState of the target data series\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderContainers\n                                    \n                                                IRenderContainers\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the render containers of the series\n\n                                    \n                                \n                                \n                                    state\n                                    \n                                                RenderState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new state for the target series\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Arc, DefaultArcObject } from \"d3-shape\";\n\nimport { RadialRenderer } from \"./radial-renderer\";\n\n/**\n * Renderer that is able to draw pie chart\n */\nexport class PieRenderer extends RadialRenderer {\n    protected getArc(range: [number, number], arc: Arc, index: number) {\n        return arc.outerRadius(range[1] - range[0])\n            .innerRadius(0);\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProcessedColorProvider.html":{"url":"classes/ProcessedColorProvider.html","title":"class - ProcessedColorProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProcessedColorProvider\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/palette/processed-color-provider.ts\n        \n\n            \n                Description\n            \n            \n                This color provider processes values provided by the source provider using the given function.\nExamples would be darken, lighten, reduce opacity, etc.\n\n            \n\n\n            \n                Implements\n            \n            \n                            IValueProvider\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                get\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                reset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sourceProvider: IValueProvider, fn: (input: string) => void)\n                    \n                \n                        \n                            \n                                Defined in src/core/common/palette/processed-color-provider.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sourceProvider\n                                                  \n                                                        \n                                                                        IValueProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        fn\n                                                  \n                                                        \n                                                                        function\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/palette/processed-color-provider.ts:15\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reset()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/palette/processed-color-provider.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IValueProvider } from \"../types\";\n\n/**\n * This color provider processes values provided by the source provider using the given function.\n * Examples would be darken, lighten, reduce opacity, etc.\n */\nexport class ProcessedColorProvider implements IValueProvider {\n\n    private processedColors: { [key: string]: string };\n\n    constructor(private sourceProvider: IValueProvider, private fn: (input: string) => string) {\n        this.reset();\n    }\n\n    public get = (entityId: string): string => {\n        const clr = this.sourceProvider.get(entityId);\n\n        if (!clr) {\n            throw new Error(\"clr is not defined\");\n        }\n\n        let processedColor = this.processedColors[clr];\n        if (!processedColor) {\n            processedColor = this.fn(clr);\n            this.processedColors[clr] = processedColor;\n        }\n        return processedColor;\n    }\n\n    public reset(): void {\n        this.processedColors = {};\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RadialAccessors.html":{"url":"classes/RadialAccessors.html","title":"class - RadialAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RadialAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/radial/accessors/radial-accessors.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IRadialAccessors\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                series\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(colorProvider)\n                    \n                \n                        \n                            \n                                Defined in src/renderers/radial/accessors/radial-accessors.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        colorProvider\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRadialDataAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/radial/accessors/radial-accessors.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRadialSeriesAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/radial/accessors/radial-accessors.ts:24\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { defaultColorProvider } from \"../../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, SeriesAccessor } from \"../../../core/common/types\";\n\nexport interface IRadialDataAccessors {\n    value: DataAccessor;\n    color?: DataAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface IRadialSeriesAccessors {\n    color?: SeriesAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: SeriesAccessor | undefined;\n}\n\nexport interface IRadialAccessors extends IAccessors {\n    data: IRadialDataAccessors;\n    series: IRadialSeriesAccessors;\n}\n\nexport class RadialAccessors implements IRadialAccessors {\n    data: IRadialDataAccessors;\n    series: IRadialSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider()) {\n        this.data = {\n            value: (d: any) => Number.isFinite(d) ? d : d.value,\n        };\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n        };\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RadialPopoverPlugin.html":{"url":"classes/RadialPopoverPlugin.html","title":"class - RadialPopoverPlugin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RadialPopoverPlugin\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/radial-popover-plugin.ts\n        \n\n            \n                Description\n            \n            \n                Extends ChartPopoverPlugin to handle popover positioning for radial charts.\n\n            \n\n            \n                Extends\n            \n            \n                        ChartPopoverPlugin\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                closePopoverSubject\n                            \n                            \n                                    Public\n                                config\n                            \n                            \n                                    Public\n                                dataPoints\n                            \n                            \n                                    Public\n                                DEFAULT_CONFIG\n                            \n                            \n                                    Public\n                                openPopoverSubject\n                            \n                            \n                                    Public\n                                popoverTargetPosition\n                            \n                            \n                                    Public\n                                updatePositionSubject\n                            \n                            \n                                    Public\n                                chart\n                            \n                            \n                                    Public\n                                chart\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            closePopoverSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPopoverPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPopoverPlugin:34\n\n                            \n                        \n\n                \n                    \n                        Emits an event indicating the popover should close \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IPopoverPluginConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPopoverPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPopoverPlugin:51\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dataPoints\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IDataPointsPayload\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPopoverPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPopoverPlugin:28\n\n                            \n                        \n\n                \n                    \n                        Info about the data point(s) received in the most recent interaction event \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            DEFAULT_CONFIG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IPopoverPluginConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        eventStreamId: INTERACTION_DATA_POINTS_EVENT,\n        interactionType: InteractionType.MouseMove,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPopoverPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPopoverPlugin:43\n\n                            \n                        \n\n                \n                    \n                        The default plugin configuration \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            openPopoverSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPopoverPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPopoverPlugin:32\n\n                            \n                        \n\n                \n                    \n                        Emits an event indicating the popover should open \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            popoverTargetPosition\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IElementPosition\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: 0,\n        left: 0,\n        width: 0,\n        height: 0,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPopoverPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPopoverPlugin:36\n\n                            \n                        \n\n                \n                    \n                        The target position of the popover \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            updatePositionSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPopoverPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPopoverPlugin:30\n\n                            \n                        \n\n                \n                    \n                        Emits the popover's target position \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IChart\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPopoverPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPopoverPlugin:7\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IChart\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPlugin:7\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPopoverPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPopoverPlugin:68\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPopoverPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPopoverPlugin:56\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPopoverPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPopoverPlugin:15\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPopoverPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPopoverPlugin:9\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPopoverPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPopoverPlugin:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPopoverPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPopoverPlugin:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:15\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:9\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {ChartPopoverPlugin} from \"./chart-popover-plugin\";\n\n/**\n * Extends ChartPopoverPlugin to handle popover positioning for radial charts.\n */\nexport class RadialPopoverPlugin extends ChartPopoverPlugin {\n    protected getAbsolutePosition(valArr: any[]) {\n        const chartElement: any = this.chart.target?.node()?.parentNode; // the one above svg\n\n        if (!chartElement) {\n            throw new Error(\"Chart parent node is not defined\");\n        }\n\n        const dataPointsLeft = Math.min(...valArr.map(d => d.position.x));\n        const dataPointsTop = Math.min(...valArr.map(d => d.position.y));\n        const left = chartElement.offsetLeft + this.chart.getGrid().config().dimension.margin.left\n            + dataPointsLeft + this.chart.getGrid().config().dimension.width() / 2;\n        const top = chartElement.offsetTop + dataPointsTop + this.chart.getGrid().config().dimension.height() / 2;\n        return {\n            top: top,\n            left: left,\n            height: 0,\n            width: 0,\n        };\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RadialTooltipsPlugin.html":{"url":"classes/RadialTooltipsPlugin.html","title":"class - RadialTooltipsPlugin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RadialTooltipsPlugin\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/tooltips/radial-tooltips-plugin.ts\n        \n\n            \n                Description\n            \n            \n                This radial tooltips plugin handles special tooltip positioning requirements for donut / pie charts.\n\n            \n\n            \n                Extends\n            \n            \n                        ChartTooltipsPlugin\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                dataPointPositions\n                            \n                            \n                                    Public\n                                dataPoints\n                            \n                            \n                                    Public\n                                hideSubject\n                            \n                            \n                                    Public\n                                orientation\n                            \n                            \n                                    Public\n                                showSubject\n                            \n                            \n                                    Public\n                                chart\n                            \n                            \n                                    Public\n                                chart\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                processHighlightedDataPoints\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dataPointPositions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartTooltipsPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartTooltipsPlugin:65\n\n                            \n                        \n\n                \n                    \n                        Calculated positions for the data point tooltips \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dataPoints\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IDataPointsPayload\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartTooltipsPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartTooltipsPlugin:63\n\n                            \n                        \n\n                \n                    \n                        Highlighted data points received from the chart \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            hideSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartTooltipsPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartTooltipsPlugin:75\n\n                            \n                        \n\n                \n                    \n                        This publishes an event to hide tooltips\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            orientation\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     \"right\" | \"top\"\n\n                        \n                    \n                    \n                        \n                            Default value : \"right\"\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartTooltipsPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartTooltipsPlugin:88\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            showSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartTooltipsPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartTooltipsPlugin:70\n\n                            \n                        \n\n                \n                    \n                        This publishes an event to show tooltips\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IChart\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartTooltipsPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartTooltipsPlugin:7\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IChart\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPlugin:7\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartTooltipsPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartTooltipsPlugin:126\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartTooltipsPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartTooltipsPlugin:98\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            processHighlightedDataPoints\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processHighlightedDataPoints(dataPoints: IDataPointsPayload)\n                \n            \n\n\n            \n                \n                    Inherited from         ChartTooltipsPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartTooltipsPlugin:131\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataPoints\n                                    \n                                                IDataPointsPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartTooltipsPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartTooltipsPlugin:15\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartTooltipsPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartTooltipsPlugin:9\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartTooltipsPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartTooltipsPlugin:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartTooltipsPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartTooltipsPlugin:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:15\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:9\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ConnectedPosition } from \"@angular/cdk/overlay\";\nimport { DefaultArcObject } from \"d3-shape\";\n\nimport { RadialRenderer } from \"../../../renderers/radial/radial-renderer\";\nimport { IAccessors, IChartSeries, IDataPoint, IPosition } from \"../../common/types\";\n\nimport { ChartTooltipsPlugin, ITooltipPosition } from \"./chart-tooltips-plugin\";\n\n/**\n * The circle is divided into 8 parts (E, SE, S, SW, ...), these values represent the connection points\n * on the source element for the tooltip position starting with EAST and going clockwise)\n */\nconst CONNECTION_POINTS: { x: \"start\" | \"center\" | \"end\", y: \"top\" | \"center\" | \"bottom\" }[] =\n    [\n        {x: \"end\", y: \"center\"},\n        {x: \"end\", y: \"bottom\"},\n        {x: \"center\", y: \"bottom\"},\n        {x: \"start\", y: \"bottom\"},\n        {x: \"start\", y: \"center\"},\n        {x: \"start\", y: \"top\"},\n        {x: \"center\", y: \"top\"},\n        {x: \"end\", y: \"top\"},\n    ];\n\n/** This conversion map is used to calculate the opposite connection points for the tooltip element */\nconst OPPOSITE: { [key: string]: string } = {\n    \"start\": \"end\",\n    \"end\": \"start\",\n    \"top\": \"bottom\",\n    \"bottom\": \"top\",\n};\n\n/**\n * This radial tooltips plugin handles special tooltip positioning requirements for donut / pie charts.\n */\nexport class RadialTooltipsPlugin extends ChartTooltipsPlugin {\n\n    protected getTooltipPosition(dataPoint: IDataPoint, chartSeries: IChartSeries): ITooltipPosition {\n        const pieArcData: DefaultArcObject = dataPoint.data;\n        const renderer = chartSeries.renderer;\n        const rScale = chartSeries.scales.r;\n        // this calculation was taken from the radial renderer implementation\n        const outerRadius = renderer.getOuterRadius(rScale.range(), dataPoint.index);\n\n        const r = outerRadius + this.tooltipPositionOffset;\n        // pie charts start on the top, so we need to subtract Math.PI / 2\n        const a = (pieArcData.startAngle + pieArcData.endAngle) / 2 - Math.PI / 2;\n\n        return {\n            x: Math.cos(a) * r,\n            y: Math.sin(a) * r,\n            width: 0,\n            height: 0,\n            overlayPositions: [this.getOverlayPosition(a)],\n        };\n    }\n\n    protected getAbsolutePosition(relativePosition: ITooltipPosition, chartPosition: IPosition): ITooltipPosition {\n        const absolutePosition = super.getAbsolutePosition(relativePosition, chartPosition);\n\n        // radial grid is shifted so that the origin is located in the middle of the rendering area,\n        // so we need to add it back when we're emitting absolute positions for the tooltips\n        absolutePosition.x += this.chart.getGrid().config().dimension.width() / 2;\n        absolutePosition.y += this.chart.getGrid().config().dimension.height() / 2;\n\n        return absolutePosition;\n    }\n\n    /**\n     * Calculate the position for the tooltip overlay based on the angle of the pie slice\n     *\n     * @param {number} angle in radians\n     */\n    private getOverlayPosition(angle: number): ConnectedPosition {\n        const sectionIndex = this.getSectionIndex(angle, 8);\n\n        return {\n            originX: CONNECTION_POINTS[sectionIndex].x,\n            originY: CONNECTION_POINTS[sectionIndex].y,\n            overlayX: this.opposite(CONNECTION_POINTS[sectionIndex].x),\n            overlayY: this.opposite(CONNECTION_POINTS[sectionIndex].y),\n        };\n    }\n\n    /**\n     * Calculates what section of the circle does the given angle belong to\n     *\n     * @param {number} angle in radians\n     * @param {number} sections The number of sections the circle is divided into\n     */\n    private getSectionIndex(angle: number, sections: number) {\n        let sectionIndex = Math.round(angle / (Math.PI * 2 / sections)) % sections;\n        while (sectionIndex \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RectangleAccessors.html":{"url":"classes/RectangleAccessors.html","title":"class - RectangleAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RectangleAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/accessors/rectangle-accessors.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IRectangleAccessors\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                series\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/renderers/accessors/rectangle-accessors.ts:35\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleDataAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/accessors/rectangle-accessors.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleSeriesAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/accessors/rectangle-accessors.ts:35\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { DataAccessor, IAccessors, IDataAccessors, ISeriesAccessors, SeriesAccessor } from \"../../core/common/types\";\n\nexport interface IStartEndRangeAccessors extends IDataAccessors {\n    start: DataAccessor;\n    end: DataAccessor;\n}\n\nexport interface IValueThicknessAccessors extends IDataAccessors {\n    value: DataAccessor;\n    thickness: DataAccessor;\n}\n\nexport interface IRectangleDataAccessors extends IDataAccessors {\n    startX?: DataAccessor;\n    endX?: DataAccessor;\n    thicknessX?: DataAccessor;\n\n    startY?: DataAccessor;\n    endY?: DataAccessor;\n    thicknessY?: DataAccessor;\n}\n\nexport interface IRectangleSeriesAccessors extends ISeriesAccessors {\n    color?: SeriesAccessor;\n    marker?: SeriesAccessor;\n}\n\nexport interface IRectangleAccessors extends IAccessors {\n    data: IRectangleDataAccessors;\n    series: IRectangleSeriesAccessors;\n}\n\nexport class RectangleAccessors implements IRectangleAccessors {\n    data: IRectangleDataAccessors;\n    series: IRectangleSeriesAccessors;\n\n    constructor() {\n\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Renderer.html":{"url":"classes/Renderer.html","title":"class - Renderer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Renderer\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/renderer.ts\n        \n\n            \n                Description\n            \n            \n                The abstract base class for chart renderers with some limited default functionality\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                config\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_CONFIG\n                            \n                            \n                                    Public\n                                getContainerStateStyles\n                            \n                            \n                                    Public\n                                interaction\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Abstract\n                                draw\n                            \n                            \n                                    Public\n                                filterDataByDomain\n                            \n                            \n                                    Public\n                                getDataPointIndex\n                            \n                            \n                                    Public\n                                    Abstract\n                                getDataPointPosition\n                            \n                            \n                                    Public\n                                getDomain\n                            \n                            \n                                    Public\n                                getDomainOfFilteredData\n                            \n                            \n                                    Public\n                                getRequiredLayers\n                            \n                            \n                                    Public\n                                highlightDataPoint\n                            \n                            \n                                    Public\n                                setDataPointState\n                            \n                            \n                                    Public\n                                setSeriesState\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: IRendererConfig)\n                    \n                \n                        \n                            \n                                Defined in src/core/common/renderer.ts:37\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        IRendererConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRendererConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/renderer.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_CONFIG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRendererConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        stateStyles: {\n            [RenderState.default]: {\n                opacity: 1,\n            },\n            [RenderState.hidden]: {\n                opacity: 0,\n            },\n            [RenderState.deemphasized]: {\n                opacity: 0.1,\n            },\n            [RenderState.emphasized]: {\n                opacity: 1,\n            },\n        },\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/renderer.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getContainerStateStyles\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/renderer.ts:94\n                            \n                        \n\n                \n                    \n                        Get the style attributes for the specified state that we need to apply to a series container\n\n                    \n                \n\n                    \n                        \n                          \n                                  Parameters :\n                                  \n                                      \n                                          \n                                                Name\n                                                    Description\n                                          \n                                      \n                                      \n                                                \n                                                        state\n                                                        \n                                                                the state for which to retrieve container styles\n\n                                                        \n                                                \n                                      \n                                  \n                          \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interaction\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Record\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/renderer.ts:44\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            draw\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    draw(renderSeries: IRenderSeries, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/renderer.ts:52\n                \n            \n\n\n            \n                \n                    Draw the visual representation of the provided data series\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The series to render\n\n                                    \n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A subject to optionally invoke for emitting events regarding a data point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            filterDataByDomain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    filterDataByDomain(data: any[], dataSeries: IDataSeries, scaleName: string, domain: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/renderer.ts:169\n                \n            \n\n\n            \n                \n                    Filters given dataset by domain of provided scale\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scaleName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    domain\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDataPointIndex\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointIndex(series: IDataSeries, values: literal type, scales: Scales)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/renderer.ts:73\n                \n            \n\n\n            \n                \n                    Based on provided values, return the nearest data point that the given coordinates represent. This is used for mouse hover behavior\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    series\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        series from which to determine the index corresponding to the specified values\n\n                                    \n                                \n                                \n                                    values\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the values from which a data point index can be determined\n\n                                    \n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the scales to be used in the index calculation\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        negative value means that index is not found\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            getDataPointPosition\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointPosition(dataSeries: IDataSeries, index: number, scales: Scales)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/renderer.ts:62\n                \n            \n\n\n            \n                \n                    Return position of a specified datapoint\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IPosition | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDomain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDomain(data: any[], dataSeries: IDataSeries, scaleName: string, scale: IScale)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/renderer.ts:152\n                \n            \n\n\n            \n                \n                    Calculate the domain using the data of a series\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        source data, can be filtered\n\n                                    \n                                \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        related data series\n\n                                    \n                                \n                                \n                                    scaleName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the scale for which domain calculation is needed\n\n                                    \n                                \n                                \n                                    scale\n                                    \n                                                IScale\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        min and max values as an array\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDomainOfFilteredData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDomainOfFilteredData(dataSeries: IDataSeries, filterScales: Record>, scaleKey: string, scale: IScale)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/renderer.ts:128\n                \n            \n\n\n            \n                \n                    Calculate domain for data filtered by given filterScales\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filterScales\n                                    \n                                                Record>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scaleKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scale\n                                    \n                                                IScale\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        array of datapoints from dataSeries filtered by domains of given filterScales\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getRequiredLayers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRequiredLayers()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/renderer.ts:189\n                \n            \n\n\n            \n                \n                    Get the definitions of lasagna layers required for visualizing data\n\n\n                    \n                    \n                    \n                        Returns :     ILasagnaLayer[]\n\n                    \n                    \n                        lasagna layer definitions\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            highlightDataPoint\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    highlightDataPoint(renderSeries: IRenderSeries, dataPointIndex: number, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/renderer.ts:84\n                \n            \n\n\n            \n                \n                    Highlight the data point corresponding to the specified data point index\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The series on which to render the data point highlight\n\n                                    \n                                \n                                \n                                    dataPointIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        index of the highlighted point within the data series (pass -1 to remove the highlight marker)\n\n                                    \n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A subject to optionally invoke for emitting events regarding a data point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setDataPointState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setDataPointState(target: D3Selection, state: RenderState)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/renderer.ts:116\n                \n            \n\n\n            \n                \n                    Set the RenderState of the target data point\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                                D3Selection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the target data point\n\n                                    \n                                \n                                \n                                    state\n                                    \n                                                RenderState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new state for the target data point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setSeriesState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setSeriesState(renderContainers: IRenderContainers, state: RenderState)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/renderer.ts:107\n                \n            \n\n\n            \n                \n                    Set the RenderState of the target data series\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderContainers\n                                    \n                                                IRenderContainers\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the render containers of the series\n\n                                    \n                                \n                                \n                                    state\n                                    \n                                                RenderState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new state for the target series\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { extent, Numeric } from \"d3-array\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport defaultsDeep from \"lodash/defaultsDeep\";\nimport each from \"lodash/each\";\nimport get from \"lodash/get\";\nimport { Subject } from \"rxjs\";\n\nimport { DATA_POINT_NOT_FOUND, STANDARD_RENDER_LAYERS } from \"../../constants\";\nimport { IRenderSeries, RenderLayerName, RenderState } from \"../../renderers/types\";\n\nimport { EMPTY_CONTINUOUS_DOMAIN, IScale, Scales } from \"./scales/types\";\nimport { D3Selection, IAccessors, IDataPoint, IDataSeries, ILasagnaLayer, IPosition, IRenderContainers, IRendererConfig, IRendererEventPayload } from \"./types\";\n\n/**\n * The abstract base class for chart renderers with some limited default functionality\n */\n// For why the \"dynamic\" decorator is used see https://github.com/ng-packagr/ng-packagr/issues/641\n// @dynamic\nexport abstract class Renderer {\n\n    public static readonly DEFAULT_CONFIG: IRendererConfig = {\n        stateStyles: {\n            [RenderState.default]: {\n                opacity: 1,\n            },\n            [RenderState.hidden]: {\n                opacity: 0,\n            },\n            [RenderState.deemphasized]: {\n                opacity: 0.1,\n            },\n            [RenderState.emphasized]: {\n                opacity: 1,\n            },\n        },\n    };\n\n    constructor(public config: IRendererConfig = {}) {\n        // setting default values to the properties that were not set by user\n        this.config = defaultsDeep(this.config, Renderer.DEFAULT_CONFIG);\n    }\n\n    public interaction: Record = {};\n\n    /**\n     * Draw the visual representation of the provided data series\n     *\n     * @param {IRenderSeries} renderSeries The series to render\n     * @param {Subject} rendererSubject A subject to optionally invoke for emitting events regarding a data point\n     */\n    public abstract draw(renderSeries: IRenderSeries, rendererSubject: Subject): void;\n\n    /**\n     * Return position of a specified datapoint\n     *\n     * @param {IDataSeries} dataSeries\n     * @param {number} index\n     * @param {Scales} scales\n     * @returns {IPosition}\n     */\n    public abstract getDataPointPosition(dataSeries: IDataSeries, index: number, scales: Scales): IPosition | undefined;\n\n    /**\n     * Based on provided values, return the nearest data point that the given coordinates represent. This is used for mouse hover behavior\n     *\n     * @param {IDataSeries} series series from which to determine the index corresponding to the specified values\n     * @param {{ [axis: string]: any }} values the values from which a data point index can be determined\n     * @param {Scales} scales the scales to be used in the index calculation\n     *\n     * @returns {number} negative value means that index is not found\n     */\n    public getDataPointIndex(series: IDataSeries, values: { [axis: string]: any }, scales: Scales): number {\n        return DATA_POINT_NOT_FOUND;\n    }\n\n    /**\n     * Highlight the data point corresponding to the specified data point index\n     *\n     * @param {IRenderSeries} renderSeries The series on which to render the data point highlight\n     * @param {number} dataPointIndex index of the highlighted point within the data series (pass -1 to remove the highlight marker)\n     * @param {Subject} rendererSubject A subject to optionally invoke for emitting events regarding a data point\n     */\n    public highlightDataPoint(renderSeries: IRenderSeries, dataPointIndex: number, rendererSubject: Subject): void {\n    }\n\n    /**\n     * Get the style attributes for the specified state that we need to apply to a series container\n     *\n     * @param {RenderState} state the state for which to retrieve container styles\n     *\n     * @returns {ValueMap} the container styles for the specified state\n     */\n    public getContainerStateStyles = (state: RenderState): ValueMap => {\n        if (!this.config.stateStyles) {\n            throw new Error(\"stateStyles property is not defined\");\n        }\n        return this.config.stateStyles[state || RenderState.default];\n    }\n\n    /**\n     * Set the RenderState of the target data series\n     *\n     * @param {IRenderContainers} renderContainers the render containers of the series\n     * @param {RenderState} state The new state for the target series\n     */\n    public setSeriesState(renderContainers: IRenderContainers, state: RenderState): void {\n    }\n\n    /**\n     * Set the RenderState of the target data point\n     *\n     * @param {D3Selection} target the target data point\n     * @param {RenderState} state The new state for the target data point\n     */\n    public setDataPointState(target: D3Selection, state: RenderState): void {\n    }\n\n    /**\n     * Calculate domain for data filtered by given filterScales\n     *\n     * @param dataSeries\n     * @param filterScales\n     * @param scaleKey\n     * @param scale\n     * @returns array of datapoints from dataSeries filtered by domains of given filterScales\n     */\n    public getDomainOfFilteredData(dataSeries: IDataSeries, filterScales: Record>, scaleKey: string, scale: IScale): any[] {\n        let filteredData = dataSeries.data;\n        for (const fixedScaleKey of Object.keys(filterScales)) {\n            const filterScale = filterScales[fixedScaleKey];\n            if (!filterScale.isDomainFixed || !filterScale.isContinuous()) {\n                continue;\n            }\n\n            filteredData = this.filterDataByDomain(filteredData, dataSeries, fixedScaleKey, filterScale.domain());\n        }\n\n        return this.getDomain(filteredData, dataSeries, scaleKey, scale);\n    }\n\n    /**\n     * Calculate the domain using the data of a series\n     *\n     * @param {any[]} data source data, can be filtered\n     * @param dataSeries related data series\n     * @param {string} scaleName name of the scale for which domain calculation is needed\n     * @param scale\n     *\n     * @returns {[any, any]} min and max values as an array\n     */\n    public getDomain(data: any[], dataSeries: IDataSeries, scaleName: string, scale: IScale): any[] {\n        if (!data || data.length === 0) {\n            return EMPTY_CONTINUOUS_DOMAIN;\n        }\n\n        return extent(data,\n                                        (datum, index, arr) => dataSeries.accessors.data?.[scaleName]?.(datum, index, Array.from(arr), dataSeries));\n    }\n\n    /**\n     * Filters given dataset by domain of provided scale\n     *\n     * @param data\n     * @param dataSeries\n     * @param scaleName\n     * @param domain\n     */\n    public filterDataByDomain(data: any[], dataSeries: IDataSeries, scaleName: string, domain: any[]): any[] {\n        const accessor = dataSeries.accessors.data?.[scaleName];\n\n        // if (isNil(accessor)) {\n        //     throw new Error(\"accessor is not defined\");\n        // }\n\n\n        return data.filter((d, i) => {\n            // @ts-ignore\n            const value = accessor(d, i, data, dataSeries);\n            return value >= domain[0] && value ,\n                               dataPointSubject: Subject, dataPoint: Partial) {\n        const eventList: string[] = get(this.interaction, path, {})[nativeEvent];\n        if (!eventList) {\n            return;\n        }\n\n        each(eventList, (targetEvent: string) => {\n            target.on(nativeEvent, () => {\n                const bbox = target.node().getBoundingClientRect();\n                dataPointSubject.next({\n                    eventName: targetEvent,\n                    data: {\n                        ...dataPoint,\n                        position: bbox,\n                    },\n                });\n            });\n        });\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/RichLegendTileComponent.html":{"url":"components/RichLegendTileComponent.html","title":"component - RichLegendTileComponent","body":"\n                   \n\n\n\n\n\n  Components\n  RichLegendTileComponent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n    File\n\n\n    src/legend/legend-tile/rich-legend-tile/rich-legend-tile.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    AfterContentInit\n                    AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n            \n                encapsulation\n                ViewEncapsulation.Emulated\n            \n\n\n\n\n\n\n\n\n\n            \n                selector\n                nui-rich-legend-tile\n            \n\n            \n                styleUrls\n                ./rich-legend-tile.component.less\n            \n\n\n\n            \n                templateUrl\n                ./rich-legend-tile.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                seriesHasAdditionalContent\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                hasInputUnitLabel\n                            \n                            \n                                    Public\n                                hasInputValue\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                backgroundColor\n                            \n                            \n                                color\n                            \n                            \n                                unitLabel\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(legendSeries: LegendSeriesComponent, legend: LegendComponent, changeDetector: ChangeDetectorRef)\n                    \n                \n                        \n                            \n                                Defined in src/legend/legend-tile/rich-legend-tile/rich-legend-tile.component.ts:43\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        legendSeries\n                                                  \n                                                        \n                                                                        LegendSeriesComponent\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        legend\n                                                  \n                                                        \n                                                                        LegendComponent\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        changeDetector\n                                                  \n                                                        \n                                                                        ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        backgroundColor\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-tile/rich-legend-tile/rich-legend-tile.component.ts:36\n                            \n                        \n                \n                    \n                        The series color\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        color\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-tile/rich-legend-tile/rich-legend-tile.component.ts:41\n                            \n                        \n                \n                    \n                        Color for the text\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        unitLabel\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-tile/rich-legend-tile/rich-legend-tile.component.ts:26\n                            \n                        \n                \n                    \n                        The series unit label\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        value\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-tile/rich-legend-tile/rich-legend-tile.component.ts:31\n                            \n                        \n                \n                    \n                        The current value of the series\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            hasInputUnitLabel\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hasInputUnitLabel()\n                \n            \n\n\n            \n                \n                    Defined in src/legend/legend-tile/rich-legend-tile/rich-legend-tile.component.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            hasInputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hasInputValue()\n                \n            \n\n\n            \n                \n                    Defined in src/legend/legend-tile/rich-legend-tile/rich-legend-tile.component.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            seriesHasAdditionalContent\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/legend/legend-tile/rich-legend-tile/rich-legend-tile.component.ts:43\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import {\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    Host,\n    Input,\n    Optional,\n    ViewEncapsulation,\n} from \"@angular/core\";\nimport _isNil from \"lodash/isNil\";\n\nimport { LegendSeriesComponent } from \"../../legend-series/legend-series.component\";\nimport { LegendComponent } from \"../../legend.component\";\n\n@Component({\n    selector: \"nui-rich-legend-tile\",\n    templateUrl: \"./rich-legend-tile.component.html\",\n    styleUrls: [\"./rich-legend-tile.component.less\"],\n    encapsulation: ViewEncapsulation.Emulated,\n})\nexport class RichLegendTileComponent implements AfterContentInit, AfterViewInit {\n    /**\n     * The series unit label\n     */\n    @Input() public unitLabel: string;\n\n    /**\n     * The current value of the series\n     */\n    @Input() public value: string;\n\n    /**\n     * The series color\n     */\n    @Input() public backgroundColor: string;\n\n    /**\n     * Color for the text\n     */\n    @Input() public color: string;\n\n    public seriesHasAdditionalContent: boolean;\n\n    constructor(@Host() private legendSeries: LegendSeriesComponent,\n                @Optional() @Host() private legend: LegendComponent,\n                private changeDetector: ChangeDetectorRef) { }\n\n    public ngAfterContentInit() {\n        if (this.legend) {\n            this.unitLabel = this.unitLabel || this.legend.seriesUnitLabel;\n            this.backgroundColor = this.backgroundColor || this.legend.seriesColor || \"white\";\n        }\n    }\n\n    public ngAfterViewInit() {\n        if (this.legendSeries) {\n            this.seriesHasAdditionalContent = this.legendSeries.hasInputDescription() || this.legendSeries.hasProjectedDescription();\n            this.changeDetector.detectChanges();\n        }\n    }\n\n    public hasInputValue() {\n        return !_isNil(this.value);\n    }\n\n    public hasInputUnitLabel() {\n        return !_isNil(this.unitLabel);\n    }\n}\n\n    \n\n\n\n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ' 0\"     [class.nui-rich-legend-tile--series-has-additional-content]=\"seriesHasAdditionalContent\">                        {{ value }}                            {{ unitLabel }}                                                            '\n    var COMPONENTS = [{'name': 'BasicLegendTileComponent', 'selector': 'nui-basic-legend-tile'},{'name': 'ChartComponent', 'selector': 'nui-chart'},{'name': 'ChartDonutContentComponent', 'selector': 'nui-chart-donut-content'},{'name': 'ChartMarkerComponent', 'selector': 'nui-chart-marker'},{'name': 'ChartPopoverComponent', 'selector': 'nui-chart-popover'},{'name': 'ChartTooltipComponent', 'selector': 'nui-chart-tooltip'},{'name': 'ChartTooltipsComponent', 'selector': 'nui-chart-tooltips'},{'name': 'LegendComponent', 'selector': 'nui-legend'},{'name': 'LegendSeriesComponent', 'selector': 'nui-legend-series'},{'name': 'RichLegendTileComponent', 'selector': 'nui-rich-legend-tile'}];\n    var DIRECTIVES = [{'name': 'ChartCollectionIdDirective', 'selector': '[nuiChartCollectionId]'}];\n    var ACTUAL_COMPONENT = {'name': 'RichLegendTileComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Scale.html":{"url":"classes/Scale.html","title":"class - Scale","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Scale\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/scales/scale.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IScale\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                domainCalculator\n                            \n                            \n                                    Public\n                                formatters\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                isDomainFixed\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Abstract\n                                convert\n                            \n                            \n                                    Public\n                                domain\n                            \n                            \n                                    Public\n                                domain\n                            \n                            \n                                    Public\n                                domain\n                            \n                            \n                                    Public\n                                fixDomain\n                            \n                            \n                                    Public\n                                    Abstract\n                                invert\n                            \n                            \n                                    Public\n                                    Abstract\n                                isContinuous\n                            \n                            \n                                    Public\n                                isDomainValid\n                            \n                            \n                                    Public\n                                range\n                            \n                            \n                                    Public\n                                range\n                            \n                            \n                                    Public\n                                range\n                            \n                            \n                                    Public\n                                reverse\n                            \n                            \n                                    Public\n                                reversed\n                            \n                            \n                                    Public\n                                reversed\n                            \n                            \n                                    Public\n                                reversed\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    d3Scale\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            domainCalculator\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         DomainCalculator\n\n                        \n                    \n                    \n                        \n                            Default value : getAutomaticDomain\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/scales/scale.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            formatters\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IFormatters\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/scales/scale.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/scales/scale.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            isDomainFixed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/scales/scale.ts:13\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            convert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    convert(value: T)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    domain()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:55\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                    \n                        Returns :     T[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    domain(domain: T[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    domain(domain?: T[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            fixDomain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fixDomain(domain: T[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:67\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            invert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    invert(coordinate: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    coordinate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            isContinuous\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isContinuous()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isDomainValid\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isDomainValid()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:74\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            range\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    range()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:43\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            range\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    range(range: [number, number])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                            [number, number]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            range\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    range(range?: [number, number])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                            [number, number]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reverse\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reverse()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:78\n                \n            \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reversed()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:83\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reversed(reversed: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reversed\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reversed(reversed?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reversed\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | \n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        d3Scale\n                    \n                \n\n                \n                    \n                        getd3Scale()\n                    \n                \n                            \n                                \n                                    Defined in src/core/common/scales/scale.ts:38\n                                \n                            \n                    \n                        \n                                See IScale \n\n\n                                \n                                    Returns :         AxisScale\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { AxisScale } from \"d3-axis\";\n\nimport { UtilityService } from \"../utility.service\";\n\nimport { getAutomaticDomain } from \"./domain-calculation/automatic-domain\";\nimport { DomainCalculator, IFormatters, IScale } from \"./types\";\n\nexport abstract class Scale implements IScale {\n\n    public readonly id: string;\n    public domainCalculator: DomainCalculator = getAutomaticDomain;\n    public formatters: IFormatters = {};\n    public isDomainFixed: boolean;\n    private isReversed = false;\n\n    protected readonly _d3Scale: any;\n\n    protected constructor(id?: string) {\n        this.id = id || UtilityService.uuid();\n\n        this._d3Scale = this.createD3Scale();\n    }\n\n    /**\n     * Creates a d3 scale based on the scale's type\n     *\n     * @returns {any} A new d3 scale appropriate to the scale type\n     */\n    protected abstract createD3Scale(): any;\n\n    public abstract convert(value: T): number;\n\n    public abstract invert(coordinate: number): T | undefined;\n\n    public abstract isContinuous(): boolean;\n\n    /** See {@link IScale#d3Scale} */\n    public get d3Scale(): AxisScale {\n        return this._d3Scale;\n    }\n\n    /** See {@link IScale#range} */\n    public range(): [number, number];\n    public range(range: [number, number]): this;\n    public range(range?: [number, number]): any {\n        if (range) {\n            this._d3Scale.range(this.isReversed ? range.reverse() : range);\n            return this;\n        } else {\n            return this._d3Scale.range();\n        }\n    }\n\n    /** See {@link IScale#domain} */\n    public domain(): T[];\n    public domain(domain: T[]): this;\n    public domain(domain?: T[]): any {\n        if (domain) {\n            this._d3Scale.domain(domain);\n            return this;\n        } else {\n            return this._d3Scale.domain();\n        }\n    }\n\n    /** See {@link IScale#fixDomain} */\n    public fixDomain(domain: T[]): this {\n        this.domain(domain);\n        this.isDomainFixed = true;\n        return this;\n    }\n\n    /** See {@link IScale#reverse} */\n    public isDomainValid(): boolean {\n        return -1 === this.domain().findIndex((value) => value === undefined);\n    }\n\n    public reverse(): this {\n        return this.reversed(!this.isReversed);\n    }\n\n    /** See {@link IScale#reversed} */\n    public reversed(): boolean;\n    public reversed(reversed: boolean): this;\n    public reversed(reversed?: boolean): boolean | this {\n        if (typeof reversed === \"undefined\") {\n            return this.isReversed;\n        } else {\n            this.isReversed = reversed;\n            return this;\n        }\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ScalesIndex.html":{"url":"interfaces/ScalesIndex.html","title":"interface - ScalesIndex","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ScalesIndex\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/scales/types.ts\n        \n\n            \n                Description\n            \n            \n                Dictionary of scale collections in index and array form \n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    literal type\n\n                    \n                \n                        \n                            \n                                Defined in src/core/common/scales/types.ts:25\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import { AxisScale } from \"d3-axis\";\n\nimport { IAccessors, IChartSeries } from \"../types\";\n\n/** Domain for series with empty or null data */\nexport const EMPTY_CONTINUOUS_DOMAIN = [0, 0];\n/** A reasonable non-data-driven domain for charts  */\nexport const NORMALIZED_DOMAIN = [0, 1];\n\n/** Signature for domain calculator */\nexport type DomainCalculator = (chartSeriesSet: IChartSeries[], scaleId: string, scale: IScale) => any[];\n\n/** Interface for scale formatters */\nexport interface IFormatters {\n    /** Formatter for tick labels */\n    tick?: Formatter;\n    /** Additional formatters */\n    [p: string]: Formatter | undefined;\n}\n\n/** Signature for label formatters */\nexport type Formatter = (value: T) => string;\n\n/** Dictionary of scale collections in index and array form */\nexport interface ScalesIndex {\n    [key: string]: {\n        /** Scale collection as an index */\n        index: { [scaleId: string]: IScale };\n        /** Scale collection as an array */\n        list: IScale[];\n    };\n}\n\n/** Dictionary of scales */\nexport type Scales = Record>;\n\nexport interface IXYScales extends Scales {\n    x: IScale;\n    y: IScale;\n}\n\nexport interface IRadialScales extends Scales {\n    r: IScale;\n}\n\n/** Interface for a scale */\nexport interface IScale {\n    /** The scale identifier */\n    readonly id: string;\n    readonly d3Scale: AxisScale; // TODO: maybe AxisScale is to narrow?\n\n    /** If this flag is enabled, the domain of this scale is not recalculated */\n    isDomainFixed?: boolean;\n    /** Method used to calculate the scale's domain */\n    domainCalculator?: DomainCalculator;\n    /** The scales formatters */\n    formatters: IFormatters;\n    /** If this flag is enabled, the domain has been recalculated with ticks in mind */\n    __domainCalculatedWithTicks?: boolean;\n\n    /**\n     * Determines if the scale's domain is continuous\n     *\n     * @returns {boolean} true if the scale's domain is continuous (numeric), false otherwise\n     */\n    isContinuous(): boolean;\n\n    /**\n     * Determines if the scale's domain is valid\n     *\n     * @returns {boolean} true if the scale's domain is valid, false otherwise\n     */\n    isDomainValid(): boolean;\n\n    /**\n     * Converts a value to its corresponding coordinate\n     *\n     * @param {T} value The value to be converted\n     * @returns {number} The coordinate corresponding to the specified value\n     */\n    convert(value: T): number;\n\n    /**\n     * Converts a coordinate to its corresponding value\n     *\n     * @param {number} coordinate The coordinate to be converted\n     * @returns {T} The value corresponding to the specified coordinate\n     */\n    invert(coordinate: number): T | undefined;\n\n    /**\n     * Gets the scale's range\n     *\n     * @returns {[number, number]} The scale's range\n     */\n    range(): [number, number];\n\n    /**\n     * Sets the scale's range\n     *\n     * @param {[number, number]} range The scale's new range\n     */\n    range(range: [number, number]): this;\n\n    /**\n     * Gets the scale's domain\n     *\n     * @returns {T[]} The scale's domain\n     */\n    domain(): T[];\n\n    /**\n     * Sets the scale's domain\n     *\n     * @param {T[]} domain The scale's new domain\n     */\n    domain(domain: T[]): this;\n\n    /**\n     * Shorthand method for setting the domain and isDomainFixed at once\n     *\n     * @param {T[]} domain The scale's fixed domain\n     */\n    fixDomain(domain: T[]): void;\n\n    /**\n     * Reverse the scale orientation by toggling the reversed flag\n     */\n    reverse(): this;\n\n    /**\n     * Getter for the reversed flag (see #reverse)\n     */\n    reversed(): boolean;\n\n    /**\n     * Setter for the reversed flag (see #reverse)\n     *\n     * @param reversed\n     */\n    reversed(reversed: boolean): this;\n}\n\n\nexport interface IBandScale extends IScale {\n    bandwidth(): number;\n}\n\nexport function isBandScale(scale: any): scale is IBandScale {\n    return typeof scale.bandwidth === \"function\";\n}\n\nexport interface IHasInnerScale extends IScale {\n    innerScale: IScale;\n}\n\nexport function hasInnerScale(scale: any): scale is IHasInnerScale {\n    return typeof scale.innerScale !== \"undefined\";\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SequentialChartMarkerProvider.html":{"url":"classes/SequentialChartMarkerProvider.html","title":"class - SequentialChartMarkerProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SequentialChartMarkerProvider\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/palette/sequential-chart-marker-provider.ts\n        \n\n            \n                Description\n            \n            \n                This class matches the provided markers to given series.\nIt keeps track of already given markers to given entities to avoid conflicts.\n\n            \n\n            \n                Extends\n            \n            \n                        SequentialValueProvider\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                get\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                reset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(markers: IChartMarker[])\n                    \n                \n                        \n                            \n                                Defined in src/core/common/palette/sequential-chart-marker-provider.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        markers\n                                                  \n                                                        \n                                                                        IChartMarker[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                            \n                                \n                                    Inherited from         SequentialValueProvider\n\n                                \n                            \n                        \n                            \n                                    Defined in         SequentialValueProvider:16\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reset()\n                \n            \n\n\n            \n                \n                    Inherited from         SequentialValueProvider\n\n                \n            \n            \n                \n                        Defined in         SequentialValueProvider:26\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IChartMarker } from \"../types\";\n\nimport { SequentialValueProvider } from \"./sequential-value-provider\";\n\n/**\n * This class matches the provided markers to given series.\n * It keeps track of already given markers to given entities to avoid conflicts.\n */\nexport class SequentialChartMarkerProvider extends SequentialValueProvider {\n\n    constructor(private markers: IChartMarker[]) {\n        super(markers);\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SequentialColorProvider.html":{"url":"classes/SequentialColorProvider.html","title":"class - SequentialColorProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SequentialColorProvider\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/palette/sequential-color-provider.ts\n        \n\n            \n                Description\n            \n            \n                This class matches the provided colors to given series.\nIt keeps track of already given colors to given entities to avoid conflicts.\n\n            \n\n            \n                Extends\n            \n            \n                        SequentialValueProvider\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                get\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                reset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(colors: string[])\n                    \n                \n                        \n                            \n                                Defined in src/core/common/palette/sequential-color-provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        colors\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                            \n                                \n                                    Inherited from         SequentialValueProvider\n\n                                \n                            \n                        \n                            \n                                    Defined in         SequentialValueProvider:16\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reset()\n                \n            \n\n\n            \n                \n                    Inherited from         SequentialValueProvider\n\n                \n            \n            \n                \n                        Defined in         SequentialValueProvider:26\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { SequentialValueProvider } from \"./sequential-value-provider\";\n\n/**\n * This class matches the provided colors to given series.\n * It keeps track of already given colors to given entities to avoid conflicts.\n */\nexport class SequentialColorProvider extends SequentialValueProvider {\n\n    constructor(private colors: string[]) {\n        super(colors);\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SequentialValueProvider.html":{"url":"classes/SequentialValueProvider.html","title":"class - SequentialValueProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SequentialValueProvider\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/palette/sequential-value-provider.ts\n        \n\n            \n                Description\n            \n            \n                This class matches the provided instances of type  to given series.\nIt keeps track of already given instances to given entities to avoid conflicts.\n\n            \n\n\n            \n                Implements\n            \n            \n                            IValueProvider\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                get\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                reset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(values: T[])\n                    \n                \n                        \n                            \n                                Defined in src/core/common/palette/sequential-value-provider.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                    T[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/palette/sequential-value-provider.ts:16\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reset()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/palette/sequential-value-provider.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IValueProvider } from \"../types\";\n\n/**\n * This class matches the provided instances of type  to given series.\n * It keeps track of already given instances to given entities to avoid conflicts.\n */\nexport class SequentialValueProvider implements IValueProvider {\n\n    private providedValues: { [key: string]: T };\n    private lastUsedIndex: number;\n\n    constructor(private values: T[]) {\n        this.reset();\n    }\n\n    public get = (entityId: string): T => {\n        let value = this.providedValues[entityId];\n        if (!value) {\n            const index = ++this.lastUsedIndex % this.values.length;\n            value = this.values[index];\n            this.providedValues[entityId] = value;\n        }\n        return value;\n    }\n\n    public reset(): void {\n        this.providedValues = {};\n        this.lastUsedIndex = -1;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SideIndicatorAccessors.html":{"url":"classes/SideIndicatorAccessors.html","title":"class - SideIndicatorAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SideIndicatorAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/side-indicator-renderer.ts\n        \n\n            \n                Description\n            \n            \n                Standard definition for side indicator series and data accessors \n\n            \n\n\n            \n                Implements\n            \n            \n                            ISideIndicatorAccessors\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                data\n                            \n                            \n                                    Public\n                                series\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/renderers/side-indicator-renderer.ts:50\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ISideIndicatorDataAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/side-indicator-renderer.ts:49\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ISideIndicatorSeriesAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/side-indicator-renderer.ts:50\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import defaultsDeep from \"lodash/defaultsDeep\";\nimport { Subject } from \"rxjs\";\n\nimport { STANDARD_RENDER_LAYERS } from \"../constants\";\nimport { Scales } from \"../core/common/scales/types\";\nimport {\n    DataAccessor,\n    IDataAccessors,\n    IDataSeries,\n    ILasagnaLayer,\n    IRendererConfig,\n    IRendererEventPayload,\n    ISeriesAccessors,\n    SeriesAccessor,\n} from \"../core/common/types\";\nimport { GRAYSCALE_FILTER } from \"../core/types\";\n\nimport { IRenderSeries, RenderLayerName } from \"./types\";\nimport { XYRenderer } from \"./xy-renderer\";\n\n/** Interface for side indicator data accessors */\nexport interface ISideIndicatorDataAccessors extends IDataAccessors {\n    /** Accessor indicating whether the side indicator should be active */\n    active: DataAccessor;\n}\n\n/** Interface for side indicator series accessors */\nexport interface ISideIndicatorSeriesAccessors extends ISeriesAccessors {\n    /** Indicates the start value of the side indicator */\n    start: SeriesAccessor;\n    /** Indicates the end value of the side indicator */\n    end: SeriesAccessor;\n    /** Indicates the active color of the side indicator */\n    activeColor: SeriesAccessor;\n    /** Optional accessor indicating the inactive color of the side indicator. A grayscale filter is applied to the active color by default */\n    inactiveColor?: SeriesAccessor;\n}\n\n/** Interface for side indicator accessors */\nexport interface ISideIndicatorAccessors {\n    /** Accessors for the side indicator data */\n    data: ISideIndicatorDataAccessors;\n    /** Accessors for the side indicator series */\n    series: ISideIndicatorSeriesAccessors;\n}\n\n/** Standard definition for side indicator series and data accessors */\nexport class SideIndicatorAccessors implements ISideIndicatorAccessors {\n    public data: ISideIndicatorDataAccessors;\n    public series: ISideIndicatorSeriesAccessors;\n\n    constructor() {\n        this.data = {\n            active: (d: any) => d.active,\n        };\n        this.series = {\n            start: () => null,\n            end: () => null,\n            activeColor: () => \"magenta\",\n        };\n    }\n}\n\n/**\n * Renderer for drawing threshold side indicators\n */\nexport class SideIndicatorRenderer extends XYRenderer {\n\n    /** @deprecated As of Nova v9, use RenderLayerName.unclippedData enum value instead. Removal: NUI-5753 */\n    public static SIDE_INDICATORS_LAYER = \"side-indicators\";\n\n    private DEFAULT_CONFIG: IRendererConfig = {};\n\n    /**\n     * Creates an instance of SideIndicatorRenderer.\n     * @param {IRendererConfig} [config={}] Renderer configuration object\n     */\n    constructor(config: IRendererConfig = {}) {\n        super(config);\n        // setting default values to the properties that were not set by user\n        this.config = defaultsDeep(this.config, this.DEFAULT_CONFIG);\n    }\n\n    /** See {@link Renderer#draw} */\n    public draw(renderSeries: IRenderSeries, rendererSubject: Subject): void {\n        const target = renderSeries.containers[RenderLayerName.unclippedData];\n        const dataSeries = renderSeries.dataSeries;\n        const scales = renderSeries.scales;\n        const accessors = renderSeries.dataSeries.accessors;\n\n        let rect = target.select(\"rect\");\n        const isActive = dataSeries.data.length > 0 ?\n            accessors.data.active(dataSeries.data[0], 0, renderSeries.dataSeries.data, renderSeries.dataSeries) : false;\n        const colorAccessor = !isActive && accessors.series.inactiveColor ? accessors.series.inactiveColor : accessors.series.activeColor;\n        if (rect.empty()) {\n            rect = target.append(\"rect\").attrs({\n                \"fill\": colorAccessor(dataSeries.id, dataSeries),\n            });\n\n            if (!isActive && !accessors.series.inactiveColor) {\n                rect.style(\"filter\", GRAYSCALE_FILTER);\n            }\n        }\n\n        const start = accessors.series.start(dataSeries.id, dataSeries);\n        const end = accessors.series.end(dataSeries.id, dataSeries);\n        const top = end == null ? 0 : scales.y.convert(end);\n        const bottom = start == null ? scales.y.range()[0] : Math.min(scales.y.range()[0], scales.y.convert(start));\n        const height = bottom - top;\n        const width = 2;\n        rect.attrs({\n            \"x\": -width,\n            \"y\": top,\n            \"height\": height , values: { [p: string]: any }, scales: Scales) {\n        return -1;\n    }\n\n    /** See {@link Renderer#getRequiredLayers} */\n    public getRequiredLayers(): ILasagnaLayer[] {\n        return [\n            STANDARD_RENDER_LAYERS[RenderLayerName.unclippedData],\n        ];\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SparkChartAssist.html":{"url":"classes/SparkChartAssist.html","title":"class - SparkChartAssist","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SparkChartAssist\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/chart-assists/spark-chart-assist.ts\n        \n\n            \n                Description\n            \n            \n                Chart assist implementation to be used with spark charts\n\n            \n\n\n            \n                Implements\n            \n            \n                            IChartAssist\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                gridConfig\n                            \n                            \n                                    Public\n                                highlightedDataPoints\n                            \n                            \n                                    Public\n                                isLegendActive\n                            \n                            \n                                    Public\n                                    Readonly\n                                lastGridConfig\n                            \n                            \n                                    Public\n                                markers\n                            \n                            \n                                    Public\n                                palette\n                            \n                            \n                                    Public\n                                    Readonly\n                                showBottomAxis\n                            \n                            \n                                    Public\n                                    Readonly\n                                showTopBorder\n                            \n                            \n                                    Public\n                                sparks\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getHighlightedValue\n                            \n                            \n                                    Public\n                                getVisibleSeriesWithLegend\n                            \n                            \n                                    Public\n                                setRenderState\n                            \n                            \n                                    Public\n                                trackByFn\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateSparks\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(showBottomAxis, showTopBorder, palette: IChartPalette, markers: IValueProvider)\n                    \n                \n                        \n                            \n                                Defined in src/core/chart-assists/spark-chart-assist.ts:36\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        showBottomAxis\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        showTopBorder\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        palette\n                                                  \n                                                        \n                                                                        IChartPalette\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        markers\n                                                  \n                                                        \n                                                                        IValueProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            gridConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         XYGridConfig\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/spark-chart-assist.ts:32\n                            \n                        \n\n                \n                    \n                        Grid config for all sparks except the last (bottom) one \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            highlightedDataPoints\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IDataPointsPayload\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/spark-chart-assist.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            isLegendActive\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/spark-chart-assist.ts:30\n                            \n                        \n\n                \n                    \n                        Used for keeping tabs on the legend's active state \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            lastGridConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         XYGridConfig\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/spark-chart-assist.ts:34\n                            \n                        \n\n                \n                    \n                        Grid config for the last (bottom) spark \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            markers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IValueProvider\n\n                        \n                    \n                    \n                        \n                            Default value : new SequentialChartMarkerProvider(CHART_MARKERS)\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/spark-chart-assist.ts:41\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            palette\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IChartPalette\n\n                        \n                    \n                    \n                        \n                            Default value : new ChartPalette(CHART_PALETTE_CS1)\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/spark-chart-assist.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            showBottomAxis\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/spark-chart-assist.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            showTopBorder\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/spark-chart-assist.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            sparks\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ISpark[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/spark-chart-assist.ts:28\n                            \n                        \n\n                \n                    \n                        Collection of ISpark objects \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getHighlightedValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getHighlightedValue(chartSeries: IChartSeries, scaleKey: string, formatterName?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/spark-chart-assist.ts:84\n                \n            \n\n\n            \n                \n                    See IChartAssist \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    chartSeries\n                                    \n                                                IChartSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scaleKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    formatterName\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getVisibleSeriesWithLegend\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getVisibleSeriesWithLegend()\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/spark-chart-assist.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     IChartAssistSeries[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setRenderState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setRenderState(_seriesId: string, _state: RenderState)\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/spark-chart-assist.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _seriesId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    _state\n                                    \n                                                RenderState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            trackByFn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    trackByFn(_index: number, spark: ISpark)\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/spark-chart-assist.ts:92\n                \n            \n\n\n            \n                \n                    To use the for-cycle trackBy, set the id value on each spark\nand assign this function to the ngFor trackBy property\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    spark\n                                    \n                                            ISpark\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(inputSeriesSet: IChartAssistSeries[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/spark-chart-assist.ts:55\n                \n            \n\n\n            \n                \n                    Use this method to update the set of sparks if they all consist of only one series.\nIf one or more sparks has multiple series use the updateSparks method instead.\nSee IChartAssist\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    inputSeriesSet\n                                    \n                                            IChartAssistSeries[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateSparks\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateSparks(sparks: ISpark[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/spark-chart-assist.ts:65\n                \n            \n\n\n            \n                \n                    Use this method to update the set of sparks if any of them consist of more than one series.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    sparks\n                                    \n                                            ISpark[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The collection of sparks to update\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import cloneDeep from \"lodash/cloneDeep\";\n\nimport { INTERACTION_DATA_POINTS_EVENT, MOUSE_ACTIVE_EVENT } from \"../../constants\";\nimport { XYGridConfig } from \"../../core/grid/config/xy-grid-config\";\nimport { RenderState } from \"../../renderers/types\";\nimport { Chart } from \"../chart\";\nimport { EventBus } from \"../common/event-bus\";\nimport { ChartPalette } from \"../common/palette/chart-palette\";\nimport { CHART_MARKERS, CHART_PALETTE_CS1 } from \"../common/palette/palettes\";\nimport { SequentialChartMarkerProvider } from \"../common/palette/sequential-chart-marker-provider\";\nimport {\n    IAccessors, IChartAssistSeries, IChartEvent, IChartMarker, IChartPalette, IChartSeries, IDataPointsPayload, InteractionType, IValueProvider,\n} from \"../common/types\";\nimport { UtilityService } from \"../common/utility.service\";\nimport { sparkChartGridConfig } from \"../grid/config/spark-chart-grid-config\";\nimport { XYGrid } from \"../grid/xy-grid\";\nimport { InteractionLabelPlugin } from \"../plugins/interaction/interaction-label-plugin\";\nimport { InteractionLinePlugin } from \"../plugins/interaction/interaction-line-plugin\";\n\nimport { ChartAssist } from \"./chart-assist\";\nimport { IChartAssist, ISpark } from \"./types\";\n\n/**\n * Chart assist implementation to be used with spark charts\n */\nexport class SparkChartAssist implements IChartAssist {\n    /** Collection of ISpark objects */\n    public sparks: ISpark[] = [];\n    /** Used for keeping tabs on the legend's active state */\n    public isLegendActive = false;\n    /** Grid config for all sparks except the last (bottom) one */\n    public readonly gridConfig: XYGridConfig;\n    /** Grid config for the last (bottom) spark */\n    public readonly lastGridConfig: XYGridConfig;\n\n    public highlightedDataPoints: IDataPointsPayload = {};\n\n    constructor(public readonly showBottomAxis = true,\n        public readonly showTopBorder = true,\n        public palette: IChartPalette = new ChartPalette(CHART_PALETTE_CS1),\n        public markers: IValueProvider = new SequentialChartMarkerProvider(CHART_MARKERS)) {\n        this.gridConfig = sparkChartGridConfig(new XYGridConfig(), false, showTopBorder);\n        this.gridConfig.interactionPlugins = false;\n\n        this.lastGridConfig = sparkChartGridConfig(new XYGridConfig(), showBottomAxis, showTopBorder);\n        this.lastGridConfig.interactionPlugins = false;\n    }\n\n    /**\n     * Use this method to update the set of sparks if they all consist of only one series.\n     * If one or more sparks has multiple series use the updateSparks method instead.\n     *\n     * See {@link IChartAssist#update}\n     */\n    public update(inputSeriesSet: IChartAssistSeries[]): void {\n        const sparks = inputSeriesSet.map(chartSeries => ({ id: chartSeries.id, chartSeriesSet: [chartSeries] }));\n        this.updateSparks(sparks);\n    }\n\n    /**\n     * Use this method to update the set of sparks if any of them consist of more than one series.\n     *\n     * @param {ISpark[]} sparks The collection of sparks to update\n     */\n    public updateSparks(sparks: ISpark[]): void {\n        const inputSparks = cloneDeep(sparks);\n        this.sparks = inputSparks.map((spark, index): ISpark => {\n            const lastSpark = index === inputSparks.length - 1;\n            const existingSparkIndex = spark.id ? this.sparks.findIndex(existingSpark => existingSpark.id === spark.id) : -1;\n            if (existingSparkIndex !== -1) {\n                spark.chart = this.reconfigureChart(this.sparks[existingSparkIndex].chart as Chart, lastSpark);\n            } else {\n                spark.chart = spark.chart || this.createChart(lastSpark);\n                spark.id = spark.id || UtilityService.uuid();\n            }\n\n            spark.chart.update(spark.chartSeriesSet);\n\n            return spark;\n        });\n    }\n\n    /** See {@link IChartAssist#getHighlightedValue} */\n    public getHighlightedValue(chartSeries: IChartSeries, scaleKey: string, formatterName?: string): string | number {\n        return ChartAssist.getLabel(chartSeries, this.highlightedDataPoints[chartSeries.id], scaleKey, formatterName);\n    }\n\n    /**\n     * To use the for-cycle trackBy, set the id value on each spark\n     * and assign this function to the ngFor trackBy property\n     */\n    public trackByFn(_index: number, spark: ISpark) {\n        return spark.id;\n    }\n\n    public setRenderState(_seriesId: string, _state: RenderState): void {\n        // not used\n    }\n\n    public getVisibleSeriesWithLegend(): IChartAssistSeries[] {\n        return [];\n    }\n\n    protected createChart(lastSpark: boolean) {\n        const grid = new XYGrid(lastSpark ? this.lastGridConfig : this.gridConfig);\n        const chart = new Chart(grid);\n\n        if (this.showTopBorder || this.showBottomAxis) {\n            chart.addPlugin(new InteractionLinePlugin());\n        }\n        if (lastSpark && this.showBottomAxis) {\n            chart.addPlugin(new InteractionLabelPlugin());\n        }\n\n        this.configureEventSubscriptions(chart.getEventBus());\n\n        return chart;\n    }\n\n    private configureEventSubscriptions(eventBus: EventBus): void {\n        eventBus.getStream(INTERACTION_DATA_POINTS_EVENT).subscribe((event) => {\n            if (event.data.interactionType === InteractionType.MouseMove) {\n                const dataPoints = event.data.dataPoints;\n                Object.keys(dataPoints).forEach(seriesId => {\n                    this.highlightedDataPoints[seriesId] = Object.assign({}, dataPoints[seriesId]);\n                });\n            }\n        });\n        eventBus.getStream(MOUSE_ACTIVE_EVENT).subscribe((event) => {\n            this.isLegendActive = event.data;\n        });\n    }\n\n    private reconfigureChart(chart: Chart, lastSpark: boolean): Chart {\n        chart.getGrid().config(lastSpark ? this.lastGridConfig : this.gridConfig);\n        chart.updateDimensions();\n\n        const hasInteractionLabel = chart.hasPlugin(InteractionLabelPlugin);\n        if (lastSpark && !hasInteractionLabel && this.showBottomAxis) {\n            const labelPlugin = new InteractionLabelPlugin();\n            chart.addPlugin(labelPlugin);\n            labelPlugin.initialize();\n        } else if (!lastSpark && hasInteractionLabel) {\n            chart.removePlugin(InteractionLabelPlugin);\n        }\n\n        return chart;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StatusAccessors.html":{"url":"classes/StatusAccessors.html","title":"class - StatusAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StatusAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/bar/accessors/status-accessors.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IStatusAccessors\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                STATUS_CATEGORY\n                            \n                            \n                                    Static\n                                STATUS_DOMAIN\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    data\n                                \n                                \n                                    series\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(barAccessors: IBarAccessors)\n                    \n                \n                        \n                            \n                                Defined in src/renderers/bar/accessors/status-accessors.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        barAccessors\n                                                  \n                                                        \n                                                                        IBarAccessors\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            STATUS_CATEGORY\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"status\"\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/bar/accessors/status-accessors.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            STATUS_DOMAIN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [StatusAccessors.STATUS_CATEGORY]\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/bar/accessors/status-accessors.ts:16\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n\n                \n                    \n                        getdata()\n                    \n                \n                            \n                                \n                                    Defined in src/renderers/bar/accessors/status-accessors.ts:18\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        series\n                    \n                \n\n                \n                    \n                        getseries()\n                    \n                \n                            \n                                \n                                    Defined in src/renderers/bar/accessors/status-accessors.ts:22\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { DataAccessor } from \"../../../core/common/types\";\nimport { IRectangleSeriesAccessors } from \"../../accessors/rectangle-accessors\";\n\nimport { IBarAccessors, IBarDataAccessors } from \"./bar-accessors\";\n\nexport interface IStatusDataAccessors extends IBarDataAccessors {\n    status: DataAccessor;\n}\n\nexport interface IStatusAccessors extends IBarAccessors {\n    data: IStatusDataAccessors;\n}\n\nexport class StatusAccessors implements IStatusAccessors {\n    public static STATUS_CATEGORY = \"status\";\n    public static STATUS_DOMAIN = [StatusAccessors.STATUS_CATEGORY];\n\n    public get data(): IStatusDataAccessors {\n        return this.barAccessors.data as IStatusDataAccessors;\n    }\n\n    public get series(): IRectangleSeriesAccessors {\n        return this.barAccessors.series;\n    }\n\n    constructor(private barAccessors: IBarAccessors) {\n        barAccessors.data.status = (d: any) => d.status;\n    }\n}\n\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SvgMarker.html":{"url":"classes/SvgMarker.html","title":"class - SvgMarker","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SvgMarker\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/palette/markers/svg-marker.ts\n        \n\n            \n                Description\n            \n            \n                This class creates a ChartMarker based on provided portion of svg markup\n\n            \n\n\n            \n                Implements\n            \n            \n                            IChartMarker\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getSvg\n                            \n                            \n                                    Public\n                                setColor\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(svg: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/common/palette/markers/svg-marker.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        svg\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getSvg\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSvg()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/palette/markers/svg-marker.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setColor\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setColor(color: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/palette/markers/svg-marker.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    color\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import isUndefined from \"lodash/isUndefined\";\n\nimport { IChartMarker } from \"../../types\";\n\n/**\n * This class creates a ChartMarker based on provided portion of svg markup\n */\nexport class SvgMarker implements IChartMarker {\n    protected styledSvg: string;\n\n    constructor(protected svg: string) {\n    }\n\n    public getSvg(): string {\n        return this.styledSvg || this.svg;\n    }\n\n    public setColor(color: string): void {\n        this.styledSvg = isUndefined(color) ? color : `${this.svg}`;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TextColorProvider.html":{"url":"classes/TextColorProvider.html","title":"class - TextColorProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TextColorProvider\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/palette/text-color-provider.ts\n        \n\n            \n                Description\n            \n            \n                This color provider calculates foreground color based on contrast ratio of provided colors\n\n            \n\n            \n                Extends\n            \n            \n                        ProcessedColorProvider\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                get\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                reset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sourceProvider: IValueProvider, colorDefinitions: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/core/common/palette/text-color-provider.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sourceProvider\n                                                  \n                                                        \n                                                                        IValueProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        colorDefinitions\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                            \n                                \n                                    Inherited from         ProcessedColorProvider\n\n                                \n                            \n                        \n                            \n                                    Defined in         ProcessedColorProvider:15\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reset()\n                \n            \n\n\n            \n                \n                    Inherited from         ProcessedColorProvider\n\n                \n            \n            \n                \n                        Defined in         ProcessedColorProvider:30\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { rgb, RGBColor } from \"d3-color\";\n\nimport { IValueProvider } from \"../types\";\n\nimport { getColorValueByName } from \"./color.helper\";\nimport { ProcessedColorProvider } from \"./processed-color-provider\";\n\n/** @ignore */\nconst rc = 0.2126;\n/** @ignore */\nconst gc = 0.7152;\n/** @ignore */\nconst bc = 0.0722;\n/** @ignore */\nconst lowc = 1 / 12.92;\n\n/**\n * This color provider calculates foreground color based on contrast ratio of provided colors\n */\nexport class TextColorProvider extends ProcessedColorProvider {\n\n    constructor(sourceProvider: IValueProvider, colorDefinitions: { light: string, dark: string }) {\n        super(sourceProvider, (input: string) => {\n            const color = getColorValueByName(input);\n            const rgbInput = rgb(color);\n\n            const ratioToLight = this.getContrastRatio(rgbInput, rgb(colorDefinitions.light));\n            const ratioToDark = this.getContrastRatio(rgbInput, rgb(colorDefinitions.dark));\n\n            return ratioToDark > ratioToLight ? colorDefinitions.dark : colorDefinitions.light;\n        });\n    }\n\n    /**\n     * Calculate contrast ratio of two given colors (https://www.w3.org/TR/WCAG20/#contrast-ratiodef)\n     *\n     * @param {RGBColor} color1\n     * @param {RGBColor} color2\n     * @returns {number} luminance ratio\n     */\n    private getContrastRatio(color1: RGBColor, color2: RGBColor) {\n        const luminance1 = this.getRelativeLuminance(color1);\n        const luminance2 = this.getRelativeLuminance(color2);\n        let lighter: number;\n        let darker: number;\n        if (luminance1 > luminance2) {\n            lighter = luminance1;\n            darker = luminance2;\n        } else {\n            lighter = luminance2;\n            darker = luminance1;\n        }\n        return (lighter + 0.05) / (darker + 0.05);\n    }\n\n    /**\n     * Calculates relative luminance of given color (https://www.w3.org/TR/WCAG20/relative-luminance.xml)\n     *\n     * @param {RGBColor} rgbColor\n     * @returns {number}\n     */\n    private getRelativeLuminance(rgbColor: RGBColor) {\n        const rsrgb = rgbColor.r / 255;\n        const gsrgb = rgbColor.g / 255;\n        const bsrgb = rgbColor.b / 255;\n\n        const r = rsrgb \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ThresholdsService.html":{"url":"injectables/ThresholdsService.html","title":"injectable - ThresholdsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ThresholdsService\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/thresholds/thresholds-service.ts\n        \n\n            \n                Description\n            \n            \n                This service provides functionality that facilitates the creation of thresholds related visual element on charts.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                SERIES_ID_SUFFIX\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getBackgrounds\n                            \n                            \n                                    Public\n                                getCrossPoint\n                            \n                            \n                                    Public\n                                getCrossPointWithY\n                            \n                            \n                                    Public\n                                getSideIndicators\n                            \n                            \n                                    Public\n                                getThresholdLine\n                            \n                            \n                                    Public\n                                getThresholdLines\n                            \n                            \n                                    Public\n                                getThresholdZones\n                            \n                            \n                                    Public\n                                injectThresholdsData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/thresholds/thresholds-service.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getBackgrounds\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getBackgrounds(sourceSeries: IDataSeries, zones: IDataSeries[], scales: Scales, colorProvider: IValueProvider, thicknessMap: Record, rendererConfig: IRendererConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/thresholds/thresholds-service.ts:76\n                \n            \n\n\n            \n                \n                    This method creates a background series for TimeInterval or continuous (currently only works with time) scale.\nIf the series is continuous it detects intersection of source line data with given threshold zones and generates start / end for status periods.\nOtherwise it will use the start and the end of the band.\nThe default value of the rendererConfig parameter is THRESHOLDS_MAIN_CHART_RENDERER_CONFIG. For a summary chart, usually a smaller status\nchart positioned below a main chart, use THRESHOLDS_SUMMARY_RENDERER_CONFIG.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    sourceSeries\n                                    \n                                            IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The data series from which to derive a background visualization\n\n                                    \n                                \n                                \n                                    zones\n                                    \n                                            IDataSeries[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Zones defined as data series with IAreaAccessors\n\n                                    \n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The scales to be used for the background visualization\n\n                                    \n                                \n                                \n                                    colorProvider\n                                    \n                                                IValueProvider\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        A value provider for the colors to be used for each status\n\n                                    \n                                \n                                \n                                    thicknessMap\n                                    \n                                            Record\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                    \n                                        Map of status to number specifying a custom height per status for the background visualization.\nIf a status is not specified in the map, the default thickness is the full height of the rendering area.\n\n                                    \n                                \n                                \n                                    rendererConfig\n                                    \n                                                IRendererConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        cloneDeep(THRESHOLDS_MAIN_CHART_RENDERER_CONFIG)\n                                    \n\n                                    \n                                        The renderer's configuration\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IChartAssistSeries\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCrossPoint\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCrossPoint(dataFrom: IPosition, dataTo: IPosition, thresholdFrom: IPosition, thresholdTo: IPosition)\n                \n            \n\n\n            \n                \n                    Defined in src/thresholds/thresholds-service.ts:295\n                \n            \n\n\n            \n                \n                    Calculates the point where the data series line will cross a threshold line using the two closest points for each\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dataFrom\n                                    \n                                                IPosition\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Data starting point\n\n                                    \n                                \n                                \n                                    dataTo\n                                    \n                                                IPosition\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Data ending point\n\n                                    \n                                \n                                \n                                    thresholdFrom\n                                    \n                                                IPosition\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Threshold starting point\n\n                                    \n                                \n                                \n                                    thresholdTo\n                                    \n                                                IPosition\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Threshold ending point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IPosition | undefined\n\n                    \n                    \n                        the position of the cross point or null if lines don't cross\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCrossPointWithY\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCrossPointWithY(dataFrom: IPosition, dataTo: IPosition, y: number)\n                \n            \n\n\n            \n                \n                    Defined in src/thresholds/thresholds-service.ts:363\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataFrom\n                                    \n                                                IPosition\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dataTo\n                                    \n                                                IPosition\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getSideIndicators\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSideIndicators(zones: IDataSeries[], scales: Scales, rendererConfig?: IRendererConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/thresholds/thresholds-service.ts:374\n                \n            \n\n\n            \n                \n                    Creates side indicator data series for given threshold zones\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    zones\n                                    \n                                            IDataSeries[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Zones defined as data series with IAreaAccessors\n\n                                    \n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scales to be used for the side indicators\n\n                                    \n                                \n                                \n                                    rendererConfig\n                                    \n                                                IRendererConfig\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Configuration for the renderer. Default is the exported constant 'THRESHOLDS_MAIN_CHART_RENDERER_CONFIG'\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IChartAssistSeries[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getThresholdLine\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getThresholdLine(zone: IDataSeries, valueAccessor: DataAccessor, zoneBoundary)\n                \n            \n\n\n            \n                \n                    Defined in src/thresholds/thresholds-service.ts:261\n                \n            \n\n\n            \n                \n                    Creates a IChartAssistSeries that represents a threshold zone limit defined by given valueAccessor\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    zone\n                                    \n                                            IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        A zone defined as a data series with IAreaAccessors\n\n                                    \n                                \n                                \n                                    valueAccessor\n                                    \n                                                DataAccessor\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Accessor for the threshold limit\n\n                                    \n                                \n                                \n                                    zoneBoundary\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ZoneBoundary.Start\n                                    \n\n                                    \n                                        The zone boundary represented by the line. Default is ZoneBoundary.Start.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IChartAssistSeries\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getThresholdLines\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getThresholdLines(zones: IDataSeries[])\n                \n            \n\n\n            \n                \n                    Defined in src/thresholds/thresholds-service.ts:229\n                \n            \n\n\n            \n                \n                    Creates data series representing threshold lines on the chart. Solves collision between zones, where multiple zones are using the same limit value.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    zones\n                                    \n                                            IDataSeries[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Zones defined as data series with IAreaAccessors\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IChartAssistSeries[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getThresholdZones\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getThresholdZones(sourceSeries: IDataSeries, simpleZones: ISimpleThresholdZone[], colorProvider: IValueProvider)\n                \n            \n\n\n            \n                \n                    Defined in src/thresholds/thresholds-service.ts:205\n                \n            \n\n\n            \n                \n                    Generates threshold zone series from simplified zone definition. Simplified definition provides only two numbers to define the zone interval.\nCreating these series manually is also possible for dynamic threshold limits.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    sourceSeries\n                                    \n                                            IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        source data series from which to derive the zones\n\n                                    \n                                \n                                \n                                    simpleZones\n                                    \n                                                ISimpleThresholdZone[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a collection of zones that are each defined by a start value and/or an end value. (A missing\nstart or end value indicates an infinite zone.)\n\n                                    \n                                \n                                \n                                    colorProvider\n                                    \n                                                IValueProvider\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A value provider for the colors to be used for each status\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IDataSeries[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            injectThresholdsData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    injectThresholdsData(dataSeries: IDataSeries, zones: IDataSeries[])\n                \n            \n\n\n            \n                \n                    Defined in src/thresholds/thresholds-service.ts:40\n                \n            \n\n\n            \n                \n                    Calculates the threshold \"statuses\" - from/to and what zone we're in. It is the first step that is required before the usage of other methods. Having\nthe threshold \"statuses\" assigned to each data point enables us to access the threshold information not only in other methods for threshold\ncalculation, but also in other places, like legend or tooltips.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dataSeries\n                                    \n                                            IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        source data series that will be enhanced with threshold metadata\n\n                                    \n                                \n                                \n                                    zones\n                                    \n                                            IDataSeries[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        zones defined as data series with IAreaAccessors\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            SERIES_ID_SUFFIX\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"__thresholds-background\"\n                        \n                    \n                        \n                            \n                                    Defined in src/thresholds/thresholds-service.ts:27\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { LoggerService } from \"@nova-ui/bits\";\nimport { Numeric } from \"d3-array\";\nimport cloneDeep from \"lodash/cloneDeep\";\nimport sortBy from \"lodash/sortBy\";\nimport unionWith from \"lodash/unionWith\";\nimport values from \"lodash/values\";\n\nimport { isBandScale, Scales } from \"../core/common/scales/types\";\nimport { DataAccessor, IChartAssistSeries, IDataSeries, IPosition, IRendererConfig, IValueProvider, IZoneCrossPoint } from \"../core/common/types\";\nimport { AreaAccessors, IAreaAccessors } from \"../renderers/area/area-accessors\";\nimport { IStatusAccessors } from \"../renderers/bar/accessors/status-accessors\";\nimport { statusAccessors } from \"../renderers/bar/accessors/status-accessors-fn\";\nimport { BarRenderer } from \"../renderers/bar/bar-renderer\";\nimport { THRESHOLDS_MAIN_CHART_RENDERER_CONFIG } from \"../renderers/constants\";\nimport { ILineAccessors, LineAccessors } from \"../renderers/line/line-accessors\";\nimport { LineRenderer } from \"../renderers/line/line-renderer\";\nimport { ISideIndicatorAccessors, SideIndicatorAccessors, SideIndicatorRenderer } from \"../renderers/side-indicator-renderer\";\n\nimport { ISimpleThresholdZone, ZoneBoundary, ZoneCross } from \"./types\";\n\n/**\n * This service provides functionality that facilitates the creation of thresholds related visual element on charts.\n */\n@Injectable()\nexport class ThresholdsService {\n    public static SERIES_ID_SUFFIX = \"__thresholds-background\";\n\n    constructor(private loggerService: LoggerService) {\n    }\n\n    /**\n     * Calculates the threshold \"statuses\" - from/to and what zone we're in. It is the first step that is required before the usage of other methods. Having\n     * the threshold \"statuses\" assigned to each data point enables us to access the threshold information not only in other methods for threshold\n     * calculation, but also in other places, like legend or tooltips.\n     *\n     * @param dataSeries source data series that will be enhanced with threshold metadata\n     * @param zones zones defined as data series with IAreaAccessors\n     */\n    public injectThresholdsData(dataSeries: IDataSeries,\n                                zones: IDataSeries[]) {\n        const zoneIndexes: Record = {};\n        zones.forEach(z => z.entered = false);\n\n        for (let i = 0; i ,\n                          zones: IDataSeries[],\n                          scales: Scales,\n                          colorProvider: IValueProvider,\n                          thicknessMap: Record = {},\n                          rendererConfig: IRendererConfig = cloneDeep(THRESHOLDS_MAIN_CHART_RENDERER_CONFIG)): IChartAssistSeries {\n        if (sourceSeries.data.length > 0 && typeof sourceSeries.data[0].__thresholds === \"undefined\") {\n            this.loggerService.warn(\"Thresholds metadata is not defined on provided data series\", sourceSeries);\n        }\n\n        let data: any[];\n        const accessors = statusAccessors(colorProvider);\n        accessors.data.thickness = (d) => thicknessMap[d.status];\n        if (isBandScale(scales.x)) {\n            data = cloneDeep(sourceSeries.data);\n            accessors.data.start = sourceSeries.accessors.data.x;\n            accessors.data.end = sourceSeries.accessors.data.x;\n            accessors.data.color = (d) => (d.__thresholds && d.__thresholds.status) ?\n                colorProvider.get(d.__thresholds.status) : \"transparent\";\n            accessors.data.thickness = (d) => thicknessMap[d.__thresholds.status];\n        } else {\n            data = this.getBackgroundsDataForContinuousScale(sourceSeries, zones);\n        }\n        return {\n            id: sourceSeries.id + ThresholdsService.SERIES_ID_SUFFIX,\n            data,\n            accessors,\n            scales,\n            renderer: new BarRenderer(rendererConfig),\n            showInLegend: false,\n        };\n    }\n\n    /**\n     * Calculates background data for continuous scale based on intersections between the source data and zone definitions.\n     *\n     * @param sourceSeries source data series from which to derive background data\n     * @param zones zones defined as data series with IAreaAccessors\n     */\n    private getBackgroundsDataForContinuousScale(sourceSeries: IDataSeries, zones: IDataSeries[]) {\n        const backgroundData: ZoneCross[] = [];\n        const breakPoints = this.getBreakPoints(sourceSeries, zones);\n\n        const zoneIndexes: Record = {};\n        for (let i = 0; i , zones: IDataSeries[]): (IZoneCrossPoint | undefined)[] {\n        const sourceAccessors = sourceSeries.accessors.data;\n\n        let breakPoints: (IZoneCrossPoint | undefined)[] = [];\n\n        for (let i = 0; i  this.getCrossPointWithY(xy1, xy2, y)) // calculate cross points for both limits\n                    .filter(c => c); // take only those that actually intersect\n\n                [xy1, xy2].forEach((xy) => {\n                    if (xy.y === zoneStartY || xy.y === zoneEndY) {\n                        xy.isZoneEdge = true;\n                    }\n                });\n\n                // add all crossPoints, dataPoints, but only those with unique \"x\" coordinate\n                breakPoints = unionWith(breakPoints, zoneCrossPoints, [xy1, xy2], (a, b) => a?.x === b?.x && a?.isZoneEdge === b?.isZoneEdge);\n            }\n        }\n\n        return sortBy(breakPoints, \"x\");\n    }\n\n    /**\n     * Generates threshold zone series from simplified zone definition. Simplified definition provides only two numbers to define the zone interval.\n     * Creating these series manually is also possible for dynamic threshold limits.\n     *\n     * @param sourceSeries source data series from which to derive the zones\n     * @param simpleZones a collection of zones that are each defined by a start value and/or an end value. (A missing\n     start or end value indicates an infinite zone.)\n     * @param colorProvider A value provider for the colors to be used for each status\n     */\n    public getThresholdZones(sourceSeries: IDataSeries,\n                             simpleZones: ISimpleThresholdZone[],\n                             colorProvider: IValueProvider): IDataSeries[] {\n        const areaAccessors = new AreaAccessors();\n        areaAccessors.data.start = (d) => d.start;\n        areaAccessors.data.end = (d) => d.end;\n        areaAccessors.series.color = (seriesId, series) => colorProvider.get(series.value);\n\n        return simpleZones.map((z, i) => ({\n            id: sourceSeries.id + \"__\" + z.status + \"-\" + i,\n            value: z.status,\n            data: [\n                { start: z.start, end: z.end },\n            ],\n            scales: sourceSeries.scales,\n            accessors: areaAccessors,\n        }));\n    }\n\n    /**\n     * Creates data series representing threshold lines on the chart. Solves collision between zones, where multiple zones are using the same limit value.\n     *\n     * @param zones Zones defined as data series with IAreaAccessors\n     */\n    public getThresholdLines(zones: IDataSeries[]): IChartAssistSeries[] {\n        if (-1 === zones.findIndex(z => z.entered)) {\n            return [];\n        }\n\n        // TODO: works only for static thresholds\n        const limits: Record, accessor: DataAccessor, zoneBoundary: ZoneBoundary }> = {};\n\n        function addLimitEntry(accessor: DataAccessor, zone: IDataSeries, zoneBoundary: ZoneBoundary) {\n            const value = accessor(zone.data[0], 0, zone.data, zone);\n            if (typeof value !== \"undefined\" && typeof limits[value] === \"undefined\") {\n                limits[value] = { series: zone, accessor, zoneBoundary };\n            }\n        }\n\n        for (const z of zones) {\n            if (z.accessors.data.start && z.accessors.data.end) {\n                addLimitEntry(z.accessors.data.start, z, ZoneBoundary.Start);\n                addLimitEntry(z.accessors.data.end, z, ZoneBoundary.End);\n            }\n        }\n\n        return values(limits).map((limit) => this.getThresholdLine(limit.series, limit.accessor, limit.zoneBoundary));\n    }\n\n    /**\n     * Creates a IChartAssistSeries that represents a threshold zone limit defined by given valueAccessor\n     *\n     * @param zone A zone defined as a data series with IAreaAccessors\n     * @param valueAccessor Accessor for the threshold limit\n     * @param zoneBoundary The zone boundary represented by the line. Default is ZoneBoundary.Start.\n     */\n    public getThresholdLine(zone: IDataSeries,\n                            valueAccessor: DataAccessor,\n                            zoneBoundary = ZoneBoundary.Start): IChartAssistSeries {\n        const accessors = new LineAccessors();\n        accessors.data.y = valueAccessor;\n        accessors.series.color = zone.accessors.series.color;\n        const renderer = new LineRenderer({\n            interactive: false,\n            strokeWidth: 1,\n            strokeStyle: LineRenderer.getStrokeStyleDashed(1),\n            stateStyles: cloneDeep(THRESHOLDS_MAIN_CHART_RENDERER_CONFIG.stateStyles),\n            ignoreForDomainCalculation: true,\n        });\n\n        return {\n            id: `${zone.id}__${zoneBoundary}__threshold-line`,\n            data: zone.data,\n            value: zone.value,\n            accessors,\n            renderer,\n            scales: zone.scales,\n            showInLegend: false,\n        };\n    }\n\n    /**\n     * Calculates the point where the data series line will cross a threshold line using the two closest points for each\n     *\n     * @param {IPosition} dataFrom Data starting point\n     * @param {IPosition} dataTo Data ending point\n     * @param {IPosition} thresholdFrom Threshold starting point\n     * @param {IPosition} thresholdTo Threshold ending point\n     * @returns {IPosition} the position of the cross point or `null` if lines don't cross\n     */\n    public getCrossPoint(dataFrom: IPosition, dataTo: IPosition,\n                         thresholdFrom: IPosition, thresholdTo: IPosition): IPosition | undefined {\n        /* Inspired by https://stackoverflow.com/a/1968345 */\n        const dataShift: IPosition = {\n            x: dataTo.x - dataFrom.x,\n            y: dataTo.y - dataFrom.y,\n        };\n        const thresholdShift: IPosition = {\n            x: thresholdTo.x - thresholdFrom.x,\n            y: thresholdTo.y - thresholdFrom.y,\n        };\n        const s = (-dataShift.y * (dataFrom.x - thresholdFrom.x) + dataShift.x * (dataFrom.y - thresholdFrom.y))\n            / (-thresholdShift.x * dataShift.y + dataShift.x * thresholdShift.y);\n        const t = (thresholdShift.x * (dataFrom.y - thresholdFrom.y) - thresholdShift.y * (dataFrom.x - thresholdFrom.x))\n            / (-thresholdShift.x * dataShift.y + dataShift.x * thresholdShift.y);\n\n        if (!(s >= 0 && s = 0 && t [], zoneIndexes: Record, x: Numeric, y: Numeric) {\n        for (const zone of zones) {\n            if (!zoneIndexes[zone.id]) {\n                zoneIndexes[zone.id] = 0;\n            }\n\n            const zoneIndex = this.moveZoneIndex(zoneIndexes[zone.id], zone, x);\n            zoneIndexes[zone.id] = zoneIndex;\n\n            const zoneDataPoint = zone.data[zoneIndex];\n\n            const zDataAccessors = zone.accessors.data;\n            const start = zDataAccessors.start?.(zoneDataPoint, zoneIndex, zone.data, zone);\n            const end = zDataAccessors.end?.(zoneDataPoint, zoneIndex, zone.data, zone);\n\n            // TODO: this is not going to work for dynamic thresholds, so still have some work to do here\n            if ((typeof start === \"undefined\" || y >= start) &&\n                (typeof end === \"undefined\" || y , x: Numeric) {\n        while (zoneIndex [],\n                             scales: Scales,\n                             rendererConfig?: IRendererConfig): IChartAssistSeries[] {\n        const sideIndicators: IChartAssistSeries[] = [];\n        const renderer = new SideIndicatorRenderer(rendererConfig || cloneDeep(THRESHOLDS_MAIN_CHART_RENDERER_CONFIG));\n        const indicatorsActive = -1 !== zones.findIndex(z => z.entered);\n        for (const z of zones) {\n            const sideIndicatorAccessors = new SideIndicatorAccessors();\n            sideIndicatorAccessors.series = {\n                start: () => z.accessors.data.start?.(z.data[0], 0, z.data, z),\n                end: () => z.accessors.data.end?.(z.data[0], 0, z.data, z),\n                activeColor: () => z.accessors.series.color?.(z.id, z),\n            };\n\n            const sideIndicator: IChartAssistSeries = {\n                id: z.id + \"__side-indicator\",\n                data: [{ active: indicatorsActive }],\n                accessors: sideIndicatorAccessors,\n                scales,\n                renderer,\n                showInLegend: false,\n            };\n\n            sideIndicators.push(sideIndicator);\n        }\n\n        return sideIndicators;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TimeScale.html":{"url":"classes/TimeScale.html","title":"class - TimeScale","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TimeScale\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/scales/time-scale.ts\n        \n\n            \n                Description\n            \n            \n                Nova wrapper around D3's scaleTime\n\n            \n\n            \n                Extends\n            \n            \n                        Scale\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                domainCalculator\n                            \n                            \n                                    Public\n                                formatters\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                isDomainFixed\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                convert\n                            \n                            \n                                    Public\n                                invert\n                            \n                            \n                                    Public\n                                isContinuous\n                            \n                            \n                                    Public\n                                isDomainValid\n                            \n                            \n                                    Public\n                                    Abstract\n                                convert\n                            \n                            \n                                    Public\n                                domain\n                            \n                            \n                                    Public\n                                domain\n                            \n                            \n                                    Public\n                                domain\n                            \n                            \n                                    Public\n                                fixDomain\n                            \n                            \n                                    Public\n                                    Abstract\n                                invert\n                            \n                            \n                                    Public\n                                    Abstract\n                                isContinuous\n                            \n                            \n                                    Public\n                                isDomainValid\n                            \n                            \n                                    Public\n                                range\n                            \n                            \n                                    Public\n                                range\n                            \n                            \n                                    Public\n                                range\n                            \n                            \n                                    Public\n                                reverse\n                            \n                            \n                                    Public\n                                reversed\n                            \n                            \n                                    Public\n                                reversed\n                            \n                            \n                                    Public\n                                reversed\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/common/scales/time-scale.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            domainCalculator\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         DomainCalculator\n\n                        \n                    \n                    \n                        \n                            Default value : getAutomaticDomain\n                        \n                    \n                            \n                                \n                                    Inherited from         Scale\n\n                                \n                            \n                        \n                            \n                                    Defined in         Scale:11\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            formatters\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IFormatters\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         Scale\n\n                                \n                            \n                        \n                            \n                                    Defined in         Scale:12\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Scale\n\n                                \n                            \n                        \n                            \n                                    Defined in         Scale:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            isDomainFixed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Scale\n\n                                \n                            \n                        \n                            \n                                    Defined in         Scale:13\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            convert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    convert(value: Date)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/time-scale.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                Date\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            invert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    invert(coordinate: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/time-scale.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    coordinate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Date | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isContinuous\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isContinuous()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/time-scale.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isDomainValid\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isDomainValid()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/time-scale.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            convert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    convert(value: T)\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:31\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    domain()\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:55\n\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                    \n                        Returns :     T[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    domain(domain: T[])\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:56\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    domain(domain?: T[])\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:57\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            fixDomain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fixDomain(domain: T[])\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:67\n\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            invert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    invert(coordinate: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:33\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    coordinate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            isContinuous\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isContinuous()\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:35\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isDomainValid\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isDomainValid()\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:74\n\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            range\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    range()\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:43\n\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            range\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    range(range: [number, number])\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:44\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                            [number, number]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            range\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    range(range?: [number, number])\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:45\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                            [number, number]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reverse\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reverse()\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:78\n\n                \n            \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reversed()\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:83\n\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reversed(reversed: boolean)\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:84\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reversed\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reversed(reversed?: boolean)\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:85\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reversed\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | \n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { AxisScale } from \"d3-axis\";\nimport { scaleTime } from \"d3-scale\";\n\nimport { datetimeFormatter } from \"./formatters/datetime-formatter\";\nimport { Scale } from \"./scale\";\n\n/**\n * Nova wrapper around [D3's scaleTime](https://d3indepth.com/scales/#scaletime)\n */\nexport class TimeScale extends Scale {\n\n    constructor(id?: string) {\n        super(id);\n\n        this.formatters.tick = datetimeFormatter;\n    }\n\n    protected createD3Scale(): AxisScale {\n        return scaleTime();\n    }\n\n    public convert(value: Date): number {\n        return this._d3Scale(value);\n    }\n\n    public invert(coordinate: number): Date | undefined {\n        const date = this._d3Scale.invert(coordinate);\n        const result: Date | undefined = isNaN(date.getTime()) ? undefined : date;\n        return result;\n    }\n\n    public isContinuous(): boolean {\n        return true;\n    }\n\n    public isDomainValid(): boolean {\n        return -1 === this.domain().findIndex((value) => isNaN(value.getTime()));\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UtilityService.html":{"url":"classes/UtilityService.html","title":"class - UtilityService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UtilityService\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/utility.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                clampToRange\n                            \n                            \n                                    Static\n                                cssEscape\n                            \n                            \n                                    Static\n                                findNearestIndex\n                            \n                            \n                                    Static\n                                getClosestIndex\n                            \n                            \n                                    Static\n                                getScaleValues\n                            \n                            \n                                    Static\n                                getXYValues\n                            \n                            \n                                    Static\n                                uuid\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            clampToRange\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clampToRange(value: number, range: [number, number])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/utility.service.ts:63\n                \n            \n\n\n            \n                \n                    Clamps given value to range\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    range\n                                    \n                                            [number, number]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            cssEscape\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    cssEscape(value: any)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/utility.service.ts:92\n                \n            \n\n\n            \n                \n                    CSS.escape() replacement\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            findNearestIndex\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findNearestIndex(haystack: T[], needle: any, selector: (d: T,index: number) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/utility.service.ts:179\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    This method performs a binary search to find an index in the haystack that is the closest representation of given needle.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    haystack\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                    \n                                \n                                \n                                    needle\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                    \n                                \n                                \n                                    selector\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        identity\n                                    \n\n                                    \n                                        this function is used to process the haystack elements\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getClosestIndex\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getClosestIndex(haystack: T[], accessor: (d: T,i: number) => void, needle: any)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/utility.service.ts:24\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    haystack\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    accessor\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    needle\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     number | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getScaleValues\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getScaleValues(scales: IScale[], coordinate: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/utility.service.ts:224\n                \n            \n\n\n            \n                \n                    Gets the scale value based on the specified scales and raw coordinate\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scales\n                                    \n                                                IScale[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    coordinate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Record\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getXYValues\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getXYValues(xScales: IScale[], yScales: IScale[], xCoordinate: number, yCoordinate: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/utility.service.ts:204\n                \n            \n\n\n            \n                \n                    Gets the 'x' and 'y' scale values based on the specified scales and raw x-y coordinates\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    xScales\n                                    \n                                                IScale[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    yScales\n                                    \n                                                IScale[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    xCoordinate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    yCoordinate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            uuid\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    uuid()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/utility.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import identity from \"lodash/identity\";\nimport isEmpty from \"lodash/isEmpty\";\nimport isUndefined from \"lodash/isUndefined\";\n\nimport { IInteractionValues } from \"../plugins/types\";\n\nimport { invert } from \"./scales/helpers/invert\";\nimport { IScale } from \"./scales/types\";\n\nexport class UtilityService {\n\n    private static getValueAccessor(accessor: (d: any, i: number) => any, dataPoint: any) {\n        const value = accessor(dataPoint, 0);\n        if (typeof value === \"number\" || typeof value === \"string\") {\n            return accessor;\n        }\n        if (value.valueOf && typeof value.valueOf() === \"number\") {\n            return (d: any, i: number) => accessor(d, i).valueOf();\n        }\n\n        throw new Error(\"Value in the data series does not return numeric valueOf().\");\n    }\n\n    public static getClosestIndex(haystack: T[], accessor: (d: T, i: number) => any, needle: any): number | undefined {\n        if (haystack.length === 1) {\n            return 0;\n        } else if (haystack.length === 0) {\n            return;\n        }\n\n        const valueAccessor = UtilityService.getValueAccessor(accessor, haystack[0]);\n        if (typeof needle === \"string\") {\n            return haystack.findIndex(straw => valueAccessor(straw, 0) === needle);\n        }\n\n        let closestDataIndex = this.findNearestIndex(haystack, needle, accessor);\n\n        // Compensate for bisect\n        closestDataIndex = (closestDataIndex > 0) ? closestDataIndex - 1 : closestDataIndex;\n        // Ensure inbounds reference if right end of data\n        closestDataIndex = (closestDataIndex >= haystack.length - 1 && haystack.length !== 1)\n            ? haystack.length - 2\n            : closestDataIndex;\n        const indexIncrement = UtilityService.getCloser(\n            valueAccessor(haystack[closestDataIndex], closestDataIndex),\n            valueAccessor(haystack[closestDataIndex + 1], closestDataIndex + 1),\n            needle);\n\n        return closestDataIndex + indexIncrement;\n    }\n\n    private static getCloser(a: number, b: number, test: number): number {\n        return (Math.abs(test - a)  range[1]) {\n            return range[1];\n        }\n\n        return value;\n    }\n\n    public static uuid() {\n        let dt = new Date().getTime();\n        const uuid = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\n            // eslint-disable-next-line\n            const r = (dt + Math.random() * 16) % 16 | 0;\n            dt = Math.floor(dt / 16);\n            // eslint-disable-next-line\n            return (c === \"x\" ? r : (r & 0x3 | 0x8)).toString(16);\n        });\n        return uuid;\n    }\n\n    /**\n     *  CSS.escape() replacement\n     * @param value\n     * @returns {string}\n     */\n    public static cssEscape(value: any): string {\n        // TODO: remove when Edge supports CSS.escape\n        // Courtesy of Mathias Bynens: https://github.com/mathiasbynens/CSS.escape.git\n        if (arguments.length === 0) {\n            throw new TypeError(\"`cssEscape` requires an argument.\");\n        }\n        const sstring = String(value);\n        const length = sstring.length;\n        let index = -1;\n        let codeUnit;\n        let result = \"\";\n        const firstCodeUnit = sstring.charCodeAt(0);\n        while (++index = 0x0001 && codeUnit = 0x0030 && codeUnit = 0x0030 && codeUnit = 0x0080 ||\n                codeUnit === 0x002D ||\n                codeUnit === 0x005F ||\n                codeUnit >= 0x0030 && codeUnit = 0x0041 && codeUnit = 0x0061 && codeUnit (haystack: T[], needle: any, selector: (d: T, index: number) => any = identity) {\n        let low = 0, high = haystack == null ? low : haystack.length;\n\n        while (low >> 1, computed = selector(haystack[mid], mid);\n\n            if (computed !== null && (computed [], yScales: IScale[], xCoordinate: number, yCoordinate: number) {\n        const xValue = UtilityService.getScaleValues(xScales, xCoordinate);\n        const yValue = UtilityService.getScaleValues(yScales, yCoordinate);\n\n        const values: IInteractionValues = {};\n        if (!isEmpty(xValue)) {\n            values.x = xValue;\n        }\n        if (!isEmpty(yValue)) {\n            values.y = yValue;\n        }\n        return values;\n    }\n\n    /**\n     * Gets the scale value based on the specified scales and raw coordinate\n     *\n     * @param scales\n     * @param coordinate\n     */\n    public static getScaleValues(scales: IScale[], coordinate: number): Record {\n        function callbackFn(result: Record, next: IScale) {\n            const inverted = invert(next, coordinate);\n            if (isUndefined(inverted)) {\n                return result;\n            }\n\n            result[next.id] = inverted;\n            return result;\n        }\n        return scales.reduce(callbackFn, {});\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VerticalBarAccessors.html":{"url":"classes/VerticalBarAccessors.html","title":"class - VerticalBarAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VerticalBarAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/bar/accessors/vertical-bar-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        BarAccessors\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                series\n                            \n                            \n                                data\n                            \n                            \n                                series\n                            \n                            \n                                data\n                            \n                            \n                                series\n                            \n                            \n                                data\n                            \n                            \n                                series\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(colorProvider?: IValueProvider, markerProvider?: IValueProvider)\n                    \n                \n                        \n                            \n                                Defined in src/renderers/bar/accessors/vertical-bar-accessors.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        colorProvider\n                                                  \n                                                        \n                                                                        IValueProvider\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        markerProvider\n                                                  \n                                                        \n                                                                        IValueProvider\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IBarDataAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/bar/accessors/vertical-bar-accessors.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleSeriesAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/bar/accessors/vertical-bar-accessors.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IBarDataAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BarAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         BarAccessors:22\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleSeriesAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BarAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         BarAccessors:23\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleDataAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BarAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         BarAccessors:34\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleSeriesAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BarAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         BarAccessors:35\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleDataAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         RectangleAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         RectangleAccessors:34\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleSeriesAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         RectangleAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         RectangleAccessors:35\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IChartMarker, IValueProvider } from \"../../../core/common/types\";\nimport { IRectangleSeriesAccessors } from \"../../accessors/rectangle-accessors\";\n\nimport { BarAccessors, IBarDataAccessors } from \"./bar-accessors\";\n\nexport class VerticalBarAccessors extends BarAccessors {\n    data: IBarDataAccessors;\n    series: IRectangleSeriesAccessors;\n\n    constructor(colorProvider?: IValueProvider, markerProvider?: IValueProvider) {\n        super(colorProvider, markerProvider);\n\n        this.data = {\n            ...this.data,\n            startX: (d, i, s, ds) => this.data.category(d, i, s, ds),\n            endX: (d, i, s, ds) => this.data.category(d, i, s, ds),\n            thicknessX: (d, i, s, ds) => this.data.thickness ? this.data.thickness(d, i, s, ds) : undefined,\n            startY: (d, i, s, ds) => this.data.start(d, i, s, ds),\n            endY: (d, i, s, ds) => this.data.end(d, i, s, ds),\n        };\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/XYAccessors.html":{"url":"classes/XYAccessors.html","title":"class - XYAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  XYAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/accessors/xy-accessors.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IAccessors\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                data\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IXYDataAccessors\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        x: (d: any) => d.x,\n        y: (d: any) => d.y,\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/accessors/xy-accessors.ts:14\n                            \n                        \n\n                \n                    \n                        The default data accessors for using with renderers deriving from XYRenderer \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { DataAccessor, IAccessors } from \"../../core/common/types\";\n\nexport interface IXYDataAccessors {\n    /** Accessor for value plotted on the x coordinate */\n    x: DataAccessor;\n    /** Accessor for value plotted on the y coordinate */\n    y: DataAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: DataAccessor | undefined;\n}\n\nexport abstract class XYAccessors implements IAccessors {\n    /** The default data accessors for using with renderers deriving from XYRenderer */\n    public data: IXYDataAccessors = {\n        x: (d: any) => d.x,\n        y: (d: any) => d.y,\n    };\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/XYGridConfig.html":{"url":"classes/XYGridConfig.html","title":"class - XYGridConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  XYGridConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/config/xy-grid-config.ts\n        \n\n\n            \n                Extends\n            \n            \n                        GridConfig\n            \n\n            \n                Implements\n            \n            \n                            IXYGridConfig\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                axis\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_MARGIN\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_PADDING\n                            \n                            \n                                    Public\n                                interactionPlugins\n                            \n                            \n                                    Public\n                                borders\n                            \n                            \n                                    Public\n                                cursor\n                            \n                            \n                                    Public\n                                dimension\n                            \n                            \n                                    Public\n                                disableRenderAreaHeightCorrection\n                            \n                            \n                                    Public\n                                disableRenderAreaWidthCorrection\n                            \n                            \n                                    Public\n                                interactive\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/core/grid/config/xy-grid-config.ts:32\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            axis\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: new AxisConfig(),\n        right: new AxisConfig(),\n        bottom: new AxisConfig(),\n        left: new AxisConfig(),\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/xy-grid-config.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_MARGIN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: 0,\n        right: 5,\n        bottom: 20,\n        left: 30,\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/xy-grid-config.ts:9\n                            \n                        \n\n                \n                    \n                        The default margin \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_PADDING\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        left: 0,\n        right: 0,\n        top: 5,\n        bottom: 5,\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/xy-grid-config.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interactionPlugins\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/xy-grid-config.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            borders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        // TODO: Review this\n        // @ts-ignore\n        top: undefined,\n        // @ts-ignore\n        bottom: undefined,\n        // @ts-ignore\n        left: undefined,\n        // @ts-ignore\n        right: undefined,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:16\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            cursor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"crosshair\"\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:28\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dimension\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IDimensionConfig\n\n                        \n                    \n                    \n                        \n                            Default value : new DimensionConfig()\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:14\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            disableRenderAreaHeightCorrection\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:30\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            disableRenderAreaWidthCorrection\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:32\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interactive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:11\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {IAllAround, IAxisConfig, IXYGridConfig} from \"../types\";\n\nimport { AxisConfig } from \"./axis-config\";\nimport { BorderConfig } from \"./border-config\";\nimport { GridConfig } from \"./grid-config\";\n\nexport class XYGridConfig extends GridConfig implements IXYGridConfig {\n    /** The default margin */\n    public static readonly DEFAULT_MARGIN: IAllAround = {\n        top: 0,\n        right: 5,\n        bottom: 20,\n        left: 30,\n    };\n\n    public static readonly DEFAULT_PADDING: IAllAround = {\n        left: 0,\n        right: 0,\n        top: 5,\n        bottom: 5,\n    };\n\n    public axis: IAllAround = {\n        top: new AxisConfig(),\n        right: new AxisConfig(),\n        bottom: new AxisConfig(),\n        left: new AxisConfig(),\n    };\n\n    // We should avoid this kind of option in future versions of XYGrid and XYGridConfig\n    // because ideally all plugins should be added manually (NUI-3304).\n    public interactionPlugins = true;\n\n    constructor() {\n        super();\n\n        this.dimension.padding = Object.assign({}, XYGridConfig.DEFAULT_PADDING);\n        this.dimension.margin = Object.assign({}, XYGridConfig.DEFAULT_MARGIN);\n\n        this.borders.bottom = new BorderConfig(\"nui-chart-border nui-chart-border--thick\");\n        this.borders.left = new BorderConfig(\"nui-chart-border nui-chart-border--thick\");\n        this.borders.left.visible = false; // TODO: figure out if this is the valid default\n\n        this.axis.left.gridTicks = true;\n        this.axis.left.tickSize = 0;\n        this.axis.left.padding = 10;\n\n        this.axis.right.fit = true;\n        this.axis.right.tickSize = 0;\n        this.axis.right.padding = 10;\n\n        this.axis.bottom.tickLabel.horizontalPadding = 5;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/XYRenderer.html":{"url":"classes/XYRenderer.html","title":"class - XYRenderer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  XYRenderer\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/xy-renderer.ts\n        \n\n\n            \n                Extends\n            \n            \n                        Renderer\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                config\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_CONFIG\n                            \n                            \n                                    Public\n                                getContainerStateStyles\n                            \n                            \n                                    Public\n                                interaction\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getDataPointPosition\n                            \n                            \n                                    Public\n                                    Abstract\n                                draw\n                            \n                            \n                                    Public\n                                filterDataByDomain\n                            \n                            \n                                    Public\n                                getDataPointIndex\n                            \n                            \n                                    Public\n                                    Abstract\n                                getDataPointPosition\n                            \n                            \n                                    Public\n                                getDomain\n                            \n                            \n                                    Public\n                                getDomainOfFilteredData\n                            \n                            \n                                    Public\n                                getRequiredLayers\n                            \n                            \n                                    Public\n                                highlightDataPoint\n                            \n                            \n                                    Public\n                                setDataPointState\n                            \n                            \n                                    Public\n                                setSeriesState\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRendererConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:39\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_CONFIG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRendererConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        stateStyles: {\n            [RenderState.default]: {\n                opacity: 1,\n            },\n            [RenderState.hidden]: {\n                opacity: 0,\n            },\n            [RenderState.deemphasized]: {\n                opacity: 0.1,\n            },\n            [RenderState.emphasized]: {\n                opacity: 1,\n            },\n        },\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:22\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getContainerStateStyles\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:94\n\n                            \n                        \n\n                \n                    \n                        Get the style attributes for the specified state that we need to apply to a series container\n\n                    \n                \n\n                    \n                        \n                          \n                                  Parameters :\n                                  \n                                      \n                                          \n                                                Name\n                                                    Description\n                                          \n                                      \n                                      \n                                                \n                                                        state\n                                                        \n                                                                the state for which to retrieve container styles\n\n                                                        \n                                                \n                                      \n                                  \n                          \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interaction\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Record\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:44\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDataPointPosition\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointPosition(dataSeries: IDataSeries, index: number, scales: Scales)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/xy-renderer.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IPosition | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            draw\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    draw(renderSeries: IRenderSeries, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:52\n\n                \n            \n\n\n            \n                \n                    Draw the visual representation of the provided data series\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The series to render\n\n                                    \n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A subject to optionally invoke for emitting events regarding a data point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            filterDataByDomain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    filterDataByDomain(data: any[], dataSeries: IDataSeries, scaleName: string, domain: any[])\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:169\n\n                \n            \n\n\n            \n                \n                    Filters given dataset by domain of provided scale\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scaleName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    domain\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDataPointIndex\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointIndex(series: IDataSeries, values: literal type, scales: Scales)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:73\n\n                \n            \n\n\n            \n                \n                    Based on provided values, return the nearest data point that the given coordinates represent. This is used for mouse hover behavior\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    series\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        series from which to determine the index corresponding to the specified values\n\n                                    \n                                \n                                \n                                    values\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the values from which a data point index can be determined\n\n                                    \n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the scales to be used in the index calculation\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        negative value means that index is not found\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            getDataPointPosition\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointPosition(dataSeries: IDataSeries, index: number, scales: Scales)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:62\n\n                \n            \n\n\n            \n                \n                    Return position of a specified datapoint\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IPosition | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDomain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDomain(data: any[], dataSeries: IDataSeries, scaleName: string, scale: IScale)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:152\n\n                \n            \n\n\n            \n                \n                    Calculate the domain using the data of a series\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        source data, can be filtered\n\n                                    \n                                \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        related data series\n\n                                    \n                                \n                                \n                                    scaleName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the scale for which domain calculation is needed\n\n                                    \n                                \n                                \n                                    scale\n                                    \n                                                IScale\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        min and max values as an array\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDomainOfFilteredData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDomainOfFilteredData(dataSeries: IDataSeries, filterScales: Record>, scaleKey: string, scale: IScale)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:128\n\n                \n            \n\n\n            \n                \n                    Calculate domain for data filtered by given filterScales\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filterScales\n                                    \n                                                Record>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scaleKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scale\n                                    \n                                                IScale\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        array of datapoints from dataSeries filtered by domains of given filterScales\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getRequiredLayers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRequiredLayers()\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:189\n\n                \n            \n\n\n            \n                \n                    Get the definitions of lasagna layers required for visualizing data\n\n\n                    \n                    \n                    \n                        Returns :     ILasagnaLayer[]\n\n                    \n                    \n                        lasagna layer definitions\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            highlightDataPoint\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    highlightDataPoint(renderSeries: IRenderSeries, dataPointIndex: number, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:84\n\n                \n            \n\n\n            \n                \n                    Highlight the data point corresponding to the specified data point index\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The series on which to render the data point highlight\n\n                                    \n                                \n                                \n                                    dataPointIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        index of the highlighted point within the data series (pass -1 to remove the highlight marker)\n\n                                    \n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A subject to optionally invoke for emitting events regarding a data point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setDataPointState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setDataPointState(target: D3Selection, state: RenderState)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:116\n\n                \n            \n\n\n            \n                \n                    Set the RenderState of the target data point\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                                D3Selection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the target data point\n\n                                    \n                                \n                                \n                                    state\n                                    \n                                                RenderState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new state for the target data point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setSeriesState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setSeriesState(renderContainers: IRenderContainers, state: RenderState)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:107\n\n                \n            \n\n\n            \n                \n                    Set the RenderState of the target data series\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderContainers\n                                    \n                                                IRenderContainers\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the render containers of the series\n\n                                    \n                                \n                                \n                                    state\n                                    \n                                                RenderState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new state for the target series\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Renderer } from \"../core/common/renderer\";\nimport { Scales } from \"../core/common/scales/types\";\nimport { IAccessors, IDataSeries, IPosition } from \"../core/common/types\";\n\nexport abstract class XYRenderer extends Renderer {\n\n    public getDataPointPosition(dataSeries: IDataSeries, index: number, scales: Scales): IPosition | undefined {\n        if (index = dataSeries.data.length) {\n            return undefined;\n        }\n        const point = dataSeries.data[index];\n\n        if (!dataSeries.accessors.data?.x || !dataSeries.accessors.data?.y) {\n            throw new Error(\"Can't get dataPointPosition\");\n        }\n        return {\n            x: scales.x.convert(dataSeries.accessors.data.x(point, index, dataSeries.data, dataSeries)),\n            y: scales.y.convert(dataSeries.accessors.data.y(point, index, dataSeries.data, dataSeries)),\n        };\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ZoneCross.html":{"url":"interfaces/ZoneCross.html","title":"interface - ZoneCross","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ZoneCross\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/thresholds/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        end\n                                \n                                \n                                            Optional\n                                        start\n                                \n                                \n                                        status\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        end\n                                    \n                                \n                                \n                                    \n                                        end:     Numeric\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Numeric\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        start\n                                    \n                                \n                                \n                                    \n                                        start:     Numeric\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Numeric\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                    \n                                \n                                \n                                    \n                                        status:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Numeric } from \"d3-array\";\n\n/**\n * Used for simplified threshold zone definition. It is expected the start to be &lt; end.\n */\nexport interface ISimpleThresholdZone {\n    status: string;\n    start?: number;\n    end?: number;\n}\n\nexport interface ZoneCross {\n    status: string;\n    start?: Numeric;\n    end?: Numeric;\n}\n\n/**\n * Used for specifying the start or end boundary of a zone\n */\nexport enum ZoneBoundary {\n    Start = \"start\",\n    End = \"end\",\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ZoomPlugin.html":{"url":"classes/ZoomPlugin.html","title":"class - ZoomPlugin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ZoomPlugin\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/zoom-plugin.ts\n        \n\n\n            \n                Extends\n            \n            \n                        ChartPlugin\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                config\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_CONFIG\n                            \n                            \n                                    Static\n                                LAYER_NAME\n                            \n                            \n                                    Public\n                                chart\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: IZoomPluginConfiguration)\n                    \n                \n                        \n                            \n                                Defined in src/core/plugins/zoom-plugin.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        IZoomPluginConfiguration\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IZoomPluginConfiguration\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/zoom-plugin.ts:41\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_CONFIG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IZoomPluginConfiguration\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        enableExternalEvents: false,\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/zoom-plugin.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            LAYER_NAME\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"zoom-brush\"\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/zoom-plugin.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IChart\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPlugin:7\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/zoom-plugin.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/zoom-plugin.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/zoom-plugin.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:15\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:9\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { BrushBehavior, BrushSelection, brushX } from \"d3-brush\";\nimport { event } from \"d3-selection\";\nimport defaultsDeep from \"lodash/defaultsDeep\";\nimport isEmpty from \"lodash/isEmpty\";\nimport isUndefined from \"lodash/isUndefined\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\nimport { INTERACTION_COORDINATES_EVENT, INTERACTION_VALUES_ACTIVE_EVENT, SET_DOMAIN_EVENT, STANDARD_RENDER_LAYERS } from \"../../constants\";\nimport { RenderLayerName } from \"../../renderers/types\";\nimport { ChartPlugin } from \"../common/chart-plugin\";\nimport { IScale } from \"../common/scales/types\";\nimport { D3Selection, IChartEvent, InteractionType, ISetDomainEventPayload } from \"../common/types\";\nimport { Grid } from \"../grid/grid\";\nimport { XYGrid } from \"../grid/xy-grid\";\n\nimport { IInteractionCoordinatesPayload } from \"./types\";\n\nexport interface IZoomPluginConfiguration {\n    enableExternalEvents?: boolean;\n}\n\nexport class ZoomPlugin extends ChartPlugin {\n    // *Note:* This plugin manually moves the d3 brush across the screen to accommodate a known Firefox\n    // bug in which mouse events report an incorrect pointer position for svg children of an element\n    // transformed by a translate function: https://github.com/d3/d3-selection/issues/81\n\n    public static LAYER_NAME = \"zoom-brush\";\n    public static readonly DEFAULT_CONFIG: IZoomPluginConfiguration = {\n        enableExternalEvents: false,\n    };\n\n    private grid: XYGrid;\n    private brush: BrushBehavior;\n    private zoomBrushLayer: D3Selection;\n    private brushElement: D3Selection;\n    private destroy$ = new Subject();\n    private brushStartX: number | undefined;\n    private interactionHandlerMap: Record;\n\n    constructor(public config: IZoomPluginConfiguration = {}) {\n        super();\n        this.config = defaultsDeep(this.config, ZoomPlugin.DEFAULT_CONFIG);\n        this.interactionHandlerMap = {\n            [InteractionType.MouseDown]: this.brushStart,\n            [InteractionType.MouseMove]: this.brushMove,\n            [InteractionType.MouseUp]: this.brushEnd,\n        };\n    }\n\n    public initialize(): void {\n        this.grid = this.chart.getGrid() as XYGrid;\n        this.zoomBrushLayer = this.grid.getLasagna().addLayer({\n            name: ZoomPlugin.LAYER_NAME,\n            // add 1 to the foreground layer's order to ensure the brush is rendered in front of it\n            order: STANDARD_RENDER_LAYERS[RenderLayerName.foreground].order + 1,\n            clipped: true,\n        });\n\n        this.chart.getEventBus().getStream(INTERACTION_COORDINATES_EVENT)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((chartEvent: IChartEvent) => {\n                if (chartEvent.broadcast && !this.config.enableExternalEvents) {\n                    return;\n                }\n\n                const data: IInteractionCoordinatesPayload = chartEvent.data;\n                if (isEmpty(this.grid.scales) || isEmpty(data.coordinates)) {\n                    return;\n                }\n\n                if (this.interactionHandlerMap[data.interactionType]) {\n                    const xCoord = data.coordinates && data.coordinates.x;\n                    this.interactionHandlerMap[data.interactionType](xCoord);\n                }\n            });\n\n        this.brush = brushX();\n        this.brushElement = this.zoomBrushLayer.append(\"g\")\n            .attr(\"class\", \"brush\");\n\n        // engage pointer capture to confine mouse events to the interactive area\n        // (in other words, if the 'mouseup' is physically triggered outside the interactive area,\n        // the pointer capture allows us to still zoom based on that event)\n        this.chart.getGrid().getInteractiveArea()\n            .on(\"pointerdown\", () => event.target.setPointerCapture(event.pointerId))\n            .on(\"pointerup\", () => event.target.releasePointerCapture(event.pointerId));\n    }\n\n    public updateDimensions(): void {\n        const dimension = this.grid.config().dimension;\n\n        // set the brush area's dimensions\n        this.brush.extent([[0, 0], [dimension.width(), dimension.height()]]);\n\n        // render the brush area after we have dimensions\n        this.brush(this.zoomBrushLayer.select(\".brush\"));\n\n        // prevent the brush from handling its own pointer events\n        this.brushElement.select(\".overlay\")\n            .style(\"pointer-events\", \"none\");\n\n        // remove stroke per mockups\n        this.brushElement.select(\".selection\")\n            .attr(\"stroke\", null);\n    }\n\n    public destroy(): void {\n        this.grid.getLasagna().removeLayer(ZoomPlugin.LAYER_NAME);\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n\n    private brushStart = (xCoord: number) => {\n        if (!isUndefined(this.brushStartX)) {\n            return;\n        }\n\n        this.chart.getEventBus().getStream(INTERACTION_VALUES_ACTIVE_EVENT).next({ data: false });\n        this.brushStartX = xCoord;\n    }\n\n    private brushMove = (xCoord: number) => {\n        if (isUndefined(this.brushStartX)) {\n            return;\n        }\n\n        const selection = [this.brushStartX, xCoord].sort((a, b) => a - b);\n        this.brush.move(this.brushElement, selection as BrushSelection);\n    }\n\n    private brushEnd = (xCoord: number) => {\n        if (isUndefined(this.brushStartX)) {\n            return;\n        }\n\n        const selection = [this.brushStartX, xCoord].sort((a, b) => a - b);\n        this.brushStartX = undefined;\n        this.chart.getEventBus().getStream(INTERACTION_VALUES_ACTIVE_EVENT).next({ data: true });\n\n        // remove the brush\n        this.brush.move(this.brushElement, null);\n\n        const xScales = this.grid.scales.x.list;\n        if (!xScales || selection[0] === selection[1]) {\n            return;\n        }\n\n        let widthCorrection = 0;\n        const gridConfig = this.grid.config();\n        if (!gridConfig.disableRenderAreaWidthCorrection && selection[1] === gridConfig.dimension.width() - Grid.RENDER_AREA_WIDTH_CORRECTION) {\n            // Width correction to accommodate similar adjustment in grid. This ensures that the right-most column of pixels on the chart is selectable.\n            widthCorrection = Grid.RENDER_AREA_WIDTH_CORRECTION;\n        }\n\n        const data: ISetDomainEventPayload = xScales.reduce((result, next: IScale) => {\n            result[next.id] = [selection[0], selection[1] as number + widthCorrection].map(x => next.invert(x as number));\n            return result;\n        }, {});\n\n        // zoom the chart\n        this.chart.getEventBus().getStream(SET_DOMAIN_EVENT).next({ data });\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            resize-observer-polyfill : ^1.5.0\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @nova-ui/bits : ~11.7.0-0\n        \n            @types/d3 : ^5.0.0\n        \n            @types/d3-selection-multi : ^1.0.0\n        \n            d3 : ^5.0.0\n        \n            d3-color : 1.3.0\n        \n            d3-selection-multi : ^1.0.0\n        \n            d3-time-format : 2.1.3\n    \n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ChartAssistEventType   (src/.../types.ts)\n                        \n                        \n                            CssFilterId   (src/.../types.ts)\n                        \n                        \n                            InteractionType   (src/.../types.ts)\n                        \n                        \n                            LegendOrientation   (src/.../types.ts)\n                        \n                        \n                            RenderLayerName   (src/.../types.ts)\n                        \n                        \n                            RenderState   (src/.../types.ts)\n                        \n                        \n                            StandardGaugeColor   (src/.../constants.ts)\n                        \n                        \n                            StandardGaugeThresholdMarkerRadius   (src/.../constants.ts)\n                        \n                        \n                            StandardLinearGaugeThickness   (src/.../constants.ts)\n                        \n                        \n                            ZoneBoundary   (src/.../types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/chart-assists/types.ts\n    \n        \n            \n                \n                    \n                        \n                        ChartAssistEventType\n                    \n                \n                    \n                        \n                            Event types that can be emitted from a chart assist \n\n                        \n                    \n                        \n                            \n                                 ToggleSeries\n                            \n                        \n                        \n                            \n                                Value : ToggleSeries\n                            \n                        \n                        \n                            \n                                 ResetVisibleSeries\n                            \n                        \n                        \n                            \n                                Value : ResetVisibleSeries\n                            \n                        \n                        \n                            \n                                 EmphasizeSeries\n                            \n                        \n                        \n                            \n                                Value : EmphasizeSeries\n                            \n                        \n            \n        \n\n    src/core/types.ts\n    \n        \n            \n                \n                    \n                        \n                        CssFilterId\n                    \n                \n                    \n                        \n                            Common CSS filter IDs \n\n                        \n                    \n                        \n                            \n                                 Grayscale\n                            \n                        \n                        \n                            \n                                Value : grayscale\n                            \n                        \n            \n        \n\n    src/core/common/types.ts\n    \n        \n            \n                \n                    \n                        \n                        InteractionType\n                    \n                \n                    \n                        \n                            Mouse interaction types \n\n                        \n                    \n                        \n                            \n                                 Click\n                            \n                        \n                        \n                            \n                                Value : click\n                            \n                        \n                        \n                            \n                                 Hover\n                            \n                        \n                        \n                            \n                                Value : hover\n                            \n                        \n                        \n                            \n                                 MouseDown\n                            \n                        \n                        \n                            \n                                Value : mousedown\n                            \n                        \n                        \n                            \n                                 MouseEnter\n                            \n                        \n                        \n                            \n                                Value : mouseenter\n                            \n                        \n                        \n                            \n                                 MouseLeave\n                            \n                        \n                        \n                            \n                                Value : mouseleave\n                            \n                        \n                        \n                            \n                                 MouseMove\n                            \n                        \n                        \n                            \n                                Value : mousemove\n                            \n                        \n                        \n                            \n                                 MouseUp\n                            \n                        \n                        \n                            \n                                Value : mouseup\n                            \n                        \n            \n        \n\n    src/legend/types.ts\n    \n        \n            \n                \n                    \n                        \n                        LegendOrientation\n                    \n                \n                        \n                            \n                                 vertical\n                            \n                        \n                        \n                            \n                                Value : vertical\n                            \n                        \n                        \n                            \n                                 horizontal\n                            \n                        \n                        \n                            \n                                Value : horizontal\n                            \n                        \n            \n        \n\n    src/renderers/types.ts\n    \n        \n            \n                \n                    \n                        \n                        RenderLayerName\n                    \n                \n                        \n                            \n                                 background\n                            \n                        \n                        \n                            \n                                Value : background\n                            \n                        \n                        \n                            \n                                 data\n                            \n                        \n                        \n                            \n                                Value : data\n                            \n                        \n                        \n                            \n                                 unclippedData\n                            \n                        \n                        \n                            \n                                Value : unclipped-data\n                            \n                        \n                        \n                            \n                                 foreground\n                            \n                        \n                        \n                            \n                                Value : foreground\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        RenderState\n                    \n                \n                        \n                            \n                                 hidden\n                            \n                        \n                        \n                            \n                                Value : hidden\n                            \n                        \n                        \n                            \n                                 deemphasized\n                            \n                        \n                        \n                            \n                                Value : deemphasized\n                            \n                        \n                        \n                            \n                                 emphasized\n                            \n                        \n                        \n                            \n                                Value : emphasized\n                            \n                        \n                        \n                            \n                                 default\n                            \n                        \n                        \n                            \n                                Value : default\n                            \n                        \n            \n        \n\n    src/gauge/constants.ts\n    \n        \n            \n                \n                    \n                        \n                        StandardGaugeColor\n                    \n                \n                    \n                        \n                            Standard gauge colors\n\n                        \n                    \n                        \n                            \n                                 Remainder\n                            \n                        \n                        \n                            \n                                Value : var(--nui-color-semantic-unknown-bg-hover)\n                            \n                        \n                        \n                            \n                                 Ok\n                            \n                        \n                        \n                            \n                                Value : var(--nui-color-chart-one)\n                            \n                        \n                        \n                            \n                                 Warning\n                            \n                        \n                        \n                            \n                                Value : var(--nui-color-semantic-warning)\n                            \n                        \n                        \n                            \n                                 Critical\n                            \n                        \n                        \n                            \n                                Value : var(--nui-color-semantic-critical)\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        StandardGaugeThresholdMarkerRadius\n                    \n                \n                    \n                        \n                            Standard values for gauge threshold marker radii\n\n                        \n                    \n                        \n                            \n                                 Small\n                            \n                        \n                        \n                            \n                                Value : 3\n                            \n                        \n                        \n                            \n                                 Large\n                            \n                        \n                        \n                            \n                                Value : 4\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        StandardLinearGaugeThickness\n                    \n                \n                    \n                        \n                            Standard thicknesses for the linear gauge\n\n                        \n                    \n                        \n                            \n                                 Medium\n                            \n                        \n                        \n                            \n                                Value : 10\n                            \n                        \n                        \n                            \n                                 Large\n                            \n                        \n                        \n                            \n                                Value : 15\n                            \n                        \n            \n        \n\n    src/thresholds/types.ts\n    \n        \n            \n                \n                    \n                        \n                        ZoneBoundary\n                    \n                \n                    \n                        \n                            Used for specifying the start or end boundary of a zone\n\n                        \n                    \n                        \n                            \n                                 Start\n                            \n                        \n                        \n                            \n                                Value : start\n                            \n                        \n                        \n                            \n                                 End\n                            \n                        \n                        \n                            \n                                Value : end\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nCharts Overview\nNova Charts is a library created to provide potential consumers with solutions for various data visualizations that conform with the Nova Design Language. It's designed to solve common patterns identified by UX designers, but also be very flexible so that pieces of visualizations can be overridden or entirely new visualizations can be customized quickly. As with anything, the more customizations you wish to have, the more work and maintenance you will absorb within your own app's code.\nGetting Started\nGetting started with charts is quite simple:\n\nInclude charts in your package.json file\n \"devDependencies\": {\n     ...\n     \"@nova-ui/charts\": >>last release version\n\n\nAdd a reference to charts styles in your angular.json file. Without this step, the charts will render, but will look and act in unpredictable ways.\n \"projects\": {\n     \"your-project\": {\n         ...\n         \"architect\": {\n             ...\n             \"styles\": [\n                 \"src/styles.less\",\n                 \"./node_modules/@nova-ui/bits/bundles/css/styles.css\",\n                 \"./node_modules/@nova-ui/charts/bundles/css/styles.css\"\n              ],\n\n\nImport NuiChartsModule\n import { NuiChartsModule } from \"@nova-ui/charts\";\n\n @NgModule({\n     declarations: [ ... ],\n     imports: [ NuiChartsModule ],\n     exports: [ ... ],\n     providers: [ ... ]\n })\nCopy/Paste any of our examples (see TOC below) to create your own component, add it to your view and then play around with the options.\n\n\nTOC\n\nLayout\nChart Types\nLine\nBar\nBucketed Bar\nStatus\nWaterfall\n\n\nPie and Donut\nSpark\n\n\nPlugins\nTooltips\nPopovers\n\n\nThresholds\nTimeframe Selection\nAdvanced Usage\nChart\nLegend\nInput Structure\nData\nColors\nMarkers\n\n\nEvents\nGrid\nScales\nDomains\nFormatters\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\n                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\nDefinitions.\n\"License\" shall mean the terms and conditions for use, reproduction,\nand distribution as defined by Sections 1 through 9 of this document.\n\"Licensor\" shall mean the copyright owner or entity authorized by\nthe copyright owner that is granting the License.\n\"Legal Entity\" shall mean the union of the acting entity and all\nother entities that control, are controlled by, or are under common\ncontrol with that entity. For the purposes of this definition,\n\"control\" means (i) the power, direct or indirect, to cause the\ndirection or management of such entity, whether by contract or\notherwise, or (ii) ownership of fifty percent (50%) or more of the\noutstanding shares, or (iii) beneficial ownership of such entity.\n\"You\" (or \"Your\") shall mean an individual or Legal Entity\nexercising permissions granted by this License.\n\"Source\" form shall mean the preferred form for making modifications,\nincluding but not limited to software source code, documentation\nsource, and configuration files.\n\"Object\" form shall mean any form resulting from mechanical\ntransformation or translation of a Source form, including but\nnot limited to compiled object code, generated documentation,\nand conversions to other media types.\n\"Work\" shall mean the work of authorship, whether in Source or\nObject form, made available under the License, as indicated by a\ncopyright notice that is included in or attached to the work\n(an example is provided in the Appendix below).\n\"Derivative Works\" shall mean any work, whether in Source or Object\nform, that is based on (or derived from) the Work and for which the\neditorial revisions, annotations, elaborations, or other modifications\nrepresent, as a whole, an original work of authorship. For the purposes\nof this License, Derivative Works shall not include works that remain\nseparable from, or merely link (or bind by name) to the interfaces of,\nthe Work and Derivative Works thereof.\n\"Contribution\" shall mean any work of authorship, including\nthe original version of the Work and any modifications or additions\nto that Work or Derivative Works thereof, that is intentionally\nsubmitted to Licensor for inclusion in the Work by the copyright owner\nor by an individual or Legal Entity authorized to submit on behalf of\nthe copyright owner. For the purposes of this definition, \"submitted\"\nmeans any form of electronic, verbal, or written communication sent\nto the Licensor or its representatives, including but not limited to\ncommunication on electronic mailing lists, source code control systems,\nand issue tracking systems that are managed by, or on behalf of, the\nLicensor for the purpose of discussing and improving the Work, but\nexcluding communication that is conspicuously marked or otherwise\ndesignated in writing by the copyright owner as \"Not a Contribution.\"\n\"Contributor\" shall mean Licensor and any individual or Legal Entity\non behalf of whom a Contribution has been received by Licensor and\nsubsequently incorporated within the Work.\n\nGrant of Copyright License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\ncopyright license to reproduce, prepare Derivative Works of,\npublicly display, publicly perform, sublicense, and distribute the\nWork and such Derivative Works in Source or Object form.\n\nGrant of Patent License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\n(except as stated in this section) patent license to make, have made,\nuse, offer to sell, sell, import, and otherwise transfer the Work,\nwhere such license applies only to those patent claims licensable\nby such Contributor that are necessarily infringed by their\nContribution(s) alone or by combination of their Contribution(s)\nwith the Work to which such Contribution(s) was submitted. If You\ninstitute patent litigation against any entity (including a\ncross-claim or counterclaim in a lawsuit) alleging that the Work\nor a Contribution incorporated within the Work constitutes direct\nor contributory patent infringement, then any patent licenses\ngranted to You under this License for that Work shall terminate\nas of the date such litigation is filed.\n\nRedistribution. You may reproduce and distribute copies of the\nWork or Derivative Works thereof in any medium, with or without\nmodifications, and in Source or Object form, provided that You\nmeet the following conditions:\n(a) You must give any other recipients of the Work or\nDerivative Works a copy of this License; and(b) You must cause any modified files to carry prominent notices\nstating that You changed the files; and(c) You must retain, in the Source form of any Derivative Works\nthat You distribute, all copyright, patent, trademark, and\nattribution notices from the Source form of the Work,\nexcluding those notices that do not pertain to any part of\nthe Derivative Works; and(d) If the Work includes a \"NOTICE\" text file as part of its\ndistribution, then any Derivative Works that You distribute must\ninclude a readable copy of the attribution notices contained\nwithin such NOTICE file, excluding those notices that do not\npertain to any part of the Derivative Works, in at least one\nof the following places: within a NOTICE text file distributed\nas part of the Derivative Works; within the Source form or\ndocumentation, if provided along with the Derivative Works; or,\nwithin a display generated by the Derivative Works, if and\nwherever such third-party notices normally appear. The contents\nof the NOTICE file are for informational purposes only and\ndo not modify the License. You may add Your own attribution\nnotices within Derivative Works that You distribute, alongside\nor as an addendum to the NOTICE text from the Work, provided\nthat such additional attribution notices cannot be construed\nas modifying the License.You may add Your own copyright statement to Your modifications and\nmay provide additional or different license terms and conditions\nfor use, reproduction, or distribution of Your modifications, or\nfor any such Derivative Works as a whole, provided Your use,\nreproduction, and distribution of the Work otherwise complies with\nthe conditions stated in this License.\n\nSubmission of Contributions. Unless You explicitly state otherwise,\nany Contribution intentionally submitted for inclusion in the Work\nby You to the Licensor shall be under the terms and conditions of\nthis License, without any additional terms or conditions.\nNotwithstanding the above, nothing herein shall supersede or modify\nthe terms of any separate license agreement you may have executed\nwith Licensor regarding such Contributions.\n\nTrademarks. This License does not grant permission to use the trade\nnames, trademarks, service marks, or product names of the Licensor,\nexcept as required for reasonable and customary use in describing the\norigin of the Work and reproducing the content of the NOTICE file.\n\nDisclaimer of Warranty. Unless required by applicable law or\nagreed to in writing, Licensor provides the Work (and each\nContributor provides its Contributions) on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied, including, without limitation, any warranties or conditions\nof TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\nPARTICULAR PURPOSE. You are solely responsible for determining the\nappropriateness of using or redistributing the Work and assume any\nrisks associated with Your exercise of permissions under this License.\n\nLimitation of Liability. In no event and under no legal theory,\nwhether in tort (including negligence), contract, or otherwise,\nunless required by applicable law (such as deliberate and grossly\nnegligent acts) or agreed to in writing, shall any Contributor be\nliable to You for damages, including any direct, indirect, special,\nincidental, or consequential damages of any character arising as a\nresult of this License or out of the use or inability to use the\nWork (including but not limited to damages for loss of goodwill,\nwork stoppage, computer failure or malfunction, or any and all\nother commercial damages or losses), even if such Contributor\nhas been advised of the possibility of such damages.\n\nAccepting Warranty or Additional Liability. While redistributing\nthe Work or Derivative Works thereof, You may choose to offer,\nand charge a fee for, acceptance of support, warranty, indemnity,\nor other liability obligations and/or rights consistent with this\nLicense. However, in accepting such obligations, You may act only\non Your own behalf and on Your sole responsibility, not on behalf\nof any other Contributor, and only if You agree to indemnify,\ndefend, and hold each Contributor harmless for any liability\nincurred by, or claims asserted against, such Contributor by reason\nof your accepting any such warranty or additional liability.\nEND OF TERMS AND CONDITIONS\nAPPENDIX: How to apply the Apache License to your work.\nTo apply the Apache License to your work, attach the following\nboilerplate notice, with the fields enclosed by brackets \"[]\"\nreplaced with your own identifying information. (Don't include\nthe brackets!)  The text should be enclosed in the appropriate\ncomment syntax for the file format. We also recommend that a\nfile or class name and description of purpose be included on the\nsame \"printed page\" as the copyright notice for easier\nidentification within third-party archives.\nCopyright 2020 SolarWinds Worldwide, LLC\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        NuiChartsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NuiChartsModule\n\n\n\ncluster_NuiChartsModule_declarations\n\n\n\ncluster_NuiChartsModule_exports\n\n\n\ncluster_NuiChartsModule_providers\n\n\n\n\nBasicLegendTileComponent\n\nBasicLegendTileComponent\n\n\n\nNuiChartsModule\n\nNuiChartsModule\n\nNuiChartsModule -->\n\nBasicLegendTileComponent->NuiChartsModule\n\n\n\n\n\nChartCollectionIdDirective\n\nChartCollectionIdDirective\n\nNuiChartsModule -->\n\nChartCollectionIdDirective->NuiChartsModule\n\n\n\n\n\nChartComponent\n\nChartComponent\n\nNuiChartsModule -->\n\nChartComponent->NuiChartsModule\n\n\n\n\n\nChartDonutContentComponent\n\nChartDonutContentComponent\n\nNuiChartsModule -->\n\nChartDonutContentComponent->NuiChartsModule\n\n\n\n\n\nChartMarkerComponent\n\nChartMarkerComponent\n\nNuiChartsModule -->\n\nChartMarkerComponent->NuiChartsModule\n\n\n\n\n\nChartPopoverComponent\n\nChartPopoverComponent\n\nNuiChartsModule -->\n\nChartPopoverComponent->NuiChartsModule\n\n\n\n\n\nChartTooltipComponent\n\nChartTooltipComponent\n\nNuiChartsModule -->\n\nChartTooltipComponent->NuiChartsModule\n\n\n\n\n\nChartTooltipsComponent\n\nChartTooltipsComponent\n\nNuiChartsModule -->\n\nChartTooltipsComponent->NuiChartsModule\n\n\n\n\n\nLegendComponent\n\nLegendComponent\n\nNuiChartsModule -->\n\nLegendComponent->NuiChartsModule\n\n\n\n\n\nLegendSeriesComponent\n\nLegendSeriesComponent\n\nNuiChartsModule -->\n\nLegendSeriesComponent->NuiChartsModule\n\n\n\n\n\nRichLegendTileComponent\n\nRichLegendTileComponent\n\nNuiChartsModule -->\n\nRichLegendTileComponent->NuiChartsModule\n\n\n\n\n\nBasicLegendTileComponent \n\nBasicLegendTileComponent \n\nBasicLegendTileComponent  -->\n\nNuiChartsModule->BasicLegendTileComponent \n\n\n\n\n\nChartCollectionIdDirective \n\nChartCollectionIdDirective \n\nChartCollectionIdDirective  -->\n\nNuiChartsModule->ChartCollectionIdDirective \n\n\n\n\n\nChartComponent \n\nChartComponent \n\nChartComponent  -->\n\nNuiChartsModule->ChartComponent \n\n\n\n\n\nChartDonutContentComponent \n\nChartDonutContentComponent \n\nChartDonutContentComponent  -->\n\nNuiChartsModule->ChartDonutContentComponent \n\n\n\n\n\nChartMarkerComponent \n\nChartMarkerComponent \n\nChartMarkerComponent  -->\n\nNuiChartsModule->ChartMarkerComponent \n\n\n\n\n\nChartPopoverComponent \n\nChartPopoverComponent \n\nChartPopoverComponent  -->\n\nNuiChartsModule->ChartPopoverComponent \n\n\n\n\n\nChartTooltipComponent \n\nChartTooltipComponent \n\nChartTooltipComponent  -->\n\nNuiChartsModule->ChartTooltipComponent \n\n\n\n\n\nChartTooltipsComponent \n\nChartTooltipsComponent \n\nChartTooltipsComponent  -->\n\nNuiChartsModule->ChartTooltipsComponent \n\n\n\n\n\nLegendComponent \n\nLegendComponent \n\nLegendComponent  -->\n\nNuiChartsModule->LegendComponent \n\n\n\n\n\nLegendSeriesComponent \n\nLegendSeriesComponent \n\nLegendSeriesComponent  -->\n\nNuiChartsModule->LegendSeriesComponent \n\n\n\n\n\nRichLegendTileComponent \n\nRichLegendTileComponent \n\nRichLegendTileComponent  -->\n\nNuiChartsModule->RichLegendTileComponent \n\n\n\n\n\nChartCollectionService\n\nChartCollectionService\n\nNuiChartsModule -->\n\nChartCollectionService->NuiChartsModule\n\n\n\n\n\nThresholdsService\n\nThresholdsService\n\nNuiChartsModule -->\n\nThresholdsService->NuiChartsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    10 Components\n                \n            \n        \n        \n            \n                \n                    \n                    1 Directive\n                \n            \n        \n        \n            \n                \n                    \n                    2 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    69 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    93 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BorderKey   (src/.../grid.ts)\n                        \n                        \n                            D3Selection   (src/.../types.ts)\n                        \n                        \n                            DataAccessor   (src/.../types.ts)\n                        \n                        \n                            DomainCalculator   (src/.../types.ts)\n                        \n                        \n                            Formatter   (src/.../types.ts)\n                        \n                        \n                            IAxesStyleChangeEventPayload   (src/.../types.ts)\n                        \n                        \n                            Scales   (src/.../types.ts)\n                        \n                        \n                            SelectedDatPointIdxFn   (src/.../bar-highlight-strategy.ts)\n                        \n                        \n                            SeriesAccessor   (src/.../types.ts)\n                        \n                        \n                            TextOverflowHandler   (src/.../types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/grid/grid.ts\n    \n    \n        \n            \n                \n                    \n                    BorderKey\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/core/common/types.ts\n    \n    \n        \n            \n                \n                    \n                    D3Selection\n                \n            \n            \n                \n                    Short-form alias for the most commonly used generic D3 Selection type\n\n                \n            \n            \n                \n                        Selection\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DataAccessor\n                \n            \n            \n                \n                    Signature for data accessors\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    IAxesStyleChangeEventPayload\n                \n            \n            \n                \n                    Payload for axes style change when emphasizing series on grid\n\n                \n            \n            \n                \n                        Record>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SeriesAccessor\n                \n            \n            \n                \n                    Signature for series accessors\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/core/common/scales/types.ts\n    \n    \n        \n            \n                \n                    \n                    DomainCalculator\n                \n            \n            \n                \n                    Signature for domain calculator \n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Formatter\n                \n            \n            \n                \n                    Signature for label formatters \n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Scales\n                \n            \n            \n                \n                    Dictionary of scales \n\n                \n            \n            \n                \n                            Record>\n\n                \n            \n        \n    \n    src/renderers/bar/highlight-strategies/bar-highlight-strategy.ts\n    \n    \n        \n            \n                \n                    \n                    SelectedDatPointIdxFn\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/core/grid/types.ts\n    \n    \n        \n            \n                \n                    \n                    TextOverflowHandler\n                \n            \n            \n                \n                    Type for tick overflow handler \n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AXES_STYLE_CHANGE_EVENT   (src/.../constants.ts)\n                        \n                        \n                            BAND_CENTER   (src/.../constants.ts)\n                        \n                        \n                            borderMidpoint   (src/.../grid.ts)\n                        \n                        \n                            CHART_MARKERS   (src/.../palettes.ts)\n                        \n                        \n                            CHART_PALETTE_CS_S   (src/.../palettes.ts)\n                        \n                        \n                            CHART_PALETTE_CS_S_EXTENDED   (src/.../palettes.ts)\n                        \n                        \n                            CHART_PALETTE_CS1   (src/.../palettes.ts)\n                        \n                        \n                            CHART_PALETTE_CS2   (src/.../palettes.ts)\n                        \n                        \n                            CHART_PALETTE_CS3   (src/.../palettes.ts)\n                        \n                        \n                            CHART_VIEW_STATUS_EVENT   (src/.../constants.ts)\n                        \n                        \n                            CONNECTION_POINTS   (src/.../radial-tooltips-plugin.ts)\n                        \n                        \n                            context   (src/.../test.ts)\n                        \n                        \n                            datetimeFormatter   (src/.../datetime-formatter.ts)\n                        \n                        \n                            DEFAULT_MARKER_INTERACTION_CONFIG   (src/.../constants.ts)\n                        \n                        \n                            DEFAULT_RADIAL_RENDERER_CONFIG   (src/.../radial-renderer.ts)\n                        \n                        \n                            DESTROY_EVENT   (src/.../constants.ts)\n                        \n                        \n                            EMPTY_CONTINUOUS_DOMAIN   (src/.../types.ts)\n                        \n                        \n                            emptyShapes   (src/.../palettes.ts)\n                        \n                        \n                            formatSecond   (src/.../datetime-formatter.ts)\n                        \n                        \n                            GAUGE_QUANTITY_SERIES_ID   (src/.../constants.ts)\n                        \n                        \n                            GAUGE_REMAINDER_SERIES_ID   (src/.../constants.ts)\n                        \n                        \n                            GAUGE_THRESHOLD_MARKERS_SERIES_ID   (src/.../constants.ts)\n                        \n                        \n                            getAutomaticDomain   (src/.../automatic-domain.ts)\n                        \n                        \n                            getAutomaticDomainWithIncludedInterval   (src/.../automatic-domain.ts)\n                        \n                        \n                            getAutomaticDomainWithTicks   (src/.../automatic-domain.ts)\n                        \n                        \n                            GRAYSCALE_COLOR_MATRIX   (src/.../types.ts)\n                        \n                        \n                            GRAYSCALE_FILTER   (src/.../types.ts)\n                        \n                        \n                            HIGHLIGHT_DATA_POINT_EVENT   (src/.../constants.ts)\n                        \n                        \n                            HIGHLIGHT_SERIES_EVENT   (src/.../constants.ts)\n                        \n                        \n                            IGNORE_INTERACTION_CLASS   (src/.../constants.ts)\n                        \n                        \n                            INTERACTION_COORDINATES_EVENT   (src/.../constants.ts)\n                        \n                        \n                            INTERACTION_DATA_POINT_EVENT   (src/.../constants.ts)\n                        \n                        \n                            INTERACTION_DATA_POINTS_EVENT   (src/.../constants.ts)\n                        \n                        \n                            INTERACTION_SERIES_EVENT   (src/.../constants.ts)\n                        \n                        \n                            INTERACTION_VALUES_ACTIVE_EVENT   (src/.../constants.ts)\n                        \n                        \n                            INTERACTION_VALUES_EVENT   (src/.../constants.ts)\n                        \n                        \n                            intlFormat   (src/.../datetime-formatter.ts)\n                        \n                        \n                            MOUSE_ACTIVE_EVENT   (src/.../constants.ts)\n                        \n                        \n                            NORMALIZED_DOMAIN   (src/.../types.ts)\n                        \n                        \n                            OPPOSITE   (src/.../radial-tooltips-plugin.ts)\n                        \n                        \n                            REFRESH_EVENT   (src/.../constants.ts)\n                        \n                        \n                            regularShapes   (src/.../palettes.ts)\n                        \n                        \n                            require   (src/.../test.ts)\n                        \n                        \n                            SELECT_DATA_POINT_EVENT   (src/.../constants.ts)\n                        \n                        \n                            SERIES_STATE_CHANGE_EVENT   (src/.../constants.ts)\n                        \n                        \n                            SET_DOMAIN_EVENT   (src/.../constants.ts)\n                        \n                        \n                            THRESHOLDS_MAIN_CHART_RENDERER_CONFIG   (src/.../constants.ts)\n                        \n                        \n                            THRESHOLDS_SUMMARY_RENDERER_CONFIG   (src/.../constants.ts)\n                        \n                        \n                            TOOLTIP_POSITION_OFFSET   (src/.../chart-tooltips-plugin.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            AXES_STYLE_CHANGE_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"axes_style_change\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            CHART_VIEW_STATUS_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"chart_view_status\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            DESTROY_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"destroy\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            HIGHLIGHT_DATA_POINT_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"highlight_data_point\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            HIGHLIGHT_SERIES_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"highlight_series\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            IGNORE_INTERACTION_CLASS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"ignore-interaction\"\n                        \n                    \n\n                \n                    \n                        Use this class to prevent DOM elements from triggering mouse-interactive-area events \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            INTERACTION_COORDINATES_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"interaction_coordinates\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            INTERACTION_DATA_POINT_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"interaction_data_point\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            INTERACTION_DATA_POINTS_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"interaction_data_points\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            INTERACTION_SERIES_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"interaction_series\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            INTERACTION_VALUES_ACTIVE_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"interaction_values_active\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            INTERACTION_VALUES_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"interaction_values\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MOUSE_ACTIVE_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"mouse_active\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            REFRESH_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"refresh\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SELECT_DATA_POINT_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"select_data_point\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SERIES_STATE_CHANGE_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"series_state_change\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SET_DOMAIN_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"set_domain\"\n                        \n                    \n\n\n            \n        \n\n    src/core/common/scales/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            BAND_CENTER\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0.5\n                        \n                    \n\n                \n                    \n                        The center position within a band on a band scale \n\n                    \n                \n\n            \n        \n\n    src/core/grid/grid.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            borderMidpoint\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0.5\n                        \n                    \n\n\n            \n        \n\n    src/core/common/palette/palettes.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            CHART_MARKERS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         SvgMarker[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    ...regularShapes\n        .map(s => ``),\n    ...emptyShapes\n        .map((s, i) =>\n            `\n            `\n        ),\n].map(s => new SvgMarker(s))\n                        \n                    \n\n                \n                    \n                        Default chart marker set \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            CHART_PALETTE_CS_S\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    \"var(--nui-color-semantic-down)\",\n    \"var(--nui-color-semantic-critical)\",\n    \"var(--nui-color-semantic-warning)\",\n    \"var(--nui-color-semantic-unknown)\",\n    \"var(--nui-color-semantic-ok)\",\n    \"var(--nui-color-semantic-info)\",\n]\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            CHART_PALETTE_CS_S_EXTENDED\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    \"var(--nui-color-semantic-down)\",\n    \"var(--nui-color-semantic-down-bg)\",\n    \"var(--nui-color-semantic-critical)\",\n    \"var(--nui-color-semantic-critical-bg)\",\n    \"var(--nui-color-semantic-warning)\",\n    \"var(--nui-color-semantic-warning-bg)\",\n    \"var(--nui-color-semantic-unknown)\",\n    \"var(--nui-color-semantic-unknown-bg)\",\n    \"var(--nui-color-semantic-ok)\",\n    \"var(--nui-color-semantic-ok-bg)\",\n    \"var(--nui-color-semantic-info)\",\n    \"var(--nui-color-semantic-info-bg)\",\n]\n                        \n                    \n\n                \n                    \n                        Extended status color sequence for charts\nIt will substitute the default one above in v.12\nhttps://jira.solarwinds.com/browse/NUI-5367\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            CHART_PALETTE_CS1\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    \"var(--nui-color-chart-one)\",\n    \"var(--nui-color-chart-two)\",\n    \"var(--nui-color-chart-three)\",\n    \"var(--nui-color-chart-four)\",\n    \"var(--nui-color-chart-five)\",\n    \"var(--nui-color-chart-six)\",\n    \"var(--nui-color-chart-seven)\",\n    \"var(--nui-color-chart-eight)\",\n    \"var(--nui-color-chart-nine)\",\n    \"var(--nui-color-chart-ten)\",\n]\n                        \n                    \n\n                \n                    \n                        Default single-shade color sequence for charts \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            CHART_PALETTE_CS2\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    \"var(--nui-color-chart-one)\",\n    \"var(--nui-color-chart-one-light)\",\n    \"var(--nui-color-chart-two)\",\n    \"var(--nui-color-chart-two-light)\",\n    \"var(--nui-color-chart-three)\",\n    \"var(--nui-color-chart-three-light)\",\n    \"var(--nui-color-chart-four)\",\n    \"var(--nui-color-chart-four-light)\",\n    \"var(--nui-color-chart-five)\",\n    \"var(--nui-color-chart-five-light)\",\n    \"var(--nui-color-chart-six)\",\n    \"var(--nui-color-chart-six-light)\",\n    \"var(--nui-color-chart-seven)\",\n    \"var(--nui-color-chart-seven-light)\",\n    \"var(--nui-color-chart-eight)\",\n    \"var(--nui-color-chart-eight-light)\",\n    \"var(--nui-color-chart-nine)\",\n    \"var(--nui-color-chart-nine-light)\",\n    \"var(--nui-color-chart-ten)\",\n    \"var(--nui-color-chart-ten-light)\",\n]\n                        \n                    \n\n                \n                    \n                        Default two-shade color sequence for charts \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            CHART_PALETTE_CS3\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    \"var(--nui-color-chart-one)\",\n    \"var(--nui-color-chart-one-light)\",\n    \"var(--nui-color-chart-one-dark)\",\n    \"var(--nui-color-chart-two)\",\n    \"var(--nui-color-chart-two-light)\",\n    \"var(--nui-color-chart-two-dark)\",\n    \"var(--nui-color-chart-three)\",\n    \"var(--nui-color-chart-three-light)\",\n    \"var(--nui-color-chart-three-dark)\",\n    \"var(--nui-color-chart-four)\",\n    \"var(--nui-color-chart-four-light)\",\n    \"var(--nui-color-chart-four-dark)\",\n    \"var(--nui-color-chart-five)\",\n    \"var(--nui-color-chart-five-light)\",\n    \"var(--nui-color-chart-five-dark)\",\n    \"var(--nui-color-chart-six)\",\n    \"var(--nui-color-chart-six-light)\",\n    \"var(--nui-color-chart-six-dark)\",\n    \"var(--nui-color-chart-seven)\",\n    \"var(--nui-color-chart-seven-light)\",\n    \"var(--nui-color-chart-seven-dark)\",\n    \"var(--nui-color-chart-eight)\",\n    \"var(--nui-color-chart-eight-light)\",\n    \"var(--nui-color-chart-eight-dark)\",\n    \"var(--nui-color-chart-nine)\",\n    \"var(--nui-color-chart-nine-light)\",\n    \"var(--nui-color-chart-nine-dark)\",\n    \"var(--nui-color-chart-ten)\",\n    \"var(--nui-color-chart-ten-light)\",\n    \"var(--nui-color-chart-ten-dark)\",\n]\n                        \n                    \n\n                \n                    \n                        Default three-shade color sequence for charts \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            emptyShapes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    \"m0 2c1.105 0 2-.895 2-2 0-1.105-.895-2-2-2-1.105 0-2 .895-2 2 0 1.105.895 2 2 2zm0 2c-2.209 0-4-1.791-4-4 0-2.209 1.791-4 4-4 2.209 0 4 1.791 4 4 0 2.209-1.791 4-4 4z\", // circle empty\n    \"m-2-2 0 4 4 0 0-4-4 0zm-2-2 8 0 0 8-8 0 0-8z\", // square empty\n    \"m0-4-4 8 8.001 0-4.001-8zm0 3.354 1.573 3.146-3.145 0 1.572-3.146z\", // triangle up empty\n    \"m0-2.121-2.121 2.121 2.121 2.121 2.121-2.121-2.121-2.121zm0-2.828 4.95 4.95-4.95 4.95-4.95-4.95 4.95-4.95z\", // diamond empty\n    \"m0 4-4-8 8.001 0-4.001 8zm0-3.354 1.573-3.146-3.145 0 1.572 3.146z\", // triangle down empty\n    \"m0-1.951-2.237 1.626.855 2.63 2.766 0 .855-2.63-2.237-1.626zm0-1.854 4.001 2.907-1.528 4.703-4.945 0-1.528-4.703 4.001-2.907z\", // pentagon empty\n]\n                        \n                    \n\n                \n                    \n                        Standard open shapes for chart markers \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            regularShapes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    \"m0 0m-4 0a4 4 0 1 0 8 0 4 4 0 1 0-8 0z\", // circle\n    \"m-4,-4l8,0l0,8l-8,0l0,-8z\", // square\n    \"m0-4 4 8-8 0z\", // triangle up\n    \"m0-4.95 4.95 4.95-4.95 4.95-4.95-4.95 4.95-4.95z\", // diamond\n    \"m0 4-4-8 8 0z\", // triangle down\n    \"m0-3.805 4.001 2.907-1.528 4.703-4.945 0-1.528-4.703z\", // pentagon\n]\n                        \n                    \n\n                \n                    \n                        Standard shapes for chart markers \n\n                    \n                \n\n            \n        \n\n    src/core/plugins/tooltips/radial-tooltips-plugin.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            CONNECTION_POINTS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n        {x: \"end\", y: \"center\"},\n        {x: \"end\", y: \"bottom\"},\n        {x: \"center\", y: \"bottom\"},\n        {x: \"start\", y: \"bottom\"},\n        {x: \"start\", y: \"center\"},\n        {x: \"start\", y: \"top\"},\n        {x: \"center\", y: \"top\"},\n        {x: \"end\", y: \"top\"},\n    ]\n                        \n                    \n\n                \n                    \n                        The circle is divided into 8 parts (E, SE, S, SW, ...), these values represent the connection points\non the source element for the tooltip position starting with EAST and going clockwise)\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            OPPOSITE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    \"start\": \"end\",\n    \"end\": \"start\",\n    \"top\": \"bottom\",\n    \"bottom\": \"top\",\n}\n                        \n                    \n\n                \n                    \n                        This conversion map is used to calculate the opposite connection points for the tooltip element \n\n                    \n                \n\n            \n        \n\n    src/test.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            context\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require.context(\"./\", true, /\\.spec\\.ts$/)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            require\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n\n\n            \n        \n\n    src/core/common/scales/formatters/datetime-formatter.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            datetimeFormatter\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Formatter\n\n                        \n                    \n                    \n                        \n                            Default value : (date: Date): string =>\n    (timeMinute(date) \n                        \n                    \n\n                \n                    \n                        Formatter for dates\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            formatSecond\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (d: Date) => intlFormat(d, {hour: \"numeric\", minute: \"2-digit\", second: \"2-digit\"})\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            intlFormat\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (date: Date, options: Intl.DateTimeFormatOptions) =>\n    new Intl.DateTimeFormat(moment.locale(), options).format(date)\n                        \n                    \n\n\n            \n        \n\n    src/renderers/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            DEFAULT_MARKER_INTERACTION_CONFIG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IMarkerInteractionConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    enabled: false,\n    clickable: false,\n}\n                        \n                    \n\n                \n                    \n                        Default configuration for marker interaction \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            THRESHOLDS_MAIN_CHART_RENDERER_CONFIG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     miscellaneou\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    stateStyles: {\n        [RenderState.default]: {\n            opacity: 0,\n        },\n        [RenderState.hidden]: {\n            opacity: 0,\n        },\n        [RenderState.deemphasized]: {\n            opacity: 0,\n        },\n        [RenderState.emphasized]: {\n            opacity: 1,\n        },\n    },\n    ignoreForDomainCalculation: true,\n}\n                        \n                    \n\n                \n                    \n                        Renderer configuration for the thresholds on a chart \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            THRESHOLDS_SUMMARY_RENDERER_CONFIG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     miscellaneou\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    stateStyles: {\n        [RenderState.default]: {\n            opacity: 0.3,\n        },\n        [RenderState.hidden]: {\n            opacity: 0,\n        },\n        [RenderState.deemphasized]: {\n            opacity: 0,\n        },\n        [RenderState.emphasized]: {\n            opacity: 1,\n        },\n    },\n    ignoreForDomainCalculation: true,\n}\n                        \n                    \n\n                \n                    \n                        Renderer configuration for a thresholds summary chart \n\n                    \n                \n\n            \n        \n\n    src/renderers/radial/radial-renderer.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            DEFAULT_RADIAL_RENDERER_CONFIG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRadialRendererConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    annularWidth: 20,\n    annularPadding: 5,\n    maxThickness: 30,\n    annularGrowth: 0.15,\n    cursor: \"default\",\n    enableSeriesHighlighting: true,\n    enableDataPointHighlighting: true,\n}\n                        \n                    \n\n                \n                    \n                        Default configuration for Radial Renderer\n\n                    \n                \n\n            \n        \n\n    src/core/common/scales/types.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            EMPTY_CONTINUOUS_DOMAIN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [0, 0]\n                        \n                    \n\n                \n                    \n                        Domain for series with empty or null data \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            NORMALIZED_DOMAIN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [0, 1]\n                        \n                    \n\n                \n                    \n                        A reasonable non-data-driven domain for charts  \n\n                    \n                \n\n            \n        \n\n    src/gauge/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            GAUGE_QUANTITY_SERIES_ID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"quantity\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            GAUGE_REMAINDER_SERIES_ID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"remainder\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            GAUGE_THRESHOLD_MARKERS_SERIES_ID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"threshold-markers\"\n                        \n                    \n\n\n            \n        \n\n    src/core/common/scales/domain-calculation/automatic-domain.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            getAutomaticDomain\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         DomainCalculator\n\n                        \n                    \n                    \n                        \n                            Default value : (chartSeriesSet: IChartSeries[], scaleKey: string, scale: IScale): any[] => {\n    const fixedDomains = getFixedDomains(chartSeriesSet, scaleKey);\n\n    const domains: any[][] = chartSeriesSet.map(cs => {\n        // find fixed, continuous scales that are referenced by this series\n        const filterScales = Object.keys(fixedDomains).reduce((result, next: string) => {\n            const seriesScale = cs.scales[next];\n            if (seriesScale && seriesScale.isContinuous() && indexOf(fixedDomains[next], seriesScale) !== -1) {\n                result[next] = seriesScale;\n            }\n            return result;\n        }, >>{});\n\n        return cs.renderer.getDomainOfFilteredData(cs, filterScales, scaleKey, cs.scales[scaleKey]);\n    });\n\n    return mergeDomains(domains, scale);\n}\n                        \n                    \n\n                \n                    \n                        Returns automatically calculated domain for given scaleKey based on given set of chart series. It considers scales with fixed domains for limiting\nconsidered data set.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getAutomaticDomainWithIncludedInterval\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (interval: [number, number]): DomainCalculator =>\n    (chartSeriesSet: IChartSeries[], scaleId: string, scale: IScale) => {\n        const automaticDomain = getAutomaticDomain(chartSeriesSet, scaleId, scale);\n\n        return [Math.min(automaticDomain[0], interval[0]), Math.max(automaticDomain[1], interval[1])];\n    }\n                        \n                    \n\n                \n                    \n                        Works like getAutomaticDomain, but also includes provided interval in the calculated result\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getAutomaticDomainWithTicks\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (config: IAxisConfig, axisGenerator: any): DomainCalculator =>\n    (chartSeriesSet: IChartSeries[], scaleKey: string, scale: IScale): any[] => {\n        const mergedDomains = getAutomaticDomain(chartSeriesSet, scaleKey, scale);\n        const clonedScale = cloneDeep(scale);\n        domain(clonedScale, mergedDomains);\n        const tickAxis: any = axisGenerator(clonedScale.d3Scale);\n        const ticks = tickAxis.scale().ticks(config.approximateTicks);\n        if (ticks.length  mergedDomains[0]) {\n            mergedDomains[0] = ticks[0] - ticksAverage;\n        }\n        if (ticks[ticks.length - 1] \n                        \n                    \n\n\n            \n        \n\n    src/core/types.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            GRAYSCALE_COLOR_MATRIX\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : `\n0.2126 0.7152 0.0722 0 0\n0.2126 0.7152 0.0722 0 0\n0.2126 0.7152 0.0722 0 0\n0      0      0      1 0\n`\n                        \n                    \n\n                \n                    \n                        Transformation matrix value for applying a 100% grayscale appearance to an svg element \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            GRAYSCALE_FILTER\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : `url(\"#${CssFilterId.Grayscale}\")`\n                        \n                    \n\n                \n                    \n                        CSS grayscale filter rule value \n\n                    \n                \n\n            \n        \n\n    src/core/plugins/tooltips/chart-tooltips-plugin.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            TOOLTIP_POSITION_OFFSET\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 10\n                        \n                    \n\n                \n                    \n                        How far away from the data point position will the tooltip be positioned \n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/layout.html":{"url":"additional-documentation/layout.html","title":"additional-page - Layout","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/chart-types.html":{"url":"additional-documentation/chart-types.html","title":"additional-page - Chart Types","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\nChart Types\n\nLine\nBar\nBucketed Bar\nStatus\nWaterfall\n\n\nArea\nPie and Donut\nSpark\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/chart-types/line.html":{"url":"additional-documentation/chart-types/line.html","title":"additional-page - Line","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/chart-types/bar.html":{"url":"additional-documentation/chart-types/bar.html","title":"additional-page - Bar","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/chart-types/bar/bucketed-bar.html":{"url":"additional-documentation/chart-types/bar/bucketed-bar.html","title":"additional-page - Bucketed Bar","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/chart-types/bar/status.html":{"url":"additional-documentation/chart-types/bar/status.html","title":"additional-page - Status","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/chart-types/bar/waterfall.html":{"url":"additional-documentation/chart-types/bar/waterfall.html","title":"additional-page - Waterfall","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/chart-types/area.html":{"url":"additional-documentation/chart-types/area.html","title":"additional-page - Area","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/chart-types/pie-and-donut.html":{"url":"additional-documentation/chart-types/pie-and-donut.html","title":"additional-page - Pie and Donut","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/chart-types/spark.html":{"url":"additional-documentation/chart-types/spark.html","title":"additional-page - Spark","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/plugins.html":{"url":"additional-documentation/plugins.html","title":"additional-page - Plugins","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\nPlugins\n\nTooltips\nPopovers\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/plugins/tooltips.html":{"url":"additional-documentation/plugins/tooltips.html","title":"additional-page - Tooltips","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/plugins/popovers.html":{"url":"additional-documentation/plugins/popovers.html","title":"additional-page - Popovers","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/thresholds.html":{"url":"additional-documentation/thresholds.html","title":"additional-page - Thresholds","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/timeframe-selection.html":{"url":"additional-documentation/timeframe-selection.html","title":"additional-page - Timeframe Selection","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/advanced-usage.html":{"url":"additional-documentation/advanced-usage.html","title":"additional-page - Advanced Usage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\nAdvanced Usage\n\nChart\nLegend\nInput Structure\nData\nColors\nMarkers\n\n\nEvents\nGrid\nScales\nDomains\nFormatters\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/advanced-usage/chart.html":{"url":"additional-documentation/advanced-usage/chart.html","title":"additional-page - Chart","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/advanced-usage/legend.html":{"url":"additional-documentation/advanced-usage/legend.html","title":"additional-page - Legend","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/advanced-usage/input-structure.html":{"url":"additional-documentation/advanced-usage/input-structure.html","title":"additional-page - Input Structure","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/advanced-usage/input-structure/data.html":{"url":"additional-documentation/advanced-usage/input-structure/data.html","title":"additional-page - Data","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/advanced-usage/input-structure/colors.html":{"url":"additional-documentation/advanced-usage/input-structure/colors.html","title":"additional-page - Colors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/advanced-usage/input-structure/markers.html":{"url":"additional-documentation/advanced-usage/input-structure/markers.html","title":"additional-page - Markers","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/advanced-usage/events.html":{"url":"additional-documentation/advanced-usage/events.html","title":"additional-page - Events","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/advanced-usage/grid.html":{"url":"additional-documentation/advanced-usage/grid.html","title":"additional-page - Grid","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/advanced-usage/scales.html":{"url":"additional-documentation/advanced-usage/scales.html","title":"additional-page - Scales","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/advanced-usage/scales/domains.html":{"url":"additional-documentation/advanced-usage/scales/domains.html","title":"additional-page - Domains","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/advanced-usage/scales/formatters.html":{"url":"additional-documentation/advanced-usage/scales/formatters.html","title":"additional-page - Formatters","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
