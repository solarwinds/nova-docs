(self.webpackChunk_nova_ui_charts=self.webpackChunk_nova_ui_charts||[]).push([[3455],{82892:function(n,t,e){var o={"./chart-docs-plugins.module.ts":19655,"./popovers/bar-chart/bar-chart-with-popover.example.component.html":55392,"./popovers/bar-chart/bar-chart-with-popover.example.component.ts":7122,"./popovers/chart-docs-popovers.component.html":70582,"./popovers/chart-docs-popovers.component.ts":41026,"./popovers/chart-docs-popovers.module.ts":65168,"./popovers/donut-chart/donut-chart-with-popover.example.component.html":4554,"./popovers/donut-chart/donut-chart-with-popover.example.component.ts":23015,"./popovers/line-chart/line-chart-with-popover.example.component.html":83135,"./popovers/line-chart/line-chart-with-popover.example.component.ts":72553,"./popovers/popover-visual-test/popover-visual-test.component.html":3486,"./popovers/popover-visual-test/popover-visual-test.component.ts":71547,"./tooltips/bar-chart/bar-chart-with-tooltips.example.component.html":75218,"./tooltips/bar-chart/bar-chart-with-tooltips.example.component.ts":20751,"./tooltips/chart-docs-tooltips.component.html":63858,"./tooltips/chart-docs-tooltips.component.ts":88790,"./tooltips/chart-docs-tooltips.module.ts":61755,"./tooltips/donut-chart/donut-chart-with-tooltips.example.component.html":20059,"./tooltips/donut-chart/donut-chart-with-tooltips.example.component.ts":4583,"./tooltips/line-chart/line-chart-with-tooltips.example.component.html":63675,"./tooltips/line-chart/line-chart-with-tooltips.example.component.ts":41976,"./tooltips/visual-test/tooltips-visual-test.component.html":60983,"./tooltips/visual-test/tooltips-visual-test.component.less":32410,"./tooltips/visual-test/tooltips-visual-test.component.ts":93748,"components/demo/plugins/chart-docs-plugins.module.ts":19655,"components/demo/plugins/popovers/bar-chart/bar-chart-with-popover.example.component.html":55392,"components/demo/plugins/popovers/bar-chart/bar-chart-with-popover.example.component.ts":7122,"components/demo/plugins/popovers/chart-docs-popovers.component.html":70582,"components/demo/plugins/popovers/chart-docs-popovers.component.ts":41026,"components/demo/plugins/popovers/chart-docs-popovers.module.ts":65168,"components/demo/plugins/popovers/donut-chart/donut-chart-with-popover.example.component.html":4554,"components/demo/plugins/popovers/donut-chart/donut-chart-with-popover.example.component.ts":23015,"components/demo/plugins/popovers/line-chart/line-chart-with-popover.example.component.html":83135,"components/demo/plugins/popovers/line-chart/line-chart-with-popover.example.component.ts":72553,"components/demo/plugins/popovers/popover-visual-test/popover-visual-test.component.html":3486,"components/demo/plugins/popovers/popover-visual-test/popover-visual-test.component.ts":71547,"components/demo/plugins/tooltips/bar-chart/bar-chart-with-tooltips.example.component.html":75218,"components/demo/plugins/tooltips/bar-chart/bar-chart-with-tooltips.example.component.ts":20751,"components/demo/plugins/tooltips/chart-docs-tooltips.component.html":63858,"components/demo/plugins/tooltips/chart-docs-tooltips.component.ts":88790,"components/demo/plugins/tooltips/chart-docs-tooltips.module.ts":61755,"components/demo/plugins/tooltips/donut-chart/donut-chart-with-tooltips.example.component.html":20059,"components/demo/plugins/tooltips/donut-chart/donut-chart-with-tooltips.example.component.ts":4583,"components/demo/plugins/tooltips/line-chart/line-chart-with-tooltips.example.component.html":63675,"components/demo/plugins/tooltips/line-chart/line-chart-with-tooltips.example.component.ts":41976,"components/demo/plugins/tooltips/visual-test/tooltips-visual-test.component.html":60983,"components/demo/plugins/tooltips/visual-test/tooltips-visual-test.component.less":32410,"components/demo/plugins/tooltips/visual-test/tooltips-visual-test.component.ts":93748};function i(n){var t=a(n);return e(t)}function a(n){if(!e.o(o,n)){var t=new Error("Cannot find module '"+n+"'");throw t.code="MODULE_NOT_FOUND",t}return o[n]}i.keys=function(){return Object.keys(o)},i.resolve=a,n.exports=i,i.id=82892},73455:function(n,t,e){"use strict";e.r(t),e.d(t,{ChartDocsPluginsModule:function(){return l}});var o=e(64762),i=e(66266),a=e(28425),r=e(33018);const s=[{path:"tooltips",loadChildren:()=>(0,o.mG)(void 0,void 0,void 0,function*(){return Promise.all([e.e(1021),e.e(8592),e.e(7218)]).then(e.bind(e,47218)).then(n=>n.ChartDocsTooltipsModule)})},{path:"popovers",loadChildren:()=>(0,o.mG)(void 0,void 0,void 0,function*(){return Promise.all([e.e(1021),e.e(8592),e.e(629)]).then(e.bind(e,20629)).then(n=>n.ChartDocsPopoversModule)})}];let l=(()=>{class n{}return n.\u0275fac=function(t){return new(t||n)},n.\u0275mod=r.oAB({type:n}),n.\u0275inj=r.cJS({providers:[{provide:a.V3$,useFactory:()=>e(82892)}],imports:[[i.Bz.forChild(s)]]}),n})()},19655:function(n,t,e){"use strict";e.r(t),t.default='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule } from "@angular/core";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport { DEMO_PATH_TOKEN } from "@nova-ui/bits";\n\nconst exampleRoutes: Routes = [\n    {\n        path: "tooltips",\n        loadChildren: async () =>\n            import(\n                "components/demo/plugins/tooltips/chart-docs-tooltips.module"\n            ).then((m) => m.ChartDocsTooltipsModule),\n    },\n    {\n        path: "popovers",\n        loadChildren: async () =>\n            import(\n                "components/demo/plugins/popovers/chart-docs-popovers.module"\n            ).then((m) => m.ChartDocsPopoversModule),\n    },\n];\n\n@NgModule({\n    declarations: [],\n    imports: [RouterModule.forChild(exampleRoutes)],\n    providers: [\n        {\n            provide: DEMO_PATH_TOKEN,\n            useFactory: () =>\n                (<any>require).context(\n                    `!!raw-loader!./`,\n                    true,\n                    /.*\\.(ts|html|less)$/\n                ),\n        },\n    ],\n})\nexport class ChartDocsPluginsModule {}\n'},55392:function(n,t,e){"use strict";e.r(t),t.default='<nui-chart class="d-flex" [chart]="chartAssist.chart"></nui-chart>\n\n<nui-chart-popover\n    [plugin]="popoverPlugin"\n    [template]="popoverTemplate"\n></nui-chart-popover>\n\n<ng-template #popoverTemplate let-dataPoints="dataPoints">\n    <div class="p-2">\n        <div *ngFor="let item of dataPoints | keyvalue">\n            <strong>{{ item.value.dataSeries.name }}: </strong>\n            <code>{{ item.value.data }}</code>\n        </div>\n    </div>\n</ng-template>\n'},7122:function(n,t,e){"use strict";e.r(t),t.default='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    barAccessors,\n    barGrid,\n    BarRenderer,\n    barScales,\n    BarSeriesHighlightStrategy,\n    Chart,\n    ChartAssist,\n    ChartPopoverPlugin,\n    InteractionLabelPlugin,\n    XYGridConfig,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-bar-chart-with-popover-example",\n    templateUrl: "./bar-chart-with-popover.example.component.html",\n})\nexport class BarChartWithPopoverExampleComponent implements OnInit {\n    public chartAssist = new ChartAssist(new Chart(barGrid()));\n    public popoverPlugin = new ChartPopoverPlugin();\n\n    ngOnInit() {\n        // plugin setup (absence of InteractionLinePlugin setup will result in no interaction line)\n        this.chartAssist.chart.addPlugin(new InteractionLabelPlugin());\n        this.chartAssist.chart.addPlugin(this.popoverPlugin);\n\n        // grid configuration\n        const gridConfig = <XYGridConfig>(\n            this.chartAssist.chart.getGrid().config()\n        );\n        gridConfig.interactionPlugins = false;\n\n        const accessors = barAccessors();\n        const renderer = new BarRenderer({\n            highlightStrategy: new BarSeriesHighlightStrategy("x"),\n        });\n        const scales = barScales();\n\n        // tell the chart assist to populate the chart\n        this.chartAssist.update(\n            getData().map((s) => ({\n                ...s,\n                accessors,\n                renderer,\n                scales,\n            }))\n        );\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        { id: "chrome", name: "Chrome", data: [20] },\n        { id: "safari", name: "Safari", data: [14] },\n        { id: "firefox", name: "Firefox", data: [5] },\n        { id: "uc ", name: "UC Browser", data: [4] },\n        { id: "opera", name: "Opera", data: [3] },\n        { id: "edge", name: "Edge", data: [3] },\n        { id: "other", name: "Other", data: [5] },\n    ];\n}\n'},70582:function(n,t,e){"use strict";e.r(t),t.default='<h1>Popovers</h1>\n\n<h2>Line Chart</h2>\n<p>To set up a popover for a line chart, do the following:</p>\n<ol>\n    <li>\n        Create an instance if the\n        <code\n            ><a href="../classes/ChartPopoverPlugin.html" target="_blank"\n                >ChartPopoverPlugin</a\n            ></code\n        >\n        <br />\n        Plugin Configuration - You can optionally pass an argument of type\n        <code\n            ><a href="../interfaces/IPopoverPluginConfig.html" target="_blank"\n                >IPopoverPluginConfig</a\n            ></code\n        >\n        to the plugin\'s constructor. Each of the configuration properties is\n        optional:\n        <ul>\n            <li>\n                <code\n                    ><a\n                        href="../classes/ChartPopoverPlugin.html#eventStreamId"\n                        target="_blank"\n                        >eventStreamId</a\n                    ></code\n                >\n                - Specify either <code>INTERACTION_DATA_POINTS_EVENT</code> or\n                <code>INTERACTION_DATA_POINT_EVENT</code> to configure which\n                event the plugin responds to. The default value for this\n                property is <code>INTERACTION_DATA_POINTS_EVENT</code> which is\n                supported by line, pie, donut, area, and bar charts and will\n                position the popover in relation to the center point between the\n                leftmost and rightmost data points in the payload.\n                <code>INTERACTION_DATA_POINT_EVENT</code> is supported by line\n                and area charts and will position the popover in relation to a\n                single data point\'s horizontal position on the chart. For more\n                information on chart events, take a look at\n                <a\n                    href="../additional-documentation/advanced-usage/events.html"\n                    target="_parent"\n                    >this</a\n                >\n                page.\n            </li>\n            <li>\n                <code\n                    ><a\n                        href="../classes/ChartPopoverPlugin.html#interactionType"\n                        target="_blank"\n                        >interactionType</a\n                    ></code\n                >\n                - Specify the\n                <code\n                    ><a\n                        href="../miscellaneous/enumerations.html#InteractionType"\n                        target="_blank"\n                        >InteractionType</a\n                    ></code\n                >\n                that will trigger the showing and hiding of popovers. The\n                default value for this property is\n                <code>InteractionType.MouseMove</code>.\n            </li>\n        </ul>\n    </li>\n    <li>\n        Register the plugin with the chart using the chart\'s\n        <code\n            ><a href="../classes/Chart.html#addPlugin" target="_blank"\n                >addPlugin</a\n            ></code\n        >\n        method\n        <pre>{{ popoverTypeScript }}</pre>\n    </li>\n    <li>\n        Create a\n        <code\n            ><a href="../components/ChartPopoverComponent.html" target="_blank"\n                >nui-chart-popover</a\n            ></code\n        >\n        component on the template\n    </li>\n    <li>Pass the plugin to the component\'s plugin input</li>\n    <li>\n        Create an ng-template and pass it to the component\'s template input\n        <pre>{{ popoverHtml }}</pre>\n    </li>\n</ol>\n<nui-example-wrapper\n    filenamePrefix="line-chart-with-popover"\n    exampleTitle="Line Chart"\n>\n    <nui-line-chart-with-popover-example></nui-line-chart-with-popover-example>\n</nui-example-wrapper>\n\n<h2>Bar Chart</h2>\n<p>\n    Popovers can be added to a bar chart in the same way as for line charts.\n    Please see above. It\'s recommended that the interaction line be turned off\n    by setting the interactionPlugins property on the grid configuration to\n    false and then enabling the interaction label by adding the\n    InteractionLabelPlugin to the chart manually.\n</p>\n<p>\n    It\'s also recommended that you set the interactive property on the grid\n    configuration to true. This will result in the popover being displayed when\n    hovering in the space above each bar as opposed to only displaying the\n    popover when hovering over the bar itself.\n</p>\n<nui-example-wrapper\n    filenamePrefix="bar-chart-with-popover"\n    exampleTitle="Bar Chart"\n>\n    <nui-bar-chart-with-popover-example></nui-bar-chart-with-popover-example>\n</nui-example-wrapper>\n\n<h2>Donut Chart</h2>\n<p>\n    Popovers can be added to a donut chart in the same way as for line charts,\n    but using\n    <code\n        ><a href="../classes/ChartPopoverPlugin.html" target="_blank"\n            >RadialPopoverPlugin</a\n        ></code\n    >. The following example also demonstrates how to create a custom color\n    accessor for status.\n</p>\n<nui-example-wrapper\n    filenamePrefix="donut-chart-with-popover"\n    exampleTitle="Donut Chart"\n>\n    <nui-donut-chart-with-popover-example></nui-donut-chart-with-popover-example>\n</nui-example-wrapper>\n'},41026:function(n,t,e){"use strict";e.r(t),t.default='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "nui-chart-docs-popovers",\n    templateUrl: "./chart-docs-popovers.component.html",\n})\nexport class ChartDocsPopoversComponent {\n    public popoverTypeScript = `this.popoverPlugin = new ChartPopoverPlugin();\nthis.chart.addPlugin(this.popoverPlugin);\n...`;\n    public popoverHtml = `...\n<nui-chart-popover [plugin]="popoverPlugin" [template]="popoverTemplate"></nui-chart-popover>\n\n<ng-template #popoverTemplate let-dataPoints="dataPoints">\n    <div class="p-3">\n        <div *ngFor="let item of dataPoints | keyvalue">\n            <strong>{{item.key}}: </strong>\n            <code>{{item.value.data | json}}</code>\n        </div>\n    </div>\n</ng-template>\n...`;\n}\n'},65168:function(n,t,e){"use strict";e.r(t),t.default='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule } from "@angular/core";\nimport { FormsModule } from "@angular/forms";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport {\n    DEMO_PATH_TOKEN,\n    NuiDocsModule,\n    NuiIconModule,\n    NuiMessageModule,\n    SrlcStage,\n} from "@nova-ui/bits";\nimport { NuiChartsModule } from "@nova-ui/charts";\n\nimport { DemoCommonModule } from "../../common/demo-common.module";\nimport { BarChartWithPopoverExampleComponent } from "./bar-chart/bar-chart-with-popover.example.component";\nimport { ChartDocsPopoversComponent } from "./chart-docs-popovers.component";\nimport { DonutChartWithPopoverExampleComponent } from "./donut-chart/donut-chart-with-popover.example.component";\nimport { LineChartWithPopoverExampleComponent } from "./line-chart/line-chart-with-popover.example.component";\nimport { PopoverVisualTestComponent } from "./popover-visual-test/popover-visual-test.component";\n\nconst exampleRoutes: Routes = [\n    {\n        path: "",\n        component: ChartDocsPopoversComponent,\n        data: {\n            srlc: {\n                stage: SrlcStage.beta,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n    {\n        path: "bar",\n        component: BarChartWithPopoverExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "line",\n        component: LineChartWithPopoverExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "visual-test",\n        component: PopoverVisualTestComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    declarations: [\n        BarChartWithPopoverExampleComponent,\n        DonutChartWithPopoverExampleComponent,\n        ChartDocsPopoversComponent,\n        LineChartWithPopoverExampleComponent,\n        PopoverVisualTestComponent,\n    ],\n    imports: [\n        DemoCommonModule,\n        FormsModule,\n        NuiChartsModule,\n        NuiIconModule,\n        NuiDocsModule,\n        NuiMessageModule,\n        RouterModule.forChild(exampleRoutes),\n    ],\n    providers: [\n        {\n            provide: DEMO_PATH_TOKEN,\n            useFactory: () =>\n                (<any>require).context(\n                    `!!raw-loader!./`,\n                    true,\n                    /.*\\.(ts|html|less)$/\n                ),\n        },\n    ],\n})\nexport class ChartDocsPopoversModule {}\n'},4554:function(n,t,e){"use strict";e.r(t),t.default='<nui-chart class="d-flex" [chart]="chartAssist.chart"></nui-chart>\n<nui-chart-popover\n    [plugin]="popoverPlugin"\n    [template]="popoverTemplate"\n></nui-chart-popover>\n\n<ng-template #popoverTemplate let-dataPoints="dataPoints">\n    <div class="p-2">\n        <div *ngFor="let item of dataPoints | keyvalue">\n            <strong>{{ item.value.dataSeries.name | titlecase }}: </strong>\n            <code>{{ item.value.data.data }}</code>\n        </div>\n    </div>\n</ng-template>\n'},23015:function(n,t,e){"use strict";e.r(t),t.default='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    Chart,\n    ChartAssist,\n    CHART_PALETTE_CS_S,\n    MappedValueProvider,\n    radial,\n    RadialAccessors,\n    radialGrid,\n    RadialPopoverPlugin,\n    RadialRenderer,\n    radialScales,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-donut-chart-with-popover-example",\n    templateUrl: "./donut-chart-with-popover.example.component.html",\n})\nexport class DonutChartWithPopoverExampleComponent implements OnInit {\n    public popoverPlugin: RadialPopoverPlugin;\n    public chartAssist = new ChartAssist(new Chart(radialGrid()), radial);\n\n    public ngOnInit() {\n        // plugin setup\n        this.popoverPlugin = new RadialPopoverPlugin();\n        this.chartAssist.chart.addPlugin(this.popoverPlugin);\n\n        // accessors setup for colors\n        const accessors = new RadialAccessors();\n        const statusColorProvider = createStatusColorProvider();\n        accessors.series.color = statusColorProvider.get;\n\n        const renderer = new RadialRenderer();\n        const scales = radialScales();\n\n        // chart assist setup\n        this.chartAssist.update(\n            getData().map((s) => ({\n                ...s,\n                accessors,\n                scales,\n                renderer,\n            }))\n        );\n    }\n}\n\nenum Status {\n    Up = "up",\n    Warning = "warning",\n    Critical = "critical",\n    Down = "down",\n    Unmanaged = "unmanaged",\n    Unknown = "unknown",\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        { status: Status.Up, value: 42 },\n        { status: Status.Warning, value: 14 },\n        { status: Status.Critical, value: 8 },\n        { status: Status.Down, value: 7 },\n        { status: Status.Unmanaged, value: 5 },\n        { status: Status.Unknown, value: 3 },\n    ].map((d) => ({ id: d.status, name: d.status, data: [d.value] }));\n}\n\nfunction createStatusColorProvider() {\n    return new MappedValueProvider<string>({\n        [Status.Up]: CHART_PALETTE_CS_S[4],\n        [Status.Warning]: CHART_PALETTE_CS_S[2],\n        [Status.Critical]: CHART_PALETTE_CS_S[1],\n        [Status.Down]: CHART_PALETTE_CS_S[0],\n        [Status.Unmanaged]: CHART_PALETTE_CS_S[5],\n        [Status.Unknown]: CHART_PALETTE_CS_S[3],\n    });\n}\n'},83135:function(n,t,e){"use strict";e.r(t),t.default='<nui-chart class="d-flex" [chart]="chart"></nui-chart>\n\n<nui-chart-popover\n    [plugin]="popoverPlugin"\n    [template]="popoverTemplate"\n></nui-chart-popover>\n\n<ng-template let-dataPoints="dataPoints" #popoverTemplate>\n    <div class="p-3">\n        <div *ngFor="let item of dataPoints | keyvalue">\n            <strong>{{ item.key }}: </strong>\n            <code>{{ item.value.data | json }}</code>\n        </div>\n    </div>\n</ng-template>\n'},72553:function(n,t,e){"use strict";e.r(t),t.default='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\nimport moment from "moment/moment";\n\nimport {\n    Chart,\n    ChartAssist,\n    ChartPopoverPlugin,\n    IChartSeries,\n    ILineAccessors,\n    IXYScales,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    TimeScale,\n    XYGrid,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-line-chart-with-popover-example",\n    templateUrl: "./line-chart-with-popover.example.component.html",\n})\nexport class LineChartWithPopoverExampleComponent implements OnInit {\n    public chart = new Chart(new XYGrid());\n\n    public chartAssist: ChartAssist = new ChartAssist(this.chart);\n    public popoverPlugin = new ChartPopoverPlugin();\n\n    public ngOnInit() {\n        const scales: IXYScales = {\n            x: new TimeScale(),\n            y: new LinearScale(),\n        };\n        const renderer = new LineRenderer();\n        // providing chartAssist colors and markers to LineAccessors will share them with the line chart\n        const accessors = new LineAccessors(\n            this.chartAssist.palette.standardColors,\n            this.chartAssist.markers\n        );\n\n        const seriesSet: IChartSeries<ILineAccessors>[] = getData().map(\n            (s) => ({\n                ...s,\n                scales,\n                renderer,\n                accessors,\n            })\n        );\n\n        // plugin setup\n        this.chart.addPlugin(this.popoverPlugin);\n\n        // chart assist needs to be used to update data\n        this.chartAssist.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    const format = "YYYY-MM-DDTHH:mm:ssZ";\n\n    return [\n        {\n            id: "series-1",\n            name: "Series 1",\n            data: [\n                { x: moment("2016-12-25T15:14:29.909Z", format), y: 30 },\n                { x: moment("2016-12-27T15:14:29.909Z", format), y: 95 },\n                { x: moment("2016-12-29T15:14:29.909Z", format), y: 15 },\n                { x: moment("2016-12-31T15:14:29.909Z", format), y: 60 },\n                { x: moment("2017-01-03T15:14:29.909Z", format), y: 35 },\n            ],\n        },\n        {\n            id: "series-2",\n            name: "Series 2",\n            data: [\n                { x: moment("2016-12-25T15:14:29.909Z", format), y: 60 },\n                { x: moment("2016-12-27T15:14:29.909Z", format), y: 40 },\n                { x: moment("2016-12-29T15:14:29.909Z", format), y: 70 },\n                { x: moment("2016-12-31T15:14:29.909Z", format), y: 45 },\n                { x: moment("2017-01-03T15:14:29.909Z", format), y: 90 },\n            ],\n        },\n    ];\n}\n'},3486:function(n,t,e){"use strict";e.r(t),t.default='<charts-test-harness>\n    <div id="visual-test-bottom-position-popover">\n        <nui-line-chart-with-popover-example></nui-line-chart-with-popover-example>\n    </div>\n\n    \x3c!-- Tall element for testing relative positioning of popovers --\x3e\n    <div style="height: 150px"></div>\n\n    \x3c!-- Relative parent for testing relative positioning of popovers --\x3e\n    <div style="position: relative">\n        <div id="visual-test-bar-chart-popover">\n            <nui-bar-chart-with-popover-example></nui-bar-chart-with-popover-example>\n        </div>\n        <div id="visual-test-donut-chart-popover">\n            <nui-donut-chart-with-popover-example></nui-donut-chart-with-popover-example>\n        </div>\n        <div id="visual-test-line-chart-popover">\n            <nui-line-chart-with-popover-example></nui-line-chart-with-popover-example>\n        </div>\n    </div>\n</charts-test-harness>\n'},71547:function(n,t,e){"use strict";e.r(t),t.default='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "nui-chart-popover-visual-test",\n    templateUrl: "./popover-visual-test.component.html",\n})\nexport class PopoverVisualTestComponent {}\n'},75218:function(n,t,e){"use strict";e.r(t),t.default='<nui-chart class="d-flex" [chart]="chartAssist.chart"></nui-chart>\n\n<nui-chart-tooltips\n    [plugin]="tooltipsPlugin"\n    [template]="tooltipTemplate"\n></nui-chart-tooltips>\n\n<ng-template let-dataPoint="dataPoint" #tooltipTemplate>\n    <div class="p-1 d-flex align-items-center">\n        <nui-chart-marker\n            [marker]="chartAssist.markers.get(dataPoint.seriesId)"\n            [color]="chartAssist.palette.standardColors.get(dataPoint.seriesId)"\n        ></nui-chart-marker>\n        <span class="pl-2">{{ dataPoint.data }}</span>\n    </div>\n</ng-template>\n'},20751:function(n,t,e){"use strict";e.r(t),t.default='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    barAccessors,\n    barGrid,\n    BarRenderer,\n    barScales,\n    BarSeriesHighlightStrategy,\n    BarTooltipsPlugin,\n    Chart,\n    ChartAssist,\n    InteractionLabelPlugin,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-bar-chart-with-tooltips-example",\n    templateUrl: "./bar-chart-with-tooltips.example.component.html",\n})\nexport class BarChartWithTooltipsExampleComponent implements OnInit {\n    public grid = barGrid();\n\n    public chartAssist = new ChartAssist(new Chart(this.grid));\n    public tooltipsPlugin = new BarTooltipsPlugin();\n\n    ngOnInit() {\n        // plugin setup (absence of InteractionLinePlugin setup will result in no interaction line)\n        this.chartAssist.chart.addPlugin(new InteractionLabelPlugin());\n        this.chartAssist.chart.addPlugin(this.tooltipsPlugin);\n\n        // grid configuration\n        this.grid.config().interactionPlugins = false;\n\n        // map each category to a specific color\n        const accessors = barAccessors(\n            undefined,\n            this.chartAssist.palette.standardColors\n        );\n\n        const renderer = new BarRenderer({\n            highlightStrategy: new BarSeriesHighlightStrategy("x"),\n        });\n        const scales = barScales();\n\n        // tell the chart assist to populate the chart\n        this.chartAssist.update(\n            getData().map((s) => ({\n                ...s,\n                accessors,\n                renderer,\n                scales,\n            }))\n        );\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        { id: "chrome", name: "Chrome", data: [20] },\n        { id: "safari", name: "Safari", data: [14] },\n        { id: "firefox", name: "Firefox", data: [5] },\n        { id: "uc ", name: "UC Browser", data: [4] },\n        { id: "opera", name: "Opera", data: [3] },\n        { id: "edge", name: "Edge", data: [3] },\n        { id: "other", name: "Other", data: [5] },\n    ];\n}\n'},63858:function(n,t,e){"use strict";e.r(t),t.default='<h1>Tooltips</h1>\n\n<h2>Line Chart</h2>\n<p>To set up tooltips for a line chart, do the following:</p>\n<ol>\n    <li>\n        Create an instance if the\n        <code\n            ><a href="../classes/ChartTooltipsPlugin.html" target="_blank"\n                >ChartTooltipsPlugin</a\n            ></code\n        >\n    </li>\n    <li>\n        Register the plugin with the chart using the chart\'s addPlugin method\n        <pre>{{ tooltipsTypeScript }}</pre>\n    </li>\n    <li>\n        Create a\n        <code\n            ><a href="../components/ChartTooltipsComponent.html" target="_blank"\n                >nui-chart-tooltips</a\n            ></code\n        >\n        component on the template\n    </li>\n    <li>Pass the plugin to the component\'s plugin input</li>\n    <li>\n        Create an ng-template and pass it to the component\'s template input\n        <pre>{{ tooltipsHtml }}</pre>\n    </li>\n</ol>\n<nui-example-wrapper\n    filenamePrefix="line-chart-with-tooltips"\n    exampleTitle="Line Chart"\n>\n    <nui-line-chart-with-tooltips-example></nui-line-chart-with-tooltips-example>\n</nui-example-wrapper>\n\n<h2>Bar Chart</h2>\n<p>\n    Tooltips can be added to a bar chart in the same way as for line charts.\n    Please see above. It\'s recommended that the interaction line be turned off\n    by setting the interactionPlugins property on the grid configuration to\n    false and then enabling the interaction label by adding the\n    InteractionLabelPlugin to the chart manually.\n</p>\n<p>\n    It\'s also recommended that you set the interactive property on the grid\n    configuration to true. This will result in the popover being displayed when\n    hovering in the space above each bar as opposed to only displaying the\n    popover when hovering over the bar itself.\n</p>\n<p>\n    In addition to the above, the following example also configures a custom\n    marker provider and color provider for use by the tooltip.\n</p>\n<nui-example-wrapper\n    filenamePrefix="bar-chart-with-tooltips"\n    exampleTitle="Bar Chart"\n>\n    <nui-bar-chart-with-tooltips-example></nui-bar-chart-with-tooltips-example>\n</nui-example-wrapper>\n\n<h2>Donut Chart</h2>\n<p>\n    Tooltips are added to a donut or pie chart in a way that\'s similar to adding\n    them to a line or bar chart. The only difference is the type of the plugin\n    that\'s used. Instead of the standard\n    <code\n        ><a href="../classes/ChartTooltipsPlugin.html" target="_blank"\n            >ChartTooltipsPlugin</a\n        ></code\n    >, you must use the\n    <code\n        ><a href="../classes/RadialTooltipsPlugin.html" target="_blank"\n            >RadialTooltipsPlugin</a\n        ></code\n    >.\n</p>\n<p>\n    In addition to the above, the following example also configures a custom\n    color accessor, and makes use of the category value in the data for\n    determining which icon to use in the tooltip.\n</p>\n<nui-message type="warning" [allowDismiss]="false">\n    <strong>Note: </strong> To change the chart in the following example to a\n    pie, all you need to do is instantiate a\n    <code\n        ><a href="../classes/PieChartAssist.html" target="_blank"\n            >PieChartAssist</a\n        ></code\n    >\n    instead of a\n    <code\n        ><a href="../classes/DonutChartAssist.html" target="_blank"\n            >DonutChartAssist</a\n        ></code\n    >.\n</nui-message>\n<nui-example-wrapper\n    filenamePrefix="donut-chart-with-tooltips"\n    exampleTitle="Donut Chart"\n>\n    <nui-donut-chart-with-tooltips-example></nui-donut-chart-with-tooltips-example>\n</nui-example-wrapper>\n'},88790:function(n,t,e){"use strict";e.r(t),t.default='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "nui-chart-docs-tooltips",\n    templateUrl: "./chart-docs-tooltips.component.html",\n})\nexport class ChartDocsTooltipsComponent {\n    public tooltipsTypeScript = `this.tooltipsPlugin = new ChartTooltipsPlugin();\nthis.chart.addPlugin(this.tooltipsPlugin);\n...`;\n    public tooltipsHtml = `...\n<nui-chart-tooltips [plugin]="tooltipsPlugin" [template]="tooltipTemplate"></nui-chart-tooltips>\n\n<ng-template let-dataPoint="dataPoint"\n             #tooltipTemplate>\n    <div class="p-1 d-flex align-items-center">\n        <nui-chart-marker [marker]="chartAssist.markers.get(dataPoint.seriesId)"\n                          [color]="chartAssist.palette.standardColors.get(dataPoint.seriesId)"></nui-chart-marker>\n        <span class="pl-2">{{dataPoint.data.y}}</span>\n    </div>\n</ng-template>\n...`;\n}\n'},61755:function(n,t,e){"use strict";e.r(t),t.default='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule } from "@angular/core";\nimport { FormsModule } from "@angular/forms";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport {\n    DEMO_PATH_TOKEN,\n    NuiDocsModule,\n    NuiIconModule,\n    NuiMessageModule,\n    SrlcStage,\n} from "@nova-ui/bits";\nimport { NuiChartsModule } from "@nova-ui/charts";\n\nimport { DemoCommonModule } from "../../common/demo-common.module";\nimport { BarChartWithTooltipsExampleComponent } from "./bar-chart/bar-chart-with-tooltips.example.component";\nimport { ChartDocsTooltipsComponent } from "./chart-docs-tooltips.component";\nimport { DonutChartWithTooltipsExampleComponent } from "./donut-chart/donut-chart-with-tooltips.example.component";\nimport { LineChartWithTooltipsExampleComponent } from "./line-chart/line-chart-with-tooltips.example.component";\nimport { TooltipsVisualTestComponent } from "./visual-test/tooltips-visual-test.component";\n\nconst exampleRoutes: Routes = [\n    {\n        path: "",\n        component: ChartDocsTooltipsComponent,\n        data: {\n            srlc: {\n                stage: SrlcStage.beta,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n    {\n        path: "line",\n        component: LineChartWithTooltipsExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "bar",\n        component: BarChartWithTooltipsExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "visual-test",\n        component: TooltipsVisualTestComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    declarations: [\n        BarChartWithTooltipsExampleComponent,\n        ChartDocsTooltipsComponent,\n        LineChartWithTooltipsExampleComponent,\n        DonutChartWithTooltipsExampleComponent,\n        TooltipsVisualTestComponent,\n    ],\n    imports: [\n        DemoCommonModule,\n        FormsModule,\n        NuiChartsModule,\n        NuiIconModule,\n        NuiDocsModule,\n        NuiMessageModule,\n        RouterModule.forChild(exampleRoutes),\n    ],\n    providers: [\n        {\n            provide: DEMO_PATH_TOKEN,\n            useFactory: () =>\n                (<any>require).context(\n                    `!!raw-loader!./`,\n                    true,\n                    /.*\\.(ts|html|less)$/\n                ),\n        },\n    ],\n})\nexport class ChartDocsTooltipsModule {}\n'},20059:function(n,t,e){"use strict";e.r(t),t.default='<nui-chart class="d-flex" [chart]="chartAssist.chart"></nui-chart>\n<nui-chart-tooltips\n    [plugin]="tooltipsPlugin"\n    [template]="donutTooltipTemplate"\n></nui-chart-tooltips>\n\n<ng-template let-dataPoint="dataPoint" #donutTooltipTemplate>\n    <div class="p-1 d-flex align-items-center">\n        <nui-icon [icon]="\'status_\' + dataPoint.dataSeries.name"></nui-icon>\n        <span class="pl-2">{{ dataPoint.data.data | number }}</span>\n    </div>\n</ng-template>\n'},4583:function(n,t,e){"use strict";e.r(t),t.default='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    Chart,\n    ChartAssist,\n    ChartPalette,\n    CHART_PALETTE_CS_S,\n    MappedValueProvider,\n    radial,\n    RadialAccessors,\n    radialGrid,\n    RadialRenderer,\n    radialScales,\n    RadialTooltipsPlugin,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-donut-chart-with-tooltips-example",\n    templateUrl: "./donut-chart-with-tooltips.example.component.html",\n})\nexport class DonutChartWithTooltipsExampleComponent implements OnInit {\n    public chartAssist = new ChartAssist(\n        new Chart(radialGrid()),\n        radial,\n        new ChartPalette(createStatusColorProvider())\n    );\n\n    // RadialTooltipsPlugin handles specific positioning requirements for tooltips on a donut chart\n    public tooltipsPlugin = new RadialTooltipsPlugin();\n\n    public ngOnInit() {\n        // plugin setup\n        this.chartAssist.chart.addPlugin(this.tooltipsPlugin);\n\n        // accessors setup for colors\n        const accessors = new RadialAccessors(\n            this.chartAssist.palette.standardColors\n        );\n\n        const scales = radialScales();\n        const renderer = new RadialRenderer();\n\n        this.chartAssist.update(\n            getData().map((s) => ({\n                ...s,\n                accessors,\n                scales,\n                renderer,\n            }))\n        );\n    }\n}\n\nenum Status {\n    Up = "up",\n    Warning = "warning",\n    Critical = "critical",\n    Down = "down",\n    Unmanaged = "unmanaged",\n    Unknown = "unknown",\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        { status: Status.Up, value: 42 },\n        { status: Status.Warning, value: 14 },\n        { status: Status.Critical, value: 8 },\n        { status: Status.Down, value: 7 },\n        { status: Status.Unmanaged, value: 5 },\n        { status: Status.Unknown, value: 3 },\n    ].map((d) => ({ id: d.status, name: d.status, data: [d.value] }));\n}\n\nfunction createStatusColorProvider() {\n    return new MappedValueProvider<string>({\n        [Status.Up]: CHART_PALETTE_CS_S[4],\n        [Status.Warning]: CHART_PALETTE_CS_S[2],\n        [Status.Critical]: CHART_PALETTE_CS_S[1],\n        [Status.Down]: CHART_PALETTE_CS_S[0],\n        [Status.Unmanaged]: CHART_PALETTE_CS_S[5],\n        [Status.Unknown]: CHART_PALETTE_CS_S[3],\n    });\n}\n'},63675:function(n,t,e){"use strict";e.r(t),t.default='<div class="nui-chart-layout">\n    <div class="chart">\n        <nui-chart class="w-100" [chart]="chart"></nui-chart>\n    </div>\n    <div class="legend">\n        <nui-legend\n            seriesUnitLabel="sec"\n            [active]="chartAssist.isLegendActive"\n            [interactive]="true"\n            (mouseleave)="chartAssist.resetVisibleSeries()"\n        >\n            <nui-legend-series\n                *ngFor="\n                    let legendSeries of chartAssist.legendSeriesSet;\n                    trackBy: chartAssist.seriesTrackByFn\n                "\n                [descriptionPrimary]="legendSeries[\'name\']"\n                (mouseenter)="chartAssist.emphasizeSeries(legendSeries.id)"\n                [seriesRenderState]="\n                    chartAssist.renderStatesIndex[legendSeries.id]?.state\n                "\n                [isSelected]="!chartAssist.isSeriesHidden(legendSeries.id)"\n                (isSelectedChange)="\n                    chartAssist.toggleSeries(legendSeries.id, $event)\n                "\n            >\n                <nui-rich-legend-tile\n                    [value]="chartAssist.getHighlightedValue(legendSeries, \'y\')"\n                    [backgroundColor]="\n                        chartAssist.palette.standardColors.get(legendSeries.id)\n                    "\n                    [color]="\n                        chartAssist.palette.textColors.get(legendSeries.id)\n                    "\n                >\n                    <nui-chart-marker\n                        rightEdge\n                        [marker]="chartAssist.markers.get(legendSeries.id)"\n                        [color]="\n                            chartAssist.palette.standardColors.get(\n                                legendSeries.id\n                            )\n                        "\n                    >\n                    </nui-chart-marker>\n                </nui-rich-legend-tile>\n            </nui-legend-series>\n        </nui-legend>\n    </div>\n</div>\n\n<nui-chart-tooltips\n    [plugin]="tooltipsPlugin"\n    [template]="tooltipTemplate"\n></nui-chart-tooltips>\n\n<ng-template let-dataPoint="dataPoint" #tooltipTemplate>\n    <div class="p-1 d-flex align-items-center">\n        <nui-chart-marker\n            [marker]="chartAssist.markers.get(dataPoint.seriesId)"\n            [color]="chartAssist.palette.standardColors.get(dataPoint.seriesId)"\n        ></nui-chart-marker>\n        <span class="pl-2">{{ dataPoint.data.y }}</span>\n    </div>\n</ng-template>\n'},41976:function(n,t,e){"use strict";e.r(t),t.default='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    OnInit,\n} from "@angular/core";\nimport moment from "moment/moment";\n\nimport {\n    Chart,\n    ChartAssist,\n    ChartTooltipsPlugin,\n    IChartSeries,\n    ILineAccessors,\n    IXYScales,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    TimeScale,\n    XYGrid,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-line-chart-with-tooltips-example",\n    templateUrl: "./line-chart-with-tooltips.example.component.html",\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LineChartWithTooltipsExampleComponent implements OnInit {\n    public chart = new Chart(new XYGrid());\n    public chartAssist = new ChartAssist(this.chart);\n    public tooltipsPlugin = new ChartTooltipsPlugin();\n\n    constructor(private changeDetector: ChangeDetectorRef) {}\n\n    public ngOnInit() {\n        // this is necessary to make the chart work in OnPush change detection mode\n        this.chartAssist.onEvent = () => this.changeDetector.detectChanges();\n\n        // plugin setup\n        this.chart.addPlugin(this.tooltipsPlugin);\n\n        // providing chartAssist colors and markers to LineAccessors will share them with the line chart\n        const accessors = new LineAccessors(\n            this.chartAssist.palette.standardColors,\n            this.chartAssist.markers\n        );\n        const renderer = new LineRenderer();\n        const scales: IXYScales = {\n            x: new TimeScale(),\n            y: new LinearScale(),\n        };\n\n        const seriesSet: IChartSeries<ILineAccessors>[] = getData().map(\n            (d) => ({\n                ...d,\n                accessors,\n                renderer,\n                scales,\n            })\n        );\n\n        // chart assist needs to be used to update the chart\'s data\n        this.chartAssist.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    const format = "YYYY-MM-DDTHH:mm:ssZ";\n\n    return [\n        {\n            id: "series-1",\n            name: "Series 1",\n            data: [\n                { x: moment("2016-12-25T15:14:29.909Z", format), y: 30 },\n                { x: moment("2016-12-27T15:14:29.909Z", format), y: 95 },\n                { x: moment("2016-12-29T15:14:29.909Z", format), y: 15 },\n                { x: moment("2016-12-31T15:14:29.909Z", format), y: 60 },\n                { x: moment("2017-01-03T15:14:29.909Z", format), y: 35 },\n            ],\n        },\n        {\n            id: "series-2",\n            name: "Series 2",\n            data: [\n                { x: moment("2016-12-25T15:14:29.909Z", format), y: 60 },\n                { x: moment("2016-12-27T15:14:29.909Z", format), y: 40 },\n                { x: moment("2016-12-29T15:14:29.909Z", format), y: 70 },\n                { x: moment("2016-12-31T15:14:29.909Z", format), y: 45 },\n                { x: moment("2017-01-03T15:14:29.909Z", format), y: 90 },\n            ],\n        },\n    ];\n}\n'},60983:function(n,t,e){"use strict";e.r(t),t.default='<charts-test-harness>\n    <nui-bar-chart-with-tooltips-example\n        id="visual-test-bar-chart-tooltips"\n    ></nui-bar-chart-with-tooltips-example>\n    <nui-donut-chart-with-tooltips-example\n        id="visual-test-donut-chart-tooltips"\n    ></nui-donut-chart-with-tooltips-example>\n    <nui-line-chart-with-tooltips-example\n        id="visual-test-line-chart-tooltips"\n    ></nui-line-chart-with-tooltips-example>\n    <div class="scrollable-container">\n        <div class="tall-div"></div>\n        <nui-line-chart-with-tooltips-example\n            id="visual-test-line-chart-tooltips-with-scroll"\n        ></nui-line-chart-with-tooltips-example>\n    </div>\n</charts-test-harness>\n'},93748:function(n,t,e){"use strict";e.r(t),t.default='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "nui-chart-tooltips-visual-test",\n    templateUrl: "./tooltips-visual-test.component.html",\n    styleUrls: ["./tooltips-visual-test.component.less"],\n})\nexport class TooltipsVisualTestComponent {}\n'},32410:function(n){"use strict";n.exports='export default ".scrollable-container {\\n    height: 150px;\\n    overflow: auto;\\n}\\n\\n.tall-div {\\n    height: 150px;\\n}\\n";'}}]);