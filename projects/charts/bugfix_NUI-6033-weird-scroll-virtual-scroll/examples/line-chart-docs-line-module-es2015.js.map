{"version":3,"sources":["./examples/components/demo/chart-types/line/line-chart-interrupted-calculated/line-chart-interrupted-calculated-example.component.ts","./examples/components/demo/chart-types/line/line-chart-with-axis-labels/line-chart-with-axis-labels.example.component.ts","./examples/components/demo/chart-types/line/line-chart-with-2y-axes/line-chart-with-2y-axes-example.component.ts","./examples/components/demo/chart-types/line/line-chart-visual-test/line-chart-visual-test.component.ts","./examples/components/demo/chart-types/line/chart-docs-line.module.ts","./examples/components/demo/chart-types/line/line-chart-with-rich-tile-legend/line-chart-with-rich-tile-legend.example.component.ts","./examples/components/demo/chart-types/line/line-chart-interrupted-path-terminus/line-chart-interrupted-path-terminus-example.component.ts","./examples/components/demo/chart-types/line/line-chart-with-legend/line-chart-with-legend.example.component.ts","./examples/components/demo/chart-types/line/line-chart-test/line-chart-test.component.ts","./examples/components/demo/chart-types/line/line-chart-basic/line-chart-basic.example.component.ts","./examples/components/demo/chart-types/line/chart-docs-line.component.ts","webpack:///./node_modules/raw-loader/dist/cjs.js .*\\.(ts|html|less)$?7cb5","./examples/components/demo/chart-types/line/line-chart-interrupted-basic/line-chart-interrupted-basic-example.component.ts"],"names":[],"mappings":"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","file":"line-chart-docs-line-module-es2015.js","sourcesContent":["import { Component, OnInit } from \"@angular/core\";\nimport {\n    calculateMissingData,\n    Chart,\n    ChartAssist,\n    IChartAssistSeries,\n    IChartSeries,\n    ILineAccessors,\n    IXYScales,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    MissingDataLineRendererConfig,\n    TimeIntervalScale,\n    XYGrid,\n} from \"@nova-ui/charts\";\nimport { duration } from \"moment/moment\";\n\n@Component({\n    selector: \"line-chart-interrupted-calculated-example\",\n    templateUrl: \"./line-chart-interrupted-calculated-example.component.html\",\n})\nexport class LineChartInterruptedCalculatedExampleComponent implements OnInit {\n    // XYGrid is used for rendering axes as well as other grid elements\n    public chart = new Chart(new XYGrid());\n    public chartAssist: ChartAssist = new ChartAssist(this.chart);\n\n    public ngOnInit() {\n        // In case of a line chart, the scale definitions are flexible.\n        // This example demonstrates a scenario with time on the X scale and a numeric value on the Y scale.\n        const interval = duration(1, \"hour\");\n        const xScale = new TimeIntervalScale(interval);\n        const scales: IXYScales = {\n            x: xScale,\n            y: new LinearScale(),\n        };\n\n        const incomingSeries = getData();\n\n        // Here we assemble the complete chart series.\n        const seriesSet: IChartAssistSeries<ILineAccessors>[] = [];\n\n        // The line renderer will make the chart look like a line chart.\n        const renderer = new LineRenderer();\n        // Line accessors let the renderer know how to access x and y domain data respectively from a chart's input data set(s).\n        const accessors = new LineAccessors(this.chartAssist.palette.standardColors, this.chartAssist.markers);\n\n        // Renderer for the missing dataSeries\n        const rendererMissing = new LineRenderer(new MissingDataLineRendererConfig());\n        const accessorsMissing = new LineAccessors(this.chartAssist.palette.standardColors, this.chartAssist.markers);\n        // Link the colors from 'parent' series\n        const origColorAccessor = accessorsMissing.series.color;\n        accessorsMissing.series.color = (seriesId, series) => origColorAccessor?.(seriesId.split(\"__\")[0], series);\n\n        // We need to store the original value of the 'defined' accessor\n        const origDefinedAccessor = accessorsMissing.data.defined;\n        // We're calling the original 'defined' accessor implementation, but inverting it's logic because, from the missing data\n        // series point of view, the undefined data are actually visualized as defined.\n        accessorsMissing.data.defined = (d, i, data, dataSeries) =>\n            !origDefinedAccessor?.(d, i, data, dataSeries) ?? true;\n\n        for (const s of incomingSeries) {\n            // The first data series is for rendering the valid data\n            const cs: IChartSeries<ILineAccessors> = {\n                ...s,\n                accessors,\n                renderer,\n                scales,\n            };\n            // We're using this convenience function to calculate the missing data according to the scale's interval\n            const data = calculateMissingData(cs, \"x\", xScale.interval());\n            // We have to use data that includes the missing data points for the first series as well\n            cs.data = data;\n            seriesSet.push(cs);\n\n            // This series will be used to visualize the missing data points\n            seriesSet.push({\n                // This naming convention will connect these two series and their interaction will be synchronized\n                id: s.id + \"__missing\",\n                data: data,\n                accessors: accessorsMissing,\n                renderer: rendererMissing,\n                scales,\n                showInLegend: false, // We don't want to show this in the legend\n            });\n        }\n\n        // Finally, pass the series set to the chart's update method\n        this.chartAssist.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        {\n            id: \"series-1\",\n            name: \"Series 1\",\n            data: [\n                { x: new Date(2016, 11, 25, 5), y: 30 },\n                { x: new Date(2016, 11, 25, 6), y: 95 },\n                { x: new Date(2016, 11, 25, 7), y: 60 },\n                { x: new Date(2016, 11, 25, 10), y: 75 },\n                { x: new Date(2016, 11, 25, 12), y: 35 },\n                { x: new Date(2016, 11, 25, 13), y: 20 },\n            ],\n        },\n    ];\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport {\n    Chart, ChartAssist, IChartSeries, ILineAccessors, IXYScales, LineAccessors, LinearScale, LineRenderer, TimeScale, XYGrid,\n} from \"@nova-ui/charts\";\nimport moment from \"moment/moment\";\n\n@Component({\n    selector: \"line-chart-with-axis-labels-example\",\n    templateUrl: \"./line-chart-with-axis-labels.example.component.html\",\n})\nexport class LineChartWithAxisLabelsExampleComponent implements OnInit {\n    public chart = new Chart(new XYGrid());\n\n    public chartAssist: ChartAssist = new ChartAssist(this.chart);\n\n    public ngOnInit() {\n        // providing chartAssist colors and markers to LineAccessors will share them with the line chart\n        const accessors = new LineAccessors(this.chartAssist.palette.standardColors, this.chartAssist.markers);\n        const renderer = new LineRenderer();\n        const scales: IXYScales = {\n            x: new TimeScale(),\n            y: new LinearScale(),\n        };\n\n        const seriesSet: IChartSeries<ILineAccessors>[] = getData().map(d => ({\n            ...d,\n            accessors,\n            renderer,\n            scales,\n        }));\n\n        // chart assist needs to be used to update data\n        this.chartAssist.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    const format = \"YYYY-MM-DDTHH:mm:ssZ\";\n\n    return [\n        {\n            id: \"series-1\",\n            name: \"Series 1\",\n            data: [\n                { x: moment(\"2016-12-25T15:14:29.909Z\", format), y: 30 },\n                { x: moment(\"2016-12-27T15:14:29.909Z\", format), y: 95 },\n                { x: moment(\"2016-12-29T15:14:29.909Z\", format), y: 15 },\n                { x: moment(\"2016-12-31T15:14:29.909Z\", format), y: 60 },\n                { x: moment(\"2017-01-03T15:14:29.909Z\", format), y: 35 },\n            ],\n        },\n        {\n            id: \"series-2\",\n            name: \"Series 2\",\n            data: [\n                { x: moment(\"2016-12-25T15:14:29.909Z\", format), y: 60 },\n                { x: moment(\"2016-12-27T15:14:29.909Z\", format), y: 40 },\n                { x: moment(\"2016-12-29T15:14:29.909Z\", format), y: 70 },\n                { x: moment(\"2016-12-31T15:14:29.909Z\", format), y: 45 },\n                { x: moment(\"2017-01-03T15:14:29.909Z\", format), y: 90 },\n            ],\n        },\n    ];\n}\n","import { ChangeDetectorRef, Component, OnDestroy, OnInit } from \"@angular/core\";\nimport {\n    AXES_STYLE_CHANGE_EVENT,\n    Chart,\n    ChartAssist,\n    IAxesStyleChangeEventPayload,\n    IChartEvent,\n    IChartSeries,\n    ILineAccessors,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    TimeScale,\n    XYGrid,\n} from \"@nova-ui/charts\";\nimport moment from \"moment/moment\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\n@Component({\n    selector: \"line-chart-with-2y-axes-example\",\n    templateUrl: \"./line-chart-with-2y-axes-example.component.html\",\n})\nexport class LineChartWith2YAxesExampleComponent implements OnInit, OnDestroy {\n    public chart: Chart;\n    public chartAssist: ChartAssist;\n\n    public yLeftScale: LinearScale;\n    public yRightScale: LinearScale;\n    public axesStyles: IAxesStyleChangeEventPayload;\n\n    private destroy$ = new Subject();\n\n    public get leftAxisStyles() {\n        return this.axesStyles?.[this.yLeftScale.id] ?? {};\n    }\n\n    public get rightAxisStyles() {\n        return this.axesStyles?.[this.yRightScale.id] ?? {};\n    }\n\n    constructor(public changeDetector: ChangeDetectorRef) {\n    }\n\n    public ngOnInit() {\n        const xScale = new TimeScale();\n        this.yLeftScale = new LinearScale();\n        this.yLeftScale.formatters.tick = (value: Number) => `${value}%`;\n\n        this.yRightScale = new LinearScale();\n        this.yRightScale.formatters.tick = (value: Number) => `${value}G`;\n\n        const xyGrid = new XYGrid();\n\n        // Set the grid's left and right scale id's using the id's of the corresponding scales\n        xyGrid.leftScaleId = this.yLeftScale.id;\n        xyGrid.rightScaleId = this.yRightScale.id;\n\n        // Set the grid's 'axis.left.fit' property to 'true' to accommodate the extra label width required by the\n        // left scale's tick formatter output (Note: 'axis.right.fit' is true by default.).\n        xyGrid.config().axis.left.fit = true;\n\n        this.chart = new Chart(xyGrid);\n        this.chartAssist = new ChartAssist(this.chart);\n\n        const accessors = new LineAccessors();\n        const renderer = new LineRenderer();\n        const seriesSet: IChartSeries<ILineAccessors>[] = getData().map(d => ({\n            ...d,\n            accessors,\n            renderer,\n            scales: {\n                x: xScale,\n                // In this case, we're using the right-hand scale only for \"series-3\"\n                y: d.id === \"series-3\" ? this.yRightScale : this.yLeftScale,\n            },\n            unitLabel: d.id === \"series-3\" ? \"GB\" : \"%\",\n        }));\n\n        // chart assist needs to be used to update data\n        this.chartAssist.update(seriesSet);\n\n        // Here we subscribe to an event indicating changes on axis styling. We use that information to style axis labels\n        this.chart.eventBus.getStream(AXES_STYLE_CHANGE_EVENT)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((event: IChartEvent<IAxesStyleChangeEventPayload>) => {\n                this.axesStyles = event.data;\n                this.changeDetector.markForCheck();\n            });\n    }\n\n    public ngOnDestroy(): void {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    const format = \"YYYY-MM-DDTHH:mm:ssZ\";\n\n    return [\n        {\n            id: \"series-1\",\n            name: \"Average CPU Load\",\n            data: [\n                { x: moment(\"2016-12-25T15:14:29.909Z\", format), y: 30 },\n                { x: moment(\"2016-12-27T15:14:29.909Z\", format), y: 95 },\n                { x: moment(\"2016-12-29T15:14:29.909Z\", format), y: 15 },\n                { x: moment(\"2016-12-31T15:14:29.909Z\", format), y: 60 },\n                { x: moment(\"2017-01-03T15:14:29.909Z\", format), y: 35 },\n            ],\n        },\n        {\n            id: \"series-2\",\n            name: \"Packet Loss\",\n            data: [\n                { x: moment(\"2016-12-25T15:14:29.909Z\", format), y: 60 },\n                { x: moment(\"2016-12-27T15:14:29.909Z\", format), y: 40 },\n                { x: moment(\"2016-12-29T15:14:29.909Z\", format), y: 70 },\n                { x: moment(\"2016-12-31T15:14:29.909Z\", format), y: 45 },\n                { x: moment(\"2017-01-03T15:14:29.909Z\", format), y: 90 },\n            ],\n        },\n        {\n            id: \"series-3\",\n            name: \"Average Memory Used\",\n            data: [\n                { x: moment(\"2016-12-25T15:14:29.909Z\", format), y: 30 },\n                { x: moment(\"2016-12-27T15:14:29.909Z\", format), y: 10 },\n                { x: moment(\"2016-12-29T15:14:29.909Z\", format), y: 75 },\n                { x: moment(\"2016-12-31T15:14:29.909Z\", format), y: 22 },\n                { x: moment(\"2017-01-03T15:14:29.909Z\", format), y: 90 },\n            ],\n        },\n        {\n            id: \"series-4\",\n            name: \"No data\",\n            data: [],\n        },\n    ];\n}\n","import { Component } from \"@angular/core\";\n\n@Component({\n    templateUrl: \"./line-chart-visual-test.component.html\",\n})\nexport class LineChartVisualTestComponent { }\n","import { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { RouterModule, Routes } from \"@angular/router\";\nimport { DEMO_PATH_TOKEN, NuiDocsModule, NuiIconModule, NuiMessageModule, SrlcStage } from \"@nova-ui/bits\";\nimport { NuiChartsModule } from \"@nova-ui/charts\";\n\nimport { DemoCommonModule } from \"../../common/demo-common.module\";\n\nimport { ChartDocsLineComponent } from \"./chart-docs-line.component\";\nimport { LineChartBasicExampleComponent } from \"./line-chart-basic/line-chart-basic.example.component\";\nimport { LineChartInterruptedBasicExampleComponent } from \"./line-chart-interrupted-basic/line-chart-interrupted-basic-example.component\";\nimport { LineChartInterruptedCalculatedExampleComponent } from \"./line-chart-interrupted-calculated/line-chart-interrupted-calculated-example.component\";\n// eslint-disable-next-line max-len\nimport { LineChartInterruptedPathTerminusExampleComponent } from \"./line-chart-interrupted-path-terminus/line-chart-interrupted-path-terminus-example.component\";\nimport { LineChartTestComponent } from \"./line-chart-test/line-chart-test.component\";\nimport { LineChartVisualTestComponent } from \"./line-chart-visual-test/line-chart-visual-test.component\";\nimport { LineChartWith2YAxesExampleComponent } from \"./line-chart-with-2y-axes/line-chart-with-2y-axes-example.component\";\nimport { LineChartWithAxisLabelsExampleComponent } from \"./line-chart-with-axis-labels/line-chart-with-axis-labels.example.component\";\nimport { LineChartWithLegendExampleComponent } from \"./line-chart-with-legend/line-chart-with-legend.example.component\";\nimport { LineChartWithRichTileLegendExampleComponent } from \"./line-chart-with-rich-tile-legend/line-chart-with-rich-tile-legend.example.component\";\n\nconst exampleRoutes: Routes = [\n    {\n        path: \"\",\n        component: ChartDocsLineComponent,\n        data: {\n            \"srlc\": {\n                \"stage\": SrlcStage.beta,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n    {\n        path: \"axis-labels\",\n        component: LineChartWithAxisLabelsExampleComponent,\n    },\n    {\n        path: \"two-y-axes\",\n        component: LineChartWith2YAxesExampleComponent,\n        data: {\n            \"srlc\": {\n                \"hideIndicator\": true,\n            },\n        },\n    },\n    {\n        path: \"basic\",\n        component: LineChartBasicExampleComponent,\n        data: {\n            \"srlc\": {\n                \"hideIndicator\": true,\n            },\n        },\n    },\n    {\n        path: \"interrupted\",\n        component: LineChartInterruptedBasicExampleComponent,\n        data: {\n            \"srlc\": {\n                \"hideIndicator\": true,\n            },\n        },\n    },\n    {\n        path: \"interrupted-calculated\",\n        component: LineChartInterruptedCalculatedExampleComponent,\n        data: {\n            \"srlc\": {\n                \"hideIndicator\": true,\n            },\n        },\n    },\n    {\n        path: \"interrupted-path-terminus\",\n        component: LineChartInterruptedPathTerminusExampleComponent,\n        data: {\n            \"srlc\": {\n                \"hideIndicator\": true,\n            },\n        },\n    },\n    {\n        path: \"test\",\n        component: LineChartTestComponent,\n        data: {\n            \"srlc\": {\n                \"hideIndicator\": true,\n            },\n        },\n    },\n    {\n        path: \"visual-test\",\n        component: LineChartVisualTestComponent,\n        data: {\n            \"srlc\": {\n                \"hideIndicator\": true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    declarations: [\n        ChartDocsLineComponent,\n        LineChartWithAxisLabelsExampleComponent,\n        LineChartBasicExampleComponent,\n        LineChartTestComponent,\n        LineChartVisualTestComponent,\n        LineChartWithLegendExampleComponent,\n        LineChartWithRichTileLegendExampleComponent,\n        LineChartWith2YAxesExampleComponent,\n        LineChartInterruptedBasicExampleComponent,\n        LineChartInterruptedPathTerminusExampleComponent,\n        LineChartInterruptedCalculatedExampleComponent,\n    ],\n    imports: [\n        DemoCommonModule,\n        FormsModule,\n        NuiChartsModule,\n        NuiIconModule,\n        NuiDocsModule,\n        NuiMessageModule,\n        RouterModule.forChild(exampleRoutes),\n    ],\n    providers: [\n        { provide: DEMO_PATH_TOKEN, useFactory: () => (<any>require).context(`!!raw-loader!./`, true, /.*\\.(ts|html|less)$/) },\n    ],\n})\nexport class ChartDocsLineModule {\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport {\n    Chart, ChartAssist, IChartSeries, ILineAccessors, IXYScales, LineAccessors, LinearScale, LineRenderer, LineSelectSeriesInteractionStrategy, TimeScale,\n    XYGrid,\n} from \"@nova-ui/charts\";\nimport moment from \"moment/moment\";\n\n@Component({\n    selector: \"nui-line-chart-with-rich-tile-legend-example\",\n    templateUrl: \"./line-chart-with-rich-tile-legend.example.component.html\",\n})\nexport class LineChartWithRichTileLegendExampleComponent implements OnInit {\n    public chart = new Chart(new XYGrid());\n    public chartAssist: ChartAssist = new ChartAssist(this.chart);\n\n    public ngOnInit() {\n        // providing chartAssist colors and markers to LineAccessors will share them with the line chart\n        const accessors = new LineAccessors(this.chartAssist.palette.standardColors, this.chartAssist.markers);\n        const renderer = new LineRenderer({\n            // for series interaction and ability to handle click configure renderer with interactionStrategy\n            interactionStrategy: new LineSelectSeriesInteractionStrategy(),\n        });\n        const scales: IXYScales = {\n            x: new TimeScale(),\n            y: new LinearScale(),\n        };\n\n        const seriesSet: IChartSeries<ILineAccessors>[] = getData().map(d => ({\n            ...d,\n            scales,\n            renderer,\n            accessors,\n        }));\n\n        // chart assist needs to be used to update data\n        this.chartAssist.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    const format = \"YYYY-MM-DDTHH:mm:ssZ\";\n\n    return [\n        {\n            id: \"series-1\",\n            name: \"Series 1\",\n            data: [\n                { x: moment(\"2016-12-25T15:14:29.909Z\", format), y: 30 },\n                { x: moment(\"2016-12-27T15:14:29.909Z\", format), y: 95 },\n                { x: moment(\"2016-12-29T15:14:29.909Z\", format), y: 15 },\n                { x: moment(\"2016-12-31T15:14:29.909Z\", format), y: 60 },\n                { x: moment(\"2017-01-03T15:14:29.909Z\", format), y: 35 },\n            ],\n        },\n        {\n            id: \"series-2\",\n            name: \"Series 2\",\n            data: [\n                { x: moment(\"2016-12-25T15:14:29.909Z\", format), y: 60 },\n                { x: moment(\"2016-12-27T15:14:29.909Z\", format), y: 40 },\n                { x: moment(\"2016-12-29T15:14:29.909Z\", format), y: 70 },\n                { x: moment(\"2016-12-31T15:14:29.909Z\", format), y: 45 },\n                { x: moment(\"2017-01-03T15:14:29.909Z\", format), y: 90 },\n            ],\n        },\n    ];\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport {\n    Chart,\n    ChartAssist,\n    IChartAssistSeries,\n    IChartSeries,\n    ILineAccessors,\n    IXYScales,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    MissingDataLineRendererConfig,\n    TimeScale,\n    XYGrid,\n} from \"@nova-ui/charts\";\nimport moment from \"moment/moment\";\n\n@Component({\n    selector: \"line-chart-interrupted-path-terminus-example\",\n    templateUrl: \"./line-chart-interrupted-path-terminus-example.component.html\",\n})\nexport class LineChartInterruptedPathTerminusExampleComponent implements OnInit {\n    // XYGrid is used for rendering axes as well as other grid elements\n    public chart = new Chart(new XYGrid());\n    public chartAssist: ChartAssist = new ChartAssist(this.chart);\n\n    public ngOnInit() {\n        // In case of a line chart, the scale definitions are flexible.\n        // This example demonstrates a scenario with time on the X scale and a numeric value on the Y scale.\n        const scales: IXYScales = {\n            x: new TimeScale(),\n            y: new LinearScale(),\n        };\n\n        const incomingSeries = getData();\n\n        // Here we assemble the complete chart series.\n        const seriesSet: IChartAssistSeries<ILineAccessors>[] = [];\n\n        // The line renderer will make the chart look like a line chart.\n        const renderer = new LineRenderer();\n        // Line accessors let the renderer know how to access x and y domain data respectively from a chart's input data set(s).\n        const accessors = new LineAccessors(this.chartAssist.palette.standardColors, this.chartAssist.markers);\n\n        // Renderer for the missing dataSeries\n        const rendererMissing = new LineRenderer(new MissingDataLineRendererConfig());\n        const accessorsMissing = new LineAccessors();\n        // we need to store the original value of the `defined` accessor\n        const origDefinedAccessor = accessorsMissing.data.defined;\n        // we're calling the original accessor implementation, but inverting it's logic\n        accessorsMissing.data.defined = (d, i, data, dataSeries) =>\n            !origDefinedAccessor?.(d, i, data, dataSeries) ?? true;\n\n        for (const s of incomingSeries) {\n            const cs: IChartSeries<ILineAccessors> = {\n                ...s,\n                accessors,\n                renderer,\n                scales,\n            };\n            seriesSet.push(cs);\n\n            // this series will be used to visualize the missing data points\n            seriesSet.push({\n                // this naming convention will connect these two series and their interaction will be synchronized\n                id: s.id + \"__missing\",\n                data: s.data,\n                accessors: accessorsMissing,\n                renderer: rendererMissing,\n                scales,\n                showInLegend: false, // we don't want to show this in the legend\n            });\n        }\n\n        // Finally, pass the series set to the chart's update method\n        this.chartAssist.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    const format = \"YYYY-MM-DDTHH:mm:ssZ\";\n\n    return [\n        {\n            id: \"series-1\",\n            name: \"Series 1\",\n            data: [\n                { x: moment(\"2016-12-25T15:14:29.909Z\", format).toDate(), y: 30, defined: false },\n                { x: moment(\"2016-12-27T15:14:29.909Z\", format).toDate(), y: 95, defined: false },\n                { x: moment(\"2016-12-27T15:14:29.909Z\", format).toDate(), y: 95 },\n                { x: moment(\"2016-12-28T15:14:29.909Z\", format).toDate(), y: 35 },\n                { x: moment(\"2016-12-31T15:14:29.909Z\", format).toDate(), y: 60 },\n                { x: moment(\"2017-01-03T15:14:29.909Z\", format).toDate(), y: 35 },\n                { x: moment(\"2017-01-04T15:14:29.909Z\", format).toDate(), y: 20 },\n                { x: moment(\"2017-01-04T15:14:29.909Z\", format).toDate(), y: 20, defined: false },\n                { x: moment(\"2017-01-05T15:14:29.909Z\", format).toDate(), y: 35, defined: false },\n            ],\n        },\n    ];\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport {\n    Chart, ChartAssist, IChartSeries, ILineAccessors, IXYScales, LineAccessors, LinearScale, LineRenderer, TimeScale, XYGrid,\n} from \"@nova-ui/charts\";\nimport moment from \"moment/moment\";\n\n@Component({\n    selector: \"nui-line-chart-with-legend-example\",\n    templateUrl: \"./line-chart-with-legend.example.component.html\",\n})\nexport class LineChartWithLegendExampleComponent implements OnInit {\n    public chart = new Chart(new XYGrid());\n    public chartAssist: ChartAssist = new ChartAssist(this.chart);\n\n    public ngOnInit() {\n        // providing chartAssist colors and markers to LineAccessors will share them with the line chart\n        const accessors = new LineAccessors(this.chartAssist.palette.standardColors, this.chartAssist.markers);\n        const renderer = new LineRenderer();\n        const scales: IXYScales = {\n            x: new TimeScale(),\n            y: new LinearScale(),\n        };\n\n        const seriesSet: IChartSeries<ILineAccessors>[] = getData().map(d => ({\n            ...d,\n            scales,\n            renderer,\n            accessors,\n        }));\n\n        // chart assist needs to be used to update data\n        this.chartAssist.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    const format = \"YYYY-MM-DDTHH:mm:ssZ\";\n\n    return [\n        {\n            id: \"series-1\",\n            name: \"Series 1\",\n            data: [\n                { x: moment(\"2016-12-25T15:14:29.909Z\", format), y: 30 },\n                { x: moment(\"2016-12-27T15:14:29.909Z\", format), y: 95 },\n                { x: moment(\"2016-12-29T15:14:29.909Z\", format), y: 15 },\n                { x: moment(\"2016-12-31T15:14:29.909Z\", format), y: 60 },\n                { x: moment(\"2017-01-03T15:14:29.909Z\", format), y: 35 },\n            ],\n        },\n        {\n            id: \"series-2\",\n            name: \"Series 2\",\n            data: [\n                { x: moment(\"2016-12-25T15:14:29.909Z\", format), y: 60 },\n                { x: moment(\"2016-12-27T15:14:29.909Z\", format), y: 40 },\n                { x: moment(\"2016-12-29T15:14:29.909Z\", format), y: 70 },\n                { x: moment(\"2016-12-31T15:14:29.909Z\", format), y: 45 },\n                { x: moment(\"2017-01-03T15:14:29.909Z\", format), y: 90 },\n            ],\n        },\n    ];\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport {\n    Chart, IChartSeries, ILineAccessors, IXYScales, LineAccessors, LinearScale, LineRenderer, SequentialColorProvider, TimeScale, XYGrid, XYGridConfig,\n} from \"@nova-ui/charts\";\nimport moment from \"moment/moment\";\n\ninterface ChartDatum {\n    x: moment.Moment;\n    y: number;\n}\n\n@Component({\n    selector: \"nui-line-chart-test\",\n    templateUrl: \"./line-chart-test.component.html\",\n})\nexport class LineChartTestComponent implements OnInit {\n\n    public input: string;\n    public chart: Chart;\n    private seriesSet: IChartSeries<ILineAccessors>[];\n    private initialInput = [[30, 95, 15, 60, 35], [60, 40, 70, 45, 90]];\n\n    public ngOnInit() {\n        this.input = JSON.stringify(this.initialInput);\n        this.configureChart();\n        this.buildSeriesSet();\n\n        this.update(this.initialInput);\n    }\n\n    public inputChanged(value: string) {\n        this.update(JSON.parse(value));\n    }\n\n    private update(input: number[][]) {\n        this.seriesSet.forEach((s: IChartSeries<ILineAccessors>, i: number) => {\n            const seriesInput = input[i] || [];\n            s.data.forEach((datum: ChartDatum, j: number) => {\n                const newValue = seriesInput[j] || 0;\n                datum.y = newValue;\n            });\n        });\n\n        this.chart.update(this.seriesSet);\n    }\n\n    private configureChart() {\n        const gridConfig = new XYGridConfig();\n        gridConfig.dimension.autoHeight = false;\n        gridConfig.dimension.autoWidth = false;\n        gridConfig.dimension.height(110);\n        gridConfig.dimension.width(400);\n        this.chart = new Chart(new XYGrid(gridConfig));\n    }\n\n    private buildSeriesSet() {\n        const colors = [\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"purple\", \"black\", \"white\"];\n        const dates = [\"2016-12-25\", \"2016-12-26\", \"2016-12-27\", \"2016-12-28\", \"2016-12-29\"];\n        const format = \"YYYY-MM-DD\";\n        const renderer = new LineRenderer();\n        const accessors = new LineAccessors(new SequentialColorProvider(colors));\n        const yScale = new LinearScale();\n        yScale.fixDomain([0, 100]);\n        const scales: IXYScales = {\n            x: new TimeScale(),\n            y: yScale,\n        };\n\n        this.seriesSet = [\n            {\n                id: \"1\",\n                name: \"Series 1\",\n                data: dates.map((d: string) => ({ x: moment(d, format), y: 0 })),\n            },\n            {\n                id: \"2\",\n                name: \"Series 2\",\n                data: dates.map((d: string) => ({ x: moment(d, format), y: 0 })),\n            },\n        ].map(s => ({ ...s, scales, renderer, accessors }));\n    }\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { Chart, IChartSeries, ILineAccessors, IXYScales, LineAccessors, LinearScale, LineRenderer, TimeScale, XYGrid } from \"@nova-ui/charts\";\nimport moment from \"moment/moment\";\n\n@Component({\n    selector: \"nui-line-chart-basic-example\",\n    templateUrl: \"./line-chart-basic.example.component.html\",\n})\nexport class LineChartBasicExampleComponent implements OnInit {\n    // XYGrid is used for rendering axes and other grid elements\n    public chart = new Chart(new XYGrid());\n\n    public ngOnInit() {\n        // Line accessors let the renderer know how to access x and y domain data respectively from a chart's input data set(s).\n        const accessors = new LineAccessors();\n\n        // The line renderer will make the chart look like a line chart.\n        const renderer = new LineRenderer();\n\n        // In case of a line chart, the scale definitions are flexible.\n        // This example demonstrates a scenario with time on the X scale and a numeric value on the Y scale.\n        const scales: IXYScales = {\n            x: new TimeScale(),\n            y: new LinearScale(),\n        };\n\n        // Here we assemble the complete chart series.\n        const seriesSet: IChartSeries<ILineAccessors>[] = getData().map(d => ({\n            ...d,\n            accessors,\n            renderer,\n            scales,\n        }));\n\n        // Finally, pass the series set to the chart's update method\n        this.chart.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    const format = \"YYYY-MM-DDTHH:mm:ssZ\";\n\n    return [\n        {\n            id: \"series-1\",\n            name: \"Series 1\",\n            data: [\n                { x: moment(\"2016-12-25T15:14:29.909Z\", format), y: 30 },\n                { x: moment(\"2016-12-27T15:14:29.909Z\", format), y: 95 },\n                { x: moment(\"2016-12-29T15:14:29.909Z\", format), y: 15 },\n                { x: moment(\"2016-12-31T15:14:29.909Z\", format), y: 60 },\n                { x: moment(\"2017-01-03T15:14:29.909Z\", format), y: 35 },\n            ],\n        },\n        {\n            id: \"series-2\",\n            name: \"Series 2\",\n            data: [\n                { x: moment(\"2016-12-25T15:14:29.909Z\", format), y: 60 },\n                { x: moment(\"2016-12-27T15:14:29.909Z\", format), y: 40 },\n                { x: moment(\"2016-12-29T15:14:29.909Z\", format), y: 70 },\n                { x: moment(\"2016-12-31T15:14:29.909Z\", format), y: 45 },\n                { x: moment(\"2017-01-03T15:14:29.909Z\", format), y: 90 },\n            ],\n        },\n    ];\n}\n","import { Component } from \"@angular/core\";\nimport { IEnhancedLineCapConfig, ILineRendererConfig, LineRenderer } from \"@nova-ui/charts\";\n\n@Component({\n    selector: \"nui-chart-docs-line\",\n    templateUrl: \"./chart-docs-line.component.html\",\n})\nexport class ChartDocsLineComponent {\n    getEnhancedLineCapConfigPropKey(key: keyof IEnhancedLineCapConfig): string {\n        return key;\n    }\n\n    getLineRendererConfigPropKey(key: keyof ILineRendererConfig): string {\n        return key;\n    }\n\n    getLineRendererPropKey(key: keyof LineRenderer): string {\n        return key;\n    }\n}\n","var map = {\n\t\"./chart-docs-line.component.html\": \"z/RP\",\n\t\"./chart-docs-line.component.ts\": \"gHhF\",\n\t\"./chart-docs-line.module.ts\": \"FHSh\",\n\t\"./line-chart-basic/line-chart-basic.example.component.html\": \"vEm8\",\n\t\"./line-chart-basic/line-chart-basic.example.component.ts\": \"8a5L\",\n\t\"./line-chart-interrupted-basic/line-chart-interrupted-basic-example.component.html\": \"XZqO\",\n\t\"./line-chart-interrupted-basic/line-chart-interrupted-basic-example.component.ts\": \"X3ST\",\n\t\"./line-chart-interrupted-calculated/line-chart-interrupted-calculated-example.component.html\": \"NmCU\",\n\t\"./line-chart-interrupted-calculated/line-chart-interrupted-calculated-example.component.ts\": \"3dis\",\n\t\"./line-chart-interrupted-path-terminus/line-chart-interrupted-path-terminus-example.component.html\": \"YODk\",\n\t\"./line-chart-interrupted-path-terminus/line-chart-interrupted-path-terminus-example.component.ts\": \"EIZE\",\n\t\"./line-chart-test/line-chart-test.component.html\": \"F/E+\",\n\t\"./line-chart-test/line-chart-test.component.ts\": \"PW6j\",\n\t\"./line-chart-visual-test/line-chart-visual-test.component.html\": \"y8gy\",\n\t\"./line-chart-visual-test/line-chart-visual-test.component.ts\": \"W6rv\",\n\t\"./line-chart-with-2y-axes/line-chart-with-2y-axes-example.component.html\": \"Vd4P\",\n\t\"./line-chart-with-2y-axes/line-chart-with-2y-axes-example.component.ts\": \"TxwX\",\n\t\"./line-chart-with-axis-labels/line-chart-with-axis-labels.example.component.html\": \"5b7l\",\n\t\"./line-chart-with-axis-labels/line-chart-with-axis-labels.example.component.ts\": \"IyFi\",\n\t\"./line-chart-with-legend/line-chart-with-legend.example.component.html\": \"rG87\",\n\t\"./line-chart-with-legend/line-chart-with-legend.example.component.ts\": \"2Waz\",\n\t\"./line-chart-with-rich-tile-legend/line-chart-with-rich-tile-legend.example.component.html\": \"0X5f\",\n\t\"./line-chart-with-rich-tile-legend/line-chart-with-rich-tile-legend.example.component.ts\": \"xW1a\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"vIrG\";","import { Component, OnInit } from \"@angular/core\";\nimport {\n    Chart,\n    ChartAssist,\n    IChartAssistSeries,\n    IChartSeries,\n    ILineAccessors,\n    IXYScales,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    MissingDataLineRendererConfig,\n    TimeScale,\n    XYGrid,\n} from \"@nova-ui/charts\";\nimport moment from \"moment/moment\";\n\n@Component({\n    selector: \"line-chart-interrupted-basic-example\",\n    templateUrl: \"./line-chart-interrupted-basic-example.component.html\",\n})\nexport class LineChartInterruptedBasicExampleComponent implements OnInit {\n    // XYGrid is used for rendering axes as well as other grid elements\n    public chart = new Chart(new XYGrid());\n    public chartAssist: ChartAssist = new ChartAssist(this.chart);\n\n    public ngOnInit() {\n        // In case of a line chart, the scale definitions are flexible.\n        // This example demonstrates a scenario with time on the X scale and a numeric value on the Y scale.\n        const scales: IXYScales = {\n            x: new TimeScale(),\n            y: new LinearScale(),\n        };\n\n        const incomingSeries = getData();\n\n        // Here we assemble the complete chart series.\n        const seriesSet: IChartAssistSeries<ILineAccessors>[] = [];\n\n        // The line renderer will make the chart look like a line chart.\n        const renderer = new LineRenderer();\n        // Line accessors let the renderer know how to access x and y domain data respectively from a chart's input data set(s).\n        const accessors = new LineAccessors(this.chartAssist.palette.standardColors, this.chartAssist.markers);\n\n        // Renderer for the missing dataSeries\n        const rendererMissing = new LineRenderer(new MissingDataLineRendererConfig());\n        const accessorsMissing = new LineAccessors();\n        // We need to store the original value of the 'defined' accessor\n        const origDefinedAccessor = accessorsMissing.data.defined;\n        // We're calling the original 'defined' accessor implementation, but inverting it's logic because, from the missing data\n        // series point of view, the undefined data are actually visualized as defined.\n        accessorsMissing.data.defined = (d, i, data, dataSeries) =>\n            !origDefinedAccessor?.(d, i, data, dataSeries) ?? true;\n\n        for (const s of incomingSeries) {\n            // The first data series is for rendering the valid data\n            const cs: IChartSeries<ILineAccessors> = {\n                ...s,\n                accessors,\n                renderer,\n                scales,\n            };\n            seriesSet.push(cs);\n\n            // This series will be used to visualize the missing data points\n            seriesSet.push({\n                // This naming convention will connect these two series and their interaction will be synchronized\n                id: s.id + \"__missing\",\n                data: s.data,\n                accessors: accessorsMissing,\n                renderer: rendererMissing,\n                scales,\n                showInLegend: false, // We don't want to show this in the legend\n            });\n        }\n\n        // Finally, pass the series set to the chart's update method\n        this.chartAssist.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    const format = \"YYYY-MM-DDTHH:mm:ssZ\";\n\n    return [\n        {\n            id: \"series-1\",\n            name: \"Series 1\",\n            data: [\n                { x: moment(\"2016-12-25T15:14:29.909Z\", format).toDate(), y: 30 },\n                { x: moment(\"2016-12-27T15:14:29.909Z\", format).toDate(), y: 95 },\n\n                // missing data segment\n                { x: moment(\"2016-12-27T15:14:29.909Z\", format).toDate(), y: 95, defined: false },\n                { x: moment(\"2016-12-29T15:14:29.909Z\", format).toDate(), y: 30, defined: false  },\n\n                // single defined data point surrounded by missing data segments\n                { x: moment(\"2016-12-29T15:14:29.909Z\", format).toDate(), y: 30 },\n\n                // missing data segment\n                { x: moment(\"2016-12-29T15:14:29.909Z\", format).toDate(), y: 30, defined: false  },\n                { x: moment(\"2016-12-31T15:14:29.909Z\", format).toDate(), y: 60, defined: false },\n\n                { x: moment(\"2016-12-31T15:14:29.909Z\", format).toDate(), y: 60 },\n                { x: moment(\"2017-01-03T15:14:29.909Z\", format).toDate(), y: 35 },\n\n                // missing data segment\n                { x: moment(\"2017-01-03T15:14:29.909Z\", format).toDate(), y: 35, defined: false },\n                { x: moment(\"2017-01-04T15:14:29.909Z\", format).toDate(), y: 20, defined: false },\n\n                { x: moment(\"2017-01-04T15:14:29.909Z\", format).toDate(), y: 20 },\n                { x: moment(\"2017-01-05T15:14:29.909Z\", format).toDate(), y: 35 },\n            ],\n        },\n        {\n            id: \"series-2\",\n            name: \"Series 2\",\n            data: [\n                { x: moment(\"2016-12-25T15:14:29.909Z\", format).toDate(), y: 60 },\n                { x: moment(\"2016-12-27T15:14:29.909Z\", format).toDate(), y: 40 },\n                { x: moment(\"2016-12-29T15:14:29.909Z\", format).toDate(), y: 70 },\n                { x: moment(\"2016-12-31T15:14:29.909Z\", format).toDate(), y: 45 },\n                { x: moment(\"2017-01-03T15:14:29.909Z\", format).toDate(), y: 90 },\n            ],\n        },\n    ];\n}\n"],"sourceRoot":"webpack:///"}