var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AreaAccessors.html",[0,0.082,1,3.57]],["body/classes/AreaAccessors.html",[0,0.1,1,5.511,2,1.503,3,0.242,4,0.227,5,0.227,6,7.06,7,2.386,8,1.693,9,6.06,10,0.249,11,0.511,12,1.144,13,1.267,14,1.503,15,4.332,16,4.773,17,1.186,18,7.858,19,1.463,20,0.005,21,0.699,22,0.91,23,3.836,24,0.298,25,6.688,26,6.177,27,6.688,28,0.308,29,4.119,30,4.463,31,3.238,32,2.886,33,2.494,34,1.442,35,2.467,36,2.504,37,2.415,38,1.655,39,0.356,40,0.004,41,0.963,42,1.886,43,6.099,44,5.511,45,6.099,46,6.099,47,1.886,48,6.099,49,5.511,50,6.099,51,6.099,52,1.992,53,2.838,54,2.231,55,1.61,56,2.886,57,2.194,58,7.269,59,6.064,60,4.151,61,6.099,62,4.151,63,6.099,64,4.794,65,4.794,66,4.794,67,4.794,68,4.794,69,4.794,70,4.794,71,4.794,72,2.826,73,3.238,74,3.238,75,1.126,76,3.613,77,3.613,78,0.003,79,0.004,80,0.003]],["title/classes/AreaGridConfig.html",[0,0.082,81,4.561]],["body/classes/AreaGridConfig.html",[0,0.097,2,1.463,3,0.236,4,0.221,5,0.221,10,0.243,11,0.503,14,2.077,17,1.382,20,0.005,24,0.368,28,0.236,39,0.236,41,0.861,75,1.29,78,0.003,79,0.004,80,0.003,81,6.921,82,7.725,83,2.164,84,3.752,85,0.976,86,5.996,87,6.414,88,6.391,89,1.905,90,1.091,91,4.049,92,5.417,93,6.391,94,1.808,95,2.884,96,3.668,97,2.447,98,5.68,99,5.68,100,3.858,101,3.688,102,2.07,103,3.534,104,2.013,105,4.976,106,4.037,107,2.167,108,0.915,109,3.004,110,2.062,111,5.823,112,3.478,113,3.477,114,2.222,115,4.074,116,4.668,117,1.743,118,5.518,119,4.042,120,4.217,121,4.668,122,2.871,123,4.668,124,2.099,125,4.668,126,2.642,127,4.217,128,5.115,129,2.59,130,5.619,131,4.422,132,3.252,133,4.208,134,0.56,135,4.042,136,4.422,137,2.696,138,3.629,139,4.422,140,1.212,141,4.422,142,3.888,143,2.07,144,2.751,145,5.388,146,2.642,147,6.014,148,4.976,149,1.368,150,3.003]],["title/classes/AxisConfig.html",[0,0.082,111,3.292]],["body/classes/AxisConfig.html",[0,0.097,2,1.463,3,0.236,4,0.221,5,0.221,8,1.665,10,0.243,11,0.503,17,1.348,19,1.424,20,0.005,21,0.68,22,0.886,24,0.368,28,0.303,39,0.236,55,1.567,78,0.003,79,0.004,80,0.003,84,3.752,85,0.976,94,1.847,107,2.118,108,0.888,111,4.995,117,1.84,118,5.518,124,2.099,132,3.714,140,1.921,151,9.92,152,5.057,153,4.589,154,4.714,155,3.75,156,4.714,157,4.714,158,2.563,159,1.71,160,4.714,161,2.553,162,6.014,163,5.388,164,1.279,165,5.388,166,4.589,167,4.049,168,4.154,169,8.534,170,4.976,171,6.014,172,4.976,173,6.014,174,6.014,175,1.557,176,6.014,177,5.388,178,2.642,179,0.779,180,2.935,181,3.152,182,3.152,183,1.06,184,4.905,185,6.014,186,6.014,187,6.014,188,6.014,189,6.014,190,6.014,191,7.725,192,1.331,193,7.725,194,1.349,195,6.014,196,6.014,197,4.042]],["title/classes/BarAccessors.html",[0,0.082,198,3.176]],["body/classes/BarAccessors.html",[0,0.091,2,1.372,3,0.221,4,0.207,5,0.207,7,2.178,8,1.596,10,0.386,11,0.482,12,1.254,13,1.411,14,1.372,15,3.954,16,4.57,17,1.253,19,1.335,20,0.005,21,0.638,22,0.831,23,3.616,24,0.334,28,0.324,29,3.883,30,4.208,31,2.955,32,2.634,33,2.417,34,1.359,38,1.511,39,0.324,40,0.004,41,0.979,52,1.878,53,2.675,54,2.036,55,1.931,56,2.634,57,1.231,72,2.579,73,2.955,74,2.955,75,1.307,76,3.298,77,3.298,78,0.003,79,0.004,80,0.003,108,0.948,115,3.073,144,2.579,159,1.248,164,1.136,192,2.221,198,4.622,199,7.27,200,5.184,201,5.561,202,6.637,203,5.482,204,5.052,205,4.784,206,4.699,207,4.665,208,4.665,209,2.515,210,2.816,211,6.422,212,3.131,213,3.131,214,2.216,215,4.665,216,3.032,217,4.665,218,2.747,219,6.129,220,4.665,221,4.665,222,3.433,223,6.129,224,4.665,225,2.521,226,6.129,227,2.013,228,6.129,229,6.129,230,4.665,231,4.665,232,6.129,233,4.665,234,1.77,235,4.665,236,4.665,237,4.665,238,4.665,239,4.665,240,1.598,241,1.718,242,4.979,243,4.665,244,4.665,245,3.203,246,4.665,247,1.621,248,4.665,249,4.665,250,2.178]],["title/classes/BarGridConfig.html",[0,0.082,251,4.561]],["body/classes/BarGridConfig.html",[0,0.095,2,1.429,3,0.23,4,0.216,5,0.216,10,0.237,11,0.495,14,2.053,17,1.377,20,0.005,24,0.366,28,0.23,39,0.23,41,0.847,75,1.279,78,0.003,79,0.004,80,0.003,83,2.139,84,3.663,85,0.953,86,5.904,87,6.234,88,6.293,90,1.074,91,3.987,92,5.334,93,6.293,94,1.802,95,2.839,96,3.635,97,2.425,98,5.593,99,5.593,100,3.799,101,3.631,102,2.038,103,3.48,104,1.982,105,4.858,106,4,107,2.157,108,0.911,109,2.977,110,2.047,111,5.771,112,3.447,113,3.332,114,2.201,115,4.054,116,4.557,117,1.888,118,5.978,119,3.946,120,4.117,121,4.557,122,2.803,123,4.557,124,2.425,125,4.557,126,2.58,127,4.117,128,5.069,129,2.566,130,5.568,131,4.317,132,3.223,133,4.17,134,0.547,135,3.946,136,4.317,137,2.632,138,3.543,139,4.317,140,1.183,141,4.317,142,3.796,143,2.02,144,2.686,145,5.26,146,3.342,150,2.932,161,2.156,251,6.815,252,6.293,253,1.851,254,3.48,255,3.342,256,4.858,257,4.557,258,6.293,259,5.26,260,5.26,261,5.26,262,5.871]],["title/classes/BarHighlightStrategy.html",[0,0.082,263,3.176]],["body/classes/BarHighlightStrategy.html",[0,0.072,2,1.084,3,0.174,4,0.164,5,0.164,8,1.359,10,0.37,12,0.921,13,1.276,14,1.084,17,1.154,19,1.99,20,0.005,21,0.951,22,1.238,24,0.348,28,0.384,38,1.194,39,0.247,54,1.609,55,1.644,57,1.836,75,0.638,78,0.002,79,0.003,80,0.002,85,0.723,89,1.099,94,1.637,104,1.161,108,0.891,117,0.91,128,2.53,129,1.281,134,0.682,146,1.957,159,0.986,164,1.232,175,1.605,179,0.949,183,0.785,192,1.932,209,2.472,210,2.225,212,1.883,225,1.922,227,2.598,234,1.398,241,1.358,247,1.814,255,1.957,263,3.935,264,7.22,265,7.22,266,5.642,267,3.458,268,4.283,269,1.714,270,4.078,271,5.651,272,4.078,273,4.734,274,3.991,275,7.818,276,7.323,277,7.134,278,4.455,279,4.283,280,2.019,281,1.142,282,5.651,283,1.98,284,4.896,285,1.972,286,5.651,287,5.651,288,5.651,289,5.651,290,2.073,291,3.392,292,3.807,293,5.626,294,4.519,295,4.166,296,4.166,297,2.508,298,4.455,299,2.226,300,5.651,301,4.455,302,3.807,303,3.079,304,4.455,305,2.689,306,4.574,307,4.455,308,2.994,309,0.874,310,1.211,311,3.991,312,3.991,313,3.458,314,3.458,315,2.881,316,2.881,317,1.319,318,6.588,319,6.058,320,1.957,321,4.455,322,6.308,323,3.686,324,3.686,325,3.991,326,4.283,327,2.175,328,1.358,329,2.994,330,4.455,331,2.278,332,2.225,333,2.508,334,1.306,335,5.219,336,2.323,337,1.883,338,3.991,339,2.994,340,3.991,341,3.686,342,3.991,343,2.78,344,3.991,345,3.991,346,3.991,347,3.276,348,3.991,349,3.991,350,6.56,351,3.991,352,3.991,353,3.991,354,3.991,355,3.991,356,3.991,357,3.991,358,6.56,359,7.53,360,7.22,361,3.991,362,3.991,363,3.991,364,3.991,365,3.991,366,3.991,367,3.991,368,1.358,369,3.686,370,5.651,371,6.953,372,5.651,373,7.963,374,4.455,375,4.455,376,4.455,377,3.991,378,4.455,379,2.606,380,1.721,381,4.455,382,4.455,383,4.455,384,1.145,385,3.991,386,4.455,387,4.455,388,7.963,389,4.455,390,4.455,391,4.455,392,4.455,393,4.455,394,2.461,395,4.239,396,2.881,397,4.455,398,3.686,399,1.636,400,3.276,401,3.991,402,3.991]],["title/classes/BarHorizontalGridConfig.html",[0,0.082,403,4.561]],["body/classes/BarHorizontalGridConfig.html",[0,0.094,2,1.414,3,0.228,4,0.214,5,0.214,10,0.235,11,0.492,14,2.043,17,1.375,20,0.005,24,0.365,28,0.228,39,0.228,41,0.842,75,1.274,78,0.003,79,0.004,80,0.003,83,2.128,84,3.626,85,0.944,86,5.864,87,6.219,88,6.251,90,1.067,91,3.96,92,5.298,93,6.251,94,1.8,95,2.82,96,3.621,97,2.416,98,5.555,99,5.555,100,3.773,101,3.607,102,2.025,103,3.457,104,1.969,105,4.808,106,3.985,107,2.153,108,0.909,109,2.965,110,2.04,111,5.748,112,3.434,113,3.319,114,2.193,115,4.045,116,4.51,117,1.882,118,5.748,119,3.906,120,4.075,121,4.51,122,2.774,123,4.51,124,2.567,125,4.51,126,2.553,127,4.075,128,5.049,129,2.556,130,5.547,131,4.273,132,3.21,133,4.153,134,0.541,135,3.906,136,4.273,137,2.605,138,3.507,139,4.273,140,1.171,141,4.273,142,3.757,143,2,144,2.658,146,3.32,150,2.902,161,2.38,252,6.251,253,1.839,254,3.457,255,3.32,256,4.808,257,4.51,258,6.251,259,5.206,260,5.206,261,5.206,403,6.769,404,4.153,405,5.811,406,5.811,407,4.808,408,5.206]],["title/classes/BarSeriesHighlightStrategy.html",[0,0.082,409,4.561]],["body/classes/BarSeriesHighlightStrategy.html",[0,0.083,2,1.254,3,0.202,4,0.189,5,0.189,8,1.503,10,0.208,12,0.648,13,1.378,14,1.254,17,1.216,19,2.097,20,0.005,21,1.002,22,1.305,24,0.354,28,0.377,38,1.381,39,0.202,54,1.861,55,1.343,57,1.524,75,0.738,78,0.003,79,0.004,80,0.003,85,0.837,89,1.271,94,1.696,104,1.343,108,0.897,117,1.425,134,0.65,146,2.264,159,1.141,164,1.216,175,1.708,179,1.025,183,0.908,192,1.876,209,2.573,210,2.574,212,2.178,225,2.126,227,2.537,255,2.264,264,7.554,265,7.554,266,5.903,267,4,268,4.627,269,1.896,270,4.511,271,6.251,272,4.511,273,5.114,274,4.617,275,8.18,279,4.457,280,1.769,281,1.263,282,6.251,283,2.19,284,5.415,285,1.914,286,6.251,287,6.251,288,6.251,289,6.251,290,2.185,292,4.21,293,5.809,294,4.763,295,4.359,296,4.359,297,2.609,299,2.369,300,6.251,302,4.21,303,3.405,305,3.11,306,4.786,311,4.617,312,4.617,313,4,314,4,317,1.525,318,7.013,320,2.264,326,4.627,327,2.515,328,1.57,331,2.635,334,1.444,335,5.772,336,1.503,337,2.178,338,4.617,339,3.463,340,4.617,341,4.264,342,4.617,343,3.215,344,4.617,345,4.617,346,4.617,347,3.789,348,4.617,349,4.617,350,7.086,351,4.617,352,4.617,353,4.617,354,4.617,355,4.617,356,4.617,357,4.617,358,6.251,359,7.086,360,6.544,361,4.617,362,4.617,363,4.617,364,4.617,365,4.617,366,4.617,367,4.617,368,1.57,369,4.264,370,6.251,371,5.772,372,4.617,398,4.264,399,1.892,400,5.13,401,4.617,402,4.617,409,6.251,410,4.617,411,2.19,412,5.153,413,5.153,414,5.153,415,5.153]],["title/classes/BarStatusGridConfig.html",[0,0.082,416,4.561]],["body/classes/BarStatusGridConfig.html",[0,0.094,2,1.414,3,0.228,4,0.214,5,0.214,10,0.235,11,0.492,14,1.414,17,1.353,19,1.376,20,0.005,21,0.658,22,0.856,24,0.377,28,0.228,39,0.228,41,0.842,75,1.274,78,0.003,79,0.004,80,0.003,83,2.128,84,3.626,87,6.219,90,0.821,94,1.8,95,2.82,96,3.621,97,2.416,98,5.555,99,5.555,100,3.773,101,3.607,102,2.025,103,3.457,104,1.969,106,3.985,107,2.153,108,0.909,109,2.965,110,2.04,111,5.748,112,3.434,113,3.319,114,2.193,115,4.045,116,4.51,117,1.882,118,5.428,119,3.906,120,4.075,121,4.51,122,2.774,123,4.51,124,2.416,125,4.51,126,3.32,127,4.075,128,5.049,129,2.556,130,5.547,131,4.273,132,3.21,133,4.153,134,0.541,135,3.906,136,4.273,137,2.605,138,3.507,139,4.273,140,1.523,141,4.273,142,3.757,143,2.6,144,2.658,161,2.727,164,0.798,252,6.251,256,4.808,257,4.51,303,3.688,407,4.808,408,5.206,416,6.769,417,2.52,418,4.56,419,5.811,420,6.769,421,5.206,422,7.556,423,5.811,424,5.811,425,5.811,426,5.811,427,5.811,428,5.811,429,5.206,430,5.811,431,5.811,432,3.507]],["title/classes/BarTooltipsPlugin.html",[0,0.082,433,4.561]],["body/classes/BarTooltipsPlugin.html",[0,0.098,2,1.479,3,0.238,4,0.223,5,0.223,10,0.245,11,0.506,12,0.978,14,1.479,17,1.404,19,1.842,20,0.005,21,0.88,22,1.146,24,0.369,28,0.305,39,0.238,41,0.867,78,0.003,79,0.004,80,0.003,90,1.277,94,1.872,107,1.975,108,0.842,109,2.027,110,1.722,112,3.004,115,4.227,143,2.092,144,2.781,175,1.959,179,1.259,247,1.748,269,2.113,283,1.908,291,3.268,297,2.174,303,2.967,418,4.694,433,6.968,434,7.778,435,5.592,436,3.268,437,6.778,438,6.037,439,2.775,440,6.037,441,4.418,442,6.037,443,2.956,444,3.092,445,6.435,446,2.235,447,2.775,448,7.018,449,6.078,450,5.446,451,4.469,452,4.262,453,2.906,454,5.446,455,2.059,456,3.93,457,5.446,458,6.037,459,1.945,460,4.469,461,5.446,462,5.446,463,4.469,464,1.499,465,2.978,466,3.792,467,5.446,468,5.446,469,4.718,470,5.446,471,3.792,472,3.792,473,3.792,474,3.792,475,6.078,476,1.799]],["title/components/BasicLegendTileComponent.html",[477,2.237,478,2.812]],["body/components/BasicLegendTileComponent.html",[0,0.113,3,0.272,4,0.256,5,0.256,20,0.005,21,1.032,28,0.272,39,0.272,78,0.003,79,0.004,80,0.003,90,1.373,477,3.717,478,5.24,479,4.805,480,5.754,481,7.58,482,4.608,483,6.231,484,3.95,485,6.566,486,6.566,487,5.72,488,3.789,489,4.397,490,5.503,491,5.278,492,7.58,493,5.106,494,7.58,495,5.398,496,3.645,497,5.549,498,4.197,499,4.197,500,3.74,501,4.197,502,3.841,503,3.557,504,4.197,505,3.841,506,4.197,507,3.645,508,4.197,509,3.841,510,4.197,511,3.557,512,4.197,513,3.841,514,4.197,515,3.841,516,4.197,517,3.841,518,4.197,519,3.95,520,3.74,521,4.068,522,4.197]],["title/classes/Chart.html",[0,0.082,90,0.719]],["body/classes/Chart.html",[0,0.091,2,0.93,3,0.15,4,0.141,5,0.141,8,1.217,10,0.154,11,0.367,12,0.71,14,0.93,17,1.364,19,2.126,20,0.005,21,1.016,22,1.395,24,0.352,28,0.374,34,0.701,39,0.15,40,0.003,54,1.381,55,2.414,75,0.548,78,0.002,79,0.003,80,0.002,83,1.88,90,1.047,94,1.868,97,1.825,107,0.835,108,0.356,110,1.946,126,2.481,128,2.172,129,1.099,137,2.531,138,2.307,140,0.771,175,1.94,179,1.183,183,0.674,192,1.896,222,1.586,225,2.046,227,2.327,240,1.601,269,1.534,297,1.578,308,2.57,309,0.75,310,2.015,317,1.132,320,1.68,336,1.959,337,1.616,343,2.385,384,1.726,443,2.293,444,2.399,446,1.472,447,2.399,464,1.656,465,2.363,476,2.451,488,1.404,523,3.823,524,2.12,525,2.679,526,6.715,527,5.059,528,5.647,529,3.434,530,2.967,531,2.967,532,2.967,533,2.967,534,5.647,535,5.059,536,5.647,537,5.059,538,3.823,539,2.599,540,3.823,541,3.003,542,3.823,543,3.823,544,3.823,545,1.825,546,3.823,547,2.259,548,2.776,549,3.823,550,5.647,551,3.823,552,3.137,553,2.259,554,3.823,555,3.823,556,3.823,557,3.653,558,3.823,559,3.823,560,3.823,561,3.312,562,5.647,563,3.823,564,7.088,565,3.823,566,5.059,567,3.823,568,5.647,569,3.823,570,5.647,571,2.259,572,2.805,573,3.823,574,5.059,575,2.219,576,2.451,577,3.823,578,3.163,579,3.823,580,1.427,581,2.307,582,6.016,583,2.056,584,2.056,585,2.968,586,2.811,587,2.307,588,3.823,589,1.503,590,1.955,591,1.2,592,2.756,593,2.056,594,3.823,595,2.259,596,1.039,597,1.358,598,2.004,599,1.53,600,5.647,601,3.823,602,3.425,603,5.059,604,3.823,605,3.823,606,3.823,607,1.825,608,3.823,609,3.823,610,3.823,611,3.823,612,5.647,613,6.715,614,5.647,615,3.163,616,3.823,617,3.823,618,5.647,619,5.647,620,4.672,621,3.823,622,3.823,623,3.823,624,3.823,625,3.425,626,3.823,627,1.647,628,3.823,629,3.823,630,6.016,631,3.823,632,3.823,633,2.681,634,0.905,635,4.383,636,0.791,637,3.823,638,3.823,639,3.823,640,3.823,641,3.823,642,3.823,643,3.823,644,3.823,645,3.823,646,3.425,647,3.823,648,3.823,649,3.823,650,3.823,651,3.823,652,3.425,653,3.823,654,3.823,655,3.823,656,3.823,657,3.823,658,3.823,659,3.823,660,2.472,661,3.425,662,2.57,663,3.425,664,2.004,665,1.182,666,3.823,667,3.425,668,3.823,669,3.823,670,3.823,671,3.425,672,3.823,673,3.353,674,3.823,675,3.823,676,3.823,677,3.823,678,3.823,679,3.823,680,3.823,681,3.823,682,3.823,683,3.823,684,3.823,685,3.823,686,3.823,687,6.715,688,3.823,689,3.823,690,3.823,691,3.823,692,3.823,693,3.823,694,3.823,695,3.823,696,3.823,697,3.823,698,3.823,699,3.823,700,3.163,701,3.823,702,3.425,703,2.108,704,1.237,705,1.132,706,3.823,707,3.823,708,3.823,709,1.955,710,5.647,711,3.425,712,3.823,713,5.647,714,3.425,715,3.823,716,3.823,717,3.823,718,3.823,719,1.987,720,2.039,721,4.672,722,4.383,723,4.383,724,3.823,725,3.823,726,4.152,727,3.823,728,3.823,729,3.823,730,3.823]],["title/classes/ChartAssistRenderStateData.html",[0,0.082,731,3.422]],["body/classes/ChartAssistRenderStateData.html",[0,0.134,2,1.365,3,0.22,4,0.206,5,0.206,8,1.591,10,0.227,11,0.481,13,1.387,14,1.365,17,1.284,19,1.329,20,0.005,21,0.934,22,0.827,24,0.333,28,0.289,34,1.029,39,0.366,40,0.005,75,0.804,78,0.003,79,0.004,80,0.003,85,0.911,90,1.367,94,1.779,107,1.613,108,0.872,124,2.006,134,0.934,158,2.809,159,1.635,164,0.77,175,1.488,179,0.727,183,0.989,192,1.242,194,1.968,234,2.86,279,3.525,280,1.872,283,2.591,333,2.064,334,1.815,394,4.078,411,1.761,432,3.386,459,1.403,464,1.821,482,3.699,572,2.796,576,2.443,597,1.993,731,5.547,732,6.167,733,3.934,734,1.635,735,5.67,736,2.284,737,5.429,738,3.085,739,5.429,740,5.429,741,2.591,742,6.7,743,5.611,744,3.384,745,5.611,746,5.611,747,5.611,748,5.611,749,5.611,750,5.611,751,5.611,752,1.815,753,3.604,754,5.178,755,4.125,756,3.628,757,2.245,758,3.771,759,3.017,760,1.442,761,4.125,762,4.125,763,3.5,764,3.628,765,2.678,766,1.993,767,3.771,768,2.739,769,3.771,770,2.328,771,2.515,772,2.094,773,3.386,774,1.365,775,4.774,776,3.688,777,2.465,778,3.771,779,3.934,780,3.771,781,3.771,782,1.71,783,4.963,784,4.963,785,4.963,786,4.963,787,1.259,788,3.771,789,1.871,790,3.187,791,4.125,792,4.125,793,3.017,794,3.771]],["title/directives/ChartCollectionIdDirective.html",[520,2.738,795,3.951]],["body/directives/ChartCollectionIdDirective.html",[0,0.107,3,0.259,4,0.243,5,0.243,8,1.768,10,0.267,14,1.61,17,1.126,19,1.567,20,0.005,21,0.749,22,0.975,24,0.311,28,0.365,38,1.773,39,0.259,55,2.138,78,0.003,79,0.004,80,0.003,85,1.074,90,1.399,94,1.465,134,0.764,149,1.504,179,0.857,320,2.906,459,2.052,477,3.604,479,4.66,484,3.757,487,4.531,496,3.467,500,4.412,519,3.757,520,4.412,521,5.454,757,3.282,760,2.109,766,2.915,787,1.841,795,7.237,796,5.766,797,7.378,798,3.197,799,6.615,800,4.3,801,8.204,802,4.097,803,8.204,804,8.204,805,7.99,806,5.304,807,8.204,808,4.3,809,5.118,810,8.204,811,8.204,812,3.224,813,8.204,814,6.922,815,4.004,816,6.615,817,3.664,818,7.281,819,8.204,820,5.927,821,4.196,822,5.927,823,2.429,824,1.987,825,2.277,826,6.615,827,2.555,828,6.615,829,6.615,830,5.927,831,6.615,832,5.135,833,6.615]],["title/injectables/ChartCollectionService.html",[818,3.743,834,3.951]],["body/injectables/ChartCollectionService.html",[0,0.116,3,0.28,4,0.263,5,0.263,10,0.289,17,0.981,19,1.692,20,0.005,21,0.809,22,1.053,24,0.271,28,0.361,39,0.28,55,1.863,78,0.004,79,0.004,80,0.004,85,1.16,94,1.648,110,1.582,134,0.892,175,1.44,192,1.582,269,2.337,281,1.557,315,4.621,316,4.621,496,3.746,757,3.441,760,2.211,774,1.739,795,6.676,796,5.561,797,7.116,798,3.267,818,6.324,830,6.403,834,6.676,835,5.913,836,7.147,837,6.324,838,8.601,839,5.965,840,7.706,841,4.399,842,8.601,843,8.601,844,8.601,845,8.601,846,7.147,847,9.227,848,7.147,849,8.601,850,7.147]],["title/components/ChartComponent.html",[477,2.237,500,2.738]],["body/components/ChartComponent.html",[0,0.087,3,0.211,4,0.198,5,0.198,8,1.551,10,0.218,11,0.468,12,0.905,14,1.313,17,1.186,19,1.278,20,0.005,21,0.977,22,1.193,24,0.307,28,0.352,32,3.362,38,1.446,39,0.211,54,1.949,55,2.345,78,0.003,79,0.004,80,0.003,90,1.398,94,1.78,107,1.179,108,0.503,110,1.593,179,0.699,197,3.628,227,1.956,320,2.371,339,3.628,384,1.387,464,2.13,477,3.162,478,2.981,479,4.088,482,3.629,484,3.066,487,5.537,488,3.659,489,2.371,490,3.258,496,2.829,497,5.052,498,3.258,499,3.258,500,4.976,501,3.258,502,2.981,503,2.76,504,3.258,505,2.981,506,3.258,507,2.829,508,3.258,509,2.981,510,3.258,511,2.76,512,3.258,513,2.981,514,3.258,515,2.981,516,3.258,517,2.981,518,3.258,519,3.066,520,2.903,521,3.157,522,3.258,524,1.446,741,2.259,805,7.254,814,6.285,815,3.513,817,3.182,821,3.681,832,4.189,851,5.398,852,7.254,853,6.699,854,5.442,855,5.442,856,5.955,857,7.197,858,8.097,859,8.097,860,9.447,861,5.398,862,6.057,863,9.447,864,8.097,865,6.057,866,5.398,867,7.197,868,5.398,869,5.398,870,5.398,871,4.837,872,6.448,873,5.398,874,4.836,875,6.448,876,4.836,877,3.785,878,4.836,879,2.642,880,3.969,881,5.398,882,2.76,883,8.097,884,4.836,885,5.398,886,5.398,887,5.398,888,3.628,889,5.398,890,7.197,891,5.398,892,5.398,893,5.398,894,5.398,895,7.197,896,4.466,897,5.398,898,7.197,899,7.197,900,5.398,901,5.398,902,3.628,903,5.398,904,5.398,905,5.398,906,5.398,907,3.628,908,5.398,909,5.398,910,5.398,911,5.398,912,5.398,913,7.197,914,5.398,915,5.398,916,4.836,917,5.398,918,5.398,919,4.836,920,5.398,921,2.015,922,5.398,923,5.398]],["title/components/ChartDonutContentComponent.html",[477,2.237,502,2.812]],["body/components/ChartDonutContentComponent.html",[0,0.1,3,0.242,4,0.227,5,0.227,8,1.693,10,0.249,11,0.511,17,1.079,20,0.005,21,0.978,24,0.298,28,0.356,39,0.242,55,1.61,78,0.003,79,0.004,80,0.003,90,1.428,94,1.714,317,1.828,476,2.841,477,3.453,478,3.412,479,4.463,482,3.874,484,3.509,487,5.639,488,3.731,489,2.714,490,3.728,491,4.903,493,4.743,496,3.238,497,5.321,498,3.728,499,3.728,500,3.322,501,3.728,502,5.024,503,5.242,504,3.728,505,3.412,506,3.728,507,3.238,508,3.728,509,3.412,510,3.728,511,3.159,512,3.728,513,3.412,514,3.728,515,3.412,516,3.728,517,3.412,518,3.728,519,3.509,520,3.322,521,3.613,522,3.728,771,3.522,796,5.588,815,3.836,821,4.019,854,5.808,855,5.808,871,5.281,888,4.151,907,4.151,924,7.743,925,6.177,926,7.771,927,7.858,928,7.858,929,8.15,930,7.15,931,6.177,932,3.386,933,5.321,934,6.177,935,2.077,936,6.099,937,5.534,938,5.534,939,6.177,940,5.534,941,6.177,942,7.858,943,6.177,944,5.534,945,6.177,946,6.177]],["title/classes/ChartDonutContentPlugin.html",[0,0.082,930,4.212]],["body/classes/ChartDonutContentPlugin.html",[0,0.091,2,1.375,3,0.221,4,0.208,5,0.208,10,0.228,11,0.483,17,1.346,20,0.005,24,0.282,28,0.358,39,0.221,41,0.826,55,1.472,75,1.063,78,0.003,79,0.004,80,0.003,85,0.917,90,1.242,94,1.852,107,1.62,108,0.691,109,2.762,110,2.022,114,2.043,115,3.789,117,1.98,146,3.259,164,1.018,175,1.889,179,1.238,183,0.995,192,1.833,227,2.016,269,2.016,297,2.552,299,1.579,315,3.653,316,3.653,317,1.672,336,1.648,436,3.038,443,2.954,444,2.679,446,2.158,447,3.09,464,1.394,465,3.088,466,3.525,471,3.525,472,3.525,473,3.525,474,3.525,476,2.451,503,4.886,587,3.41,607,2.697,620,4.674,634,1.961,636,1.714,765,3.541,771,3.712,926,8.25,929,7.42,930,6.137,933,5.144,935,2.477,944,5.062,947,7.556,948,5.757,949,5.454,950,6.646,951,8.282,952,5.65,953,5.65,954,5.757,955,5.65,956,5.65,957,6.137,958,5.062,959,3.41,960,5.65,961,5.65,962,5.65,963,5.65,964,5.65,965,5.65,966,5.062,967,5.062,968,5.65,969,5.65,970,5.65,971,5.65,972,5.65,973,5.65,974,5.65,975,5.65,976,5.65,977,5.65,978,8.794,979,8.794,980,5.65]],["title/components/ChartMarkerComponent.html",[477,2.237,505,2.812]],["body/components/ChartMarkerComponent.html",[0,0.083,3,0.2,4,0.188,5,0.188,8,1.493,10,0.206,11,0.451,14,1.242,17,1.333,19,1.208,20,0.005,21,0.955,22,0.752,24,0.36,28,0.331,38,1.367,39,0.2,52,1.995,53,3.187,54,1.843,55,1.806,78,0.003,79,0.003,80,0.003,90,1.384,94,1.795,107,1.844,108,0.733,110,1.129,119,4.657,129,1.467,134,0.905,140,1.397,146,3.709,149,1.576,179,0.898,227,2.294,317,1.51,377,4.571,477,3.045,478,2.818,479,3.936,482,3.527,484,2.898,487,5.492,488,3.626,489,2.242,490,3.079,491,4.324,493,4.182,496,2.674,497,4.938,498,3.079,499,3.079,500,2.744,501,3.079,502,2.818,503,2.609,504,3.079,505,4.662,506,3.079,507,2.674,508,3.079,509,2.818,510,3.079,511,2.609,512,3.079,513,2.818,514,3.079,515,2.818,516,3.079,517,2.818,518,3.079,519,2.898,520,2.744,521,2.985,522,3.079,524,1.367,582,6.209,634,1.864,636,1.629,664,4.125,726,5.095,796,6.28,809,3.183,814,6.108,815,3.382,820,4.571,821,4.514,832,3.96,854,5.289,855,5.289,862,5.518,865,5.919,871,4.657,888,3.429,902,3.429,907,3.429,949,3.752,981,8.702,982,5.102,983,6.93,984,6.93,985,7.869,986,7.869,987,7.869,988,7.869,989,4.222,990,5.102,991,5.095,992,5.102,993,5.102,994,2.708,995,5.102,996,5.102,997,8.442,998,5.102,999,4.222,1000,5.102,1001,5.102,1002,5.102,1003,5.102,1004,4.222,1005,5.102,1006,5.102,1007,9.312,1008,5.102,1009,5.102,1010,2.548,1011,4.222,1012,5.102,1013,5.102,1014,5.102,1015,5.102,1016,5.102,1017,6.93,1018,5.102,1019,5.102,1020,5.102,1021,5.102,1022,5.102,1023,5.102,1024,5.102,1025,5.102,1026,5.102,1027,5.102,1028,5.102,1029,6.93,1030,3.578,1031,5.102,1032,5.102,1033,5.102,1034,5.102,1035,5.102,1036,5.102,1037,5.102,1038,5.102,1039,5.102,1040,6.93,1041,5.102,1042,5.102,1043,4.571]],["title/classes/ChartPalette.html",[0,0.082,1044,4.212]],["body/classes/ChartPalette.html",[0,0.105,2,1.578,3,0.254,4,0.238,5,0.238,8,1.747,10,0.262,14,1.578,17,1.271,19,1.536,20,0.005,21,0.734,22,0.956,24,0.246,28,0.386,39,0.254,52,2.416,55,2.304,78,0.003,79,0.004,80,0.003,94,1.579,110,1.957,126,2.85,134,0.863,159,1.794,180,3.166,183,1.143,192,2.05,227,2.202,309,1.273,313,5.035,314,5.035,806,5.715,1044,6.705,1045,9.531,1046,6.487,1047,3.356,1048,3.536,1049,3.536,1050,3.536,1051,7.261,1052,3.406,1053,7.313,1054,2.434,1055,6.487,1056,2.859,1057,6.487,1058,6.487,1059,6.487,1060,6.487,1061,6.487,1062,6.487,1063,5.812,1064,5.812,1065,5.812,1066,5.035,1067,5.812,1068,6.705,1069,5.367,1070,6.705,1071,6.487,1072,6.487,1073,6.487,1074,6.487,1075,5.812,1076,6.487,1077,8.839,1078,8.105,1079,6.487,1080,5.367,1081,5.812,1082,5.367,1083,6.487,1084,6.487,1085,8.105,1086,6.487,1087,5.367,1088,6.487,1089,5.812,1090,5.812,1091,6.487,1092,6.487,1093,6.487]],["title/classes/ChartPlugin.html",[0,0.082,465,1.622]],["body/classes/ChartPlugin.html",[0,0.115,2,1.722,3,0.277,4,0.26,5,0.26,8,1.842,10,0.286,11,0.556,14,2.235,17,1.363,20,0.005,24,0.269,28,0.277,39,0.277,78,0.004,79,0.004,80,0.004,90,1.297,94,1.863,175,1.923,179,1.312,183,1.247,216,3.805,269,2.323,436,3.805,443,2.951,444,3.087,446,2.487,447,3.087,464,2.266,465,2.724,548,2.841,1094,10.043,1095,7.076,1096,7.076,1097,7.076,1098,7.076,1099,7.076,1100,7.076]],["title/components/ChartPopoverComponent.html",[477,2.237,507,2.668]],["body/components/ChartPopoverComponent.html",[0,0.089,3,0.214,4,0.201,5,0.201,8,1.566,10,0.221,11,0.473,14,1.332,17,1.275,19,1.297,20,0.005,21,0.983,22,0.807,24,0.353,28,0.371,38,1.467,39,0.214,54,1.977,55,2.125,78,0.003,79,0.004,80,0.003,90,1.401,91,2.87,94,1.659,110,1.805,146,2.406,179,0.709,227,1.488,297,2.279,317,1.621,384,1.407,443,1.693,446,2.125,453,1.855,476,2.571,477,3.192,478,3.024,479,4.127,482,3.655,484,3.11,487,5.548,488,3.667,489,2.406,490,3.305,491,4.533,493,4.385,496,2.87,497,5.081,498,3.305,499,3.305,500,2.944,501,3.305,502,3.024,503,2.8,504,3.305,505,3.024,506,3.305,507,4.553,508,3.305,509,3.024,510,3.305,511,2.8,512,3.305,513,3.024,514,3.305,515,3.024,516,3.305,517,3.024,518,3.305,519,3.11,520,2.944,521,3.203,522,3.305,524,2.49,583,2.944,584,2.944,636,1.133,652,4.906,726,5.343,796,6.13,815,3.547,821,4.171,852,7.306,854,5.481,855,5.481,862,6.339,865,6.091,871,4.883,880,5.996,884,4.906,888,3.68,907,3.68,933,4.251,935,1.447,937,4.906,938,4.906,940,4.906,989,4.53,991,5.343,999,4.53,1004,4.53,1043,4.906,1101,8.494,1102,5.476,1103,7.358,1104,7.266,1105,7.266,1106,6.51,1107,5.476,1108,5.996,1109,5.476,1110,7.306,1111,5.476,1112,6.747,1113,5.476,1114,5.476,1115,8.155,1116,7.266,1117,5.476,1118,6.51,1119,4.026,1120,7.266,1121,5.476,1122,7.266,1123,3.416,1124,3.416,1125,5.476,1126,5.476,1127,5.476,1128,7.266,1129,6.012,1130,5.476,1131,5.476,1132,3.024,1133,4.25,1134,4.25,1135,4.25,1136,5.476,1137,7.266,1138,4.53,1139,5.476,1140,5.476,1141,5.476,1142,5.476,1143,5.476,1144,5.476]],["title/classes/ChartPopoverPlugin.html",[0,0.082,1108,3.743]],["body/classes/ChartPopoverPlugin.html",[0,0.067,2,1.005,3,0.162,4,0.152,5,0.152,10,0.167,11,0.389,12,1.027,14,1.005,17,1.346,19,0.978,20,0.005,21,0.467,22,0.609,24,0.341,28,0.359,39,0.234,40,0.002,41,0.666,55,1.83,57,0.902,78,0.002,79,0.003,80,0.002,85,0.671,89,1.019,90,1.153,92,2.897,94,1.845,107,2.031,108,0.793,109,2.838,110,1.989,113,1.542,114,2.014,115,3.387,117,1.923,124,1.123,143,2.648,144,1.89,161,1.694,175,1.715,179,1.164,183,0.728,192,0.915,225,1.821,227,2.384,253,1.708,269,1.624,290,1.019,297,2.511,317,1.223,320,1.815,384,1.978,418,2.493,436,2.222,439,2.489,443,2.779,444,2.838,446,1.83,447,2.271,453,2.765,456,4.975,459,2.29,464,1.019,465,2.863,466,2.578,471,2.578,472,2.578,473,2.578,474,2.578,476,2.597,507,3.132,583,2.222,584,2.222,587,2.493,596,1.624,597,1.468,607,1.972,627,1.78,634,1.663,636,1.453,664,2.166,673,2.063,734,1.554,741,1.297,760,1.062,790,2.347,815,2.917,902,2.777,933,4.107,935,2.033,947,7.79,1011,3.418,1030,4.191,1103,7.872,1108,4.394,1123,2.578,1124,2.578,1129,3.418,1134,4.639,1145,4.639,1146,5.502,1147,4.639,1148,5.354,1149,3.132,1150,2.985,1151,5.354,1152,4.394,1153,4.639,1154,4.639,1155,5.809,1156,3.878,1157,5.809,1158,5.809,1159,5.809,1160,6.81,1161,4.132,1162,4.132,1163,6.604,1164,3.52,1165,4.945,1166,3.702,1167,3.418,1168,4.639,1169,4.945,1170,4.945,1171,5.809,1172,2.641,1173,3.496,1174,4.132,1175,4.132,1176,5.45,1177,4.132,1178,4.132,1179,4.132,1180,4.132,1181,2.578,1182,2.578,1183,3.207,1184,3.207,1185,2.897,1186,4.639,1187,2.057,1188,3.418,1189,2.222,1190,3.418,1191,3.702,1192,3.702,1193,4.394,1194,3.207,1195,2.493,1196,2.578,1197,2.897,1198,3.702,1199,3.702,1200,2.777,1201,2.897,1202,3.702,1203,3.207,1204,1.569,1205,1.569,1206,3.038,1207,3.702,1208,3.702,1209,3.702,1210,3.702,1211,3.702,1212,3.702,1213,3.702,1214,3.702,1215,3.702,1216,3.702,1217,3.702,1218,4.394,1219,3.038,1220,4.016,1221,3.038,1222,1.517,1223,2.671,1224,5.809,1225,3.702,1226,4.945,1227,3.418,1228,3.038,1229,3.418,1230,3.207,1231,3.702,1232,3.702,1233,1.596,1234,3.038,1235,3.418,1236,3.702,1237,3.702,1238,3.702,1239,3.702,1240,3.702,1241,4.639,1242,3.207,1243,3.207,1244,3.207,1245,3.702,1246,3.702,1247,3.702,1248,3.702,1249,3.702,1250,3.207,1251,5.809,1252,3.864,1253,1.492,1254,3.702,1255,1.492,1256,2.493,1257,3.702,1258,5.45,1259,3.702,1260,3.702,1261,3.702,1262,3.702,1263,3.702]],["title/components/ChartTooltipComponent.html",[477,2.237,509,2.812]],["body/components/ChartTooltipComponent.html",[0,0.107,3,0.259,4,0.243,5,0.243,10,0.267,17,0.908,20,0.005,21,1.009,24,0.251,28,0.321,39,0.259,78,0.003,79,0.004,80,0.003,90,1.442,117,1.676,336,1.93,477,3.604,478,3.654,479,4.66,482,3.997,484,3.757,487,5.687,488,3.765,489,2.906,490,3.992,491,5.118,493,4.951,496,3.467,497,5.454,498,3.992,499,3.992,500,3.557,501,3.992,502,3.654,503,3.383,504,3.992,505,3.654,506,3.992,507,3.467,508,3.992,509,5.149,510,3.992,511,3.383,512,3.992,513,3.654,514,3.992,515,3.654,516,3.992,517,3.654,518,3.992,519,3.757,520,3.557,521,3.87,522,3.992,719,2.498,796,5.304,815,4.004,821,4.196,880,6.557,1110,7.99,1190,5.473,1264,6.368,1265,6.615,1266,7.35,1267,7.35,1268,5.514,1269,8.204,1270,8.204,1271,6.615,1272,6.615,1273,6.615,1274,6.615,1275,5.473,1276,6.615,1277,6.615,1278,6.615,1279,5.766,1280,8.204,1281,6.615]],["title/components/ChartTooltipsComponent.html",[477,2.237,511,2.604]],["body/components/ChartTooltipsComponent.html",[0,0.065,3,0.157,4,0.147,5,0.147,8,1.257,10,0.278,11,0.38,13,0.813,14,0.973,17,1.267,19,1.382,20,0.005,21,0.912,22,0.86,24,0.306,28,0.366,38,1.071,39,0.157,40,0.002,41,0.445,42,1.401,47,1.401,54,1.444,55,2.488,75,1.085,78,0.002,79,0.003,80,0.002,90,1.336,94,1.67,107,1.274,108,0.544,109,1.333,110,2.01,112,1.544,114,0.986,124,1.872,126,1.757,134,0.83,146,2.564,161,2.148,164,1.192,175,0.806,179,0.518,192,1.783,227,2.57,234,2.968,240,1.133,269,1.586,297,2.351,308,2.687,309,1.352,310,1.086,317,1.183,334,1.208,337,1.69,435,4.921,437,4.631,452,2.804,476,2.242,477,2.564,478,2.208,479,3.314,482,3.089,484,2.271,487,5.273,488,3.472,489,1.757,490,2.413,491,3.641,493,3.522,496,2.096,497,4.432,498,2.413,499,2.413,500,2.15,501,2.413,502,2.208,503,2.045,504,2.413,505,2.208,506,2.413,507,2.096,508,2.413,509,2.208,510,2.413,511,3.874,512,2.413,513,2.208,514,2.413,515,2.208,516,2.413,517,2.208,518,2.413,519,3.914,520,2.15,521,2.339,522,2.413,524,1.071,580,1.492,581,2.413,583,2.15,584,2.15,607,3.289,627,1.723,634,1.382,636,1.208,726,2.94,741,1.255,760,1.5,796,5.757,815,2.848,821,3.524,854,4.631,855,4.631,862,4.832,865,5.313,871,3.922,880,5.067,888,2.687,907,2.687,935,1.056,959,3.522,989,3.308,991,4.29,999,3.308,1030,4.832,1138,3.308,1194,3.103,1223,2.585,1234,2.94,1258,5.88,1264,6.911,1268,6.202,1282,3.582,1283,5.228,1284,5.228,1285,6.174,1286,6.174,1287,5.228,1288,3.998,1289,3.998,1290,3.998,1291,5.228,1292,5.701,1293,3.998,1294,3.998,1295,3.998,1296,6.174,1297,5.228,1298,3.998,1299,3.582,1300,5.228,1301,3.582,1302,7.783,1303,5.228,1304,5.228,1305,3.582,1306,3.582,1307,2.94,1308,2.804,1309,2.334,1310,3.582,1311,6.268,1312,3.308,1313,4.828,1314,3.582,1315,3.582,1316,1.274,1317,3.582,1318,3.582,1319,3.582,1320,3.582,1321,3.582,1322,3.582,1323,3.582,1324,5.228,1325,3.582,1326,3.582,1327,3.582,1328,3.582,1329,3.582,1330,3.582,1331,3.582,1332,3.308,1333,3.582,1334,5.228,1335,5.228,1336,4.828,1337,5.228,1338,5.228,1339,3.582,1340,5.228,1341,3.582,1342,3.582,1343,6.174,1344,3.582,1345,3.582,1346,5.228,1347,3.582,1348,3.582,1349,5.228,1350,3.582,1351,6.174,1352,5.228,1353,3.582,1354,3.582,1355,3.582,1356,3.582,1357,2.215,1358,3.582,1359,2.494,1360,3.582,1361,3.582,1362,6.788,1363,3.582,1364,3.582,1365,5.228,1366,3.582,1367,3.582,1368,3.582,1369,3.582,1370,3.308,1371,3.582,1372,3.103,1373,3.582,1374,3.582,1375,3.582,1376,3.308,1377,3.582,1378,3.582,1379,3.582,1380,3.582,1381,3.582,1382,3.582,1383,3.582,1384,5.228,1385,5.228,1386,5.228,1387,6.174,1388,3.582,1389,3.582,1390,3.582,1391,3.308,1392,3.582,1393,3.308,1394,2.687,1395,3.582,1396,3.582,1397,5.228,1398,3.582,1399,3.582,1400,3.582,1401,3.582,1402,3.582,1403,3.582,1404,3.582,1405,3.582,1406,3.582,1407,3.582,1408,3.582,1409,3.582,1410,3.582,1411,3.582,1412,3.582,1413,3.582]],["title/classes/ChartTooltipsPlugin.html",[0,0.082,437,3.422]],["body/classes/ChartTooltipsPlugin.html",[0,0.062,2,0.927,3,0.149,4,0.14,5,0.14,10,0.154,11,0.366,12,1.076,14,0.927,17,1.32,19,1.333,20,0.005,21,0.637,22,0.83,24,0.325,28,0.357,34,0.699,39,0.309,40,0.002,41,0.746,42,1.608,47,1.608,55,1.746,57,0.832,78,0.002,79,0.003,80,0.002,85,0.914,90,1.115,94,1.829,107,1.725,108,0.69,109,2.929,110,1.894,112,3.392,113,2.102,114,0.939,115,3.277,117,1.15,129,1.619,134,0.355,144,1.742,149,1.28,161,1.596,164,1.084,175,1.724,179,1.162,192,1.483,197,2.559,212,2.38,213,3.129,227,2.545,234,1.195,247,1.926,255,1.673,269,1.53,281,1.019,283,2.323,290,0.939,297,2.311,303,1.859,317,1.127,320,1.673,333,1.064,334,1.712,336,1.642,404,2.63,411,1.767,435,5.83,436,2.048,437,3.784,438,5.199,439,2.555,440,5.199,441,4.988,442,5.199,443,2.716,444,2.767,445,4.658,446,1.746,447,2.167,451,4.14,452,3.948,453,2.898,455,1.907,456,4.785,458,5.744,459,1.851,460,4.14,463,4.14,464,0.939,465,2.798,466,2.376,469,4.37,471,2.376,472,2.376,473,2.376,474,2.376,476,1.983,511,2.879,524,1.509,572,1.29,576,1.666,580,1.421,581,2.298,583,2.048,584,2.048,586,2.8,587,2.298,596,2.011,597,1.353,607,2.688,634,0.902,636,0.788,664,1.996,673,3.346,741,1.195,752,1.232,757,2.68,773,4.467,793,2.048,815,2.748,877,2.67,879,1.398,921,1.421,935,2.185,1123,2.376,1124,2.376,1133,6.816,1145,4.37,1146,4.331,1147,4.37,1153,4.37,1154,4.37,1172,1.232,1173,2.228,1183,2.956,1184,2.956,1185,2.67,1187,2.305,1200,4.502,1201,2.67,1206,2.8,1218,4.14,1219,2.8,1220,2.559,1221,2.8,1222,1.398,1223,2.462,1228,2.8,1230,2.956,1241,4.37,1242,2.956,1243,2.956,1244,2.956,1250,2.956,1268,5.749,1309,2.507,1414,7.548,1415,3.808,1416,3.808,1417,6.002,1418,2.138,1419,3.808,1420,3.808,1421,3.808,1422,3.808,1423,3.808,1424,3.808,1425,3.808,1426,3.412,1427,6.534,1428,2.956,1429,3.151,1430,1.446,1431,2.8,1432,6.13,1433,4.658,1434,3.151,1435,3.151,1436,2.956,1437,4.658,1438,5.044,1439,3.412,1440,1.902,1441,3.412,1442,6.123,1443,6.123,1444,6.123,1445,6.123,1446,6.13,1447,5.044,1448,3.412,1449,3.412,1450,5.044,1451,3.412,1452,3.412,1453,3.412,1454,1.111,1455,3.412,1456,6.002,1457,3.412,1458,3.412,1459,3.412,1460,4.697,1461,5.199,1462,3.412,1463,3.412,1464,3.412,1465,3.412,1466,3.412,1467,2.956,1468,2.956,1469,5.044,1470,3.412,1471,3.412,1472,2.956,1473,3.412,1474,3.412,1475,3.412,1476,6.123,1477,3.412,1478,3.412,1479,3.412,1480,3.412,1481,3.412,1482,3.412,1483,3.412,1484,3.412,1485,3.412,1486,3.412,1487,3.412,1488,3.412,1489,1.859,1490,2.8,1491,3.412,1492,3.151,1493,3.412,1494,3.412,1495,3.412,1496,3.412,1497,3.412,1498,3.412,1499,2.376,1500,2.956,1501,2.376,1502,2.956,1503,2.956,1504,5.044,1505,3.151,1506,2.8,1507,3.412,1508,3.412,1509,3.412,1510,3.412]],["title/classes/DataSeries.html",[0,0.082,218,1.443]],["body/classes/DataSeries.html",[0,0.111,2,1.67,3,0.269,4,0.252,5,0.252,8,1.808,10,0.277,11,0.546,12,1.218,13,1.168,14,1.67,17,1.33,19,1.625,20,0.005,21,1.069,22,1.011,24,0.374,28,0.269,33,1.693,34,1.259,35,2.154,37,1.918,39,0.269,56,3.206,57,1.833,78,0.003,79,0.004,80,0.003,94,1.84,107,1.499,108,0.639,126,3.015,134,0.88,159,2.09,183,1.209,209,2.716,211,5.327,218,2.57,245,3.898,303,3.35,760,2.33,902,4.612,1454,2.448,1511,9.855,1512,6.863,1513,8.392,1514,8.392,1515,6.863,1516,6.863,1517,6.863,1518,6.148,1519,6.863,1520,5.678,1521,6.863,1522,6.863,1523,6.863,1524,6.863,1525,3.79,1526,6.863,1527,6.148,1528,6.863,1529,4.812]],["title/classes/DimensionConfig.html",[0,0.082,138,3.072]],["body/classes/DimensionConfig.html",[0,0.071,2,1.069,3,0.172,4,0.161,5,0.161,8,1.346,10,0.177,11,0.406,17,1.365,19,2.163,20,0.005,21,1.033,22,1.346,24,0.362,28,0.172,39,0.172,55,1.628,75,1.134,78,0.002,79,0.003,80,0.002,84,2.741,94,1.875,106,4.005,107,1.826,108,0.938,109,2.897,112,3.355,113,3.243,114,2.143,117,2.048,122,3.469,124,2.15,132,3.739,137,4.6,138,3.769,155,3.192,161,2.589,164,1.421,165,3.936,172,3.635,175,1.94,183,0.774,184,4.966,192,2.022,227,1.697,269,1.697,291,4.255,634,2.163,636,1.891,1530,9.988,1531,4.013,1532,4.013,1533,3.907,1534,5.044,1535,5.044,1536,4.393,1537,4.393,1538,4.393,1539,3.936,1540,4.393,1541,4.37,1542,4.393,1543,4.393,1544,4.393,1545,4.37,1546,4.393,1547,4.393,1548,4.393,1549,4.37,1550,4.393,1551,4.393,1552,4.393,1553,4.37,1554,4.393,1555,4.393,1556,4.393,1557,4.393,1558,4.393,1559,4.393,1560,4.393,1561,4.393,1562,7.266,1563,7.913,1564,7.266,1565,7.913,1566,7.266,1567,7.266,1568,4.393,1569,4.393,1570,4.393,1571,7.266,1572,7.266,1573,4.393,1574,4.393]],["title/classes/DonutGaugeRenderingUtil.html",[0,0.082,1575,4.561]],["body/classes/DonutGaugeRenderingUtil.html",[0,0.112,2,1.68,3,0.27,4,0.254,5,0.254,10,0.279,12,0.868,17,0.948,19,1.635,20,0.005,21,0.781,22,1.017,24,0.262,28,0.33,39,0.27,55,1.799,78,0.003,79,0.004,80,0.003,94,1.233,96,3.855,108,0.785,117,1.41,146,3.993,148,6.969,164,1.299,175,1.391,192,1.864,227,2.636,269,2.289,309,1.355,336,2.014,455,2.853,756,4.464,1529,5.906,1575,7.546,1576,8.423,1577,8.423,1578,6.537,1579,6.904,1580,8.423,1581,8.423,1582,6.904,1583,4.841,1584,4.167,1585,8.423,1586,6.904,1587,9.089,1588,6.904,1589,8.423,1590,6.904,1591,6.904,1592,6.904,1593,6.904,1594,6.904,1595,6.904,1596,6.904,1597,8.423,1598,8.423,1599,2.993,1600,6.904,1601,6.904,1602,6.904,1603,4.039,1604,6.904,1605,6.904,1606,6.904,1607,6.904]],["title/classes/EventBus.html",[0,0.082,525,1.551]],["body/classes/EventBus.html",[0,0.118,2,1.777,3,0.286,4,0.268,5,0.268,10,0.295,17,1.196,19,1.729,20,0.005,21,0.826,22,1.076,24,0.277,28,0.341,39,0.286,55,1.903,78,0.004,79,0.004,80,0.004,94,1.786,110,1.617,134,0.918,175,1.756,179,0.946,192,1.617,269,2.367,297,2.754,317,2.161,443,2.982,525,2.655,580,2.726,581,4.408,774,2.12,1608,9.312,1609,7.303,1610,8.713,1611,7.303,1612,8.713,1613,7.303,1614,7.303,1615,7.303,1616,9.312,1617,7.303,1618,7.303]],["title/classes/Grid.html",[0,0.082,83,1.291]],["body/classes/Grid.html",[0,0.115,2,1.294,3,0.103,4,0.097,5,0.097,8,1.146,10,0.107,11,0.276,17,1.292,19,1.687,20,0.005,21,1.024,22,1.05,24,0.347,28,0.336,39,0.166,44,4.27,47,0.633,49,4.27,55,1.105,57,0.576,75,0.872,78,0.001,79,0.002,80,0.001,83,2.294,85,0.428,89,2.208,90,1.165,94,1.826,95,0.985,96,3.753,101,4.361,104,1.105,106,1.901,107,1.755,108,0.726,110,1.177,112,1.638,113,0.985,117,1.455,124,0.717,126,1.863,129,1.918,130,2.646,132,3.454,133,4.011,134,0.698,138,1.593,143,3.114,149,1.385,150,3.889,161,0.748,175,1.857,178,2.676,183,0.747,184,4.288,192,2.04,194,0.952,216,1.419,222,1.095,227,2.37,240,1.202,253,1.482,269,1.152,285,1.057,291,2.281,297,1.865,308,1.773,309,1.528,310,2.116,317,0.781,329,1.773,334,1.381,335,2.183,336,1.777,339,2.85,343,1.646,347,1.94,368,1.292,380,1.019,384,2.242,446,1.587,447,1.372,459,1.061,464,1.646,476,1.255,488,2.236,489,1.159,525,2.171,529,3.644,539,3.052,545,2.611,548,1.883,552,1.981,580,2.66,581,1.593,589,1.037,590,1.349,591,1.669,592,4.19,593,1.419,596,0.717,597,1.507,598,1.383,607,1.26,627,1.137,633,4.997,634,1.259,635,2.048,636,1.707,665,2.204,667,2.364,673,4.471,703,1.912,704,1.72,705,2.217,709,3.83,711,2.364,714,2.364,719,1.632,720,1.92,721,3.509,722,4.727,723,3.292,734,1.177,756,3.438,757,1.056,760,1.09,765,1.26,768,2.07,772,1.583,787,0.592,809,1.646,823,0.969,824,0.792,825,0.908,827,1.019,837,1.94,932,1.827,949,1.94,1010,2.656,1149,2.787,1150,1.318,1152,3.91,1164,1.94,1195,2.56,1252,4.314,1253,1.532,1357,1.61,1418,1.61,1431,1.94,1489,1.288,1490,3.91,1578,6.77,1619,2.183,1620,1.002,1621,5.317,1622,5.317,1623,5.317,1624,5.317,1625,5.317,1626,2.937,1627,3.8,1628,3.363,1629,3.363,1630,3.275,1631,2.639,1632,4.478,1633,5.165,1634,2.639,1635,2.09,1636,2.639,1637,2.639,1638,5.507,1639,3.8,1640,3.192,1641,7.489,1642,4.241,1643,2.639,1644,4.241,1645,5.178,1646,2.639,1647,2.639,1648,2.639,1649,2.281,1650,2.639,1651,3.8,1652,2.281,1653,3.118,1654,1.459,1655,2.639,1656,3.275,1657,2.639,1658,2.639,1659,2.639,1660,2.639,1661,2.639,1662,3.363,1663,2.639,1664,2.639,1665,2.639,1666,2.342,1667,2.639,1668,2.639,1669,1.773,1670,1.706,1671,2.73,1672,1.288,1673,2.183,1674,2.639,1675,2.787,1676,1.419,1677,7.2,1678,2.183,1679,1.037,1680,3.8,1681,1.419,1682,5.52,1683,5.317,1684,2.639,1685,2.639,1686,2.639,1687,2.538,1688,2.639,1689,2.639,1690,1.383,1691,1.159,1692,2.364,1693,2.639,1694,2.639,1695,2.639,1696,2.639,1697,2.639,1698,1.646,1699,2.639,1700,2.639,1701,2.639,1702,2.639,1703,2.364,1704,2.639,1705,4.241,1706,2.364,1707,3.8,1708,4.764,1709,3.8,1710,5.317,1711,4.241,1712,2.364,1713,2.364,1714,2.639,1715,2.639,1716,2.639,1717,6.09,1718,2.639,1719,2.183,1720,2.639,1721,2.183,1722,2.639,1723,1.056,1724,4.241,1725,2.639,1726,2.183,1727,2.639,1728,2.639,1729,2.639,1730,2.364,1731,2.639,1732,5.317,1733,2.639,1734,4.241,1735,2.639,1736,1.583,1737,2.639,1738,2.639,1739,2.364,1740,2.364,1741,2.639,1742,2.639,1743,3.8,1744,2.639,1745,2.639,1746,2.639,1747,2.639,1748,2.364,1749,2.639,1750,2.639,1751,2.639,1752,2.639,1753,2.364,1754,5.977,1755,2.342,1756,1.457,1757,2.639,1758,4.241,1759,2.639,1760,2.639,1761,2.639,1762,2.639,1763,2.364,1764,2.364,1765,2.639,1766,2.639,1767,1.697,1768,2.639,1769,4.241,1770,2.639,1771,2.639,1772,2.639,1773,2.639,1774,4.241,1775,6.09,1776,2.639,1777,4.241,1778,2.639,1779,2.183,1780,2.639,1781,2.639,1782,0.938,1783,2.639,1784,2.639,1785,2.639,1786,2.639,1787,2.639,1788,2.639,1789,2.639,1790,1.457,1791,1.457,1792,2.183,1793,1.646,1794,2.639,1795,1.457,1796,4.241,1797,2.364,1798,2.639,1799,2.639,1800,2.048,1801,2.639,1802,2.639,1803,4.241,1804,4.241,1805,4.241,1806,2.639,1807,2.639,1808,2.639,1809,2.639,1810,2.639,1811,2.639,1812,3.8,1813,2.639,1814,2.639,1815,5.456,1816,5.456,1817,5.456,1818,6.09,1819,6.09,1820,5.456,1821,6.09,1822,2.639,1823,1.94,1824,2.639,1825,2.639,1826,2.639,1827,2.639,1828,2.639,1829,2.364,1830,2.639,1831,2.639,1832,2.639,1833,2.639,1834,2.364,1835,2.639,1836,2.639]],["title/classes/GridConfig.html",[0,0.082,130,3.176]],["body/classes/GridConfig.html",[0,0.102,2,1.54,3,0.248,4,0.233,5,0.233,8,1.72,10,0.256,11,0.519,17,1.26,20,0.005,24,0.348,28,0.313,39,0.248,75,1.421,78,0.003,79,0.004,80,0.003,84,3.948,85,1.028,94,1.821,101,4.172,102,2.342,103,4.198,104,2.278,106,3.917,107,2.004,108,0.855,109,2.662,110,1.766,112,3.082,113,2.979,114,1.968,124,2.168,126,3.506,127,5.596,128,5.635,129,2.853,130,5.453,132,3.642,133,4.677,134,0.59,135,5.363,137,3.917,138,5.275,140,1.608,143,2.178,170,5.236,183,1.115,184,4.725,488,2.323,552,2.956,627,2.727,1539,5.67,1675,3.317,1837,9.461,1838,6.328,1839,6.328,1840,3.317,1841,3.403,1842,3.403,1843,3.403,1844,3.403,1845,3.403,1846,3.089,1847,3.403,1848,6.328,1849,6.328,1850,6.328,1851,6.328]],["title/classes/HorizontalBarAccessors.html",[0,0.082,1852,4.561]],["body/classes/HorizontalBarAccessors.html",[0,0.104,2,1.568,3,0.252,4,0.237,5,0.237,7,2.488,10,0.26,11,0.525,12,1.263,13,1.398,14,1.568,15,5.659,16,5.101,17,1.378,19,1.526,20,0.005,21,0.729,22,0.949,23,3.145,24,0.381,28,0.345,38,1.726,39,0.252,41,0.899,56,3.77,57,2.077,58,7.092,59,5.916,75,0.923,78,0.003,79,0.004,80,0.003,115,4.026,159,1.786,198,6.143,200,4.584,203,5.763,205,5.086,206,4.584,207,5.331,208,5.331,210,3.218,255,4.179,291,4.34,994,2.217,1052,3.336,1852,7.23,1853,9.237,1854,7.23,1855,5.331,1856,5.772,1857,5.772,1858,5.772,1859,5.772,1860,5.772,1861,4.166,1862,5.772,1863,4.166,1864,5.772,1865,4.166,1866,7.23,1867,4.166,1868,4.33,1869,5.772,1870,5.772]],["title/interfaces/IAccessors.html",[34,0.934,40,0.003]],["body/interfaces/IAccessors.html",[3,0.125,4,0.118,5,0.118,10,0.274,11,0.441,12,1.274,13,1.373,20,0.005,21,0.829,22,0.999,24,0.324,28,0.348,33,1.218,34,0.906,35,2.127,36,2.159,37,1.38,39,0.399,40,0.005,41,0.928,42,1.758,47,1.758,57,1.69,75,0.864,78,0.002,79,0.002,80,0.002,83,1.528,85,0.52,89,1.218,90,1.304,97,1.638,102,0.858,104,0.834,108,0.46,114,0.79,117,0.654,129,2.395,134,0.883,140,1.759,149,1.123,158,0.961,159,1.966,164,1.28,179,1.183,183,0.564,194,1.521,209,2.018,218,1.4,225,0.976,234,2.298,240,0.908,241,0.976,247,2.554,250,1.237,253,1.202,280,1.528,281,1.401,283,1.005,285,1.348,290,0.79,299,2.047,309,1.33,310,1.99,328,0.976,333,1.894,334,1.248,368,0.976,380,1.907,384,0.823,399,1.175,411,1.005,417,1.068,439,1.036,443,1.527,444,1.598,446,1.908,447,1.598,453,1.673,455,2.042,459,1.831,464,1.487,465,1.574,476,2.167,524,1.962,525,1.505,530,1.281,531,1.281,532,1.281,533,1.281,539,1.55,541,1.215,545,1.638,547,1.281,548,1.527,553,1.281,557,1.976,561,1.976,571,1.281,572,1.673,575,1.258,576,2.006,589,1.258,591,1.005,595,1.281,596,1.342,599,1.281,634,0.758,636,1.022,665,0.99,703,1.55,704,1.95,705,2.006,719,0.858,720,1.156,734,1.5,736,0.99,738,1.95,741,2.127,744,1.119,752,1.036,760,1.269,766,1.138,774,1.782,782,0.976,787,1.521,789,2.581,798,1.068,812,1.258,817,1.258,823,1.813,824,1.483,825,1.7,827,1.907,879,1.175,921,1.195,935,1.593,994,1.102,1047,1.215,1048,1.281,1049,1.281,1050,1.281,1052,2.296,1054,0.961,1056,1.598,1172,2.192,1187,2.332,1204,1.215,1205,1.215,1222,2.213,1233,1.237,1253,1.156,1255,1.783,1309,2.042,1316,1.574,1418,1.215,1430,2.573,1454,1.441,1599,1.755,1620,1.215,1654,1.7,1679,1.258,1723,1.281,1736,1.195,1767,1.281,1782,2.142,1871,0.485,1872,1.258,1873,2.012,1874,2.412,1875,2.488,1876,1.892,1877,1.976,1878,1.941,1879,1.976,1880,1.622,1881,1.462,1882,1.598,1883,2.412,1884,1.258,1885,1.237,1886,2.705,1887,1.258,1888,1.258,1889,1.119,1890,1.281,1891,1.281,1892,1.755,1893,1.883,1894,1.138,1895,1.791,1896,3.19,1897,1.304,1898,1.875,1899,1.156,1900,2.412,1901,1.304,1902,2.012,1903,1.976,1904,1.976,1905,1.304,1906,1.976,1907,2.329,1908,1.875,1909,1.304,1910,1.119,1911,1.304,1912,1.215,1913,1.215,1914,1.865,1915,1.175,1916,1.304,1917,1.304,1918,0.976,1919,1.304,1920,1.258,1921,1.907,1922,1.976,1923,1.281,1924,1.976,1925,1.304,1926,1.258,1927,1.304,1928,2.541,1929,1.304,1930,1.281,1931,1.304,1932,1.976,1933,1.258,1934,1.119,1935,1.281,1936,1.281,1937,1.304,1938,1.304,1939,1.304,1940,1.304,1941,1.281,1942,2.012,1943,1.304,1944,1.281,1945,1.237,1946,1.304,1947,1.304,1948,1.622,1949,1.844,1950,1.281,1951,1.95,1952,1.304,1953,1.281,1954,1.281,1955,1.304,1956,1.304,1957,1.304,1958,1.281,1959,1.304,1960,1.102,1961,1.195,1962,1.281,1963,1.304,1964,1.304,1965,1.304,1966,1.304,1967,1.258,1968,1.281,1969,1.258,1970,1.258,1971,1.304,1972,2.012,1973,2.711,1974,1.304,1975,1.281,1976,1.304,1977,1.304,1978,1.304,1979,1.304,1980,1.304,1981,1.647,1982,1.068,1983,1.304,1984,1.304,1985,1.875,1986,1.258,1987,1.361,1988,1.258,1989,1.304,1990,1.304,1991,1.875,1992,2.012,1993,1.304,1994,1.304,1995,2.251,1996,1.907,1997,2.251,1998,1.281,1999,1.258,2000,1.036,2001,1.281,2002,1.258,2003,1.237,2004,1.052,2005,1.304,2006,1.119]],["title/interfaces/IAllAround.html",[40,0.003,106,2.282]],["body/interfaces/IAllAround.html",[0,0.052,3,0.126,4,0.119,5,0.119,10,0.13,11,0.323,20,0.005,21,0.365,24,0.307,28,0.327,39,0.358,40,0.005,41,0.554,52,1.26,75,0.462,78,0.002,79,0.002,80,0.002,83,2.511,85,0.524,89,1.226,90,0.702,95,3.485,100,1.612,101,3.508,102,1.331,103,3.551,104,1.579,106,3.839,108,0.753,109,2.968,110,1.79,112,3.488,113,3.322,114,2.228,122,2.892,133,3.626,134,0.634,137,3.92,140,1.82,143,2.671,149,0.734,150,2.482,152,1.612,153,2.672,154,1.782,155,3.41,156,1.782,157,1.782,158,2.044,160,1.782,161,1.929,164,1.375,166,2.672,167,2.604,168,1.735,175,1.937,178,2.99,179,0.418,180,2.425,181,3.567,182,2.604,194,1.814,214,1.268,253,2.25,254,1.476,281,0.584,285,1.353,297,1.693,309,1.772,310,2.197,317,0.955,334,1.674,384,1.995,404,3.179,446,0.841,459,0.807,464,1.226,488,1.185,489,2.183,524,1.624,525,1.846,529,1.65,539,2.835,545,2.454,548,1.874,552,3.179,580,1.205,590,1.65,591,1.56,592,2.957,593,1.735,596,0.877,597,1.147,598,1.691,627,1.39,634,2.139,636,1.914,665,1.537,703,2.621,704,1.96,705,1.471,709,2.541,719,0.865,734,1.1,736,1.537,753,1.575,765,3.249,768,1.575,770,2.823,771,1.446,772,2.262,787,0.724,800,1.691,808,3.567,824,0.969,932,3.344,1010,1.612,1054,2.507,1132,1.782,1149,1.691,1164,3.7,1189,1.735,1316,1.583,1357,1.886,1440,3.399,1531,2.744,1532,3.759,1533,1.735,1534,1.782,1535,1.782,1541,1.782,1545,1.782,1549,1.782,1553,1.782,1626,1.782,1628,1.782,1629,1.782,1630,1.735,1633,5.578,1635,1.268,1640,2.604,1649,1.735,1656,1.735,1662,2.744,1666,1.782,1671,2.716,1672,1.575,1675,1.691,1676,1.735,1681,1.735,1687,3.508,1690,1.691,1691,2.662,1755,2.744,1756,1.782,1840,1.691,1841,1.735,1842,1.735,1843,1.735,1844,1.735,1845,2.672,1846,1.575,1847,1.735,1871,0.489,1876,2.793,1893,2.198,1895,0.853,1928,1.06,1948,1.06,1987,2.301,2000,1.044,2007,1.782,2008,4.967,2009,2.892,2010,4.83,2011,1.833,2012,2.822,2013,2.772,2014,3.819,2015,2.482,2016,1.833,2017,1.54,2018,3.852,2019,3.166,2020,3.759,2021,3.113,2022,2.744,2023,4.915,2024,2.822,2025,3.866,2026,2.744,2027,1.833,2028,1.418,2029,1.782,2030,2.744,2031,1.782,2032,1.782,2033,2.672,2034,1.782,2035,1.782,2036,2.831,2037,2.514,2038,1.782,2039,1.735,2040,1.833,2041,1.782,2042,1.782,2043,1.782,2044,1.833,2045,1.833,2046,1.691,2047,1.54,2048,1.833,2049,2.604,2050,1.833,2051,1.54,2052,1.833,2053,2.672,2054,2.822,2055,2.822,2056,2.372,2057,2.372,2058,1.833,2059,1.782,2060,1.735,2061,1.833,2062,1.833]],["title/interfaces/IAreaAccessors.html",[9,3.57,40,0.003]],["body/interfaces/IAreaAccessors.html",[0,0.102,1,4.398,3,0.246,4,0.231,5,0.231,6,4.868,7,2.423,8,1.352,9,6.104,10,0.253,11,0.516,12,1.187,13,1.314,16,3.464,20,0.005,23,3.062,24,0.301,25,6.938,27,6.938,28,0.311,29,4.159,30,4.507,31,3.288,32,2.93,33,2.499,34,1.597,35,2.491,36,2.528,37,2.433,38,1.681,39,0.358,40,0.004,41,1.019,42,1.905,43,6.159,44,5.564,45,6.159,46,6.159,47,1.905,48,6.159,49,5.564,50,6.159,51,6.159,52,2.012,53,2.865,54,2.265,55,1.635,56,2.93,57,2.199,58,7.279,59,6.073,60,4.216,61,6.159,62,4.216,63,6.159,64,4.868,65,4.868,66,4.868,67,4.868,68,4.868,69,4.868,70,4.868,71,4.868,72,2.87,73,3.288,74,3.288,75,1.137,76,3.669,77,3.669,78,0.003,79,0.004,80,0.003,1871,0.95]],["title/interfaces/IAreaDataAccessors.html",[25,3.743,40,0.003]],["body/interfaces/IAreaDataAccessors.html",[0,0.096,1,4.143,3,0.231,4,0.217,5,0.217,6,4.585,7,2.282,8,1.273,9,5.355,10,0.239,11,0.497,12,0.961,13,1.063,16,3.263,20,0.005,23,2.884,24,0.378,25,6.578,27,6.222,28,0.299,29,4.003,30,4.338,31,3.097,32,2.76,33,2.594,34,1.401,35,2.656,36,2.433,37,2.365,38,1.583,39,0.35,40,0.004,41,0.997,42,2.224,43,7.19,44,6.496,45,7.19,46,7.19,47,2.224,48,7.19,49,6.496,50,7.19,51,7.19,52,1.936,53,2.758,54,2.133,55,1.54,56,2.76,57,2.178,58,7.238,59,6.038,60,3.97,61,5.927,62,3.97,63,5.927,64,4.585,65,4.585,66,4.585,67,4.585,68,4.585,69,4.585,70,4.585,71,4.585,72,2.703,73,3.097,74,3.097,75,1.094,76,3.456,77,3.456,78,0.003,79,0.004,80,0.003,1871,0.895]],["title/interfaces/IAreaRendererConfig.html",[40,0.003,2063,3.292]],["body/interfaces/IAreaRendererConfig.html",[0,0.121,3,0.182,4,0.171,5,0.171,10,0.188,11,0.423,12,1.142,13,0.648,20,0.005,21,0.848,22,1.365,24,0.308,28,0.369,34,0.853,38,1.246,39,0.369,40,0.005,41,0.904,52,1.648,53,1.68,78,0.002,79,0.003,80,0.002,85,0.755,89,2.183,90,0.918,102,2.288,107,1.773,124,1.264,134,0.889,140,1.721,149,2.065,155,2.857,159,1.439,164,1.309,179,0.842,194,2.272,209,2.066,210,2.323,214,1.828,218,1.319,240,1.319,247,2.334,253,2.153,255,3.293,263,2.902,268,4.385,281,1.357,285,1.698,290,1.147,292,2.807,293,2.807,294,3.496,295,3.578,296,3.104,297,2.095,299,2.539,302,2.807,305,2.807,306,2.438,309,1.593,317,1.377,327,2.271,328,1.418,331,2.379,332,2.323,333,1.3,336,1.897,337,1.966,580,1.736,636,1.768,719,1.742,734,1.797,777,3.293,782,1.981,787,1.459,802,3.744,959,3.924,1256,2.807,1359,4.677,1525,3.591,1584,2.807,1790,4.483,1791,3.591,1795,4.14,1871,0.705,1880,2.666,1881,2.528,1882,1.505,1893,1.824,1895,1.981,1899,2.707,1914,2.641,1934,3.176,1982,2.169,1987,1.282,2009,2.221,2013,4.048,2021,2.975,2028,4.071,2047,2.221,2063,4.204,2064,3.008,2065,5.455,2066,5.74,2067,5.74,2068,4.258,2069,4.37,2070,5.74,2071,5.038,2072,4.385,2073,4.37,2074,5.328,2075,5.522,2076,4.37,2077,2.902,2078,3.126,2079,2.501,2080,4.37,2081,2.501,2082,4.057,2083,4.204,2084,4.204,2085,4.057,2086,3.008,2087,3.008,2088,3.804,2089,2.438,2090,3.008,2091,4.847,2092,5.038,2093,4.204,2094,2.902,2095,3.126,2096,3.126,2097,3.126,2098,2.902,2099,3.126,2100,3.126,2101,3.126,2102,2.902,2103,4.37,2104,4.204,2105,2.902,2106,3.126,2107,4.37,2108,4.204,2109,2.721,2110,3.126,2111,3.126,2112,3.008,2113,3.008,2114,5.038,2115,3.126,2116,3.126,2117,3.008,2118,2.902,2119,3.126,2120,3.126,2121,3.126,2122,3.126,2123,3.126,2124,2.721]],["title/interfaces/IAreaSeriesAccessors.html",[27,3.743,40,0.003]],["body/interfaces/IAreaSeriesAccessors.html",[0,0.101,1,4.379,3,0.245,4,0.229,5,0.229,6,4.847,7,2.412,8,1.346,9,5.549,10,0.252,11,0.515,12,0.995,13,1.102,16,3.449,20,0.005,22,1.346,23,3.048,24,0.3,25,6.387,27,6.715,28,0.31,29,4.148,30,4.494,31,3.273,32,2.918,33,2.498,34,1.452,35,2.484,36,2.768,37,2.733,38,1.673,39,0.358,40,0.004,41,1.017,42,1.899,43,6.142,44,5.549,45,6.142,46,6.142,47,1.899,48,6.142,49,5.549,50,6.142,51,6.142,52,2.389,53,3.403,54,2.255,55,1.627,56,2.918,57,2.198,58,7.276,59,6.07,60,4.197,61,6.142,62,4.197,63,6.142,64,4.847,65,4.847,66,4.847,67,4.847,68,4.847,69,4.847,70,4.847,71,4.847,72,2.857,73,3.273,74,3.273,75,1.134,76,3.653,77,3.653,78,0.003,79,0.004,80,0.003,1871,0.946]],["title/interfaces/IAxis.html",[40,0.003,2060,2.738]],["body/interfaces/IAxis.html",[0,0.053,3,0.127,4,0.119,5,0.119,10,0.131,11,0.325,20,0.005,21,0.367,24,0.308,28,0.328,39,0.359,40,0.005,41,0.556,52,1.266,75,0.465,78,0.002,79,0.003,80,0.002,83,2.504,85,0.527,89,1.232,90,0.705,95,3.687,100,1.622,101,3.518,102,1.338,103,3.56,104,1.585,106,3.75,108,0.755,109,2.595,110,1.794,112,3.13,113,2.905,114,1.999,122,2.904,133,3.635,134,0.636,137,3.926,140,1.823,143,2.678,149,0.738,150,2.494,152,1.622,153,2.685,154,1.793,155,3.419,156,1.793,157,1.793,158,2.05,160,1.793,161,1.936,164,1.375,166,2.685,167,2.617,168,1.746,175,1.939,178,3.238,179,0.421,180,2.437,181,3.579,182,2.617,194,1.818,214,1.276,253,2.253,254,1.486,281,0.588,285,1.358,297,1.7,309,1.864,310,2.202,317,0.961,334,1.678,384,2,404,3.19,446,0.846,459,0.812,464,1.232,488,1.192,489,2.194,524,2.085,525,1.854,529,1.661,539,2.839,545,2.598,548,1.881,552,3.19,580,1.212,590,1.661,591,1.567,592,2.969,593,1.746,596,0.882,597,1.154,598,1.702,627,1.399,634,2.142,636,1.917,665,1.544,703,2.626,704,1.968,705,1.478,709,2.553,719,0.87,734,1.105,736,1.544,753,1.585,765,3.26,768,1.585,770,2.833,771,1.455,772,2.271,787,0.729,800,1.702,808,4.592,824,0.975,932,3.353,1010,1.622,1054,2.05,1132,1.793,1149,1.702,1164,3.708,1189,1.746,1316,1.591,1357,1.896,1440,3.41,1531,2.758,1532,3.771,1533,1.746,1534,1.793,1535,1.793,1541,1.793,1545,1.793,1549,1.793,1553,1.793,1626,1.793,1628,1.793,1629,1.793,1630,1.746,1633,5.581,1635,1.276,1640,2.617,1649,1.746,1656,1.746,1662,2.758,1666,1.793,1671,2.726,1672,1.585,1675,1.702,1676,1.746,1681,1.746,1687,2.904,1690,1.702,1691,2.673,1755,2.758,1756,1.793,1840,1.702,1841,1.746,1842,1.746,1843,1.746,1844,1.746,1845,2.685,1846,1.585,1847,1.746,1871,0.492,1876,2.443,1893,1.661,1895,0.858,1928,1.067,1948,1.067,1987,2.305,2000,1.05,2007,1.793,2008,4.186,2009,2.383,2010,4.476,2011,1.844,2012,2.836,2013,2.783,2014,3.827,2015,2.494,2016,1.844,2017,1.55,2018,3.863,2019,3.175,2020,3.771,2021,3.124,2022,2.758,2023,4.923,2024,2.836,2025,3.878,2026,2.758,2027,1.844,2028,1.427,2029,1.793,2030,2.758,2031,1.793,2032,1.793,2033,2.685,2034,1.793,2035,1.793,2036,2.842,2037,2.833,2038,1.793,2039,1.746,2040,1.844,2041,1.793,2042,1.793,2043,1.793,2044,1.844,2045,1.844,2046,1.702,2047,1.55,2048,1.844,2049,2.617,2050,1.844,2051,1.55,2052,1.844,2053,2.685,2054,2.836,2055,2.836,2056,2.383,2057,2.383,2058,1.844,2059,1.793,2060,2.685,2061,3.878,2062,3.878]],["title/interfaces/IAxisConfig.html",[40,0.003,152,2.543]],["body/interfaces/IAxisConfig.html",[0,0.052,3,0.125,4,0.117,5,0.117,10,0.129,11,0.32,20,0.005,21,0.36,24,0.331,28,0.326,39,0.357,40,0.005,41,0.548,52,1.247,75,0.456,78,0.002,79,0.002,80,0.002,83,2.522,85,0.517,89,1.213,90,0.695,95,3.58,100,1.59,101,3.487,102,1.318,103,3.532,104,1.566,106,3.726,108,0.75,109,2.575,110,1.781,112,3.108,113,2.882,114,1.985,122,2.868,133,3.607,134,0.63,137,3.905,140,1.944,143,2.657,149,0.724,150,2.456,152,2.456,153,4.151,154,3.732,155,3.828,156,3.732,157,3.732,158,2.496,160,3.732,161,1.916,164,1.392,166,3.634,167,2.577,168,1.712,175,1.933,178,3.536,179,0.412,180,2.4,181,3.542,182,2.577,194,1.806,214,1.251,253,2.286,254,1.456,281,0.576,285,1.344,297,1.679,309,1.766,310,2.187,317,0.942,334,1.666,384,1.984,404,3.157,446,0.83,459,0.796,464,1.213,488,1.169,489,2.16,524,1.61,525,1.831,529,1.628,539,2.826,545,2.446,548,1.858,552,3.157,580,1.188,590,1.628,591,1.543,592,2.932,593,1.712,596,0.865,597,1.131,598,1.669,627,1.372,634,2.132,636,1.909,665,1.521,703,2.609,704,1.943,705,1.455,709,2.515,719,0.853,734,1.089,736,1.521,753,1.554,765,3.226,768,1.554,770,2.803,771,1.427,772,2.243,787,0.714,800,1.669,808,3.542,824,0.956,932,3.326,1010,1.59,1054,2.029,1132,1.758,1149,1.669,1164,3.902,1189,1.712,1316,1.567,1357,1.867,1440,3.375,1531,2.716,1532,3.732,1533,1.712,1534,1.758,1535,1.758,1541,1.758,1545,1.758,1549,1.758,1553,1.758,1626,1.758,1628,1.758,1629,1.758,1630,1.712,1633,5.571,1635,1.251,1640,2.577,1649,1.712,1656,1.712,1662,2.716,1666,1.758,1671,2.693,1672,1.554,1675,1.669,1676,1.712,1681,1.712,1687,2.868,1690,2.577,1691,2.969,1755,2.716,1756,1.758,1840,1.669,1841,1.712,1842,1.712,1843,1.712,1844,1.712,1845,2.644,1846,1.554,1847,1.712,1871,0.482,1876,2.423,1893,1.644,1895,0.841,1928,1.046,1948,1.046,1987,2.444,2000,1.03,2007,1.758,2008,4.148,2009,2.347,2010,4.264,2011,1.808,2012,2.793,2013,3.091,2014,3.986,2015,2.456,2016,1.808,2017,1.52,2018,3.828,2019,3.147,2020,3.732,2021,3.091,2022,2.716,2023,4.972,2024,2.793,2025,3.838,2026,2.716,2027,1.808,2028,1.399,2029,1.758,2030,2.716,2031,1.758,2032,1.758,2033,2.644,2034,1.758,2035,1.758,2036,3.412,2037,2.493,2038,1.758,2039,1.712,2040,1.808,2041,1.758,2042,1.758,2043,1.758,2044,1.808,2045,2.793,2046,2.577,2047,2.347,2048,1.808,2049,2.577,2050,1.808,2051,1.52,2052,1.808,2053,2.644,2054,2.793,2055,2.793,2056,2.347,2057,2.347,2058,1.808,2059,1.758,2060,1.712,2061,1.808,2062,1.808]],["title/interfaces/IBandScale.html",[40,0.003,2125,3.176]],["body/interfaces/IBandScale.html",[3,0.19,4,0.178,5,0.178,10,0.334,12,0.841,13,0.674,17,0.665,20,0.005,24,0.291,28,0.262,34,0.888,39,0.389,40,0.005,41,0.965,42,1.162,47,1.162,75,1.097,78,0.002,79,0.003,80,0.002,95,1.807,97,1.817,108,0.856,110,1.48,117,1.564,124,1.817,126,2.127,132,2.414,134,0.835,140,1.886,161,1.895,164,1.362,175,1.851,178,2.127,179,0.627,183,0.853,192,1.48,222,2.009,225,2.037,227,1.817,245,3.797,269,1.817,280,2.462,281,0.876,285,1.723,309,0.95,326,2.832,334,1.855,336,1.412,337,2.047,368,2.037,379,3.911,441,2.75,576,1.979,757,1.937,759,2.604,760,1.244,770,2.774,772,2.496,774,1.178,776,4.124,798,2.23,839,3.131,882,3.916,1454,1.412,1489,2.363,1499,4.171,1603,2.832,1652,3.595,1654,1.666,1671,2.17,1691,2.937,1782,1.72,1871,0.734,1889,1.693,1892,2.375,1893,2.363,1918,3.09,1981,2.23,2004,2.196,2014,3.058,2017,3.192,2019,2.086,2036,2.262,2037,2.009,2056,2.311,2057,2.311,2089,3.504,2125,4.778,2126,3.021,2127,4.267,2128,5.55,2129,4.842,2130,4.621,2131,3.021,2132,3.021,2133,3.131,2134,3.131,2135,3.131,2136,4.349,2137,4.542,2138,3.797,2139,1.433,2140,3.254,2141,3.131,2142,2.922,2143,3.021,2144,3.254,2145,3.254,2146,5.824,2147,3.911,2148,6.417,2149,2.832,2150,3.254,2151,4.493,2152,4.171,2153,2.674,2154,2.832,2155,2.832,2156,4.831,2157,4.818,2158,4.493,2159,2.922,2160,2.922,2161,4.818,2162,2.832,2163,2.832,2164,3.254,2165,3.254,2166,3.131,2167,2.832,2168,4.831,2169,3.254,2170,5.069,2171,2.832,2172,3.254,2173,3.254,2174,4.323,2175,3.254,2176,3.254,2177,3.254]],["title/interfaces/IBarAccessors.html",[40,0.003,201,3.422]],["body/interfaces/IBarAccessors.html",[0,0.094,3,0.229,4,0.214,5,0.214,7,2.254,8,1.257,10,0.389,11,0.493,12,1.252,13,1.411,16,3.223,20,0.005,23,2.848,24,0.288,28,0.329,29,3.971,30,4.303,31,3.058,32,2.726,33,2.433,34,1.543,38,1.563,39,0.329,40,0.004,41,0.992,52,1.921,53,2.736,54,2.107,55,1.974,56,2.726,57,1.274,72,2.669,73,3.058,74,3.058,75,1.322,76,3.413,77,3.413,78,0.003,79,0.004,80,0.003,108,0.952,144,2.669,159,1.292,164,1.155,192,2.232,198,3.64,199,4.828,200,4.303,201,5.654,203,5.757,205,4.837,206,4.303,209,2.543,210,2.914,211,6.529,212,3.202,213,3.202,214,2.293,215,4.828,216,3.138,217,4.828,218,2.767,219,6.268,220,4.828,221,4.828,222,3.49,223,6.268,224,4.828,225,2.563,226,6.268,227,2.059,228,6.268,229,6.268,230,4.828,231,4.828,232,6.268,233,4.828,234,1.832,235,4.828,236,4.828,237,4.828,238,4.828,239,4.828,240,1.654,241,1.778,242,5.091,243,4.828,244,4.828,245,3.314,246,4.828,247,1.678,248,4.828,249,4.828,250,2.254,1871,0.884]],["title/interfaces/IBarChartConfig.html",[40,0.003,448,3.951]],["body/interfaces/IBarChartConfig.html",[3,0.301,4,0.283,5,0.283,10,0.311,11,0.584,20,0.005,22,1.445,24,0.341,39,0.352,40,0.005,78,0.004,79,0.005,80,0.004,85,1.248,140,2.039,164,1.233,212,3.25,213,3.25,253,1.871,255,3.378,404,4.581,448,6.971,757,3.076,1871,1.165,2178,6.888,2179,8.785,2180,6.361]],["title/interfaces/IBarDataAccessors.html",[40,0.003,203,3.176]],["body/interfaces/IBarDataAccessors.html",[0,0.09,3,0.217,4,0.204,5,0.204,7,2.14,8,1.194,10,0.384,11,0.477,12,1.196,13,1.373,16,3.06,20,0.005,22,1.453,23,2.704,24,0.366,28,0.321,29,3.838,30,4.159,31,2.904,32,2.588,33,2.566,34,1.343,38,1.484,39,0.321,40,0.004,41,0.972,52,2.301,53,3.277,54,2,55,1.908,56,2.588,57,1.21,72,2.534,73,2.904,74,2.904,75,1.3,76,3.241,77,3.241,78,0.003,79,0.004,80,0.003,108,0.956,144,2.534,159,1.226,164,1.126,192,2.215,198,3.456,199,4.583,200,4.159,201,4.921,203,5.444,205,4.299,206,4.659,209,2.501,210,2.767,211,7.236,212,3.836,213,3.836,214,3.43,215,7.22,216,2.979,217,4.583,218,2.736,219,6.058,220,4.583,221,4.583,222,3.403,223,6.058,224,4.583,225,2.499,226,6.058,227,1.99,228,6.058,229,6.058,230,4.583,231,4.583,232,6.058,233,4.583,234,1.739,235,4.583,236,4.583,237,4.583,238,4.583,239,4.583,240,1.57,241,1.688,242,4.921,243,4.583,244,4.583,245,3.146,246,4.583,247,1.593,248,4.583,249,4.583,250,2.14,1871,0.839]],["title/interfaces/IBarRendererConfig.html",[40,0.003,2112,3.292]],["body/interfaces/IBarRendererConfig.html",[0,0.119,3,0.176,4,0.165,5,0.165,10,0.181,11,0.413,12,1.101,13,0.626,20,0.005,21,0.832,22,1.446,24,0.341,28,0.366,34,0.824,38,1.204,39,0.366,40,0.005,41,0.891,52,1.609,53,1.623,78,0.002,79,0.003,80,0.002,85,0.73,89,1.815,90,1.039,102,2.461,107,1.607,124,1.221,134,0.901,140,1.883,149,2.045,155,3.845,159,1.405,164,1.327,179,0.822,194,2.283,209,2.027,210,2.244,214,2.494,218,1.274,240,1.799,247,2.116,253,2.129,255,3.845,263,3.959,268,4.932,281,1.149,285,1.677,290,1.108,292,2.712,293,2.712,294,3.413,295,3.512,296,3.03,297,2.056,299,2.514,302,2.712,305,2.712,306,2.355,309,1.444,317,1.33,327,2.193,328,1.369,331,2.298,332,2.244,333,1.256,336,1.311,337,1.9,580,2.369,636,1.745,719,1.971,734,1.866,777,3.232,782,1.934,787,1.651,802,3.992,959,3.83,1256,3.83,1359,3.959,1525,4.063,1584,2.712,1790,4.415,1791,3.505,1795,4.063,1871,0.681,1880,2.769,1881,2.366,1882,1.454,1893,1.79,1895,2.112,1899,2.292,1914,2.608,1934,3.145,1982,2.117,1987,1.238,2009,3.03,2013,4.003,2021,3.366,2028,4.036,2047,2.145,2063,2.906,2064,2.906,2065,3.02,2066,4.265,2067,4.265,2068,4.179,2069,3.02,2070,4.945,2071,4.265,2072,3.712,2073,3.02,2074,4.59,2075,5.452,2076,3.02,2077,2.804,2078,3.02,2079,2.417,2080,4.265,2081,2.417,2082,3.959,2083,4.103,2084,4.103,2085,3.959,2086,2.906,2087,2.906,2088,3.712,2089,2.355,2090,2.906,2091,4.757,2092,4.945,2093,4.103,2094,2.804,2095,3.02,2096,3.02,2097,3.02,2098,2.804,2099,3.02,2100,3.02,2101,3.02,2102,2.804,2103,4.945,2104,4.757,2105,2.804,2106,3.02,2107,4.265,2108,4.103,2109,2.629,2110,3.02,2111,3.02,2112,4.103,2113,4.103,2114,5.881,2115,5.372,2116,5.372,2117,4.103,2118,3.959,2119,5.372,2120,4.265,2121,4.265,2122,4.265,2123,5.372,2124,2.629]],["title/interfaces/IBorderConfig.html",[40,0.003,1675,2.668]],["body/interfaces/IBorderConfig.html",[0,0.081,3,0.127,4,0.119,5,0.119,10,0.131,11,0.325,20,0.005,21,0.564,22,1.232,24,0.307,28,0.328,39,0.359,40,0.005,41,0.556,52,1.972,75,0.465,78,0.002,79,0.003,80,0.002,83,2.512,85,0.527,89,1.23,90,0.705,95,3.489,100,1.62,101,3.713,102,1.337,103,3.558,104,1.584,106,3.748,108,0.755,109,2.594,110,1.793,112,3.129,113,2.903,114,1.998,122,2.902,133,3.634,134,0.779,137,3.925,140,1.884,143,2.677,149,0.738,150,3.408,152,1.62,153,2.683,154,1.791,155,3.417,156,1.791,157,1.791,158,2.511,160,1.791,161,1.934,164,1.381,166,2.683,167,2.615,168,1.744,175,1.938,178,2.998,179,0.42,180,2.435,181,3.577,182,2.615,194,1.818,214,1.961,253,2.274,254,1.484,281,0.587,285,1.357,297,1.699,309,1.774,310,2.201,317,0.96,334,1.677,384,1.999,404,3.188,446,0.845,459,0.811,464,1.23,488,1.191,489,2.192,524,1.629,525,1.852,529,1.659,539,2.838,545,2.457,548,1.88,552,3.188,580,1.211,590,1.659,591,1.566,592,2.967,593,1.744,596,0.881,597,1.152,598,1.7,627,1.398,634,2.141,636,1.966,665,1.543,703,2.625,704,1.966,705,1.476,709,2.551,719,0.869,734,1.104,736,1.543,753,1.583,765,3.258,768,1.583,770,2.831,771,1.454,772,2.269,787,0.728,800,1.7,808,3.577,824,0.974,932,3.351,1010,1.62,1054,2.049,1132,1.791,1149,1.7,1164,3.826,1189,1.744,1316,1.589,1357,1.894,1440,3.408,1531,2.755,1532,3.769,1533,1.744,1534,1.791,1535,1.791,1541,1.791,1545,1.791,1549,1.791,1553,1.791,1626,1.791,1628,1.791,1629,1.791,1630,1.744,1633,5.581,1635,1.275,1640,2.615,1649,1.744,1656,1.744,1662,2.755,1666,1.791,1671,2.724,1672,1.583,1675,2.615,1676,1.744,1681,1.744,1687,2.902,1690,1.7,1691,2.671,1755,2.755,1756,1.791,1840,1.7,1841,1.744,1842,1.744,1843,1.744,1844,1.744,1845,2.683,1846,1.583,1847,1.744,1871,0.491,1876,2.441,1893,1.66,1895,0.857,1928,1.065,1948,1.065,1987,2.364,2000,1.049,2007,1.791,2008,4.184,2009,2.381,2010,4.296,2011,1.842,2012,2.833,2013,2.781,2014,3.826,2015,2.491,2016,1.842,2017,1.548,2018,3.861,2019,3.174,2020,3.769,2021,3.122,2022,2.755,2023,4.921,2024,2.833,2025,3.876,2026,2.755,2027,1.842,2028,2.192,2029,3.769,2030,2.755,2031,1.791,2032,1.791,2033,2.683,2034,1.791,2035,1.791,2036,2.84,2037,2.522,2038,1.791,2039,1.744,2040,1.842,2041,1.791,2042,1.791,2043,1.791,2044,1.842,2045,1.842,2046,1.7,2047,1.548,2048,1.842,2049,2.615,2050,1.842,2051,1.548,2052,1.842,2053,2.683,2054,2.833,2055,2.833,2056,2.381,2057,2.381,2058,1.842,2059,1.791,2060,1.744,2061,1.842,2062,1.842]],["title/interfaces/IBorders.html",[40,0.003,1676,2.738]],["body/interfaces/IBorders.html",[0,0.054,3,0.13,4,0.122,5,0.122,20,0.005,21,0.376,24,0.234,28,0.33,39,0.36,40,0.005,41,0.687,52,1.288,75,0.476,78,0.002,79,0.003,80,0.002,83,2.511,85,0.539,89,1.253,90,0.717,95,3.504,100,1.659,101,3.748,102,1.361,103,3.592,104,1.608,106,3.871,108,0.761,109,2.725,110,1.808,112,3.254,113,3.05,114,2.078,122,2.945,133,3.668,134,0.644,137,3.95,140,1.832,143,2.702,149,0.755,150,2.537,152,1.659,153,2.732,154,1.834,155,3.45,156,1.834,157,1.834,158,2.075,160,1.834,161,1.959,164,1.379,166,2.732,167,2.663,168,1.786,175,1.945,178,3.035,179,0.43,180,2.479,181,3.621,182,2.663,194,1.833,214,1.305,253,2.263,254,1.519,281,0.601,285,1.374,297,1.724,309,1.784,310,2.22,317,0.983,334,1.691,384,2.018,404,3.228,446,0.866,459,0.831,464,1.253,488,1.219,489,2.232,524,1.653,525,1.88,529,1.698,539,2.854,545,2.47,548,1.908,552,3.228,580,1.24,590,1.698,591,1.594,592,3.011,593,1.786,596,0.902,597,1.18,598,1.741,627,1.431,634,2.153,636,1.925,665,1.571,703,2.645,704,1.995,705,1.503,709,2.598,719,0.89,734,1.124,736,1.571,753,1.621,765,3.298,768,1.621,770,2.866,771,1.489,772,2.303,787,0.745,800,1.741,808,3.621,824,0.997,932,3.383,1010,1.659,1054,2.075,1132,1.834,1149,1.741,1164,3.738,1189,1.786,1316,1.619,1357,1.929,1440,3.451,1531,2.806,1532,3.816,1533,1.786,1534,1.834,1535,1.834,1541,1.834,1545,1.834,1549,1.834,1553,1.834,1626,1.834,1628,1.834,1629,1.834,1630,1.786,1633,5.593,1635,1.305,1640,2.663,1649,1.786,1656,1.786,1662,2.806,1666,1.834,1671,2.765,1672,1.621,1675,1.741,1676,2.732,1681,1.786,1687,2.945,1690,1.741,1691,2.71,1755,2.806,1756,2.806,1840,1.741,1841,1.786,1842,1.786,1843,1.786,1844,1.786,1845,2.732,1846,1.621,1847,1.786,1871,0.503,1876,2.564,1893,1.681,1895,0.878,1928,1.091,1948,1.091,1987,2.322,2000,1.074,2007,1.834,2008,4.229,2009,2.425,2010,4.512,2011,1.886,2012,2.885,2013,2.822,2014,3.855,2015,2.537,2016,1.886,2017,1.585,2018,3.902,2019,3.208,2020,3.816,2021,3.161,2022,2.806,2023,4.95,2024,2.885,2025,3.924,2026,2.806,2027,2.885,2028,1.459,2029,1.834,2030,2.806,2031,1.834,2032,1.834,2033,2.732,2034,1.834,2035,1.834,2036,2.882,2037,2.559,2038,1.834,2039,1.786,2040,1.886,2041,1.834,2042,1.834,2043,1.834,2044,1.886,2045,1.886,2046,1.741,2047,1.585,2048,1.886,2049,2.663,2050,1.886,2051,1.585,2052,1.886,2053,2.732,2054,2.885,2055,2.885,2056,2.425,2057,2.425,2058,1.886,2059,1.834,2060,1.786,2061,1.886,2062,1.886]],["title/interfaces/IChart.html",[40,0.003,464,1.256]],["body/interfaces/IChart.html",[3,0.119,4,0.111,5,0.111,10,0.266,11,0.428,12,1.254,13,1.34,17,1.202,19,1.691,20,0.005,21,0.973,22,1.239,24,0.338,28,0.343,33,1.168,34,0.556,35,1.486,36,1.509,37,1.323,39,0.397,40,0.005,41,0.911,42,1.714,47,1.714,57,1.653,75,0.835,78,0.002,79,0.002,80,0.002,83,1.477,89,1.168,90,1.289,97,1.583,102,0.813,104,0.79,108,0.441,114,0.748,117,0.619,129,2.352,134,0.874,140,1.732,149,1.077,158,0.911,159,1.811,164,1.266,175,1.765,179,1.24,183,0.534,194,1.477,209,1.968,218,1.342,225,0.924,234,2.241,240,0.86,241,0.924,247,2.472,250,1.171,253,1.152,269,1.287,280,1.477,281,1.293,283,0.952,285,1.309,290,0.748,299,1.996,309,1.292,310,1.94,328,0.924,333,1.84,334,1.206,368,0.924,380,1.829,384,1.692,399,1.113,411,0.952,417,1.011,439,0.981,443,2.208,444,1.532,446,2.06,447,2.31,453,1.604,455,1.973,459,1.786,464,1.624,465,1.509,476,2.24,524,2.028,525,1.775,527,4.242,529,2.422,530,2.634,531,2.634,532,2.634,533,2.634,535,4.242,537,4.242,539,1.829,541,2.212,545,1.94,547,1.894,548,2.036,553,1.894,557,2.33,561,2.33,564,2.717,566,2.717,571,1.894,572,2.23,574,2.717,575,1.861,576,2.24,578,2.509,589,1.192,591,0.952,595,1.213,596,1.287,599,1.213,634,0.718,636,0.98,665,0.938,703,1.486,704,1.884,705,1.948,719,0.813,720,1.095,734,1.457,736,0.938,738,1.884,741,2.066,744,1.06,752,0.981,760,1.217,766,1.077,774,1.737,782,0.924,787,1.477,789,2.524,798,1.011,812,1.192,817,1.192,823,1.738,824,1.422,825,1.63,827,1.829,879,1.113,921,1.132,935,1.539,994,1.044,1047,1.151,1048,1.213,1049,1.213,1050,1.213,1052,2.23,1054,0.911,1056,0.981,1172,2.13,1187,2.265,1204,1.151,1205,1.151,1222,2.139,1233,1.171,1253,1.095,1255,1.71,1309,1.973,1316,1.509,1418,1.151,1430,2.499,1454,1.381,1599,1.682,1620,1.151,1654,1.63,1679,1.192,1723,1.213,1736,1.132,1767,1.213,1782,2.07,1871,0.46,1872,1.192,1873,1.235,1874,1.894,1875,1.738,1876,1.486,1877,1.213,1878,1.192,1879,1.213,1880,0.996,1881,0.898,1882,0.981,1883,2.33,1884,1.192,1885,1.171,1886,2.646,1887,1.192,1888,1.192,1889,1.06,1890,1.213,1891,1.213,1892,1.682,1893,1.841,1894,1.077,1895,1.74,1896,3.138,1897,1.235,1898,1.798,1899,1.095,1900,2.33,1901,1.235,1902,1.929,1903,1.894,1904,1.894,1905,1.235,1906,1.894,1907,2.25,1908,1.798,1909,1.235,1910,1.06,1911,1.235,1912,1.151,1913,1.151,1914,1.802,1915,1.113,1916,1.235,1917,1.235,1918,0.924,1919,1.235,1920,1.192,1921,1.829,1922,1.894,1923,1.213,1924,1.894,1925,1.235,1926,1.192,1927,1.235,1928,2.486,1929,1.235,1930,1.213,1931,1.235,1932,1.894,1933,1.192,1934,1.06,1935,1.213,1936,1.213,1937,1.235,1938,1.235,1939,1.235,1940,1.235,1941,1.213,1942,1.929,1943,1.235,1944,1.213,1945,1.171,1946,1.235,1947,1.235,1948,1.555,1949,1.768,1950,1.213,1951,1.884,1952,1.235,1953,1.213,1954,1.213,1955,1.235,1956,1.235,1957,1.235,1958,1.213,1959,1.235,1960,1.044,1961,1.132,1962,1.213,1963,1.235,1964,1.235,1965,1.235,1966,1.235,1967,1.192,1968,1.213,1969,1.192,1970,1.192,1971,1.235,1972,1.929,1973,2.634,1974,1.235,1975,1.213,1976,1.235,1977,1.235,1978,1.235,1979,1.235,1980,1.235,1981,1.579,1982,1.011,1983,1.235,1984,1.235,1985,1.798,1986,1.192,1987,1.305,1988,1.192,1989,1.235,1990,1.235,1991,1.798,1992,1.929,1993,1.235,1994,1.235,1995,2.175,1996,1.829,1997,2.175,1998,1.213,1999,1.192,2000,0.981,2001,1.213,2002,1.192,2003,1.171,2004,0.996,2005,1.235,2006,1.06,2181,3.033,2182,3.033,2183,3.033,2184,3.033,2185,3.033,2186,3.033,2187,3.033,2188,3.033,2189,3.033,2190,3.033,2191,3.033]],["title/interfaces/IChartAssist.html",[40,0.003,764,3.292]],["body/interfaces/IChartAssist.html",[0,0.118,3,0.216,4,0.203,5,0.203,8,1.188,10,0.223,13,1.392,17,1.123,19,1.728,20,0.005,21,1.053,22,1.075,24,0.311,28,0.286,34,1.011,39,0.365,40,0.005,75,1.046,78,0.003,79,0.004,80,0.003,85,1.329,90,1.412,94,1.461,108,0.898,124,1.498,134,0.942,158,2.457,164,1.002,175,1.876,179,0.945,183,0.971,192,1.22,194,2.131,234,2.291,269,1.983,279,4.158,280,2.208,283,2.922,291,2.964,333,2.04,334,1.803,394,3.045,411,2.291,432,3.327,446,1.902,459,1.379,464,1.8,482,3.668,572,2.473,576,2.681,597,1.959,731,4.905,732,5.631,733,3.866,734,1.22,735,5.291,736,1.705,737,4.053,738,2.647,739,4.053,740,4.053,741,2.291,742,4.053,744,3.371,752,1.783,753,3.994,754,5.738,755,4.053,756,3.564,757,2.205,758,3.705,759,2.964,760,1.417,761,5.367,762,5.367,763,4.554,764,4.719,765,3.484,766,2.593,767,4.905,768,3.563,769,4.905,770,3.028,771,3.271,772,2.725,773,4.405,774,1.776,775,5.631,776,4.35,777,3.207,778,4.905,779,5.118,780,5.854,781,3.705,782,1.68,783,4.905,784,4.905,785,4.905,786,4.905,787,1.237,788,3.705,789,1.839,790,3.131,791,4.053,792,4.053,793,2.964,794,3.705,1871,0.835,2192,6.539,2193,5.513,2194,5.513,2195,5.513]],["title/interfaces/IChartAssistEvent.html",[40,0.003,788,3.422]],["body/interfaces/IChartAssistEvent.html",[0,0.125,3,0.236,4,0.221,5,0.221,8,1.296,10,0.243,11,0.503,13,1.35,20,0.005,21,0.874,24,0.362,28,0.303,34,1.103,39,0.373,40,0.005,75,0.862,78,0.003,79,0.004,80,0.003,85,0.976,90,1.401,94,1.524,108,0.839,124,1.634,134,0.924,158,2.32,164,0.825,175,1.557,179,0.779,183,1.06,192,1.331,194,2.021,234,2.425,279,3.688,280,1.958,283,2.679,333,2.159,334,1.864,394,3.321,411,1.888,432,3.629,459,1.504,464,1.905,482,3.462,572,2.617,576,2.526,597,2.137,731,5.192,732,3.888,733,4.217,734,1.331,735,5.823,736,1.86,737,4.422,738,2.761,739,4.422,740,4.422,741,2.425,742,4.422,744,3.257,752,1.945,753,3.771,754,5.417,755,4.422,756,3.888,757,2.406,758,4.042,759,3.234,760,1.546,761,4.422,762,4.422,763,3.752,764,3.888,765,2.871,766,2.137,767,4.042,768,2.935,769,4.042,770,2.495,771,2.696,772,2.245,773,3.629,774,1.463,775,4.995,776,3.858,777,2.642,778,4.042,779,4.217,780,4.042,781,4.042,782,1.833,783,6.053,784,5.192,785,5.192,786,5.192,787,1.733,788,5.192,789,3.004,790,3.416,791,4.422,792,4.422,793,3.234,794,4.042,1871,0.911]],["title/interfaces/IChartAssistSeries.html",[40,0.003,744,1.78]],["body/interfaces/IChartAssistSeries.html",[3,0.126,4,0.118,5,0.118,10,0.275,11,0.442,12,1.262,13,1.352,20,0.005,21,0.831,22,1.143,24,0.332,28,0.348,33,1.224,34,0.591,35,1.557,36,1.58,37,1.386,39,0.399,40,0.005,41,0.954,42,1.762,47,1.762,57,1.694,75,0.867,78,0.002,79,0.002,80,0.002,83,1.534,89,1.224,90,1.305,97,1.644,102,0.863,104,0.839,108,0.462,114,0.794,117,0.658,129,2.399,134,0.884,140,1.863,149,1.128,158,0.967,159,1.847,164,1.281,179,1.184,183,0.567,194,1.525,209,2.023,218,1.406,225,0.981,234,2.304,240,0.913,241,0.981,247,2.513,250,1.244,253,1.207,280,1.534,281,1.329,283,1.011,285,1.352,290,0.794,299,2.052,309,1.334,310,1.995,328,0.981,333,2.392,334,1.252,368,0.981,380,1.916,384,0.828,399,1.182,411,1.011,417,1.074,439,1.041,443,1.534,444,1.605,446,1.913,447,1.605,453,1.68,455,2.05,459,1.836,464,1.492,465,1.58,476,2.173,524,1.967,525,1.512,530,1.288,531,1.288,532,1.288,533,1.288,539,1.557,541,1.222,545,1.644,547,1.288,548,1.534,553,1.288,557,1.984,561,1.984,571,1.288,572,1.68,575,1.265,576,2.173,589,1.265,591,1.011,595,1.288,596,1.348,599,1.288,634,0.762,636,1.027,665,0.996,703,1.557,704,1.957,705,2.012,719,0.863,720,1.163,734,1.505,736,0.996,738,1.957,741,2.134,744,1.734,752,1.041,760,1.275,766,1.144,774,1.786,782,0.981,787,1.525,789,2.587,798,1.074,812,1.265,817,1.265,823,1.821,824,1.49,825,1.707,827,1.916,879,1.182,921,1.202,935,1.599,994,1.108,1047,1.222,1048,1.288,1049,1.288,1050,1.288,1052,2.303,1054,0.967,1056,1.041,1172,2.199,1187,2.339,1204,1.222,1205,1.222,1222,2.221,1233,1.244,1253,1.163,1255,1.791,1309,2.05,1316,1.58,1418,1.222,1430,2.581,1454,1.447,1599,1.762,1620,1.222,1654,1.707,1679,1.265,1723,1.288,1736,1.202,1767,1.288,1782,2.15,1871,0.488,1872,1.265,1873,1.311,1874,1.984,1875,1.821,1876,1.557,1877,1.288,1878,1.265,1879,1.288,1880,1.057,1881,0.953,1882,1.041,1883,2.42,1884,1.265,1885,1.244,1886,2.711,1887,1.265,1888,1.265,1889,1.126,1890,1.288,1891,1.288,1892,1.762,1893,1.887,1894,1.144,1895,1.796,1896,3.195,1897,1.311,1898,1.883,1899,1.163,1900,2.42,1901,1.311,1902,2.02,1903,1.984,1904,1.984,1905,1.311,1906,1.984,1907,2.337,1908,1.883,1909,1.311,1910,1.126,1911,1.311,1912,1.222,1913,1.222,1914,1.871,1915,1.182,1916,1.311,1917,1.311,1918,0.981,1919,1.311,1920,1.265,1921,1.916,1922,1.984,1923,1.288,1924,1.984,1925,1.311,1926,1.265,1927,1.311,1928,2.547,1929,1.311,1930,1.288,1931,1.311,1932,1.984,1933,1.265,1934,1.126,1935,1.288,1936,1.288,1937,1.311,1938,1.311,1939,1.311,1940,1.311,1941,1.288,1942,2.02,1943,1.311,1944,1.288,1945,1.244,1946,1.311,1947,1.311,1948,1.629,1949,1.852,1950,1.288,1951,1.957,1952,1.311,1953,1.288,1954,1.288,1955,1.311,1956,1.311,1957,1.311,1958,1.288,1959,1.311,1960,1.108,1961,1.202,1962,1.288,1963,1.311,1964,1.311,1965,1.311,1966,1.311,1967,2.672,1968,2.719,1969,1.265,1970,1.265,1971,1.311,1972,2.02,1973,2.719,1974,1.311,1975,1.288,1976,1.311,1977,1.311,1978,1.311,1979,1.311,1980,1.311,1981,1.654,1982,1.074,1983,1.311,1984,1.311,1985,1.883,1986,1.265,1987,1.367,1988,1.265,1989,1.311,1990,1.311,1991,1.883,1992,2.02,1993,1.311,1994,1.311,1995,2.259,1996,1.916,1997,2.259,1998,1.288,1999,1.265,2000,1.041,2001,1.288,2002,1.265,2003,1.244,2004,1.057,2005,1.311,2006,1.126]],["title/interfaces/IChartEvent.html",[40,0.003,596,1.383]],["body/interfaces/IChartEvent.html",[3,0.127,4,0.119,5,0.119,10,0.276,11,0.444,12,1.271,13,1.353,20,0.005,21,0.833,22,0.735,24,0.326,28,0.349,33,1.23,34,0.595,35,1.566,36,1.589,37,1.394,39,0.4,40,0.005,41,0.932,42,1.768,47,1.768,57,1.699,75,0.871,78,0.002,79,0.003,80,0.002,83,1.541,89,1.23,90,1.307,97,1.652,102,0.869,104,0.845,108,0.465,114,0.8,117,0.663,129,2.405,134,0.885,140,1.822,149,1.134,158,0.974,159,1.851,164,1.283,179,1.186,183,0.571,194,1.531,209,2.03,218,1.414,225,0.988,234,2.312,240,0.919,241,0.988,247,2.518,250,1.253,253,1.214,280,1.541,281,1.333,283,1.018,285,1.357,290,0.8,299,2.059,309,1.339,310,2.002,328,0.988,333,1.907,334,1.258,368,0.988,380,1.927,384,0.834,399,1.191,411,1.018,417,1.082,439,1.049,443,1.543,444,1.614,446,1.92,447,1.614,453,1.69,455,2.059,459,1.842,464,1.499,465,1.589,476,2.18,524,1.974,525,1.52,530,1.298,531,1.298,532,1.298,533,1.298,539,1.566,541,1.231,545,1.652,547,1.298,548,1.543,553,1.298,557,1.996,561,1.996,571,1.298,572,1.69,575,1.275,576,2.02,589,1.275,591,1.018,595,1.298,596,1.652,599,1.298,634,0.768,636,1.033,665,1.003,703,1.566,704,1.966,705,2.02,719,0.869,720,1.171,734,1.511,736,1.003,738,1.966,741,2.142,744,1.134,752,1.049,760,1.282,766,1.152,774,1.792,782,0.988,787,1.531,789,2.594,798,1.082,812,1.275,817,1.275,823,1.831,824,1.498,825,1.717,827,1.927,879,1.191,921,1.211,935,1.606,994,1.116,1047,1.231,1048,1.298,1049,1.298,1050,1.298,1052,2.312,1054,0.974,1056,1.049,1172,2.207,1187,2.348,1204,1.231,1205,1.231,1222,2.231,1233,1.253,1253,1.171,1255,1.801,1309,2.059,1316,1.589,1418,1.231,1430,2.591,1454,1.455,1599,1.772,1620,1.231,1654,1.717,1679,1.275,1723,1.298,1736,1.211,1767,1.298,1782,2.16,1871,0.491,1872,1.275,1873,1.321,1874,1.996,1875,1.831,1876,1.566,1877,1.298,1878,1.275,1879,1.298,1880,1.065,1881,0.96,1882,1.049,1883,2.432,1884,1.275,1885,1.253,1886,2.719,1887,1.275,1888,1.275,1889,1.134,1890,1.298,1891,1.298,1892,1.772,1893,2.035,1894,1.152,1895,1.803,1896,3.202,1897,1.321,1898,1.894,1899,1.171,1900,2.432,1901,1.321,1902,2.032,1903,1.996,1904,1.996,1905,1.321,1906,1.996,1907,2.348,1908,1.894,1909,1.321,1910,1.134,1911,1.321,1912,1.231,1913,1.231,1914,1.88,1915,1.191,1916,1.321,1917,1.321,1918,0.988,1919,1.321,1920,1.275,1921,1.927,1922,1.996,1923,1.298,1924,1.996,1925,1.321,1926,1.275,1927,1.321,1928,2.555,1929,1.321,1930,1.298,1931,1.321,1932,1.996,1933,1.275,1934,1.134,1935,1.298,1936,1.298,1937,1.321,1938,1.321,1939,1.321,1940,1.321,1941,1.298,1942,2.032,1943,1.321,1944,1.298,1945,1.253,1946,1.321,1947,1.321,1948,1.638,1949,1.862,1950,1.298,1951,1.966,1952,1.321,1953,1.298,1954,1.298,1955,1.321,1956,1.321,1957,1.321,1958,1.298,1959,1.321,1960,1.116,1961,1.211,1962,1.298,1963,1.321,1964,1.321,1965,1.321,1966,1.321,1967,1.275,1968,1.298,1969,1.275,1970,1.275,1971,1.321,1972,2.032,1973,2.73,1974,1.321,1975,1.298,1976,1.321,1977,1.321,1978,2.78,1979,1.321,1980,1.321,1981,1.664,1982,1.082,1983,1.321,1984,1.321,1985,1.894,1986,1.275,1987,1.375,1988,1.275,1989,1.321,1990,1.321,1991,1.894,1992,2.032,1993,1.321,1994,1.321,1995,2.269,1996,1.927,1997,2.269,1998,1.298,1999,1.275,2000,1.049,2001,1.298,2002,1.275,2003,1.253,2004,1.065,2005,1.321,2006,1.134]],["title/interfaces/IChartMarker.html",[40,0.003,994,1.752]],["body/interfaces/IChartMarker.html",[3,0.126,4,0.119,5,0.119,10,0.275,11,0.324,12,1.263,13,1.352,17,0.682,19,0.765,20,0.005,21,0.879,22,0.476,24,0.317,28,0.349,33,1.226,34,0.592,35,1.56,36,1.584,37,1.389,39,0.399,40,0.005,41,0.93,42,1.765,47,1.765,52,0.819,57,1.696,75,0.868,78,0.002,79,0.002,80,0.002,83,1.537,89,1.226,90,1.306,97,1.647,102,0.865,104,0.841,108,0.463,114,0.796,117,0.659,129,2.401,134,0.9,140,1.763,149,1.13,158,0.97,159,1.848,164,1.282,175,1.002,179,1.198,183,0.569,194,1.527,209,2.026,218,1.409,225,0.984,234,2.307,240,0.915,241,0.984,247,2.515,250,1.247,253,1.21,269,1.351,280,1.537,281,1.331,283,1.013,285,1.354,290,0.796,299,2.054,309,1.336,310,1.997,328,0.984,333,1.903,334,1.255,368,0.984,380,1.92,384,0.83,399,1.185,411,1.013,417,1.077,439,1.044,443,1.537,444,1.608,446,1.916,447,1.608,453,1.684,455,2.053,459,1.838,464,1.495,465,1.584,476,2.176,524,1.97,525,1.515,530,1.292,531,1.292,532,1.292,533,1.292,539,1.56,541,1.226,545,1.647,547,1.292,548,1.537,553,1.292,557,1.989,561,1.989,571,1.292,572,1.684,575,1.269,576,2.015,589,1.269,591,1.013,595,1.292,596,1.351,599,1.292,634,0.765,636,1.029,665,0.999,703,1.56,704,1.961,705,2.015,719,0.865,720,1.166,734,1.507,736,0.999,738,1.961,741,2.137,744,1.129,752,1.044,760,1.278,766,1.147,774,1.789,782,0.984,787,1.527,789,2.59,798,1.077,812,1.269,817,1.269,823,1.825,824,1.493,825,1.711,827,1.92,879,1.185,921,1.205,935,1.602,994,1.711,1047,1.226,1048,1.292,1049,1.292,1050,1.292,1052,2.306,1054,0.97,1056,1.044,1172,2.202,1187,2.343,1204,1.226,1205,1.226,1222,2.225,1233,1.247,1253,1.166,1255,1.795,1309,2.053,1316,1.584,1418,1.226,1430,2.585,1454,1.45,1599,1.766,1620,1.226,1654,1.711,1679,1.269,1723,1.292,1736,1.205,1767,1.292,1782,2.154,1871,0.489,1872,1.269,1873,1.315,1874,1.989,1875,1.825,1876,1.56,1877,1.292,1878,1.269,1879,1.292,1880,1.06,1881,0.956,1882,1.044,1883,2.425,1884,1.269,1885,1.247,1886,2.715,1887,1.269,1888,1.269,1889,1.129,1890,1.292,1891,1.292,1892,1.766,1893,1.889,1894,1.147,1895,1.799,1896,3.198,1897,1.315,1898,1.887,1899,1.166,1900,2.425,1901,1.315,1902,2.025,1903,1.989,1904,1.989,1905,1.315,1906,1.989,1907,2.341,1908,1.887,1909,1.315,1910,1.129,1911,1.315,1912,1.226,1913,1.226,1914,1.874,1915,1.185,1916,1.315,1917,1.315,1918,0.984,1919,1.315,1920,1.269,1921,1.92,1922,1.989,1923,1.292,1924,1.989,1925,1.315,1926,1.269,1927,1.315,1928,2.55,1929,1.315,1930,1.292,1931,1.315,1932,1.989,1933,1.269,1934,1.129,1935,1.292,1936,1.292,1937,1.315,1938,1.315,1939,1.315,1940,1.315,1941,1.292,1942,2.025,1943,1.315,1944,1.292,1945,1.247,1946,1.315,1947,1.315,1948,1.633,1949,1.856,1950,1.292,1951,1.961,1952,1.315,1953,1.292,1954,1.292,1955,1.315,1956,1.315,1957,1.315,1958,1.292,1959,1.315,1960,1.111,1961,1.205,1962,1.292,1963,1.315,1964,1.315,1965,1.315,1966,1.315,1967,1.269,1968,1.292,1969,2.676,1970,1.954,1971,1.315,1972,2.025,1973,2.723,1974,1.315,1975,1.292,1976,1.315,1977,1.315,1978,1.315,1979,1.315,1980,1.315,1981,1.658,1982,1.077,1983,1.315,1984,1.315,1985,1.887,1986,1.269,1987,1.37,1988,1.269,1989,1.315,1990,1.315,1991,1.887,1992,2.025,1993,1.315,1994,1.315,1995,2.263,1996,1.92,1997,2.263,1998,1.292,1999,1.269,2000,1.044,2001,1.292,2002,1.269,2003,1.247,2004,1.06,2005,1.315,2006,1.129,2196,4.113,2197,3.229,2198,3.229]],["title/interfaces/IChartPalette.html",[40,0.003,1047,1.933]],["body/interfaces/IChartPalette.html",[3,0.127,4,0.119,5,0.119,10,0.275,11,0.443,12,1.263,13,1.353,20,0.005,21,0.832,24,0.332,28,0.349,33,1.228,34,0.593,35,1.562,36,1.586,37,1.391,39,0.4,40,0.005,41,0.931,42,1.766,47,1.766,57,1.697,75,0.869,78,0.002,79,0.003,80,0.002,83,1.538,89,1.228,90,1.307,97,1.649,102,0.867,104,0.843,108,0.464,114,0.798,117,0.661,129,2.403,134,0.884,140,1.764,149,1.132,158,0.971,159,1.849,164,1.282,179,1.185,183,0.57,194,1.529,209,2.027,218,1.411,225,0.986,234,2.309,240,0.917,241,0.986,247,2.516,250,1.249,253,1.211,280,1.538,281,1.332,283,1.015,285,1.355,290,0.798,299,2.056,309,1.337,310,1.999,328,0.986,333,1.904,334,1.256,368,0.986,380,1.922,384,0.831,399,1.187,411,1.015,417,1.079,439,1.046,443,1.539,444,1.61,446,1.917,447,1.61,453,1.686,455,2.056,459,1.84,464,1.497,465,1.586,476,2.177,524,1.971,525,1.517,530,1.294,531,1.294,532,1.294,533,1.294,539,1.562,541,1.228,545,1.649,547,1.294,548,1.539,553,1.294,557,1.991,561,1.991,571,1.294,572,1.686,575,1.271,576,2.017,589,1.271,591,1.015,595,1.294,596,1.353,599,1.294,634,0.766,636,1.03,665,1,703,1.562,704,1.963,705,2.017,719,0.867,720,1.168,734,1.508,736,1,738,1.963,741,2.139,744,1.131,752,1.046,760,1.279,766,1.149,774,1.79,782,0.986,787,1.529,789,2.591,798,1.079,812,1.271,817,1.271,823,1.827,824,1.495,825,1.713,827,1.922,879,1.187,921,1.207,935,1.603,994,1.113,1047,1.89,1048,2.726,1049,2.726,1050,2.726,1052,2.964,1054,0.971,1056,1.046,1172,2.204,1187,2.345,1204,1.228,1205,1.228,1222,2.228,1233,1.249,1253,1.168,1255,1.797,1309,2.056,1316,1.586,1418,1.228,1430,2.587,1454,1.452,1599,1.769,1620,1.228,1654,1.713,1679,1.271,1723,1.294,1736,1.207,1767,1.294,1782,2.156,1871,0.49,1872,1.271,1873,1.317,1874,1.991,1875,1.827,1876,1.562,1877,1.294,1878,1.271,1879,1.294,1880,1.062,1881,0.957,1882,1.046,1883,2.427,1884,1.271,1885,1.249,1886,2.716,1887,1.271,1888,1.271,1889,1.131,1890,1.294,1891,1.294,1892,1.769,1893,1.89,1894,1.149,1895,1.801,1896,3.199,1897,1.317,1898,1.89,1899,1.168,1900,2.427,1901,1.317,1902,2.027,1903,1.991,1904,1.991,1905,1.317,1906,1.991,1907,2.344,1908,1.89,1909,1.317,1910,1.131,1911,1.317,1912,1.228,1913,1.228,1914,1.876,1915,1.187,1916,1.317,1917,1.317,1918,0.986,1919,1.317,1920,1.271,1921,1.922,1922,1.991,1923,1.294,1924,1.991,1925,1.317,1926,1.271,1927,1.317,1928,2.552,1929,1.317,1930,1.294,1931,1.317,1932,1.991,1933,1.271,1934,1.131,1935,1.294,1936,1.294,1937,1.317,1938,1.317,1939,1.317,1940,1.317,1941,1.294,1942,2.027,1943,1.317,1944,1.294,1945,1.249,1946,1.317,1947,1.317,1948,1.635,1949,1.858,1950,1.294,1951,1.963,1952,1.317,1953,1.294,1954,1.294,1955,1.317,1956,1.317,1957,1.317,1958,1.294,1959,1.317,1960,1.113,1961,1.207,1962,1.294,1963,1.317,1964,1.317,1965,1.317,1966,1.317,1967,1.271,1968,1.294,1969,1.271,1970,1.271,1971,1.317,1972,2.027,1973,2.726,1974,1.317,1975,1.294,1976,1.317,1977,1.317,1978,1.317,1979,1.317,1980,1.317,1981,1.66,1982,1.079,1983,1.317,1984,1.317,1985,1.89,1986,1.271,1987,1.372,1988,1.271,1989,1.317,1990,1.317,1991,1.89,1992,2.027,1993,1.317,1994,1.317,1995,2.265,1996,1.922,1997,2.265,1998,1.294,1999,1.271,2000,1.046,2001,1.294,2002,1.271,2003,1.249,2004,1.062,2005,1.317,2006,1.131]],["title/interfaces/IChartPlugin.html",[40,0.003,548,1.574]],["body/interfaces/IChartPlugin.html",[3,0.123,4,0.115,5,0.115,10,0.27,11,0.436,12,1.259,13,1.346,17,0.919,20,0.005,21,0.82,24,0.314,28,0.346,33,1.197,34,0.574,35,1.524,36,1.547,37,1.357,39,0.398,40,0.005,41,0.921,42,1.74,47,1.74,57,1.675,75,0.852,78,0.002,79,0.002,80,0.002,83,1.507,85,0.508,89,1.197,90,1.378,97,1.615,102,0.839,104,0.816,108,0.452,114,0.772,117,0.64,129,2.377,134,0.879,140,1.748,149,1.104,158,0.94,159,1.83,164,1.274,175,1.35,179,1.223,183,0.552,194,1.626,209,1.997,218,1.376,225,0.954,234,2.275,240,0.888,241,0.954,247,2.494,250,1.209,253,1.181,269,1.319,280,1.507,281,1.312,283,0.983,285,1.332,290,0.772,299,2.026,309,1.314,310,1.969,328,0.954,333,1.872,334,1.231,368,0.954,380,1.875,384,0.805,399,1.149,411,0.983,417,1.044,439,1.013,443,2.241,444,2.48,446,2.337,447,2.345,453,1.644,455,2.014,459,1.812,464,1.788,465,1.547,476,2.512,524,1.942,525,1.479,530,1.253,531,1.253,532,1.253,533,1.253,539,1.524,541,1.189,545,1.615,547,1.253,548,1.839,553,1.253,557,1.942,561,1.942,571,1.253,572,1.644,575,1.231,576,1.982,589,1.231,591,0.983,595,1.253,596,1.319,599,1.253,634,0.741,636,1.005,665,0.968,703,2.102,704,2.166,705,1.982,719,0.839,720,1.131,734,1.483,736,0.968,738,1.923,741,2.102,744,1.095,752,1.013,760,1.248,766,1.725,774,1.764,782,0.954,787,1.503,789,2.558,798,1.044,812,1.231,817,1.231,823,1.782,824,1.458,825,1.671,827,1.875,879,1.149,921,1.169,935,1.571,994,1.077,1047,1.189,1048,1.253,1049,1.253,1050,1.253,1052,2.269,1054,0.94,1056,1.013,1172,2.166,1187,2.305,1204,1.189,1205,1.189,1222,2.183,1233,1.209,1253,1.131,1255,1.753,1309,2.014,1316,1.547,1418,1.189,1430,2.543,1454,1.416,1599,1.725,1620,1.189,1654,1.671,1679,1.231,1723,1.253,1736,1.169,1767,1.253,1782,2.112,1871,0.474,1872,1.231,1873,1.275,1874,1.942,1875,1.782,1876,1.866,1877,1.253,1878,1.231,1879,1.253,1880,1.028,1881,0.927,1882,1.013,1883,2.378,1884,1.231,1885,1.209,1886,2.681,1887,1.231,1888,1.231,1889,1.095,1890,1.253,1891,1.253,1892,1.725,1893,1.866,1894,1.112,1895,1.77,1896,3.168,1897,1.275,1898,1.843,1899,1.131,1900,2.378,1901,1.275,1902,1.977,1903,1.942,1904,1.942,1905,1.275,1906,1.942,1907,2.296,1908,1.843,1909,1.275,1910,1.095,1911,1.275,1912,1.189,1913,1.189,1914,1.839,1915,1.149,1916,1.275,1917,1.275,1918,0.954,1919,1.275,1920,1.231,1921,1.875,1922,1.942,1923,1.253,1924,1.942,1925,1.275,1926,1.231,1927,1.275,1928,2.901,1929,1.275,1930,1.253,1931,1.275,1932,1.942,1933,1.231,1934,1.095,1935,1.253,1936,1.253,1937,1.275,1938,1.275,1939,1.275,1940,1.275,1941,1.253,1942,1.977,1943,1.275,1944,1.253,1945,1.209,1946,1.275,1947,1.275,1948,1.594,1949,1.812,1950,1.253,1951,1.923,1952,1.275,1953,1.253,1954,1.253,1955,1.275,1956,1.275,1957,1.275,1958,1.253,1959,1.275,1960,1.077,1961,1.169,1962,1.253,1963,1.275,1964,1.275,1965,1.275,1966,1.275,1967,1.231,1968,1.253,1969,1.231,1970,1.231,1971,1.275,1972,2.728,1973,3.307,1974,1.977,1975,1.942,1976,1.977,1977,1.977,1978,1.275,1979,1.275,1980,1.275,1981,1.619,1982,1.044,1983,1.275,1984,1.275,1985,1.843,1986,1.231,1987,1.338,1988,1.231,1989,1.275,1990,1.275,1991,1.843,1992,1.977,1993,1.275,1994,1.275,1995,2.219,1996,1.875,1997,2.219,1998,1.253,1999,1.231,2000,1.013,2001,1.253,2002,1.231,2003,1.209,2004,1.028,2005,1.275,2006,1.095,2199,3.131,2200,3.131,2201,3.131,2202,3.131]],["title/interfaces/IChartSeries.html",[40,0.003,576,1.507]],["body/interfaces/IChartSeries.html",[3,0.125,4,0.117,5,0.117,10,0.273,11,0.439,12,1.269,13,1.349,20,0.005,21,0.826,24,0.331,28,0.347,33,1.212,34,0.583,35,1.542,36,1.565,37,1.373,39,0.399,40,0.005,41,0.95,42,1.931,47,1.931,57,1.685,75,0.86,78,0.002,79,0.002,80,0.002,83,1.851,85,0.516,89,1.481,90,1.326,97,1.631,102,0.852,104,0.829,108,0.458,114,0.784,117,0.65,129,2.389,134,0.882,140,1.755,149,1.117,158,0.955,159,1.839,164,1.278,179,1.181,183,0.56,194,1.638,209,2.126,218,1.393,225,0.969,234,2.291,240,0.901,241,0.969,247,2.505,250,1.228,253,1.195,280,1.712,281,1.456,283,0.998,285,1.732,290,0.784,299,2.478,309,1.325,310,1.984,328,0.969,333,1.887,334,1.243,368,0.969,380,1.898,384,0.817,399,1.167,411,0.998,417,1.061,439,1.029,443,1.519,444,1.589,446,1.902,447,1.589,453,1.664,455,2.034,459,1.825,464,1.481,465,1.565,476,2.161,524,1.956,525,1.497,530,1.272,531,1.272,532,1.272,533,1.272,539,1.542,541,1.207,545,1.631,547,1.272,548,1.519,553,1.272,557,1.965,561,1.965,571,1.272,572,1.664,575,1.25,576,2.161,589,1.25,591,0.998,595,1.272,596,1.335,599,1.272,634,0.753,636,1.017,665,1.519,703,1.542,704,1.942,705,1.999,719,0.852,720,1.148,734,1.495,736,1.519,738,1.942,741,2.12,744,1.112,752,1.029,760,1.263,766,1.13,774,1.776,782,0.969,787,1.515,789,2.574,798,1.061,812,1.25,817,1.25,823,1.804,824,1.475,825,1.691,827,1.898,879,1.167,921,1.187,935,1.586,994,1.094,1047,1.207,1048,1.272,1049,1.272,1050,1.272,1052,2.288,1054,0.955,1056,1.029,1172,2.184,1187,2.324,1204,1.207,1205,1.207,1222,2.204,1233,1.228,1253,1.148,1255,1.774,1309,2.034,1316,1.565,1418,1.207,1430,2.771,1454,1.433,1599,1.746,1620,1.865,1654,1.691,1679,1.25,1723,1.965,1736,1.187,1767,1.272,1782,2.133,1871,0.482,1872,1.25,1873,1.295,1874,1.965,1875,1.804,1876,1.542,1877,1.272,1878,1.25,1879,1.272,1880,1.044,1881,0.941,1882,1.029,1883,2.402,1884,1.25,1885,1.228,1886,2.698,1887,1.25,1888,1.25,1889,1.112,1890,1.272,1891,1.272,1892,1.746,1893,1.878,1894,1.13,1895,1.784,1896,3.183,1897,1.295,1898,1.865,1899,1.148,1900,2.402,1901,1.295,1902,2.001,1903,1.965,1904,1.965,1905,1.295,1906,1.965,1907,2.319,1908,1.865,1909,1.295,1910,1.112,1911,1.295,1912,1.207,1913,1.207,1914,1.857,1915,1.167,1916,1.295,1917,1.295,1918,0.969,1919,1.295,1920,1.25,1921,1.898,1922,1.965,1923,1.272,1924,1.965,1925,1.295,1926,1.25,1927,1.295,1928,2.534,1929,1.295,1930,1.272,1931,1.295,1932,1.965,1933,1.25,1934,1.112,1935,1.272,1936,1.272,1937,1.295,1938,1.295,1939,1.295,1940,1.295,1941,1.272,1942,2.445,1943,1.295,1944,1.272,1945,1.228,1946,1.295,1947,1.295,1948,1.614,1949,1.834,1950,1.272,1951,2.361,1952,1.295,1953,1.272,1954,1.272,1955,1.295,1956,1.295,1957,1.295,1958,1.272,1959,1.295,1960,1.691,1961,1.834,1962,1.965,1963,2.001,1964,2.001,1965,2.001,1966,2.001,1967,1.25,1968,1.272,1969,1.25,1970,1.25,1971,1.295,1972,2.001,1973,2.702,1974,1.295,1975,1.272,1976,1.295,1977,1.295,1978,1.295,1979,1.295,1980,1.295,1981,1.639,1982,1.061,1983,1.295,1984,1.295,1985,1.865,1986,1.25,1987,1.354,1988,1.25,1989,1.295,1990,1.295,1991,1.865,1992,2.001,1993,1.295,1994,1.295,1995,2.241,1996,1.898,1997,2.241,1998,1.272,1999,1.25,2000,1.029,2001,1.272,2002,1.25,2003,1.228,2004,1.044,2005,1.295,2006,1.112]],["title/interfaces/IChartViewStatusEventPayload.html",[40,0.003,879,1.869]],["body/interfaces/IChartViewStatusEventPayload.html",[3,0.126,4,0.118,5,0.118,10,0.275,11,0.442,12,1.262,13,1.352,20,0.005,21,0.831,24,0.317,28,0.348,33,1.224,34,0.591,35,1.557,36,1.58,37,1.386,39,0.399,40,0.005,41,0.929,42,1.762,47,1.762,57,1.694,75,0.867,78,0.002,79,0.002,80,0.002,83,1.534,85,0.523,89,1.492,90,1.305,97,1.644,102,0.863,104,0.839,108,0.462,114,0.794,117,0.658,129,2.399,134,0.884,140,1.819,149,1.128,158,1.49,159,1.847,164,1.281,179,1.184,183,0.567,194,1.525,209,2.023,218,1.406,225,0.981,234,2.304,240,0.913,241,0.981,247,2.513,250,1.244,253,1.207,280,1.534,281,1.329,283,1.011,285,1.352,290,0.794,299,2.052,309,1.334,310,1.995,328,0.981,333,1.9,334,1.252,368,0.981,380,1.916,384,0.828,399,1.182,411,1.011,417,1.654,439,1.041,443,1.534,444,1.605,446,1.913,447,1.605,453,1.68,455,2.05,459,1.836,464,1.492,465,1.58,476,2.173,524,2.078,525,1.512,530,1.288,531,1.288,532,1.288,533,1.288,539,1.557,541,1.222,545,1.644,547,1.288,548,1.534,553,1.288,557,1.984,561,1.984,571,1.288,572,1.68,575,1.265,576,2.012,589,1.265,591,1.011,595,1.288,596,1.348,599,1.288,634,0.762,636,1.027,665,0.996,703,1.557,704,2.375,705,2.012,719,0.863,720,1.163,734,1.505,736,0.996,738,1.957,741,2.304,744,1.126,752,1.041,760,1.275,766,1.144,774,1.786,782,0.981,787,1.525,789,2.695,798,1.074,812,1.265,817,1.265,823,1.821,824,1.49,825,1.707,827,1.916,879,1.821,921,2.537,935,1.599,994,1.108,1047,1.222,1048,1.288,1049,1.288,1050,1.288,1052,2.303,1054,0.967,1056,1.041,1172,2.199,1187,2.339,1204,1.222,1205,1.222,1222,2.847,1233,1.244,1253,1.163,1255,1.791,1309,2.05,1316,1.58,1418,1.222,1430,2.581,1454,1.447,1599,1.762,1620,1.222,1654,1.707,1679,1.265,1723,1.288,1736,1.202,1767,1.984,1782,2.15,1871,0.488,1872,1.265,1873,1.311,1874,1.984,1875,1.821,1876,1.557,1877,1.288,1878,1.265,1879,1.288,1880,1.057,1881,0.953,1882,1.041,1883,2.42,1884,1.265,1885,1.244,1886,2.711,1887,1.265,1888,1.265,1889,1.126,1890,1.288,1891,1.288,1892,1.762,1893,1.887,1894,1.144,1895,1.796,1896,3.263,1897,1.311,1898,1.883,1899,1.163,1900,2.42,1901,1.311,1902,2.02,1903,1.984,1904,1.984,1905,1.311,1906,1.984,1907,2.337,1908,1.883,1909,1.311,1910,1.126,1911,1.311,1912,1.222,1913,1.222,1914,1.871,1915,1.182,1916,1.311,1917,1.311,1918,0.981,1919,1.311,1920,1.265,1921,1.916,1922,1.984,1923,1.288,1924,1.984,1925,1.311,1926,1.265,1927,1.311,1928,2.547,1929,1.311,1930,1.288,1931,1.311,1932,1.984,1933,1.265,1934,1.126,1935,1.288,1936,1.288,1937,1.311,1938,1.311,1939,1.311,1940,1.311,1941,1.288,1942,2.02,1943,1.311,1944,1.288,1945,1.244,1946,1.311,1947,1.311,1948,1.629,1949,1.852,1950,1.288,1951,1.957,1952,1.311,1953,1.288,1954,1.288,1955,1.311,1956,1.311,1957,1.311,1958,1.288,1959,1.311,1960,1.108,1961,1.202,1962,1.288,1963,1.311,1964,1.311,1965,1.311,1966,1.311,1967,1.265,1968,1.288,1969,1.265,1970,1.265,1971,1.311,1972,2.02,1973,2.719,1974,1.311,1975,1.288,1976,1.311,1977,1.311,1978,1.311,1979,1.311,1980,1.311,1981,1.654,1982,1.074,1983,1.311,1984,1.311,1985,1.883,1986,1.265,1987,1.667,1988,1.265,1989,1.311,1990,2.02,1991,2.581,1992,2.769,1993,2.02,1994,2.02,1995,2.259,1996,1.916,1997,2.259,1998,1.288,1999,1.265,2000,1.041,2001,1.288,2002,1.265,2003,1.244,2004,1.057,2005,1.311,2006,1.126]],["title/interfaces/IDataAccessors.html",[35,1.598,40,0.003]],["body/interfaces/IDataAccessors.html",[3,0.128,4,0.12,5,0.12,10,0.246,11,0.326,12,1.264,13,1.354,17,0.448,20,0.005,21,0.836,24,0.308,28,0.35,33,1.505,34,0.599,35,1.915,36,1.597,37,1.401,39,0.4,40,0.005,41,0.934,42,1.773,47,1.773,57,1.703,75,0.981,78,0.002,79,0.003,80,0.002,83,1.547,89,1.236,90,1.309,97,1.658,102,0.875,104,0.851,108,0.467,114,0.805,117,0.667,129,2.41,134,0.892,140,1.768,149,1.14,158,0.98,159,1.855,164,1.284,179,1.188,183,0.575,194,1.536,209,2.036,218,1.421,225,0.995,234,2.319,240,0.925,241,0.995,247,2.523,250,1.261,253,1.22,280,1.547,281,1.337,283,1.025,285,1.361,290,0.805,299,2.065,309,1.343,310,2.007,328,0.995,333,1.914,334,1.263,368,0.995,380,1.936,384,0.839,399,1.198,411,1.025,417,1.089,439,1.056,443,1.55,444,1.621,446,1.925,447,1.621,453,1.698,455,2.067,459,1.847,464,1.505,465,1.597,476,2.186,524,1.979,525,1.527,530,1.306,531,1.306,532,1.306,533,1.306,539,1.573,541,1.239,545,1.658,547,1.306,548,1.55,553,1.306,557,2.005,561,2.005,571,1.306,572,1.698,575,1.283,576,2.026,589,1.283,591,1.025,595,1.306,596,1.362,599,1.306,634,0.773,636,1.038,665,1.009,703,1.573,704,1.974,705,2.026,719,0.875,720,1.179,734,1.516,736,1.009,738,1.974,741,2.149,744,1.141,752,1.056,760,1.288,766,1.16,774,1.897,782,0.995,787,1.536,789,2.601,798,1.089,812,1.283,817,1.283,823,1.84,824,1.505,825,1.725,827,1.936,879,1.198,921,1.218,935,1.613,994,1.123,1047,1.239,1048,1.306,1049,1.306,1050,1.306,1052,2.319,1054,0.98,1056,1.056,1172,2.215,1187,2.356,1204,1.239,1205,1.239,1222,2.24,1233,1.261,1253,1.179,1255,1.81,1309,2.067,1316,1.597,1418,1.239,1430,2.599,1454,1.462,1599,1.781,1620,1.239,1654,1.725,1679,1.283,1723,1.306,1736,1.218,1767,1.306,1782,2.168,1871,0.495,1872,1.283,1873,1.33,1874,2.005,1875,1.84,1876,1.573,1877,1.306,1878,1.283,1879,1.306,1880,1.072,1881,0.966,1882,1.056,1883,2.441,1884,1.283,1885,1.261,1886,2.726,1887,1.283,1888,1.283,1889,1.141,1890,1.306,1891,1.306,1892,1.781,1893,1.897,1894,1.16,1895,1.809,1896,3.208,1897,1.33,1898,1.903,1899,1.179,1900,2.441,1901,1.33,1902,2.042,1903,2.005,1904,2.005,1905,1.33,1906,2.005,1907,2.357,1908,1.903,1909,1.33,1910,1.141,1911,1.33,1912,1.239,1913,1.239,1914,1.887,1915,1.198,1916,1.33,1917,1.33,1918,0.995,1919,1.33,1920,1.283,1921,1.936,1922,2.005,1923,1.306,1924,2.005,1925,1.33,1926,1.283,1927,1.33,1928,2.561,1929,1.33,1930,1.306,1931,1.33,1932,2.005,1933,1.283,1934,1.141,1935,1.306,1936,1.306,1937,1.33,1938,1.33,1939,1.33,1940,1.33,1941,1.306,1942,2.042,1943,1.33,1944,1.306,1945,1.261,1946,1.33,1947,1.33,1948,1.646,1949,1.871,1950,1.306,1951,1.974,1952,1.33,1953,1.306,1954,1.306,1955,1.33,1956,1.33,1957,1.33,1958,1.306,1959,1.33,1960,1.123,1961,1.218,1962,1.306,1963,1.33,1964,1.33,1965,1.33,1966,1.33,1967,1.283,1968,1.306,1969,1.283,1970,1.283,1971,1.33,1972,2.042,1973,2.739,1974,1.33,1975,1.306,1976,1.33,1977,1.33,1978,1.33,1979,1.33,1980,1.33,1981,1.672,1982,1.089,1983,1.33,1984,1.33,1985,1.903,1986,1.283,1987,1.381,1988,1.283,1989,1.33,1990,1.33,1991,1.903,1992,2.042,1993,1.33,1994,1.33,1995,2.278,1996,1.936,1997,2.278,1998,1.306,1999,1.283,2000,1.056,2001,1.306,2002,1.283,2003,1.261,2004,1.072,2005,1.33,2006,1.141,2203,1.755,2204,3.264]],["title/interfaces/IDataPoint.html",[40,0.003,1187,1.752]],["body/interfaces/IDataPoint.html",[3,0.125,4,0.117,5,0.117,10,0.336,11,0.44,12,1.276,13,1.362,20,0.005,21,0.827,22,0.726,24,0.342,28,0.348,33,1.215,34,0.585,35,1.545,36,1.569,37,1.376,39,0.399,40,0.005,41,0.927,42,1.755,47,1.755,57,1.687,75,0.862,78,0.002,79,0.002,80,0.002,83,1.525,85,0.518,89,1.215,90,1.303,97,1.634,102,0.854,104,0.831,108,0.459,114,0.787,117,0.651,129,2.392,134,0.894,140,1.757,149,1.12,158,0.958,159,1.841,164,1.3,179,1.182,183,0.562,194,1.517,209,2.219,218,2.072,225,0.972,234,2.611,240,0.904,241,0.972,247,2.551,250,1.232,253,1.198,280,1.525,281,1.323,283,1.001,285,1.345,290,0.787,299,2.043,309,1.327,310,1.986,328,0.972,333,1.89,334,1.245,368,0.972,380,1.902,384,0.82,399,1.171,411,1.001,417,1.064,439,1.032,443,1.523,444,1.593,446,1.905,447,1.593,453,1.668,455,2.037,459,1.828,464,1.484,465,1.569,476,2.163,524,1.959,525,1.5,530,1.276,531,1.276,532,1.276,533,1.276,539,1.545,541,1.211,545,1.634,547,1.276,548,1.523,553,1.276,557,1.97,561,1.97,571,1.276,572,1.668,575,1.253,576,2.002,589,1.253,591,1.001,595,1.276,596,1.338,599,1.276,634,0.755,636,1.019,665,0.986,703,1.545,704,1.945,705,2.002,719,0.854,720,1.152,734,1.497,736,0.986,738,1.945,741,2.123,744,1.115,752,1.032,760,1.266,766,1.133,774,1.779,782,0.972,787,1.517,789,2.577,798,1.064,812,1.253,817,1.253,823,1.808,824,1.479,825,1.694,827,1.902,879,1.171,921,1.19,935,2.128,994,1.097,1047,1.211,1048,1.276,1049,1.276,1050,1.276,1052,2.291,1054,0.958,1056,1.032,1172,2.188,1187,2.515,1204,1.211,1205,1.211,1222,2.208,1233,1.232,1253,1.152,1255,1.778,1309,2.476,1316,1.569,1418,1.211,1430,2.775,1454,1.436,1599,1.749,1620,1.211,1654,1.694,1679,1.253,1723,1.276,1736,1.19,1767,1.276,1782,2.403,1871,0.483,1872,1.253,1873,1.299,1874,1.97,1875,1.808,1876,1.545,1877,1.276,1878,1.253,1879,1.276,1880,1.047,1881,0.944,1882,1.032,1883,2.406,1884,1.253,1885,1.232,1886,2.701,1887,1.253,1888,1.253,1889,1.115,1890,1.276,1891,1.276,1892,1.749,1893,1.88,1894,1.133,1895,1.787,1896,3.186,1897,1.299,1898,1.869,1899,1.152,1900,2.406,1901,1.299,1902,2.006,1903,1.97,1904,1.97,1905,1.299,1906,1.97,1907,2.323,1908,1.869,1909,1.299,1910,1.115,1911,1.299,1912,1.211,1913,1.211,1914,1.86,1915,1.171,1916,1.299,1917,1.299,1918,0.972,1919,1.299,1920,1.253,1921,1.902,1922,1.97,1923,1.276,1924,1.97,1925,1.299,1926,1.253,1927,1.299,1928,2.537,1929,1.299,1930,1.276,1931,1.299,1932,1.97,1933,1.253,1934,1.115,1935,1.276,1936,1.276,1937,1.299,1938,1.299,1939,1.299,1940,1.299,1941,1.276,1942,2.006,1943,1.299,1944,1.276,1945,1.232,1946,1.299,1947,1.299,1948,1.617,1949,1.838,1950,1.276,1951,1.945,1952,1.299,1953,1.276,1954,1.276,1955,1.299,1956,1.299,1957,1.299,1958,1.276,1959,1.299,1960,1.097,1961,1.19,1962,1.276,1963,1.299,1964,1.299,1965,1.299,1966,1.299,1967,1.253,1968,1.276,1969,1.253,1970,1.253,1971,1.299,1972,2.006,1973,2.706,1974,1.299,1975,1.276,1976,1.299,1977,1.299,1978,1.299,1979,1.299,1980,1.299,1981,1.642,1982,1.064,1983,1.299,1984,1.299,1985,1.869,1986,1.253,1987,1.357,1988,1.253,1989,1.299,1990,1.299,1991,1.869,1992,2.006,1993,1.299,1994,1.299,1995,2.245,1996,1.902,1997,2.245,1998,1.276,1999,1.253,2000,1.032,2001,1.276,2002,1.253,2003,1.232,2004,1.047,2005,1.299,2006,1.115]],["title/interfaces/IDataPointsPayload.html",[40,0.003,453,1.725]],["body/interfaces/IDataPointsPayload.html",[3,0.127,4,0.119,5,0.119,10,0.245,11,0.324,12,1.268,13,1.359,17,0.445,20,0.005,21,0.833,24,0.307,28,0.349,33,1.229,34,0.594,35,1.564,36,1.588,37,1.393,39,0.4,40,0.005,41,0.931,42,1.767,47,1.767,57,1.698,75,0.87,78,0.002,79,0.003,80,0.002,83,1.54,85,0.526,89,1.229,90,1.307,97,1.65,102,0.868,104,0.844,108,0.464,114,0.799,117,0.662,129,2.404,134,0.891,140,1.764,149,1.133,158,0.973,159,1.85,164,1.283,179,1.186,183,0.571,194,1.53,209,2.029,218,1.413,225,0.987,234,2.542,240,0.918,241,0.987,247,2.562,250,1.251,253,1.213,280,1.54,281,1.333,283,1.564,285,1.356,290,0.799,299,2.058,309,1.338,310,2.001,328,0.987,333,1.906,334,1.257,368,0.987,380,1.925,384,0.833,399,1.189,411,1.017,417,1.081,439,1.048,443,1.541,444,1.612,446,1.919,447,1.612,453,2.058,455,2.31,459,1.841,464,1.498,465,1.588,476,2.179,524,1.973,525,1.519,530,1.296,531,1.296,532,1.296,533,1.296,539,1.564,541,1.23,545,1.65,547,1.296,548,1.541,553,1.296,557,1.994,561,1.994,571,1.296,572,1.688,575,1.273,576,2.018,589,1.273,591,1.017,595,1.296,596,1.354,599,1.296,634,0.767,636,1.032,665,1.002,703,1.564,704,1.965,705,2.018,719,0.868,720,1.17,734,1.51,736,1.002,738,1.965,741,2.311,744,1.133,752,1.048,760,1.561,766,1.151,774,1.892,782,0.987,787,1.53,789,2.593,798,1.662,812,1.273,817,1.273,823,1.83,824,1.497,825,1.715,827,1.925,879,1.189,921,1.209,935,1.605,994,1.115,1047,1.23,1048,1.296,1049,1.296,1050,1.296,1052,2.31,1054,0.973,1056,1.048,1172,2.206,1187,2.675,1204,1.23,1205,1.23,1222,2.23,1233,1.251,1253,1.17,1255,1.8,1309,2.058,1316,1.588,1418,1.23,1430,2.589,1454,1.454,1599,1.771,1620,1.23,1654,1.715,1679,1.273,1723,1.296,1736,1.209,1767,1.296,1782,2.158,1871,0.491,1872,1.273,1873,1.32,1874,1.994,1875,1.83,1876,1.564,1877,1.296,1878,1.273,1879,1.296,1880,1.064,1881,0.959,1882,1.048,1883,2.43,1884,1.273,1885,1.251,1886,2.718,1887,1.273,1888,1.273,1889,1.133,1890,1.296,1891,1.296,1892,1.771,1893,1.892,1894,1.151,1895,1.802,1896,3.201,1897,1.32,1898,1.892,1899,1.17,1900,2.43,1901,1.32,1902,2.03,1903,1.994,1904,1.994,1905,1.32,1906,1.994,1907,2.346,1908,1.892,1909,1.32,1910,1.133,1911,1.32,1912,1.23,1913,1.23,1914,1.878,1915,1.189,1916,1.32,1917,1.32,1918,0.987,1919,1.32,1920,1.273,1921,1.925,1922,1.994,1923,1.296,1924,1.994,1925,1.32,1926,1.273,1927,1.32,1928,2.554,1929,1.32,1930,1.296,1931,1.32,1932,1.994,1933,1.273,1934,1.133,1935,1.296,1936,1.296,1937,1.32,1938,1.32,1939,1.32,1940,1.32,1941,1.296,1942,2.03,1943,1.32,1944,1.296,1945,1.251,1946,1.32,1947,1.32,1948,1.637,1949,1.86,1950,1.296,1951,1.965,1952,1.32,1953,1.296,1954,1.296,1955,1.32,1956,1.32,1957,1.32,1958,1.296,1959,1.32,1960,1.115,1961,1.209,1962,1.296,1963,1.32,1964,1.32,1965,1.32,1966,1.32,1967,1.273,1968,1.296,1969,1.273,1970,1.273,1971,1.32,1972,2.03,1973,2.728,1974,1.32,1975,1.296,1976,1.32,1977,1.32,1978,1.32,1979,1.32,1980,1.32,1981,2.026,1982,1.081,1983,1.32,1984,1.32,1985,1.892,1986,1.273,1987,1.373,1988,1.273,1989,1.32,1990,1.32,1991,1.892,1992,2.03,1993,1.32,1994,1.32,1995,2.267,1996,2.346,1997,2.267,1998,1.296,1999,1.273,2000,1.048,2001,1.296,2002,1.273,2003,1.251,2004,1.064,2005,1.32,2006,1.133,2203,1.742,2205,3.24]],["title/interfaces/IDataSeries.html",[40,0.003,209,1.403]],["body/interfaces/IDataSeries.html",[3,0.123,4,0.115,5,0.115,10,0.271,11,0.5,12,1.282,13,1.365,17,0.431,20,0.005,21,0.821,24,0.329,28,0.346,33,1.2,34,0.576,35,1.527,36,1.55,37,1.36,39,0.399,40,0.005,41,0.922,42,1.742,47,1.742,57,1.807,75,0.853,78,0.002,79,0.002,80,0.002,83,1.51,85,0.51,89,1.2,90,1.312,97,1.618,102,0.841,104,0.818,108,0.453,114,0.774,117,0.641,129,2.379,134,0.897,140,1.749,149,1.106,158,0.943,159,2.012,164,1.275,179,1.178,183,0.553,194,1.628,209,2.115,218,1.379,225,0.957,234,2.278,240,0.89,241,1.482,247,2.541,250,1.879,253,1.184,280,1.51,281,1.39,283,0.986,285,1.334,290,1.2,299,2.028,309,1.316,310,1.972,328,0.957,333,1.875,334,1.233,368,1.482,380,1.879,384,0.807,399,1.153,411,0.986,417,1.047,439,1.016,443,1.504,444,1.574,446,1.891,447,1.574,453,1.648,455,2.272,459,1.815,464,1.469,465,1.55,476,2.148,524,1.945,525,1.482,530,1.256,531,1.256,532,1.256,533,1.256,539,1.527,541,1.192,545,1.618,547,1.256,548,1.504,553,1.256,557,1.946,561,1.946,571,1.256,572,1.648,575,1.234,576,1.985,589,1.234,591,0.986,595,1.256,596,1.322,599,1.256,634,0.744,636,1.007,665,0.971,703,1.527,704,1.926,705,1.985,719,0.841,720,1.134,734,1.485,736,0.971,738,1.926,741,2.105,744,1.098,752,1.016,760,1.865,766,1.116,774,1.868,782,0.957,787,1.505,789,2.56,798,1.047,812,1.912,817,1.234,823,1.786,824,1.461,825,1.674,827,1.879,879,1.153,921,1.172,935,1.574,994,1.08,1047,1.192,1048,1.256,1049,1.256,1050,1.256,1052,2.272,1054,1.461,1056,1.016,1172,2.17,1187,2.308,1204,1.192,1205,1.192,1222,2.186,1233,1.213,1253,1.134,1255,1.757,1309,2.018,1316,2.137,1418,1.192,1430,2.546,1454,1.419,1599,1.728,1620,1.192,1654,1.674,1679,1.234,1723,1.256,1736,1.172,1767,1.256,1782,2.383,1871,0.476,1872,1.234,1873,1.279,1874,2.382,1875,1.786,1876,1.527,1877,1.256,1878,1.234,1879,1.256,1880,1.031,1881,0.929,1882,1.016,1883,2.382,1884,1.234,1885,1.213,1886,2.684,1887,1.234,1888,1.234,1889,1.098,1890,1.256,1891,1.256,1892,1.728,1893,1.868,1894,1.116,1895,1.772,1896,3.171,1897,1.279,1898,1.847,1899,1.134,1900,2.382,1901,1.279,1902,1.982,1903,1.946,1904,1.946,1905,1.279,1906,1.946,1907,2.3,1908,1.847,1909,1.279,1910,1.098,1911,1.279,1912,1.192,1913,1.192,1914,1.842,1915,1.153,1916,1.279,1917,1.279,1918,0.957,1919,1.279,1920,1.234,1921,1.879,1922,1.946,1923,1.256,1924,1.946,1925,1.279,1926,1.234,1927,1.279,1928,2.521,1929,1.279,1930,1.256,1931,1.279,1932,1.946,1933,1.234,1934,1.098,1935,1.256,1936,1.256,1937,1.279,1938,1.279,1939,1.279,1940,1.279,1941,1.256,1942,2.426,1943,1.982,1944,1.946,1945,1.879,1946,1.982,1947,1.982,1948,2.203,1949,2.504,1950,1.946,1951,2.17,1952,1.982,1953,1.946,1954,1.946,1955,1.982,1956,1.982,1957,1.982,1958,1.946,1959,1.982,1960,1.08,1961,1.172,1962,1.256,1963,1.279,1964,1.279,1965,1.279,1966,1.279,1967,1.234,1968,1.256,1969,1.234,1970,1.234,1971,1.279,1972,1.982,1973,2.683,1974,1.279,1975,1.256,1976,1.279,1977,1.279,1978,1.279,1979,1.279,1980,1.279,1981,1.623,1982,1.047,1983,1.279,1984,1.279,1985,1.847,1986,1.234,1987,1.341,1988,1.234,1989,1.279,1990,1.279,1991,1.847,1992,1.982,1993,1.279,1994,1.279,1995,2.223,1996,1.879,1997,2.223,1998,1.256,1999,1.234,2000,1.016,2001,1.256,2002,1.234,2003,1.213,2004,1.031,2005,1.279,2006,1.098,2203,1.688,2206,3.14]],["title/interfaces/IDimensionConfig.html",[40,0.003,137,2.282]],["body/interfaces/IDimensionConfig.html",[0,0.046,3,0.111,4,0.104,5,0.104,10,0.115,11,0.293,17,1.098,19,1.505,20,0.005,21,0.783,22,1.085,24,0.332,28,0.313,39,0.348,40,0.005,41,0.501,52,1.141,75,0.407,78,0.001,79,0.002,80,0.001,83,2.504,85,1.124,89,1.11,90,0.789,95,3.397,100,1.42,101,3.305,102,1.206,103,3.938,104,1.456,106,4.033,108,0.828,109,2.668,110,1.905,112,3.181,113,2.986,114,2.032,122,3.819,133,3.44,134,0.592,137,4.079,140,1.852,143,2.903,149,0.647,150,2.248,152,1.42,153,2.42,154,1.57,155,3.707,156,1.57,157,1.57,158,1.908,160,1.57,161,2.268,164,1.389,166,2.42,167,2.359,168,1.529,175,1.972,178,2.791,179,0.368,180,2.197,181,3.33,182,2.359,194,1.964,214,1.117,253,2.214,254,1.301,269,1.223,281,0.515,285,1.263,297,1.561,309,1.718,310,2.096,317,0.841,334,1.597,384,1.893,404,3.737,446,0.741,459,0.711,464,1.11,488,1.044,489,1.978,524,1.497,525,1.703,529,1.454,539,2.748,545,2.379,548,1.728,552,2.968,580,1.061,590,1.454,591,1.413,592,2.727,593,1.529,596,0.773,597,1.01,598,1.49,627,1.225,634,2.308,636,2.032,665,1.392,703,2.585,704,2.24,705,1.88,709,2.302,719,0.762,734,0.996,736,1.965,753,1.388,765,3.305,768,1.388,770,3.319,771,1.274,772,2.584,787,0.638,800,1.49,808,3.33,824,0.854,932,3.173,1010,1.42,1054,1.908,1132,1.57,1149,1.49,1164,3.66,1189,1.529,1316,1.434,1357,1.709,1440,3.995,1531,4.067,1532,4.66,1533,3.417,1534,4.067,1535,4.067,1541,2.486,1545,2.486,1549,2.486,1553,2.486,1626,1.57,1628,1.57,1629,1.57,1630,1.529,1633,5.647,1635,1.117,1640,2.359,1649,1.529,1656,1.529,1662,2.486,1666,1.57,1671,2.504,1672,1.388,1675,1.49,1676,1.529,1681,1.529,1687,2.667,1690,1.49,1691,2.455,1755,2.486,1756,1.57,1840,1.49,1841,1.529,1842,1.529,1843,1.529,1844,1.529,1845,2.42,1846,1.388,1847,1.529,1871,0.431,1876,2.311,1893,1.546,1895,0.751,1928,0.934,1948,1.478,1987,2.372,2000,0.92,2007,1.57,2008,3.932,2009,2.149,2010,4.067,2011,1.615,2012,3.609,2013,3.167,2014,4.117,2015,3.173,2016,2.557,2017,2.149,2018,4.317,2019,3.549,2020,4.418,2021,3.66,2022,3.509,2023,5.262,2024,3.609,2025,4.544,2026,3.509,2027,1.615,2028,1.249,2029,1.57,2030,2.486,2031,1.57,2032,1.57,2033,2.42,2034,1.57,2035,1.57,2036,2.61,2037,2.318,2038,1.57,2039,1.529,2040,1.615,2041,1.57,2042,1.57,2043,1.57,2044,1.615,2045,1.615,2046,1.49,2047,1.357,2048,1.615,2049,2.359,2050,1.615,2051,1.357,2052,1.615,2053,2.42,2054,2.557,2055,2.557,2056,2.149,2057,2.149,2058,1.615,2059,1.57,2060,1.529,2061,1.615,2062,1.615,2207,2.843,2208,2.843,2209,2.843,2210,2.843,2211,2.843,2212,2.843,2213,2.843,2214,2.843]],["title/interfaces/IDimensions.html",[40,0.003,598,2.668]],["body/interfaces/IDimensions.html",[0,0.054,3,0.129,4,0.121,5,0.121,10,0.134,11,0.329,20,0.005,21,0.374,24,0.282,28,0.33,39,0.36,40,0.005,41,0.564,52,1.283,75,0.474,78,0.002,79,0.003,80,0.002,83,2.518,85,0.537,89,1.249,90,0.715,95,3.501,100,1.651,101,3.547,102,1.356,103,3.585,104,1.603,106,3.771,108,0.76,109,2.614,110,1.806,112,3.15,113,2.925,114,2.012,122,2.936,133,3.661,134,0.642,137,3.945,140,1.83,143,2.697,149,0.752,150,2.528,152,1.651,153,2.722,154,1.826,155,3.443,156,1.826,157,1.826,158,2.07,160,1.826,161,1.954,164,1.389,166,2.722,167,2.653,168,1.778,175,1.944,178,3.028,179,0.428,180,2.471,181,3.613,182,2.653,194,1.83,214,1.299,253,2.261,254,1.512,281,0.598,285,1.371,297,1.719,309,1.782,310,2.216,317,0.978,334,1.688,384,2.014,404,3.22,446,0.861,459,0.827,464,1.249,488,1.214,489,2.224,524,1.648,525,1.874,529,1.691,539,2.851,545,2.468,548,1.902,552,3.22,580,1.234,590,1.691,591,1.589,592,3.002,593,1.778,596,0.898,597,1.175,598,2.653,627,1.424,634,2.24,636,1.985,665,1.565,703,2.641,704,1.99,705,1.498,709,2.589,719,0.886,734,1.12,736,1.565,753,1.614,765,3.29,768,1.614,770,2.859,771,1.482,772,2.296,787,0.742,800,1.733,808,3.613,824,0.993,932,3.377,1010,1.651,1054,2.07,1132,1.826,1149,1.733,1164,3.731,1189,1.778,1316,1.613,1357,1.922,1440,3.442,1531,2.796,1532,3.807,1533,1.778,1534,1.826,1535,1.826,1541,1.826,1545,1.826,1549,1.826,1553,1.826,1626,1.826,1628,1.826,1629,1.826,1630,1.778,1633,5.591,1635,1.299,1640,2.653,1649,1.778,1656,1.778,1662,2.796,1666,1.826,1671,2.757,1672,1.614,1675,1.733,1676,1.778,1681,1.778,1687,2.936,1690,1.733,1691,2.702,1755,2.796,1756,1.826,1840,1.733,1841,1.778,1842,1.778,1843,1.778,1844,1.778,1845,2.722,1846,1.614,1847,1.778,1871,0.501,1876,2.46,1893,1.677,1895,0.874,1928,1.086,1948,1.086,1987,2.319,2000,1.069,2007,1.826,2008,4.22,2009,2.416,2010,4.328,2011,1.878,2012,2.875,2013,2.814,2014,3.849,2015,2.528,2016,1.878,2017,1.578,2018,3.894,2019,3.201,2020,3.807,2021,3.153,2022,2.796,2023,4.945,2024,2.875,2025,3.915,2026,2.796,2027,1.878,2028,1.452,2029,1.826,2030,2.796,2031,1.826,2032,1.826,2033,2.722,2034,1.826,2035,1.826,2036,2.874,2037,2.552,2038,1.826,2039,1.778,2040,1.878,2041,1.826,2042,1.826,2043,1.826,2044,1.878,2045,1.878,2046,1.733,2047,1.578,2048,1.878,2049,2.653,2050,1.878,2051,1.578,2052,1.878,2053,2.722,2054,2.875,2055,2.875,2056,2.416,2057,2.416,2058,1.878,2059,1.826,2060,1.778,2061,1.878,2062,1.878]],["title/interfaces/IElementPosition.html",[40,0.003,933,2.978]],["body/interfaces/IElementPosition.html",[3,0.271,4,0.254,5,0.254,10,0.28,11,0.549,20,0.005,24,0.359,28,0.271,39,0.371,40,0.005,41,0.94,42,1.661,47,1.661,78,0.003,79,0.004,80,0.003,85,1.124,108,0.645,109,3.159,114,2.336,134,0.786,164,1.416,279,4.027,280,1.755,281,1.253,290,2.244,597,2.459,634,2.243,636,1.961,734,2.014,774,1.684,789,2.813,933,4.934,935,2.229,1871,1.049,1876,2.648,1908,3.202,1910,2.949,1951,2.239,1981,2.308,1997,3.396,2004,2.77,2215,5.372,2216,6.547,2217,5.372,2218,5.915,2219,4.651,2220,4.651,2221,4.651,2222,4.651]],["title/interfaces/IEnhancedLineCapConfig.html",[40,0.003,2093,3.292]],["body/interfaces/IEnhancedLineCapConfig.html",[0,0.106,3,0.185,4,0.173,5,0.173,10,0.191,11,0.427,12,1.118,13,0.657,20,0.005,21,0.743,22,1.37,24,0.31,28,0.37,34,0.865,38,1.264,39,0.37,40,0.005,41,0.841,52,2.07,53,1.704,78,0.002,79,0.003,80,0.002,85,0.766,89,1.863,90,0.927,102,2.188,107,1.65,124,1.282,134,0.908,140,1.73,149,2.115,155,2.885,159,1.453,164,1.338,179,0.851,194,2.288,209,2.081,210,2.356,214,1.854,218,1.337,240,1.337,247,2.172,253,2.163,255,3.318,263,2.943,268,4.418,281,1.189,285,1.707,290,1.164,292,2.847,293,2.847,294,3.531,295,3.605,296,3.134,297,2.111,299,2.484,302,2.847,305,2.847,306,2.473,309,1.482,317,1.396,327,2.303,328,1.438,331,2.413,332,2.356,333,1.318,336,1.376,337,1.994,580,1.761,636,1.777,719,1.759,734,1.808,777,2.885,782,2.001,787,1.473,802,3.772,959,5.364,1256,2.847,1359,4.097,1525,3.626,1584,2.847,1790,4.171,1791,4.909,1795,3.626,1871,0.715,1880,2.682,1881,2.417,1882,1.526,1893,1.838,1895,1.996,1899,2.371,1914,2.525,1934,3.188,1982,2.19,1987,1.3,2009,2.252,2013,4.171,2021,3.004,2028,4.284,2047,2.252,2063,3.05,2064,3.05,2065,3.17,2066,4.413,2067,4.413,2068,3.729,2069,3.17,2070,5.076,2071,4.413,2072,3.841,2073,3.17,2074,4.712,2075,5.28,2076,3.17,2077,2.943,2078,3.17,2079,2.537,2080,4.413,2081,2.537,2082,4.097,2083,4.245,2084,4.245,2085,4.097,2086,3.05,2087,3.05,2088,3.841,2089,2.473,2090,3.05,2091,5.28,2092,5.488,2093,4.883,2094,2.943,2095,3.17,2096,3.17,2097,3.17,2098,2.943,2099,3.17,2100,3.17,2101,3.17,2102,2.943,2103,4.413,2104,4.245,2105,2.943,2106,3.17,2107,4.413,2108,4.245,2109,2.76,2110,3.17,2111,3.17,2112,3.05,2113,3.05,2114,5.076,2115,3.17,2116,3.17,2117,3.05,2118,2.943,2119,3.17,2120,3.17,2121,3.17,2122,3.17,2123,3.17,2124,2.76]],["title/interfaces/IFormatters.html",[40,0.003,2138,2.892]],["body/interfaces/IFormatters.html",[3,0.187,4,0.176,5,0.176,10,0.332,11,0.431,12,0.833,13,0.665,17,0.656,20,0.005,22,0.976,24,0.312,28,0.259,34,0.876,39,0.388,40,0.005,41,0.915,42,1.147,47,1.147,75,1.176,78,0.002,79,0.003,80,0.002,85,0.776,95,1.783,97,1.8,108,0.853,110,1.466,117,1.553,124,1.8,126,2.099,132,2.392,134,0.853,140,1.88,161,1.878,164,1.351,175,1.798,178,2.099,179,0.619,183,0.842,192,1.466,222,1.982,225,2.018,227,1.8,245,3.762,280,2.477,281,0.865,285,1.715,309,0.937,326,2.794,334,1.847,336,1.393,337,2.8,368,2.018,379,3.874,441,2.713,576,1.96,757,1.911,759,2.569,760,1.228,770,2.748,772,2.472,774,1.162,776,4.658,798,2.209,839,3.089,882,3.888,1454,1.393,1489,2.332,1499,4.132,1603,2.794,1652,3.562,1654,1.644,1671,2.141,1691,3.92,1782,1.697,1871,0.724,1889,1.67,1892,2.353,1893,2.357,1918,3.085,1981,2.209,2004,2.175,2014,3.03,2017,3.162,2019,2.058,2036,3.094,2037,1.982,2056,2.28,2057,2.28,2089,3.472,2125,4.132,2126,2.98,2127,4.213,2128,3.21,2130,4.588,2131,2.98,2132,2.98,2133,3.089,2134,3.089,2135,3.089,2136,4.318,2137,4.796,2138,4.318,2139,1.96,2140,3.21,2141,3.089,2142,2.883,2143,2.98,2144,3.21,2145,3.21,2146,5.795,2147,3.874,2148,6.404,2149,2.794,2150,3.21,2151,4.451,2152,4.132,2153,2.638,2154,2.794,2155,2.794,2156,4.803,2157,4.798,2158,4.451,2159,2.883,2160,2.883,2161,4.798,2162,2.794,2163,2.794,2164,3.21,2165,3.21,2166,3.089,2167,2.794,2168,4.803,2169,3.21,2170,5.044,2171,2.794,2172,3.21,2173,3.21,2174,4.282,2175,3.21,2176,3.21,2177,3.21,2203,2.569,2223,4.777]],["title/interfaces/IGrid.html",[40,0.003,539,1.598]],["body/interfaces/IGrid.html",[0,0.047,3,0.113,4,0.106,5,0.106,10,0.116,11,0.296,17,1.206,19,1.651,20,0.005,21,0.838,22,1.143,24,0.328,28,0.315,39,0.349,40,0.005,41,0.507,52,1.154,75,0.413,78,0.001,79,0.002,80,0.001,83,2.543,85,1.04,89,1.58,90,0.904,95,3.407,100,1.44,101,3.537,102,1.22,103,3.389,104,1.817,106,3.603,108,0.723,109,2.471,110,1.875,112,2.996,113,2.765,114,1.913,122,2.692,133,3.865,134,0.597,137,3.797,140,1.771,143,3.024,149,0.656,150,2.273,152,1.44,153,2.448,154,1.593,155,3.255,156,1.593,157,1.593,158,1.923,160,1.593,161,1.815,164,1.358,166,2.448,167,2.386,168,1.551,175,1.994,178,2.813,179,0.374,180,2.222,181,3.356,182,2.386,194,1.804,214,1.133,253,2.296,254,1.319,269,1.237,281,0.522,285,1.685,297,2.071,309,1.808,310,2.348,317,0.853,334,1.606,384,2.425,404,2.992,446,1.669,447,1.472,459,1.138,464,1.58,488,1.059,489,2.477,524,1.511,525,2.45,529,3.275,539,2.961,545,2.563,548,1.98,552,3.461,580,1.076,590,1.475,591,1.77,592,3.126,593,1.551,596,0.784,597,1.025,598,1.511,627,1.242,634,2.081,636,1.869,665,1.98,703,2.834,704,2.071,705,1.347,709,3.275,719,0.773,734,1.248,736,1.408,753,1.407,765,3.703,768,2.222,770,2.657,771,2.04,772,2.39,787,0.647,800,1.511,808,3.356,824,0.866,932,3.723,1010,1.44,1054,1.923,1132,1.593,1149,2.386,1164,3.678,1189,1.551,1316,2.04,1357,2.431,1440,3.198,1531,2.514,1532,3.537,1533,1.551,1534,1.593,1535,1.593,1541,1.593,1545,1.593,1549,1.593,1553,1.593,1626,3.537,1627,4.078,1628,3.537,1629,3.537,1630,3.443,1633,5.647,1635,1.133,1640,3.356,1649,2.448,1656,2.448,1662,3.537,1666,2.514,1671,3.124,1672,1.407,1675,1.511,1676,1.551,1681,2.448,1687,2.692,1690,1.511,1691,2.477,1755,3.537,1756,1.593,1840,1.511,1841,1.551,1842,1.551,1843,1.551,1844,1.551,1845,2.448,1846,1.407,1847,1.551,1871,0.437,1876,2.325,1893,1.558,1895,0.762,1928,0.947,1948,0.947,1987,2.215,2000,0.933,2007,1.593,2008,3.959,2009,2.173,2010,4.092,2011,1.638,2012,2.585,2013,2.58,2014,3.678,2015,2.273,2016,1.638,2017,1.377,2018,3.654,2019,3.003,2020,3.537,2021,2.929,2022,2.514,2023,4.772,2024,2.585,2025,3.637,2026,2.514,2027,1.638,2028,1.267,2029,1.593,2030,2.514,2031,1.593,2032,1.593,2033,2.448,2034,1.593,2035,1.593,2036,2.634,2037,2.339,2038,1.593,2039,1.551,2040,1.638,2041,1.593,2042,1.593,2043,1.593,2044,1.638,2045,1.638,2046,1.511,2047,1.377,2048,1.638,2049,2.386,2050,1.638,2051,1.377,2052,1.638,2053,3.443,2054,3.637,2055,3.637,2056,3.057,2057,3.057,2058,2.585,2059,2.514,2060,1.551,2061,1.638,2062,1.638,2224,2.884,2225,2.884,2226,2.884,2227,2.884,2228,2.884,2229,2.884,2230,2.884,2231,2.884,2232,2.884,2233,2.884,2234,2.884,2235,2.884]],["title/interfaces/IGridConfig.html",[40,0.003,133,2.378]],["body/interfaces/IGridConfig.html",[0,0.053,3,0.127,4,0.119,5,0.119,10,0.131,11,0.325,20,0.005,21,0.367,24,0.308,28,0.328,39,0.359,40,0.005,41,0.556,52,1.265,75,0.465,78,0.002,79,0.003,80,0.002,83,2.52,85,0.527,89,1.231,90,0.705,95,3.489,100,1.621,101,4.095,102,2.085,103,3.925,104,2.027,106,3.926,108,0.755,109,2.595,110,1.794,112,3.13,113,2.904,114,1.999,122,2.903,133,3.786,134,0.755,137,4.053,140,1.884,143,2.677,149,0.738,150,2.492,152,1.621,153,2.684,154,1.792,155,3.418,156,1.792,157,1.792,158,2.05,160,1.792,161,1.935,164,1.375,166,2.684,167,2.616,168,1.745,175,1.939,178,2.999,179,0.42,180,2.436,181,3.578,182,2.616,194,1.818,214,1.276,253,2.311,254,1.485,281,0.587,285,1.357,297,1.699,309,1.774,310,2.202,317,0.961,334,1.677,384,2,404,3.189,446,0.846,459,0.812,464,1.231,488,1.191,489,2.672,524,1.629,525,1.853,529,1.66,539,2.839,545,2.457,548,1.88,552,3.189,580,1.211,590,1.66,591,1.566,592,2.968,593,1.745,596,0.882,597,1.153,598,1.701,627,1.398,634,2.142,636,1.916,665,1.543,703,2.693,704,1.967,705,1.477,709,2.552,719,1.337,734,1.105,736,1.543,753,1.584,765,3.259,768,1.584,770,2.832,771,1.455,772,2.27,787,1.12,800,1.701,808,3.578,824,0.975,932,3.352,1010,1.621,1054,2.05,1132,1.792,1149,1.701,1164,3.925,1189,2.684,1316,1.59,1357,1.895,1440,3.409,1531,2.756,1532,3.77,1533,1.745,1534,1.792,1535,1.792,1541,1.792,1545,1.792,1549,1.792,1553,1.792,1626,1.792,1628,1.792,1629,1.792,1630,1.745,1633,5.601,1635,1.276,1640,2.616,1649,1.745,1656,1.745,1662,2.756,1666,1.792,1671,2.725,1672,1.584,1675,1.701,1676,1.745,1681,1.745,1687,2.903,1690,1.701,1691,2.672,1755,2.756,1756,1.792,1840,1.701,1841,1.745,1842,1.745,1843,1.745,1844,1.745,1845,2.684,1846,1.584,1847,1.745,1871,0.492,1876,2.442,1893,1.661,1895,1.319,1928,1.066,1948,1.066,1987,2.364,2000,1.05,2007,1.792,2008,4.185,2009,2.382,2010,4.297,2011,1.843,2012,2.835,2013,2.782,2014,3.826,2015,2.492,2016,1.843,2017,1.549,2018,3.862,2019,3.175,2020,3.77,2021,3.123,2022,2.756,2023,4.922,2024,2.835,2025,3.877,2026,2.756,2027,1.843,2028,1.426,2029,1.792,2030,2.756,2031,1.792,2032,1.792,2033,2.684,2034,1.792,2035,1.792,2036,2.841,2037,2.523,2038,1.792,2039,1.745,2040,1.843,2041,1.792,2042,1.792,2043,1.792,2044,1.843,2045,1.843,2046,1.701,2047,1.549,2048,2.835,2049,2.616,2050,1.843,2051,1.549,2052,1.843,2053,2.684,2054,2.835,2055,2.835,2056,2.382,2057,2.382,2058,1.843,2059,1.792,2060,1.745,2061,1.843,2062,1.843]],["title/interfaces/IHasInnerScale.html",[40,0.003,2174,3.292]],["body/interfaces/IHasInnerScale.html",[3,0.19,4,0.178,5,0.178,10,0.334,11,0.435,12,0.841,13,0.675,20,0.005,24,0.314,28,0.262,34,0.889,39,0.389,40,0.005,41,0.966,42,1.163,47,1.163,75,1.097,78,0.002,79,0.003,80,0.002,95,1.809,97,1.818,108,0.856,110,1.481,117,1.565,124,1.818,126,2.129,132,2.416,134,0.835,140,1.886,161,1.896,164,1.354,175,1.806,178,2.129,179,0.628,183,0.854,192,1.481,222,2.01,225,2.038,227,1.818,245,3.8,280,2.462,281,0.877,285,1.724,309,0.951,326,2.835,334,1.855,336,1.414,337,2.048,368,2.038,379,3.913,441,2.752,576,1.98,757,1.939,759,2.606,760,1.246,770,2.775,772,2.497,774,1.179,776,4.126,798,2.231,839,3.133,882,3.918,1454,1.414,1489,2.365,1499,4.174,1603,2.835,1652,3.597,1654,1.668,1671,2.172,1691,2.939,1782,1.722,1871,0.734,1889,1.694,1892,2.377,1893,2.363,1918,3.09,1981,2.231,2004,2.197,2014,3.06,2017,3.193,2019,2.088,2036,2.264,2037,2.01,2056,2.313,2057,2.313,2089,3.506,2125,4.174,2126,3.023,2127,4.334,2128,3.257,2130,4.623,2131,3.023,2132,3.023,2133,3.133,2134,3.133,2135,3.133,2136,4.351,2137,4.543,2138,3.8,2139,1.434,2140,3.257,2141,3.133,2142,2.925,2143,3.023,2144,3.257,2145,3.257,2146,5.826,2147,3.913,2148,6.418,2149,2.835,2150,3.257,2151,4.496,2152,4.174,2153,2.676,2154,2.835,2155,2.835,2156,4.832,2157,4.82,2158,4.496,2159,2.925,2160,2.925,2161,4.82,2162,2.835,2163,2.835,2164,3.257,2165,3.257,2166,3.133,2167,2.835,2168,4.832,2169,3.257,2170,5.071,2171,2.835,2172,3.257,2173,3.257,2174,4.953,2175,5.552,2176,3.257,2177,3.257]],["title/interfaces/IHighlightStrategy.html",[40,0.003,268,2.978]],["body/interfaces/IHighlightStrategy.html",[0,0.105,3,0.181,4,0.17,5,0.17,10,0.186,12,1.11,13,1.039,17,1.024,19,1.767,20,0.005,21,0.963,22,1.1,24,0.323,28,0.368,34,0.847,38,1.236,39,0.368,40,0.005,41,0.831,52,1.639,53,1.666,78,0.002,79,0.003,80,0.002,89,1.841,90,0.913,102,2.167,107,1.63,124,1.254,134,0.862,140,1.716,149,2.061,155,2.841,159,1.431,164,1.321,175,1.504,179,1.048,194,2.255,209,2.346,210,2.304,214,1.813,218,1.308,240,1.308,247,2.146,253,2.072,255,3.279,263,2.879,268,4.731,269,1.757,270,4.18,272,4.18,273,4.18,281,1.17,285,1.869,290,1.841,292,3.902,293,2.785,294,4.746,295,4.326,296,4.213,297,2.533,299,2.627,302,3.902,303,3.156,305,3.902,306,3.912,309,1.464,317,1.366,327,2.252,328,1.406,331,2.36,332,2.304,333,1.29,336,1.346,337,1.95,580,1.722,636,1.674,719,1.732,734,1.79,777,2.841,782,1.97,787,1.451,802,3.727,959,3.902,1256,2.785,1359,4.034,1525,3.571,1584,2.785,1790,4.122,1791,3.571,1795,3.571,1871,0.699,1880,2.656,1881,2.394,1882,1.493,1893,2.287,1895,1.972,1899,2.335,1914,2.501,1934,2.828,1982,2.156,1987,1.271,2009,2.203,2013,3.895,2021,2.958,2028,3.981,2047,2.203,2063,2.983,2064,2.983,2065,3.101,2066,4.345,2067,4.345,2068,3.672,2069,3.101,2070,5.016,2071,4.345,2072,3.782,2073,3.101,2074,4.656,2075,5.229,2076,3.101,2077,2.879,2078,3.101,2079,2.481,2080,4.345,2081,2.481,2082,4.034,2083,4.18,2084,4.18,2085,4.034,2086,2.983,2087,2.983,2088,3.782,2089,2.418,2090,2.983,2091,4.826,2092,5.016,2093,4.18,2094,2.879,2095,3.101,2096,3.101,2097,3.101,2098,2.879,2099,3.101,2100,3.101,2101,3.101,2102,2.879,2103,4.345,2104,4.18,2105,2.879,2106,3.101,2107,4.345,2108,4.18,2109,2.699,2110,3.101,2111,3.101,2112,2.983,2113,2.983,2114,5.016,2115,3.101,2116,3.101,2117,2.983,2118,2.879,2119,3.101,2120,3.101,2121,3.101,2122,3.101,2123,3.101,2124,2.699,2236,4.614,2237,4.614,2238,4.614]],["title/interfaces/IInteractionCoordinatesPayload.html",[40,0.003,2222,3.422]],["body/interfaces/IInteractionCoordinatesPayload.html",[3,0.277,4,0.26,5,0.26,10,0.286,11,0.557,20,0.005,24,0.269,28,0.277,39,0.374,40,0.005,41,1.024,42,1.701,47,1.701,78,0.004,79,0.004,80,0.004,85,1.15,108,0.66,109,2.363,114,1.748,134,0.797,164,1.31,279,4.084,280,1.796,281,1.282,290,2.267,597,2.517,634,1.678,636,1.467,734,2.113,774,1.724,789,3.066,933,4.144,935,1.872,1871,1.074,1876,2.224,1908,3.624,1910,3.472,1951,2.292,1981,2.363,1997,3.564,2004,2.81,2215,5.499,2216,5.499,2217,5.499,2218,5.999,2219,4.762,2220,4.762,2221,5.75,2222,5.75]],["title/interfaces/IInteractionDataPointEvent.html",[40,0.003,1205,1.933]],["body/interfaces/IInteractionDataPointEvent.html",[3,0.127,4,0.119,5,0.119,10,0.276,11,0.444,12,1.266,13,1.353,20,0.005,21,0.833,24,0.317,28,0.349,33,1.23,34,0.595,35,1.565,36,1.589,37,1.394,39,0.4,40,0.005,41,0.955,42,1.768,47,1.768,57,1.698,75,0.87,78,0.002,79,0.003,80,0.002,83,1.54,85,0.526,89,1.23,90,1.307,97,1.651,102,0.869,104,0.845,108,0.465,114,0.8,117,0.662,129,2.404,134,0.885,140,1.765,149,1.134,158,0.973,159,1.851,164,1.283,179,1.186,183,0.571,194,1.531,209,2.029,218,1.414,225,0.988,234,2.312,240,0.919,241,0.988,247,2.562,250,1.252,253,1.213,280,1.54,281,1.333,283,1.018,285,1.357,290,0.8,299,2.058,309,1.339,310,2.001,328,0.988,333,1.907,334,1.258,368,0.988,380,1.926,384,0.833,399,1.19,411,2.141,417,1.081,439,1.049,443,1.542,444,1.613,446,1.919,447,1.613,453,1.689,455,2.058,459,1.842,464,1.499,465,1.589,476,2.18,524,1.973,525,1.519,530,1.297,531,1.297,532,1.297,533,1.297,539,1.565,541,1.231,545,1.651,547,1.297,548,1.542,553,1.297,557,1.995,561,1.995,571,1.297,572,1.689,575,1.274,576,2.019,589,1.274,591,1.018,595,1.297,596,1.355,599,1.297,634,0.768,636,1.032,665,1.003,703,1.565,704,1.966,705,2.019,719,0.869,720,1.171,734,1.63,736,1.003,738,1.966,741,2.141,744,1.133,752,1.049,760,1.282,766,1.152,774,1.792,782,0.988,787,1.652,789,2.702,798,1.081,812,1.274,817,1.274,823,1.831,824,1.497,825,1.716,827,1.926,879,1.19,921,1.21,935,1.606,994,1.116,1047,1.231,1048,1.297,1049,1.297,1050,1.297,1052,2.311,1054,0.973,1056,1.049,1172,2.207,1187,2.676,1204,1.231,1205,1.893,1222,2.231,1233,1.252,1253,1.171,1255,1.801,1309,2.058,1316,1.589,1418,1.231,1430,2.59,1454,1.455,1599,1.772,1620,1.231,1654,1.716,1679,1.274,1723,1.297,1736,1.21,1767,1.297,1782,2.159,1871,0.491,1872,1.274,1873,1.32,1874,1.995,1875,1.831,1876,1.565,1877,1.297,1878,1.274,1879,1.297,1880,1.065,1881,0.959,1882,1.049,1883,2.431,1884,1.274,1885,1.252,1886,2.719,1887,1.274,1888,1.274,1889,1.133,1890,1.297,1891,1.297,1892,1.772,1893,1.892,1894,1.152,1895,1.803,1896,3.201,1897,1.32,1898,1.893,1899,1.171,1900,2.431,1901,1.32,1902,2.031,1903,1.995,1904,1.995,1905,1.32,1906,1.995,1907,2.347,1908,1.893,1909,1.32,1910,1.133,1911,1.32,1912,1.231,1913,1.231,1914,1.879,1915,1.19,1916,1.32,1917,1.32,1918,0.988,1919,1.32,1920,1.274,1921,1.926,1922,1.995,1923,1.297,1924,1.995,1925,1.32,1926,1.274,1927,1.32,1928,2.554,1929,1.32,1930,1.297,1931,1.32,1932,1.995,1933,1.274,1934,1.133,1935,1.297,1936,1.297,1937,1.32,1938,1.32,1939,1.32,1940,1.32,1941,1.297,1942,2.031,1943,1.32,1944,1.297,1945,1.252,1946,1.32,1947,1.32,1948,1.638,1949,1.861,1950,1.297,1951,1.966,1952,1.32,1953,1.297,1954,1.297,1955,1.32,1956,1.32,1957,1.32,1958,1.297,1959,1.32,1960,1.116,1961,1.21,1962,1.297,1963,1.32,1964,1.32,1965,1.32,1966,1.32,1967,1.274,1968,1.297,1969,1.274,1970,1.274,1971,1.32,1972,2.031,1973,2.729,1974,1.32,1975,1.297,1976,1.32,1977,1.32,1978,1.32,1979,1.32,1980,1.32,1981,1.663,1982,1.081,1983,1.32,1984,1.32,1985,1.893,1986,1.274,1987,1.374,1988,1.274,1989,1.32,1990,1.32,1991,1.893,1992,2.031,1993,1.32,1994,1.32,1995,2.547,1996,1.926,1997,2.547,1998,1.995,1999,1.274,2000,1.049,2001,1.297,2002,1.274,2003,1.252,2004,1.065,2005,1.32,2006,1.133]],["title/interfaces/IInteractionDataPointsEvent.html",[40,0.003,1204,1.933]],["body/interfaces/IInteractionDataPointsEvent.html",[3,0.127,4,0.119,5,0.119,10,0.275,11,0.444,12,1.266,13,1.353,20,0.005,21,0.833,24,0.317,28,0.349,33,1.229,34,0.594,35,1.564,36,1.588,37,1.393,39,0.4,40,0.005,41,0.955,42,1.767,47,1.767,57,1.698,75,0.87,78,0.002,79,0.003,80,0.002,83,1.54,85,0.526,89,1.229,90,1.307,97,1.65,102,0.868,104,0.844,108,0.464,114,0.799,117,0.662,129,2.404,134,0.885,140,1.764,149,1.133,158,0.973,159,1.85,164,1.283,179,1.186,183,0.571,194,1.53,209,2.029,218,1.413,225,0.987,234,2.311,240,0.918,241,0.987,247,2.518,250,1.251,253,1.213,280,1.54,281,1.333,283,1.017,285,1.356,290,0.799,299,2.058,309,1.338,310,2.001,328,0.987,333,1.906,334,1.257,368,0.987,380,1.925,384,0.833,399,1.189,411,1.017,417,1.081,439,2.206,443,1.541,444,1.612,446,1.919,447,1.612,453,2.31,455,2.31,459,1.841,464,1.498,465,1.588,476,2.179,524,1.973,525,1.519,530,1.296,531,1.296,532,1.296,533,1.296,539,1.564,541,1.23,545,1.65,547,1.296,548,1.541,553,1.296,557,1.994,561,1.994,571,1.296,572,1.688,575,1.273,576,2.018,589,1.273,591,1.017,595,1.296,596,1.354,599,1.296,634,0.767,636,1.032,665,1.002,703,1.564,704,1.965,705,2.018,719,0.868,720,1.17,734,1.63,736,1.002,738,1.965,741,2.311,744,1.133,752,1.048,760,1.281,766,1.151,774,1.791,782,0.987,787,1.652,789,2.701,798,1.081,812,1.273,817,1.273,823,1.83,824,1.497,825,1.715,827,1.925,879,1.189,921,1.209,935,1.605,994,1.115,1047,1.23,1048,1.296,1049,1.296,1050,1.296,1052,2.31,1054,0.973,1056,1.048,1172,2.206,1187,2.347,1204,1.892,1205,1.23,1222,2.23,1233,1.251,1253,1.17,1255,1.8,1309,2.058,1316,1.588,1418,1.23,1430,2.589,1454,1.454,1599,1.771,1620,1.23,1654,1.715,1679,1.273,1723,1.296,1736,1.209,1767,1.296,1782,2.158,1871,0.491,1872,1.273,1873,1.32,1874,1.994,1875,1.83,1876,1.564,1877,1.296,1878,1.273,1879,1.296,1880,1.064,1881,0.959,1882,1.048,1883,2.43,1884,1.273,1885,1.251,1886,2.718,1887,1.273,1888,1.273,1889,1.133,1890,1.296,1891,1.296,1892,1.771,1893,1.892,1894,1.151,1895,1.802,1896,3.201,1897,1.32,1898,1.892,1899,1.17,1900,2.43,1901,1.32,1902,2.03,1903,1.994,1904,1.994,1905,1.32,1906,1.994,1907,2.346,1908,1.892,1909,1.32,1910,1.133,1911,1.32,1912,1.23,1913,1.23,1914,1.878,1915,1.189,1916,1.32,1917,1.32,1918,0.987,1919,1.32,1920,1.273,1921,1.925,1922,1.994,1923,1.296,1924,1.994,1925,1.32,1926,1.273,1927,1.32,1928,2.554,1929,1.32,1930,1.296,1931,1.32,1932,1.994,1933,1.273,1934,1.133,1935,1.296,1936,1.296,1937,1.32,1938,1.32,1939,1.32,1940,1.32,1941,1.296,1942,2.03,1943,1.32,1944,1.296,1945,1.251,1946,1.32,1947,1.32,1948,1.637,1949,1.86,1950,1.296,1951,1.965,1952,1.32,1953,1.296,1954,1.296,1955,1.32,1956,1.32,1957,1.32,1958,1.296,1959,1.32,1960,1.115,1961,1.209,1962,1.296,1963,1.32,1964,1.32,1965,1.32,1966,1.32,1967,1.273,1968,1.296,1969,1.273,1970,1.273,1971,1.32,1972,2.03,1973,2.728,1974,1.32,1975,1.296,1976,1.32,1977,1.32,1978,1.32,1979,1.32,1980,1.32,1981,1.662,1982,1.081,1983,1.32,1984,1.32,1985,1.892,1986,1.273,1987,1.373,1988,1.273,1989,1.32,1990,1.32,1991,1.892,1992,2.03,1993,1.32,1994,1.32,1995,2.546,1996,2.346,1997,2.546,1998,1.296,1999,1.273,2000,1.048,2001,1.296,2002,1.273,2003,1.251,2004,1.064,2005,1.32,2006,1.133]],["title/interfaces/IInteractionPayload.html",[40,0.003,1997,1.9]],["body/interfaces/IInteractionPayload.html",[3,0.127,4,0.12,5,0.12,10,0.276,11,0.445,12,1.263,13,1.354,20,0.005,21,0.835,24,0.318,28,0.349,33,1.233,34,0.597,35,1.569,36,1.593,37,1.397,39,0.4,40,0.005,41,0.933,42,1.77,47,1.77,57,1.701,75,0.872,78,0.002,79,0.003,80,0.002,83,1.544,85,0.528,89,1.233,90,1.308,97,1.655,102,0.872,104,0.848,108,0.466,114,0.802,117,0.664,129,2.407,134,0.885,140,1.766,149,1.137,158,0.977,159,1.853,164,1.284,179,1.187,183,0.573,194,1.533,209,2.032,218,1.417,225,0.991,234,2.315,240,0.922,241,0.991,247,2.52,250,1.256,253,1.216,280,1.544,281,1.335,283,1.021,285,1.359,290,0.802,299,2.061,309,1.341,310,2.004,328,0.991,333,1.91,334,1.261,368,0.991,380,1.931,384,0.836,399,1.194,411,1.021,417,1.085,439,1.052,443,1.546,444,1.617,446,1.922,447,1.617,453,1.694,455,2.063,459,1.844,464,1.502,465,1.593,476,2.183,524,1.976,525,1.523,530,1.301,531,1.301,532,1.301,533,1.301,539,1.569,541,1.235,545,1.655,547,1.301,548,1.546,553,1.301,557,2,561,2,571,1.301,572,1.694,575,1.278,576,2.023,589,1.278,591,1.021,595,1.301,596,1.358,599,1.301,634,0.77,636,1.035,665,1.006,703,1.569,704,1.97,705,2.023,719,0.872,720,1.175,734,1.633,736,1.006,738,1.97,741,2.145,744,1.137,752,1.052,760,1.285,766,1.156,774,1.795,782,0.991,787,1.655,789,2.705,798,1.085,812,1.278,817,1.278,823,1.835,824,1.501,825,1.72,827,1.931,879,1.194,921,1.214,935,1.609,994,1.119,1047,1.235,1048,1.301,1049,1.301,1050,1.301,1052,2.315,1054,0.977,1056,1.052,1172,2.777,1187,2.352,1204,1.235,1205,1.235,1222,2.235,1233,1.256,1253,1.175,1255,1.805,1309,2.063,1316,1.593,1418,1.235,1430,2.595,1454,1.458,1599,1.776,1620,1.235,1654,1.72,1679,1.278,1723,1.301,1736,1.214,1767,1.301,1782,2.164,1871,0.493,1872,1.278,1873,1.325,1874,2,1875,1.835,1876,1.569,1877,1.301,1878,1.278,1879,1.301,1880,1.068,1881,0.963,1882,1.052,1883,2.436,1884,1.278,1885,1.256,1886,2.723,1887,1.278,1888,1.278,1889,1.137,1890,1.301,1891,1.301,1892,1.776,1893,1.895,1894,1.156,1895,1.806,1896,3.205,1897,1.325,1898,1.898,1899,1.175,1900,2.436,1901,1.325,1902,2.036,1903,2,1904,2,1905,1.325,1906,2,1907,2.352,1908,1.898,1909,1.325,1910,1.137,1911,1.325,1912,1.235,1913,1.235,1914,1.883,1915,1.194,1916,1.325,1917,1.325,1918,0.991,1919,1.325,1920,1.278,1921,1.931,1922,2,1923,1.301,1924,2,1925,1.325,1926,1.278,1927,1.325,1928,2.558,1929,1.325,1930,1.301,1931,1.325,1932,2,1933,1.278,1934,1.137,1935,1.301,1936,1.301,1937,1.325,1938,1.325,1939,1.325,1940,1.325,1941,1.301,1942,2.036,1943,1.325,1944,1.301,1945,1.256,1946,1.325,1947,1.325,1948,1.642,1949,1.866,1950,1.301,1951,1.97,1952,1.325,1953,1.301,1954,1.301,1955,1.325,1956,1.325,1957,1.325,1958,1.301,1959,1.325,1960,1.119,1961,1.214,1962,1.301,1963,1.325,1964,1.325,1965,1.325,1966,1.325,1967,1.278,1968,1.301,1969,1.278,1970,1.278,1971,1.325,1972,2.036,1973,2.734,1974,1.325,1975,1.301,1976,1.325,1977,1.325,1978,1.325,1979,1.325,1980,1.325,1981,1.668,1982,1.085,1983,1.325,1984,1.325,1985,1.898,1986,1.278,1987,1.378,1988,1.278,1989,1.325,1990,1.325,1991,1.898,1992,2.036,1993,1.325,1994,1.325,1995,2.273,1996,1.931,1997,2.551,1998,1.301,1999,1.278,2000,1.052,2001,1.301,2002,1.278,2003,1.256,2004,1.068,2005,1.325,2006,1.137]],["title/interfaces/IInteractionValues.html",[40,0.003,2218,3.57]],["body/interfaces/IInteractionValues.html",[3,0.276,4,0.259,5,0.259,17,0.966,20,0.005,24,0.267,28,0.276,39,0.373,40,0.005,41,0.95,42,2.046,47,2.046,78,0.004,79,0.004,80,0.004,85,1.143,108,0.794,109,2.348,114,1.737,134,0.854,164,1.308,279,4.548,280,2.161,281,1.543,290,2.35,303,3.437,597,2.502,634,1.667,636,1.458,734,2.109,774,2.074,789,2.843,933,4.119,935,1.861,1871,1.067,1876,2.21,1908,3.236,1910,2.98,1951,2.757,1981,2.843,1997,3.422,2004,3.011,2203,3.786,2215,5.465,2216,5.465,2217,6.616,2218,6.428,2219,4.732,2220,4.732,2221,4.732,2222,4.732,2239,7.041]],["title/interfaces/IInteractionValuesPayload.html",[40,0.003,2220,3.422]],["body/interfaces/IInteractionValuesPayload.html",[3,0.277,4,0.26,5,0.26,10,0.286,11,0.557,20,0.005,24,0.269,28,0.277,39,0.374,40,0.005,41,1.024,42,1.701,47,1.701,78,0.004,79,0.004,80,0.004,85,1.15,108,0.66,109,2.363,114,1.748,134,0.797,164,1.31,279,4.084,280,1.796,281,1.282,290,2.478,597,2.517,634,1.678,636,1.467,734,2.113,774,1.724,789,3.066,933,4.144,935,1.872,1871,1.074,1876,2.224,1908,3.248,1910,2.991,1951,2.292,1981,2.363,1997,3.564,2004,2.81,2215,5.499,2216,5.499,2217,5.499,2218,6.694,2219,5.75,2220,5.75,2221,4.762,2222,4.762]],["title/interfaces/ILineAccessors.html",[40,0.003,2079,2.738]],["body/interfaces/ILineAccessors.html",[0,0.14,3,0.242,4,0.227,5,0.227,7,2.386,8,1.331,10,0.249,11,0.592,12,1.242,13,1.408,14,1.503,16,4.34,17,1.079,20,0.005,21,0.699,23,3.836,24,0.298,28,0.339,29,4.119,30,4.463,31,3.238,32,2.886,33,1.938,34,1.586,37,2.542,38,1.655,39,0.356,40,0.005,41,1.013,52,2.306,53,3.121,54,2.231,55,1.61,57,1.349,72,2.826,73,3.238,74,3.238,75,1.238,76,3.613,77,3.613,78,0.003,79,0.004,80,0.003,94,1.403,107,1.349,110,1.367,124,1.678,132,2.231,134,0.576,144,2.826,159,2.079,184,3.925,241,1.882,281,1.118,455,2.093,757,2.471,774,1.503,777,2.714,802,3.085,809,3.854,815,3.015,932,2.661,1056,2.542,1150,3.085,1394,5.281,1871,1.191,1875,2.885,1880,2.581,1881,2.326,1882,2.542,1951,1.998,1960,2.974,2079,4.647,2081,3.322,2139,1.828,2149,3.613,2240,4.794,2241,6.906,2242,6.906,2243,5.281,2244,5.281,2245,4.794,2246,6.06,2247,3.613,2248,3.613,2249,4.794,2250,4.794,2251,4.794,2252,4.332,2253,4.542,2254,4.794,2255,4.794,2256,4.794,2257,4.332,2258,4.542,2259,4.794,2260,4.794,2261,4.542,2262,4.794,2263,4.794,2264,4.794]],["title/interfaces/ILineDataAccessors.html",[40,0.003,2241,3.743]],["body/interfaces/ILineDataAccessors.html",[0,0.141,3,0.245,4,0.23,5,0.23,7,2.417,8,1.349,10,0.253,11,0.595,12,1.186,13,1.362,14,1.523,16,4.376,17,1.294,20,0.005,21,0.708,22,1.168,23,3.868,24,0.238,28,0.341,29,4.153,30,4.501,31,3.281,32,2.924,33,2.255,34,1.454,37,2.555,38,1.677,39,0.358,40,0.005,41,1.018,52,2.317,53,3.14,54,2.26,55,1.631,57,1.367,72,2.863,73,3.281,74,3.281,75,1.246,76,3.661,77,3.661,78,0.003,79,0.004,80,0.003,94,1.415,107,1.367,110,1.385,124,1.701,132,2.26,134,0.583,144,2.863,159,2.023,184,3.957,241,1.907,281,1.133,455,2.12,757,2.504,774,1.523,777,2.75,802,3.126,809,3.905,815,3.055,932,2.697,1056,2.025,1150,3.126,1394,5.325,1871,1.201,1875,2.298,1880,2.056,1881,1.852,1882,2.025,1951,2.025,1960,2.992,2079,4.261,2081,3.366,2139,1.852,2149,3.661,2240,4.858,2241,6.72,2242,6.393,2243,5.844,2244,5.325,2245,4.858,2246,6.097,2247,3.661,2248,3.661,2249,4.858,2250,4.858,2251,4.858,2252,4.389,2253,4.602,2254,4.858,2255,4.858,2256,4.858,2257,4.389,2258,4.602,2259,4.858,2260,4.858,2261,4.602,2262,4.858,2263,4.858,2264,4.858]],["title/interfaces/ILineRendererConfig.html",[40,0.003,2094,3.176]],["body/interfaces/ILineRendererConfig.html",[0,0.102,3,0.174,4,0.163,5,0.163,10,0.179,11,0.409,12,1.096,13,0.617,20,0.005,21,0.711,22,1.46,24,0.347,28,0.365,34,0.813,38,1.187,39,0.365,40,0.005,41,0.885,52,1.593,53,1.6,78,0.002,79,0.003,80,0.002,85,0.719,89,1.801,90,1.031,102,2.128,107,1.594,124,1.707,134,0.898,140,1.805,149,2.211,155,2.761,159,1.391,164,1.296,179,0.814,194,2.291,209,2.012,210,2.213,214,1.741,218,1.256,240,1.256,247,2.099,253,2.12,255,3.208,263,2.764,268,4.906,281,1.321,285,1.668,290,1.093,292,2.674,293,2.674,294,3.379,295,3.485,296,2.999,297,2.04,299,2.504,302,2.674,305,2.674,306,2.322,309,1.559,317,1.311,327,2.163,328,1.35,331,2.266,332,2.213,333,1.238,336,1.293,337,1.873,580,1.654,636,1.736,719,1.684,734,1.928,777,2.761,782,1.915,787,1.41,802,4.189,959,3.792,1256,2.674,1359,4.555,1525,4.032,1584,2.674,1790,4.032,1791,3.47,1795,3.47,1871,0.671,1880,2.942,1881,2.482,1882,2.032,1893,1.776,1895,1.929,1899,2.269,1914,2.594,1934,3.132,1982,2.096,1987,1.731,2009,2.115,2013,3.985,2021,3.34,2028,4.091,2047,2.999,2063,2.865,2064,2.865,2065,2.978,2066,5.637,2067,5.637,2068,3.569,2069,2.978,2070,5.637,2071,4.906,2072,4.271,2073,2.978,2074,5.233,2075,5.136,2076,2.978,2077,2.764,2078,2.978,2079,2.383,2080,4.223,2081,2.383,2082,3.92,2083,4.062,2084,4.062,2085,3.92,2086,2.865,2087,2.865,2088,3.675,2089,2.322,2090,2.865,2091,5.423,2092,5.637,2093,5.136,2094,3.92,2095,4.223,2096,4.223,2097,4.223,2098,4.956,2099,4.223,2100,4.223,2101,5.339,2102,3.92,2103,4.906,2104,4.72,2105,3.92,2106,5.339,2107,5.339,2108,5.632,2109,3.675,2110,4.223,2111,5.339,2112,2.865,2113,2.865,2114,4.906,2115,2.978,2116,2.978,2117,2.865,2118,2.764,2119,2.978,2120,2.978,2121,2.978,2122,2.978,2123,2.978,2124,2.592]],["title/interfaces/ILineSeriesAccessors.html",[40,0.003,2242,3.743]],["body/interfaces/ILineSeriesAccessors.html",[0,0.139,3,0.237,4,0.222,5,0.222,7,2.338,8,1.304,10,0.244,11,0.587,12,1.174,13,1.394,14,1.473,16,4.284,17,1.175,20,0.005,21,0.685,22,1.33,23,3.786,24,0.294,28,0.335,29,4.066,30,4.406,31,3.172,32,2.828,33,1.913,34,1.423,37,2.776,38,1.622,39,0.354,40,0.005,41,0.954,52,2.493,53,3.506,54,2.186,55,1.577,57,1.322,72,2.769,73,3.172,74,3.172,75,1.293,76,3.54,77,3.54,78,0.003,79,0.004,80,0.003,85,0.983,94,1.385,107,1.322,110,1.34,124,1.645,132,2.186,134,0.723,144,2.769,159,2.066,184,3.874,241,1.844,281,1.404,455,2.05,757,2.421,774,1.887,777,3.408,802,3.023,809,3.776,815,2.954,932,2.608,1056,1.958,1150,3.023,1394,5.213,1871,1.175,1875,2.222,1880,1.988,1881,1.791,1882,1.958,1951,2.509,1960,2.946,2079,4.171,2081,3.255,2139,2.296,2149,3.54,2203,3.255,2240,6.02,2241,6.294,2242,6.638,2243,5.213,2244,5.213,2245,4.698,2246,6.33,2247,4.537,2248,4.537,2249,4.698,2250,4.698,2251,4.698,2252,4.244,2253,4.45,2254,4.698,2255,4.698,2256,4.698,2257,4.244,2258,4.45,2259,4.698,2260,4.698,2261,4.45,2262,4.698,2263,4.698,2264,4.698,2265,5.422]],["title/interfaces/ILinearScales.html",[40,0.003,1941,2.037]],["body/interfaces/ILinearScales.html",[3,0.127,4,0.119,5,0.119,10,0.276,11,0.444,12,1.263,13,1.354,20,0.005,21,0.834,24,0.326,28,0.349,33,1.232,34,0.596,35,1.567,36,1.591,37,1.395,39,0.4,40,0.005,41,0.932,42,2.008,47,2.008,57,1.7,75,0.871,78,0.002,79,0.003,80,0.002,83,1.542,89,1.232,90,1.308,97,1.653,102,0.87,104,0.846,108,0.465,114,0.801,117,0.663,129,2.406,134,0.885,140,1.765,149,1.135,158,0.975,159,1.852,164,1.283,179,1.186,183,0.572,194,1.532,209,2.031,218,1.415,225,0.99,234,2.313,240,0.921,241,0.99,247,2.519,250,1.254,253,1.215,280,1.542,281,1.334,283,1.019,285,1.358,290,0.801,299,2.06,309,1.34,310,2.003,328,0.99,333,1.908,334,1.259,368,0.99,380,1.928,384,0.835,399,1.192,411,1.019,417,1.083,439,1.05,443,1.544,444,1.615,446,1.921,447,1.615,453,1.691,455,2.061,459,1.843,464,1.5,465,1.591,476,2.181,524,1.975,525,1.521,530,1.299,531,1.299,532,1.299,533,1.299,539,1.567,541,1.233,545,1.653,547,1.299,548,1.544,553,1.299,557,1.997,561,1.997,571,1.299,572,1.691,575,1.276,576,2.021,589,1.276,591,1.019,595,1.299,596,1.357,599,1.299,634,0.769,636,1.034,665,1.004,703,1.567,704,1.968,705,2.021,719,0.87,720,1.173,734,1.511,736,1.004,738,1.968,741,2.143,744,1.135,752,1.05,760,1.283,766,1.154,774,1.793,782,0.99,787,1.532,789,2.595,798,1.083,812,1.276,817,1.276,823,1.833,824,1.499,825,1.718,827,1.928,879,1.192,921,1.212,935,1.607,994,1.117,1047,1.233,1048,1.299,1049,1.299,1050,1.299,1052,2.313,1054,0.975,1056,1.05,1172,2.209,1187,2.35,1204,1.233,1205,1.233,1222,2.233,1233,1.254,1253,1.173,1255,1.803,1309,2.061,1316,1.591,1418,1.233,1430,2.592,1454,1.456,1599,1.774,1620,1.233,1654,1.718,1679,1.276,1723,1.299,1736,1.212,1767,1.299,1782,2.161,1871,0.492,1872,1.276,1873,1.323,1874,1.997,1875,1.833,1876,1.567,1877,1.299,1878,1.276,1879,1.299,1880,1.067,1881,0.961,1882,1.05,1883,3.242,1884,1.276,1885,1.254,1886,2.721,1887,1.276,1888,1.276,1889,1.135,1890,1.299,1891,1.299,1892,1.774,1893,1.893,1894,1.154,1895,1.804,1896,3.203,1897,1.323,1898,1.896,1899,1.173,1900,2.433,1901,1.323,1902,2.034,1903,1.997,1904,1.997,1905,1.323,1906,1.997,1907,2.349,1908,1.896,1909,1.323,1910,1.135,1911,1.323,1912,1.233,1913,1.233,1914,1.881,1915,1.192,1916,1.323,1917,1.323,1918,0.99,1919,1.323,1920,1.276,1921,1.928,1922,1.997,1923,1.299,1924,1.997,1925,1.323,1926,1.276,1927,1.323,1928,2.556,1929,1.323,1930,1.299,1931,1.323,1932,1.997,1933,1.276,1934,1.135,1935,1.299,1936,1.299,1937,1.323,1938,1.323,1939,1.323,1940,1.323,1941,1.997,1942,2.034,1943,1.323,1944,1.299,1945,1.254,1946,1.323,1947,1.323,1948,1.64,1949,1.864,1950,1.299,1951,1.968,1952,1.323,1953,1.299,1954,1.299,1955,1.323,1956,1.323,1957,1.323,1958,1.299,1959,1.323,1960,1.117,1961,1.212,1962,1.299,1963,1.323,1964,1.323,1965,1.323,1966,1.323,1967,1.276,1968,1.299,1969,1.276,1970,1.276,1971,1.323,1972,2.034,1973,2.732,1974,1.323,1975,1.299,1976,1.323,1977,1.323,1978,1.323,1979,1.323,1980,1.323,1981,1.665,1982,1.083,1983,1.323,1984,1.323,1985,1.896,1986,1.276,1987,1.376,1988,1.276,1989,1.323,1990,1.323,1991,1.896,1992,2.034,1993,1.323,1994,1.323,1995,2.271,1996,1.928,1997,2.271,1998,1.299,1999,1.276,2000,1.05,2001,1.299,2002,1.276,2003,1.254,2004,1.067,2005,1.323,2006,1.135]],["title/interfaces/IMarkerInteractionConfig.html",[40,0.003,2074,3.176]],["body/interfaces/IMarkerInteractionConfig.html",[0,0.107,3,0.188,4,0.176,5,0.176,10,0.194,11,0.432,12,1.174,13,0.667,20,0.005,21,0.751,22,0.978,24,0.252,28,0.371,34,0.879,38,1.284,39,0.371,40,0.005,41,0.849,52,1.683,53,2.397,78,0.002,79,0.003,80,0.002,85,0.778,89,1.879,90,0.938,102,2.313,107,1.664,124,1.302,134,0.87,140,1.91,149,2.083,155,2.917,159,1.47,164,1.281,179,0.86,194,2.265,209,2.099,210,2.394,214,1.884,218,1.359,240,1.359,247,2.483,253,2.173,255,3.346,263,2.99,268,4.455,281,1.202,285,1.717,290,1.182,292,2.893,293,2.893,294,3.57,295,3.636,296,3.169,297,2.129,299,2.496,302,2.893,305,2.893,306,2.512,309,1.494,317,1.419,327,2.339,328,1.461,331,2.451,332,2.394,333,1.34,336,1.398,337,2.026,580,1.789,636,1.702,719,2.041,734,1.911,777,2.917,782,2.023,787,1.709,802,3.804,959,4.007,1256,2.893,1359,4.142,1525,3.667,1584,2.893,1790,4.541,1791,3.667,1795,3.667,1871,0.726,1880,2.7,1881,2.644,1882,1.55,1893,1.853,1895,2.281,1899,2.75,1914,2.543,1934,2.875,1982,2.214,1987,1.321,2009,2.288,2013,3.95,2021,3.037,2028,4.024,2047,2.288,2063,3.099,2064,3.099,2065,3.221,2066,4.462,2067,4.462,2068,3.771,2069,3.221,2070,5.119,2071,4.462,2072,3.883,2073,3.221,2074,5.13,2075,5.775,2076,3.221,2077,2.99,2078,3.221,2079,2.577,2080,4.462,2081,2.577,2082,4.142,2083,4.292,2084,4.292,2085,4.142,2086,3.099,2087,3.099,2088,3.883,2089,4.31,2090,5.316,2091,4.925,2092,5.119,2093,4.292,2094,2.99,2095,3.221,2096,3.221,2097,3.221,2098,2.99,2099,3.221,2100,3.221,2101,3.221,2102,2.99,2103,4.462,2104,4.292,2105,2.99,2106,3.221,2107,4.462,2108,4.292,2109,2.804,2110,3.221,2111,3.221,2112,3.099,2113,3.099,2114,5.119,2115,3.221,2116,3.221,2117,3.099,2118,2.99,2119,3.221,2120,3.221,2121,3.221,2122,3.221,2123,3.221,2124,2.804]],["title/interfaces/INoopAccessors.html",[40,0.003,2266,3.951]],["body/interfaces/INoopAccessors.html",[0,0.121,3,0.293,4,0.275,5,0.275,7,2.887,8,1.611,10,0.302,11,0.575,12,1.247,13,1.414,14,1.819,20,0.005,24,0.335,28,0.293,34,1.725,38,2.003,39,0.346,40,0.004,41,0.984,56,3.493,72,3.42,75,1.266,78,0.004,79,0.004,80,0.004,94,1.578,159,1.956,1056,2.858,1871,1.133,1875,3.243,1880,2.902,1881,2.615,1882,2.858,2266,7.299,2267,6.698,2268,6.185]],["title/interfaces/IPopoverPluginConfig.html",[40,0.003,1160,3.951]],["body/interfaces/IPopoverPluginConfig.html",[0,0.08,3,0.193,4,0.181,5,0.181,10,0.199,11,0.441,12,0.973,17,0.677,20,0.005,22,1.227,24,0.331,28,0.374,39,0.265,40,0.002,41,0.55,55,2.015,57,1.078,78,0.002,79,0.003,80,0.002,85,0.801,89,1.217,90,1.092,92,3.46,94,1.679,107,1.479,109,2.91,110,1.931,113,1.842,114,2.053,117,1.885,124,1.341,143,1.698,144,2.257,161,1.92,179,0.877,183,0.869,192,1.092,225,2.064,227,2.508,253,1.882,290,1.217,297,2.438,317,1.46,320,2.168,384,1.741,436,2.653,439,2.191,443,2.095,444,1.596,453,2.82,456,4.379,459,2.254,465,2.158,476,2.732,507,2.586,583,2.653,584,2.653,587,2.978,596,1.84,597,1.753,607,2.355,627,2.126,634,1.604,636,1.402,664,2.586,673,2.464,734,1.712,741,1.549,760,1.741,790,2.803,815,2.408,902,3.316,933,3.962,935,1.79,947,4.082,1011,4.082,1030,4.749,1103,7.563,1108,3.628,1123,3.078,1124,3.078,1129,4.082,1134,3.83,1145,3.83,1146,5.382,1147,3.83,1148,4.421,1149,2.586,1150,2.464,1151,4.421,1152,3.628,1153,3.83,1154,3.83,1155,4.082,1156,2.725,1157,4.082,1158,4.082,1159,4.082,1160,6.461,1163,6.003,1164,3.099,1165,4.082,1168,3.83,1169,4.082,1170,4.082,1171,7.218,1172,3.085,1173,2.886,1176,5.257,1181,3.078,1182,3.078,1183,3.83,1184,3.83,1185,3.46,1186,5.257,1187,2.331,1188,5.604,1189,3.642,1190,5.604,1191,6.068,1192,6.068,1193,5.686,1194,3.83,1195,2.978,1196,3.078,1197,3.46,1198,4.421,1199,4.421,1200,3.316,1201,3.46,1202,4.421,1203,3.83,1204,1.873,1205,1.873,1206,3.628,1207,4.421,1208,4.421,1209,4.421,1210,4.421,1211,4.421,1212,4.421,1213,4.421,1214,4.421,1215,4.421,1216,4.421,1217,4.421,1218,4.98,1219,3.628,1220,4.552,1221,3.628,1222,1.811,1223,3.19,1224,6.399,1225,4.421,1226,5.604,1227,4.082,1228,3.628,1229,4.082,1230,3.83,1231,4.421,1232,4.421,1233,1.906,1234,3.628,1235,4.082,1236,4.421,1237,4.421,1238,4.421,1239,4.421,1240,4.421,1241,5.257,1242,3.83,1243,3.83,1244,3.83,1245,4.421,1246,4.421,1247,4.421,1248,4.421,1249,4.421,1250,3.83,1251,6.399,1252,4.379,1253,1.782,1254,4.421,1255,1.782,1256,2.978,1257,4.421,1258,6.003,1259,4.421,1260,4.421,1261,4.421,1262,4.421,1263,4.421,1871,0.748]],["title/interfaces/IPosition.html",[40,0.003,1309,1.725]],["body/interfaces/IPosition.html",[3,0.126,4,0.118,5,0.118,10,0.274,11,0.442,12,1.262,13,1.351,20,0.005,21,0.829,22,1,24,0.337,28,0.348,33,1.22,34,0.589,35,1.553,36,1.576,37,1.383,39,0.399,40,0.005,41,0.928,42,2,47,2,57,1.691,75,0.865,78,0.002,79,0.002,80,0.002,83,1.531,85,0.521,89,1.22,90,1.317,97,1.641,102,0.86,104,0.836,108,0.461,114,0.792,117,0.655,129,2.396,134,0.883,140,1.76,149,1.125,158,0.964,159,1.845,164,1.344,179,1.183,183,0.565,194,1.522,209,2.02,218,1.402,225,0.978,234,2.301,240,0.91,241,0.978,247,2.511,250,1.239,253,1.204,280,1.531,281,1.327,283,1.007,285,1.349,290,0.792,299,2.049,309,1.331,310,1.992,328,0.978,333,1.896,334,1.25,368,0.978,380,1.911,384,0.825,399,1.178,411,1.007,417,1.07,439,1.038,443,1.53,444,1.6,446,1.91,447,1.6,453,1.676,455,2.045,459,1.833,464,1.489,465,1.576,476,2.169,524,1.964,525,1.508,530,1.284,531,1.284,532,1.284,533,1.284,539,1.553,541,1.218,545,1.641,547,1.284,548,1.53,553,1.284,557,1.979,561,1.979,571,1.284,572,1.676,575,1.261,576,2.008,589,1.261,591,1.007,595,1.284,596,1.344,599,1.284,634,1.607,636,1.517,665,0.992,703,1.553,704,1.953,705,2.008,719,0.86,720,1.159,734,1.502,736,0.992,738,1.953,741,2.13,744,1.122,752,1.038,760,1.272,766,1.14,774,1.784,782,0.978,787,1.522,789,2.583,798,1.07,812,1.261,817,1.261,823,1.816,824,1.486,825,1.702,827,1.911,879,1.178,921,1.198,935,1.793,994,1.104,1047,1.218,1048,1.284,1049,1.284,1050,1.284,1052,2.299,1054,0.964,1056,1.038,1172,2.195,1187,2.335,1204,1.218,1205,1.218,1222,2.216,1233,1.239,1253,1.159,1255,1.787,1309,2.299,1316,1.576,1418,1.218,1430,2.576,1454,1.443,1599,1.758,1620,1.218,1654,1.702,1679,1.261,1723,1.284,1736,1.198,1767,1.284,1782,2.145,1871,0.486,1872,1.261,1873,1.307,1874,1.979,1875,1.816,1876,1.553,1877,1.284,1878,1.261,1879,1.284,1880,1.054,1881,0.95,1882,1.038,1883,2.415,1884,1.261,1885,1.239,1886,2.708,1887,1.261,1888,1.261,1889,1.122,1890,1.284,1891,1.284,1892,1.758,1893,1.884,1894,1.14,1895,1.793,1896,3.192,1897,1.307,1898,1.878,1899,1.159,1900,2.415,1901,1.307,1902,2.015,1903,1.979,1904,1.979,1905,1.307,1906,1.979,1907,2.332,1908,1.878,1909,1.307,1910,1.122,1911,1.307,1912,1.218,1913,1.218,1914,1.867,1915,1.178,1916,1.307,1917,1.307,1918,0.978,1919,1.307,1920,1.261,1921,1.911,1922,1.979,1923,1.284,1924,1.979,1925,1.307,1926,1.261,1927,1.307,1928,2.544,1929,1.307,1930,1.284,1931,1.307,1932,1.979,1933,1.261,1934,1.122,1935,1.284,1936,1.284,1937,1.307,1938,1.307,1939,1.307,1940,1.307,1941,1.284,1942,2.015,1943,1.307,1944,1.284,1945,1.239,1946,1.307,1947,1.307,1948,1.625,1949,1.847,1950,1.284,1951,1.953,1952,1.307,1953,1.284,1954,1.284,1955,1.307,1956,1.307,1957,1.307,1958,1.284,1959,1.307,1960,1.104,1961,1.198,1962,1.284,1963,1.307,1964,1.307,1965,1.307,1966,1.307,1967,1.261,1968,1.284,1969,1.261,1970,1.261,1971,1.307,1972,2.015,1973,2.714,1974,1.307,1975,1.284,1976,1.307,1977,1.307,1978,1.307,1979,1.307,1980,1.307,1981,1.65,1982,1.07,1983,1.307,1984,1.307,1985,1.878,1986,1.261,1987,1.363,1988,1.261,1989,1.307,1990,1.307,1991,1.878,1992,2.015,1993,1.307,1994,1.307,1995,2.254,1996,1.911,1997,2.254,1998,1.284,1999,1.261,2000,1.038,2001,1.284,2002,1.261,2003,1.239,2004,1.054,2005,1.307,2006,1.122]],["title/interfaces/IRadialAccessors.html",[40,0.003,2269,3.743]],["body/interfaces/IRadialAccessors.html",[0,0.112,3,0.271,4,0.254,5,0.254,7,2.673,8,1.491,10,0.28,11,0.549,12,1.221,13,1.352,20,0.005,23,3.378,24,0.32,28,0.33,29,4.421,31,3.628,32,3.233,33,2.336,34,1.669,37,2.543,38,1.854,39,0.371,40,0.005,41,0.94,52,2.307,54,2.499,56,3.233,57,1.842,72,3.166,73,3.628,74,3.628,75,1.303,78,0.003,79,0.004,80,0.003,108,0.786,134,0.786,774,2.052,777,3.706,1529,4.853,1871,1.049,1951,2.729,2139,2.496,2247,4.934,2248,4.934,2269,6.69,2270,5.372,2271,7.139,2272,7.139,2273,5.089,2274,5.372]],["title/interfaces/IRadialDataAccessors.html",[40,0.003,2271,3.743]],["body/interfaces/IRadialDataAccessors.html",[0,0.11,3,0.266,4,0.25,5,0.25,7,2.625,8,1.465,10,0.275,11,0.543,12,1.049,13,1.162,17,0.933,20,0.005,22,1.229,23,3.318,24,0.317,28,0.327,29,4.373,31,3.563,32,3.175,33,2.5,34,1.531,37,2.523,38,1.821,39,0.369,40,0.005,41,0.757,52,2.493,54,2.455,56,3.175,57,1.822,72,3.11,73,3.563,74,3.563,75,1.348,78,0.003,79,0.004,80,0.003,108,0.9,134,0.841,774,2.196,777,3.966,1529,4.766,1871,1.03,1951,2.92,2139,2.671,2203,3.655,2247,5.28,2248,5.28,2269,6.134,2270,6.475,2271,6.92,2272,6.637,2273,4.998,2274,5.276,2275,6.797]],["title/interfaces/IRadialRendererConfig.html",[40,0.003,1921,1.966]],["body/interfaces/IRadialRendererConfig.html",[3,0.122,4,0.114,5,0.114,10,0.269,11,0.434,12,1.258,13,1.345,20,0.005,21,0.817,22,1.378,24,0.352,28,0.345,33,1.19,34,0.57,35,1.515,36,1.538,37,1.349,39,0.398,40,0.005,41,0.943,42,1.734,47,1.734,57,1.67,75,0.848,78,0.002,79,0.002,80,0.002,83,1.5,89,1.19,90,1.296,97,1.608,102,1.787,104,0.81,108,0.621,114,0.766,117,0.986,129,2.371,134,0.89,140,1.849,149,1.097,158,0.933,159,1.825,164,1.349,179,1.175,183,0.547,194,1.62,209,1.99,218,1.368,225,0.947,234,2.267,240,1.368,241,0.947,247,2.489,250,1.2,253,1.174,280,1.5,281,1.307,283,0.975,285,1.326,290,0.766,299,2.018,309,1.309,310,1.962,328,0.947,333,1.864,334,1.225,368,0.947,380,1.864,384,0.799,399,1.141,411,0.975,417,1.036,439,1.005,443,1.492,444,1.561,446,1.882,447,1.561,453,1.635,455,2.004,459,1.806,464,1.459,465,1.538,476,2.137,524,1.935,525,1.47,530,1.243,531,1.243,532,1.243,533,1.243,539,1.515,541,1.18,545,1.608,547,1.243,548,1.492,553,1.243,557,1.93,561,1.93,571,1.243,572,1.635,575,1.221,576,1.974,589,1.221,591,0.975,595,1.243,596,1.311,599,1.243,634,0.736,636,1.225,665,0.961,703,1.515,704,1.914,705,1.974,719,0.833,720,1.743,734,1.476,736,0.961,738,1.914,741,2.267,744,1.086,752,1.005,760,1.24,766,1.104,774,1.757,782,0.947,787,1.496,789,2.55,798,1.036,812,1.221,817,1.221,823,1.772,824,1.449,825,1.661,827,1.864,879,1.141,921,1.16,935,1.563,994,1.069,1047,1.18,1048,1.243,1049,1.243,1050,1.243,1052,2.26,1054,0.933,1056,1.005,1172,2.158,1187,2.295,1204,1.18,1205,1.18,1222,2.172,1233,1.2,1253,1.122,1255,1.743,1309,2.004,1316,1.538,1418,1.18,1430,2.532,1454,1.408,1599,1.715,1620,1.18,1654,1.661,1679,1.221,1723,1.243,1736,1.16,1767,1.243,1782,2.102,1871,0.471,1872,1.221,1873,1.266,1874,1.93,1875,1.772,1876,1.515,1877,1.243,1878,1.221,1879,1.243,1880,1.021,1881,0.92,1882,1.005,1883,2.367,1884,1.221,1885,1.2,1886,2.673,1887,1.221,1888,1.221,1889,1.086,1890,1.243,1891,1.243,1892,1.715,1893,1.86,1894,1.104,1895,1.763,1896,3.161,1897,1.266,1898,1.832,1899,1.122,1900,2.367,1901,1.266,1902,1.966,1903,1.93,1904,1.93,1905,1.266,1906,1.93,1907,2.285,1908,1.832,1909,1.266,1910,1.086,1911,1.266,1912,1.18,1913,1.18,1914,2.063,1915,1.141,1916,1.266,1917,1.266,1918,0.947,1919,1.266,1920,1.221,1921,2.285,1922,3.058,1923,2.668,1924,3.058,1925,1.966,1926,1.897,1927,1.966,1928,2.62,1929,1.966,1930,1.93,1931,1.966,1932,3.058,1933,1.897,1934,2.332,1935,2.668,1936,2.668,1937,1.266,1938,1.266,1939,1.266,1940,1.266,1941,1.243,1942,1.966,1943,1.266,1944,1.243,1945,1.2,1946,1.266,1947,1.266,1948,1.585,1949,1.801,1950,1.243,1951,1.914,1952,1.266,1953,1.243,1954,1.243,1955,1.266,1956,1.266,1957,1.266,1958,1.243,1959,1.266,1960,1.069,1961,1.16,1962,1.243,1963,1.266,1964,1.266,1965,1.266,1966,1.266,1967,1.221,1968,1.243,1969,1.221,1970,1.221,1971,1.266,1972,1.966,1973,2.668,1974,1.266,1975,1.243,1976,1.266,1977,1.266,1978,1.266,1979,1.266,1980,1.266,1981,1.61,1982,1.036,1983,1.266,1984,1.266,1985,1.832,1986,1.221,1987,1.33,1988,1.221,1989,1.266,1990,1.266,1991,1.832,1992,1.966,1993,1.266,1994,1.266,1995,2.208,1996,1.864,1997,2.208,1998,1.243,1999,1.221,2000,1.005,2001,1.243,2002,1.221,2003,1.2,2004,1.021,2005,1.266,2006,1.086]],["title/interfaces/IRadialScales.html",[40,0.003,2141,3.292]],["body/interfaces/IRadialScales.html",[3,0.19,4,0.178,5,0.178,10,0.334,11,0.435,12,0.841,13,0.675,20,0.005,24,0.314,28,0.262,34,0.889,39,0.389,40,0.005,41,0.966,42,1.163,47,1.163,75,1.097,78,0.002,79,0.003,80,0.002,95,1.809,97,1.818,108,0.856,110,1.481,117,1.565,124,1.818,126,2.129,132,2.416,134,0.835,140,1.886,161,1.896,164,1.354,175,1.806,178,2.129,179,0.628,183,0.854,192,1.481,222,2.01,225,2.038,227,1.818,245,3.8,280,2.462,281,0.877,285,1.782,309,0.951,326,2.835,334,1.855,336,1.414,337,2.048,368,2.038,379,3.913,441,2.752,576,1.98,757,1.939,759,2.606,760,1.246,770,2.775,772,2.497,774,1.179,776,4.126,798,2.231,839,3.133,882,3.918,1454,1.414,1489,2.365,1499,4.174,1603,2.835,1652,3.597,1654,1.668,1671,2.172,1691,2.939,1782,1.722,1871,0.734,1889,1.694,1892,2.377,1893,2.363,1918,3.09,1981,2.231,2004,2.197,2014,3.06,2017,3.193,2019,2.088,2036,2.264,2037,2.01,2056,2.313,2057,2.313,2089,3.506,2125,4.174,2126,3.023,2127,4.303,2128,3.257,2130,4.623,2131,3.023,2132,3.023,2133,3.133,2134,3.133,2135,3.133,2136,4.351,2137,4.543,2138,3.8,2139,1.434,2140,3.257,2141,4.325,2142,4.985,2143,3.023,2144,3.257,2145,3.257,2146,5.826,2147,3.913,2148,6.418,2149,2.835,2150,3.257,2151,4.496,2152,4.174,2153,2.676,2154,2.835,2155,2.835,2156,4.832,2157,4.82,2158,4.496,2159,2.925,2160,2.925,2161,4.82,2162,2.835,2163,2.835,2164,3.257,2165,3.257,2166,3.133,2167,2.835,2168,4.832,2169,3.257,2170,5.071,2171,2.835,2172,3.257,2173,3.257,2174,4.325,2175,3.257,2176,3.257,2177,3.257]],["title/interfaces/IRadialSeriesAccessors.html",[40,0.003,2272,3.743]],["body/interfaces/IRadialSeriesAccessors.html",[0,0.111,3,0.268,4,0.252,5,0.252,7,2.647,8,1.477,10,0.277,11,0.546,12,1.055,13,1.168,17,0.941,20,0.005,22,1.236,23,3.346,24,0.26,28,0.328,29,4.395,31,3.593,32,3.202,33,2.328,34,1.538,37,2.754,38,1.837,39,0.37,40,0.005,41,0.764,52,2.498,54,2.475,56,3.202,57,1.831,72,3.136,73,3.593,74,3.593,75,1.352,78,0.003,79,0.004,80,0.003,108,0.781,134,0.844,774,2.205,777,3.98,1529,4.806,1871,1.039,1951,2.931,2139,2.681,2203,3.686,2247,5.3,2248,5.3,2269,6.165,2270,6.508,2271,6.661,2272,6.941,2273,5.04,2274,5.32,2276,6.141]],["title/interfaces/IRectangleAccessors.html",[40,0.003,331,2.604]],["body/interfaces/IRectangleAccessors.html",[0,0.115,3,0.277,4,0.26,5,0.26,7,2.736,8,1.527,10,0.286,11,0.557,12,1.229,13,1.361,14,1.724,20,0.005,24,0.325,28,0.277,33,2.542,34,1.686,35,2.996,36,2.726,37,2.569,38,1.898,39,0.389,40,0.005,41,1.106,52,1.796,53,2.558,78,0.004,79,0.004,80,0.004,108,0.66,200,4.024,205,5.122,206,5.551,212,2.995,213,2.995,214,2.784,331,4.701,1861,4.581,1863,4.581,1865,4.581,1867,4.581,1868,4.762,1871,1.074,2277,4.968,2278,4.762,2279,4.762,2280,4.762]],["title/interfaces/IRectangleDataAccessors.html",[40,0.003,206,2.892]],["body/interfaces/IRectangleDataAccessors.html",[0,0.109,3,0.264,4,0.248,5,0.248,7,2.607,8,1.454,10,0.273,11,0.541,12,1.045,13,1.156,14,1.642,20,0.005,22,1.515,24,0.373,28,0.264,33,2.596,34,1.524,35,3.026,36,2.646,37,2.515,38,1.808,39,0.384,40,0.005,41,1.094,52,1.711,53,2.437,78,0.003,79,0.004,80,0.003,108,0.629,200,3.833,205,4.716,206,5.333,212,2.853,213,2.853,214,2.652,331,4.248,1861,6.071,1863,6.071,1865,6.071,1867,6.071,1868,6.31,1871,1.023,2277,4.732,2278,4.536,2279,4.536,2280,6.31]],["title/interfaces/IRectangleSeriesAccessors.html",[40,0.003,205,2.668]],["body/interfaces/IRectangleSeriesAccessors.html",[0,0.114,3,0.276,4,0.259,5,0.259,7,2.723,8,1.519,10,0.285,11,0.555,12,1.073,13,1.188,14,1.715,20,0.005,22,1.404,24,0.324,28,0.276,33,2.54,34,1.565,35,2.991,36,2.922,37,2.805,38,1.889,39,0.388,40,0.005,41,1.105,52,2.416,53,3.442,78,0.004,79,0.004,80,0.004,108,0.657,200,4.004,205,4.995,206,5.209,212,2.98,213,2.98,214,2.771,331,4.362,1861,4.558,1863,4.558,1865,4.558,1867,4.558,1868,4.738,1871,1.068,2277,4.943,2278,4.738,2279,4.738,2280,4.738]],["title/interfaces/IRenderContainers.html",[40,0.003,1982,1.698]],["body/interfaces/IRenderContainers.html",[3,0.127,4,0.119,5,0.119,10,0.246,11,0.325,12,1.263,13,1.353,17,0.445,20,0.005,21,0.946,24,0.308,28,0.349,33,1.231,34,0.595,35,1.566,36,1.59,37,1.395,39,0.4,40,0.005,41,0.932,42,1.769,47,1.769,57,1.699,75,0.871,78,0.002,79,0.003,80,0.002,83,1.542,85,0.527,89,1.231,90,1.308,97,1.652,102,0.87,104,0.846,108,0.465,114,0.801,117,0.663,129,2.405,134,0.891,140,1.765,149,1.135,158,0.975,159,1.852,164,1.283,179,1.186,183,0.572,194,1.531,209,2.03,218,1.415,225,0.989,234,2.313,240,0.92,241,0.989,247,2.519,250,1.253,253,1.214,280,1.542,281,1.334,283,1.019,285,1.357,290,0.801,299,2.059,309,1.339,310,2.002,328,0.989,333,1.908,334,1.259,368,0.989,380,1.928,384,0.834,399,1.191,411,1.019,417,1.082,439,1.05,443,1.543,444,1.614,446,1.92,447,1.614,453,1.691,455,2.06,459,1.842,464,1.5,465,1.59,476,2.181,524,1.974,525,1.521,530,1.298,531,1.298,532,1.298,533,1.298,539,1.566,541,1.232,545,1.855,547,1.298,548,1.543,553,1.298,557,1.997,561,1.997,571,1.298,572,1.691,575,1.276,576,2.02,589,1.276,591,1.019,595,1.298,596,1.356,599,1.298,634,0.769,636,1.033,665,1.004,703,1.566,704,1.967,705,2.475,719,0.87,720,1.172,734,1.511,736,1.004,738,1.967,741,2.143,744,1.135,752,1.05,760,1.283,766,1.153,774,1.893,782,0.989,787,1.531,789,2.595,798,1.082,812,1.276,817,1.276,823,1.832,824,1.499,825,1.717,827,1.928,879,1.191,921,1.211,935,1.607,994,1.117,1047,1.232,1048,1.298,1049,1.298,1050,1.298,1052,2.312,1054,0.975,1056,1.05,1172,2.208,1187,2.349,1204,1.232,1205,1.232,1222,2.232,1233,1.253,1253,1.172,1255,1.802,1309,2.06,1316,1.59,1418,1.232,1430,2.592,1454,1.456,1599,1.773,1620,1.232,1654,1.717,1679,1.276,1723,1.298,1736,1.211,1767,1.298,1782,2.16,1871,0.492,1872,1.276,1873,1.322,1874,1.997,1875,1.832,1876,1.566,1877,1.298,1878,1.276,1879,1.298,1880,1.066,1881,0.961,1882,1.05,1883,2.433,1884,1.276,1885,1.253,1886,2.999,1887,1.276,1888,1.276,1889,1.135,1890,1.298,1891,1.298,1892,1.773,1893,1.893,1894,1.153,1895,1.804,1896,3.202,1897,1.322,1898,1.895,1899,1.172,1900,2.433,1901,1.322,1902,2.033,1903,1.997,1904,1.997,1905,1.322,1906,1.997,1907,2.349,1908,1.895,1909,1.322,1910,1.135,1911,1.322,1912,1.232,1913,1.232,1914,1.88,1915,1.191,1916,1.322,1917,1.322,1918,0.989,1919,1.322,1920,1.276,1921,1.928,1922,1.997,1923,1.298,1924,1.997,1925,1.322,1926,1.276,1927,1.322,1928,2.555,1929,1.322,1930,1.298,1931,1.322,1932,1.997,1933,1.276,1934,1.135,1935,1.298,1936,1.298,1937,1.322,1938,1.322,1939,1.322,1940,1.322,1941,1.298,1942,2.033,1943,1.322,1944,1.298,1945,1.253,1946,1.322,1947,1.322,1948,1.639,1949,1.863,1950,1.298,1951,1.967,1952,1.322,1953,1.298,1954,1.298,1955,1.322,1956,1.322,1957,1.322,1958,1.298,1959,1.322,1960,1.117,1961,1.211,1962,1.298,1963,1.322,1964,1.322,1965,1.322,1966,1.322,1967,1.276,1968,1.298,1969,1.276,1970,1.276,1971,1.322,1972,2.033,1973,2.731,1974,1.322,1975,1.298,1976,1.322,1977,1.322,1978,1.322,1979,1.322,1980,1.322,1981,2.028,1982,1.665,1983,1.322,1984,1.322,1985,1.895,1986,1.276,1987,1.375,1988,1.276,1989,1.322,1990,1.322,1991,1.895,1992,2.033,1993,1.322,1994,1.322,1995,2.27,1996,1.928,1997,2.27,1998,1.298,1999,1.276,2000,1.05,2001,1.298,2002,1.276,2003,1.253,2004,1.066,2005,1.322,2006,1.135,2203,1.745,2281,3.245]],["title/interfaces/IRenderSeries.html",[40,0.003,295,2.43]],["body/interfaces/IRenderSeries.html",[0,0.108,3,0.19,4,0.178,5,0.178,10,0.196,11,0.436,12,1.128,13,0.676,20,0.005,21,0.758,24,0.291,28,0.372,34,0.891,38,1.301,39,0.372,40,0.005,41,0.854,52,1.698,53,1.753,78,0.002,79,0.003,80,0.002,89,1.891,90,0.946,102,2.215,107,1.675,124,1.319,134,0.872,140,1.748,149,2.09,155,2.943,159,1.483,164,1.285,179,0.868,194,2.268,209,2.39,210,2.424,214,1.908,218,2.343,240,1.376,247,2.205,253,2.11,255,3.369,263,3.029,268,4.485,281,1.212,285,1.913,290,1.197,292,2.93,293,2.93,294,3.601,295,3.946,296,3.197,297,2.143,299,2.506,302,2.93,305,2.93,306,2.544,309,1.504,317,1.437,327,2.369,328,1.479,331,2.483,332,2.424,333,1.357,336,1.416,337,2.052,580,1.812,636,1.711,719,1.795,734,1.83,777,2.943,782,2.041,787,1.503,802,3.829,959,4.042,1256,2.93,1359,4.179,1525,3.699,1584,2.93,1790,4.235,1791,3.699,1795,3.699,1871,0.736,1880,2.715,1881,2.447,1882,1.57,1893,1.866,1895,2.026,1899,2.419,1914,2.557,1934,2.89,1982,2.757,1987,1.338,2009,2.317,2013,3.968,2021,3.064,2028,4.038,2047,2.317,2063,3.139,2064,3.139,2065,3.262,2066,4.501,2067,4.501,2068,3.804,2069,3.262,2070,5.153,2071,4.501,2072,3.918,2073,3.262,2074,4.784,2075,5.345,2076,3.262,2077,3.029,2078,3.262,2079,2.61,2080,4.501,2081,2.61,2082,4.179,2083,4.33,2084,4.33,2085,4.179,2086,3.139,2087,3.139,2088,3.918,2089,2.544,2090,3.139,2091,4.958,2092,5.153,2093,4.33,2094,3.029,2095,3.262,2096,3.262,2097,3.262,2098,3.029,2099,3.262,2100,3.262,2101,3.262,2102,3.029,2103,4.501,2104,4.33,2105,3.029,2106,3.262,2107,4.501,2108,4.33,2109,2.84,2110,3.262,2111,3.262,2112,3.139,2113,3.139,2114,5.153,2115,3.262,2116,3.262,2117,3.139,2118,3.029,2119,3.262,2120,3.262,2121,3.262,2122,3.262,2123,3.262,2124,4.836]],["title/interfaces/IRenderStateData.html",[40,0.003,572,1.725]],["body/interfaces/IRenderStateData.html",[3,0.126,4,0.118,5,0.118,10,0.274,11,0.442,12,1.262,13,1.386,20,0.005,21,0.83,22,0.729,24,0.331,28,0.348,33,1.221,34,0.589,35,1.554,36,1.577,37,1.383,39,0.399,40,0.005,41,0.929,42,1.76,47,1.76,57,1.692,75,0.865,78,0.002,79,0.002,80,0.002,83,1.531,85,0.521,89,1.221,90,1.305,97,1.641,102,0.86,104,0.837,108,0.461,114,0.792,117,0.656,129,2.397,134,0.895,140,1.76,149,1.125,158,0.964,159,1.845,164,1.28,179,1.183,183,0.566,194,1.523,209,2.02,218,1.403,225,0.978,234,2.616,240,0.91,241,0.978,247,2.511,250,1.24,253,1.204,280,1.531,281,1.327,283,1.008,285,1.35,290,0.792,299,2.049,309,1.332,310,1.992,328,0.978,333,2.165,334,1.25,368,0.978,380,1.912,384,0.825,399,1.179,411,1.008,417,1.071,439,1.039,443,1.531,444,1.601,446,1.911,447,1.601,453,1.677,455,2.046,459,1.833,464,1.49,465,1.577,476,2.17,524,1.965,525,1.508,530,1.284,531,1.284,532,1.284,533,1.284,539,1.554,541,1.219,545,1.641,547,1.284,548,1.531,553,1.284,557,1.98,561,1.98,571,1.284,572,2.046,575,1.262,576,2.293,589,1.262,591,1.008,595,1.284,596,1.345,599,1.284,634,0.76,636,1.025,665,0.993,703,1.554,704,1.954,705,2.009,719,0.86,720,1.159,734,1.502,736,0.993,738,2.696,741,2.13,744,1.123,752,1.039,760,1.272,766,1.141,774,1.784,782,0.978,787,1.523,789,2.584,798,1.071,812,1.262,817,1.262,823,1.817,824,1.486,825,1.703,827,1.912,879,1.179,921,1.198,935,1.596,994,1.105,1047,1.219,1048,1.284,1049,1.284,1050,1.284,1052,2.299,1054,0.964,1056,1.039,1172,2.196,1187,2.336,1204,1.219,1205,1.219,1222,2.217,1233,1.24,1253,1.159,1255,1.787,1309,2.046,1316,1.577,1418,1.219,1430,2.784,1454,1.444,1599,1.759,1620,1.219,1654,1.703,1679,1.262,1723,1.284,1736,1.198,1767,1.284,1782,2.412,1871,0.487,1872,1.262,1873,1.308,1874,1.98,1875,1.817,1876,1.554,1877,1.284,1878,1.262,1879,1.284,1880,1.055,1881,0.95,1882,1.039,1883,2.416,1884,1.262,1885,1.24,1886,2.914,1887,1.262,1888,1.262,1889,1.123,1890,1.284,1891,1.284,1892,1.759,1893,1.885,1894,1.141,1895,1.794,1896,3.192,1897,1.308,1898,1.879,1899,1.159,1900,2.416,1901,1.308,1902,2.016,1903,1.98,1904,1.98,1905,1.308,1906,1.98,1907,2.333,1908,1.879,1909,1.308,1910,1.123,1911,1.308,1912,1.219,1913,1.219,1914,1.868,1915,1.179,1916,1.308,1917,1.308,1918,0.978,1919,1.308,1920,1.262,1921,1.912,1922,1.98,1923,1.284,1924,1.98,1925,1.308,1926,1.262,1927,1.308,1928,2.544,1929,1.308,1930,1.284,1931,1.308,1932,1.98,1933,1.262,1934,1.123,1935,1.284,1936,1.284,1937,1.308,1938,1.308,1939,1.308,1940,1.308,1941,1.284,1942,2.016,1943,1.308,1944,1.284,1945,1.24,1946,1.308,1947,1.308,1948,1.626,1949,1.848,1950,1.284,1951,1.954,1952,1.308,1953,1.284,1954,1.284,1955,1.308,1956,1.308,1957,1.308,1958,1.284,1959,1.308,1960,1.105,1961,1.198,1962,1.284,1963,1.308,1964,1.308,1965,1.308,1966,1.308,1967,1.262,1968,1.284,1969,1.262,1970,1.262,1971,1.308,1972,2.016,1973,2.715,1974,1.308,1975,1.284,1976,1.308,1977,1.308,1978,1.308,1979,1.308,1980,1.308,1981,1.651,1982,1.071,1983,1.308,1984,1.308,1985,1.879,1986,1.262,1987,1.364,1988,1.262,1989,1.308,1990,1.308,1991,1.879,1992,2.016,1993,1.308,1994,1.308,1995,2.255,1996,1.912,1997,2.255,1998,1.284,1999,1.262,2000,1.039,2001,1.284,2002,1.262,2003,1.24,2004,1.055,2005,1.308,2006,1.123]],["title/interfaces/IRenderStatesIndex.html",[40,0.003,794,3.422]],["body/interfaces/IRenderStatesIndex.html",[0,0.126,3,0.239,4,0.224,5,0.224,8,1.314,13,1.354,17,0.837,20,0.005,21,0.882,24,0.231,28,0.305,34,1.119,39,0.375,40,0.005,75,0.874,78,0.003,79,0.004,80,0.003,90,1.391,94,1.534,108,0.843,124,1.657,134,0.934,158,2.34,164,0.837,175,1.571,179,0.79,183,1.074,192,1.35,194,2.031,234,2.696,279,3.721,280,1.976,283,2.696,333,2.178,334,1.874,394,3.368,411,1.914,432,3.68,459,1.525,464,1.922,482,3.493,572,2.64,576,2.542,597,2.166,731,5.773,732,5.039,733,4.276,734,1.35,735,5.554,736,1.886,737,4.483,738,2.779,739,4.483,740,4.483,741,2.446,742,4.483,744,3.271,752,1.972,753,3.804,754,5.465,755,4.483,756,3.943,757,2.439,758,4.098,759,3.279,760,1.567,761,4.483,762,4.483,763,3.804,764,3.943,765,2.911,766,2.166,767,4.098,768,2.976,769,4.098,770,2.53,771,2.733,772,2.276,773,3.68,774,1.484,775,5.039,776,3.892,777,2.679,778,4.098,779,4.276,780,4.098,781,4.098,782,1.858,783,5.238,784,5.238,785,5.238,786,5.238,787,1.368,788,4.098,789,2.034,790,3.463,791,4.483,792,4.483,793,3.279,794,5.238,1871,0.924,2203,3.279,2282,6.098]],["title/interfaces/IRendererConfig.html",[40,0.003,1914,1.574]],["body/interfaces/IRendererConfig.html",[3,0.125,4,0.118,5,0.118,10,0.274,11,0.441,12,1.261,13,1.357,20,0.005,21,0.828,22,1.227,24,0.337,28,0.348,33,1.217,34,0.587,35,1.549,36,1.572,37,1.379,39,0.399,40,0.005,41,0.927,42,1.757,47,1.757,57,1.689,75,0.863,78,0.002,79,0.002,80,0.002,83,1.527,89,1.217,90,1.304,97,1.637,102,0.857,104,1.765,108,0.46,114,0.789,117,0.653,129,2.394,134,0.883,140,1.86,149,1.122,158,0.96,159,1.843,164,1.3,179,1.182,183,0.563,194,1.52,209,2.017,218,1.399,225,0.975,234,2.297,240,0.907,241,0.975,247,2.509,250,1.235,253,1.201,280,1.717,281,1.325,283,1.004,285,1.347,290,0.789,299,2.045,309,1.329,310,1.989,328,0.975,333,1.893,334,1.247,368,0.975,380,1.906,384,0.822,399,1.174,411,1.004,417,1.067,439,1.034,443,1.526,444,1.596,446,1.907,447,1.596,453,1.672,455,2.041,459,1.83,464,1.486,465,1.572,476,2.166,524,1.961,525,1.504,530,1.279,531,1.279,532,1.279,533,1.279,539,1.549,541,1.214,545,1.637,547,1.279,548,1.526,553,1.279,557,1.974,561,1.974,571,1.279,572,1.672,575,1.257,576,2.005,589,1.257,591,1.004,595,1.279,596,1.341,599,1.279,634,0.757,636,1.021,665,0.989,703,1.549,704,1.949,705,2.005,719,0.857,720,1.155,734,1.499,736,0.989,738,1.949,741,2.126,744,1.118,752,1.034,760,1.268,766,1.136,774,1.781,782,0.975,787,1.52,789,2.58,798,1.067,812,1.257,817,1.257,823,1.811,824,1.482,825,1.698,827,1.906,879,1.174,921,1.194,935,1.592,994,1.101,1047,1.214,1048,1.279,1049,1.279,1050,1.279,1052,2.295,1054,0.96,1056,1.034,1172,2.191,1187,2.331,1204,1.214,1205,1.214,1222,2.212,1233,1.235,1253,1.155,1255,1.782,1309,2.041,1316,1.572,1418,1.214,1430,2.571,1454,1.976,1599,1.753,1620,1.214,1654,1.698,1679,1.257,1723,1.279,1736,1.194,1767,1.279,1782,2.141,1871,0.485,1872,1.257,1873,1.303,1874,1.974,1875,1.811,1876,1.549,1877,1.279,1878,1.257,1879,1.279,1880,1.05,1881,0.946,1882,1.034,1883,2.41,1884,1.257,1885,1.235,1886,2.704,1887,1.257,1888,1.257,1889,1.118,1890,1.279,1891,1.279,1892,1.753,1893,1.882,1894,1.136,1895,1.79,1896,3.188,1897,1.303,1898,1.873,1899,1.155,1900,2.41,1901,1.303,1902,2.01,1903,1.974,1904,1.974,1905,1.303,1906,1.974,1907,2.327,1908,1.873,1909,1.303,1910,1.118,1911,1.303,1912,1.214,1913,1.214,1914,2.095,1915,2.487,1916,2.759,1917,2.01,1918,1.504,1919,2.01,1920,2.662,1921,1.906,1922,1.974,1923,1.279,1924,1.974,1925,1.303,1926,1.257,1927,1.303,1928,2.54,1929,1.303,1930,1.279,1931,1.303,1932,1.974,1933,1.257,1934,1.118,1935,1.279,1936,1.279,1937,1.303,1938,1.303,1939,1.303,1940,1.303,1941,1.279,1942,2.01,1943,1.303,1944,1.279,1945,1.235,1946,1.303,1947,1.303,1948,1.621,1949,1.842,1950,1.279,1951,1.949,1952,1.303,1953,1.279,1954,1.279,1955,1.303,1956,1.303,1957,1.303,1958,1.279,1959,1.303,1960,1.101,1961,1.194,1962,1.279,1963,1.303,1964,1.303,1965,1.303,1966,1.303,1967,1.257,1968,1.279,1969,1.257,1970,1.257,1971,1.303,1972,2.01,1973,2.71,1974,1.303,1975,1.279,1976,1.303,1977,1.303,1978,1.303,1979,1.303,1980,1.303,1981,1.646,1982,1.067,1983,1.303,1984,1.303,1985,1.873,1986,1.257,1987,1.36,1988,1.257,1989,1.303,1990,1.303,1991,1.873,1992,2.01,1993,1.303,1994,1.303,1995,2.249,1996,1.906,1997,2.249,1998,1.279,1999,1.257,2000,1.034,2001,1.279,2002,1.257,2003,1.235,2004,1.05,2005,1.303,2006,1.118]],["title/interfaces/IRendererEventPayload.html",[40,0.003,328,1.551]],["body/interfaces/IRendererEventPayload.html",[3,0.126,4,0.119,5,0.119,10,0.275,11,0.443,12,1.275,13,1.352,20,0.005,21,0.878,24,0.325,28,0.349,33,1.226,34,0.592,35,1.56,36,1.583,37,1.389,39,0.399,40,0.005,41,0.93,42,1.764,47,1.764,57,1.695,75,0.868,78,0.002,79,0.002,80,0.002,83,1.536,85,0.524,89,1.226,90,1.306,97,1.646,102,0.865,104,0.841,108,0.463,114,0.796,117,0.659,129,2.401,134,0.895,140,1.763,149,1.13,158,0.969,159,1.848,164,1.282,179,1.185,183,0.569,194,1.527,209,2.025,218,1.409,225,0.983,234,2.307,240,0.915,241,0.983,247,2.597,250,1.246,253,1.209,280,1.536,281,1.33,283,1.013,285,1.353,290,0.796,299,2.054,309,1.335,310,1.997,328,1.514,333,1.902,334,1.254,368,0.983,380,1.919,384,0.829,399,2.498,411,1.013,417,1.076,439,1.044,443,1.537,444,1.607,446,1.915,447,1.607,453,1.683,455,2.053,459,1.941,464,1.495,465,1.583,476,2.175,524,1.969,525,1.514,530,1.291,531,1.291,532,1.291,533,1.291,539,1.56,541,1.225,545,1.646,547,1.291,548,1.537,553,1.291,557,1.988,561,1.988,571,1.291,572,1.683,575,1.268,576,2.014,589,1.268,591,1.013,595,1.291,596,1.35,599,1.291,634,0.764,636,1.029,665,0.998,703,1.56,704,1.96,705,2.014,719,0.865,720,1.165,734,1.507,736,0.998,738,1.96,741,2.136,744,1.128,752,1.044,760,1.277,766,1.147,774,1.788,782,0.983,787,1.649,789,2.697,798,1.076,812,1.268,817,1.268,823,1.824,824,1.492,825,1.71,827,1.919,879,1.185,921,1.205,935,1.601,994,1.11,1047,1.225,1048,1.291,1049,1.291,1050,1.291,1052,2.306,1054,0.969,1056,1.044,1172,2.201,1187,2.342,1204,1.225,1205,1.225,1222,2.224,1233,1.246,1253,1.165,1255,1.794,1309,2.053,1316,1.583,1418,1.225,1430,2.79,1454,1.449,1599,1.765,1620,1.225,1654,1.71,1679,1.268,1723,1.291,1736,1.205,1767,1.291,1782,2.153,1871,0.489,1872,1.268,1873,1.314,1874,1.988,1875,1.824,1876,1.56,1877,1.291,1878,1.268,1879,1.291,1880,1.06,1881,0.955,1882,1.044,1883,2.424,1884,1.268,1885,1.246,1886,2.714,1887,1.268,1888,1.268,1889,1.128,1890,1.291,1891,1.291,1892,1.765,1893,2.031,1894,1.147,1895,1.798,1896,3.197,1897,1.314,1898,1.886,1899,1.165,1900,2.424,1901,1.314,1902,2.024,1903,1.988,1904,1.988,1905,1.314,1906,1.988,1907,2.34,1908,1.886,1909,1.314,1910,1.128,1911,1.314,1912,1.225,1913,1.225,1914,1.874,1915,1.185,1916,1.314,1917,1.314,1918,0.983,1919,1.314,1920,1.268,1921,1.919,1922,1.988,1923,1.291,1924,1.988,1925,1.314,1926,1.268,1927,1.314,1928,2.549,1929,1.314,1930,1.291,1931,1.314,1932,1.988,1933,1.268,1934,1.128,1935,1.291,1936,1.291,1937,1.314,1938,1.314,1939,1.314,1940,1.314,1941,1.291,1942,2.024,1943,1.314,1944,1.291,1945,1.246,1946,1.314,1947,1.314,1948,1.632,1949,1.855,1950,1.291,1951,1.96,1952,1.314,1953,1.291,1954,1.291,1955,1.314,1956,1.314,1957,1.314,1958,1.291,1959,1.314,1960,1.11,1961,1.205,1962,1.291,1963,1.314,1964,1.314,1965,1.314,1966,1.314,1967,1.268,1968,1.291,1969,1.268,1970,1.268,1971,1.314,1972,2.024,1973,2.723,1974,1.314,1975,1.291,1976,1.314,1977,1.314,1978,1.314,1979,1.314,1980,1.314,1981,1.657,1982,1.076,1983,1.314,1984,1.314,1985,1.886,1986,1.268,1987,1.369,1988,1.268,1989,1.314,1990,1.314,1991,1.886,1992,2.024,1993,1.314,1994,1.314,1995,2.54,1996,1.919,1997,2.262,1998,1.291,1999,1.268,2000,1.044,2001,1.291,2002,1.268,2003,1.246,2004,1.06,2005,1.314,2006,1.128]],["title/interfaces/IScale.html",[40,0.003,2127,2.237]],["body/interfaces/IScale.html",[3,0.152,4,0.143,5,0.143,10,0.302,11,0.372,12,0.72,13,0.542,17,1.291,19,1.973,20,0.005,21,0.943,22,1.386,24,0.366,28,0.224,34,0.714,39,0.375,40,0.005,41,0.833,42,0.934,47,0.934,75,1.071,78,0.002,79,0.003,80,0.002,85,1.353,95,1.453,97,1.554,108,0.885,110,1.656,117,1.386,124,2.032,126,1.71,132,2.701,134,0.823,140,1.97,161,2.12,164,1.361,175,1.915,178,2.513,179,0.741,183,0.686,192,1.266,222,1.614,225,1.743,227,1.554,245,4.248,269,1.554,280,2.448,281,1.036,285,1.657,309,0.764,326,2.276,334,1.725,336,1.135,337,1.645,368,1.743,379,4.375,441,3.249,576,1.693,757,1.557,759,2.093,760,1.922,770,3.103,772,2.792,774,0.947,776,3.735,798,1.908,839,2.516,882,3.469,1454,1.135,1489,2.792,1499,4.666,1603,2.276,1652,4.022,1654,1.339,1671,1.744,1691,2.513,1782,2.033,1871,0.59,1889,1.361,1892,2.033,1893,2.403,1918,3.147,1981,1.908,2004,1.879,2014,3.421,2017,3.57,2019,2.465,2036,1.818,2037,1.614,2056,2.731,2057,2.731,2089,3.92,2125,3.569,2126,2.428,2127,4.085,2128,2.615,2130,4.809,2131,2.428,2132,2.428,2133,2.516,2134,2.516,2135,2.516,2136,5.019,2137,4.727,2138,4.248,2139,1.152,2140,2.615,2141,2.516,2142,2.348,2143,4.666,2144,2.615,2145,2.615,2146,6.163,2147,4.874,2148,6.55,2149,3.347,2150,5.026,2151,5.026,2152,4.666,2153,3.16,2154,4.375,2155,4.375,2156,5.169,2157,5.058,2158,5.026,2159,3.453,2160,3.453,2161,5.192,2162,3.347,2163,3.347,2164,3.845,2165,3.845,2166,3.699,2167,3.347,2168,5.364,2169,3.845,2170,5.605,2171,3.347,2172,2.615,2173,2.615,2174,3.699,2175,2.615,2176,2.615,2177,2.615,2283,4.012,2284,4.206,2285,4.012,2286,3.891,2287,3.891,2288,3.891,2289,3.891,2290,3.891,2291,3.891,2292,3.891,2293,3.891,2294,3.891,2295,3.891,2296,3.891,2297,3.891]],["title/interfaces/IScaleSVGElement.html",[40,0.003,2298,4.561]],["body/interfaces/IScaleSVGElement.html",[0,0.031,3,0.075,4,0.071,5,0.071,8,0.414,10,0.172,11,0.212,12,0.242,13,0.268,17,0.584,20,0.005,24,0.124,28,0.352,39,0.075,40,0.002,41,0.214,42,1.644,47,1.913,55,2.286,57,0.929,59,1.125,75,1.023,78,0.001,79,0.002,80,0.001,83,1.65,85,0.312,87,2.111,89,1.049,90,0.601,94,1.551,95,3.69,96,0.783,103,0.88,104,1.109,106,1.907,107,0.42,110,1.351,111,1.244,112,1.936,113,1.588,114,1.237,117,1.837,118,1.244,122,0.918,124,2.425,126,1.435,129,1.442,132,2.35,134,0.769,137,1.463,140,0.857,143,2.356,144,0.88,146,1.869,148,2.701,149,0.967,152,2.504,153,1.034,155,0.845,161,1.845,164,1.044,167,3.411,168,3.499,175,0.857,178,2.467,179,0.249,180,2.979,181,1.008,182,1.008,183,0.339,184,3.25,192,2.137,194,1.125,222,1.355,227,2.742,254,0.88,279,1.559,280,2.244,281,0.908,285,0.997,308,1.293,309,1.102,310,0.523,315,1.244,316,1.244,320,0.845,333,0.538,334,0.881,336,1.898,337,0.813,339,1.293,368,0.586,369,1.591,396,1.244,418,1.161,446,0.501,460,1.414,464,0.805,476,1.259,524,1.744,529,0.984,539,1.763,541,3.414,545,1.861,548,1.316,552,1.525,572,1.106,580,1.872,581,1.161,583,1.034,584,1.034,585,1.493,586,1.414,596,1.526,597,0.683,607,2.031,620,2.701,630,1.723,634,1.007,635,1.493,636,1.162,646,1.723,664,1.711,665,1.01,673,3.895,705,0.569,752,0.622,760,1.899,766,1.16,771,0.862,787,1.536,808,1.008,824,0.98,825,1.464,872,5.468,935,0.863,949,2.401,966,2.925,967,1.723,1030,2.983,1203,1.493,1223,2.751,1251,1.591,1252,1.244,1279,3.242,1307,1.414,1308,1.349,1357,0.73,1376,1.591,1454,1.463,1533,1.756,1630,1.756,1635,0.756,1649,1.034,1652,1.034,1656,1.756,1669,1.293,1670,1.244,1671,1.907,1672,0.939,1690,1.008,1691,0.845,1703,1.723,1706,1.723,1707,3.812,1708,3.812,1709,2.925,1712,1.723,1713,1.723,1730,1.723,1739,1.723,1740,3.812,1743,1.723,1748,1.723,1753,1.723,1754,1.723,1790,2.35,1815,3.812,1817,2.925,1846,0.939,1871,0.291,1878,1.283,1888,0.756,1895,0.863,1918,0.586,1930,0.769,1999,2.207,2002,0.756,2004,2.005,2006,0.672,2014,1.946,2023,1.803,2031,4.081,2032,2.35,2033,2.288,2036,3.335,2037,0.798,2043,1.062,2046,1.711,2049,2.943,2051,0.918,2060,3.682,2082,4.61,2102,1.2,2125,1.2,2127,2.467,2139,0.569,2257,1.349,2298,4.492,2299,1.923,2300,1.923,2301,3.265,2302,3.265,2303,4.254,2304,4.254,2305,5.014,2306,3.265,2307,1.923,2308,1.923,2309,1.923,2310,1.923,2311,1.723,2312,2.925,2313,1.723,2314,1.923,2315,3.265,2316,1.923,2317,2.401,2318,1.723,2319,1.923,2320,1.591,2321,1.591,2322,1.923,2323,2.534,2324,2.925,2325,2.534,2326,3.265,2327,1.923,2328,1.923,2329,1.923,2330,1.923,2331,1.923,2332,1.923,2333,1.923,2334,1.923,2335,3.265,2336,3.265,2337,1.923,2338,1.923,2339,1.923,2340,1.923,2341,1.414,2342,1.923,2343,1.923,2344,1.923,2345,4.254,2346,1.923,2347,1.923,2348,1.923,2349,4.254,2350,1.923,2351,1.923,2352,1.923,2353,3.265,2354,1.923,2355,1.923,2356,1.923,2357,3.265,2358,5.83,2359,1.923,2360,1.923,2361,4.254,2362,6.104,2363,6.508,2364,1.923,2365,5.615,2366,1.923,2367,3.265,2368,3.265,2369,1.923,2370,1.923,2371,1.923,2372,3.265,2373,1.923,2374,3.265,2375,1.923,2376,1.923,2377,5.014,2378,1.923,2379,1.923,2380,1.923,2381,2.701,2382,1.923,2383,3.265,2384,1.923,2385,1.923,2386,1.923,2387,1.923,2388,1.923,2389,3.265,2390,1.923,2391,1.923,2392,1.923,2393,1.923,2394,3.265,2395,1.923,2396,1.923,2397,1.923,2398,1.923,2399,1.923,2400,1.923,2401,1.923,2402,3.265,2403,1.923,2404,1.923,2405,1.414,2406,3.265,2407,1.923,2408,1.923,2409,4.254,2410,1.923,2411,1.923,2412,1.923,2413,1.923,2414,1.923,2415,1.923,2416,3.265,2417,1.923,2418,1.923,2419,1.923,2420,4.254,2421,3.265,2422,1.923,2423,1.923,2424,1.923,2425,1.923,2426,3.812,2427,1.923,2428,3.265,2429,1.923,2430,4.254,2431,1.923,2432,1.923,2433,1.923,2434,1.923,2435,3.265,2436,1.923,2437,1.923,2438,3.265,2439,1.923,2440,1.923,2441,1.923,2442,1.923,2443,1.923,2444,1.923,2445,1.923,2446,1.923,2447,1.923,2448,1.923,2449,4.646,2450,1.923,2451,1.591,2452,1.923,2453,1.923,2454,1.923,2455,1.923,2456,1.923,2457,1.923,2458,1.923,2459,1.923,2460,1.923,2461,1.923,2462,5.014,2463,1.591,2464,1.923,2465,3.812,2466,4.646,2467,1.923,2468,1.923,2469,1.923,2470,1.923,2471,1.923,2472,1.923,2473,3.265,2474,1.723,2475,1.923,2476,5.014,2477,1.923,2478,1.923,2479,1.923,2480,1.591,2481,3.265,2482,3.265,2483,1.923,2484,1.923,2485,1.923,2486,1.923,2487,1.923,2488,3.265,2489,1.923,2490,1.923,2491,3.265,2492,3.265,2493,1.923,2494,1.923,2495,1.923,2496,1.923,2497,1.923,2498,1.923,2499,1.923,2500,1.923,2501,1.923,2502,1.923,2503,1.923,2504,1.923,2505,1.923,2506,1.923,2507,1.923,2508,1.923,2509,1.923,2510,1.923,2511,1.923,2512,1.923,2513,3.265,2514,1.923,2515,1.923,2516,4.254,2517,4.254,2518,1.414,2519,1.923,2520,1.923,2521,1.923,2522,2.701,2523,1.591,2524,1.923,2525,1.923,2526,1.923,2527,4.254,2528,1.923,2529,1.923,2530,1.923,2531,1.923,2532,1.923,2533,1.923,2534,1.923,2535,1.923,2536,1.923,2537,6.848,2538,1.923,2539,3.265,2540,3.265,2541,3.265,2542,1.923,2543,3.265,2544,1.923,2545,1.591,2546,1.923,2547,1.923,2548,1.923,2549,5.014,2550,5.014,2551,5.014,2552,1.923,2553,5.014,2554,1.923,2555,4.254,2556,1.923,2557,5.014,2558,1.923,2559,1.923,2560,1.923,2561,1.923,2562,1.923,2563,3.265,2564,5.014,2565,1.923,2566,1.923,2567,1.923,2568,3.265,2569,3.265,2570,3.265,2571,3.265,2572,5.014,2573,1.923,2574,1.923,2575,1.923,2576,3.265,2577,3.265,2578,3.265,2579,1.923,2580,4.254,2581,1.923,2582,1.923,2583,1.923,2584,1.923,2585,1.923,2586,1.923,2587,1.923,2588,1.923,2589,1.923,2590,1.923,2591,3.265,2592,4.254,2593,1.923,2594,1.923,2595,3.265,2596,3.265,2597,1.923,2598,3.265,2599,1.414,2600,1.923,2601,1.723,2602,1.923,2603,1.923,2604,1.923,2605,1.923,2606,1.923,2607,3.265,2608,1.923,2609,1.923,2610,1.923,2611,1.923,2612,1.923,2613,1.923,2614,1.923,2615,1.923,2616,1.923,2617,1.923,2618,1.923,2619,1.923,2620,1.923,2621,1.923,2622,5.615,2623,7.607,2624,7.324,2625,1.923,2626,1.923,2627,1.923,2628,3.265,2629,1.923,2630,1.923,2631,3.265,2632,1.923,2633,1.923,2634,1.923,2635,3.265,2636,1.923,2637,1.923,2638,1.723,2639,3.265,2640,1.923,2641,4.254,2642,1.923,2643,1.923,2644,1.923,2645,1.923,2646,1.923,2647,1.923,2648,1.923,2649,3.265,2650,5.014,2651,6.508,2652,1.923,2653,1.923,2654,1.923,2655,1.923,2656,2.925,2657,4.254,2658,1.923,2659,1.923,2660,1.923,2661,1.923,2662,1.923,2663,3.265,2664,1.923,2665,1.923,2666,1.723,2667,1.923,2668,1.923,2669,3.265,2670,1.923,2671,3.265,2672,1.923,2673,1.923,2674,1.923,2675,1.923,2676,3.265,2677,1.923,2678,3.265,2679,1.923,2680,1.923,2681,1.923,2682,1.923,2683,1.923,2684,1.923,2685,1.923,2686,1.923,2687,1.923,2688,1.923,2689,1.923,2690,3.265,2691,5.615,2692,1.923,2693,1.923,2694,1.923,2695,1.923,2696,1.923,2697,1.923,2698,1.923,2699,1.923,2700,1.923,2701,1.923,2702,1.923,2703,1.923,2704,1.923,2705,3.265,2706,1.923,2707,1.923,2708,1.923,2709,1.923,2710,1.923,2711,1.923,2712,1.923,2713,1.923,2714,1.923,2715,3.265,2716,3.265,2717,2.194,2718,3.265,2719,3.265,2720,1.923,2721,1.923,2722,1.923,2723,1.923,2724,1.923,2725,1.923,2726,3.265,2727,1.923,2728,1.923,2729,1.923,2730,1.923,2731,1.923,2732,4.254,2733,4.254,2734,1.923,2735,1.923,2736,1.923,2737,1.923,2738,1.923,2739,1.923,2740,1.923,2741,1.923,2742,1.923,2743,1.923,2744,1.923,2745,1.723,2746,1.923,2747,1.723,2748,1.723,2749,1.923,2750,1.923,2751,1.923,2752,1.923,2753,1.923,2754,1.923,2755,1.923,2756,1.923,2757,1.923,2758,1.923,2759,1.723,2760,1.923,2761,1.923,2762,1.723,2763,1.923,2764,1.923,2765,1.493,2766,1.923,2767,4.254,2768,1.923,2769,1.923,2770,1.923,2771,1.923,2772,1.923,2773,1.723,2774,2.925,2775,1.923,2776,1.923,2777,1.923,2778,1.923,2779,1.923,2780,1.923,2781,1.923,2782,1.923,2783,1.923,2784,1.923]],["title/interfaces/ISeriesAccessors.html",[36,1.622,40,0.003]],["body/interfaces/ISeriesAccessors.html",[3,0.128,4,0.12,5,0.12,10,0.246,11,0.326,12,1.264,13,1.354,17,0.448,20,0.005,21,0.836,24,0.308,28,0.35,33,1.236,34,0.599,35,1.573,36,1.944,37,1.706,39,0.4,40,0.005,41,0.934,42,1.773,47,1.773,57,1.703,75,0.981,78,0.002,79,0.003,80,0.002,83,1.547,89,1.236,90,1.309,97,1.658,102,0.875,104,0.851,108,0.467,114,0.805,117,0.667,129,2.41,134,0.892,140,1.768,149,1.14,158,0.98,159,1.855,164,1.284,179,1.188,183,0.575,194,1.536,209,2.036,218,1.421,225,0.995,234,2.319,240,0.925,241,0.995,247,2.523,250,1.261,253,1.22,280,1.547,281,1.337,283,1.025,285,1.361,290,0.805,299,2.065,309,1.343,310,2.007,328,0.995,333,1.914,334,1.263,368,0.995,380,1.936,384,0.839,399,1.198,411,1.025,417,1.089,439,1.056,443,1.55,444,1.621,446,1.925,447,1.621,453,1.698,455,2.067,459,1.847,464,1.505,465,1.597,476,2.186,524,1.979,525,1.527,530,1.306,531,1.306,532,1.306,533,1.306,539,1.573,541,1.239,545,1.658,547,1.306,548,1.55,553,1.306,557,2.005,561,2.005,571,1.306,572,1.698,575,1.283,576,2.026,589,1.283,591,1.025,595,1.306,596,1.362,599,1.306,634,0.773,636,1.038,665,1.009,703,1.573,704,1.974,705,2.026,719,0.875,720,1.179,734,1.516,736,1.009,738,1.974,741,2.149,744,1.141,752,1.056,760,1.288,766,1.16,774,1.897,782,0.995,787,1.536,789,2.601,798,1.089,812,1.283,817,1.283,823,1.84,824,1.505,825,1.725,827,1.936,879,1.198,921,1.218,935,1.613,994,1.123,1047,1.239,1048,1.306,1049,1.306,1050,1.306,1052,2.319,1054,0.98,1056,1.056,1172,2.215,1187,2.356,1204,1.239,1205,1.239,1222,2.24,1233,1.261,1253,1.179,1255,1.81,1309,2.067,1316,1.597,1418,1.239,1430,2.599,1454,1.462,1599,1.781,1620,1.239,1654,1.725,1679,1.283,1723,1.306,1736,1.218,1767,1.306,1782,2.168,1871,0.495,1872,1.283,1873,1.33,1874,2.005,1875,1.84,1876,1.573,1877,1.306,1878,1.283,1879,1.306,1880,1.072,1881,0.966,1882,1.056,1883,2.441,1884,1.283,1885,1.261,1886,2.726,1887,1.283,1888,1.283,1889,1.141,1890,1.306,1891,1.306,1892,1.781,1893,1.897,1894,1.16,1895,1.809,1896,3.208,1897,1.33,1898,1.903,1899,1.179,1900,2.441,1901,1.33,1902,2.042,1903,2.005,1904,2.005,1905,1.33,1906,2.005,1907,2.357,1908,1.903,1909,1.33,1910,1.141,1911,1.33,1912,1.239,1913,1.239,1914,1.887,1915,1.198,1916,1.33,1917,1.33,1918,0.995,1919,1.33,1920,1.283,1921,1.936,1922,2.005,1923,1.306,1924,2.005,1925,1.33,1926,1.283,1927,1.33,1928,2.561,1929,1.33,1930,1.306,1931,1.33,1932,2.005,1933,1.283,1934,1.141,1935,1.306,1936,1.306,1937,1.33,1938,1.33,1939,1.33,1940,1.33,1941,1.306,1942,2.042,1943,1.33,1944,1.306,1945,1.261,1946,1.33,1947,1.33,1948,1.646,1949,1.871,1950,1.306,1951,1.974,1952,1.33,1953,1.306,1954,1.306,1955,1.33,1956,1.33,1957,1.33,1958,1.306,1959,1.33,1960,1.123,1961,1.218,1962,1.306,1963,1.33,1964,1.33,1965,1.33,1966,1.33,1967,1.283,1968,1.306,1969,1.283,1970,1.283,1971,1.33,1972,2.042,1973,2.739,1974,1.33,1975,1.306,1976,1.33,1977,1.33,1978,1.33,1979,1.33,1980,1.33,1981,1.672,1982,1.089,1983,1.33,1984,1.33,1985,1.903,1986,1.283,1987,1.381,1988,1.283,1989,1.33,1990,1.33,1991,1.903,1992,2.042,1993,1.33,1994,1.33,1995,2.278,1996,1.936,1997,2.278,1998,1.306,1999,1.283,2000,1.056,2001,1.306,2002,1.283,2003,1.261,2004,1.072,2005,1.33,2006,1.141,2203,1.755,2785,3.264]],["title/interfaces/ISetDomainEventPayload.html",[40,0.003,2003,1.966]],["body/interfaces/ISetDomainEventPayload.html",[3,0.128,4,0.12,5,0.12,10,0.247,11,0.327,12,1.264,13,1.355,17,0.449,20,0.005,21,0.837,24,0.308,28,0.35,33,1.238,34,0.6,35,1.575,36,1.599,37,1.403,39,0.4,40,0.005,41,0.934,42,1.775,47,1.775,57,1.704,75,0.875,78,0.002,79,0.003,80,0.002,83,1.549,89,1.238,90,1.31,97,1.66,102,0.876,104,0.852,108,0.468,114,0.807,117,0.668,129,2.411,134,0.892,140,1.769,149,1.141,158,0.982,159,1.856,164,1.285,179,1.188,183,0.576,194,1.537,209,2.037,218,1.423,225,0.996,234,2.321,240,0.927,241,0.996,247,2.524,250,1.263,253,1.221,280,1.549,281,1.338,283,1.026,285,1.363,290,0.807,299,2.066,309,1.345,310,2.009,328,0.996,333,1.915,334,1.265,368,0.996,380,1.939,384,0.84,399,1.2,411,1.026,417,1.091,439,1.058,443,1.552,444,1.624,446,1.927,447,1.624,453,1.7,455,2.069,459,1.849,464,1.507,465,1.599,476,2.188,524,1.981,525,1.53,530,1.308,531,1.308,532,1.308,533,1.308,539,1.575,541,1.241,545,1.66,547,1.308,548,1.552,553,1.308,557,2.008,561,2.008,571,1.308,572,1.7,575,1.285,576,2.028,589,1.285,591,1.026,595,1.308,596,1.364,599,1.308,634,0.774,636,1.039,665,1.011,703,1.575,704,1.976,705,2.028,719,0.876,720,1.181,734,1.517,736,1.011,738,1.976,741,2.151,744,1.143,752,1.058,760,1.29,766,1.162,774,1.799,782,0.996,787,1.537,789,2.603,798,1.091,812,1.285,817,1.285,823,1.843,824,1.507,825,1.727,827,1.939,879,1.2,921,1.221,935,1.614,994,1.125,1047,1.241,1048,1.308,1049,1.308,1050,1.308,1052,2.321,1054,0.982,1056,1.058,1172,2.217,1187,2.358,1204,1.241,1205,1.241,1222,2.243,1233,1.263,1253,1.181,1255,1.813,1309,2.069,1316,1.599,1418,1.241,1430,2.602,1454,1.464,1599,1.783,1620,1.241,1654,1.727,1679,1.285,1723,1.308,1736,1.221,1767,1.308,1782,2.17,1871,0.495,1872,1.285,1873,1.332,1874,2.008,1875,1.843,1876,1.575,1877,1.308,1878,1.285,1879,1.308,1880,1.074,1881,0.968,1882,1.058,1883,2.444,1884,1.285,1885,1.263,1886,2.728,1887,1.285,1888,1.285,1889,1.143,1890,1.308,1891,1.308,1892,1.783,1893,1.899,1894,1.162,1895,1.811,1896,3.209,1897,1.332,1898,1.906,1899,1.181,1900,2.444,1901,1.332,1902,2.044,1903,2.008,1904,2.008,1905,1.332,1906,2.008,1907,2.359,1908,1.906,1909,1.332,1910,1.143,1911,1.332,1912,1.241,1913,1.241,1914,1.889,1915,1.2,1916,1.332,1917,1.332,1918,0.996,1919,1.332,1920,1.285,1921,1.939,1922,2.008,1923,1.308,1924,2.008,1925,1.332,1926,1.285,1927,1.332,1928,2.563,1929,1.332,1930,1.308,1931,1.332,1932,2.008,1933,1.285,1934,1.143,1935,1.308,1936,1.308,1937,1.332,1938,1.332,1939,1.332,1940,1.332,1941,1.308,1942,2.044,1943,1.332,1944,1.308,1945,1.263,1946,1.332,1947,1.332,1948,1.649,1949,1.874,1950,1.308,1951,1.976,1952,1.332,1953,1.308,1954,1.308,1955,1.332,1956,1.332,1957,1.332,1958,1.308,1959,1.332,1960,1.125,1961,1.221,1962,1.308,1963,1.332,1964,1.332,1965,1.332,1966,1.332,1967,1.285,1968,1.308,1969,1.285,1970,1.285,1971,1.332,1972,2.044,1973,2.741,1974,1.332,1975,1.308,1976,1.332,1977,1.332,1978,1.332,1979,1.332,1980,1.332,1981,1.674,1982,1.091,1983,1.332,1984,1.332,1985,1.906,1986,1.285,1987,1.383,1988,1.285,1989,1.332,1990,1.332,1991,1.906,1992,2.044,1993,1.332,1994,1.332,1995,2.28,1996,1.939,1997,2.28,1998,1.308,1999,1.285,2000,1.058,2001,1.308,2002,1.285,2003,1.939,2004,1.649,2005,1.332,2006,1.143,2203,1.758,2786,3.27]],["title/interfaces/ISideIndicatorAccessors.html",[40,0.003,2787,3.57]],["body/interfaces/ISideIndicatorAccessors.html",[0,0.11,3,0.194,4,0.182,5,0.182,8,1.068,10,0.2,11,0.504,12,1.201,13,1.329,14,1.206,20,0.005,22,0.73,24,0.258,28,0.369,33,1.676,35,2.132,36,2.165,37,2.442,38,1.328,39,0.342,40,0.005,41,0.864,42,1.19,47,1.19,52,1.965,55,1.291,56,2.315,57,1.082,72,2.267,78,0.002,79,0.003,80,0.002,85,0.805,91,2.598,94,1.56,96,2.019,107,1.484,108,0.722,109,2.585,113,2.536,117,1.583,132,2.453,134,0.462,142,3.204,143,1.705,146,2.177,159,2.138,161,1.405,179,0.642,183,0.873,184,3.393,192,1.504,194,1.112,209,1.366,212,3.693,213,3.693,218,2.364,222,3.46,227,2.671,240,1.405,241,2.07,253,1.206,285,1.658,290,1.676,295,3.243,296,2.366,297,1.899,299,2.166,317,1.467,320,2.177,327,2.419,328,1.51,332,2.475,334,1.026,336,1.446,337,2.095,384,1.274,418,2.991,488,1.819,634,1.836,636,1.406,660,3.204,662,3.331,720,1.79,782,1.51,932,2.135,1054,1.488,1156,2.737,1164,3.108,1181,3.092,1182,3.092,1195,2.991,1196,3.092,1197,3.475,1525,2.737,1599,1.761,1632,3.644,1687,4.801,1698,3.092,1791,2.737,1793,3.092,1871,0.751,1894,2.414,1896,2.893,1914,2.579,1987,1.366,2019,2.135,2072,2.899,2787,5.436,2788,3.846,2789,7.36,2790,3.204,2791,6.424,2792,6.424,2793,3.331,2794,4.995,2795,3.846,2796,4.238,2797,5.649,2798,4.995,2799,3.846,2800,3.846,2801,3.475,2802,3.475,2803,3.846,2804,3.846,2805,4.995,2806,4.995,2807,3.846,2808,3.846,2809,3.846,2810,3.846,2811,3.846,2812,3.846,2813,3.846,2814,3.644,2815,3.204,2816,3.846,2817,4.995,2818,3.644,2819,3.846,2820,5.273,2821,3.846,2822,6.016,2823,3.475,2824,3.846,2825,3.846,2826,3.846,2827,6.016,2828,3.846,2829,3.846,2830,3.846,2831,3.846,2832,3.846,2833,3.846,2834,3.846,2835,3.846,2836,3.846,2837,3.846,2838,3.846,2839,3.846,2840,3.644,2841,3.204,2842,3.846]],["title/interfaces/ISideIndicatorDataAccessors.html",[40,0.003,2791,3.743]],["body/interfaces/ISideIndicatorDataAccessors.html",[0,0.11,3,0.195,4,0.183,5,0.183,8,1.074,10,0.201,11,0.506,12,1.137,13,1.219,14,1.212,20,0.005,22,0.734,24,0.189,28,0.369,33,2.062,35,2.44,36,2.172,37,2.446,38,1.335,39,0.343,40,0.005,41,0.931,42,1.196,47,1.196,52,1.97,55,1.298,56,2.327,57,1.088,72,2.279,78,0.003,79,0.003,80,0.003,85,0.809,91,2.611,94,1.563,96,2.029,107,1.489,108,0.724,109,2.592,113,2.545,117,1.588,132,2.462,134,0.464,142,3.221,143,1.714,146,2.189,159,2.086,161,1.412,179,0.645,183,0.878,184,3.405,192,1.509,194,1.118,209,1.373,212,3.7,213,3.7,218,2.369,222,3.467,227,2.674,240,1.412,241,2.369,253,1.212,285,1.662,290,1.682,295,3.255,296,2.378,297,1.905,299,2.172,317,1.474,320,2.189,327,2.432,328,1.518,332,2.488,334,1.031,336,1.453,337,2.106,384,1.28,418,3.007,488,1.829,634,1.841,636,1.411,660,3.221,662,3.348,720,1.799,782,1.518,932,2.146,1054,1.496,1156,2.751,1164,3.556,1181,3.108,1182,3.108,1195,3.007,1196,3.108,1197,3.493,1525,2.751,1599,1.77,1632,3.663,1687,4.782,1698,3.108,1791,2.751,1793,3.108,1871,0.755,1894,2.422,1896,2.901,1914,2.585,1987,1.879,2019,2.146,2072,2.914,2787,4.781,2788,3.867,2789,7.328,2790,3.221,2791,6.145,2792,5.715,2793,3.348,2794,5.013,2795,3.867,2796,4.254,2797,6.179,2798,5.013,2799,3.867,2800,3.867,2801,3.493,2802,3.493,2803,3.867,2804,3.867,2805,5.013,2806,5.013,2807,3.867,2808,3.867,2809,3.867,2810,3.867,2811,3.867,2812,3.867,2813,3.867,2814,3.663,2815,3.221,2816,3.867,2817,5.013,2818,3.663,2819,3.867,2820,5.292,2821,3.867,2822,6.033,2823,3.493,2824,3.867,2825,3.867,2826,3.867,2827,6.033,2828,3.867,2829,3.867,2830,3.867,2831,3.867,2832,3.867,2833,3.867,2834,3.867,2835,3.867,2836,3.867,2837,3.867,2838,3.867,2839,3.867,2840,3.663,2841,3.221,2842,3.867]],["title/interfaces/ISideIndicatorSeriesAccessors.html",[40,0.003,2792,3.743]],["body/interfaces/ISideIndicatorSeriesAccessors.html",[0,0.107,3,0.188,4,0.176,5,0.176,8,1.033,10,0.194,11,0.496,12,1.086,13,1.244,14,1.166,20,0.005,22,1.212,24,0.312,28,0.366,33,1.638,35,2.084,36,2.427,37,2.752,38,1.284,39,0.338,40,0.005,41,0.916,42,1.15,47,1.15,52,2.264,55,1.249,56,2.239,57,1.047,72,2.193,78,0.002,79,0.003,80,0.002,85,0.778,91,2.512,94,1.542,96,1.952,107,1.664,108,0.804,109,2.54,113,2.478,117,1.556,132,2.397,134,0.447,142,3.099,143,1.649,146,2.106,159,2.066,161,1.359,179,0.621,183,0.844,184,3.316,192,1.47,194,1.075,209,1.321,212,4.006,213,4.006,218,2.331,222,3.411,227,2.656,240,1.359,241,2.321,253,1.166,285,1.635,290,1.638,295,3.169,296,2.288,297,1.855,299,2.129,317,1.419,320,2.106,327,2.339,328,1.461,332,2.394,334,0.992,336,1.398,337,2.026,384,1.232,418,2.893,488,1.76,634,1.804,636,1.374,660,4.292,662,4.462,720,1.731,782,1.461,932,2.065,1054,1.439,1156,2.647,1164,3.484,1181,2.99,1182,2.99,1195,2.893,1196,2.99,1197,3.361,1525,2.647,1599,1.703,1632,4.881,1687,4.819,1698,2.99,1791,2.647,1793,2.99,1871,0.726,1894,2.359,1896,3.334,1914,2.543,1987,1.321,2019,2.065,2072,2.804,2787,4.655,2788,3.72,2789,7.394,2790,3.099,2791,5.6,2792,6.045,2793,3.221,2794,4.881,2795,3.72,2796,4.142,2797,5.921,2798,6.348,2799,5.153,2800,6.382,2801,3.361,2802,3.361,2803,3.72,2804,3.72,2805,4.881,2806,4.881,2807,3.72,2808,3.72,2809,3.72,2810,3.72,2811,3.72,2812,3.72,2813,3.72,2814,3.524,2815,3.099,2816,3.72,2817,4.881,2818,3.524,2819,3.72,2820,5.153,2821,3.72,2822,5.912,2823,3.361,2824,3.72,2825,3.72,2826,3.72,2827,5.912,2828,3.72,2829,3.72,2830,3.72,2831,3.72,2832,3.72,2833,3.72,2834,3.72,2835,3.72,2836,3.72,2837,3.72,2838,3.72,2839,3.72,2840,3.524,2841,3.099,2842,3.72]],["title/interfaces/ISimpleThresholdZone.html",[40,0.003,2843,3.951]],["body/interfaces/ISimpleThresholdZone.html",[3,0.281,4,0.263,5,0.263,10,0.289,11,0.561,20,0.005,22,1.412,24,0.351,28,0.281,39,0.362,40,0.004,78,0.004,79,0.004,80,0.004,85,1.163,134,0.893,164,1.367,212,4.344,213,4.321,281,1.672,309,1.406,368,2.183,417,3.27,782,2.183,1599,3.06,1698,5.374,1871,1.086,1985,3.507,2153,5.101,2843,6.686,2844,5.928,2845,7.127,2846,7.717,2847,6.419,2848,5.561,2849,5.561,2850,5.561,2851,5.561]],["title/interfaces/ISpark.html",[40,0.003,758,3.422]],["body/interfaces/ISpark.html",[0,0.123,3,0.231,4,0.216,5,0.216,8,1.269,10,0.238,11,0.496,13,1.362,20,0.005,21,0.862,22,1.317,24,0.339,28,0.299,34,1.081,39,0.371,40,0.005,75,0.844,78,0.003,79,0.004,80,0.003,85,0.956,90,1.426,94,1.509,108,0.833,124,1.6,134,0.935,158,2.289,164,0.808,175,1.536,179,0.763,183,1.038,192,1.304,194,2.076,234,2.392,279,3.638,280,1.932,283,2.652,333,2.13,334,1.85,394,3.253,411,1.849,432,4.6,459,1.473,464,2.204,482,3.416,572,2.582,576,2.501,597,2.092,731,5.122,732,3.808,733,4.13,734,1.304,735,5.463,736,1.821,737,4.33,738,2.733,739,4.33,740,4.33,741,2.652,742,4.33,744,3.373,752,1.905,753,4.124,754,5.925,755,5.604,756,4.928,757,3.049,758,5.122,759,4.805,760,2.297,761,4.33,762,4.33,763,3.674,764,3.808,765,2.811,766,2.092,767,3.958,768,2.875,769,3.958,770,2.443,771,2.64,772,2.198,773,3.554,774,1.433,775,4.928,776,3.806,777,2.588,778,3.958,779,4.13,780,3.958,781,3.958,782,1.795,783,5.122,784,5.122,785,5.122,786,5.122,787,1.321,788,3.958,789,1.964,790,3.345,791,4.33,792,4.33,793,3.167,794,3.958,1871,0.892]],["title/interfaces/IStackMetadata.html",[40,0.003,2180,4.212]],["body/interfaces/IStackMetadata.html",[3,0.304,4,0.286,5,0.286,10,0.314,11,0.588,20,0.005,24,0.343,39,0.354,40,0.005,78,0.004,79,0.005,80,0.004,140,1.822,164,1.392,212,4.159,213,4.159,404,3.631,448,6.032,1871,1.178,2178,6.963,2179,6.963,2180,7.478]],["title/interfaces/IStartEndRangeAccessors.html",[40,0.003,2278,3.422]],["body/interfaces/IStartEndRangeAccessors.html",[0,0.115,3,0.277,4,0.26,5,0.26,7,2.736,8,1.527,10,0.286,11,0.557,12,1.076,13,1.191,14,1.724,20,0.005,24,0.325,28,0.277,33,2.573,34,1.57,35,3.068,36,2.726,37,2.569,38,1.898,39,0.389,40,0.005,41,1.106,52,1.796,53,2.558,78,0.004,79,0.004,80,0.004,108,0.66,200,4.024,205,4.818,206,5.221,212,4.035,213,4.035,214,2.784,331,4.375,1861,4.581,1863,4.581,1865,4.581,1867,4.581,1868,4.762,1871,1.074,2277,4.968,2278,5.75,2279,4.762,2280,4.762]],["title/interfaces/IStatusAccessors.html",[40,0.003,2852,3.743]],["body/interfaces/IStatusAccessors.html",[0,0.117,3,0.283,4,0.265,5,0.265,7,2.788,8,1.556,10,0.292,11,0.563,12,1.236,13,1.005,20,0.005,24,0.274,28,0.363,33,2.134,38,1.935,39,0.363,40,0.004,41,1.032,54,2.607,57,1.577,78,0.004,79,0.004,80,0.004,94,1.716,96,3.525,159,1.915,192,1.915,198,4.504,201,6.457,203,5.399,205,4.536,210,3.606,255,3.172,417,2.886,1871,1.094,2852,6.813,2853,5.973,2854,7.741,2855,5.308,2856,5.973,2857,5.973,2858,5.973,2859,5.973,2860,5.973,2861,5.973,2862,5.973]],["title/interfaces/IStatusDataAccessors.html",[40,0.003,2854,3.951]],["body/interfaces/IStatusDataAccessors.html",[0,0.117,3,0.283,4,0.265,5,0.265,7,2.788,8,1.556,10,0.292,11,0.563,12,1.088,13,1.005,20,0.005,24,0.274,28,0.363,33,2.37,38,1.935,39,0.363,40,0.004,41,1.032,54,2.607,57,1.577,78,0.004,79,0.004,80,0.004,94,1.716,96,3.525,159,1.915,192,1.915,198,4.504,201,6.228,203,5.781,205,4.536,210,3.606,255,3.172,417,3.277,1871,1.094,2852,6.362,2853,5.973,2854,7.625,2855,5.308,2856,5.973,2857,5.973,2858,5.973,2859,5.973,2860,5.973,2861,5.973,2862,5.973]],["title/interfaces/ITextOverflowArgs.html",[40,0.003,2030,2.812]],["body/interfaces/ITextOverflowArgs.html",[0,0.053,3,0.129,4,0.121,5,0.121,10,0.133,11,0.329,20,0.005,21,0.373,24,0.297,28,0.329,39,0.36,40,0.005,41,0.563,52,1.282,75,0.473,78,0.002,79,0.003,80,0.002,83,2.509,89,1.247,90,0.714,95,3.5,100,1.648,101,3.544,102,1.354,103,3.583,104,1.601,106,3.769,108,0.76,109,2.612,110,1.804,112,3.148,113,2.923,114,2.011,122,2.933,133,3.659,134,0.642,137,3.943,140,1.83,143,2.695,149,0.75,150,2.525,152,1.648,153,2.718,154,1.823,155,3.441,156,1.823,157,1.823,158,2.068,160,1.823,161,1.952,164,1.394,166,2.718,167,3.891,168,1.775,175,1.944,178,3.025,179,0.427,180,2.467,181,3.609,182,2.65,194,1.829,214,1.297,253,2.26,254,1.51,281,0.597,285,1.369,297,1.717,309,1.781,310,2.215,317,0.977,334,1.687,384,2.013,404,3.217,446,0.86,459,0.825,464,1.247,488,1.211,489,2.221,524,1.646,525,1.872,529,1.688,539,2.85,545,2.467,548,1.9,552,3.217,580,1.232,590,1.688,591,1.587,592,2.999,593,1.775,596,0.897,597,1.172,598,1.73,627,1.422,634,2.15,636,1.923,665,1.563,703,2.639,704,1.987,705,1.496,709,2.585,719,0.884,734,1.119,736,1.563,753,1.611,765,3.287,768,1.611,770,2.857,771,1.479,772,2.294,787,0.74,800,1.73,808,3.609,824,0.991,932,3.374,1010,1.648,1054,2.068,1132,1.823,1149,1.73,1164,3.729,1189,1.775,1316,1.611,1357,1.919,1440,3.439,1531,2.792,1532,3.803,1533,1.775,1534,1.823,1535,1.823,1541,1.823,1545,1.823,1549,1.823,1553,1.823,1626,1.823,1628,1.823,1629,1.823,1630,1.775,1633,5.59,1635,1.297,1640,2.65,1649,1.775,1656,1.775,1662,2.792,1666,1.823,1671,2.754,1672,1.611,1675,1.73,1676,1.775,1681,1.775,1687,2.933,1690,1.73,1691,2.699,1755,2.792,1756,1.823,1840,1.73,1841,1.775,1842,1.775,1843,1.775,1844,1.775,1845,2.718,1846,1.611,1847,1.775,1871,0.5,1876,2.458,1893,1.676,1895,0.872,1928,1.084,1948,1.084,1987,2.317,2000,1.067,2007,1.823,2008,4.217,2009,2.413,2010,4.325,2011,1.874,2012,2.871,2013,2.811,2014,3.847,2015,2.525,2016,1.874,2017,1.575,2018,3.891,2019,3.199,2020,3.803,2021,3.15,2022,2.792,2023,4.942,2024,2.871,2025,3.911,2026,2.792,2027,1.874,2028,1.45,2029,1.823,2030,3.393,2031,3.803,2032,3.803,2033,2.718,2034,1.823,2035,1.823,2036,2.87,2037,2.549,2038,1.823,2039,1.775,2040,1.874,2041,1.823,2042,1.823,2043,1.823,2044,1.874,2045,1.874,2046,1.73,2047,1.575,2048,1.874,2049,2.65,2050,1.874,2051,1.575,2052,1.874,2053,2.718,2054,2.871,2055,2.871,2056,2.413,2057,2.413,2058,1.874,2059,1.823,2060,1.775,2061,1.874,2062,1.874]],["title/interfaces/ITickLabelConfig.html",[40,0.003,166,2.738]],["body/interfaces/ITickLabelConfig.html",[0,0.052,3,0.126,4,0.118,5,0.118,10,0.13,11,0.323,20,0.005,21,0.365,22,1.002,24,0.294,28,0.327,39,0.358,40,0.005,41,0.553,52,1.259,75,0.711,78,0.002,79,0.002,80,0.002,83,2.502,85,0.523,89,1.225,90,0.701,95,3.485,100,1.61,101,3.506,102,1.33,103,3.549,104,1.578,106,3.741,108,0.753,109,2.588,110,1.789,112,3.223,113,2.896,114,2.059,122,2.89,133,3.625,134,0.634,137,3.919,140,1.82,143,2.67,149,0.733,150,2.479,152,1.61,153,2.67,154,1.78,155,3.667,156,1.78,157,1.78,158,2.042,160,1.78,161,1.928,164,1.391,166,3.256,167,3.85,168,3.658,175,1.936,178,2.988,179,0.418,180,3.32,181,4.237,182,3.174,194,1.872,214,1.267,253,2.271,254,1.475,281,0.899,285,1.353,297,1.692,309,1.772,310,2.196,317,0.954,334,1.673,384,1.994,404,3.178,446,0.84,459,0.806,464,1.225,488,1.183,489,2.181,524,1.622,525,1.845,529,1.648,539,2.834,545,2.453,548,1.872,552,3.178,580,1.853,590,1.648,591,1.558,592,2.955,593,1.733,596,0.876,597,1.145,598,1.69,627,1.389,634,2.138,636,1.932,665,1.535,703,2.62,704,1.959,705,1.469,709,2.539,719,0.864,734,1.099,736,1.535,753,2.423,765,3.247,768,1.573,770,2.822,771,1.445,772,2.26,787,0.723,800,2.602,808,3.565,824,1.491,932,3.343,1010,1.61,1054,2.042,1132,2.742,1149,1.69,1164,3.698,1189,1.733,1316,1.582,1357,1.885,1440,3.397,1531,2.742,1532,3.757,1533,1.733,1534,1.78,1535,1.78,1541,1.78,1545,1.78,1549,1.78,1553,1.78,1626,1.78,1628,1.78,1629,1.78,1630,1.733,1633,5.578,1635,1.951,1640,2.602,1649,1.733,1656,1.733,1662,2.742,1666,1.78,1671,2.714,1672,1.573,1675,1.69,1676,1.733,1681,1.733,1687,3.247,1690,1.69,1691,2.988,1755,2.742,1756,1.78,1840,1.69,1841,1.733,1842,1.733,1843,1.733,1844,1.733,1845,2.67,1846,1.573,1847,1.733,1871,0.488,1876,2.435,1893,1.655,1895,0.852,1928,1.059,1948,1.059,1987,2.3,2000,1.043,2007,1.78,2008,4.172,2009,2.89,2010,4.285,2011,1.831,2012,2.82,2013,2.77,2014,3.818,2015,2.479,2016,1.831,2017,1.539,2018,3.85,2019,3.343,2020,3.757,2021,3.112,2022,2.742,2023,4.914,2024,2.82,2025,3.863,2026,2.742,2027,1.831,2028,1.416,2029,1.78,2030,2.742,2031,1.78,2032,1.78,2033,3.658,2034,1.78,2035,1.78,2036,3.178,2037,2.822,2038,2.742,2039,2.67,2040,2.82,2041,2.742,2042,2.742,2043,2.742,2044,3.863,2045,1.831,2046,1.69,2047,1.539,2048,1.831,2049,2.602,2050,1.831,2051,1.539,2052,1.831,2053,2.67,2054,2.82,2055,2.82,2056,2.37,2057,2.37,2058,1.831,2059,1.78,2060,1.733,2061,1.831,2062,1.831]],["title/interfaces/ITooltipNode.html",[40,0.003,1313,4.212]],["body/interfaces/ITooltipNode.html",[0,0.073,3,0.177,4,0.166,5,0.166,8,0.975,10,0.257,11,0.415,13,0.888,17,1.013,20,0.005,24,0.242,28,0.376,38,1.212,39,0.177,40,0.002,41,0.71,42,1.53,47,1.53,54,1.633,55,2.542,75,1.148,78,0.002,79,0.003,80,0.002,90,1.132,94,1.509,109,1.508,110,1.995,112,1.747,114,1.116,124,2.006,126,1.987,134,0.883,146,2.801,161,2.272,164,1.237,179,0.586,192,1.871,227,2.63,234,3.102,240,1.282,297,2.24,308,3.039,309,1.449,310,1.229,317,1.338,334,1.32,337,1.912,435,4.319,437,4.284,452,3.171,476,1.887,477,2.801,487,2.498,488,1.66,491,2.822,493,2.729,496,2.37,511,2.313,519,3.621,524,1.212,580,1.688,581,2.729,583,2.432,584,2.432,607,3.524,627,1.949,634,1.51,636,1.32,726,3.325,741,1.42,760,1.638,796,2.924,821,3.776,854,4.284,855,4.284,862,4.47,865,4.47,871,4.284,880,3.325,888,3.039,907,3.039,935,1.195,959,5.101,991,3.325,1030,5.177,1138,3.742,1194,3.51,1223,2.924,1234,3.325,1258,6.222,1264,3.51,1268,6.372,1282,4.052,1283,4.052,1284,4.052,1285,4.052,1286,4.052,1291,4.052,1292,3.742,1296,5.711,1297,4.052,1299,4.052,1300,5.711,1301,4.052,1302,8.073,1303,6.614,1304,5.711,1305,4.052,1306,4.052,1307,3.325,1308,3.171,1309,2.501,1310,4.052,1311,6.632,1312,3.742,1313,6.108,1314,4.052,1315,4.052,1316,1.441,1317,4.052,1318,4.052,1319,4.052,1320,4.052,1321,4.052,1322,4.052,1323,4.052,1324,5.711,1325,4.052,1326,4.052,1327,4.052,1328,4.052,1329,4.052,1330,4.052,1331,4.052,1332,3.742,1333,4.052,1334,5.711,1335,5.711,1336,5.274,1337,5.711,1338,5.711,1339,4.052,1340,5.711,1341,4.052,1342,4.052,1343,6.614,1344,4.052,1345,4.052,1346,5.711,1347,4.052,1348,4.052,1349,5.711,1350,4.052,1351,6.614,1352,5.711,1353,4.052,1354,4.052,1355,4.052,1356,4.052,1357,2.42,1358,4.052,1359,2.822,1360,4.052,1361,4.052,1362,7.182,1363,4.052,1364,4.052,1365,5.711,1366,4.052,1367,4.052,1368,4.052,1369,4.052,1370,3.742,1371,4.052,1372,3.51,1373,4.052,1374,4.052,1375,4.052,1376,3.742,1377,4.052,1378,4.052,1379,4.052,1380,4.052,1381,4.052,1382,4.052,1383,4.052,1384,5.711,1385,5.711,1386,5.711,1387,6.614,1388,4.052,1389,4.052,1390,4.052,1391,3.742,1392,4.052,1393,3.742,1394,3.039,1395,4.052,1396,4.052,1397,5.711,1398,4.052,1399,4.052,1400,4.052,1401,4.052,1402,4.052,1403,4.052,1404,4.052,1405,4.052,1406,4.052,1407,4.052,1408,4.052,1409,4.052,1410,4.052,1411,4.052,1412,4.052,1413,4.052,1871,0.685]],["title/interfaces/ITooltipPosition.html",[40,0.003,1432,3.951]],["body/interfaces/ITooltipPosition.html",[0,0.072,3,0.175,4,0.164,5,0.164,10,0.18,11,0.411,12,1.003,17,0.613,20,0.005,24,0.17,28,0.37,34,0.82,39,0.33,40,0.002,41,0.817,42,1.761,47,1.761,55,1.912,57,0.976,78,0.002,79,0.003,80,0.002,85,0.726,90,0.893,94,1.638,107,0.976,109,2.806,110,1.863,112,3.08,113,2.36,114,1.102,117,1.291,129,1.818,134,0.416,144,2.045,149,1.438,161,1.792,164,1.007,179,0.819,192,1.624,197,3.004,212,2.672,213,3.371,227,2.624,234,1.403,247,1.818,255,1.964,281,1.144,283,1.984,290,1.102,297,2.229,317,1.323,320,1.964,333,1.249,334,1.808,336,1.844,404,2.953,411,1.984,435,5.366,436,2.403,437,3.004,438,3.469,439,2.045,440,3.469,441,4.529,442,3.469,443,1.955,444,1.446,451,3.286,452,3.134,453,2.701,455,1.514,456,4.087,458,4.907,459,1.581,460,3.286,463,3.286,465,2.014,469,3.469,476,1.871,511,2.286,524,1.197,572,1.514,576,1.871,580,1.668,581,2.697,583,2.403,584,2.403,586,3.286,587,2.697,596,2.167,597,1.588,607,3.018,634,1.058,636,0.925,664,2.342,673,3.663,741,1.403,752,1.446,757,2.934,773,4.813,793,2.403,815,2.181,877,3.134,879,1.641,921,1.668,935,2.373,1123,2.788,1124,2.788,1133,6.97,1145,3.469,1146,4.087,1147,3.469,1153,3.469,1154,3.469,1172,1.446,1173,2.614,1183,3.469,1184,3.469,1185,3.134,1187,2.524,1200,4.93,1201,3.134,1206,3.286,1218,4.648,1219,3.286,1220,3.004,1221,3.286,1222,1.641,1223,2.89,1228,3.286,1230,3.469,1241,4.907,1242,3.469,1243,3.469,1244,3.469,1250,3.469,1268,6.035,1309,2.85,1414,3.698,1417,5.664,1418,1.697,1427,7.43,1428,3.469,1429,5.23,1430,2.4,1431,4.648,1432,6.78,1433,6.962,1434,3.698,1435,3.698,1436,3.469,1437,5.23,1438,5.664,1439,4.004,1440,2.232,1441,4.004,1442,6.598,1443,6.598,1444,6.598,1445,6.598,1446,6.531,1447,5.664,1448,4.004,1449,4.004,1450,5.664,1451,4.004,1452,4.004,1453,4.004,1454,1.304,1455,4.004,1456,6.572,1457,4.004,1458,4.004,1459,4.004,1460,5.144,1461,5.693,1462,4.004,1463,4.004,1464,4.004,1465,4.004,1466,4.004,1467,3.469,1468,3.469,1469,5.664,1470,4.004,1471,4.004,1472,3.469,1473,4.004,1474,4.004,1475,4.004,1476,6.598,1477,4.004,1478,4.004,1479,4.004,1480,4.004,1481,4.004,1482,4.004,1483,4.004,1484,4.004,1485,4.004,1486,4.004,1487,4.004,1488,4.004,1489,2.181,1490,3.286,1491,4.004,1492,3.698,1493,4.004,1494,4.004,1495,4.004,1496,4.004,1497,4.004,1498,4.004,1499,2.788,1500,3.469,1501,2.788,1502,3.469,1503,3.469,1504,5.664,1505,3.698,1506,3.286,1507,4.004,1508,4.004,1509,4.004,1510,4.004,1871,0.677]],["title/interfaces/IValueProvider.html",[40,0.003,1052,1.725]],["body/interfaces/IValueProvider.html",[3,0.126,4,0.119,5,0.119,10,0.275,11,0.324,12,1.263,13,1.352,17,0.682,19,0.765,20,0.005,21,0.879,22,0.476,24,0.317,28,0.349,33,1.226,34,0.592,35,1.56,36,1.584,37,1.389,39,0.399,40,0.005,41,0.93,42,1.765,47,1.765,57,1.696,75,0.975,78,0.002,79,0.002,80,0.002,83,1.537,89,1.226,90,1.306,97,1.647,102,0.865,104,0.841,108,0.463,114,0.796,117,0.659,129,2.401,134,0.896,140,1.763,149,1.13,158,0.97,159,1.848,164,1.282,175,1.002,179,1.198,183,0.569,194,1.527,209,2.026,218,1.409,225,0.984,234,2.307,240,0.915,241,0.984,247,2.515,250,1.247,253,1.21,269,1.351,280,1.537,281,1.331,283,1.013,285,1.354,290,0.796,299,2.054,309,1.336,310,1.997,328,0.984,333,1.903,334,1.255,368,0.984,380,1.92,384,0.83,399,1.185,411,1.013,417,1.077,439,1.044,443,1.537,444,1.608,446,1.916,447,1.608,453,1.684,455,2.053,459,1.838,464,1.495,465,1.584,476,2.176,524,1.97,525,1.515,530,1.292,531,1.292,532,1.292,533,1.292,539,1.56,541,1.226,545,1.647,547,1.292,548,1.537,553,1.292,557,1.989,561,1.989,571,1.292,572,1.684,575,1.269,576,2.015,589,1.269,591,1.013,595,1.292,596,1.351,599,1.292,634,0.765,636,1.029,665,0.999,703,1.56,704,1.961,705,2.015,719,0.865,720,1.166,734,1.507,736,0.999,738,1.961,741,2.137,744,1.129,752,1.044,760,1.278,766,1.147,774,1.789,782,0.984,787,1.527,789,2.59,798,1.077,812,1.269,817,1.269,823,1.825,824,1.493,825,1.711,827,1.92,879,1.185,921,1.205,935,1.602,994,1.111,1047,1.226,1048,1.292,1049,1.292,1050,1.292,1052,2.49,1054,0.97,1056,1.044,1172,2.202,1187,2.343,1204,1.226,1205,1.226,1222,2.225,1233,1.247,1253,1.166,1255,1.795,1309,2.053,1316,1.584,1418,1.226,1430,2.585,1454,1.45,1599,1.766,1620,1.226,1654,1.711,1679,1.269,1723,1.292,1736,1.205,1767,1.292,1782,2.154,1871,0.489,1872,1.269,1873,1.315,1874,1.989,1875,1.825,1876,1.56,1877,1.292,1878,1.269,1879,1.292,1880,1.06,1881,0.956,1882,1.044,1883,2.425,1884,1.269,1885,1.247,1886,2.715,1887,1.269,1888,1.269,1889,1.129,1890,1.292,1891,1.292,1892,1.766,1893,1.968,1894,1.147,1895,1.799,1896,3.198,1897,1.315,1898,1.887,1899,1.166,1900,2.425,1901,1.315,1902,2.025,1903,1.989,1904,1.989,1905,1.315,1906,1.989,1907,2.341,1908,1.887,1909,1.315,1910,1.129,1911,1.315,1912,1.226,1913,1.226,1914,1.874,1915,1.185,1916,1.315,1917,1.315,1918,0.984,1919,1.315,1920,1.269,1921,1.92,1922,1.989,1923,1.292,1924,1.989,1925,1.315,1926,1.269,1927,1.315,1928,2.55,1929,1.315,1930,1.292,1931,1.315,1932,1.989,1933,1.269,1934,1.129,1935,1.292,1936,1.292,1937,1.315,1938,1.315,1939,1.315,1940,1.315,1941,1.292,1942,2.025,1943,1.315,1944,1.292,1945,1.247,1946,1.315,1947,1.315,1948,1.633,1949,1.856,1950,1.292,1951,1.961,1952,1.315,1953,1.292,1954,1.292,1955,1.315,1956,1.315,1957,1.315,1958,1.292,1959,1.315,1960,1.111,1961,1.205,1962,1.292,1963,1.315,1964,1.315,1965,1.315,1966,1.315,1967,1.269,1968,1.292,1969,1.269,1970,1.269,1971,1.315,1972,2.025,1973,2.723,1974,1.315,1975,1.292,1976,1.315,1977,1.315,1978,1.315,1979,1.315,1980,1.315,1981,1.658,1982,1.077,1983,1.315,1984,1.315,1985,1.887,1986,1.269,1987,1.37,1988,1.269,1989,1.315,1990,1.315,1991,1.887,1992,2.025,1993,1.315,1994,1.315,1995,2.263,1996,1.92,1997,2.263,1998,1.292,1999,1.269,2000,1.044,2001,1.292,2002,1.269,2003,1.247,2004,1.06,2005,2.025,2006,2.38,2863,3.229,2864,2.506,2865,3.229]],["title/interfaces/IValueThicknessAccessors.html",[40,0.003,2279,3.422]],["body/interfaces/IValueThicknessAccessors.html",[0,0.115,3,0.277,4,0.26,5,0.26,7,2.736,8,1.527,10,0.286,11,0.557,12,1.076,13,1.191,14,1.724,20,0.005,24,0.325,28,0.277,33,2.573,34,1.57,35,3.068,36,2.726,37,2.569,38,1.898,39,0.389,40,0.005,41,1.106,52,1.796,53,2.558,78,0.004,79,0.004,80,0.004,108,0.889,200,4.024,205,4.818,206,5.221,212,2.995,213,2.995,214,3.752,331,4.375,1861,4.581,1863,4.581,1865,4.581,1867,4.581,1868,4.762,1871,1.074,2277,4.968,2278,4.762,2279,5.75,2280,4.762]],["title/interfaces/IXYDataAccessors.html",[40,0.003,2243,3.422]],["body/interfaces/IXYDataAccessors.html",[0,0.113,3,0.274,4,0.257,5,0.257,7,2.703,8,1.508,10,0.283,11,0.553,12,1.068,17,0.961,20,0.005,24,0.322,28,0.274,33,2.512,34,1.558,38,1.875,39,0.333,40,0.005,42,2.405,47,2.405,57,1.855,60,4.703,62,4.703,75,1.216,78,0.004,79,0.004,80,0.004,94,1.25,107,1.528,108,0.886,134,0.791,159,1.549,216,3.763,241,2.897,774,2.066,777,3.731,1150,3.495,1855,5.79,1871,1.06,1949,2.612,1951,2.747,2139,2.513,2157,5.112,2203,3.763,2243,6.144,2244,4.703,2247,4.967,2248,4.967,2796,4.366,2866,7.608,2867,8.517,2868,5.79]],["title/interfaces/IXYGridConfig.html",[40,0.003,2049,2.668]],["body/interfaces/IXYGridConfig.html",[0,0.053,3,0.127,4,0.119,5,0.119,10,0.131,11,0.325,20,0.005,21,0.368,24,0.28,28,0.328,39,0.359,40,0.005,41,0.678,52,1.267,75,0.466,78,0.002,79,0.003,80,0.002,83,2.505,85,0.528,89,1.233,90,0.706,95,3.592,100,3.412,101,3.52,102,1.339,103,3.562,104,1.586,106,3.996,108,0.78,109,2.597,110,1.795,112,3.132,113,2.906,114,2,122,2.906,133,3.788,134,0.637,137,3.928,140,1.867,143,2.679,149,1.136,150,2.496,152,1.624,153,2.687,154,1.796,155,3.42,156,1.796,157,1.796,158,2.052,160,1.796,161,1.937,164,1.376,166,2.687,167,2.619,168,1.748,175,1.939,178,3.002,179,0.421,180,2.439,181,3.581,182,2.619,194,1.819,214,1.278,253,2.275,254,2.286,281,0.588,285,1.359,297,1.701,309,1.775,310,2.203,317,0.962,334,1.678,384,2.001,404,3.192,446,0.847,459,0.813,464,1.233,488,1.835,489,2.196,524,1.631,525,1.855,529,1.663,539,2.84,545,2.458,548,1.882,552,3.637,580,1.214,590,1.663,591,1.569,592,2.971,593,1.748,596,0.883,597,1.155,598,1.704,627,2.153,634,2.142,636,1.917,665,1.545,703,2.627,704,1.969,705,1.479,709,2.556,719,0.871,734,1.347,736,1.545,753,1.587,765,3.262,768,1.587,770,2.835,771,1.457,772,2.272,787,0.729,800,1.704,808,3.581,824,0.976,932,3.354,1010,2.496,1054,2.052,1132,1.796,1149,1.704,1164,3.709,1189,1.748,1316,1.592,1357,1.897,1440,3.412,1531,2.76,1532,3.773,1533,1.748,1534,1.796,1535,1.796,1541,1.796,1545,1.796,1549,1.796,1553,1.796,1626,1.796,1628,1.796,1629,1.796,1630,1.748,1633,5.592,1635,1.278,1640,2.619,1649,1.748,1656,1.748,1662,2.76,1666,1.796,1671,2.728,1672,1.587,1675,1.704,1676,1.748,1681,1.748,1687,2.906,1690,1.704,1691,2.674,1755,2.76,1756,1.796,1840,2.619,1841,2.687,1842,2.687,1843,2.687,1844,2.687,1845,3.674,1846,2.439,1847,2.687,1871,0.493,1876,2.444,1893,1.662,1895,0.859,1928,1.641,1948,1.068,1987,2.306,2000,1.616,2007,1.796,2008,4.188,2009,2.386,2010,4.3,2011,1.846,2012,2.838,2013,2.785,2014,3.829,2015,2.496,2016,1.846,2017,1.552,2018,4.081,2019,3.177,2020,3.773,2021,3.126,2022,2.76,2023,4.924,2024,2.838,2025,3.881,2026,2.76,2027,1.846,2028,1.428,2029,1.796,2030,2.76,2031,1.796,2032,1.796,2033,2.687,2034,1.796,2035,1.796,2036,2.844,2037,2.835,2038,1.796,2039,1.748,2040,1.846,2041,1.796,2042,1.796,2043,1.796,2044,1.846,2045,1.846,2046,1.704,2047,1.552,2048,1.846,2049,3.581,2050,2.838,2051,2.386,2052,2.838,2053,2.687,2054,2.838,2055,2.838,2056,2.386,2057,2.386,2058,1.846,2059,1.796,2060,1.748,2061,1.846,2062,1.846]],["title/interfaces/IXYScales.html",[40,0.003,326,2.978]],["body/interfaces/IXYScales.html",[3,0.189,4,0.177,5,0.177,10,0.333,11,0.434,12,0.838,13,0.671,20,0.005,24,0.328,28,0.261,34,0.884,39,0.388,40,0.005,41,0.964,42,1.978,47,1.978,75,1.094,78,0.002,79,0.003,80,0.002,95,1.798,97,1.81,108,0.854,110,1.475,117,1.56,124,1.81,126,2.116,132,2.406,134,0.834,140,1.884,161,1.889,164,1.353,175,1.803,178,2.116,179,0.624,183,0.849,192,1.475,222,1.999,225,2.03,227,1.81,245,3.784,280,2.46,281,0.872,285,1.779,309,0.945,326,3.897,334,1.852,336,1.405,337,2.036,368,2.03,379,3.897,441,2.736,576,1.972,757,1.927,759,2.59,760,1.238,770,2.764,772,2.487,774,1.172,776,4.115,798,2.222,839,3.115,882,3.906,1454,1.405,1489,2.351,1499,4.156,1603,2.818,1652,3.582,1654,1.658,1671,2.159,1691,2.927,1782,1.712,1871,0.73,1889,1.684,1892,2.367,1893,2.361,1918,3.088,1981,2.222,2004,2.188,2014,3.048,2017,3.18,2019,2.076,2036,2.251,2037,1.999,2056,2.3,2057,2.3,2089,3.492,2125,4.156,2126,3.005,2127,4.357,2128,3.238,2130,4.609,2131,3.005,2132,3.005,2133,3.115,2134,3.115,2135,3.115,2136,4.338,2137,4.534,2138,3.784,2139,1.426,2140,3.238,2141,3.115,2142,2.907,2143,3.005,2144,3.238,2145,3.238,2146,5.813,2147,3.897,2148,6.412,2149,2.818,2150,3.238,2151,4.477,2152,4.156,2153,2.661,2154,2.818,2155,2.818,2156,4.82,2157,4.811,2158,4.477,2159,2.907,2160,2.907,2161,4.811,2162,2.818,2163,2.818,2164,3.238,2165,3.238,2166,3.115,2167,2.818,2168,4.82,2169,3.238,2170,5.06,2171,2.818,2172,3.238,2173,3.238,2174,4.307,2175,3.238,2176,3.238,2177,3.238]],["title/interfaces/IZoneCrossPoint.html",[40,0.003,1986,2.001]],["body/interfaces/IZoneCrossPoint.html",[3,0.126,4,0.119,5,0.119,10,0.275,11,0.443,12,1.265,13,1.358,20,0.005,21,0.831,22,0.732,24,0.317,28,0.349,33,1.225,34,0.592,35,1.559,36,1.583,37,1.388,39,0.399,40,0.005,41,0.954,42,1.764,47,1.764,57,1.695,75,0.868,78,0.002,79,0.002,80,0.002,83,1.536,85,0.524,89,1.225,90,1.306,97,1.646,102,0.864,104,0.84,108,0.463,114,0.796,117,0.659,129,2.4,134,0.884,140,1.82,149,1.129,158,0.969,159,1.848,164,1.281,179,1.185,183,0.568,194,1.526,209,2.025,218,1.408,225,0.983,234,2.306,240,0.914,241,0.983,247,2.597,250,1.246,253,1.209,280,1.536,281,1.33,283,1.012,285,1.353,290,0.796,299,2.053,309,1.335,310,1.996,328,0.983,333,1.902,334,1.254,368,0.983,380,1.918,384,0.829,399,1.184,411,1.012,417,1.076,439,1.043,443,1.536,444,1.607,446,1.915,447,1.607,453,1.683,455,2.052,459,1.837,464,1.494,465,1.583,476,2.174,524,1.969,525,1.513,530,1.29,531,1.29,532,1.29,533,1.29,539,1.559,541,1.224,545,1.646,547,1.29,548,1.536,553,1.29,557,1.987,561,1.987,571,1.29,572,1.683,575,1.268,576,2.014,589,1.268,591,1.012,595,1.29,596,1.35,599,1.29,634,0.764,636,1.028,665,0.997,703,1.559,704,1.959,705,2.014,719,0.864,720,1.165,734,1.506,736,0.997,738,1.959,741,2.136,744,1.128,752,1.043,760,1.277,766,1.146,774,1.788,782,0.983,787,1.526,789,2.588,798,1.076,812,1.268,817,1.268,823,1.823,824,1.491,825,1.709,827,1.918,879,1.184,921,1.204,935,1.601,994,1.11,1047,1.224,1048,1.29,1049,1.29,1050,1.29,1052,2.305,1054,0.969,1056,1.043,1172,2.201,1187,2.341,1204,1.224,1205,1.224,1222,2.224,1233,1.246,1253,1.165,1255,1.794,1309,2.305,1316,1.583,1418,1.886,1430,2.583,1454,1.449,1599,2.417,1620,1.224,1654,1.709,1679,1.268,1723,1.29,1736,1.204,1767,1.29,1782,2.152,1871,0.489,1872,1.268,1873,1.314,1874,1.987,1875,1.823,1876,1.559,1877,1.29,1878,1.268,1879,1.29,1880,1.059,1881,0.955,1882,1.043,1883,2.423,1884,1.268,1885,1.246,1886,2.713,1887,1.268,1888,1.268,1889,1.128,1890,1.29,1891,1.29,1892,1.765,1893,1.888,1894,1.146,1895,1.798,1896,3.264,1897,1.314,1898,1.886,1899,1.165,1900,2.423,1901,1.314,1902,2.023,1903,1.987,1904,1.987,1905,1.314,1906,1.987,1907,2.339,1908,1.886,1909,1.314,1910,1.128,1911,1.314,1912,1.224,1913,1.224,1914,1.873,1915,1.184,1916,1.314,1917,1.314,1918,0.983,1919,1.314,1920,1.268,1921,1.918,1922,1.987,1923,1.29,1924,1.987,1925,1.314,1926,1.268,1927,1.314,1928,2.549,1929,1.314,1930,1.29,1931,1.314,1932,1.987,1933,1.268,1934,1.128,1935,1.29,1936,1.29,1937,1.314,1938,1.314,1939,1.314,1940,1.314,1941,1.29,1942,2.023,1943,1.314,1944,1.29,1945,1.246,1946,1.314,1947,1.314,1948,1.631,1949,1.854,1950,1.29,1951,1.959,1952,1.314,1953,1.29,1954,1.29,1955,1.314,1956,1.314,1957,1.314,1958,1.29,1959,1.314,1960,1.11,1961,1.204,1962,1.29,1963,1.314,1964,1.314,1965,1.314,1966,1.314,1967,1.268,1968,1.29,1969,1.268,1970,1.268,1971,1.314,1972,2.023,1973,2.722,1974,1.314,1975,1.29,1976,1.314,1977,1.314,1978,1.314,1979,1.314,1980,1.314,1981,1.657,1982,1.076,1983,2.023,1984,2.023,1985,2.583,1986,1.952,1987,1.669,1988,1.952,1989,2.771,1990,1.314,1991,1.886,1992,2.023,1993,1.314,1994,1.314,1995,2.261,1996,1.918,1997,2.261,1998,1.29,1999,1.268,2000,1.043,2001,1.29,2002,1.268,2003,1.246,2004,1.059,2005,1.314,2006,1.128]],["title/interfaces/IZoomPluginConfiguration.html",[40,0.003,2869,4.212]],["body/interfaces/IZoomPluginConfiguration.html",[0,0.077,3,0.187,4,0.175,5,0.175,10,0.193,11,0.431,12,1.084,20,0.005,21,0.54,22,0.975,24,0.181,28,0.39,39,0.259,40,0.002,41,0.531,55,2.498,75,0.948,78,0.003,79,0.003,80,0.002,83,2.08,89,1.874,90,0.934,94,1.539,96,2.695,97,1.296,103,2.182,104,1.724,110,1.056,112,1.842,117,1.351,124,1.798,140,1.531,143,1.641,144,2.182,161,1.875,164,1.224,179,0.984,183,0.84,192,2.024,194,1.07,222,2.745,227,2.533,254,3.475,297,1.849,309,1.49,310,2.229,315,3.083,316,3.083,317,1.411,320,2.095,332,2.382,336,1.93,347,3.506,436,2.564,443,2.046,444,1.543,447,1.543,459,1.654,465,2.108,476,1.958,524,1.278,545,2.064,583,2.564,584,2.564,587,2.878,596,1.798,597,1.694,615,3.946,636,0.987,664,2.5,700,3.946,703,2.077,752,1.543,787,1.841,790,2.709,825,1.641,882,2.439,935,1.26,1010,2.382,1123,2.975,1124,2.975,1156,2.634,1172,1.543,1173,2.79,1181,2.975,1182,2.975,1195,2.878,1196,2.975,1253,2.389,1357,1.81,1454,1.391,1460,3.344,1503,3.701,1640,2.5,1669,3.205,1670,3.083,1672,2.328,1682,3.946,1721,3.946,1736,1.78,1779,5.474,1790,4.531,1800,3.701,1846,2.328,1871,0.723,1886,1.667,1895,1.748,1907,1.842,2003,2.555,2013,2.182,2018,2.5,2028,2.095,2039,2.564,2051,2.276,2088,2.79,2127,2.907,2221,3.205,2222,4.446,2451,3.946,2480,3.946,2765,5.135,2793,3.205,2869,6.788,2870,4.272,2871,7.721,2872,5.927,2873,5.927,2874,5.927,2875,8.588,2876,3.946,2877,3.946,2878,4.272,2879,3.506,2880,3.946,2881,4.272,2882,4.272,2883,3.946,2884,4.272,2885,4.272,2886,4.272,2887,4.272,2888,4.272,2889,4.272,2890,4.272,2891,3.701,2892,5.896,2893,4.272,2894,4.272,2895,4.272,2896,4.272,2897,4.272,2898,4.272,2899,4.272,2900,4.272,2901,4.272,2902,4.272,2903,4.272,2904,3.701,2905,4.272,2906,4.272,2907,4.272,2908,4.272,2909,3.946,2910,4.272,2911,4.272,2912,4.272,2913,4.272,2914,4.272,2915,4.272,2916,4.272,2917,4.272,2918,4.272,2919,4.272,2920,7.13,2921,4.272,2922,4.272,2923,4.272,2924,4.272,2925,4.272,2926,4.272,2927,4.272,2928,5.927,2929,4.272,2930,4.272,2931,4.272,2932,4.272,2933,4.272,2934,3.946,2935,4.272,2936,4.272,2937,4.272,2938,4.272,2939,4.272,2940,4.272,2941,4.272,2942,4.272,2943,4.272,2944,4.272,2945,4.272,2946,3.946,2947,4.446,2948,3.946,2949,4.272,2950,4.272,2951,4.272,2952,4.272,2953,4.272,2954,6.806,2955,5.927,2956,7.35,2957,4.272,2958,5.927,2959,6.368,2960,5.927,2961,4.272,2962,5.474,2963,4.272,2964,5.927,2965,6.806,2966,4.272,2967,4.272,2968,4.272,2969,4.272,2970,4.272,2971,4.272,2972,4.272,2973,3.946,2974,4.272,2975,4.272,2976,4.272]],["title/classes/InteractionLabelPlugin.html",[0,0.082,2323,3.951]],["body/classes/InteractionLabelPlugin.html",[0,0.104,2,1.116,3,0.18,4,0.169,5,0.169,10,0.185,11,0.419,14,1.116,17,1.332,19,1.086,20,0.005,21,0.729,22,0.676,24,0.282,28,0.383,39,0.18,41,0.829,42,1.937,47,1.101,54,1.657,55,2.214,78,0.002,79,0.003,80,0.002,83,1.886,85,0.745,90,0.91,94,1.806,95,2.404,96,3.031,107,1.406,108,0.821,110,1.647,115,3.525,124,1.75,129,1.319,134,0.693,144,2.099,146,3.544,155,2.829,161,1.826,164,0.884,167,3.375,175,1.776,179,1.196,180,2.239,183,0.808,192,1.647,222,1.903,227,2.717,254,2.946,269,1.75,285,0.912,297,1.8,313,3.561,314,3.561,317,1.358,320,2.016,329,3.083,336,1.338,404,2.143,436,2.467,443,2.856,444,2.927,446,1.939,447,2.407,464,1.132,465,2.99,466,2.862,471,2.862,472,2.862,473,2.862,474,2.862,476,1.358,545,2.309,583,2.467,584,2.467,587,2.769,596,2.022,597,1.63,607,3.074,633,3.217,634,1.525,636,0.95,673,3.216,734,1.786,760,1.179,775,4.164,776,2.291,877,3.217,879,1.684,921,1.713,935,1.702,936,3.561,950,4.111,1123,2.862,1124,2.862,1133,3.561,1167,3.796,1172,1.484,1173,2.684,1200,4.328,1253,1.657,1426,4.111,1440,3.716,1460,4.516,1461,5.775,1467,3.561,1468,3.561,1472,5.775,1500,3.561,1620,1.742,1669,3.083,1670,2.966,1672,2.239,1673,3.796,1678,3.796,1691,2.016,1692,4.111,1736,1.713,1800,5.775,2015,2.291,2034,3.557,2037,4.025,2041,2.534,2127,2.829,2219,3.083,2220,4.328,2247,2.684,2283,3.217,2323,5.775,2449,5.328,2463,3.796,2465,4.111,2466,3.796,2474,5.769,2522,3.796,2879,3.373,2891,5.775,2904,3.561,2977,7.893,2978,6.44,2979,5.769,2980,7.441,2981,4.588,2982,4.588,2983,4.588,2984,4.111,2985,3.561,2986,4.111,2987,4.588,2988,4.588,2989,4.111,2990,4.588,2991,4.588,2992,4.111,2993,6.44,2994,4.588,2995,4.111,2996,5.769,2997,3.796,2998,6.44,2999,4.588,3000,4.111,3001,4.588,3002,4.111,3003,4.111,3004,4.111,3005,4.111,3006,5.328,3007,4.111,3008,4.111,3009,4.588,3010,4.588,3011,4.588,3012,4.588,3013,4.588,3014,7.441,3015,4.588,3016,4.588,3017,4.588,3018,4.588,3019,4.588,3020,4.588,3021,6.44,3022,4.588,3023,4.588,3024,4.588,3025,4.588,3026,4.588,3027,4.588,3028,4.588,3029,4.588,3030,4.111,3031,6.44,3032,4.588,3033,7.441,3034,4.588,3035,4.588,3036,4.111,3037,4.588,3038,6.44,3039,8.497,3040,4.588,3041,6.44,3042,4.588,3043,4.588,3044,4.588,3045,4.588,3046,4.588,3047,4.588,3048,4.588,3049,4.588,3050,4.588,3051,4.111,3052,4.588,3053,4.588,3054,4.588,3055,4.588]],["title/classes/InteractionLinePlugin.html",[0,0.082,2325,3.951]],["body/classes/InteractionLinePlugin.html",[0,0.131,2,1.305,3,0.21,4,0.197,5,0.197,10,0.217,11,0.466,12,0.674,17,1.332,20,0.005,21,0.607,24,0.272,28,0.384,39,0.21,41,0.899,42,1.72,44,3.76,49,3.76,55,2.407,57,1.171,78,0.003,79,0.004,80,0.003,83,1.817,85,0.871,90,1.012,94,1.82,95,2.675,96,3.287,107,1.171,108,0.752,110,1.586,115,3.724,117,1.095,124,1.457,134,0.5,149,2.229,161,1.52,175,1.862,179,1.241,183,0.945,192,1.187,222,2.225,227,2.604,254,3.278,269,1.947,285,1.066,297,2.003,317,1.587,320,2.356,436,2.883,443,2.964,444,3.051,446,2.103,447,2.611,464,1.323,465,3.092,466,3.345,471,3.345,472,3.345,473,3.345,474,3.345,476,1.587,545,2.193,583,2.883,584,2.883,587,3.236,596,2.193,597,1.905,607,2.56,633,3.76,734,1.987,760,1.378,877,3.76,879,1.968,921,2.002,935,1.893,936,4.162,1123,3.345,1124,3.345,1172,1.734,1173,3.137,1200,4.816,1253,1.936,1440,3.579,1460,5.025,1461,6.264,1467,4.162,1468,4.162,1620,2.036,1669,3.604,1670,3.467,1672,2.617,1736,2.002,1816,4.804,1820,4.804,2127,3.148,2219,3.604,2220,4.816,2325,6.264,2449,7.127,2463,4.436,2879,3.943,2891,6.264,2904,4.162,2977,7.718,2979,6.42,2985,4.162,2986,4.804,2989,4.804,2992,4.804,2995,4.804,2996,6.42,2997,4.436,3000,4.804,3002,4.804,3003,4.804,3004,4.804,3005,4.804,3006,5.929,3007,4.804,3008,4.804,3056,7.166,3057,5.362,3058,5.362,3059,5.362,3060,5.362,3061,5.362,3062,5.362,3063,7.166,3064,5.362,3065,5.362,3066,5.362,3067,5.362,3068,5.362,3069,8.07,3070,5.362,3071,5.362,3072,4.436,3073,5.362,3074,5.362,3075,5.362,3076,5.362,3077,5.362,3078,5.362]],["title/components/LegendComponent.html",[477,2.237,513,2.812]],["body/components/LegendComponent.html",[0,0.118,3,0.215,4,0.201,5,0.201,8,1.567,10,0.221,11,0.473,13,1.391,17,1.302,20,0.005,21,0.923,24,0.33,28,0.285,39,0.215,52,1.843,57,1.197,78,0.003,79,0.004,80,0.003,90,1.277,94,1.772,104,2.357,107,1.898,108,0.81,110,1.609,134,0.866,149,1.246,161,2.463,179,0.71,183,0.966,441,5.136,477,3.194,478,3.027,479,4.13,482,4.447,484,3.113,485,5.643,486,5.643,487,5.549,488,3.667,489,2.408,490,3.308,493,4.388,495,4.254,496,2.873,497,5.083,498,3.308,499,3.308,500,2.947,501,3.308,502,3.027,503,2.803,504,3.308,505,3.027,506,3.308,507,2.873,508,3.308,509,3.027,510,3.308,511,2.803,512,3.308,513,4.799,514,3.308,515,3.027,516,3.308,517,3.027,518,3.308,519,3.113,520,2.947,521,3.206,522,3.308,722,7.214,738,2.811,815,3.549,821,4.85,823,2.012,824,1.646,825,1.886,854,5.483,855,5.483,871,4.887,888,3.684,907,3.684,1112,7.482,1135,5.643,2000,2.352,2037,3.016,2118,5.799,2797,6.131,3079,5.481,3080,7.271,3081,8.159,3082,8.159,3083,8.159,3084,8.159,3085,5.481,3086,5.481,3087,8.818,3088,6.514,3089,6.514,3090,6.75,3091,7.271,3092,5.481,3093,5.481,3094,9.295,3095,5.481,3096,6.514,3097,5.481,3098,6.514,3099,5.481,3100,7.271,3101,7.271,3102,5.481,3103,5.481,3104,5.481,3105,5.481,3106,5.481]],["title/classes/LegendInteractionAssist.html",[0,0.082,3107,4.561]],["body/classes/LegendInteractionAssist.html",[0,0.09,2,0.685,3,0.11,4,0.103,5,0.103,8,0.606,10,0.18,11,0.291,12,1.153,13,1.308,14,0.685,17,1.127,19,1.736,20,0.005,21,0.902,22,1.08,24,0.319,28,0.336,30,2.535,32,1.314,34,0.516,39,0.175,54,1.016,55,2.276,59,3.695,75,0.639,78,0.001,79,0.002,80,0.001,85,0.725,86,2.184,90,1.252,94,1.809,96,1.146,107,0.975,108,0.784,110,1.623,117,1.29,124,1.508,129,0.809,134,0.907,140,1.654,149,0.64,158,2.661,161,0.798,164,0.613,175,1.654,179,1.225,183,0.496,192,2.048,222,2.621,227,2.599,234,2.502,240,2.078,241,1.925,247,2.209,266,1.819,269,1.213,279,3.499,280,1.601,281,1.143,283,1.983,290,0.694,297,1.551,317,0.833,320,1.236,333,2.643,334,1.898,336,1.619,341,2.328,360,2.328,379,1.646,380,1.087,394,3.065,395,1.891,396,1.819,399,1.033,400,3.282,411,2.162,439,0.91,446,1.163,453,0.953,459,0.704,463,2.069,464,1.101,482,2.001,525,1.36,572,1.88,575,1.754,576,2.039,578,4.591,580,1.05,581,1.698,583,1.513,584,1.513,585,2.184,590,1.439,591,0.883,596,1.213,597,1,660,1.819,709,1.439,722,3.465,731,1.891,732,5.438,735,4.084,738,2.043,744,3.174,752,0.91,754,4.83,760,1.624,764,2.886,767,1.891,769,1.891,772,2.736,773,3.812,774,1.997,775,4.454,776,3.155,778,1.891,780,4.245,781,1.891,783,1.891,784,3,785,3,786,4.245,787,0.631,788,3,789,1.851,790,1.598,793,2.4,794,4.245,802,1.405,808,2.908,823,1.033,824,0.845,825,0.968,827,1.087,841,1.439,932,1.923,936,3.465,994,0.968,1047,1.695,1052,1.512,1146,2.886,1150,1.405,1172,0.91,1173,2.611,1185,1.973,1187,1.536,1188,2.328,1200,1.891,1201,1.973,1204,1.695,1222,2.319,1256,2.694,1292,2.328,1370,2.328,1372,3.465,1454,1.843,1506,3.282,1639,5.659,1652,2.984,1881,0.833,1886,0.984,1926,1.106,1967,1.106,1968,1.126,1973,1.126,2018,1.475,2035,1.554,2037,3.187,2046,3.311,2117,2.886,2341,2.069,2601,2.521,2759,2.521,3107,5.659,3108,8.411,3109,2.521,3110,6.317,3111,6.317,3112,4.464,3113,6.317,3114,4.464,3115,4.464,3116,2.814,3117,7.355,3118,4.464,3119,4.464,3120,2.814,3121,2.814,3122,5.549,3123,2.814,3124,2.814,3125,4.464,3126,2.814,3127,6.317,3128,4.464,3129,2.814,3130,2.814,3131,2.814,3132,2.814,3133,4.464,3134,2.814,3135,3.693,3136,4.464,3137,2.814,3138,4.464,3139,2.814,3140,2.328,3141,2.814,3142,2.184,3143,2.814,3144,4.464,3145,4.464,3146,3.693,3147,4.464,3148,6.888,3149,4.464,3150,4.464,3151,2.814,3152,4.464,3153,3.693,3154,2.814,3155,2.814,3156,2.521,3157,2.814,3158,2.814,3159,4.464,3160,2.521,3161,2.814,3162,2.814,3163,2.814,3164,2.814,3165,2.814,3166,5.549,3167,2.521,3168,2.814,3169,2.814,3170,2.814,3171,2.814,3172,2.814,3173,4.464,3174,2.814,3175,4.464,3176,4.464,3177,4.464,3178,2.814,3179,2.814,3180,2.814,3181,2.814,3182,3.693,3183,3.999,3184,2.814,3185,2.814,3186,4.464,3187,2.814,3188,4.464,3189,2.814,3190,2.814,3191,2.814,3192,5.549,3193,2.814,3194,2.814,3195,2.814,3196,2.814,3197,2.814,3198,2.814,3199,2.814,3200,2.814,3201,2.814,3202,4.464,3203,2.814,3204,2.814,3205,2.814,3206,2.814,3207,2.814,3208,2.814,3209,4.464,3210,2.814,3211,2.814,3212,2.814,3213,5.549,3214,2.814,3215,2.814,3216,5.549,3217,2.814,3218,2.814,3219,2.521,3220,2.814,3221,2.814,3222,2.814,3223,2.814,3224,2.814,3225,2.814,3226,2.814,3227,4.464,3228,2.521,3229,2.521,3230,2.814,3231,2.814,3232,4.464,3233,4.464,3234,2.521,3235,2.814,3236,2.814,3237,2.814,3238,2.814,3239,4.464,3240,5.549,3241,2.814,3242,4.464,3243,2.814,3244,2.814,3245,2.814,3246,2.814,3247,2.814,3248,2.814,3249,2.328,3250,4.464,3251,2.814,3252,2.814,3253,2.814,3254,2.814,3255,2.814,3256,2.814,3257,2.814,3258,2.814,3259,2.814,3260,2.521,3261,2.814,3262,2.814,3263,2.814,3264,2.814,3265,2.814,3266,2.814,3267,2.814,3268,2.814,3269,5.549,3270,2.814,3271,2.814,3272,2.814,3273,2.814,3274,2.814,3275,4.464,3276,2.814,3277,2.814,3278,2.814,3279,2.814,3280,2.814,3281,5.549,3282,2.814,3283,6.888,3284,4.464,3285,2.814,3286,5.549,3287,2.814,3288,2.814,3289,2.814,3290,4.464,3291,2.814,3292,6.317,3293,2.814,3294,2.814,3295,4.464,3296,4.464,3297,2.521,3298,2.814,3299,4.464,3300,2.814,3301,2.814,3302,2.814,3303,2.814,3304,4.464,3305,4.464,3306,2.814]],["title/components/LegendSeriesComponent.html",[477,2.237,515,2.812]],["body/components/LegendSeriesComponent.html",[0,0.092,3,0.151,4,0.141,5,0.141,8,1.222,10,0.155,13,1.423,14,0.935,17,1.364,19,1.761,20,0.005,21,0.971,22,1.168,24,0.347,28,0.311,39,0.222,52,2.01,55,2.066,78,0.002,79,0.003,80,0.002,85,1.485,90,1.12,94,1.782,104,2.569,107,1.238,108,0.773,110,1.899,117,0.785,124,1.541,129,1.105,134,0.821,140,2.023,149,0.874,159,1.255,161,2.108,175,1.812,179,1.027,183,0.677,192,1.836,194,1.779,227,1.045,269,1.541,333,2.319,334,1.174,394,2.123,404,1.796,417,2.862,421,5.079,459,1.859,477,2.491,478,2.123,479,3.22,480,8.254,482,4.319,484,2.183,485,4.4,486,4.4,487,5.235,488,3.48,489,1.689,490,2.32,491,3.537,493,3.422,495,2.984,496,2.015,497,4.349,498,2.32,499,2.32,500,2.067,501,2.32,502,2.123,503,1.966,504,2.32,505,2.123,506,2.32,507,2.015,508,2.32,509,2.123,510,2.32,511,1.966,512,2.32,513,4.379,514,2.32,515,4.106,516,2.32,517,2.123,518,2.32,519,2.183,520,2.067,521,2.249,522,2.32,738,2.179,752,1.243,770,2.352,771,1.723,793,2.067,815,2.767,821,4.598,823,1.411,824,1.154,825,1.323,853,5.573,862,3.976,896,3.18,1004,3.18,1106,5.079,1112,5.573,1118,5.079,1135,5.771,1163,5.771,1164,3.795,1266,5.079,1267,5.079,1275,3.18,1670,2.485,1886,2.355,1898,3.01,1987,2.286,2014,3.795,2797,6.128,3088,8.192,3089,6.035,3090,3.18,3096,7.104,3307,8.254,3308,3.844,3309,5.67,3310,5.67,3311,7.435,3312,7.435,3313,7.435,3314,7.435,3315,6.736,3316,7.929,3317,7.929,3318,5.67,3319,5.67,3320,5.67,3321,3.844,3322,3.844,3323,5.67,3324,3.844,3325,3.844,3326,7.435,3327,3.844,3328,7.435,3329,3.844,3330,5.67,3331,3.844,3332,7.435,3333,5.67,3334,3.844,3335,3.844,3336,3.844,3337,3.844,3338,3.844,3339,3.844,3340,3.844,3341,5.67,3342,3.844,3343,3.844,3344,3.844,3345,3.844,3346,3.844,3347,3.844,3348,3.844,3349,3.844,3350,3.844,3351,3.844,3352,3.444,3353,5.67,3354,3.844,3355,7.435,3356,3.844,3357,6.736,3358,3.844,3359,5.67,3360,3.844,3361,3.844,3362,5.67,3363,3.844,3364,3.844,3365,3.844,3366,3.844,3367,3.844,3368,3.844,3369,3.844,3370,3.844,3371,3.844,3372,3.444,3373,3.844,3374,5.67,3375,3.844,3376,3.844,3377,3.844,3378,3.844,3379,3.844,3380,3.844,3381,3.844,3382,3.844,3383,3.844,3384,3.844,3385,3.844,3386,3.844,3387,3.844]],["title/classes/LineAccessors.html",[0,0.082,2246,3.57]],["body/classes/LineAccessors.html",[0,0.147,2,1.365,3,0.22,4,0.206,5,0.206,7,2.167,8,1.591,10,0.227,11,0.609,12,1.268,13,1.376,14,2.008,15,3.934,16,5.033,17,1.309,19,1.329,20,0.005,21,0.934,22,0.827,23,4.281,24,0.313,28,0.323,29,3.87,30,4.194,31,2.941,32,2.621,33,1.821,34,1.355,37,2.451,38,1.503,39,0.344,40,0.004,41,0.977,42,1.347,47,1.347,52,2.31,53,2.981,54,2.026,55,1.462,57,1.803,60,3.771,62,3.771,72,2.567,73,2.941,74,2.941,75,1.182,76,3.282,77,3.282,78,0.003,79,0.004,80,0.003,85,0.911,94,1.728,107,1.915,108,0.523,110,1.635,115,2.328,124,1.525,132,2.667,134,0.523,144,2.567,159,2.071,184,3.688,241,2.25,281,1.016,455,2.501,757,2.954,774,1.365,777,2.465,802,3.688,809,4.607,815,3.604,932,3.182,1056,1.815,1150,4.122,1394,5.894,1871,1.119,1875,2.06,1880,1.843,1881,1.661,1882,1.815,1949,2.094,1951,1.815,1960,3.22,2079,4.438,2081,3.971,2139,1.661,2149,4.319,2240,6.807,2241,6.448,2242,6.448,2243,5.547,2244,5.894,2245,4.355,2246,6.39,2247,3.282,2248,3.282,2249,5.731,2250,5.731,2251,5.731,2252,5.178,2253,5.429,2254,5.731,2255,5.731,2256,5.731,2257,5.178,2258,5.429,2259,5.731,2260,5.731,2261,5.429,2262,4.355,2263,4.355,2264,4.355,2796,3.5,2868,4.642,3388,7.384,3389,5.611,3390,5.611]],["title/classes/LineSelectSeriesInteractionStrategy.html",[0,0.082,2105,3.176]],["body/classes/LineSelectSeriesInteractionStrategy.html",[0,0.084,2,1.268,3,0.204,4,0.191,5,0.191,8,1.515,10,0.344,11,0.457,12,1.197,13,1.326,17,1.22,19,1.883,20,0.005,21,0.9,22,1.255,24,0.348,28,0.373,38,1.396,39,0.204,40,0.003,55,1.358,57,1.535,78,0.003,79,0.004,80,0.003,94,1.77,97,2.161,107,1.138,108,0.485,110,1.153,117,1.064,124,1.91,126,3.088,128,2.959,129,1.498,134,0.655,146,2.289,149,1.598,159,1.153,164,1.307,175,1.603,179,1.103,183,0.918,192,1.153,209,2.346,218,2.255,227,2.314,234,2.497,267,4.044,268,4.653,269,1.91,270,4.544,272,4.544,273,4.544,285,1.862,290,1.962,292,4.242,294,5.12,295,4.545,296,4.545,297,2.661,299,2.38,302,4.242,303,3.431,305,4.242,306,4.169,308,5.975,317,1.542,319,5.815,320,2.289,327,2.543,328,1.588,332,2.602,337,2.202,384,1.339,385,4.668,398,6.581,399,3.264,400,5.848,410,4.668,411,2.875,545,1.91,607,2.487,633,3.653,636,1.078,734,1.968,787,1.577,789,1.738,882,2.664,935,1.377,1172,2.876,1187,2.419,1307,3.831,1308,3.653,1654,1.793,1790,2.877,1791,2.877,1792,4.31,1898,1.978,2028,3.088,2079,2.802,2081,5.29,2105,4.385,2545,4.31,2817,5.848,2818,3.831,2946,4.31,3391,8.89,3392,8.89,3393,7.954,3394,5.815,3395,5.21,3396,5.21,3397,5.21,3398,6.297,3399,7.954,3400,5.21,3401,5.21,3402,5.21,3403,5.21,3404,5.21,3405,5.21,3406,5.21,3407,5.21,3408,5.21,3409,5.21,3410,7.028,3411,7.954,3412,4.044,3413,5.21,3414,5.21,3415,5.21,3416,5.21,3417,4.668,3418,5.21,3419,5.21,3420,4.668,3421,5.21,3422,5.21]],["title/classes/LinearScale.html",[0,0.082,2321,4.212]],["body/classes/LinearScale.html",[0,0.078,2,1.178,3,0.19,4,0.178,5,0.178,10,0.196,11,0.435,14,1.178,17,1.41,19,2.319,20,0.005,21,1.108,22,1.443,24,0.381,28,0.262,39,0.19,41,0.745,75,0.694,78,0.002,79,0.003,80,0.002,85,0.786,91,3.504,94,1.882,97,1.817,107,1.46,108,0.835,115,4.207,124,1.316,132,3.129,134,0.769,140,1.988,164,1.4,175,1.988,192,1.918,216,4.818,269,1.817,280,2.604,291,4.441,309,0.95,336,1.412,673,2.418,760,1.968,1883,3.063,1893,2.339,1918,2.93,2127,3.807,2136,4.349,2137,3.504,2138,2.75,2147,3.911,2154,5.372,2155,5.372,2157,3.595,2159,4.621,2160,4.621,2161,5.108,2162,3.911,2163,3.911,2167,2.832,2168,4.479,2170,5.557,2171,3.911,2283,5.791,2284,4.916,2285,5.791,2317,3.56,2321,5.531,3423,8.96,3424,4.006,3425,5.99,3426,5.531,3427,5.99,3428,5.189,3429,4.338,3430,4.338,3431,4.338,3432,4.338,3433,4.338,3434,4.842,3435,4.842,3436,4.338,3437,4.842,3438,4.338,3439,4.338,3440,4.338,3441,4.338,3442,4.338,3443,4.338,3444,4.338,3445,4.338,3446,4.338,3447,4.338,3448,4.338,3449,4.338,3450,4.338,3451,4.338,3452,4.338,3453,4.842,3454,4.338,3455,4.338,3456,4.006,3457,4.338,3458,4.338,3459,4.006,3460,4.842]],["title/classes/MappedValueProvider.html",[0,0.082,3461,4.561]],["body/classes/MappedValueProvider.html",[0,0.147,2,1.674,3,0.269,4,0.253,5,0.253,8,1.811,10,0.278,11,0.547,13,1.17,14,1.674,17,1.246,19,1.629,20,0.005,21,0.778,22,1.014,24,0.344,28,0.269,39,0.269,54,2.484,55,1.793,75,0.985,78,0.003,79,0.004,80,0.003,85,1.117,94,1.761,107,1.502,108,0.903,134,0.783,175,1.386,179,1.089,183,1.212,269,2.284,291,3.699,303,4.102,627,3.621,774,1.674,841,5.043,1052,3.074,1056,3.057,1635,3.303,1884,3.303,1893,2.359,2006,3.305,2864,5.339,3461,7.529,3462,9.451,3463,4.824,3464,6.523,3465,6.523,3466,6.523,3467,6.523,3468,6.179,3469,6.523,3470,6.879,3471,9.074,3472,6.163,3473,6.879,3474,6.163,3475,5.692,3476,6.879,3477,6.879]],["title/classes/MarkerUtils.html",[0,0.082,3478,4.561]],["body/classes/MarkerUtils.html",[0,0.139,2,1.155,3,0.186,4,0.174,5,0.174,10,0.266,11,0.429,12,0.953,17,1.181,19,1.794,20,0.005,21,0.857,22,1.116,24,0.327,28,0.358,34,0.871,38,1.271,39,0.186,42,1.139,47,1.139,52,1.671,53,3.458,78,0.002,79,0.003,80,0.002,91,2.487,94,1.462,96,4.031,97,2.419,102,1.271,107,1.995,108,0.802,109,1.583,110,1.05,114,1.17,117,0.969,124,1.791,134,0.892,135,3.189,159,1.05,164,1.181,175,1.527,179,1.06,192,1.05,209,2.256,218,1.869,227,2.53,269,1.791,281,1.482,285,1.628,296,3.908,297,2.552,306,4.509,317,1.404,318,5.454,320,2.896,326,4.789,327,2.316,328,1.446,334,1.781,384,1.947,399,2.781,411,2.7,541,1.801,545,2.629,607,2.265,633,3.327,664,3.456,705,2.703,787,1.479,800,3.456,935,1.742,949,3.489,994,2.607,1119,3.489,1172,2.648,1186,6.354,1187,2.607,1205,1.801,1502,5.117,1527,4.251,1645,6.911,1652,3.545,1687,3.147,1790,3.641,1898,1.801,1949,2.461,2029,4.918,2161,2.552,2313,4.251,2466,3.926,2545,3.926,2747,5.906,2765,3.683,2823,3.327,2883,3.926,2920,3.926,3051,4.251,3417,4.251,3478,5.906,3479,8.904,3480,4.745,3481,7.576,3482,7.576,3483,6.593,3484,6.593,3485,6.593,3486,4.745,3487,8.187,3488,4.745,3489,4.745,3490,6.787,3491,8.904,3492,4.745,3493,8.187,3494,7.707,3495,6.593,3496,4.745,3497,6.593,3498,4.623,3499,6.593,3500,5.906,3501,6.593,3502,4.745,3503,4.745,3504,4.745,3505,4.745,3506,4.745,3507,4.745,3508,4.745,3509,6.593,3510,4.745,3511,4.745,3512,6.593,3513,4.745,3514,4.745,3515,4.745,3516,7.576,3517,4.745,3518,4.745,3519,4.745,3520,4.745,3521,4.745,3522,4.745,3523,4.745,3524,6.787,3525,6.593,3526,4.745,3527,4.745,3528,4.745,3529,4.745,3530,4.745,3531,4.745,3532,4.745,3533,6.593,3534,4.745,3535,4.745,3536,4.745,3537,4.745,3538,4.745,3539,4.745,3540,6.593,3541,4.745,3542,4.745,3543,4.745,3544,4.745]],["title/classes/MissingDataLineRendererConfig.html",[0,0.082,3545,4.561]],["body/classes/MissingDataLineRendererConfig.html",[0,0.113,2,1.696,3,0.273,4,0.256,5,0.256,8,1.826,10,0.282,11,0.551,12,1.259,17,1.303,20,0.005,24,0.265,28,0.332,39,0.273,78,0.004,79,0.004,80,0.004,84,4.35,85,1.132,94,1.844,104,2.379,107,2.074,108,0.885,124,2.302,143,2.916,149,2.298,161,2.402,163,6.246,164,0.957,172,5.768,183,1.228,299,2.824,336,2.472,1934,3.191,1961,3.163,2081,3.749,2094,5.695,2098,5.695,2108,5.902,2801,5.941,3545,7.591,3546,9.729,3547,7.591,3548,6.972,3549,7.591,3550,6.246]],["title/classes/NoopAccessors.html",[0,0.082,2268,4.212]],["body/classes/NoopAccessors.html",[0,0.12,2,1.805,3,0.291,4,0.273,5,0.273,7,2.865,8,1.895,10,0.3,11,0.572,12,1.219,13,1.378,14,2.281,17,1.287,20,0.005,24,0.334,28,0.291,34,1.613,38,1.987,39,0.344,40,0.004,41,0.826,56,3.465,72,3.393,75,1.26,78,0.004,79,0.004,80,0.004,94,1.792,159,1.642,1056,2.399,1875,2.723,1880,2.436,1881,2.195,1882,2.399,2266,7.275,2267,8.684,2268,7.276,2276,7.878,3551,7.417]],["title/classes/NoopRenderer.html",[0,0.082,3552,4.561]],["body/classes/NoopRenderer.html",[0,0.064,2,0.967,3,0.156,4,0.214,5,0.146,10,0.382,11,0.378,12,1.251,13,1.315,17,1.353,19,2.259,20,0.005,21,1.088,22,1.392,24,0.372,28,0.329,38,1.065,39,0.156,41,0.647,53,1.436,75,0.57,78,0.002,79,0.003,80,0.002,85,1.444,90,0.821,94,1.845,96,2.367,97,1.579,107,1.65,108,0.749,110,1.286,115,3.99,117,0.812,128,2.258,129,1.143,132,3.21,134,0.782,143,2,149,1.322,159,0.88,164,1.282,175,1.938,179,1.152,183,0.7,184,3.774,192,1.673,194,1.304,209,2.65,216,4.063,218,2.52,242,2.672,247,2.686,266,4.441,269,1.579,270,5.607,272,3.757,273,4.885,279,2.774,280,2.129,281,1.052,283,1.248,285,1.939,290,2.071,294,4.063,295,4.459,296,4.399,297,2.666,299,2.808,303,2.837,306,4.213,317,1.177,327,1.941,328,1.211,333,2.347,336,2.004,343,2.48,368,1.771,384,2.158,394,2.196,395,2.672,396,2.571,411,1.248,439,1.286,545,1.579,592,2.837,705,1.72,719,1.065,734,1.286,738,2.933,772,2.821,787,1.304,793,2.138,802,1.986,841,3.864,935,1.051,1150,1.986,1156,3.21,1252,2.571,1255,1.436,1279,4.885,1309,2.56,1357,1.509,1454,2.004,1489,2.837,1501,2.48,1635,2.7,1638,2.923,1653,2.923,1795,2.196,1823,2.923,1886,2.402,1894,2.685,1895,1.051,1910,1.39,1912,1.509,1913,1.509,1914,1.797,1915,1.46,1918,2.558,1960,1.368,1961,1.484,1982,1.938,1991,1.509,1995,2.169,2015,1.986,2068,2.258,2077,2.48,2109,3.4,2124,2.326,2127,3.32,2156,3.4,2266,3.086,2405,2.923,2599,4.273,2717,3.906,2790,2.571,2814,2.923,2815,4.441,2840,2.923,2841,5.607,2947,2.672,3498,2.788,3552,5.207,3553,8.039,3554,4.511,3555,5.865,3556,4.511,3557,4.511,3558,4.511,3559,4.511,3560,4.511,3561,3.289,3562,3.289,3563,3.289,3564,3.289,3565,3.976,3566,5.331,3567,3.976,3568,3.976,3569,5.331,3570,3.976,3571,3.289,3572,2.923,3573,2.923,3574,4.273,3575,3.086,3576,5.865,3577,3.289,3578,3.086,3579,3.086,3580,3.086,3581,3.289,3582,2.672,3583,3.086,3584,3.086,3585,2.923,3586,3.086,3587,3.289,3588,3.086,3589,3.289,3590,5.331,3591,3.086,3592,5.556,3593,3.289,3594,2.571,3595,3.289,3596,4.075,3597,3.086,3598,3.289,3599,3.086,3600,3.289,3601,3.086,3602,3.289,3603,3.086,3604,3.976,3605,3.976,3606,3.976]],["title/classes/NoopScale.html",[0,0.082,3607,4.561]],["body/classes/NoopScale.html",[0,0.084,2,1.267,3,0.204,4,0.191,5,0.191,8,1.514,10,0.21,11,0.457,14,1.267,17,1.406,19,2.254,20,0.005,21,1.077,22,1.403,24,0.373,28,0.275,39,0.204,78,0.003,79,0.004,80,0.003,94,1.874,95,1.943,97,2.16,124,1.414,128,5.317,129,2.692,134,0.828,140,2.039,159,1.555,161,1.476,164,1.399,175,1.965,183,0.917,192,2.158,222,3.298,269,1.909,291,4.577,309,1.021,760,2.188,1893,2.372,1918,2.997,2127,3.493,2130,4.239,2137,4.167,2138,4.515,2143,4.96,2147,4.651,2154,4.979,2155,4.979,2161,5.243,2162,4.979,2163,4.979,2167,4.109,2168,4.979,2170,5.703,2171,4.979,2283,5.968,2284,5.165,2285,5.968,3424,4.307,3428,5.452,3429,6.293,3436,4.663,3607,6.293,3608,10.272,3609,5.205,3610,5.205,3611,5.205,3612,5.205,3613,5.205,3614,4.663,3615,5.205,3616,5.205,3617,5.205,3618,5.205,3619,5.205,3620,5.205,3621,5.205,3622,5.205,3623,5.205,3624,5.205,3625,4.663,3626,4.663]],["title/modules/NuiChartsModule.html",[3627,4.212,3628,3.743]],["body/modules/NuiChartsModule.html",[0,0.086,3,0.208,4,0.195,5,0.195,20,0.005,24,0.202,28,0.401,32,3.754,39,0.208,78,0.003,79,0.004,80,0.003,90,1.351,91,2.787,281,0.962,309,1.043,310,1.445,478,5.491,481,6.384,482,4.012,496,2.787,500,5.347,502,5.491,503,3.644,505,5.491,507,5.212,509,5.491,511,5.085,513,5.491,515,5.491,517,5.491,520,5.347,797,5.895,798,1.773,818,6.775,822,4.764,837,3.909,902,3.573,924,4.764,981,4.764,1101,4.764,1119,3.909,1264,6.237,1311,6.649,1312,4.399,1428,4.127,1885,2.054,2006,1.859,2518,3.909,2892,5.53,3140,4.399,3307,4.399,3627,4.399,3628,7.744,3629,4.399,3630,4.127,3631,6.649,3632,6.649,3633,4.764,3634,4.764,3635,4.764,3636,4.764,3637,7.152,3638,5.317,3639,7.125,3640,6.384,3641,5.317,3642,5.317,3643,5.317,3644,5.317,3645,5.317,3646,7.125,3647,7.125,3648,7.125,3649,5.317,3650,5.317,3651,5.317,3652,5.317,3653,5.317,3654,5.317,3655,5.317,3656,8.036,3657,4.764,3658,7.125,3659,6.384,3660,5.317,3661,5.317,3662,4.764]],["title/classes/PathMarker.html",[0,0.082,3663,4.561]],["body/classes/PathMarker.html",[0,0.149,2,1.545,3,0.249,4,0.233,5,0.233,8,1.723,10,0.256,11,0.52,12,1.006,14,1.545,17,1.261,19,1.894,20,0.005,21,0.905,22,1.178,24,0.332,28,0.249,39,0.249,52,2.027,53,2.293,55,1.655,57,2.112,78,0.003,79,0.004,80,0.003,85,1.298,90,1.129,94,1.789,108,0.745,134,0.951,175,1.612,179,1.036,183,1.119,192,1.406,227,1.725,269,2.173,334,1.314,488,2.936,524,2.591,541,3.488,625,5.689,664,4.964,673,3.994,721,5.253,774,1.545,932,3.445,994,3.012,1357,3.036,1603,3.714,1635,3.143,1645,7.131,1681,3.414,1793,5.732,1969,3.611,1970,3.143,2020,3.507,2021,3.658,2028,2.79,2196,6.616,3663,8.485,3664,9.47,3665,5.689,3666,7.164,3667,7.997,3668,5.689,3669,7.164,3670,7.997,3671,6.35,3672,6.35,3673,6.35,3674,6.35,3675,6.35,3676,6.35,3677,6.35,3678,6.35,3679,6.35,3680,6.35,3681,6.35,3682,6.35,3683,6.35,3684,6.35,3685,7.164,3686,6.35,3687,6.35]],["title/classes/PieRenderer.html",[0,0.082,3688,4.561]],["body/classes/PieRenderer.html",[0,0.065,2,0.981,3,0.158,4,0.216,5,0.148,10,0.395,11,0.382,12,1.253,13,1.319,17,1.362,19,2.283,20,0.005,21,1.099,22,1.409,24,0.377,28,0.23,39,0.158,41,0.654,53,1.456,75,0.841,78,0.002,79,0.003,80,0.002,85,1.449,90,0.829,94,1.842,96,2.392,97,1.595,107,1.766,108,0.812,110,1.3,115,4.116,117,0.824,132,2.12,134,0.786,143,2.618,164,1.377,175,1.943,179,1.047,192,1.533,194,1.317,209,2.61,216,4.09,218,2.53,242,2.71,247,2.694,253,0.981,266,4.477,269,1.595,270,5.631,272,3.796,273,3.796,279,2.803,280,2.139,281,1.063,283,1.266,285,1.902,290,2.081,294,3.724,295,4.028,296,4.028,297,2.494,299,2.784,303,2.866,306,3.078,309,0.791,333,2.358,336,2.02,343,2.516,368,1.789,384,2.169,394,2.227,395,2.71,396,2.607,411,1.266,439,1.304,545,1.595,592,2.866,673,2.014,705,1.738,719,1.08,734,1.3,738,2.944,772,2.839,787,1.317,793,2.168,802,2.014,841,3.89,935,1.065,957,7.384,1054,1.211,1150,2.014,1156,3.243,1252,2.607,1255,1.456,1279,4.918,1309,1.989,1357,1.531,1454,2.02,1489,2.866,1501,2.516,1583,4.117,1584,2.433,1635,2.721,1638,2.965,1653,2.965,1795,2.227,1823,2.965,1886,2.421,1894,1.433,1895,1.065,1910,1.41,1912,1.531,1913,1.531,1914,1.816,1915,1.48,1918,2.571,1921,1.557,1933,1.585,1960,1.388,1961,1.505,1982,1.958,1991,1.531,1995,2.192,2015,2.014,2068,2.29,2109,3.435,2124,2.359,2127,3.342,2156,3.435,2161,3.157,2405,2.965,2599,4.317,2717,3.946,2790,2.607,2815,3.796,2841,4.477,2947,2.71,3498,2.827,3554,4.557,3555,5.904,3556,4.557,3557,4.557,3558,4.557,3559,4.557,3560,4.557,3561,3.336,3562,3.336,3563,3.336,3564,3.336,3566,4.557,3569,3.129,3571,3.336,3572,2.965,3573,2.965,3574,4.317,3575,3.129,3576,5.904,3577,3.336,3578,3.129,3579,3.129,3580,3.129,3581,3.336,3582,2.71,3583,3.129,3584,3.129,3585,2.965,3586,3.129,3587,3.336,3588,3.129,3589,3.336,3590,5.374,3591,3.129,3592,5.593,3593,3.336,3594,2.607,3595,3.336,3596,4.117,3597,3.129,3598,3.336,3599,3.129,3600,3.336,3601,3.129,3602,3.336,3603,3.129,3688,5.26,3689,4.032,3690,5.871,3691,5.871,3692,4.032,3693,4.032,3694,3.612,3695,4.032,3696,4.032,3697,4.032,3698,4.032,3699,4.032,3700,4.032,3701,6.924,3702,3.612,3703,3.129,3704,4.032,3705,4.032,3706,4.032,3707,4.032]],["title/classes/ProcessedColorProvider.html",[0,0.082,1066,3.951]],["body/classes/ProcessedColorProvider.html",[0,0.107,2,1.61,3,0.259,4,0.328,5,0.243,8,1.768,10,0.267,11,0.534,14,1.61,17,1.28,19,1.567,20,0.005,21,0.749,22,0.975,24,0.251,28,0.259,39,0.259,52,2.476,54,2.389,55,2.138,78,0.003,79,0.004,80,0.003,85,1.074,94,1.744,107,1.445,108,0.616,110,1.464,134,0.923,175,1.333,179,1.155,183,1.166,192,1.464,227,1.798,269,2.229,290,2.024,607,3.158,774,1.61,806,6.028,821,4.196,841,4.196,882,4.561,1052,3.309,1066,6.368,1150,4.097,1279,5.304,1635,3.224,1882,2.654,2006,3.26,2864,5.135,3463,4.639,3475,5.473,3708,9.324,3709,8.204,3710,7.35,3711,8.204,3712,8.204,3713,8.204,3714,5.927,3715,7.99,3716,5.927,3717,7.35,3718,6.615,3719,6.615,3720,6.615,3721,8.204,3722,6.615,3723,6.615,3724,9.585,3725,8.204,3726,6.615,3727,6.615]],["title/classes/RadialAccessors.html",[0,0.082,2273,3.743]],["body/classes/RadialAccessors.html",[0,0.11,2,1.66,3,0.267,4,0.251,5,0.251,7,2.635,8,1.802,10,0.276,11,0.544,12,1.185,13,1.312,14,1.66,15,4.783,17,1.241,19,1.615,20,0.005,21,0.772,22,1.005,23,4.081,24,0.317,28,0.327,29,4.382,31,3.576,32,3.187,33,2.325,34,1.534,37,2.527,38,1.828,39,0.369,40,0.005,41,0.76,52,2.292,54,2.463,56,3.187,57,1.826,72,3.121,73,3.576,74,3.576,75,1.295,78,0.003,79,0.004,80,0.003,108,0.779,134,0.779,202,6.112,774,2.034,777,3.673,1529,4.783,1951,2.704,2139,2.474,2247,4.891,2248,4.891,2269,6.647,2270,7.314,2271,6.929,2272,6.929,2273,6.147,2274,5.295,3728,7.491]],["title/classes/RadialPopoverPlugin.html",[0,0.082,3729,4.561]],["body/classes/RadialPopoverPlugin.html",[0,0.085,2,1.282,3,0.206,4,0.194,5,0.194,10,0.213,11,0.461,12,0.663,17,1.408,20,0.005,24,0.349,28,0.206,39,0.206,41,0.953,78,0.003,79,0.004,80,0.003,85,0.855,90,1.26,94,1.876,107,2.051,108,0.856,109,2.853,110,1.893,114,2.11,115,4.245,117,1.877,143,2.437,146,3.111,175,1.969,179,1.266,192,1.166,227,2.425,253,1.282,269,1.924,297,2.235,384,1.82,436,2.833,439,2.29,443,2.99,444,3.128,446,2.395,447,2.973,453,1.785,456,3.406,459,2,464,1.747,465,2.843,466,3.287,471,3.287,472,3.287,473,3.287,474,3.287,476,2.096,607,2.515,634,1.677,636,1.466,664,2.761,673,2.631,734,1.166,741,1.653,757,2.833,933,3.081,935,1.871,1103,7.287,1108,7.523,1134,4.089,1146,3.406,1155,5.858,1156,3.911,1157,5.858,1158,5.858,1159,5.858,1160,5.496,1163,6.208,1164,3.239,1165,4.358,1168,4.089,1169,4.358,1170,4.358,1171,4.358,1172,1.704,1173,3.081,1176,4.089,1203,5.496,1218,5.206,1219,3.873,1220,3.54,1221,3.873,1222,1.934,1223,3.406,1224,5.858,1226,4.358,1227,4.358,1228,3.873,1229,4.358,1431,5.206,3072,4.358,3703,5.496,3729,6.344,3730,5.268,3731,5.268,3732,5.268,3733,5.268,3734,5.268,3735,5.268,3736,5.268,3737,5.268,3738,5.268,3739,5.268,3740,5.268,3741,5.268,3742,5.268,3743,5.268,3744,5.268,3745,5.268,3746,7.081,3747,7.081,3748,5.268,3749,4.72]],["title/classes/RadialTooltipsPlugin.html",[0,0.082,3750,4.561]],["body/classes/RadialTooltipsPlugin.html",[0,0.069,2,1.044,3,0.168,4,0.226,5,0.158,10,0.173,11,0.4,12,0.772,17,1.367,19,1.016,20,0.005,21,0.485,22,0.632,24,0.337,28,0.324,34,0.787,39,0.168,41,0.684,42,2.25,47,2.25,55,1.6,59,2.51,78,0.002,79,0.003,80,0.002,83,1.088,85,0.697,89,1.058,90,1.217,94,1.85,107,1.71,108,0.729,109,3.027,110,1.359,112,2.372,113,3.217,115,4.131,117,1.254,134,0.572,146,3.787,164,1.218,175,1.912,179,1.229,192,1.588,212,3.751,213,3.643,227,2.547,247,1.234,269,1.669,281,0.777,283,1.347,290,1.058,297,1.716,299,2.004,303,2.094,309,0.842,334,1.485,339,2.883,343,3.831,435,5.309,436,2.307,437,6.628,438,4.766,439,2.32,440,4.766,441,3.488,442,4.766,443,2.857,444,2.989,445,5.081,446,2.246,447,2.788,450,3.844,451,3.155,452,4.306,453,2.43,454,3.844,455,2.43,456,2.774,457,3.844,458,4.766,459,1.536,460,3.155,461,3.844,462,3.844,463,3.155,464,1.515,465,2.64,466,2.677,467,3.844,468,3.844,469,3.33,470,3.844,471,2.677,472,2.677,473,2.677,474,2.677,476,2.123,503,3.14,524,1.645,576,1.817,597,1.524,634,1.016,636,0.888,673,3.067,757,2.869,773,2.589,774,1.044,841,2.194,935,1.623,948,3.33,957,3.55,958,3.844,1187,2.113,1268,5.568,1309,2.08,1336,3.55,1357,1.629,1427,5.081,1428,3.33,1431,4.515,1432,6.076,1433,3.55,1442,3.55,1443,3.55,1444,3.55,1445,3.55,1446,6.689,1476,5.081,1489,2.997,1490,3.155,1492,3.55,1502,3.33,1505,3.55,1578,3.33,1583,5.49,1584,2.589,2051,2.048,2142,4.328,2341,3.155,2381,3.55,2624,3.55,2717,2.883,3030,3.844,3036,3.844,3072,3.55,3156,3.844,3394,5.081,3574,3.155,3582,2.883,3702,5.502,3703,6.076,3749,3.844,3750,5.502,3751,3.844,3752,6.141,3753,5.502,3754,6.141,3755,4.291,3756,4.291,3757,4.291,3758,4.291,3759,4.291,3760,6.425,3761,5.502,3762,3.844,3763,3.844,3764,5.502,3765,3.55,3766,3.844,3767,3.55,3768,3.844,3769,3.844,3770,3.844,3771,5.502,3772,4.291,3773,4.291,3774,4.291,3775,4.291,3776,4.291,3777,4.291,3778,6.141,3779,4.291,3780,4.291,3781,7.172,3782,4.291,3783,4.291,3784,4.291,3785,4.291,3786,4.291,3787,6.141,3788,4.291,3789,4.291,3790,3.844,3791,4.291,3792,4.291,3793,4.291,3794,4.291,3795,4.291,3796,7.829,3797,4.291,3798,6.141,3799,4.291,3800,7.172,3801,4.291,3802,4.291,3803,4.291,3804,4.291,3805,4.291,3806,3.844,3807,7.422,3808,4.291,3809,4.291]],["title/classes/RectangleAccessors.html",[0,0.082,200,2.892]],["body/classes/RectangleAccessors.html",[0,0.114,2,1.709,3,0.275,4,0.258,5,0.258,7,2.713,8,1.834,10,0.284,11,0.554,12,1.197,13,1.325,14,2.228,17,1.257,20,0.005,24,0.323,28,0.275,33,2.539,34,1.561,35,2.988,36,2.712,37,2.559,38,1.882,39,0.388,40,0.005,41,1.086,52,1.781,53,2.536,78,0.004,79,0.004,80,0.004,108,0.654,200,4.834,205,4.989,206,5.406,212,2.969,213,2.969,214,2.76,331,4.683,1861,4.541,1863,4.541,1865,4.541,1867,4.541,1868,4.72,2277,6.675,2278,4.72,2279,4.72,2280,4.72,3810,8.511,3811,7.024]],["title/classes/Renderer.html",[0,0.082,299,1.423]],["body/classes/Renderer.html",[0,0.092,2,0.716,3,0.115,4,0.21,5,0.108,10,0.382,11,0.372,12,1.277,13,1.353,14,0.716,17,1.281,19,2.057,20,0.005,21,1.014,22,1.256,24,0.348,28,0.346,34,0.54,39,0.115,53,1.67,75,0.662,78,0.001,79,0.002,80,0.001,85,1.314,90,0.653,94,1.802,95,1.726,96,2.327,97,1.552,107,1.707,108,0.776,110,1.654,117,1.167,128,1.671,129,0.846,132,1.062,134,0.845,143,2.228,164,1.193,175,1.847,179,1.049,183,0.518,192,1.955,194,1.579,209,2.591,216,4.477,218,2.665,227,2.03,241,0.896,242,3.107,247,2.769,266,4.831,269,1.256,270,4.186,272,2.989,273,2.989,279,3.36,280,2.271,281,1.274,283,1.451,285,1.882,290,2.209,294,3.482,295,3.975,296,3.864,297,2.534,299,1.292,303,2.257,306,3.394,309,1.121,310,1.552,317,0.871,319,3.825,320,1.292,328,0.896,332,1.469,333,2.562,334,2.04,336,2.18,343,2.885,368,2.145,384,2.27,394,3.155,395,3.107,396,2.989,399,1.08,411,2.032,418,1.775,439,1.496,545,1.912,580,1.098,581,1.775,592,2.257,607,2.207,705,2.083,709,1.504,719,1.239,734,1.264,738,3.081,752,0.952,772,3.108,787,1.453,790,1.671,793,2.486,802,2.309,841,4.14,935,1.509,1150,2.309,1152,2.163,1156,3.155,1181,1.835,1182,1.835,1187,1.012,1195,1.775,1196,1.835,1252,2.989,1255,1.67,1279,5.234,1307,2.163,1308,2.063,1309,2.193,1357,1.755,1454,2.053,1472,3.589,1489,3.16,1501,2.885,1520,2.434,1525,1.625,1635,2.936,1638,2.163,1645,2.283,1653,3.4,1795,2.554,1823,3.4,1878,1.156,1884,2.245,1885,1.136,1886,2.612,1887,1.156,1894,1.643,1895,1.222,1910,1.617,1912,1.755,1913,1.755,1914,2.417,1915,1.697,1918,2.691,1949,1.726,1960,1.012,1961,1.098,1982,2.347,1991,1.755,1995,2.417,2015,2.309,2019,1.267,2068,3.244,2109,3.787,2124,2.705,2127,3.434,2131,2.885,2153,1.625,2156,3.787,2248,2.705,2405,3.4,2599,4.761,2638,2.636,2717,4.351,2793,1.977,2815,2.989,2841,3.693,2947,3.107,3490,2.636,3498,3.242,3524,2.636,3554,4.434,3555,3.589,3556,3.589,3557,3.589,3558,3.589,3559,3.589,3560,3.589,3566,3.589,3569,3.589,3572,3.4,3573,3.4,3574,4.761,3575,3.589,3576,6.283,3578,3.589,3579,3.589,3580,3.589,3582,3.107,3583,3.589,3584,3.589,3585,3.4,3586,3.589,3588,3.589,3590,5.799,3591,3.589,3592,5.952,3594,2.989,3596,3.242,3597,2.283,3599,3.589,3601,3.589,3603,3.589,3812,2.942,3813,4.142,3814,4.142,3815,2.942,3816,2.942,3817,2.942,3818,2.942,3819,2.942,3820,2.942,3821,2.942,3822,2.942,3823,2.942,3824,2.942,3825,2.942,3826,2.942,3827,2.942,3828,2.942,3829,2.942,3830,2.942,3831,2.942,3832,4.142,3833,2.942,3834,2.942,3835,2.942,3836,2.942,3837,2.942,3838,2.942,3839,2.942,3840,2.942,3841,4.624,3842,4.624,3843,2.942,3844,2.942,3845,2.942,3846,2.942,3847,2.942,3848,2.942,3849,2.942,3850,2.942,3851,2.942,3852,2.942,3853,2.942,3854,2.942,3855,2.942,3856,2.942,3857,2.942,3858,2.942,3859,2.942,3860,2.636,3861,2.942,3862,4.624,3863,2.942,3864,2.942,3865,2.942,3866,4.624,3867,2.942,3868,2.942]],["title/components/RichLegendTileComponent.html",[477,2.237,517,2.812]],["body/components/RichLegendTileComponent.html",[0,0.084,3,0.204,4,0.191,5,0.191,8,1.514,10,0.21,11,0.457,13,1.303,14,1.267,17,1.307,19,1.233,20,0.005,21,0.963,22,1.171,24,0.348,28,0.333,39,0.204,52,2.373,55,2.072,78,0.003,79,0.004,80,0.003,90,1.255,94,1.799,108,0.853,117,1.063,134,0.887,140,1.715,175,1.416,180,3.428,192,1.555,269,1.909,477,3.086,478,2.875,479,3.989,480,7.98,482,4.682,483,4.663,484,2.956,485,5.452,486,5.452,487,5.508,488,3.638,489,2.287,490,5.136,491,4.382,492,6.293,493,4.239,494,6.293,495,4.04,496,2.728,497,4.979,498,3.141,499,3.141,500,2.799,501,3.141,502,2.875,503,2.662,504,3.141,505,2.875,506,3.141,507,2.728,508,3.141,509,2.875,510,3.141,511,2.662,512,3.141,513,4.909,514,3.141,515,4.909,516,3.141,517,4.701,518,5.745,519,2.956,520,2.799,521,3.045,522,3.141,771,3.148,814,6.17,815,3.428,821,4.545,832,4.04,853,6.578,865,5.968,896,4.307,991,5.845,1081,4.663,1135,5.452,1275,4.307,1308,3.65,1332,4.307,2037,2.914,2139,1.54,3098,6.293,3297,6.293,3307,4.307,3352,4.663,3372,4.663,3657,4.663,3659,9.128,3869,7.95,3870,8.511,3871,8.511,3872,7.95,3873,8.511,3874,5.205,3875,7.024,3876,5.205,3877,5.205,3878,5.205,3879,5.205,3880,5.205,3881,5.205,3882,5.205,3883,5.205,3884,7.024,3885,5.205,3886,7.024,3887,5.205,3888,5.205,3889,5.205,3890,5.205,3891,5.205,3892,5.205,3893,5.205,3894,5.205,3895,5.205]],["title/classes/Scale.html",[0,0.082,280,1.291]],["body/classes/Scale.html",[0,0.074,2,1.119,3,0.18,4,0.169,5,0.169,8,1.39,10,0.186,11,0.42,17,1.388,19,2.224,20,0.005,21,1.063,22,1.384,24,0.376,28,0.316,39,0.18,55,1.199,75,1.157,78,0.002,79,0.003,80,0.002,94,1.884,95,1.717,97,2.194,107,1.409,108,0.752,110,1.018,124,1.25,132,3.505,134,0.694,140,2.007,159,1.428,161,1.304,164,1.384,175,1.938,183,0.81,184,4.403,192,2.106,216,5.172,225,1.401,269,1.753,280,2.156,291,4.006,309,1.462,329,3.091,336,1.342,673,3.721,760,2.076,1357,1.746,1518,4.121,1719,3.805,1793,2.869,1893,2.423,1918,3.001,2127,4.126,2130,4.496,2136,5.008,2137,3.905,2138,4.232,2143,4.648,2147,4.358,2148,2.974,2154,4.724,2155,4.724,2157,2.473,2159,3.893,2160,3.893,2161,5.22,2162,4.724,2163,4.724,2167,3.773,2168,4.724,2170,5.678,2171,4.724,2283,4.523,2284,4.743,2285,4.523,2317,5.478,2320,3.805,3428,3.57,3456,3.805,3459,3.805,3625,4.121,3896,4.599,3897,4.599,3898,4.599,3899,4.599,3900,4.599,3901,4.599,3902,4.599,3903,4.599,3904,4.599,3905,4.599,3906,4.599,3907,4.599,3908,4.599,3909,4.599,3910,4.599,3911,4.599,3912,4.599,3913,4.599,3914,4.599,3915,4.599,3916,4.599,3917,4.599,3918,4.599,3919,4.599,3920,6.451,3921,4.599,3922,4.121,3923,4.599,3924,4.599,3925,4.599,3926,4.599,3927,4.599,3928,4.599,3929,4.599,3930,4.599,3931,4.599,3932,4.599,3933,4.599,3934,4.599,3935,4.599,3936,4.599,3937,6.451]],["title/interfaces/ScalesIndex.html",[40,0.003,1671,2.282]],["body/interfaces/ScalesIndex.html",[3,0.189,4,0.178,5,0.178,10,0.333,12,0.84,13,0.674,17,0.664,20,0.005,24,0.313,28,0.262,34,0.888,39,0.389,40,0.005,41,0.92,42,1.161,47,1.161,75,1.096,78,0.002,79,0.003,80,0.002,85,0.786,95,1.806,97,1.816,108,0.855,110,1.479,117,1.563,124,1.816,126,2.125,132,2.413,134,0.855,140,1.886,161,1.894,164,1.354,175,1.805,178,2.125,179,0.627,183,0.852,192,1.479,222,2.007,225,2.036,227,1.816,245,3.795,280,2.482,281,0.876,285,1.723,303,2.361,309,0.949,326,2.83,334,1.854,336,1.411,337,2.045,368,2.332,379,3.909,441,2.748,576,1.977,757,1.935,759,2.601,760,1.243,770,2.772,772,2.494,774,1.626,776,4.123,798,2.229,839,4.32,882,3.914,1454,1.411,1489,2.361,1499,4.169,1603,2.83,1652,3.593,1654,1.665,1671,2.995,1691,2.936,1782,1.719,1871,0.733,1889,2.336,1892,2.374,1893,2.363,1918,3.09,1981,2.553,2004,2.195,2014,3.057,2017,3.19,2019,2.084,2036,2.26,2037,2.007,2056,2.309,2057,2.309,2089,3.502,2125,4.169,2126,3.018,2127,4.223,2128,3.251,2130,4.619,2131,3.018,2132,3.018,2133,3.128,2134,3.128,2135,3.128,2136,4.347,2137,4.541,2138,3.795,2139,1.432,2140,3.251,2141,3.128,2142,2.92,2143,3.018,2144,3.251,2145,3.251,2146,5.822,2147,3.909,2148,6.416,2149,2.83,2150,3.251,2151,4.491,2152,4.169,2153,2.672,2154,2.83,2155,2.83,2156,4.829,2157,4.817,2158,4.491,2159,2.92,2160,2.92,2161,4.817,2162,2.83,2163,2.83,2164,3.251,2165,3.251,2166,3.128,2167,2.83,2168,4.829,2169,3.251,2170,5.067,2171,2.83,2172,3.251,2173,3.251,2174,4.32,2175,3.251,2176,3.251,2177,3.251,2203,2.601,3938,4.838]],["title/classes/SequentialChartMarkerProvider.html",[0,0.082,3939,4.212]],["body/classes/SequentialChartMarkerProvider.html",[0,0.149,2,1.718,3,0.276,4,0.259,5,0.259,10,0.285,11,0.556,13,1.189,14,1.718,17,1.26,19,1.671,20,0.005,21,0.799,22,1.04,24,0.268,28,0.334,39,0.276,41,0.951,53,3.083,54,2.549,78,0.004,79,0.004,80,0.004,85,1.146,90,1.206,94,1.703,107,1.542,108,0.795,115,3.541,175,1.423,179,0.914,183,1.244,269,2.32,627,3.678,806,4.564,841,5.074,994,3.281,1069,5.84,1635,3.355,1881,2.936,2006,3.209,3463,4.95,3464,6.626,3465,6.626,3466,6.626,3467,6.626,3468,6.276,3469,6.626,3716,6.324,3939,7.063,3940,7.063,3941,7.577,3942,7.059,3943,6.324,3944,6.324,3945,7.059]],["title/classes/SequentialColorProvider.html",[0,0.082,1068,4.212]],["body/classes/SequentialColorProvider.html",[0,0.149,2,1.733,3,0.279,4,0.262,5,0.262,10,0.288,11,0.558,13,1.195,14,1.733,17,1.264,19,1.686,20,0.005,21,0.806,22,1.049,24,0.27,28,0.279,39,0.279,41,0.956,52,2.176,54,2.571,78,0.004,79,0.004,80,0.004,85,1.156,94,1.708,107,1.555,108,0.8,115,3.56,134,0.858,175,1.435,179,0.922,269,2.332,627,3.697,806,4.604,841,5.084,1051,6.379,1056,3.216,1068,7.1,1069,5.891,1635,3.373,2006,3.221,3463,4.993,3464,6.661,3465,6.661,3466,6.661,3467,6.661,3468,6.31,3469,6.661,3472,6.379,3940,7.1,3941,7.596,3943,6.379,3944,6.379,3946,7.12]],["title/classes/SequentialValueProvider.html",[0,0.082,3941,3.951]],["body/classes/SequentialValueProvider.html",[0,0.145,2,1.632,3,0.263,4,0.247,5,0.247,8,1.783,10,0.334,11,0.539,13,1.152,14,1.632,17,1.232,19,1.589,20,0.005,21,0.759,22,0.989,24,0.341,28,0.263,39,0.263,54,2.423,55,2.157,78,0.003,79,0.004,80,0.003,85,1.089,94,1.75,107,1.465,108,0.948,134,0.771,164,0.921,175,1.352,179,1.072,183,1.182,192,1.485,227,1.823,269,2.249,290,2.041,336,1.957,627,3.566,774,1.632,841,5.013,1052,3.04,1635,3.252,1893,2.342,2006,3.276,2864,5.207,3463,4.704,3464,6.423,3465,6.423,3466,6.423,3467,6.423,3468,6.085,3469,6.423,3474,6.011,3475,5.551,3940,7.752,3941,6.423,3947,9.37,3948,6.709,3949,6.709,3950,6.709,3951,6.709,3952,6.709,3953,8.276,3954,8.276,3955,6.709,3956,6.709,3957,6.709]],["title/classes/SideIndicatorAccessors.html",[0,0.082,2802,3.57]],["body/classes/SideIndicatorAccessors.html",[0,0.109,2,1.194,3,0.192,4,0.18,5,0.18,8,1.454,10,0.198,11,0.502,12,1.181,13,1.307,14,1.877,17,1.059,20,0.005,22,0.723,24,0.256,28,0.368,33,1.665,35,2.118,36,2.15,37,2.434,38,1.315,39,0.341,40,0.005,41,0.859,42,1.178,47,1.178,52,1.955,55,1.279,56,2.293,57,1.072,72,2.246,78,0.002,79,0.003,80,0.002,85,0.797,91,2.573,94,1.701,96,1.999,107,1.474,108,0.719,109,2.573,113,2.519,117,1.575,132,2.437,134,0.457,142,3.174,143,1.689,146,2.157,159,2.078,161,1.392,179,0.636,183,0.865,184,3.371,192,1.494,194,1.101,209,1.353,212,3.681,213,3.681,218,2.355,222,3.446,227,2.667,240,1.392,241,2.057,253,1.194,285,1.652,290,1.665,295,3.222,296,2.343,297,1.886,299,2.156,317,1.453,320,2.157,327,2.396,328,1.496,332,2.452,334,1.016,336,1.432,337,2.075,384,1.262,418,2.962,488,1.802,634,1.826,636,1.397,660,3.174,662,3.299,720,1.773,782,1.496,932,2.115,1054,1.474,1156,2.711,1164,3.088,1181,3.063,1182,3.063,1195,2.962,1196,3.063,1197,3.442,1525,2.711,1599,1.744,1632,3.609,1687,4.747,1698,4.211,1791,2.711,1793,3.063,1894,2.398,1896,2.879,1914,2.569,1987,1.353,2019,2.115,2072,2.871,2787,5.409,2788,6.447,2789,7.385,2790,3.174,2791,6.107,2792,6.107,2793,3.299,2794,4.962,2795,3.81,2796,4.211,2797,5.63,2798,4.962,2799,3.81,2800,3.81,2801,4.733,2802,4.733,2803,3.81,2804,3.81,2805,4.962,2806,4.962,2807,3.81,2808,3.81,2809,3.81,2810,3.81,2811,3.81,2812,3.81,2813,3.81,2814,3.609,2815,3.174,2816,3.81,2817,4.962,2818,3.609,2819,3.81,2820,5.238,2821,3.81,2822,5.986,2823,3.442,2824,3.81,2825,3.81,2826,3.81,2827,5.986,2828,3.81,2829,3.81,2830,3.81,2831,3.81,2832,3.81,2833,3.81,2834,3.81,2835,3.81,2836,3.81,2837,3.81,2838,3.81,2839,3.81,2840,3.609,2841,3.174,2842,3.81,3958,6.749,3959,4.909]],["title/classes/SparkChartAssist.html",[0,0.082,3960,4.561]],["body/classes/SparkChartAssist.html",[0,0.058,2,0.866,3,0.139,4,0.131,5,0.131,8,1.154,10,0.26,11,0.348,13,1.123,14,0.866,17,1.315,19,1.91,20,0.005,21,0.913,22,1.188,24,0.35,28,0.378,34,0.653,39,0.139,53,1.286,55,1.395,78,0.002,79,0.003,80,0.002,83,2.183,85,0.869,87,5.41,90,1.428,94,1.843,97,2.509,107,1.827,108,0.821,110,1.852,113,2.672,124,1.945,130,4.015,132,2.585,134,0.849,140,1.079,143,2.775,149,0.81,161,2.176,164,1.054,175,1.625,179,1.084,183,0.627,184,2.674,192,1.785,194,1.809,227,2.393,240,2.441,254,1.629,269,1.455,279,3.417,281,1.39,291,1.914,320,1.564,329,2.393,333,2.001,334,0.737,336,1.877,420,6.877,432,5.415,439,1.152,446,2.244,453,2.18,476,1.585,525,1.632,576,2.119,580,1.999,590,1.821,591,1.117,596,0.967,597,1.265,673,1.778,720,1.934,732,6.235,735,4.161,738,1.732,741,2.702,744,2.82,752,1.152,757,2.142,758,6.275,759,1.914,760,1.654,764,4.963,767,2.393,769,3.599,773,3.232,775,4.629,778,3.599,780,4.811,790,2.022,798,2.388,806,2.302,882,2.738,994,1.225,1044,2.946,1047,2.914,1052,2.6,1146,2.302,1152,3.937,1172,1.152,1173,2.083,1201,2.497,1206,2.618,1287,4.797,1490,3.937,1506,2.618,1652,4.337,1673,2.946,1719,2.946,1726,4.43,1881,2.272,1944,2.142,1996,2.765,2037,1.477,2192,4.797,2323,4.995,2324,4.797,2325,4.156,2797,3.462,2879,2.618,2997,2.946,3087,4.797,3109,3.19,3117,3.19,3135,2.946,3167,7.225,3182,5.923,3228,3.19,3229,3.19,3260,3.19,3939,2.946,3960,4.797,3961,9.644,3962,6.436,3963,6.436,3964,6.436,3965,8.367,3966,9.58,3967,5.355,3968,7.159,3969,3.56,3970,5.355,3971,3.56,3972,4.797,3973,3.56,3974,5.355,3975,5.355,3976,3.56,3977,5.355,3978,3.56,3979,5.355,3980,3.56,3981,3.56,3982,3.56,3983,3.56,3984,3.56,3985,3.56,3986,5.355,3987,6.436,3988,3.56,3989,3.56,3990,5.355,3991,3.56,3992,5.355,3993,7.159,3994,5.355,3995,5.355,3996,3.56,3997,3.56,3998,7.159,3999,5.355,4000,3.56,4001,3.19,4002,3.19,4003,3.56,4004,3.56,4005,3.19,4006,3.19,4007,3.56,4008,3.56,4009,3.56,4010,3.56,4011,6.436,4012,5.355,4013,3.56,4014,6.436,4015,3.56,4016,3.56,4017,3.56,4018,3.56,4019,3.56,4020,3.56,4021,3.56,4022,3.56,4023,3.56,4024,8.065,4025,3.56,4026,5.355,4027,7.676,4028,3.56,4029,3.56,4030,6.436,4031,3.56,4032,3.56,4033,3.56,4034,3.56,4035,3.56,4036,3.56,4037,3.56,4038,3.56,4039,6.436,4040,5.355,4041,3.56,4042,3.56,4043,3.56,4044,3.56,4045,3.56,4046,3.56,4047,3.56,4048,3.56,4049,3.56,4050,3.56,4051,6.436,4052,3.56,4053,3.56,4054,3.56,4055,3.56,4056,3.56]],["title/classes/StatusAccessors.html",[0,0.082,2855,3.743]],["body/classes/StatusAccessors.html",[0,0.11,2,1.656,3,0.267,4,0.25,5,0.25,7,2.628,8,1.799,10,0.275,11,0.543,12,1.184,13,1.257,14,1.656,17,1.326,19,1.612,20,0.005,21,0.77,22,1.003,24,0.343,28,0.354,33,2.059,38,1.823,39,0.354,40,0.004,41,0.93,54,2.457,57,1.486,78,0.003,79,0.004,80,0.003,94,1.682,96,4.006,107,1.823,108,0.778,134,0.634,159,2.084,192,1.848,198,5.209,201,6.494,203,5.209,204,6.097,205,4.376,210,3.399,255,2.99,417,3.012,2265,6.097,2852,6.64,2853,8.137,2854,7.308,2855,6.138,2856,7.472,2857,7.472,2858,6.907,2859,5.63,2860,5.63,2861,5.63,2862,5.63,3728,6.097,4057,6.805,4058,6.805,4059,6.805,4060,6.805,4061,6.805]],["title/classes/SvgMarker.html",[0,0.082,4062,4.212]],["body/classes/SvgMarker.html",[0,0.148,2,1.707,3,0.275,4,0.258,5,0.258,8,1.833,10,0.283,14,1.707,17,1.256,19,2.014,20,0.005,21,0.962,22,1.253,24,0.323,28,0.333,39,0.275,52,2.156,78,0.004,79,0.004,80,0.004,85,1.139,94,1.769,134,0.949,175,1.714,179,1.102,183,1.236,192,1.553,269,2.311,315,4.536,316,4.536,664,4.987,673,3.503,994,3.15,1357,3.229,1635,3.342,1793,5.306,1969,3.739,1970,3.342,2196,7.036,3665,6.285,3666,7.619,3668,6.285,3685,7.619,4062,7.036,4063,9.515,4064,8.505,4065,8.505,4066,7.015,4067,7.015,4068,7.015,4069,7.015,4070,7.015,4071,8.505,4072,7.015]],["title/classes/TextColorProvider.html",[0,0.082,1070,4.212]],["body/classes/TextColorProvider.html",[0,0.093,2,1.395,3,0.225,4,0.211,5,0.211,10,0.232,11,0.487,14,1.395,17,1.145,19,1.358,20,0.005,21,0.649,22,0.845,24,0.317,28,0.346,39,0.225,41,0.835,52,2.515,55,1.952,78,0.003,79,0.004,80,0.003,85,0.931,94,1.58,107,1.253,108,0.534,115,3.108,129,2.543,134,0.777,164,1.214,175,1.681,179,0.743,183,1.01,192,1.658,227,2.76,269,2.035,303,3.656,309,1.125,334,1.727,336,1.673,806,5.394,821,2.933,841,3.831,948,6.475,1052,2.996,1056,2.699,1063,5.138,1064,5.138,1065,5.138,1066,7.123,1067,5.138,1070,6.198,1080,4.745,1082,4.745,1089,8.712,1090,5.138,1357,2.844,1489,2.799,1500,4.451,1635,2.944,2006,2.917,2088,4.382,2142,3.461,3463,4.022,3714,6.711,3717,5.138,4073,7.491,4074,8.343,4075,8.845,4076,8.343,4077,5.735,4078,5.735,4079,5.735,4080,5.735,4081,5.138,4082,5.735,4083,5.138,4084,5.735,4085,5.138,4086,5.735,4087,5.735,4088,5.735,4089,5.735,4090,5.735,4091,7.491,4092,7.491,4093,5.735,4094,7.491,4095,5.735,4096,5.735,4097,5.735,4098,4.745,4099,5.735,4100,5.735,4101,5.735,4102,7.491,4103,7.491,4104,5.735,4105,8.845,4106,5.735,4107,8.845,4108,5.735,4109,8.845,4110,8.845,4111,7.491,4112,5.735,4113,5.735,4114,5.735,4115,7.491,4116,5.735,4117,8.343,4118,5.735,4119,5.735,4120,5.735,4121,5.735]],["title/injectables/ThresholdsService.html",[834,3.951,3637,3.951]],["body/injectables/ThresholdsService.html",[0,0.039,1,4.076,3,0.095,4,0.278,5,0.09,9,5.638,10,0.098,11,0.259,12,1.246,13,1.344,14,0.593,17,1.297,19,1.851,20,0.005,21,0.885,22,1.152,23,3.537,24,0.305,28,0.355,33,1.695,38,0.653,39,0.095,42,1.739,47,1.814,54,0.88,55,0.635,57,1.399,59,2.947,75,1.12,78,0.001,79,0.002,80,0.001,85,1.227,89,0.601,90,0.905,91,1.278,94,1.668,96,2.368,104,0.635,107,1.651,108,0.852,110,1.521,117,1.642,124,1.081,126,1.747,134,0.227,149,1.719,159,1.78,161,1.815,164,0.692,175,1.576,179,0.316,183,0.429,192,1.604,209,2.661,212,3.479,213,3.398,214,0.958,218,1.127,222,1.65,225,1.952,227,2.614,234,0.765,240,1.127,241,1.771,247,2.494,253,0.968,269,1.867,280,1.008,281,1.159,284,1.892,285,1.819,290,0.601,291,1.311,293,1.471,299,2.185,309,0.478,323,3.291,325,2.184,327,1.19,334,1.819,336,1.47,339,2.673,368,0.743,379,1.426,417,2.521,435,2.327,439,0.788,455,1.707,482,1.783,484,2.861,496,1.278,524,1.066,580,2.918,634,0.942,744,2.987,753,1.941,756,3.257,757,1.591,760,1.494,763,2.481,772,0.91,777,1.071,779,2.789,798,1.327,800,2.085,806,3.257,809,2.481,834,3.087,835,2.017,837,2.924,841,2.973,882,1.247,902,1.638,916,2.184,935,1.051,948,4.971,1052,2.455,1056,1.63,1087,2.017,1119,1.792,1150,2.903,1185,1.709,1234,2.924,1235,4.168,1309,3.231,1316,1.267,1357,0.925,1372,3.087,1391,3.291,1430,1.51,1436,1.892,1454,2.114,1489,1.19,1578,1.892,1599,3.418,1635,0.958,1652,1.311,1687,1.899,1698,3.627,1726,3.291,1763,3.563,1792,2.017,1793,4.286,1846,1.941,1893,0.968,1896,1.485,1914,2.241,1915,0.895,1920,0.958,1926,1.563,1933,0.958,1934,0.852,1953,0.975,1960,1.369,1967,1.98,1985,3.621,1986,1.98,1988,2.848,2038,3.211,2042,1.346,2051,1.164,2053,3.126,2075,2.572,2079,1.311,2081,2.139,2085,4.715,2091,2.572,2098,1.521,2102,3.627,2113,1.576,2152,3.143,2153,3.211,2157,1.311,2246,2.789,2341,2.924,2523,3.291,2656,2.184,2717,2.673,2773,3.563,2787,1.709,2789,3.704,2797,1.576,2798,1.792,2802,4.076,2805,1.792,2806,1.792,2843,4.512,2845,4.809,2848,3.087,2849,1.892,2850,3.087,2851,6.24,2852,1.792,2855,1.792,2934,2.017,2948,2.017,2959,1.892,3153,5.996,3183,3.563,3219,2.184,3249,3.291,3412,3.087,3498,2.789,3547,3.563,3549,2.184,3572,2.924,3596,1.709,3637,3.087,3669,3.563,3715,2.184,3765,4.809,3767,2.017,3814,3.563,3832,4.514,4001,2.184,4002,2.184,4098,4.809,4122,8.231,4123,2.438,4124,3.977,4125,3.977,4126,4.512,4127,5.038,4128,3.977,4129,3.977,4130,3.977,4131,3.977,4132,3.977,4133,3.977,4134,3.977,4135,3.977,4136,2.438,4137,6.87,4138,3.977,4139,2.438,4140,9.834,4141,5.038,4142,7.247,4143,2.438,4144,2.438,4145,3.291,4146,2.184,4147,2.438,4148,5.038,4149,2.438,4150,4.514,4151,2.184,4152,2.017,4153,2.438,4154,2.184,4155,6.404,4156,5.813,4157,2.438,4158,5.038,4159,2.438,4160,3.977,4161,6.87,4162,5.813,4163,5.813,4164,2.438,4165,3.563,4166,5.038,4167,5.813,4168,2.438,4169,2.438,4170,2.438,4171,2.438,4172,2.438,4173,3.977,4174,2.438,4175,6.87,4176,6.404,4177,3.977,4178,2.438,4179,3.977,4180,3.977,4181,5.813,4182,2.438,4183,3.563,4184,3.977,4185,3.977,4186,2.438,4187,5.813,4188,3.977,4189,3.563,4190,3.977,4191,3.563,4192,3.977,4193,2.438,4194,2.438,4195,2.438,4196,2.438,4197,2.438,4198,3.977,4199,2.438,4200,2.438,4201,3.977,4202,2.438,4203,5.038,4204,2.438,4205,5.038,4206,2.438,4207,2.438,4208,2.438,4209,2.438,4210,3.977,4211,2.438,4212,2.438,4213,2.438,4214,2.438,4215,3.977,4216,2.438,4217,2.438,4218,2.438,4219,2.438,4220,2.438,4221,2.438,4222,2.438,4223,3.977,4224,2.438,4225,2.438,4226,2.438,4227,2.438,4228,2.438,4229,5.038,4230,2.438,4231,2.438,4232,2.438,4233,2.438,4234,3.977,4235,2.438,4236,2.438,4237,2.438,4238,2.438,4239,3.977,4240,2.438,4241,3.977,4242,2.438,4243,2.438,4244,2.438,4245,2.438,4246,2.438,4247,2.438,4248,2.438,4249,2.438,4250,2.438,4251,2.438,4252,2.438,4253,2.438,4254,2.438,4255,2.438,4256,2.438,4257,2.438,4258,2.438,4259,2.438,4260,2.438,4261,2.438,4262,3.977,4263,2.438,4264,2.438,4265,2.438,4266,3.977,4267,2.438,4268,2.438,4269,5.813,4270,3.977,4271,7.247,4272,2.438,4273,2.438,4274,2.438,4275,2.438,4276,2.438,4277,2.438,4278,2.438,4279,2.438,4280,2.438,4281,2.438,4282,2.438,4283,2.438,4284,2.438,4285,2.438,4286,2.438,4287,2.438,4288,2.438,4289,2.438,4290,2.438,4291,2.438,4292,5.038,4293,2.438,4294,5.038,4295,2.438,4296,2.438,4297,5.038,4298,2.438,4299,5.038,4300,5.038,4301,5.038,4302,5.038,4303,5.038,4304,5.038,4305,6.404,4306,2.438,4307,2.438,4308,2.438,4309,2.438,4310,2.438,4311,2.438,4312,2.438,4313,3.977,4314,2.438,4315,3.977,4316,2.438,4317,2.438,4318,3.977,4319,2.438,4320,2.438,4321,2.438,4322,2.438,4323,2.438,4324,2.438]],["title/classes/TimeScale.html",[0,0.082,324,4.212]],["body/classes/TimeScale.html",[0,0.077,2,1.151,3,0.185,4,0.174,5,0.174,10,0.191,11,0.428,14,1.151,17,1.407,19,2.31,20,0.005,21,1.104,22,1.437,24,0.379,28,0.32,39,0.185,41,0.733,75,1.231,78,0.004,79,0.003,80,0.002,85,0.768,91,3.448,94,1.88,95,1.765,97,1.787,107,1.437,108,0.762,115,4.196,124,1.285,132,3.103,134,0.762,140,1.98,164,1.372,175,1.98,192,1.902,216,4.783,227,1.787,269,1.787,280,2.598,291,4.396,309,1.291,324,5.442,336,1.38,673,2.362,760,1.944,776,2.362,1893,2.328,1918,2.916,2127,3.775,2130,3.969,2136,4.295,2137,3.448,2138,2.686,2147,3.848,2154,5.338,2155,5.338,2157,3.537,2159,4.564,2160,4.564,2161,5.082,2162,3.848,2163,3.848,2167,2.766,2168,4.424,2170,5.528,2171,3.848,2283,5.732,2284,4.836,2285,5.732,2317,3.477,3424,3.913,3425,5.893,3426,5.442,3427,5.893,3428,5.105,3430,4.237,3431,4.237,3432,4.237,3433,4.237,3438,4.237,3439,4.237,3440,4.237,3441,4.237,3442,4.237,3443,4.237,3444,4.237,3445,4.237,3446,4.237,3447,4.237,3448,4.237,3449,4.237,3450,4.237,3451,4.237,3452,4.237,3454,4.237,3455,4.237,3456,3.913,3457,4.237,3458,4.237,3459,3.913,3614,4.237,3626,4.237,4325,8.895,4326,7.563,4327,4.729,4328,7.698,4329,4.729,4330,4.729,4331,5.893,4332,4.729,4333,4.729,4334,4.729,4335,4.729]],["title/classes/UtilityService.html",[0,0.082,329,3.422]],["body/classes/UtilityService.html",[0,0.066,2,0.994,3,0.16,4,0.15,5,0.15,10,0.328,12,0.745,13,0.569,17,1.2,19,2.121,20,0.005,21,0.959,22,1.249,24,0.34,28,0.332,39,0.16,42,1.674,47,1.423,55,1.544,57,1.851,75,0.849,78,0.004,79,0.003,80,0.002,85,0.663,94,1.367,96,4.064,107,0.892,108,0.875,110,1.544,112,1.577,117,1.829,126,1.794,134,0.757,146,1.794,149,1.348,164,1.405,175,1.805,179,0.768,192,2.167,213,1.726,222,2.459,225,2.332,227,2.58,241,2.476,269,1.61,280,1.768,281,0.739,285,1.616,290,1.721,315,2.641,316,2.641,329,3.983,334,1.444,336,2.613,371,3.379,411,1.282,487,3.852,607,2.829,665,1.263,770,2.894,772,2.604,823,2.176,824,1.78,825,2.4,841,3.031,882,3.914,919,3.659,1087,4.903,1357,2.648,1418,1.551,1454,2.035,1652,2.196,1669,2.745,1670,2.641,1690,2.141,1887,1.605,1893,2.256,1910,1.428,2127,4.074,2142,4.21,2153,2.256,2157,4.702,2161,3.751,2218,4.156,2285,2.864,2909,3.379,2947,2.745,2959,3.17,2962,3.379,2973,3.379,2985,3.17,3006,4.903,3153,3.379,3573,3.003,3860,3.659,4165,3.659,4336,4.084,4337,5.927,4338,5.927,4339,5.927,4340,5.927,4341,5.927,4342,5.927,4343,8.475,4344,4.084,4345,4.084,4346,4.084,4347,5.927,4348,4.084,4349,6.975,4350,5.927,4351,4.084,4352,9.393,4353,4.084,4354,4.084,4355,4.084,4356,4.084,4357,4.084,4358,8.475,4359,6.975,4360,4.084,4361,5.927,4362,4.084,4363,4.084,4364,5.927,4365,4.084,4366,6.975,4367,4.084,4368,6.975,4369,7.653,4370,7.653,4371,4.084,4372,4.084,4373,4.084,4374,4.084,4375,4.084,4376,4.084,4377,4.084,4378,5.927,4379,4.084,4380,4.084,4381,8.475,4382,4.084,4383,4.084,4384,4.084,4385,4.084,4386,9.393,4387,4.084,4388,4.084,4389,4.084,4390,4.084,4391,3.659,4392,5.927,4393,4.084,4394,5.927,4395,4.084,4396,4.084,4397,4.084,4398,5.927,4399,6.975,4400,4.084,4401,4.084,4402,4.084,4403,4.084,4404,4.084,4405,4.084,4406,4.084,4407,6.975,4408,4.084,4409,4.084,4410,4.084,4411,4.084,4412,4.084,4413,4.084,4414,4.084,4415,4.084,4416,4.084,4417,4.084,4418,4.084,4419,4.084,4420,4.084,4421,4.084,4422,9.273,4423,4.084,4424,4.084,4425,4.084,4426,6.975,4427,4.084,4428,4.084,4429,4.084,4430,4.084,4431,4.084,4432,6.975,4433,4.084,4434,6.975,4435,4.084,4436,4.084,4437,4.084,4438,5.927,4439,4.084,4440,4.084,4441,4.084,4442,4.084,4443,4.084,4444,4.084,4445,5.927,4446,4.084,4447,4.084,4448,4.084]],["title/classes/VerticalBarAccessors.html",[0,0.082,4449,4.561]],["body/classes/VerticalBarAccessors.html",[0,0.104,2,1.568,3,0.252,4,0.237,5,0.237,7,2.488,10,0.26,11,0.525,12,1.263,13,1.398,14,1.568,15,5.659,16,5.101,17,1.378,19,1.526,20,0.005,21,0.729,22,0.949,23,3.145,24,0.381,28,0.345,38,1.726,39,0.252,41,0.899,56,3.77,57,2.077,58,7.092,59,5.916,75,0.923,78,0.003,79,0.004,80,0.003,115,4.026,159,1.786,198,6.143,200,4.584,203,5.763,205,5.086,206,4.584,207,5.331,208,5.331,210,3.218,255,4.179,291,4.34,994,2.217,1052,3.336,1854,7.23,1855,5.331,1856,5.772,1857,5.772,1858,5.772,1859,5.772,1860,5.772,1861,4.166,1862,5.772,1863,4.166,1864,5.772,1865,4.166,1866,7.23,1867,4.166,1869,5.772,1870,5.772,2280,4.33,4449,7.23,4450,9.237]],["title/classes/XYAccessors.html",[0,0.082,2244,3.422]],["body/classes/XYAccessors.html",[0,0.114,2,1.718,3,0.276,4,0.259,5,0.259,7,2.726,8,1.84,10,0.285,11,0.556,12,1.228,17,0.969,20,0.005,24,0.268,28,0.276,33,2.352,34,1.684,38,1.891,39,0.334,40,0.004,42,2.289,47,2.289,57,2.082,60,5.737,62,5.737,75,1.011,78,0.004,79,0.004,80,0.004,94,1.639,107,2.004,108,0.855,134,0.658,159,1.89,216,3.796,241,2.601,774,1.718,777,3.101,1150,4.263,1949,3.186,1951,2.283,2139,2.089,2157,4.59,2243,6.167,2244,5.737,2247,4.129,2248,4.129,2796,5.326,2866,7.648,2867,7.648,2868,7.063,4451,7.059]],["title/classes/XYGridConfig.html",[0,0.082,87,3.292]],["body/classes/XYGridConfig.html",[0,0.086,2,1.299,3,0.209,4,0.196,5,0.196,8,1.539,10,0.216,11,0.465,14,1.959,17,1.331,20,0.005,24,0.358,28,0.337,39,0.209,41,0.796,75,1.232,78,0.003,79,0.004,80,0.003,83,2.388,84,3.33,87,5.206,90,1.214,94,1.812,95,3.209,96,3.757,97,2.506,98,5.92,99,5.92,100,4.021,101,3.41,102,1.914,103,3.268,104,1.862,106,4.291,107,2.157,108,0.892,109,3.142,110,2.187,111,6.268,112,3.638,113,3.516,114,2.324,115,3.567,117,1.955,118,6.091,119,4.801,120,5.009,122,3.41,124,2.435,126,3.138,127,3.742,128,4.883,129,2.472,130,5.877,131,3.924,132,3.105,133,4.017,134,0.497,135,3.587,136,3.924,137,2.392,138,3.221,139,3.924,140,1.076,141,3.924,143,2.771,144,2.442,150,4.476,152,2.665,161,1.513,170,4.416,177,6.4,183,0.94,197,4.801,245,3.031,254,2.442,257,4.142,258,4.416,407,4.416,488,2.956,552,2.493,627,2.299,1506,5.252,1812,4.781,1834,4.781,1840,2.797,1841,2.87,1842,2.87,1843,2.87,1844,2.87,1845,2.87,1846,2.605,1847,2.87,2049,4.22,2518,3.924,3550,4.781,4452,9.224,4453,5.337,4454,5.337,4455,5.337,4456,5.337,4457,5.337,4458,5.337,4459,7.143,4460,7.143,4461,5.337,4462,5.337,4463,5.337,4464,5.337,4465,5.337,4466,5.337]],["title/classes/XYRenderer.html",[0,0.082,2796,3.176]],["body/classes/XYRenderer.html",[0,0.069,2,1.038,3,0.167,4,0.225,5,0.157,10,0.396,11,0.398,12,1.261,13,1.333,17,1.345,19,2.244,20,0.005,21,1.083,22,1.38,24,0.372,28,0.28,34,0.782,38,1.143,39,0.167,41,0.681,42,1.024,47,1.024,53,1.54,75,1.118,78,0.002,79,0.003,80,0.002,85,1.438,94,1.831,96,2.491,97,1.661,107,1.705,108,0.77,110,1.582,115,4.038,117,0.871,134,0.801,143,2.104,164,1.244,175,1.91,179,1.011,192,1.728,194,1.372,209,2.682,216,4.444,218,2.654,227,1.159,242,2.866,247,2.753,266,4.621,269,1.661,270,4.621,272,3.953,273,3.953,279,2.919,280,2.181,281,1.107,283,1.339,285,1.959,290,2.122,294,3.288,295,3.727,296,3.727,297,2.404,299,2.768,303,2.984,306,3.205,327,2.082,333,2.404,336,2.085,343,2.661,368,1.863,384,2.211,394,2.355,395,2.866,396,2.757,411,1.339,439,1.38,545,1.661,592,2.984,607,2.036,705,1.81,719,1.143,734,1.353,738,2.985,772,2.914,787,1.372,793,2.293,802,2.13,841,3.993,935,1.127,1150,2.13,1156,3.377,1252,2.757,1255,1.54,1279,5.048,1309,2.645,1357,1.619,1454,2.085,1489,2.984,1501,2.661,1520,5.059,1635,2.809,1638,3.136,1653,3.136,1795,2.355,1823,3.136,1886,2.499,1894,1.515,1895,1.127,1910,1.491,1912,1.619,1913,1.619,1914,1.891,1915,1.566,1918,2.621,1960,1.468,1961,1.592,1982,2.039,1991,1.619,1995,2.282,2015,2.13,2068,2.422,2077,2.661,2109,3.577,2124,2.495,2127,3.43,2156,3.577,2405,3.136,2599,4.496,2717,4.109,2790,2.757,2796,3.815,2815,2.757,2823,2.991,2841,4.621,2947,2.866,3498,2.991,3554,4.746,3555,6.06,3556,4.746,3557,4.746,3558,4.746,3559,4.746,3560,4.746,3561,3.529,3562,3.529,3563,3.529,3564,3.529,3566,5.548,3569,3.31,3571,3.529,3572,3.136,3573,3.136,3574,4.496,3575,3.31,3576,6.06,3577,3.529,3578,3.31,3579,3.31,3580,3.31,3581,3.529,3582,2.866,3583,3.31,3584,3.31,3585,3.136,3586,3.31,3587,3.529,3588,3.31,3589,3.529,3590,5.548,3591,3.31,3592,5.74,3593,3.529,3594,2.757,3595,3.529,3596,4.288,3597,3.31,3598,3.529,3599,3.31,3600,3.529,3601,3.31,3602,3.529,3603,3.31,4467,6.114,4468,4.265,4469,4.265,4470,4.265,4471,4.265,4472,4.265,4473,4.265,4474,4.265,4475,4.265]],["title/interfaces/ZoneCross.html",[40,0.003,2848,3.951]],["body/interfaces/ZoneCross.html",[3,0.284,4,0.266,5,0.266,10,0.293,11,0.564,20,0.005,22,1.417,24,0.352,28,0.284,39,0.364,40,0.004,78,0.004,79,0.004,80,0.004,134,0.896,164,1.19,212,4.328,213,4.328,281,1.57,309,1.422,368,2.208,417,3.28,782,2.208,1599,2.575,1698,4.522,1871,1.098,1985,3.293,2153,5.573,2843,5.625,2844,5.996,2845,5.996,2846,6.493,2847,6.493,2848,6.732,2849,5.625,2850,5.625,2851,5.625]],["title/classes/ZoomPlugin.html",[0,0.082,2880,4.212]],["body/classes/ZoomPlugin.html",[0,0.069,2,1.032,3,0.166,4,0.156,5,0.156,10,0.171,11,0.396,12,1.037,14,1.032,17,1.313,19,1.005,20,0.005,21,0.689,22,0.625,24,0.313,28,0.383,39,0.239,40,0.002,41,0.679,55,2.437,75,0.873,78,0.003,79,0.003,80,0.002,83,1.975,89,1.758,90,1.1,94,1.807,96,3.497,97,1.936,103,1.941,104,1.587,107,1.557,108,0.664,110,0.939,112,1.639,115,3.422,117,1.244,124,1.655,134,0.395,140,0.855,143,2.68,144,1.941,161,2.02,164,1.179,175,1.783,179,1.211,183,0.747,192,1.958,194,0.952,222,2.527,227,2.459,254,3.26,269,1.655,297,1.702,309,1.398,310,2.116,315,2.743,316,2.743,317,1.256,320,1.864,332,2.119,336,1.777,347,3.119,418,2.56,436,2.281,443,2.799,444,2.861,446,1.857,447,2.861,459,1.523,464,1.046,465,2.883,466,2.647,471,2.647,472,2.647,473,2.647,474,2.647,476,1.803,524,1.137,545,1.936,583,2.281,584,2.281,587,2.56,596,1.655,597,1.507,615,3.51,636,0.878,664,2.224,700,3.51,703,1.912,752,1.372,787,1.747,790,2.41,825,1.46,882,2.17,935,1.121,1010,2.119,1123,2.647,1124,2.647,1156,3.936,1166,3.801,1167,3.51,1172,1.372,1173,2.482,1181,2.647,1182,2.647,1195,2.56,1196,2.647,1253,2.2,1357,1.611,1454,1.238,1460,2.975,1503,3.293,1640,2.224,1669,2.851,1670,2.743,1672,2.071,1682,3.51,1721,3.51,1736,1.584,1779,5.04,1790,4.302,1800,3.293,1846,2.071,1886,1.483,1895,1.61,1907,1.639,2003,2.353,2013,1.941,2018,2.224,2028,1.864,2039,2.281,2051,2.025,2088,2.482,2127,2.676,2221,2.851,2222,4.094,2451,3.51,2480,3.51,2765,4.728,2793,2.851,2869,7.318,2870,8.108,2871,6.385,2872,5.457,2873,5.457,2874,5.457,2875,8.482,2876,3.51,2877,3.51,2878,3.801,2879,3.119,2880,5.04,2881,3.801,2882,3.801,2883,3.51,2884,3.801,2885,3.801,2886,3.801,2887,3.801,2888,3.801,2889,3.801,2890,3.801,2891,5.531,2892,6.045,2893,3.801,2894,3.801,2895,3.801,2896,3.801,2897,3.801,2898,3.801,2899,3.801,2900,3.801,2901,3.801,2902,3.801,2903,3.801,2904,3.293,2905,3.801,2906,3.801,2907,3.801,2908,3.801,2909,3.51,2910,3.801,2911,3.801,2912,3.801,2913,3.801,2914,3.801,2915,3.801,2916,3.801,2917,3.801,2918,3.801,2919,3.801,2920,6.824,2921,3.801,2922,3.801,2923,3.801,2924,3.801,2925,3.801,2926,3.801,2927,3.801,2928,5.457,2929,3.801,2930,3.801,2931,3.801,2932,3.801,2933,3.801,2934,3.51,2935,3.801,2936,3.801,2937,3.801,2938,3.801,2939,3.801,2940,3.801,2941,3.801,2942,3.801,2943,3.801,2944,3.801,2945,3.801,2946,3.51,2947,4.094,2948,3.51,2949,3.801,2950,3.801,2951,3.801,2952,3.801,2953,3.801,2954,6.385,2955,5.457,2956,6.978,2957,3.801,2958,5.457,2959,6.045,2960,5.457,2961,3.801,2962,5.04,2963,3.801,2964,5.457,2965,6.385,2966,3.801,2967,3.801,2968,3.801,2969,3.801,2970,3.801,2971,3.801,2972,3.801,2973,3.51,2974,3.801,2975,3.801,2976,3.801,2984,3.801,4476,4.243,4477,4.243,4478,4.243,4479,4.243]],["title/dependencies.html",[3630,4.746,4480,4.266]],["body/dependencies.html",[20,0.005,52,1.978,78,0.004,79,0.005,80,0.004,91,4.09,117,1.594,309,1.933,310,2.462,874,6.992,875,6.992,876,6.992,1119,5.738,1885,3.499,3146,6.457,3630,7.032,4146,6.992,4481,7.804,4482,7.804,4483,7.804,4484,9.06,4485,9.06,4486,9.06,4487,7.804,4488,7.804]],["title/miscellaneous/enumerations.html",[4489,2.991,4490,5.479]],["body/miscellaneous/enumerations.html",[10,0.276,12,1.138,20,0.005,78,0.003,79,0.004,80,0.003,90,0.965,107,1.827,108,0.981,183,1.474,212,3.824,213,3.824,281,1.236,332,4.179,333,2.338,404,3.909,459,1.708,602,7.496,660,4.416,662,5.623,723,5.301,732,4.416,733,4.789,734,1.512,735,4.416,781,4.59,783,5.623,784,5.623,785,5.623,786,5.623,1172,2.706,1255,3.021,1440,4.179,1872,2.684,1895,1.805,1898,3.177,1900,3.347,1903,3.347,1904,3.347,1906,3.347,1907,3.232,1985,2.593,2064,4.416,2082,5.22,2083,5.41,2084,5.41,2085,5.22,2086,4.416,2087,4.416,2088,4.894,2844,5.651,2849,5.301,2850,5.301,2851,6.494,3090,6.922,3142,5.301,4489,4.789,4490,6.119,4491,8.249,4492,6.119,4493,6.83,4494,6.83]],["title/index.html",[10,0.172,954,3.311,4495,3.529]],["body/index.html",[5,0.302,12,1.034,20,0.005,28,0.322,32,3.101,78,0.003,79,0.004,80,0.003,83,1.683,90,1.161,91,4.893,92,4.655,110,1.469,132,2.397,149,1.51,183,1.17,255,3.612,285,1.32,310,1.804,417,2.214,429,5.948,432,4.006,435,3.883,477,2.917,482,2.975,503,3.395,552,3.101,757,3.911,763,4.142,787,1.489,821,3.395,840,5.948,856,5.492,954,6.381,1053,5.492,1056,2.147,1193,4.881,1393,5.492,1394,4.461,1501,4.142,1583,4.655,1797,5.948,1874,2.656,1879,3.573,1881,1.965,1886,2.321,1945,2.564,1962,2.656,1996,3.175,2051,3.925,2068,4.67,2137,3.48,2258,4.881,2748,5.948,3142,5.152,3182,5.492,3412,5.152,3426,5.492,3500,5.948,3594,4.292,3628,6.567,3631,5.492,3632,5.492,3640,5.948,3662,5.948,3710,5.948,4126,5.152,4152,5.492,4189,5.948,4391,5.948,4495,6.802,4496,5.492,4497,6.639,4498,6.639,4499,5.948,4500,6.639,4501,6.639,4502,6.639,4503,6.639,4504,6.639,4505,6.639,4506,6.639,4507,6.639,4508,6.639,4509,6.639,4510,6.639,4511,6.639,4512,6.639,4513,6.639,4514,6.639,4515,5.948,4516,6.639,4517,6.639,4518,5.948,4519,6.639,4520,6.639,4521,8.222,4522,6.639,4523,5.948,4524,6.639,4525,5.948,4526,6.639,4527,5.948,4528,6.639,4529,6.639,4530,6.639,4531,6.639,4532,6.639,4533,6.639,4534,8.222,4535,6.639,4536,6.639,4537,6.639,4538,8.222,4539,6.639,4540,6.639,4541,6.639,4542,5.948,4543,5.492,4544,5.492,4545,5.948,4546,5.492]],["title/license.html",[954,3.311,4495,3.529,4547,3.822]],["body/license.html",[0,0.058,4,0.34,5,0.317,17,0.492,20,0.003,21,0.609,28,0.14,78,0.003,79,0.003,80,0.002,85,0.582,132,1.294,180,3.505,183,0.631,184,1.789,213,1.514,240,2.548,253,0.872,297,1.504,336,1.045,379,4.729,456,2.316,459,0.896,580,2.681,702,3.21,738,1.159,741,1.125,766,1.273,809,2.235,812,1.408,837,2.634,856,2.964,926,2.964,1054,2.428,1150,1.789,1220,2.408,1233,2.078,1357,1.36,1430,1.36,1501,5.382,1603,3.779,1620,1.36,1635,3.025,1651,3.21,1698,3.357,1764,3.21,1795,2.971,1840,2.82,1871,0.543,1877,2.873,1889,3.269,1948,1.177,1954,1.433,1958,1.433,1960,2.471,1975,1.433,1987,1.979,1988,1.408,1995,1.337,1996,1.384,2010,4.964,2021,1.639,2022,3.568,2026,4.873,2046,2.82,2051,2.568,2053,2.893,2059,2.971,2104,2.316,2118,4.031,2132,2.235,2139,2.278,2252,2.512,2253,2.634,2257,3.773,2518,2.634,2522,2.964,2523,2.964,2666,3.21,2745,3.21,3142,2.781,3146,2.964,3160,8.7,3234,3.21,3249,5.345,3412,7.912,3420,3.21,3468,2.634,3582,2.408,3585,3.956,3596,2.512,3753,3.21,3790,3.21,3806,3.21,3807,3.21,3813,6.434,3922,3.21,3972,5.788,4145,8.077,4152,2.964,4183,3.21,4191,3.21,4328,2.964,4499,3.21,4515,5.788,4518,5.788,4523,5.788,4525,6.896,4527,3.21,4547,9.117,4548,7.182,4549,6.461,4550,3.583,4551,3.583,4552,3.583,4553,8.823,4554,9.349,4555,7.182,4556,7.697,4557,9.519,4558,8.987,4559,3.583,4560,3.583,4561,8.987,4562,9.246,4563,7.697,4564,5.38,4565,3.583,4566,7.697,4567,3.583,4568,3.583,4569,7.182,4570,3.583,4571,8.823,4572,7.182,4573,3.583,4574,6.461,4575,5.38,4576,3.583,4577,3.583,4578,5.38,4579,3.583,4580,5.38,4581,3.583,4582,3.583,4583,3.583,4584,3.583,4585,3.583,4586,3.583,4587,3.583,4588,3.583,4589,6.461,4590,5.38,4591,3.583,4592,3.583,4593,8.084,4594,5.38,4595,6.461,4596,6.461,4597,3.583,4598,3.21,4599,3.583,4600,3.583,4601,3.583,4602,3.583,4603,6.461,4604,5.38,4605,3.583,4606,8.823,4607,5.38,4608,3.583,4609,5.38,4610,9.711,4611,3.583,4612,3.583,4613,3.583,4614,3.583,4615,5.38,4616,3.583,4617,3.583,4618,3.583,4619,3.583,4620,7.182,4621,7.697,4622,3.583,4623,5.38,4624,7.182,4625,5.38,4626,3.583,4627,7.697,4628,5.38,4629,3.583,4630,3.583,4631,6.461,4632,3.583,4633,3.583,4634,3.583,4635,3.583,4636,5.38,4637,3.583,4638,3.583,4639,3.583,4640,6.461,4641,3.583,4642,3.583,4643,3.583,4644,3.583,4645,3.583,4646,7.182,4647,8.987,4648,3.583,4649,5.38,4650,6.461,4651,5.38,4652,5.38,4653,5.38,4654,6.461,4655,5.38,4656,6.461,4657,5.38,4658,5.38,4659,5.38,4660,5.38,4661,3.583,4662,5.38,4663,3.583,4664,7.697,4665,8.385,4666,5.38,4667,5.38,4668,5.38,4669,3.583,4670,5.38,4671,3.583,4672,3.583,4673,3.583,4674,6.461,4675,3.583,4676,3.583,4677,3.583,4678,5.38,4679,5.38,4680,3.583,4681,3.583,4682,3.583,4683,3.583,4684,3.583,4685,3.583,4686,5.38,4687,3.583,4688,3.583,4689,3.583,4690,3.583,4691,3.583,4692,3.583,4693,3.583,4694,6.461,4695,3.583,4696,3.583,4697,6.461,4698,3.583,4699,3.583,4700,3.583,4701,3.583,4702,8.626,4703,3.583,4704,3.583,4705,3.583,4706,3.583,4707,7.182,4708,5.38,4709,3.583,4710,3.583,4711,3.583,4712,6.461,4713,3.583,4714,3.583,4715,5.38,4716,5.38,4717,3.583,4718,3.583,4719,3.583,4720,3.583,4721,5.38,4722,3.583,4723,3.583,4724,3.583,4725,3.583,4726,3.583,4727,3.583,4728,3.583,4729,3.583,4730,6.461,4731,7.182,4732,3.583,4733,3.583,4734,3.583,4735,3.583,4736,3.583,4737,3.583,4738,3.583,4739,3.583,4740,5.38,4741,3.583,4742,3.583,4743,5.38,4744,3.583,4745,3.583,4746,3.583,4747,3.583,4748,3.583,4749,7.182,4750,6.461,4751,6.461,4752,6.461,4753,5.38,4754,6.461,4755,5.38,4756,5.38,4757,5.38,4758,3.583,4759,3.583,4760,3.583,4761,3.583,4762,3.583,4763,3.583,4764,5.38,4765,3.583,4766,3.583,4767,3.583,4768,7.697,4769,3.583,4770,3.583,4771,3.583,4772,3.583,4773,3.583,4774,3.583,4775,3.583,4776,3.583,4777,7.697,4778,3.583,4779,3.583,4780,3.583,4781,3.583,4782,3.583,4783,3.583,4784,3.583,4785,3.583,4786,3.583,4787,3.583,4788,3.583,4789,3.583,4790,3.583,4791,3.583,4792,3.583,4793,6.461,4794,3.583,4795,3.583,4796,3.583,4797,3.21,4798,3.583,4799,5.38,4800,3.583,4801,3.583,4802,3.583,4803,3.583,4804,3.583,4805,3.583,4806,3.583,4807,3.583,4808,3.583,4809,3.583,4810,3.583,4811,3.583,4812,3.583,4813,3.583,4814,5.38,4815,5.38,4816,3.583,4817,3.583,4818,3.583,4819,3.583,4820,3.583,4821,1.433,4822,3.583,4823,3.583,4824,3.583,4825,3.583,4826,3.583,4827,3.583,4828,3.583,4829,3.583,4830,3.583,4831,3.583,4832,3.583,4833,3.583]],["title/modules.html",[3629,5.725]],["body/modules.html",[20,0.005,78,0.004,79,0.005,80,0.004,664,4.278,1829,7.313,3628,6.001,3629,6.753,4797,7.313,4834,8.162]],["title/overview.html",[4496,5.725]],["body/overview.html",[2,1.6,20,0.005,32,3.073,78,0.003,79,0.004,80,0.003,146,2.89,197,4.42,336,2.385,478,5.462,479,3.736,482,2.948,500,5.318,502,5.462,505,5.462,507,5.184,509,5.462,511,5.058,513,5.462,515,5.462,517,5.462,520,5.318,795,5.105,818,6.54,835,5.442,1871,0.997,2006,2.3,2518,4.836,2892,6.345,3140,5.442,3627,6.763,3628,7.81,3630,5.105,3631,5.442,3632,5.442,3633,5.893,3634,5.893,3635,5.893,3636,5.893,3637,6.904,4496,5.442,4835,6.577,4836,6.577]],["title/miscellaneous/typealiases.html",[4489,2.991,4837,6.115]],["body/miscellaneous/typealiases.html",[10,0.295,12,0.92,13,1.214,20,0.004,24,0.354,33,2.151,37,2.437,78,0.004,79,0.004,80,0.004,83,1.854,159,1.93,181,3.833,182,3.833,264,6.05,265,6.05,266,5.638,267,6.768,277,7.812,281,1.324,285,1.853,309,1.435,310,2.369,545,2.369,719,1.959,776,4.355,789,2.439,882,5.115,1454,2.544,1619,6.05,1679,2.874,1680,7.812,1691,3.213,1872,2.874,1888,2.874,1889,2.557,1890,2.925,1891,2.925,1892,3.428,1918,2.228,1981,2.439,1999,2.874,2000,2.365,2001,2.925,2002,3.427,2007,4.039,2033,4.689,2037,3.034,2126,4.562,2135,4.728,2136,4.953,2137,3.833,4489,5.128,4491,8.431,4838,7.313,4839,6.551,4840,7.313]],["title/miscellaneous/variables.html",[4489,2.991,4841,5.479]],["body/miscellaneous/variables.html",[0,0.04,4,0.091,10,0.1,12,0.738,13,0.709,20,0.005,24,0.379,42,1.825,47,1.825,52,2.629,53,1.455,57,0.541,59,1.448,78,0.003,79,0.002,80,0.001,89,0.611,90,1.451,102,0.663,104,0.645,107,2.218,108,0.939,109,2.154,110,0.892,113,2.41,117,2.052,118,1.601,119,1.664,120,1.736,124,1.754,129,0.712,134,0.902,143,0.852,146,3.961,152,1.236,161,1.142,164,0.886,175,0.499,178,1.088,192,1.299,194,1.142,197,1.664,212,2.729,213,2.729,222,1.027,227,2.136,240,0.702,247,0.712,253,1.428,279,3.304,280,1.849,281,0.448,284,3.126,285,0.801,290,0.611,299,1.423,303,1.966,323,3.333,336,2.218,394,2.225,395,2.707,396,2.604,400,2.962,417,0.826,435,3.777,436,3.472,443,0.766,451,2.962,455,1.364,488,3.8,497,6.055,524,1.364,576,1.507,585,3.126,586,2.962,603,3.609,635,1.922,660,1.601,661,2.218,662,2.707,663,2.218,664,1.298,665,0.766,671,2.218,723,1.922,734,0.892,741,2.29,757,2.583,759,2.738,776,2.012,787,0.555,793,2.166,825,0.852,841,2.06,877,2.824,878,3.609,935,1.346,1010,1.236,1053,2.048,1075,2.218,1080,7.648,1082,6.686,1146,2.604,1168,3.952,1176,1.922,1186,3.126,1220,1.664,1268,3.422,1279,4.916,1357,0.94,1414,2.048,1429,2.048,1434,2.048,1435,2.048,1436,1.922,1437,3.333,1446,5.011,1489,1.208,1501,1.545,1603,1.448,1619,2.048,1635,0.973,1654,2.51,1677,3.609,1678,3.333,1881,1.192,1895,0.654,1915,1.479,1918,1.552,1920,1.583,1921,0.956,1922,0.99,1923,0.99,1924,0.99,1928,0.813,1932,0.99,1935,0.99,1936,0.99,1950,1.611,1998,0.99,2004,1.323,2074,1.545,2089,1.298,2090,1.601,2126,1.545,2127,2.237,2131,2.513,2132,1.545,2133,1.601,2134,2.604,2136,2.892,2152,1.545,2153,1.367,2166,2.604,2219,2.707,2221,2.707,2252,1.736,2261,1.82,2311,3.609,2312,3.609,2317,3.744,2318,3.609,2320,2.048,2341,1.82,2358,2.218,2381,2.048,2426,2.218,2624,2.048,2762,3.609,2774,2.218,2790,2.604,2794,2.962,2801,2.824,2876,3.333,2877,3.333,2985,1.922,3135,3.333,3394,6.978,3398,3.609,3494,3.609,3582,1.664,3592,2.962,3594,2.604,3694,3.609,3703,1.922,3751,2.218,3760,4.562,3761,2.218,3762,2.218,3763,2.218,3764,3.609,3765,2.048,3766,2.218,3767,2.048,3768,2.218,3769,3.609,3770,2.218,3771,4.562,4005,3.609,4006,3.609,4062,2.048,4081,4.562,4083,4.562,4085,4.562,4098,6.035,4126,3.126,4145,2.048,4150,3.609,4151,2.218,4154,3.609,4328,5.342,4331,3.609,4489,1.736,4491,4.854,4492,2.218,4598,2.218,4839,2.218,4841,2.218,4842,9.307,4843,4.028,4844,7.603,4845,4.028,4846,4.028,4847,4.028,4848,4.028,4849,5.092,4850,4.028,4851,4.028,4852,5.092,4853,5.867,4854,5.092,4855,4.028,4856,5.092,4857,5.867,4858,4.028,4859,4.028,4860,4.028,4861,5.092,4862,4.028,4863,2.476,4864,2.476,4865,2.476,4866,2.476,4867,2.476,4868,2.476,4869,2.476,4870,2.476,4871,2.476,4872,2.476,4873,2.476,4874,2.476,4875,2.476,4876,2.476,4877,2.476,4878,2.476,4879,2.476,4880,2.476,4881,2.476,4882,2.476,4883,2.476,4884,4.028,4885,2.476,4886,2.476,4887,9.098,4888,6.457,4889,5.092,4890,5.092,4891,5.092,4892,5.092,4893,6.92,4894,5.867,4895,2.476,4896,2.476,4897,2.476,4898,2.476,4899,7.294,4900,6.92,4901,6.92,4902,6.92,4903,6.92,4904,6.92,4905,6.92,4906,6.92,4907,5.092,4908,8.081,4909,2.476,4910,5.092,4911,4.028,4912,2.476,4913,2.476,4914,2.476,4915,5.867,4916,9.64,4917,5.867,4918,2.476,4919,4.028,4920,2.476,4921,4.028,4922,4.028,4923,4.028,4924,6.457,4925,4.028,4926,4.028,4927,4.028,4928,4.028,4929,4.028,4930,4.028,4931,4.028,4932,5.867,4933,7.603,4934,2.476,4935,2.476,4936,8.821,4937,4.028,4938,4.028,4939,2.476,4940,4.028,4941,2.476,4942,4.028,4943,2.476,4944,2.476,4945,2.476,4946,2.476,4947,4.028,4948,5.867,4949,5.092,4950,4.028,4951,2.476,4952,4.028,4953,4.028,4954,2.476,4955,2.476,4956,5.092,4957,2.476,4958,2.476,4959,2.476,4960,2.476,4961,2.476,4962,2.476,4963,2.476,4964,2.476,4965,2.476,4966,2.476,4967,2.476,4968,2.476,4969,2.476,4970,4.028,4971,2.476,4972,2.476,4973,2.476,4974,2.476,4975,4.028,4976,2.476,4977,2.476,4978,2.476,4979,2.476,4980,2.476,4981,2.476,4982,2.476,4983,5.867,4984,2.476,4985,2.476,4986,2.476,4987,2.476,4988,2.476,4989,2.476,4990,2.476,4991,2.476,4992,2.476,4993,2.476,4994,2.476,4995,4.028,4996,2.476,4997,2.476,4998,2.476,4999,2.476,5000,4.028,5001,2.476,5002,2.476,5003,2.476,5004,2.476,5005,2.476,5006,2.476,5007,4.028,5008,2.476,5009,2.476,5010,2.476,5011,2.476,5012,2.476]],["title/additional-documentation/layout.html",[2139,1.262,4542,3.822,4821,1.706]],["body/additional-documentation/layout.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/chart-types.html",[90,0.518,183,0.647,2139,1.086,4821,1.468]],["body/additional-documentation/chart-types.html",[20,0.005,78,0.004,79,0.005,80,0.004,89,1.996,90,1.143,149,1.84,183,1.426,255,4.065,417,2.699,432,4.884,503,4.139,1583,5.675,4543,6.696,4544,6.696]],["title/additional-documentation/chart-types/line.html",[149,0.97,2139,1.262,4821,1.706]],["body/additional-documentation/chart-types/line.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/chart-types/bar.html",[255,1.874,2139,1.262,4821,1.706]],["body/additional-documentation/chart-types/bar.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/chart-types/bar/bucketed-bar.html",[255,1.613,2139,1.086,4543,3.037,4821,1.468]],["body/additional-documentation/chart-types/bar/bucketed-bar.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/chart-types/bar/status.html",[417,1.423,2139,1.262,4821,1.706]],["body/additional-documentation/chart-types/bar/status.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/chart-types/bar/waterfall.html",[2139,1.262,4544,3.529,4821,1.706]],["body/additional-documentation/chart-types/bar/waterfall.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/chart-types/area.html",[89,1.052,2139,1.262,4821,1.706]],["body/additional-documentation/chart-types/area.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/chart-types/pie-and-donut.html",[503,1.877,1583,2.574,2139,1.086,4821,1.468]],["body/additional-documentation/chart-types/pie-and-donut.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/chart-types/spark.html",[432,2.574,2139,1.262,4821,1.706]],["body/additional-documentation/chart-types/spark.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/plugins.html",[552,1.993,2139,1.262,4821,1.706]],["body/additional-documentation/plugins.html",[20,0.005,78,0.004,79,0.005,80,0.004,435,4.795,552,3.83,1193,6.027]],["title/additional-documentation/plugins/tooltips.html",[435,2.495,2139,1.262,4821,1.706]],["body/additional-documentation/plugins/tooltips.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/plugins/popovers.html",[1193,3.136,2139,1.262,4821,1.706]],["body/additional-documentation/plugins/popovers.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/thresholds.html",[2139,1.262,4126,3.311,4821,1.706]],["body/additional-documentation/thresholds.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/timeframe-selection.html",[310,0.997,2139,1.086,4545,3.288,4821,1.468]],["body/additional-documentation/timeframe-selection.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/advanced-usage.html",[763,2.29,2139,1.086,4546,3.037,4821,1.468]],["body/additional-documentation/advanced-usage.html",[12,1.015,20,0.005,78,0.004,79,0.005,80,0.004,83,2.046,90,1.14,285,1.605,482,3.617,763,5.035,787,1.811,821,4.127,1056,2.61,1881,2.388,1945,3.117,2137,4.23,3594,5.218,4546,6.677]],["title/additional-documentation/advanced-usage/chart.html",[90,0.602,2139,1.262,4821,1.706]],["body/additional-documentation/advanced-usage/chart.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/advanced-usage/legend.html",[482,1.912,2139,1.262,4821,1.706]],["body/additional-documentation/advanced-usage/legend.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/advanced-usage/input-structure.html",[821,1.877,1945,1.418,2139,1.086,4821,1.468]],["body/additional-documentation/advanced-usage/input-structure.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/advanced-usage/input-structure/data.html",[12,0.537,2139,1.262,4821,1.706]],["body/additional-documentation/advanced-usage/input-structure/data.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/advanced-usage/input-structure/colors.html",[1056,1.38,2139,1.262,4821,1.706]],["body/additional-documentation/advanced-usage/input-structure/colors.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/advanced-usage/input-structure/markers.html",[1881,1.262,2139,1.262,4821,1.706]],["body/additional-documentation/advanced-usage/input-structure/markers.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/advanced-usage/events.html",[787,0.957,2139,1.262,4821,1.706]],["body/additional-documentation/advanced-usage/events.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/advanced-usage/grid.html",[83,1.081,2139,1.262,4821,1.706]],["body/additional-documentation/advanced-usage/grid.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/advanced-usage/scales.html",[285,0.848,2139,1.262,4821,1.706]],["body/additional-documentation/advanced-usage/scales.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/advanced-usage/scales/domains.html",[2139,1.262,3594,2.758,4821,1.706]],["body/additional-documentation/advanced-usage/scales/domains.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/advanced-usage/scales/formatters.html",[2137,2.236,2139,1.262,4821,1.706]],["body/additional-documentation/advanced-usage/scales/formatters.html",[20,0.005,78,0.004,79,0.005,80,0.004]]],"invertedIndex":[["",{"_index":20,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"components/BasicLegendTileComponent.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"modules/NuiChartsModule.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"additional-documentation/layout.html":{},"additional-documentation/chart-types.html":{},"additional-documentation/chart-types/line.html":{},"additional-documentation/chart-types/bar.html":{},"additional-documentation/chart-types/bar/bucketed-bar.html":{},"additional-documentation/chart-types/bar/status.html":{},"additional-documentation/chart-types/bar/waterfall.html":{},"additional-documentation/chart-types/area.html":{},"additional-documentation/chart-types/pie-and-donut.html":{},"additional-documentation/chart-types/spark.html":{},"additional-documentation/plugins.html":{},"additional-documentation/plugins/tooltips.html":{},"additional-documentation/plugins/popovers.html":{},"additional-documentation/thresholds.html":{},"additional-documentation/timeframe-selection.html":{},"additional-documentation/advanced-usage.html":{},"additional-documentation/advanced-usage/chart.html":{},"additional-documentation/advanced-usage/legend.html":{},"additional-documentation/advanced-usage/input-structure.html":{},"additional-documentation/advanced-usage/input-structure/data.html":{},"additional-documentation/advanced-usage/input-structure/colors.html":{},"additional-documentation/advanced-usage/input-structure/markers.html":{},"additional-documentation/advanced-usage/events.html":{},"additional-documentation/advanced-usage/grid.html":{},"additional-documentation/advanced-usage/scales.html":{},"additional-documentation/advanced-usage/scales/domains.html":{},"additional-documentation/advanced-usage/scales/formatters.html":{}}}],["0",{"_index":117,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"interfaces/ScalesIndex.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["0).append(\"tspan\").text",{"_index":2588,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["0).classed(ignore_interaction_class",{"_index":2526,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["0.05",{"_index":4111,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["0.0722",{"_index":4085,"title":{},"body":{"classes/TextColorProvider.html":{},"miscellaneous/variables.html":{}}}],["0.1",{"_index":2405,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["0.15",{"_index":1075,"title":{},"body":{"classes/ChartPalette.html":{},"miscellaneous/variables.html":{}}}],["0.2126",{"_index":4081,"title":{},"body":{"classes/TextColorProvider.html":{},"miscellaneous/variables.html":{}}}],["0.3",{"_index":4976,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0.5",{"_index":1678,"title":{},"body":{"classes/Grid.html":{},"classes/InteractionLabelPlugin.html":{},"miscellaneous/variables.html":{}}}],["0.7152",{"_index":4083,"title":{},"body":{"classes/TextColorProvider.html":{},"miscellaneous/variables.html":{}}}],["0a4",{"_index":4955,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0m",{"_index":4954,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0x0001",{"_index":4425,"title":{},"body":{"classes/UtilityService.html":{}}}],["0x002d",{"_index":4428,"title":{},"body":{"classes/UtilityService.html":{}}}],["0x0030",{"_index":4426,"title":{},"body":{"classes/UtilityService.html":{}}}],["0x0041",{"_index":4430,"title":{},"body":{"classes/UtilityService.html":{}}}],["0x005f",{"_index":4429,"title":{},"body":{"classes/UtilityService.html":{}}}],["0x0061",{"_index":4431,"title":{},"body":{"classes/UtilityService.html":{}}}],["0x0080",{"_index":4427,"title":{},"body":{"classes/UtilityService.html":{}}}],["0x3",{"_index":4409,"title":{},"body":{"classes/UtilityService.html":{}}}],["0x8)).tostring(16",{"_index":4410,"title":{},"body":{"classes/UtilityService.html":{}}}],["0z",{"_index":4956,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0zm",{"_index":4920,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1",{"_index":336,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Chart.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartTooltipComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/Grid.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/LinearScale.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"license.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1).fill(0",{"_index":1601,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["1,1",{"_index":2096,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["1.0.0",{"_index":4486,"title":{},"body":{"dependencies.html":{}}}],["1.105",{"_index":4911,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.105.895",{"_index":4912,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.3.0",{"_index":4487,"title":{},"body":{"dependencies.html":{}}}],["1.5.0",{"_index":4481,"title":{},"body":{"dependencies.html":{}}}],["1.528",{"_index":4948,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.572",{"_index":4930,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.573",{"_index":4927,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.626.855",{"_index":4941,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.626zm0",{"_index":4945,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.791",{"_index":4917,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.854",{"_index":4946,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.951",{"_index":4939,"title":{},"body":{"miscellaneous/variables.html":{}}}],["10",{"_index":197,"title":{},"body":{"classes/AxisConfig.html":{},"components/ChartComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/XYGridConfig.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["100",{"_index":635,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{},"miscellaneous/variables.html":{}}}],["10px",{"_index":997,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["11.3.0",{"_index":4483,"title":{},"body":{"dependencies.html":{}}}],["12.92",{"_index":4087,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["16",{"_index":4407,"title":{},"body":{"classes/UtilityService.html":{}}}],["1].value",{"_index":1607,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["2",{"_index":146,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/DonutGaugeRenderingUtil.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITooltipNode.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/SideIndicatorAccessors.html":{},"classes/UtilityService.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["2)).tostring",{"_index":3540,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["2,2",{"_index":2097,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["2.0",{"_index":4549,"title":{},"body":{"license.html":{}}}],["2.1.3",{"_index":4488,"title":{},"body":{"dependencies.html":{}}}],["2.121",{"_index":4933,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2.121zm0",{"_index":4934,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2.209",{"_index":4915,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2.237",{"_index":4940,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2.63",{"_index":4942,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2.766",{"_index":4943,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2.828",{"_index":4935,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2.907",{"_index":4947,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2.907z",{"_index":4951,"title":{},"body":{"miscellaneous/variables.html":{}}}],["20",{"_index":119,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"components/ChartMarkerComponent.html":{},"classes/XYGridConfig.html":{},"miscellaneous/variables.html":{}}}],["200",{"_index":2331,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["2004",{"_index":4551,"title":{},"body":{"license.html":{}}}],["2020",{"_index":4825,"title":{},"body":{"license.html":{}}}],["255",{"_index":4117,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["2c",{"_index":4914,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2c1.105",{"_index":4909,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2zm0",{"_index":4913,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3",{"_index":1008,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["3.145",{"_index":4929,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3.146",{"_index":4928,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3.146z",{"_index":4931,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3.354",{"_index":4926,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3.805",{"_index":4959,"title":{},"body":{"miscellaneous/variables.html":{}}}],["30",{"_index":120,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/XYGridConfig.html":{},"miscellaneous/variables.html":{}}}],["3304",{"_index":1847,"title":{},"body":{"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["4",{"_index":4916,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.001",{"_index":4924,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.703",{"_index":4949,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.703z",{"_index":4960,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.945",{"_index":4950,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.95",{"_index":4936,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.95z",{"_index":4937,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4l8,0l0,8l",{"_index":4957,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4xxx",{"_index":4403,"title":{},"body":{"classes/UtilityService.html":{}}}],["4z",{"_index":4918,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5",{"_index":118,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"classes/XYGridConfig.html":{},"miscellaneous/variables.html":{}}}],["5.0.0",{"_index":4485,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":4583,"title":{},"body":{"license.html":{}}}],["5367",{"_index":4898,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5753",{"_index":2811,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["69",{"_index":4835,"title":{},"body":{"overview.html":{}}}],["8",{"_index":3394,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["8,0l0",{"_index":4958,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8.001",{"_index":4923,"title":{},"body":{"miscellaneous/variables.html":{}}}],["855",{"_index":4944,"title":{},"body":{"miscellaneous/variables.html":{}}}],["895",{"_index":4910,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8z",{"_index":4921,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8zm0",{"_index":4925,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9",{"_index":4559,"title":{},"body":{"license.html":{}}}],["900",{"_index":3062,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["901",{"_index":2994,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["93",{"_index":4836,"title":{},"body":{"overview.html":{}}}],["__",{"_index":4261,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["__domaincalculatedwithticks",{"_index":2150,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["__side",{"_index":4323,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["__thresholds",{"_index":4192,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["_active",{"_index":3369,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["_approximateticks",{"_index":190,"title":{},"body":{"classes/AxisConfig.html":{}}}],["_backgroundcolors",{"_index":1073,"title":{},"body":{"classes/ChartPalette.html":{}}}],["_bottomscaleid",{"_index":2337,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["_config",{"_index":1700,"title":{},"body":{"classes/Grid.html":{}}}],["_d3scale",{"_index":3919,"title":{},"body":{"classes/Scale.html":{}}}],["_height",{"_index":1556,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["_index",{"_index":3996,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["_interactive",{"_index":3370,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["_isempty",{"_index":3351,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["_isempty(this.descriptionprimary",{"_index":3384,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["_isempty(this.descriptionsecondary",{"_index":3385,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["_isnil",{"_index":3882,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["_isnil(this.unitlabel",{"_index":3893,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["_isnil(this.value",{"_index":3892,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["_leftscaleid",{"_index":2338,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["_rightscaleid",{"_index":2339,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["_scales",{"_index":1699,"title":{},"body":{"classes/Grid.html":{}}}],["_seriesid",{"_index":3989,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["_seriesrenderstate",{"_index":3368,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["_standardcolors",{"_index":1071,"title":{},"body":{"classes/ChartPalette.html":{}}}],["_state",{"_index":3987,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["_target",{"_index":1701,"title":{},"body":{"classes/Grid.html":{}}}],["_textcolors",{"_index":1072,"title":{},"body":{"classes/ChartPalette.html":{}}}],["_width",{"_index":1555,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["a.element.attrs(axesstyles[a.scaleid",{"_index":2387,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["a.scaleid",{"_index":2386,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["a?.iszoneedge",{"_index":4251,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["a?.x",{"_index":4249,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["above",{"_index":1220,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialPopoverPlugin.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["absolute",{"_index":1502,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/MarkerUtils.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["absoluteposition",{"_index":3787,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["absoluteposition.x",{"_index":3793,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["absoluteposition.y",{"_index":3794,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["absolutex0",{"_index":45,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["absolutex1",{"_index":46,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["absolutey0",{"_index":50,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["absolutey1",{"_index":51,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["absorb",{"_index":4513,"title":{},"body":{"index.html":{}}}],["abstract",{"_index":216,"title":{},"body":{"classes/BarAccessors.html":{},"classes/ChartPlugin.html":{},"classes/Grid.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"classes/LinearScale.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"classes/TimeScale.html":{},"classes/XYAccessors.html":{},"classes/XYRenderer.html":{}}}],["acc",{"_index":2406,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["acc[next.scaleid",{"_index":2402,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["accept",{"_index":1725,"title":{},"body":{"classes/Grid.html":{}}}],["acceptance",{"_index":4796,"title":{},"body":{"license.html":{}}}],["accepting",{"_index":4793,"title":{},"body":{"license.html":{}}}],["access",{"_index":1316,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"injectables/ThresholdsService.html":{}}}],["accessing",{"_index":3149,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["accessor",{"_index":241,"title":{},"body":{"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"interfaces/IAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYAccessors.html":{}}}],["accessor(d",{"_index":3860,"title":{},"body":{"classes/Renderer.html":{},"classes/UtilityService.html":{}}}],["accessor(datapoint",{"_index":4377,"title":{},"body":{"classes/UtilityService.html":{}}}],["accessor(series.data[nearestindex",{"_index":376,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["accessor(zone.data[0",{"_index":4268,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["accessors",{"_index":159,"title":{},"body":{"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartPalette.html":{},"classes/DataSeries.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"classes/SideIndicatorAccessors.html":{},"classes/StatusAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"miscellaneous/typealiases.html":{}}}],["accessors.data.active(dataseries.data[0",{"_index":2824,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["accessors.data.color",{"_index":4217,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["accessors.data.end",{"_index":4216,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["accessors.data.start",{"_index":4214,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["accessors.data.thickness",{"_index":4210,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["accessors.data.y",{"_index":4281,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["accessors.series.activecolor",{"_index":2828,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["accessors.series.color",{"_index":4282,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["accessors.series.end(dataseries.id",{"_index":2834,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["accessors.series.inactivecolor",{"_index":2827,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["accessors.series.start(dataseries.id",{"_index":2833,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["accessors.ts",{"_index":7,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"classes/LineAccessors.html":{},"classes/NoopAccessors.html":{},"classes/RadialAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/StatusAccessors.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{}}}],["accessors.ts:11",{"_index":3551,"title":{},"body":{"classes/NoopAccessors.html":{}}}],["accessors.ts:12",{"_index":2276,"title":{},"body":{"interfaces/IRadialSeriesAccessors.html":{},"classes/NoopAccessors.html":{}}}],["accessors.ts:14",{"_index":4451,"title":{},"body":{"classes/XYAccessors.html":{}}}],["accessors.ts:15",{"_index":4058,"title":{},"body":{"classes/StatusAccessors.html":{}}}],["accessors.ts:16",{"_index":2265,"title":{},"body":{"interfaces/ILineSeriesAccessors.html":{},"classes/StatusAccessors.html":{}}}],["accessors.ts:18",{"_index":4060,"title":{},"body":{"classes/StatusAccessors.html":{}}}],["accessors.ts:22",{"_index":204,"title":{},"body":{"classes/BarAccessors.html":{},"classes/StatusAccessors.html":{}}}],["accessors.ts:23",{"_index":202,"title":{},"body":{"classes/BarAccessors.html":{},"classes/RadialAccessors.html":{}}}],["accessors.ts:24",{"_index":3728,"title":{},"body":{"classes/RadialAccessors.html":{},"classes/StatusAccessors.html":{}}}],["accessors.ts:28",{"_index":26,"title":{},"body":{"classes/AreaAccessors.html":{}}}],["accessors.ts:29",{"_index":18,"title":{},"body":{"classes/AreaAccessors.html":{}}}],["accessors.ts:34",{"_index":3811,"title":{},"body":{"classes/RectangleAccessors.html":{}}}],["accessors.ts:35",{"_index":3810,"title":{},"body":{"classes/RectangleAccessors.html":{}}}],["accessors.ts:37",{"_index":3389,"title":{},"body":{"classes/LineAccessors.html":{}}}],["accessors.ts:38",{"_index":3388,"title":{},"body":{"classes/LineAccessors.html":{}}}],["accessors.ts:6",{"_index":2275,"title":{},"body":{"interfaces/IRadialDataAccessors.html":{}}}],["accessors.ts:7",{"_index":1855,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["accessors.ts:8",{"_index":1854,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["accessors/noop",{"_index":3604,"title":{},"body":{"classes/NoopRenderer.html":{}}}],["accessors/rectangle",{"_index":210,"title":{},"body":{"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["accessors/xy",{"_index":2245,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["accessorsuffix",{"_index":350,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["accommodate",{"_index":2765,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/MarkerUtils.html":{},"classes/ZoomPlugin.html":{}}}],["accommodating",{"_index":1750,"title":{},"body":{"classes/Grid.html":{}}}],["accordingly",{"_index":2721,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["acquired",{"_index":2251,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["act",{"_index":4527,"title":{},"body":{"index.html":{},"license.html":{}}}],["acting",{"_index":4568,"title":{},"body":{"license.html":{}}}],["actions",{"_index":3233,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["active",{"_index":2797,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{}}}],["active(active",{"_index":3354,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["activechanged",{"_index":3081,"title":{},"body":{"components/LegendComponent.html":{}}}],["activecolor",{"_index":2798,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["acts",{"_index":4775,"title":{},"body":{"license.html":{}}}],["actual",{"_index":1153,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{}}}],["actual_component",{"_index":522,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["actually",{"_index":4237,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["actualtextelements",{"_index":2607,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["actualtextelements.push(this",{"_index":2610,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["add",{"_index":2051,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/RadialTooltipsPlugin.html":{},"injectables/ThresholdsService.html":{},"classes/ZoomPlugin.html":{},"index.html":{},"license.html":{}}}],["added",{"_index":1845,"title":{},"body":{"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["addendum",{"_index":4723,"title":{},"body":{"license.html":{}}}],["additional",{"_index":2139,"title":{"additional-documentation/layout.html":{},"additional-documentation/chart-types.html":{},"additional-documentation/chart-types/line.html":{},"additional-documentation/chart-types/bar.html":{},"additional-documentation/chart-types/bar/bucketed-bar.html":{},"additional-documentation/chart-types/bar/status.html":{},"additional-documentation/chart-types/bar/waterfall.html":{},"additional-documentation/chart-types/area.html":{},"additional-documentation/chart-types/pie-and-donut.html":{},"additional-documentation/chart-types/spark.html":{},"additional-documentation/plugins.html":{},"additional-documentation/plugins/tooltips.html":{},"additional-documentation/plugins/popovers.html":{},"additional-documentation/thresholds.html":{},"additional-documentation/timeframe-selection.html":{},"additional-documentation/advanced-usage.html":{},"additional-documentation/advanced-usage/chart.html":{},"additional-documentation/advanced-usage/legend.html":{},"additional-documentation/advanced-usage/input-structure.html":{},"additional-documentation/advanced-usage/input-structure/data.html":{},"additional-documentation/advanced-usage/input-structure/colors.html":{},"additional-documentation/advanced-usage/input-structure/markers.html":{},"additional-documentation/advanced-usage/events.html":{},"additional-documentation/advanced-usage/grid.html":{},"additional-documentation/advanced-usage/scales.html":{},"additional-documentation/advanced-usage/scales/domains.html":{},"additional-documentation/advanced-usage/scales/formatters.html":{}},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYScales.html":{},"classes/LineAccessors.html":{},"classes/RadialAccessors.html":{},"components/RichLegendTileComponent.html":{},"interfaces/ScalesIndex.html":{},"classes/XYAccessors.html":{},"license.html":{}}}],["additions",{"_index":4622,"title":{},"body":{"license.html":{}}}],["addlimitentry(accessor",{"_index":4267,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["addlimitentry(z.accessors.data.end",{"_index":4275,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["addlimitentry(z.accessors.data.start",{"_index":4274,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["addplugin",{"_index":527,"title":{},"body":{"classes/Chart.html":{},"interfaces/IChart.html":{}}}],["addplugin(plugin",{"_index":547,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["addplugins",{"_index":528,"title":{},"body":{"classes/Chart.html":{}}}],["addplugins(...plugins",{"_index":550,"title":{},"body":{"classes/Chart.html":{}}}],["adjust",{"_index":2720,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["adjustaxisticks(labelgroup",{"_index":2502,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["adjusted",{"_index":706,"title":{},"body":{"classes/Chart.html":{}}}],["adjustedindex",{"_index":3155,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["adjustment",{"_index":2966,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["adjustments",{"_index":1810,"title":{},"body":{"classes/Grid.html":{}}}],["adjustrenderingarea",{"_index":1773,"title":{},"body":{"classes/Grid.html":{}}}],["adjusts",{"_index":1772,"title":{},"body":{"classes/Grid.html":{}}}],["advanced",{"_index":4546,"title":{"additional-documentation/advanced-usage.html":{}},"body":{"index.html":{},"additional-documentation/advanced-usage.html":{}}}],["advised",{"_index":4791,"title":{},"body":{"license.html":{}}}],["aftercontentinit",{"_index":853,"title":{},"body":{"components/ChartComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["afterviewinit",{"_index":814,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartMarkerComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["afterwards",{"_index":1768,"title":{},"body":{"classes/Grid.html":{}}}],["again",{"_index":3235,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["against",{"_index":4679,"title":{},"body":{"license.html":{}}}],["agree",{"_index":4804,"title":{},"body":{"license.html":{}}}],["agreed",{"_index":4752,"title":{},"body":{"license.html":{}}}],["agreement",{"_index":4738,"title":{},"body":{"license.html":{}}}],["aids",{"_index":762,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{}}}],["algorithm",{"_index":1359,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ITooltipNode.html":{}}}],["alias",{"_index":1679,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/typealiases.html":{}}}],["aliases",{"_index":4838,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["aligned",{"_index":1448,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["alignment",{"_index":1819,"title":{},"body":{"classes/Grid.html":{}}}],["allaxislabels",{"_index":2513,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["allaxislabels.foreach((group",{"_index":2515,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["alleging",{"_index":4683,"title":{},"body":{"license.html":{}}}],["allow",{"_index":1955,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["allowedrange",{"_index":3041,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["allows",{"_index":2933,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["alone",{"_index":4675,"title":{},"body":{"license.html":{}}}],["along",{"_index":4713,"title":{},"body":{"license.html":{}}}],["alongside",{"_index":4722,"title":{},"body":{"license.html":{}}}],["alphadecay(0.3",{"_index":1403,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["already",{"_index":3467,"title":{},"body":{"classes/MappedValueProvider.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{}}}],["alternately",{"_index":2751,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["always",{"_index":920,"title":{},"body":{"components/ChartComponent.html":{}}}],["anchor",{"_index":3035,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["and(b",{"_index":4698,"title":{},"body":{"license.html":{}}}],["and(c",{"_index":4704,"title":{},"body":{"license.html":{}}}],["and(d",{"_index":4709,"title":{},"body":{"license.html":{}}}],["and/or",{"_index":4183,"title":{},"body":{"injectables/ThresholdsService.html":{},"license.html":{}}}],["angle",{"_index":3796,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["angular",{"_index":826,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["angular.json",{"_index":4524,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":1274,"title":{},"body":{"components/ChartTooltipComponent.html":{}}}],["angular/cdk/overlay",{"_index":1428,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"modules/NuiChartsModule.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["angular/core",{"_index":496,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{},"injectables/ThresholdsService.html":{}}}],["angular/localize/init",{"_index":3645,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["animate",{"_index":1272,"title":{},"body":{"components/ChartTooltipComponent.html":{}}}],["animate(300",{"_index":1280,"title":{},"body":{"components/ChartTooltipComponent.html":{}}}],["animations",{"_index":1276,"title":{},"body":{"components/ChartTooltipComponent.html":{}}}],["annotations",{"_index":4613,"title":{},"body":{"license.html":{}}}],["annular",{"_index":1927,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["annulargrowth",{"_index":1924,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/variables.html":{}}}],["annularpadding",{"_index":1923,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/variables.html":{}}}],["annularwidth",{"_index":1922,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/variables.html":{}}}],["any).bandwidth",{"_index":2558,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["any).getbbox",{"_index":3027,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["any).getboundingclientrect().width",{"_index":2738,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["any).innerhtml",{"_index":2740,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["any)[measuretype",{"_index":2674,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["anything",{"_index":4509,"title":{},"body":{"index.html":{}}}],["apache",{"_index":4548,"title":{},"body":{"license.html":{}}}],["api",{"_index":3,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"components/BasicLegendTileComponent.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"modules/NuiChartsModule.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{}}}],["apis",{"_index":1959,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["app's",{"_index":4514,"title":{},"body":{"index.html":{}}}],["appear",{"_index":4718,"title":{},"body":{"license.html":{}}}],["appearance",{"_index":663,"title":{},"body":{"classes/Chart.html":{},"miscellaneous/variables.html":{}}}],["append",{"_index":1794,"title":{},"body":{"classes/Grid.html":{}}}],["append(\"fecolormatrix",{"_index":669,"title":{},"body":{"classes/Chart.html":{}}}],["append(\"line",{"_index":3074,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["append(\"rect",{"_index":1786,"title":{},"body":{"classes/Grid.html":{}}}],["append(\"svg",{"_index":632,"title":{},"body":{"classes/Chart.html":{}}}],["appendix",{"_index":4609,"title":{},"body":{"license.html":{}}}],["applicable",{"_index":4750,"title":{},"body":{"license.html":{}}}],["applied",{"_index":1632,"title":{},"body":{"classes/Grid.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["applies",{"_index":4669,"title":{},"body":{"license.html":{}}}],["apply",{"_index":1795,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"license.html":{}}}],["applydefaults(chartseries",{"_index":3268,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["applying",{"_index":661,"title":{},"body":{"classes/Chart.html":{},"miscellaneous/variables.html":{}}}],["appropriate",{"_index":3922,"title":{},"body":{"classes/Scale.html":{},"license.html":{}}}],["appropriateness",{"_index":4763,"title":{},"body":{"license.html":{}}}],["approximate",{"_index":2045,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["approximateticks",{"_index":160,"title":{},"body":{"classes/AxisConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["approximateticks(ticks",{"_index":195,"title":{},"body":{"classes/AxisConfig.html":{}}}],["arbitrary",{"_index":1943,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["arc",{"_index":3701,"title":{},"body":{"classes/PieRenderer.html":{}}}],["arc.outerradius(range[1",{"_index":3705,"title":{},"body":{"classes/PieRenderer.html":{}}}],["arcdata",{"_index":1587,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["arcdata[i",{"_index":1605,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["architect",{"_index":4532,"title":{},"body":{"index.html":{}}}],["archives",{"_index":4824,"title":{},"body":{"license.html":{}}}],["arcs",{"_index":1597,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["arcsformarkers",{"_index":1592,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["arcsformarkers.foreach((arcdatum",{"_index":1594,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["area",{"_index":89,"title":{"additional-documentation/chart-types/area.html":{}},"body":{"classes/AreaGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartPopoverPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/RadialTooltipsPlugin.html":{},"injectables/ThresholdsService.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{},"additional-documentation/chart-types.html":{}}}],["area's",{"_index":2940,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["areaaccessors",{"_index":1,"title":{"classes/AreaAccessors.html":{}},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["areaaccessors.data.end",{"_index":4256,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["areaaccessors.data.start",{"_index":4254,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["areaaccessors.series.color",{"_index":4258,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["areaclass",{"_index":2065,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["areagridconfig",{"_index":81,"title":{"classes/AreaGridConfig.html":{}},"body":{"classes/AreaGridConfig.html":{}}}],["areas",{"_index":2069,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["areasize",{"_index":978,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["arelabelupdatesenabled",{"_index":2980,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["args",{"_index":2035,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/LegendInteractionAssist.html":{}}}],["argument",{"_index":919,"title":{},"body":{"components/ChartComponent.html":{},"classes/UtilityService.html":{}}}],["arguments.length",{"_index":4416,"title":{},"body":{"classes/UtilityService.html":{}}}],["arising",{"_index":4781,"title":{},"body":{"license.html":{}}}],["around",{"_index":3426,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{},"index.html":{}}}],["arr",{"_index":2638,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/Renderer.html":{}}}],["arr.indexof(element",{"_index":2646,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["arr.push(next",{"_index":2643,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["array",{"_index":368,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{}}}],["array(data.length",{"_index":1600,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["array.from(arr",{"_index":3855,"title":{},"body":{"classes/Renderer.html":{}}}],["array.length",{"_index":2676,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["array.map((tick",{"_index":2678,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["array.reduce((prev",{"_index":2672,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["arrayofpositions",{"_index":2682,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["arrayofpositions.reduce((p",{"_index":2689,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["aside",{"_index":1439,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["aspects",{"_index":2008,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["asserted",{"_index":4810,"title":{},"body":{"license.html":{}}}],["asserting",{"_index":1720,"title":{},"body":{"classes/Grid.html":{}}}],["assign",{"_index":3994,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assigned",{"_index":3669,"title":{},"body":{"classes/PathMarker.html":{},"injectables/ThresholdsService.html":{}}}],["assist",{"_index":735,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{},"miscellaneous/enumerations.html":{}}}],["assist's",{"_index":754,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/LegendInteractionAssist.html":{}}}],["assist.ts",{"_index":3109,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["assist.ts:100",{"_index":3985,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:28",{"_index":3983,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:30",{"_index":3973,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:310",{"_index":3118,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["assist.ts:315",{"_index":3130,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["assist.ts:32",{"_index":3971,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:331",{"_index":3121,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["assist.ts:335",{"_index":3123,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["assist.ts:34",{"_index":3976,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:36",{"_index":3970,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:360",{"_index":3126,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["assist.ts:374",{"_index":3129,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["assist.ts:38",{"_index":3981,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:384",{"_index":3120,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["assist.ts:39",{"_index":3982,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:390",{"_index":3124,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["assist.ts:40",{"_index":3980,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:41",{"_index":3978,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:55",{"_index":3997,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:65",{"_index":4000,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:84",{"_index":3984,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:92",{"_index":3991,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:96",{"_index":3988,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assistant",{"_index":761,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{}}}],["assists/chart",{"_index":3108,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["assists/spark",{"_index":3961,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assists/types.ts",{"_index":733,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"miscellaneous/enumerations.html":{}}}],["assists/types.ts:23",{"_index":2195,"title":{},"body":{"interfaces/IChartAssist.html":{}}}],["assists/types.ts:34",{"_index":2193,"title":{},"body":{"interfaces/IChartAssist.html":{}}}],["assists/types.ts:39",{"_index":2194,"title":{},"body":{"interfaces/IChartAssist.html":{}}}],["assists/types.ts:58",{"_index":745,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{}}}],["assists/types.ts:59",{"_index":748,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{}}}],["assists/types.ts:60",{"_index":747,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{}}}],["assists/types.ts:61",{"_index":746,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{}}}],["assists/types.ts:62",{"_index":749,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{}}}],["assists/types.ts:65",{"_index":751,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{}}}],["assists/types.ts:70",{"_index":2282,"title":{},"body":{"interfaces/IRenderStatesIndex.html":{}}}],["associated",{"_index":766,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"license.html":{}}}],["association",{"_index":755,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{}}}],["assume",{"_index":4765,"title":{},"body":{"license.html":{}}}],["attach",{"_index":4812,"title":{},"body":{"license.html":{}}}],["attached",{"_index":4608,"title":{},"body":{"license.html":{}}}],["attempts",{"_index":2750,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["attr",{"_index":721,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"classes/PathMarker.html":{}}}],["attr(\"class",{"_index":1800,"title":{},"body":{"classes/Grid.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/ZoomPlugin.html":{}}}],["attr(\"id",{"_index":667,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{}}}],["attr(\"stroke",{"_index":2951,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["attr(\"transform",{"_index":2474,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/InteractionLabelPlugin.html":{}}}],["attr(\"type",{"_index":670,"title":{},"body":{"classes/Chart.html":{}}}],["attr(\"values",{"_index":672,"title":{},"body":{"classes/Chart.html":{}}}],["attribute",{"_index":3670,"title":{},"body":{"classes/PathMarker.html":{}}}],["attributes",{"_index":1823,"title":{},"body":{"classes/Grid.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["attribution",{"_index":4707,"title":{},"body":{"license.html":{}}}],["attrs",{"_index":633,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{}}}],["attrs(attrs",{"_index":3076,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["attrs[attr",{"_index":3683,"title":{},"body":{"classes/PathMarker.html":{}}}],["authorized",{"_index":4564,"title":{},"body":{"license.html":{}}}],["authorship",{"_index":4603,"title":{},"body":{"license.html":{}}}],["autoheight",{"_index":1531,"title":{},"body":{"classes/DimensionConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["automatically",{"_index":1928,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/variables.html":{}}}],["automaticdomain",{"_index":4994,"title":{},"body":{"miscellaneous/variables.html":{}}}],["autowidth",{"_index":1532,"title":{},"body":{"classes/DimensionConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["available",{"_index":2666,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"license.html":{}}}],["avoid",{"_index":627,"title":{},"body":{"classes/Chart.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IXYGridConfig.html":{},"classes/MappedValueProvider.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/XYGridConfig.html":{}}}],["avoidance",{"_index":1358,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["avoidtooltipcollisions",{"_index":1360,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["away",{"_index":1435,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"miscellaneous/variables.html":{}}}],["axes",{"_index":1999,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/typealiases.html":{}}}],["axes.reduce((acc",{"_index":2407,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axes_style_change",{"_index":4865,"title":{},"body":{"miscellaneous/variables.html":{}}}],["axes_style_change_event",{"_index":2311,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"miscellaneous/variables.html":{}}}],["axesstyles",{"_index":2377,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axis",{"_index":95,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/NoopScale.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{},"classes/XYGridConfig.html":{}}}],["axis.bottom.fit",{"_index":2710,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axis.bottom.ticklabel.overflowhandler",{"_index":2713,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axis.bottom.ticksize",{"_index":2468,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axis.bottom.visible",{"_index":2711,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axis.labelgroup",{"_index":2424,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axis.labelgroup.selectall(\"*\").remove",{"_index":2434,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axis.left",{"_index":2486,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axis.left.fit",{"_index":2698,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axis.left.padding",{"_index":2482,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axis.left.ticksize",{"_index":2481,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axis.left.visible",{"_index":2699,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axis.right.fit",{"_index":2703,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axis.right.padding",{"_index":2491,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axis.right.ticksize",{"_index":2492,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axis.tickgroup.call(leftgridlines",{"_index":2444,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axis.tickgroup.call(tickaxis",{"_index":2432,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axis.tickgroup.selectall(\"*\").remove",{"_index":2435,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisbottom",{"_index":2303,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisconfig",{"_index":111,"title":{"classes/AxisConfig.html":{}},"body":{"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"classes/XYGridConfig.html":{}}}],["axisconfig.bottom.ticklabel.horizontalpadding",{"_index":2562,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisconfig.bottom.ticklabel.maxwidth",{"_index":2556,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisconfig.bottom.ticklabel.overflowhandler",{"_index":2539,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisconfig.left.fit",{"_index":2571,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisconfig.left.padding",{"_index":2574,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisconfig.left.ticklabel.horizontalpadding",{"_index":2577,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisconfig.left.ticklabel.maxwidth",{"_index":2554,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisconfig.left.ticklabel.overflowhandler",{"_index":2578,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisconfig.left.ticksize",{"_index":2575,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisconfig.right.fit",{"_index":2563,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisconfig.right.padding",{"_index":2566,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisconfig.right.ticklabel.horizontalpadding",{"_index":2569,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisconfig.right.ticklabel.maxwidth",{"_index":2552,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisconfig.right.ticklabel.overflowhandler",{"_index":2570,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisconfig.right.ticksize",{"_index":2567,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisgenerator",{"_index":2358,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"miscellaneous/variables.html":{}}}],["axisgenerator(clonedscale.d3scale",{"_index":5004,"title":{},"body":{"miscellaneous/variables.html":{}}}],["axisgenerator(scale.copytolinear().d3scale",{"_index":2427,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisgenerator(scale.d3scale",{"_index":2420,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisgroup.selectall(\"g:not(.tick",{"_index":2608,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axislabels",{"_index":2536,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axislabels.foreach((group",{"_index":2596,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisleft",{"_index":2304,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisright",{"_index":2305,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisscale",{"_index":2130,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{}}}],["axistop",{"_index":2306,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisx",{"_index":2332,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisyleft",{"_index":2333,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisyright",{"_index":2334,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["b",{"_index":2959,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/ZoomPlugin.html":{}}}],["b?.iszoneedge",{"_index":4252,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["b?.x",{"_index":4250,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["back",{"_index":3792,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["background",{"_index":2085,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"injectables/ThresholdsService.html":{},"miscellaneous/enumerations.html":{}}}],["backgroundcolor",{"_index":3872,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["backgroundcolors",{"_index":1049,"title":{},"body":{"classes/ChartPalette.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["backgrounddata",{"_index":4228,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["backgroundopacity",{"_index":1074,"title":{},"body":{"classes/ChartPalette.html":{}}}],["band",{"_index":284,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"injectables/ThresholdsService.html":{},"miscellaneous/variables.html":{}}}],["band_center",{"_index":4843,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bandscale",{"_index":2315,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["bandwidth",{"_index":2128,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["bar",{"_index":255,"title":{"additional-documentation/chart-types/bar.html":{},"additional-documentation/chart-types/bar/bucketed-bar.html":{}},"body":{"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITooltipPosition.html":{},"classes/StatusAccessors.html":{},"classes/VerticalBarAccessors.html":{},"index.html":{},"additional-documentation/chart-types.html":{}}}],["bar/bar",{"_index":2078,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["baraccessors",{"_index":198,"title":{"classes/BarAccessors.html":{}},"body":{"classes/BarAccessors.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["baraccessors.data.status",{"_index":2861,"title":{},"body":{"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{}}}],["baraccessors:22",{"_index":1856,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["baraccessors:23",{"_index":1857,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["baraccessors:34",{"_index":1858,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["baraccessors:35",{"_index":1859,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["barclass",{"_index":2115,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["bargridconfig",{"_index":251,"title":{"classes/BarGridConfig.html":{}},"body":{"classes/BarGridConfig.html":{}}}],["barhighlightstrategy",{"_index":263,"title":{"classes/BarHighlightStrategy.html":{}},"body":{"classes/BarHighlightStrategy.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["barhorizontalgridconfig",{"_index":403,"title":{"classes/BarHorizontalGridConfig.html":{}},"body":{"classes/BarHorizontalGridConfig.html":{}}}],["barrenderer",{"_index":293,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"injectables/ThresholdsService.html":{}}}],["barrenderer(rendererconfig",{"_index":4225,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["barrenderer.min_bar_thickness",{"_index":2122,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["bars",{"_index":2114,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["barserieshighlightstrategy",{"_index":409,"title":{"classes/BarSeriesHighlightStrategy.html":{}},"body":{"classes/BarSeriesHighlightStrategy.html":{}}}],["barstatusgridconfig",{"_index":416,"title":{"classes/BarStatusGridConfig.html":{}},"body":{"classes/BarStatusGridConfig.html":{}}}],["barstylesfn",{"_index":386,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["bartooltipsplugin",{"_index":433,"title":{"classes/BarTooltipsPlugin.html":{}},"body":{"classes/BarTooltipsPlugin.html":{}}}],["base",{"_index":2248,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"classes/LineAccessors.html":{},"classes/RadialAccessors.html":{},"classes/Renderer.html":{},"classes/XYAccessors.html":{}}}],["based",{"_index":1357,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/NoopRenderer.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["basetype",{"_index":2011,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["basic",{"_index":489,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["basiclegendtilecomponent",{"_index":478,"title":{"components/BasicLegendTileComponent.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{},"overview.html":{}}}],["basics",{"_index":974,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["basics[0",{"_index":977,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["basics[1",{"_index":980,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["basis",{"_index":4753,"title":{},"body":{"license.html":{}}}],["bbox",{"_index":1472,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/InteractionLabelPlugin.html":{},"classes/Renderer.html":{}}}],["bbox.height",{"_index":3038,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["bbox.left",{"_index":1477,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["bbox.top",{"_index":1479,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["bbox.width",{"_index":3040,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["bbox.y",{"_index":3033,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["bc",{"_index":4084,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["before",{"_index":1372,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"classes/LegendInteractionAssist.html":{},"injectables/ThresholdsService.html":{}}}],["behalf",{"_index":4627,"title":{},"body":{"license.html":{}}}],["behavior",{"_index":802,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["behaviorsubject",{"_index":582,"title":{},"body":{"classes/Chart.html":{},"components/ChartMarkerComponent.html":{}}}],["being",{"_index":1012,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["belong",{"_index":1336,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["below",{"_index":4152,"title":{},"body":{"injectables/ThresholdsService.html":{},"index.html":{},"license.html":{}}}],["beneficial",{"_index":4587,"title":{},"body":{"license.html":{}}}],["between",{"_index":756,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/Grid.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"injectables/ThresholdsService.html":{}}}],["beyond",{"_index":1752,"title":{},"body":{"classes/Grid.html":{}}}],["bg",{"_index":4893,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bigger",{"_index":2665,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["binary",{"_index":4356,"title":{},"body":{"classes/UtilityService.html":{}}}],["bind",{"_index":4619,"title":{},"body":{"license.html":{}}}],["bisect",{"_index":4389,"title":{},"body":{"classes/UtilityService.html":{}}}],["black",{"_index":1083,"title":{},"body":{"classes/ChartPalette.html":{}}}],["block",{"_index":3103,"title":{},"body":{"components/LegendComponent.html":{}}}],["boilerplate",{"_index":4813,"title":{},"body":{"license.html":{}}}],["boolean",{"_index":140,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/Chart.html":{},"components/ChartMarkerComponent.html":{},"classes/GridConfig.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IStackMetadata.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"classes/TimeScale.html":{},"classes/XYGridConfig.html":{},"classes/ZoomPlugin.html":{}}}],["booleans",{"_index":2016,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["bootstrap",{"_index":3140,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"modules/NuiChartsModule.html":{},"overview.html":{}}}],["border",{"_index":150,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["border.node",{"_index":1806,"title":{},"body":{"classes/Grid.html":{}}}],["border.style(\"stroke",{"_index":1804,"title":{},"body":{"classes/Grid.html":{}}}],["borderconfig",{"_index":4454,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["borderconfig(\"nui",{"_index":4459,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["borderconfigs",{"_index":1759,"title":{},"body":{"classes/Grid.html":{}}}],["borderconfigs[side",{"_index":1769,"title":{},"body":{"classes/Grid.html":{}}}],["borderkey",{"_index":1680,"title":{},"body":{"classes/Grid.html":{},"miscellaneous/typealiases.html":{}}}],["borderkeys",{"_index":1760,"title":{},"body":{"classes/Grid.html":{}}}],["bordermidpoint",{"_index":1677,"title":{},"body":{"classes/Grid.html":{},"miscellaneous/variables.html":{}}}],["borders",{"_index":101,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["borders[side",{"_index":1770,"title":{},"body":{"classes/Grid.html":{}}}],["both",{"_index":2113,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"injectables/ThresholdsService.html":{}}}],["bottom",{"_index":113,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYGridConfig.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/XYGridConfig.html":{},"miscellaneous/variables.html":{}}}],["bottomlabelaxis",{"_index":2419,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["bottomscale",{"_index":2707,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["bottomscale?.iscontinuous",{"_index":2712,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["bottomscaleid",{"_index":2344,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["bottomscaleid(id",{"_index":2347,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["boundaries",{"_index":2073,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["boundary",{"_index":2850,"title":{},"body":{"interfaces/ISimpleThresholdZone.html":{},"injectables/ThresholdsService.html":{},"interfaces/ZoneCross.html":{},"miscellaneous/enumerations.html":{}}}],["bounds",{"_index":1902,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["brackets",{"_index":4815,"title":{},"body":{"license.html":{}}}],["break",{"_index":2663,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["breaking",{"_index":2052,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["breakpoints",{"_index":4229,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["broadcast",{"_index":1978,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["broadcasted",{"_index":811,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["browse",{"_index":4834,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1829,"title":{},"body":{"classes/Grid.html":{},"modules.html":{}}}],["brush",{"_index":2875,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["brushbehavior",{"_index":2872,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["brushelement",{"_index":2894,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["brushend",{"_index":2961,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["brushmove",{"_index":2957,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["brushselection",{"_index":2873,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["brushstart",{"_index":2953,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["brushstartx",{"_index":2895,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["brushx",{"_index":2874,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["bsrgb",{"_index":4120,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["bucketed",{"_index":4543,"title":{"additional-documentation/chart-types/bar/bucketed-bar.html":{}},"body":{"index.html":{},"additional-documentation/chart-types.html":{}}}],["bug",{"_index":2884,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["build",{"_index":529,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["build(element",{"_index":553,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["buildaxes(container",{"_index":2619,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["buildborders(container",{"_index":1757,"title":{},"body":{"classes/Grid.html":{}}}],["builddatamanager",{"_index":674,"title":{},"body":{"classes/Chart.html":{}}}],["buildgrid",{"_index":675,"title":{},"body":{"classes/Chart.html":{}}}],["buildinteractionlabel(target",{"_index":3050,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["buildplugins",{"_index":1627,"title":{},"body":{"classes/Grid.html":{},"interfaces/IGrid.html":{}}}],["buildplugins(chart",{"_index":1649,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["buildrenderengine(lasagna",{"_index":679,"title":{},"body":{"classes/Chart.html":{}}}],["buildrenderingarea(clippathid",{"_index":1783,"title":{},"body":{"classes/Grid.html":{}}}],["builds",{"_index":1755,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["built",{"_index":3037,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["bus",{"_index":591,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["bus.ts",{"_index":1609,"title":{},"body":{"classes/EventBus.html":{}}}],["bus.ts:15",{"_index":1611,"title":{},"body":{"classes/EventBus.html":{}}}],["bus.ts:8",{"_index":1613,"title":{},"body":{"classes/EventBus.html":{}}}],["buses",{"_index":813,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["bynens",{"_index":4414,"title":{},"body":{"classes/UtilityService.html":{}}}],["c",{"_index":1087,"title":{},"body":{"classes/ChartPalette.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{}}}],["calculate",{"_index":1489,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYScales.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["calculateaxesstyles(e",{"_index":2388,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["calculated",{"_index":451,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["calculatedbottomwidth",{"_index":2557,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["calculatedleftwidth",{"_index":2572,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["calculatedrightwidth",{"_index":2564,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["calculates",{"_index":948,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{}}}],["calculating",{"_index":1132,"title":{},"body":{"components/ChartPopoverComponent.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["calculation",{"_index":2717,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{}}}],["calculation/automatic",{"_index":2320,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/Scale.html":{},"miscellaneous/variables.html":{}}}],["calculations",{"_index":1919,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["calculator",{"_index":2135,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{},"miscellaneous/typealiases.html":{}}}],["call",{"_index":2759,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/LegendInteractionAssist.html":{}}}],["call(bottomlabelaxis",{"_index":2425,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["callbackfn(result",{"_index":4444,"title":{},"body":{"classes/UtilityService.html":{}}}],["called",{"_index":3251,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["caps",{"_index":2092,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["capture",{"_index":2928,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["carry",{"_index":4700,"title":{},"body":{"license.html":{}}}],["case",{"_index":2747,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/MarkerUtils.html":{}}}],["catch",{"_index":378,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["category",{"_index":211,"title":{},"body":{"classes/BarAccessors.html":{},"classes/DataSeries.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["cause",{"_index":2257,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IScaleSVGElement.html":{},"classes/LineAccessors.html":{},"license.html":{}}}],["causing",{"_index":2754,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["cd",{"_index":864,"title":{},"body":{"components/ChartComponent.html":{}}}],["center",{"_index":1446,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["certain",{"_index":1965,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["change",{"_index":2000,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"components/LegendComponent.html":{},"miscellaneous/typealiases.html":{}}}],["changed",{"_index":2745,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"license.html":{}}}],["changedetection",{"_index":1266,"title":{},"body":{"components/ChartTooltipComponent.html":{},"components/LegendSeriesComponent.html":{}}}],["changedetectionstrategy",{"_index":1275,"title":{},"body":{"components/ChartTooltipComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["changedetectionstrategy.onpush",{"_index":1267,"title":{},"body":{"components/ChartTooltipComponent.html":{},"components/LegendSeriesComponent.html":{}}}],["changedetector",{"_index":991,"title":{},"body":{"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/RichLegendTileComponent.html":{}}}],["changedetectorref",{"_index":865,"title":{},"body":{"components/ChartComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/RichLegendTileComponent.html":{}}}],["changes",{"_index":917,"title":{},"body":{"components/ChartComponent.html":{}}}],["changes.plugin",{"_index":940,"title":{},"body":{"components/ChartDonutContentComponent.html":{},"components/ChartPopoverComponent.html":{}}}],["changes.plugin.isfirstchange",{"_index":1121,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["changes[\"active",{"_index":3104,"title":{},"body":{"components/LegendComponent.html":{}}}],["changes[\"chart",{"_index":889,"title":{},"body":{"components/ChartComponent.html":{}}}],["changes[\"chart\"].previousvalue",{"_index":891,"title":{},"body":{"components/ChartComponent.html":{}}}],["changes[\"color",{"_index":1017,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["changes[\"marker",{"_index":1016,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["changes[\"plugin",{"_index":1322,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["changes[\"plugin\"].currentvalue",{"_index":1323,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["character",{"_index":4780,"title":{},"body":{"license.html":{}}}],["charge",{"_index":4656,"title":{},"body":{"license.html":{}}}],["chart",{"_index":90,"title":{"classes/Chart.html":{},"additional-documentation/chart-types.html":{},"additional-documentation/advanced-usage/chart.html":{}},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"components/BasicLegendTileComponent.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/NoopRenderer.html":{},"modules/NuiChartsModule.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"classes/XYGridConfig.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/chart-types.html":{},"additional-documentation/advanced-usage.html":{}}}],["chart's",{"_index":704,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["chart'},{'name",{"_index":501,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["chart(grid",{"_index":4037,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["chart.addplugin(labelplugin",{"_index":4054,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["chart.addplugin(new",{"_index":4040,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["chart.getgrid().config(lastspark",{"_index":4049,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["chart.hasplugin(interactionlabelplugin",{"_index":4052,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["chart.removeplugin(interactionlabelplugin",{"_index":4056,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["chart.updatedimensions",{"_index":4050,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["chart/chart.component",{"_index":3655,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["chart_component",{"_index":805,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{}}}],["chart_markers",{"_index":4005,"title":{},"body":{"classes/SparkChartAssist.html":{},"miscellaneous/variables.html":{}}}],["chart_palette_cs1",{"_index":4006,"title":{},"body":{"classes/SparkChartAssist.html":{},"miscellaneous/variables.html":{}}}],["chart_palette_cs2",{"_index":4847,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chart_palette_cs3",{"_index":4848,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chart_palette_cs_s",{"_index":4845,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chart_palette_cs_s_extended",{"_index":4846,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chart_view_status",{"_index":4866,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chart_view_status_event",{"_index":877,"title":{},"body":{"components/ChartComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"miscellaneous/variables.html":{}}}],["chartassist",{"_index":3117,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["chartassist.chartassistsubject.pipe",{"_index":3243,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["chartassist.getlabel(chartseries",{"_index":3229,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["chartassist.getvisibleserieswithlegend",{"_index":3241,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["chartassisteventtype",{"_index":783,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/LegendInteractionAssist.html":{},"miscellaneous/enumerations.html":{}}}],["chartassisteventtype.emphasizeseries",{"_index":3173,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["chartassisteventtype.resetvisibleseries",{"_index":3175,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["chartassisteventtype.toggleseries",{"_index":3177,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["chartassistrenderstatedata",{"_index":731,"title":{"classes/ChartAssistRenderStateData.html":{}},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/LegendInteractionAssist.html":{}}}],["chartassistrenderstatedata(series.id",{"_index":3280,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["chartassistrenderstatedata(seriesid",{"_index":3304,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["chartassistseriesdefaults",{"_index":3138,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["chartassistsubject",{"_index":3161,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["chartcollection",{"_index":847,"title":{},"body":{"injectables/ChartCollectionService.html":{}}}],["chartcollectionid",{"_index":843,"title":{},"body":{"injectables/ChartCollectionService.html":{}}}],["chartcollectioniddirective",{"_index":520,"title":{"directives/ChartCollectionIdDirective.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{},"overview.html":{}}}],["chartcollectionservice",{"_index":818,"title":{"injectables/ChartCollectionService.html":{}},"body":{"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"modules/NuiChartsModule.html":{},"overview.html":{}}}],["chartcomponent",{"_index":500,"title":{"components/ChartComponent.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{},"overview.html":{}}}],["chartdonutcontentcomponent",{"_index":502,"title":{"components/ChartDonutContentComponent.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{},"overview.html":{}}}],["chartdonutcontentplugin",{"_index":930,"title":{"classes/ChartDonutContentPlugin.html":{}},"body":{"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{}}}],["chartelement",{"_index":1218,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialPopoverPlugin.html":{}}}],["chartelement.getboundingclientrect",{"_index":1473,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["chartelement.offsetheight",{"_index":1237,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["chartelement.offsetleft",{"_index":1227,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["chartelement.offsetparent.getboundingclientrect",{"_index":1475,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["chartelement.offsettop",{"_index":1229,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["chartevent.broadcast",{"_index":2914,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["chartevent.data",{"_index":2916,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["chartindex",{"_index":1980,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["chartmarker",{"_index":3666,"title":{},"body":{"classes/PathMarker.html":{},"classes/SvgMarker.html":{}}}],["chartmarkercomponent",{"_index":505,"title":{"components/ChartMarkerComponent.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{},"overview.html":{}}}],["chartpalette",{"_index":1044,"title":{"classes/ChartPalette.html":{}},"body":{"classes/ChartPalette.html":{},"classes/SparkChartAssist.html":{}}}],["chartpalette(chart_palette_cs1",{"_index":3979,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["chartplugin",{"_index":465,"title":{"classes/ChartPlugin.html":{}},"body":{"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/ZoomPlugin.html":{}}}],["chartplugin:11",{"_index":473,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/ZoomPlugin.html":{}}}],["chartplugin:13",{"_index":474,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/ZoomPlugin.html":{}}}],["chartplugin:15",{"_index":471,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/ZoomPlugin.html":{}}}],["chartplugin:7",{"_index":466,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/ZoomPlugin.html":{}}}],["chartplugin:9",{"_index":472,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/ZoomPlugin.html":{}}}],["chartpopovercomponent",{"_index":507,"title":{"components/ChartPopoverComponent.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/IPopoverPluginConfig.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{},"overview.html":{}}}],["chartpopoverplugin",{"_index":1108,"title":{"classes/ChartPopoverPlugin.html":{}},"body":{"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:11",{"_index":3743,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:13",{"_index":3744,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:15",{"_index":3741,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:28",{"_index":3733,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:30",{"_index":3737,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:32",{"_index":3735,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:34",{"_index":3731,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:36",{"_index":3736,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:43",{"_index":3734,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:51",{"_index":3732,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:56",{"_index":3740,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:68",{"_index":3739,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:7",{"_index":3738,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:9",{"_index":3742,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartposition",{"_index":1476,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["chartposition.x",{"_index":1507,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["chartposition.y",{"_index":1509,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["charts",{"_index":757,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IScale.html":{},"interfaces/ISpark.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYScales.html":{},"classes/LineAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["chartseries",{"_index":773,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ITooltipPosition.html":{},"classes/LegendInteractionAssist.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/SparkChartAssist.html":{}}}],["chartseries.accessors.data?.[dataaccessorkey",{"_index":3154,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["chartseries.data.length",{"_index":3152,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["chartseries.data[chartseries.data.length",{"_index":3200,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["chartseries.id",{"_index":4018,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["chartseries.renderer",{"_index":3774,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["chartseries.scales.r",{"_index":3776,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["chartseriesset",{"_index":759,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IBandScale.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IScale.html":{},"interfaces/ISpark.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"miscellaneous/variables.html":{}}}],["chartseriesset.map(cs",{"_index":4981,"title":{},"body":{"miscellaneous/variables.html":{}}}],["charttooltipcomponent",{"_index":509,"title":{"components/ChartTooltipComponent.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{},"overview.html":{}}}],["charttooltipdirective",{"_index":1311,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"modules/NuiChartsModule.html":{}}}],["charttooltipscomponent",{"_index":511,"title":{"components/ChartTooltipsComponent.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{},"overview.html":{}}}],["charttooltipsplugin",{"_index":437,"title":{"classes/ChartTooltipsPlugin.html":{}},"body":{"classes/BarTooltipsPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["charttooltipsplugin:11",{"_index":3758,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["charttooltipsplugin:126",{"_index":467,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["charttooltipsplugin:13",{"_index":3759,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["charttooltipsplugin:131",{"_index":470,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["charttooltipsplugin:15",{"_index":3756,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["charttooltipsplugin:63",{"_index":454,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["charttooltipsplugin:65",{"_index":450,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["charttooltipsplugin:7",{"_index":3755,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["charttooltipsplugin:70",{"_index":462,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["charttooltipsplugin:75",{"_index":457,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["charttooltipsplugin:88",{"_index":461,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["charttooltipsplugin:9",{"_index":3757,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["charttooltipsplugin:98",{"_index":468,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["check",{"_index":1523,"title":{},"body":{"classes/DataSeries.html":{}}}],["child",{"_index":2736,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["children",{"_index":2887,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["choose",{"_index":4794,"title":{},"body":{"license.html":{}}}],["circle",{"_index":3760,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["claim",{"_index":4680,"title":{},"body":{"license.html":{}}}],["claims",{"_index":4670,"title":{},"body":{"license.html":{}}}],["clampedx",{"_index":3044,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["clamps",{"_index":4346,"title":{},"body":{"classes/UtilityService.html":{}}}],["clamptorange",{"_index":4337,"title":{},"body":{"classes/UtilityService.html":{}}}],["clamptorange(value",{"_index":4344,"title":{},"body":{"classes/UtilityService.html":{}}}],["class",{"_index":0,"title":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{}},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"components/BasicLegendTileComponent.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISpark.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"modules/NuiChartsModule.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["class.inverse",{"_index":3319,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["class.nui",{"_index":3894,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["classed(\"hidden",{"_index":1821,"title":{},"body":{"classes/Grid.html":{}}}],["classed(\"interaction",{"_index":3405,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["classed(\"nui",{"_index":2440,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["classed(\"sw",{"_index":2623,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["classed(`${classname}${getpointereventsclass()}${getpointereventsclickclass",{"_index":3520,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["classed(`pointer",{"_index":3406,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"overview.html":{}}}],["classname",{"_index":2029,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/MarkerUtils.html":{}}}],["classref",{"_index":564,"title":{},"body":{"classes/Chart.html":{},"interfaces/IChart.html":{}}}],["classrefs",{"_index":570,"title":{},"body":{"classes/Chart.html":{}}}],["cleanup",{"_index":1976,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["cleartimeout(this.closetimeout",{"_index":1353,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["cleartimeout(this.collisiontimeout",{"_index":1347,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["cleartimeout(this.handleticklabeloverflowdebounceindex[scale.id",{"_index":2593,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["cleartimeout(this.opentimeout",{"_index":1344,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["cleartimeout(this.reconcilemarginsdebounce",{"_index":2768,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["click",{"_index":1898,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"components/LegendSeriesComponent.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"miscellaneous/enumerations.html":{}}}],["clickable",{"_index":2090,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"miscellaneous/variables.html":{}}}],["clicked",{"_index":1897,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["clientrect",{"_index":1031,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["clientrect.height",{"_index":1037,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["clientrect.width",{"_index":1036,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["clientrect.x",{"_index":1034,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["clientrect.y",{"_index":1035,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["clip",{"_index":1641,"title":{},"body":{"classes/Grid.html":{}}}],["clippathid",{"_index":1717,"title":{},"body":{"classes/Grid.html":{}}}],["clipped",{"_index":1736,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/ZoomPlugin.html":{}}}],["clockwise",{"_index":3768,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["clone",{"_index":2307,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["clone(this._config.dimension.margin",{"_index":2614,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["clonedeep",{"_index":4001,"title":{},"body":{"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{}}}],["clonedeep(scale",{"_index":5002,"title":{},"body":{"miscellaneous/variables.html":{}}}],["clonedeep(sourceseries.data",{"_index":4213,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["clonedeep(sparks",{"_index":4021,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["clonedeep(thresholds_main_chart_renderer_config",{"_index":4158,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["clonedeep(thresholds_main_chart_renderer_config.statestyles",{"_index":4284,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["clonedscale",{"_index":5001,"title":{},"body":{"miscellaneous/variables.html":{}}}],["close",{"_index":1165,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["closepending",{"_index":1318,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["closepopoversubject",{"_index":1155,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["closest",{"_index":4165,"title":{},"body":{"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{}}}],["closestdataindex",{"_index":4386,"title":{},"body":{"classes/UtilityService.html":{}}}],["closetimeout",{"_index":1321,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["closetooltips",{"_index":1285,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["clr",{"_index":3721,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["cluster_nuichartsmodule",{"_index":3633,"title":{},"body":{"modules/NuiChartsModule.html":{},"overview.html":{}}}],["cluster_nuichartsmodule_declarations",{"_index":3634,"title":{},"body":{"modules/NuiChartsModule.html":{},"overview.html":{}}}],["cluster_nuichartsmodule_exports",{"_index":3636,"title":{},"body":{"modules/NuiChartsModule.html":{},"overview.html":{}}}],["cluster_nuichartsmodule_providers",{"_index":3635,"title":{},"body":{"modules/NuiChartsModule.html":{},"overview.html":{}}}],["code",{"_index":4515,"title":{},"body":{"index.html":{},"license.html":{}}}],["codeunit",{"_index":4422,"title":{},"body":{"classes/UtilityService.html":{}}}],["collection",{"_index":798,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"modules/NuiChartsModule.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{}}}],["collection.service",{"_index":822,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"modules/NuiChartsModule.html":{}}}],["collection.service.ts",{"_index":836,"title":{},"body":{"injectables/ChartCollectionService.html":{}}}],["collection.service.ts:14",{"_index":846,"title":{},"body":{"injectables/ChartCollectionService.html":{}}}],["collection/chart",{"_index":797,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"modules/NuiChartsModule.html":{}}}],["collectionid",{"_index":830,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{}}}],["collections",{"_index":839,"title":{},"body":{"injectables/ChartCollectionService.html":{},"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["collision",{"_index":1234,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipNode.html":{},"injectables/ThresholdsService.html":{}}}],["collisionforce",{"_index":1397,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["collisiontimeout",{"_index":1320,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["color",{"_index":52,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChartMarker.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYGridConfig.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/MarkerUtils.html":{},"classes/PathMarker.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RectangleAccessors.html":{},"components/RichLegendTileComponent.html":{},"classes/SequentialColorProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["color.helper",{"_index":1065,"title":{},"body":{"classes/ChartPalette.html":{},"classes/TextColorProvider.html":{}}}],["color1",{"_index":4101,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["color2",{"_index":4102,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["coloraccessor",{"_index":2826,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["coloraccessor(dataseries.id",{"_index":2831,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["colordefinitions",{"_index":4076,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["colordefinitions.dark",{"_index":4096,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["colordefinitions.light",{"_index":4097,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["colorprovider",{"_index":23,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"classes/LineAccessors.html":{},"classes/RadialAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/VerticalBarAccessors.html":{}}}],["colorprovider.get(d.__thresholds.status",{"_index":4220,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["colorprovider.get(series.value",{"_index":4259,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["colors",{"_index":1056,"title":{"additional-documentation/advanced-usage/input-structure/colors.html":{}},"body":{"classes/ChartPalette.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineAccessors.html":{},"classes/MappedValueProvider.html":{},"classes/NoopAccessors.html":{},"classes/SequentialColorProvider.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"index.html":{},"additional-documentation/advanced-usage.html":{}}}],["column",{"_index":2968,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["combination",{"_index":4676,"title":{},"body":{"license.html":{}}}],["comment",{"_index":4817,"title":{},"body":{"license.html":{}}}],["commercial",{"_index":4789,"title":{},"body":{"license.html":{}}}],["common",{"_index":3142,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{}}}],["common/chart",{"_index":587,"title":{},"body":{"classes/Chart.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/ZoomPlugin.html":{}}}],["common/data",{"_index":588,"title":{},"body":{"classes/Chart.html":{}}}],["common/event",{"_index":590,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["common/lasagna",{"_index":593,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["common/mouse",{"_index":2314,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["common/palette/chart",{"_index":4004,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["common/palette/default",{"_index":3137,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["common/palette/palettes",{"_index":4007,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["common/palette/sequential",{"_index":4008,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["common/render",{"_index":594,"title":{},"body":{"classes/Chart.html":{}}}],["common/scales/band",{"_index":2316,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["common/scales/domain",{"_index":2319,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["common/scales/helpers/convert",{"_index":2987,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["common/scales/linear",{"_index":2322,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["common/scales/types",{"_index":1672,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/ZoomPlugin.html":{}}}],["common/types",{"_index":597,"title":{},"body":{"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/SparkChartAssist.html":{},"classes/ZoomPlugin.html":{}}}],["common/utility.service",{"_index":1673,"title":{},"body":{"classes/Grid.html":{},"classes/InteractionLabelPlugin.html":{},"classes/SparkChartAssist.html":{}}}],["commonly",{"_index":1890,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/typealiases.html":{}}}],["communication",{"_index":4631,"title":{},"body":{"license.html":{}}}],["compare",{"_index":289,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["comparison",{"_index":369,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IScaleSVGElement.html":{}}}],["compensate",{"_index":4388,"title":{},"body":{"classes/UtilityService.html":{}}}],["compiled",{"_index":4600,"title":{},"body":{"license.html":{}}}],["compliance",{"_index":4829,"title":{},"body":{"license.html":{}}}],["complies",{"_index":4728,"title":{},"body":{"license.html":{}}}],["component",{"_index":477,"title":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{},"index.html":{}}}],["component_template",{"_index":498,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["components",{"_index":479,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{},"overview.html":{}}}],["computed",{"_index":4434,"title":{},"body":{"classes/UtilityService.html":{}}}],["computer",{"_index":4786,"title":{},"body":{"license.html":{}}}],["condition",{"_index":2658,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["condition(elementstodisplay",{"_index":2669,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["conditions",{"_index":4554,"title":{},"body":{"license.html":{}}}],["config",{"_index":143,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialPopoverPlugin.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["config(config",{"_index":1656,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["config.classname",{"_index":1801,"title":{},"body":{"classes/Grid.html":{}}}],["config.color",{"_index":1805,"title":{},"body":{"classes/Grid.html":{}}}],["config.eventstreamid",{"_index":1151,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["config.gridticks",{"_index":2368,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["config.showbottomaxis",{"_index":422,"title":{},"body":{"classes/BarStatusGridConfig.html":{}}}],["config.ts",{"_index":84,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/DimensionConfig.html":{},"classes/GridConfig.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/XYGridConfig.html":{}}}],["config.ts:10",{"_index":163,"title":{},"body":{"classes/AxisConfig.html":{},"classes/MissingDataLineRendererConfig.html":{}}}],["config.ts:11",{"_index":1839,"title":{},"body":{"classes/GridConfig.html":{}}}],["config.ts:13",{"_index":171,"title":{},"body":{"classes/AxisConfig.html":{}}}],["config.ts:14",{"_index":1539,"title":{},"body":{"classes/DimensionConfig.html":{},"classes/GridConfig.html":{}}}],["config.ts:16",{"_index":170,"title":{},"body":{"classes/AxisConfig.html":{},"classes/GridConfig.html":{},"classes/XYGridConfig.html":{}}}],["config.ts:21",{"_index":1538,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["config.ts:22",{"_index":162,"title":{},"body":{"classes/AxisConfig.html":{}}}],["config.ts:23",{"_index":4453,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["config.ts:27",{"_index":174,"title":{},"body":{"classes/AxisConfig.html":{}}}],["config.ts:28",{"_index":1838,"title":{},"body":{"classes/GridConfig.html":{}}}],["config.ts:29",{"_index":1537,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["config.ts:3",{"_index":419,"title":{},"body":{"classes/BarStatusGridConfig.html":{}}}],["config.ts:31",{"_index":1536,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["config.ts:32",{"_index":177,"title":{},"body":{"classes/AxisConfig.html":{},"classes/XYGridConfig.html":{}}}],["config.ts:34",{"_index":1552,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["config.ts:36",{"_index":165,"title":{},"body":{"classes/AxisConfig.html":{},"classes/DimensionConfig.html":{}}}],["config.ts:38",{"_index":1554,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["config.ts:47",{"_index":1540,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["config.ts:49",{"_index":1542,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["config.ts:51",{"_index":1543,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["config.ts:6",{"_index":105,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{}}}],["config.ts:60",{"_index":1548,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["config.ts:62",{"_index":1550,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["config.ts:64",{"_index":1551,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["config.ts:7",{"_index":172,"title":{},"body":{"classes/AxisConfig.html":{},"classes/DimensionConfig.html":{},"classes/MissingDataLineRendererConfig.html":{}}}],["config.ts:74",{"_index":1544,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["config.ts:76",{"_index":1546,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["config.ts:78",{"_index":1547,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["config.ts:8",{"_index":3548,"title":{},"body":{"classes/MissingDataLineRendererConfig.html":{}}}],["config.ts:9",{"_index":3550,"title":{},"body":{"classes/MissingDataLineRendererConfig.html":{},"classes/XYGridConfig.html":{}}}],["config.visible",{"_index":2418,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["config.width",{"_index":1803,"title":{},"body":{"classes/Grid.html":{}}}],["config/grid",{"_index":1674,"title":{},"body":{"classes/Grid.html":{}}}],["config/xy",{"_index":2328,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["configuration",{"_index":253,"title":{},"body":{"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/ChartPopoverPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/PieRenderer.html":{},"classes/RadialPopoverPlugin.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["configurations",{"_index":2050,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["configure",{"_index":2107,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["configurecharteventsubscriptions(eventbus",{"_index":3254,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["configurecssfilters",{"_index":657,"title":{},"body":{"classes/Chart.html":{}}}],["configured",{"_index":1149,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["configureeventsubscriptions(eventbus",{"_index":4042,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["configuring",{"_index":2256,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["confine",{"_index":2929,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["conflict",{"_index":2753,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["conflicts",{"_index":3469,"title":{},"body":{"classes/MappedValueProvider.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{}}}],["conform",{"_index":1962,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"index.html":{}}}],["conforming",{"_index":88,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{}}}],["connectedposition",{"_index":1427,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["connection",{"_index":3764,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["connection_points",{"_index":3769,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["connection_points[sectionindex].x",{"_index":3802,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["connection_points[sectionindex].y",{"_index":3803,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["consequential",{"_index":4779,"title":{},"body":{"license.html":{}}}],["consider",{"_index":246,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["considered",{"_index":4993,"title":{},"body":{"miscellaneous/variables.html":{}}}],["considers",{"_index":4991,"title":{},"body":{"miscellaneous/variables.html":{}}}],["consist",{"_index":3998,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["consistent",{"_index":4801,"title":{},"body":{"license.html":{}}}],["consistently",{"_index":2764,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["consists",{"_index":739,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{}}}],["conspicuously",{"_index":4643,"title":{},"body":{"license.html":{}}}],["const",{"_index":227,"title":{},"body":{"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Chart.html":{},"components/ChartComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/Grid.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/PathMarker.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["constant",{"_index":1933,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/PieRenderer.html":{},"injectables/ThresholdsService.html":{}}}],["constants",{"_index":320,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Chart.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/ZoomPlugin.html":{}}}],["constitutes",{"_index":4684,"title":{},"body":{"license.html":{}}}],["constructor",{"_index":14,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/NoopAccessors.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYGridConfig.html":{},"classes/ZoomPlugin.html":{}}}],["constructor(@host",{"_index":3883,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["constructor(@inject(chart_component",{"_index":831,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["constructor(@optional",{"_index":3371,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["constructor(baraccessors",{"_index":4057,"title":{},"body":{"classes/StatusAccessors.html":{}}}],["constructor(changedetector",{"_index":989,"title":{},"body":{"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{}}}],["constructor(chartassist",{"_index":3116,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["constructor(chartcomponent",{"_index":816,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["constructor(colorprovider",{"_index":15,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"classes/HorizontalBarAccessors.html":{},"classes/LineAccessors.html":{},"classes/RadialAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["constructor(colors",{"_index":1051,"title":{},"body":{"classes/ChartPalette.html":{},"classes/SequentialColorProvider.html":{}}}],["constructor(config",{"_index":418,"title":{},"body":{"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/ZoomPlugin.html":{}}}],["constructor(d",{"_index":3667,"title":{},"body":{"classes/PathMarker.html":{}}}],["constructor(dataseries",{"_index":1513,"title":{},"body":{"classes/DataSeries.html":{}}}],["constructor(elref",{"_index":861,"title":{},"body":{"components/ChartComponent.html":{}}}],["constructor(formattername",{"_index":2981,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["constructor(grid",{"_index":538,"title":{},"body":{"classes/Chart.html":{}}}],["constructor(id",{"_index":3428,"title":{},"body":{"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"classes/TimeScale.html":{}}}],["constructor(legend",{"_index":3321,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["constructor(legendseries",{"_index":3874,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["constructor(loggerservice",{"_index":4136,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["constructor(markers",{"_index":3942,"title":{},"body":{"classes/SequentialChartMarkerProvider.html":{}}}],["constructor(private",{"_index":54,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Chart.html":{},"components/ChartComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITooltipNode.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/MappedValueProvider.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/StatusAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["constructor(protected",{"_index":4070,"title":{},"body":{"classes/SvgMarker.html":{}}}],["constructor(public",{"_index":790,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"classes/ChartPopoverPlugin.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LegendInteractionAssist.html":{},"classes/Renderer.html":{},"classes/SparkChartAssist.html":{},"classes/ZoomPlugin.html":{}}}],["constructor(readonly",{"_index":1455,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["constructor(scalekey",{"_index":274,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["constructor(seriesid",{"_index":743,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{}}}],["constructor(showbottomaxis",{"_index":3969,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["constructor(sourceprovider",{"_index":3714,"title":{},"body":{"classes/ProcessedColorProvider.html":{},"classes/TextColorProvider.html":{}}}],["constructor(svg",{"_index":4066,"title":{},"body":{"classes/SvgMarker.html":{}}}],["constructor(tooltippositionoffset",{"_index":1415,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{}}}],["constructor(valuemap",{"_index":3470,"title":{},"body":{"classes/MappedValueProvider.html":{}}}],["constructor(values",{"_index":3948,"title":{},"body":{"classes/SequentialValueProvider.html":{}}}],["construed",{"_index":4724,"title":{},"body":{"license.html":{}}}],["consumer",{"_index":1947,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["consumers",{"_index":1874,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"index.html":{}}}],["contained",{"_index":4711,"title":{},"body":{"license.html":{}}}],["container",{"_index":705,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["container.append(\"g",{"_index":2622,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["container.append(\"line",{"_index":1799,"title":{},"body":{"classes/Grid.html":{}}}],["container.attr(\"transform",{"_index":2728,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["containers",{"_index":2124,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["containing",{"_index":1639,"title":{},"body":{"classes/Grid.html":{},"classes/LegendInteractionAssist.html":{}}}],["content",{"_index":926,"title":{},"body":{"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"license.html":{}}}],["content'},{'name",{"_index":504,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["content.component",{"_index":3650,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["content.component.html",{"_index":928,"title":{},"body":{"components/ChartDonutContentComponent.html":{}}}],["content.component.less",{"_index":927,"title":{},"body":{"components/ChartDonutContentComponent.html":{}}}],["content.component.ts",{"_index":925,"title":{},"body":{"components/ChartDonutContentComponent.html":{}}}],["content.component.ts:15",{"_index":931,"title":{},"body":{"components/ChartDonutContentComponent.html":{}}}],["content.component.ts:18",{"_index":934,"title":{},"body":{"components/ChartDonutContentComponent.html":{}}}],["content/chart",{"_index":924,"title":{},"body":{"components/ChartDonutContentComponent.html":{},"modules/NuiChartsModule.html":{}}}],["content]=\"serieshasadditionalcontent",{"_index":3895,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["contentposition",{"_index":929,"title":{},"body":{"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{}}}],["contentpositionupdatesubject",{"_index":951,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["contentpositionupdatesubscription",{"_index":939,"title":{},"body":{"components/ChartDonutContentComponent.html":{}}}],["contents",{"_index":4719,"title":{},"body":{"license.html":{}}}],["context",{"_index":4850,"title":{},"body":{"miscellaneous/variables.html":{}}}],["continue",{"_index":3848,"title":{},"body":{"classes/Renderer.html":{}}}],["continuous",{"_index":2152,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{},"injectables/ThresholdsService.html":{},"miscellaneous/variables.html":{}}}],["contract",{"_index":4578,"title":{},"body":{"license.html":{}}}],["contrast",{"_index":4074,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["contribution",{"_index":4621,"title":{},"body":{"license.html":{}}}],["contribution(s",{"_index":4674,"title":{},"body":{"license.html":{}}}],["contributions",{"_index":4730,"title":{},"body":{"license.html":{}}}],["contributor",{"_index":4647,"title":{},"body":{"license.html":{}}}],["contributory",{"_index":4685,"title":{},"body":{"license.html":{}}}],["control",{"_index":4569,"title":{},"body":{"license.html":{}}}],["controlled",{"_index":4570,"title":{},"body":{"license.html":{}}}],["convenience",{"_index":3180,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["conversion",{"_index":3770,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["conversions",{"_index":4601,"title":{},"body":{"license.html":{}}}],["convert",{"_index":2283,"title":{},"body":{"interfaces/IScale.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"classes/TimeScale.html":{}}}],["convert(scale",{"_index":3043,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["convert(value",{"_index":2159,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{}}}],["converted",{"_index":2158,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["converts",{"_index":1499,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["coordinate",{"_index":2157,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYAccessors.html":{}}}],["coordinates",{"_index":1910,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{}}}],["copies",{"_index":4691,"title":{},"body":{"license.html":{}}}],["copy",{"_index":4697,"title":{},"body":{"license.html":{}}}],["copy/paste",{"_index":4537,"title":{},"body":{"index.html":{}}}],["copyright",{"_index":4562,"title":{},"body":{"license.html":{}}}],["core/chart",{"_index":848,"title":{},"body":{"injectables/ChartCollectionService.html":{}}}],["core/common/palette/default",{"_index":31,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"classes/LineAccessors.html":{},"classes/RadialAccessors.html":{}}}],["core/common/renderer",{"_index":2077,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/NoopRenderer.html":{},"classes/XYRenderer.html":{}}}],["core/common/scales/helpers/is",{"_index":3505,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["core/common/scales/time",{"_index":322,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["core/common/scales/types",{"_index":327,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{}}}],["core/common/types",{"_index":38,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/RadialAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"classes/StatusAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYRenderer.html":{}}}],["core/common/utility.service",{"_index":330,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["core/grid/config/xy",{"_index":4003,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["core/plugins/chart",{"_index":937,"title":{},"body":{"components/ChartDonutContentComponent.html":{},"components/ChartPopoverComponent.html":{}}}],["core/plugins/tooltips/chart",{"_index":1310,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["core/plugins/types",{"_index":938,"title":{},"body":{"components/ChartDonutContentComponent.html":{},"components/ChartPopoverComponent.html":{}}}],["core/types",{"_index":2795,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["correction",{"_index":1682,"title":{},"body":{"classes/Grid.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["corresponding",{"_index":2156,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"classes/XYRenderer.html":{}}}],["corresponds",{"_index":2979,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["counter",{"_index":2657,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["counterclaim",{"_index":4681,"title":{},"body":{"license.html":{}}}],["courtesy",{"_index":4412,"title":{},"body":{"classes/UtilityService.html":{}}}],["cover",{"_index":1232,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["crash",{"_index":629,"title":{},"body":{"classes/Chart.html":{}}}],["create",{"_index":4539,"title":{},"body":{"index.html":{}}}],["createborder(container",{"_index":1798,"title":{},"body":{"classes/Grid.html":{}}}],["createchart(lastspark",{"_index":4035,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["created",{"_index":1797,"title":{},"body":{"classes/Grid.html":{},"index.html":{}}}],["created3scale",{"_index":3456,"title":{},"body":{"classes/LinearScale.html":{},"classes/Scale.html":{},"classes/TimeScale.html":{}}}],["creates",{"_index":1793,"title":{},"body":{"classes/Grid.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/PathMarker.html":{},"classes/Scale.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SvgMarker.html":{},"injectables/ThresholdsService.html":{}}}],["creating",{"_index":1763,"title":{},"body":{"classes/Grid.html":{},"injectables/ThresholdsService.html":{}}}],["creation",{"_index":4125,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["critical",{"_index":4889,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cross",{"_index":1988,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"injectables/ThresholdsService.html":{},"license.html":{}}}],["crosshair",{"_index":135,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/GridConfig.html":{},"classes/MarkerUtils.html":{},"classes/XYGridConfig.html":{}}}],["crosspoints",{"_index":4245,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["cs.renderer.getdomainoffiltereddata(cs",{"_index":4988,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cs.scales[next",{"_index":4984,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cs.scales[scalekey",{"_index":4989,"title":{},"body":{"miscellaneous/variables.html":{}}}],["css",{"_index":723,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["css.escape",{"_index":4349,"title":{},"body":{"classes/UtilityService.html":{}}}],["cssclass",{"_index":215,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["cssescape",{"_index":4338,"title":{},"body":{"classes/UtilityService.html":{}}}],["cssescape(value",{"_index":4347,"title":{},"body":{"classes/UtilityService.html":{}}}],["cssfilterid",{"_index":602,"title":{},"body":{"classes/Chart.html":{},"miscellaneous/enumerations.html":{}}}],["cssfilterid.grayscale",{"_index":668,"title":{},"body":{"classes/Chart.html":{}}}],["current",{"_index":771,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["current.data.length",{"_index":965,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["current.renderer",{"_index":961,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["current.renderer.getinnerradius(current.scales.r.range",{"_index":964,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["currently",{"_index":3219,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"injectables/ThresholdsService.html":{}}}],["currenttooltipdirectivesindex",{"_index":1333,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["currenttooltipdirectivesindex[seriesid",{"_index":1339,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["cursor",{"_index":102,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/GridConfig.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/MarkerUtils.html":{},"classes/XYGridConfig.html":{},"miscellaneous/variables.html":{}}}],["curve",{"_index":2071,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["curvefactory",{"_index":2070,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["curvetype",{"_index":2066,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["custom",{"_index":777,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/IXYDataAccessors.html":{},"classes/LineAccessors.html":{},"classes/RadialAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/XYAccessors.html":{}}}],["customary",{"_index":4746,"title":{},"body":{"license.html":{}}}],["customizations",{"_index":4510,"title":{},"body":{"index.html":{}}}],["customized",{"_index":4507,"title":{},"body":{"index.html":{}}}],["cycle",{"_index":3992,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["d",{"_index":57,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/Grid.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/PathMarker.html":{},"classes/RadialAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"classes/StatusAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"miscellaneous/variables.html":{}}}],["d.__thresholds",{"_index":4218,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["d.__thresholds.status",{"_index":4219,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["d.active",{"_index":2803,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["d.category",{"_index":219,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["d.defined",{"_index":2264,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["d.end",{"_index":4257,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["d.hasownproperty(\"defined",{"_index":2263,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["d.height",{"_index":1776,"title":{},"body":{"classes/Grid.html":{}}}],["d.index",{"_index":1243,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{}}}],["d.margin.bottom",{"_index":2719,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["d.margin.left",{"_index":2700,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["d.margin.right",{"_index":2705,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["d.margin.top",{"_index":2716,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["d.marginlocked?.left",{"_index":2697,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["d.marginlocked?.right",{"_index":2702,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["d.name",{"_index":1528,"title":{},"body":{"classes/DataSeries.html":{}}}],["d.outerheight",{"_index":2696,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["d.outerheight(oldouterheight",{"_index":2723,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["d.outerwidth",{"_index":2694,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["d.outerwidth(oldouterwidth",{"_index":2722,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["d.position",{"_index":1244,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{}}}],["d.position.width",{"_index":1239,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["d.position.x",{"_index":1226,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["d.position.y",{"_index":3748,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["d.start",{"_index":4255,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["d.status",{"_index":2862,"title":{},"body":{"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{}}}],["d.value",{"_index":1529,"title":{},"body":{"classes/DataSeries.html":{},"classes/DonutGaugeRenderingUtil.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"classes/RadialAccessors.html":{}}}],["d.width",{"_index":1775,"title":{},"body":{"classes/Grid.html":{}}}],["d.x",{"_index":60,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"classes/LineAccessors.html":{},"classes/XYAccessors.html":{}}}],["d.y",{"_index":62,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"classes/LineAccessors.html":{},"classes/XYAccessors.html":{}}}],["d3",{"_index":309,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/Chart.html":{},"classes/ChartPalette.html":{},"components/ChartTooltipsComponent.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"modules/NuiChartsModule.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{},"dependencies.html":{},"miscellaneous/typealiases.html":{}}}],["d3's",{"_index":3427,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["d3scale",{"_index":2143,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{}}}],["d3selection",{"_index":545,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/typealiases.html":{}}}],["d[\"__stack_x\"]?.end",{"_index":66,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["d[\"__stack_x\"]?.start",{"_index":64,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["d[\"__stack_y\"]?.end",{"_index":70,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["d[\"__stack_y\"]?.start",{"_index":68,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["damages",{"_index":4777,"title":{},"body":{"license.html":{}}}],["dark",{"_index":1082,"title":{},"body":{"classes/ChartPalette.html":{},"classes/TextColorProvider.html":{},"miscellaneous/variables.html":{}}}],["darken",{"_index":3711,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["darker",{"_index":4110,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["dasharray",{"_index":2095,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["data",{"_index":12,"title":{"additional-documentation/advanced-usage/input-structure/data.html":{}},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"components/ChartComponent.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"classes/SideIndicatorAccessors.html":{},"classes/StatusAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"additional-documentation/advanced-usage.html":{}}}],["data.__bar",{"_index":223,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["data.__bar.end",{"_index":231,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["data.__bar.start",{"_index":224,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["data.coordinates",{"_index":2921,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["data.coordinates.x",{"_index":2922,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["data.datapoints",{"_index":3257,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["data.end",{"_index":232,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["data.filter((d",{"_index":3859,"title":{},"body":{"classes/Renderer.html":{}}}],["data.foreach((d",{"_index":1602,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["data.index",{"_index":3258,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["data.interactiontype",{"_index":3256,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["data.length",{"_index":3852,"title":{},"body":{"classes/Renderer.html":{}}}],["data.push(value",{"_index":3067,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["data.start",{"_index":226,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["data.value",{"_index":217,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["data[i",{"_index":1606,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["data_point_interaction_reset",{"_index":318,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/MarkerUtils.html":{}}}],["data_point_not_found",{"_index":319,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/Renderer.html":{}}}],["dataaccessor",{"_index":33,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"classes/DataSeries.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineAccessors.html":{},"classes/RadialAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"classes/StatusAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/XYAccessors.html":{},"miscellaneous/typealiases.html":{}}}],["dataaccessorkey",{"_index":3148,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["dataaccessors",{"_index":352,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["dataaccessors[\"end",{"_index":357,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["dataaccessors[\"start",{"_index":355,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["datafrom",{"_index":4166,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["datafrom.x",{"_index":4292,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["datafrom.y",{"_index":4294,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["datamanager",{"_index":557,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["datapoint",{"_index":411,"title":{},"body":{"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{}}}],["datapoint.data",{"_index":3773,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["datapoint.index",{"_index":3156,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["datapoint.position",{"_index":1493,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["datapoint.position.x",{"_index":1495,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["datapoint.position.y",{"_index":1496,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["datapoint.position?.height",{"_index":1497,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["datapoint.position?.width",{"_index":1498,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["datapoint?.position?.x",{"_index":3511,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["datapoint?.position?.y",{"_index":3513,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["datapointindex",{"_index":306,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["datapointposition",{"_index":4473,"title":{},"body":{"classes/XYRenderer.html":{}}}],["datapointpositions",{"_index":438,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["datapoints",{"_index":439,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{}}}],["datapoints[seriesid",{"_index":4046,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["datapointsleft",{"_index":1224,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["datapointstop",{"_index":3747,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["datapointsubject",{"_index":3490,"title":{},"body":{"classes/MarkerUtils.html":{},"classes/Renderer.html":{}}}],["datapointsubject.next",{"_index":3524,"title":{},"body":{"classes/MarkerUtils.html":{},"classes/Renderer.html":{}}}],["dataseries",{"_index":218,"title":{"classes/DataSeries.html":{}},"body":{"classes/BarAccessors.html":{},"classes/DataSeries.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{}}}],["dataseries.accessors",{"_index":1527,"title":{},"body":{"classes/DataSeries.html":{},"classes/MarkerUtils.html":{}}}],["dataseries.accessors.data?.[scalename",{"_index":3856,"title":{},"body":{"classes/Renderer.html":{}}}],["dataseries.accessors.data?.[scalename]?.(datum",{"_index":3854,"title":{},"body":{"classes/Renderer.html":{}}}],["dataseries.accessors.data?.x",{"_index":4470,"title":{},"body":{"classes/XYRenderer.html":{}}}],["dataseries.accessors.data?.y",{"_index":4471,"title":{},"body":{"classes/XYRenderer.html":{}}}],["dataseries.data",{"_index":1520,"title":{},"body":{"classes/DataSeries.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["dataseries.data.length",{"_index":2823,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/MarkerUtils.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYRenderer.html":{}}}],["dataseries.data[index",{"_index":4469,"title":{},"body":{"classes/XYRenderer.html":{}}}],["dataseries.id",{"_index":1519,"title":{},"body":{"classes/DataSeries.html":{}}}],["dataseries.name",{"_index":1522,"title":{},"body":{"classes/DataSeries.html":{}}}],["dataset",{"_index":3579,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["datashift",{"_index":4290,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["datashift.x",{"_index":4301,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["datashift.y",{"_index":4300,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["datato",{"_index":4161,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["datato.x",{"_index":4291,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["datato.y",{"_index":4293,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["date",{"_index":4328,"title":{},"body":{"classes/TimeScale.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["date().gettime",{"_index":4400,"title":{},"body":{"classes/UtilityService.html":{}}}],["dates",{"_index":4966,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datetimeformatter",{"_index":4331,"title":{},"body":{"classes/TimeScale.html":{},"miscellaneous/variables.html":{}}}],["datum",{"_index":1878,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/Renderer.html":{}}}],["debounce",{"_index":872,"title":{},"body":{"components/ChartComponent.html":{},"interfaces/IScaleSVGElement.html":{}}}],["debouncing",{"_index":2594,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["declarations",{"_index":3631,"title":{},"body":{"modules/NuiChartsModule.html":{},"index.html":{},"overview.html":{}}}],["decorator",{"_index":3833,"title":{},"body":{"classes/Renderer.html":{}}}],["decorators",{"_index":999,"title":{},"body":{"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{}}}],["deemphasized",{"_index":2083,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"miscellaneous/enumerations.html":{}}}],["deemphasizes",{"_index":3221,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["deep",{"_index":287,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["default",{"_index":107,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"components/ChartComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYDataAccessors.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["default_border_class_name",{"_index":1621,"title":{},"body":{"classes/Grid.html":{}}}],["default_config",{"_index":1156,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialPopoverPlugin.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{}}}],["default_margin",{"_index":98,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["default_marker_container_class",{"_index":3481,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["default_marker_interaction_config",{"_index":3494,"title":{},"body":{"classes/MarkerUtils.html":{},"miscellaneous/variables.html":{}}}],["default_padding",{"_index":99,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["default_radial_renderer_config",{"_index":3694,"title":{},"body":{"classes/PieRenderer.html":{},"miscellaneous/variables.html":{}}}],["defaultarcobject",{"_index":3702,"title":{},"body":{"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["defaultcolorprovider",{"_index":29,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"classes/LineAccessors.html":{},"classes/RadialAccessors.html":{}}}],["defaulting",{"_index":2356,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["defaultmarkerprovider",{"_index":30,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{}}}],["defaultpalette",{"_index":3136,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["defaults",{"_index":3693,"title":{},"body":{"classes/PieRenderer.html":{}}}],["defaultsdeep",{"_index":1181,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/ZoomPlugin.html":{}}}],["defaultsdeep(this.config",{"_index":1196,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/ZoomPlugin.html":{}}}],["defaulttextoverflowhandler",{"_index":169,"title":{},"body":{"classes/AxisConfig.html":{}}}],["defaultvalue",{"_index":3471,"title":{},"body":{"classes/MappedValueProvider.html":{}}}],["defend",{"_index":4806,"title":{},"body":{"license.html":{}}}],["define",{"_index":1926,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"injectables/ThresholdsService.html":{}}}],["defined",{"_index":17,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionValues.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYDataAccessors.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"license.html":{}}}],["defines",{"_index":2250,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["defining",{"_index":1876,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["definition",{"_index":1698,"title":{},"body":{"classes/Grid.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"interfaces/ZoneCross.html":{},"license.html":{}}}],["definitions",{"_index":3596,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{},"license.html":{}}}],["deliberate",{"_index":4772,"title":{},"body":{"license.html":{}}}],["dependencies",{"_index":3630,"title":{"dependencies.html":{}},"body":{"modules/NuiChartsModule.html":{},"dependencies.html":{},"overview.html":{}}}],["depending",{"_index":1966,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["deprecated",{"_index":2807,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["derivative",{"_index":4610,"title":{},"body":{"license.html":{}}}],["derive",{"_index":4156,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["derived",{"_index":1651,"title":{},"body":{"classes/Grid.html":{},"license.html":{}}}],["deriving",{"_index":2868,"title":{},"body":{"interfaces/IXYDataAccessors.html":{},"classes/LineAccessors.html":{},"classes/XYAccessors.html":{}}}],["describe",{"_index":1873,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["describing",{"_index":1954,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"license.html":{}}}],["description",{"_index":85,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopRenderer.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"license.html":{}}}],["descriptionprimary",{"_index":3313,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["descriptionsecondary",{"_index":3314,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["design",{"_index":4498,"title":{},"body":{"index.html":{}}}],["designated",{"_index":4645,"title":{},"body":{"license.html":{}}}],["designed",{"_index":4500,"title":{},"body":{"index.html":{}}}],["designers",{"_index":4502,"title":{},"body":{"index.html":{}}}],["desired",{"_index":2048,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["destroy",{"_index":443,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/EventBus.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["destroy_event",{"_index":585,"title":{},"body":{"classes/Chart.html":{},"interfaces/IScaleSVGElement.html":{},"classes/LegendInteractionAssist.html":{},"miscellaneous/variables.html":{}}}],["destruction",{"_index":1977,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["detects",{"_index":4147,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["determine",{"_index":2015,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/InteractionLabelPlugin.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["determined",{"_index":3583,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["determines",{"_index":2151,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["determining",{"_index":2104,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"license.html":{}}}],["devdependencies",{"_index":4520,"title":{},"body":{"index.html":{}}}],["diamond",{"_index":4938,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dictionary",{"_index":1981,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IElementPosition.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/ScalesIndex.html":{},"miscellaneous/typealiases.html":{}}}],["diff",{"_index":2691,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["different",{"_index":702,"title":{},"body":{"classes/Chart.html":{},"license.html":{}}}],["differs",{"_index":3150,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["digit",{"_index":4970,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dimension",{"_index":103,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/XYGridConfig.html":{},"classes/ZoomPlugin.html":{}}}],["dimension.height",{"_index":2942,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["dimension.padding",{"_index":2446,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["dimension.width",{"_index":2451,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["dimensionconfig",{"_index":138,"title":{"classes/DimensionConfig.html":{}},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/Chart.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/XYGridConfig.html":{}}}],["dimensionconfig.autoheight",{"_index":710,"title":{},"body":{"classes/Chart.html":{}}}],["dimensionconfig.autowidth",{"_index":713,"title":{},"body":{"classes/Chart.html":{}}}],["dimensionconfig.outerheight",{"_index":725,"title":{},"body":{"classes/Chart.html":{}}}],["dimensionconfig.outerheight(dimensions.height",{"_index":1746,"title":{},"body":{"classes/Grid.html":{}}}],["dimensionconfig.outerwidth",{"_index":728,"title":{},"body":{"classes/Chart.html":{}}}],["dimensionconfig.outerwidth(dimensions.width",{"_index":1744,"title":{},"body":{"classes/Grid.html":{}}}],["dimensions",{"_index":703,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["dimensions.height",{"_index":711,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{}}}],["dimensions.width",{"_index":714,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{}}}],["direct",{"_index":4574,"title":{},"body":{"license.html":{}}}],["direction",{"_index":4576,"title":{},"body":{"license.html":{}}}],["directive",{"_index":795,"title":{"directives/ChartCollectionIdDirective.html":{}},"body":{"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"overview.html":{}}}],["directives",{"_index":519,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["directiveschanged",{"_index":1340,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["directly",{"_index":250,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["disable",{"_index":824,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/UtilityService.html":{}}}],["disclaimer",{"_index":4748,"title":{},"body":{"license.html":{}}}],["discussing",{"_index":4641,"title":{},"body":{"license.html":{}}}],["display",{"_index":2046,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/LegendInteractionAssist.html":{},"license.html":{}}}],["displayed",{"_index":2047,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["displaying",{"_index":2521,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["distribute",{"_index":4664,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":4712,"title":{},"body":{"license.html":{}}}],["distribution",{"_index":4556,"title":{},"body":{"license.html":{}}}],["divided",{"_index":3761,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["diy",{"_index":366,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["document",{"_index":4560,"title":{},"body":{"license.html":{}}}],["document.createelement(\"path",{"_index":3675,"title":{},"body":{"classes/PathMarker.html":{}}}],["documentation",{"_index":4595,"title":{},"body":{"license.html":{}}}],["doesn't",{"_index":2545,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{}}}],["dom",{"_index":4869,"title":{},"body":{"miscellaneous/variables.html":{}}}],["domain",{"_index":1918,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LinearScale.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{},"classes/XYRenderer.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["domain(clonedscale",{"_index":5003,"title":{},"body":{"miscellaneous/variables.html":{}}}],["domain(domain",{"_index":2163,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{}}}],["domain.ts",{"_index":4857,"title":{},"body":{"miscellaneous/variables.html":{}}}],["domain[0",{"_index":3861,"title":{},"body":{"classes/Renderer.html":{}}}],["domaincalculator",{"_index":2136,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["domains",{"_index":3594,"title":{"additional-documentation/advanced-usage/scales/domains.html":{}},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/advanced-usage.html":{}}}],["don't",{"_index":2523,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"injectables/ThresholdsService.html":{},"license.html":{}}}],["donut",{"_index":503,"title":{"additional-documentation/chart-types/pie-and-donut.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"classes/RadialTooltipsPlugin.html":{},"components/RichLegendTileComponent.html":{},"index.html":{},"additional-documentation/chart-types.html":{}}}],["donutgaugerenderingutil",{"_index":1575,"title":{"classes/DonutGaugeRenderingUtil.html":{}},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["donutgaugerenderingutil.generatearcdata(data",{"_index":1588,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["donutgaugethresholdsrenderer",{"_index":1937,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["down",{"_index":4888,"title":{},"body":{"miscellaneous/variables.html":{}}}],["draw",{"_index":270,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IHighlightStrategy.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["draw(renderer",{"_index":292,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["draw(renderseries",{"_index":2815,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYRenderer.html":{}}}],["drawable",{"_index":1963,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["drawgrids(config",{"_index":2436,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["drawing",{"_index":2072,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["drawline",{"_index":987,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["drawmarker",{"_index":3483,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["drawmarker(datapoint",{"_index":3489,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["draws",{"_index":3056,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["drawticks(config",{"_index":2417,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["driven",{"_index":2133,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{},"miscellaneous/variables.html":{}}}],["ds",{"_index":58,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["dt",{"_index":4399,"title":{},"body":{"classes/UtilityService.html":{}}}],["dynamic",{"_index":3832,"title":{},"body":{"classes/Renderer.html":{},"injectables/ThresholdsService.html":{}}}],["e",{"_index":2381,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["e.data",{"_index":2390,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["e.g",{"_index":1880,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineAccessors.html":{},"classes/NoopAccessors.html":{}}}],["each",{"_index":580,"title":{},"body":{"classes/Chart.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYGridConfig.html":{},"classes/LegendInteractionAssist.html":{},"classes/Renderer.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"license.html":{}}}],["each(borderkeys",{"_index":1762,"title":{},"body":{"classes/Grid.html":{}}}],["each(eventlist",{"_index":3865,"title":{},"body":{"classes/Renderer.html":{}}}],["each(function",{"_index":393,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["each(nodes",{"_index":1406,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["each(object.keys(eventhandlers",{"_index":3261,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["each(object.keys(this.datapoints",{"_index":1481,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["each(object.keys(this.streams",{"_index":1617,"title":{},"body":{"classes/EventBus.html":{}}}],["each(this.plugins",{"_index":683,"title":{},"body":{"classes/Chart.html":{}}}],["each(this.scales.x.list",{"_index":2448,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["each(this.scales.y.list",{"_index":2454,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["easier",{"_index":4822,"title":{},"body":{"license.html":{}}}],["east",{"_index":3766,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["edge",{"_index":1418,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/UtilityService.html":{}}}],["editorial",{"_index":4611,"title":{},"body":{"license.html":{}}}],["effect",{"_index":2020,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/PathMarker.html":{}}}],["efficient",{"_index":367,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["eight",{"_index":4904,"title":{},"body":{"miscellaneous/variables.html":{}}}],["elaborations",{"_index":4614,"title":{},"body":{"license.html":{}}}],["electronic",{"_index":4628,"title":{},"body":{"license.html":{}}}],["element",{"_index":524,"title":{},"body":{"classes/Chart.html":{},"components/ChartComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/PathMarker.html":{},"classes/RadialTooltipsPlugin.html":{},"injectables/ThresholdsService.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["element's",{"_index":2216,"title":{},"body":{"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{}}}],["element.clientheight",{"_index":1369,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["element.clientwidth",{"_index":1368,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["element.offsetleft",{"_index":1366,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["element.offsettop",{"_index":1367,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["elementref",{"_index":862,"title":{},"body":{"components/ChartComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/LegendSeriesComponent.html":{}}}],["elements",{"_index":665,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/UtilityService.html":{},"miscellaneous/variables.html":{}}}],["elementsfiltering(elementstofilter",{"_index":2655,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["elementstodisplay",{"_index":2650,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["elementstodisplay.indexof(element",{"_index":2654,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["elementstodisplay.length",{"_index":2668,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["elementstofilter.filter((element",{"_index":2662,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["elementstofilter.filter(element",{"_index":2645,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["elementstofilter.reduce((prev",{"_index":2640,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["elementstofilter[0",{"_index":2639,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["ellipsis",{"_index":2580,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["ellipsis\").empty",{"_index":2583,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["ellipsis.node()?.getcomputedtextlength",{"_index":2589,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["ellipsiswidth",{"_index":2032,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["elref",{"_index":867,"title":{},"body":{"components/ChartComponent.html":{}}}],["emitevent(renderer",{"_index":3421,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["emits",{"_index":1163,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"components/LegendSeriesComponent.html":{},"classes/RadialPopoverPlugin.html":{}}}],["emitted",{"_index":781,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/LegendInteractionAssist.html":{},"miscellaneous/enumerations.html":{}}}],["emitting",{"_index":3574,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["emphasise",{"_index":344,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["emphasisstate",{"_index":742,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{}}}],["emphasisstate+visible",{"_index":740,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{}}}],["emphasize",{"_index":3220,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["emphasized",{"_index":2084,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"miscellaneous/enumerations.html":{}}}],["emphasizedseries",{"_index":2391,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["emphasizedseries.length",{"_index":2396,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["emphasizedyscale.id",{"_index":2403,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["emphasizedyscales",{"_index":2397,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["emphasizedyscales.length",{"_index":2401,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["emphasizeseries",{"_index":786,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/LegendInteractionAssist.html":{},"miscellaneous/enumerations.html":{}}}],["emphasizeseries(seriesid",{"_index":3119,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["emphasizing",{"_index":2001,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/typealiases.html":{}}}],["emphasizing/deemphasizing",{"_index":2380,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["empty",{"_index":1654,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"interfaces/ScalesIndex.html":{},"miscellaneous/variables.html":{}}}],["empty_continuous_domain",{"_index":2131,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"miscellaneous/variables.html":{}}}],["emptyshapes",{"_index":4854,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enable",{"_index":2120,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["enabled",{"_index":2089,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{},"miscellaneous/variables.html":{}}}],["enabledatapointhighlighting",{"_index":1936,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/variables.html":{}}}],["enableexternalevents",{"_index":2871,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["enableminbarthickness",{"_index":2123,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["enables",{"_index":2075,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"injectables/ThresholdsService.html":{}}}],["enableserieshighlighting",{"_index":1935,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/variables.html":{}}}],["encapsulation",{"_index":485,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["enclosed",{"_index":4814,"title":{},"body":{"license.html":{}}}],["end",{"_index":213,"title":{},"body":{"classes/BarAccessors.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"interfaces/ZoneCross.html":{},"miscellaneous/enumerations.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["endaccessor",{"_index":356,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["endaccessor(d",{"_index":383,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["ending",{"_index":4167,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["endx",{"_index":1863,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["endy",{"_index":1867,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["engage",{"_index":2927,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["engine",{"_index":595,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["enhanced",{"_index":2091,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"injectables/ThresholdsService.html":{}}}],["enhancedlinecap",{"_index":2111,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["enlarged",{"_index":1231,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["ensure",{"_index":2909,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/UtilityService.html":{},"classes/ZoomPlugin.html":{}}}],["ensures",{"_index":2967,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["entered",{"_index":1901,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["enters",{"_index":1983,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["entire",{"_index":2520,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["entirely",{"_index":4506,"title":{},"body":{"index.html":{}}}],["entities",{"_index":3468,"title":{},"body":{"classes/MappedValueProvider.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"license.html":{}}}],["entity",{"_index":2010,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"license.html":{}}}],["entityid",{"_index":2864,"title":{},"body":{"interfaces/IValueProvider.html":{},"classes/MappedValueProvider.html":{},"classes/ProcessedColorProvider.html":{},"classes/SequentialValueProvider.html":{}}}],["entries",{"_index":913,"title":{},"body":{"components/ChartComponent.html":{}}}],["entries[0].isintersecting",{"_index":922,"title":{},"body":{"components/ChartComponent.html":{}}}],["enum",{"_index":782,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/SideIndicatorAccessors.html":{},"interfaces/ZoneCross.html":{}}}],["enumerations",{"_index":4490,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":2581,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["equal",{"_index":2043,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["error(\"accessor",{"_index":3858,"title":{},"body":{"classes/Renderer.html":{}}}],["error(\"bottomborder",{"_index":1813,"title":{},"body":{"classes/Grid.html":{}}}],["error(\"can't",{"_index":4472,"title":{},"body":{"classes/XYRenderer.html":{}}}],["error(\"chart",{"_index":1221,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialPopoverPlugin.html":{}}}],["error(\"clr",{"_index":3723,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["error(\"container",{"_index":3506,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["error(\"grid",{"_index":608,"title":{},"body":{"classes/Chart.html":{}}}],["error(\"labelcontent",{"_index":3023,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["error(\"position",{"_index":1383,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["error(\"radius",{"_index":969,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["error(\"renderer.config.strokewidth",{"_index":3402,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["error(\"seriesid",{"_index":1338,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["error(\"statestyles",{"_index":3839,"title":{},"body":{"classes/Renderer.html":{}}}],["error(\"tick",{"_index":2686,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["error(\"unable",{"_index":1494,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["error(\"value",{"_index":4380,"title":{},"body":{"classes/UtilityService.html":{}}}],["error(\"xscale",{"_index":2463,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["error(\"yleftscale",{"_index":2478,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["errors",{"_index":381,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["eslint",{"_index":823,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/UtilityService.html":{}}}],["eslint/no",{"_index":827,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{}}}],["etc",{"_index":1882,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineAccessors.html":{},"classes/NoopAccessors.html":{},"classes/ProcessedColorProvider.html":{}}}],["even",{"_index":1764,"title":{},"body":{"classes/Grid.html":{},"license.html":{}}}],["event",{"_index":459,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/enumerations.html":{},"license.html":{}}}],["event.data",{"_index":2997,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/SparkChartAssist.html":{}}}],["event.data.datapoint",{"_index":1208,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["event.data.datapoint.seriesid",{"_index":1207,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["event.data.datapoints",{"_index":1206,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"classes/SparkChartAssist.html":{}}}],["event.data.datapoints[chartseries.id",{"_index":3191,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["event.data.foreach(series",{"_index":1464,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["event.data.interactiontype",{"_index":1201,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["event.data.ischartinview",{"_index":1468,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["event.payload[key",{"_index":3246,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["event.target.releasepointercapture(event.pointerid",{"_index":2939,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["event.target.setpointercapture(event.pointerid",{"_index":2937,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["eventbus",{"_index":525,"title":{"classes/EventBus.html":{}},"body":{"classes/Chart.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["eventbus.getstream(interaction_data_points_event).subscribe((event",{"_index":4043,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["eventbus.getstream(key).subscribe((event",{"_index":3262,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["eventbus.getstream(mouse_active_event).subscribe((event",{"_index":4047,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["eventemitter",{"_index":1112,"title":{},"body":{"components/ChartPopoverComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{}}}],["eventhandlers",{"_index":3255,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["eventhandlers[key](event.data",{"_index":3263,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["eventlist",{"_index":3862,"title":{},"body":{"classes/Renderer.html":{}}}],["eventname",{"_index":399,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/Renderer.html":{}}}],["events",{"_index":787,"title":{"additional-documentation/advanced-usage/events.html":{}},"body":{"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/advanced-usage.html":{}}}],["eventstreamid",{"_index":1171,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["evil",{"_index":1807,"title":{},"body":{"classes/Grid.html":{}}}],["example",{"_index":1620,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"license.html":{}}}],["examples",{"_index":3710,"title":{},"body":{"classes/ProcessedColorProvider.html":{},"index.html":{}}}],["except",{"_index":3972,"title":{},"body":{"classes/SparkChartAssist.html":{},"license.html":{}}}],["excludes",{"_index":1917,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["excluding",{"_index":2022,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"license.html":{}}}],["exclusive",{"_index":4655,"title":{},"body":{"license.html":{}}}],["executed",{"_index":4739,"title":{},"body":{"license.html":{}}}],["exercise",{"_index":4767,"title":{},"body":{"license.html":{}}}],["exercising",{"_index":4588,"title":{},"body":{"license.html":{}}}],["exist",{"_index":3507,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["existing",{"_index":3534,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["existingspark.id",{"_index":4029,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["existingsparkindex",{"_index":4026,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["exits",{"_index":1984,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["expect",{"_index":1964,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["expected",{"_index":2846,"title":{},"body":{"interfaces/ISimpleThresholdZone.html":{},"interfaces/ZoneCross.html":{}}}],["explicitly",{"_index":4732,"title":{},"body":{"license.html":{}}}],["export",{"_index":39,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"components/BasicLegendTileComponent.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"modules/NuiChartsModule.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{}}}],["exported",{"_index":4172,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["exports",{"_index":3632,"title":{},"body":{"modules/NuiChartsModule.html":{},"index.html":{},"overview.html":{}}}],["express",{"_index":4755,"title":{},"body":{"license.html":{}}}],["extend",{"_index":1751,"title":{},"body":{"classes/Grid.html":{}}}],["extended",{"_index":1429,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"miscellaneous/variables.html":{}}}],["extends",{"_index":41,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LineAccessors.html":{},"classes/LinearScale.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/StatusAccessors.html":{},"classes/TextColorProvider.html":{},"classes/TimeScale.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{}}}],["extent",{"_index":3830,"title":{},"body":{"classes/Renderer.html":{}}}],["extent(data",{"_index":3853,"title":{},"body":{"classes/Renderer.html":{}}}],["extracted",{"_index":1361,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["facilitate",{"_index":1957,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["facilitates",{"_index":4124,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["fails",{"_index":244,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["failure",{"_index":4787,"title":{},"body":{"license.html":{}}}],["fallback_formatter",{"_index":2988,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["false",{"_index":161,"title":{},"body":{"classes/AxisConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"classes/XYGridConfig.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["false).classed(\"tick",{"_index":2507,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["far",{"_index":1434,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"miscellaneous/variables.html":{}}}],["fast",{"_index":1315,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["fee",{"_index":4795,"title":{},"body":{"license.html":{}}}],["fields",{"_index":2253,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{},"license.html":{}}}],["fifty",{"_index":4581,"title":{},"body":{"license.html":{}}}],["figure",{"_index":4461,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"components/BasicLegendTileComponent.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"modules/NuiChartsModule.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{},"index.html":{},"license.html":{}}}],["filed",{"_index":4689,"title":{},"body":{"license.html":{}}}],["files",{"_index":4596,"title":{},"body":{"license.html":{}}}],["fill",{"_index":1791,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/SideIndicatorAccessors.html":{}}}],["filter",{"_index":660,"title":{},"body":{"classes/Chart.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/LegendInteractionAssist.html":{},"classes/SideIndicatorAccessors.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["filter(c",{"_index":4235,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["filter(event",{"_index":3189,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["filter(rs",{"_index":2392,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["filterdatabydomain",{"_index":3556,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["filterdatabydomain(data",{"_index":3575,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["filterdefs",{"_index":526,"title":{},"body":{"classes/Chart.html":{}}}],["filtered",{"_index":3590,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["filtereddata",{"_index":3841,"title":{},"body":{"classes/Renderer.html":{}}}],["filterrepeatedelements(elementstofilter",{"_index":2637,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["filters",{"_index":3578,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["filterscale",{"_index":3844,"title":{},"body":{"classes/Renderer.html":{}}}],["filterscale.domain",{"_index":3850,"title":{},"body":{"classes/Renderer.html":{}}}],["filterscale.iscontinuous",{"_index":3847,"title":{},"body":{"classes/Renderer.html":{}}}],["filterscale.isdomainfixed",{"_index":3846,"title":{},"body":{"classes/Renderer.html":{}}}],["filterscales",{"_index":3592,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["filterscales[fixedscalekey",{"_index":3845,"title":{},"body":{"classes/Renderer.html":{}}}],["find",{"_index":2985,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/UtilityService.html":{},"miscellaneous/variables.html":{}}}],["find(scales[\"x\"].index",{"_index":3004,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["finddatapointbyvalue",{"_index":271,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["finddatapointbyvalue(series",{"_index":300,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["findindex",{"_index":311,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["findindex(series.data",{"_index":358,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["findnearestindex",{"_index":4339,"title":{},"body":{"classes/UtilityService.html":{}}}],["findnearestindex(haystack",{"_index":4351,"title":{},"body":{"classes/UtilityService.html":{}}}],["fine",{"_index":1395,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["firefox",{"_index":2883,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/MarkerUtils.html":{},"classes/ZoomPlugin.html":{}}}],["first",{"_index":2773,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"injectables/ThresholdsService.html":{}}}],["firstcodeunit",{"_index":4423,"title":{},"body":{"classes/UtilityService.html":{}}}],["fit",{"_index":153,"title":{},"body":{"classes/AxisConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["fitbottomaxis(d",{"_index":2730,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["fitness",{"_index":4759,"title":{},"body":{"license.html":{}}}],["five",{"_index":4901,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fixdomain",{"_index":2284,"title":{},"body":{"interfaces/IScale.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"classes/TimeScale.html":{}}}],["fixdomain(domain",{"_index":2167,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{}}}],["fixed",{"_index":2166,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{},"miscellaneous/variables.html":{}}}],["fixeddomains",{"_index":4979,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fixedscalekey",{"_index":3842,"title":{},"body":{"classes/Renderer.html":{}}}],["fixleftmargin",{"_index":2549,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["fixrightmargin",{"_index":2550,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["flag",{"_index":2146,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["flexible",{"_index":4503,"title":{},"body":{"index.html":{}}}],["fn",{"_index":3715,"title":{},"body":{"classes/ProcessedColorProvider.html":{},"injectables/ThresholdsService.html":{}}}],["following",{"_index":4694,"title":{},"body":{"license.html":{}}}],["force",{"_index":1304,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["force(\"collisionforce",{"_index":1404,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["forcecollide",{"_index":1300,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["forcecollide((node",{"_index":1398,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["forcesimulation",{"_index":1301,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["forcesimulation(nodes",{"_index":1402,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["foreground",{"_index":2088,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/TextColorProvider.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/enumerations.html":{}}}],["form",{"_index":1889,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/ScalesIndex.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["format",{"_index":3146,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"dependencies.html":{},"license.html":{}}}],["formatsecond",{"_index":4855,"title":{},"body":{"miscellaneous/variables.html":{}}}],["formatter",{"_index":776,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IBandScale.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IScale.html":{},"interfaces/ISpark.html":{},"interfaces/IXYScales.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LegendInteractionAssist.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["formatter.ts",{"_index":4853,"title":{},"body":{"miscellaneous/variables.html":{}}}],["formatter?.(value",{"_index":3022,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["formattername",{"_index":775,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["formatters",{"_index":2137,"title":{"additional-documentation/advanced-usage/scales/formatters.html":{}},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/advanced-usage.html":{}}}],["formatters/datetime",{"_index":4332,"title":{},"body":{"classes/TimeScale.html":{}}}],["formatting",{"_index":3147,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["forming",{"_index":2027,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["forwardref",{"_index":858,"title":{},"body":{"components/ChartComponent.html":{}}}],["found",{"_index":3586,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["four",{"_index":4900,"title":{},"body":{"miscellaneous/variables.html":{}}}],["free",{"_index":4658,"title":{},"body":{"license.html":{}}}],["from/to",{"_index":4188,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["front",{"_index":2910,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["full",{"_index":4157,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["function",{"_index":882,"title":{},"body":{"components/ChartComponent.html":{},"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/ProcessedColorProvider.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/typealiases.html":{}}}],["functionality",{"_index":3814,"title":{},"body":{"classes/Renderer.html":{},"injectables/ThresholdsService.html":{}}}],["future",{"_index":1842,"title":{},"body":{"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["gap",{"_index":1683,"title":{},"body":{"classes/Grid.html":{}}}],["gauge",{"_index":1577,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["gauge/types",{"_index":1586,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["gc",{"_index":4082,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["generatearcdata(data",{"_index":1596,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["generated",{"_index":2059,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"license.html":{}}}],["generates",{"_index":4148,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["generatethresholddata",{"_index":1580,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["generatethresholddata(data",{"_index":1581,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["generic",{"_index":1891,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/typealiases.html":{}}}],["get(entityid",{"_index":2005,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["get(this.interaction",{"_index":3863,"title":{},"body":{"classes/Renderer.html":{}}}],["getabsoluteposition(relativeposition",{"_index":1505,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["getabsoluteposition(valarr",{"_index":3745,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["getabsoluteposition(valuesarray",{"_index":1217,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["getapproximateticks",{"_index":173,"title":{},"body":{"classes/AxisConfig.html":{}}}],["getarc(range",{"_index":3704,"title":{},"body":{"classes/PieRenderer.html":{}}}],["getautomaticdomain",{"_index":2317,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/LinearScale.html":{},"classes/Scale.html":{},"classes/TimeScale.html":{},"miscellaneous/variables.html":{}}}],["getautomaticdomain(chartseriesset",{"_index":4995,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getautomaticdomainwithincludedinterval",{"_index":4858,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getautomaticdomainwithticks",{"_index":2318,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"miscellaneous/variables.html":{}}}],["getautomaticdomainwithticks(config",{"_index":2370,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["getbackgroundcolors",{"_index":1059,"title":{},"body":{"classes/ChartPalette.html":{}}}],["getbackgrounds",{"_index":4128,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getbackgrounds(sourceseries",{"_index":4139,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getbackgroundsdataforcontinuousscale(sourceseries",{"_index":4227,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getchartcollection",{"_index":844,"title":{},"body":{"injectables/ChartCollectionService.html":{}}}],["getchartcollection(collectionid",{"_index":845,"title":{},"body":{"injectables/ChartCollectionService.html":{}}}],["getcloser(a",{"_index":4395,"title":{},"body":{"classes/UtilityService.html":{}}}],["getclosestindex",{"_index":4340,"title":{},"body":{"classes/UtilityService.html":{}}}],["getclosestindex(haystack",{"_index":4361,"title":{},"body":{"classes/UtilityService.html":{}}}],["getcolorvaluebyname",{"_index":1064,"title":{},"body":{"classes/ChartPalette.html":{},"classes/TextColorProvider.html":{}}}],["getcolorvaluebyname(c",{"_index":1088,"title":{},"body":{"classes/ChartPalette.html":{}}}],["getcolorvaluebyname(input",{"_index":4089,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["getcontainerstatestyles",{"_index":3554,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["getcontentposition(areasize",{"_index":973,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["getcontrastratio(color1",{"_index":4104,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["getcrosspoint",{"_index":4129,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getcrosspoint(datafrom",{"_index":4160,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getcrosspointwithy",{"_index":4130,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getcrosspointwithy(datafrom",{"_index":4168,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getd3scale",{"_index":3625,"title":{},"body":{"classes/NoopScale.html":{},"classes/Scale.html":{}}}],["getdata",{"_index":4059,"title":{},"body":{"classes/StatusAccessors.html":{}}}],["getdatamanager",{"_index":530,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["getdatapointindex",{"_index":272,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IHighlightStrategy.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["getdatapointindex(renderer",{"_index":302,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["getdatapointindex(series",{"_index":3580,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["getdatapointposition",{"_index":3555,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["getdatapointposition(dataseries",{"_index":3566,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["getdomain",{"_index":3557,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["getdomain(data",{"_index":3588,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["getdomainoffiltereddata",{"_index":3558,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["getdomainoffiltereddata(dataseries",{"_index":3591,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["getelementstohide(elementstofilter",{"_index":2647,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["geteventbus",{"_index":531,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["getfixeddomains(chartseriesset",{"_index":4980,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getgrid",{"_index":532,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["gethighlightedvalue",{"_index":2192,"title":{},"body":{"interfaces/IChartAssist.html":{},"classes/SparkChartAssist.html":{}}}],["gethighlightedvalue(chartseries",{"_index":778,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["gethorizontalsetup",{"_index":1449,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["gethorizontalsetup(tooltippositionoffset",{"_index":1458,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["getinnerradius",{"_index":3690,"title":{},"body":{"classes/PieRenderer.html":{}}}],["getinnerradius(range",{"_index":3697,"title":{},"body":{"classes/PieRenderer.html":{}}}],["getinteractive",{"_index":3343,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["getinteractivearea",{"_index":1628,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["getlabel(chartseries",{"_index":3151,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["getlasagna",{"_index":1629,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["getmaxtextwidth(array",{"_index":2675,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["getouterradius",{"_index":3691,"title":{},"body":{"classes/PieRenderer.html":{}}}],["getouterradius(range",{"_index":3699,"title":{},"body":{"classes/PieRenderer.html":{}}}],["getouterwidthdimensioncorrection",{"_index":1753,"title":{},"body":{"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{}}}],["getoverlayposition(angle",{"_index":3799,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["getpointereventsclass",{"_index":3515,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["getpointereventsclickclass",{"_index":3517,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["getrelativeluminance(rgbcolor",{"_index":4114,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["getrenderengine",{"_index":533,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["getrequiredlayers",{"_index":2841,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYRenderer.html":{}}}],["gets",{"_index":770,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IScale.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"components/LegendSeriesComponent.html":{},"interfaces/ScalesIndex.html":{},"classes/UtilityService.html":{}}}],["getscalevalues",{"_index":4341,"title":{},"body":{"classes/UtilityService.html":{}}}],["getscalevalues(scales",{"_index":4364,"title":{},"body":{"classes/UtilityService.html":{}}}],["getsectionindex(angle",{"_index":3808,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["getseries",{"_index":4061,"title":{},"body":{"classes/StatusAccessors.html":{}}}],["getseriesgroups(seriesset",{"_index":3285,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["getseriesrenderstate",{"_index":3346,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["getseriesstates",{"_index":3111,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["getsideindicators",{"_index":4131,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getsideindicators(zones",{"_index":4170,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getsinglevalue(data",{"_index":237,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["getstandardcolors",{"_index":1057,"title":{},"body":{"classes/ChartPalette.html":{}}}],["getstate",{"_index":750,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{}}}],["getstream",{"_index":1610,"title":{},"body":{"classes/EventBus.html":{}}}],["getstream(streamid",{"_index":1612,"title":{},"body":{"classes/EventBus.html":{}}}],["getsvg",{"_index":1969,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/PathMarker.html":{},"classes/SvgMarker.html":{}}}],["getter",{"_index":2056,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["gettextcolors",{"_index":1061,"title":{},"body":{"classes/ChartPalette.html":{}}}],["gettextmeasurement(array",{"_index":2670,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["getthresholdline",{"_index":4132,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getthresholdline(zone",{"_index":4173,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getthresholdlines",{"_index":4133,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getthresholdlines(zones",{"_index":4177,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getthresholdzones",{"_index":4134,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getthresholdzones(sourceseries",{"_index":4180,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["gettickdistance(array",{"_index":2680,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["getting",{"_index":954,"title":{"index.html":{},"license.html":{}},"body":{"classes/ChartDonutContentPlugin.html":{},"index.html":{}}}],["gettooltipposition(datapoint",{"_index":1492,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["getvalueaccessor(accessor",{"_index":4376,"title":{},"body":{"classes/UtilityService.html":{}}}],["getverticalsetup",{"_index":1441,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["getverticalsetup(tooltippositionoffset",{"_index":1457,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["getvisibleserieswithlegend",{"_index":780,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["getvisibleserieswithlegendbackup",{"_index":3163,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["getxyvalues",{"_index":4342,"title":{},"body":{"classes/UtilityService.html":{}}}],["getxyvalues(xscales",{"_index":4367,"title":{},"body":{"classes/UtilityService.html":{}}}],["give",{"_index":4695,"title":{},"body":{"license.html":{}}}],["given",{"_index":841,"title":{},"body":{"injectables/ChartCollectionService.html":{},"classes/LegendInteractionAssist.html":{},"classes/MappedValueProvider.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["go",{"_index":288,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["going",{"_index":3767,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"injectables/ThresholdsService.html":{},"miscellaneous/variables.html":{}}}],["goodwill",{"_index":4784,"title":{},"body":{"license.html":{}}}],["governing",{"_index":4832,"title":{},"body":{"license.html":{}}}],["grant",{"_index":4650,"title":{},"body":{"license.html":{}}}],["granted",{"_index":4590,"title":{},"body":{"license.html":{}}}],["granting",{"_index":4565,"title":{},"body":{"license.html":{}}}],["grants",{"_index":4652,"title":{},"body":{"license.html":{}}}],["grayscale",{"_index":662,"title":{},"body":{"classes/Chart.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["grayscale_color_matrix",{"_index":603,"title":{},"body":{"classes/Chart.html":{},"miscellaneous/variables.html":{}}}],["grayscale_filter",{"_index":2794,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"miscellaneous/variables.html":{}}}],["grid",{"_index":83,"title":{"classes/Grid.html":{},"additional-documentation/advanced-usage/grid.html":{}},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/SparkChartAssist.html":{},"classes/XYGridConfig.html":{},"classes/ZoomPlugin.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/advanced-usage.html":{}}}],["grid's",{"_index":1633,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["grid.bottomscaleid",{"_index":3005,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["grid.default_border_class_name",{"_index":1802,"title":{},"body":{"classes/Grid.html":{}}}],["grid.eventbus",{"_index":611,"title":{},"body":{"classes/Chart.html":{}}}],["grid.grid_class_name",{"_index":1716,"title":{},"body":{"classes/Grid.html":{}}}],["grid.grid_elements_layer_name",{"_index":1735,"title":{},"body":{"classes/Grid.html":{}}}],["grid.render_area_height_correction",{"_index":1777,"title":{},"body":{"classes/Grid.html":{}}}],["grid.render_area_width_correction",{"_index":1779,"title":{},"body":{"classes/Grid.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["grid.rendering_area_clip_path_prefix",{"_index":1718,"title":{},"body":{"classes/Grid.html":{}}}],["grid.rendering_area_layer_name",{"_index":1788,"title":{},"body":{"classes/Grid.html":{}}}],["grid.tick_dimension_correction",{"_index":1754,"title":{},"body":{"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{}}}],["grid.ts",{"_index":2300,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["grid.updatechartdimensionssubject",{"_index":609,"title":{},"body":{"classes/Chart.html":{}}}],["grid/config/spark",{"_index":4010,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["grid/grid",{"_index":2878,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["grid/types",{"_index":599,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["grid/xy",{"_index":2879,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/SparkChartAssist.html":{},"classes/ZoomPlugin.html":{}}}],["grid_class_name",{"_index":1622,"title":{},"body":{"classes/Grid.html":{}}}],["grid_elements_layer_name",{"_index":1623,"title":{},"body":{"classes/Grid.html":{}}}],["gridconfig",{"_index":130,"title":{"classes/GridConfig.html":{}},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/SparkChartAssist.html":{},"classes/XYGridConfig.html":{}}}],["gridconfig:11",{"_index":141,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["gridconfig:14",{"_index":139,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["gridconfig:16",{"_index":131,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["gridconfig:28",{"_index":136,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["griddimension",{"_index":3028,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["griddimension.height",{"_index":3032,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["griddimension.width",{"_index":3042,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["gridelementslayer",{"_index":1697,"title":{},"body":{"classes/Grid.html":{}}}],["gridgroupselection",{"_index":2438,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["gridplugin",{"_index":642,"title":{},"body":{"classes/Chart.html":{}}}],["grids",{"_index":1723,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["gridselection",{"_index":2443,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["gridticks",{"_index":154,"title":{},"body":{"classes/AxisConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["gridx",{"_index":2336,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["gridy",{"_index":2335,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["grossly",{"_index":4773,"title":{},"body":{"license.html":{}}}],["group",{"_index":808,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/LegendInteractionAssist.html":{}}}],["grouped",{"_index":2179,"title":{},"body":{"interfaces/IBarChartConfig.html":{},"interfaces/IStackMetadata.html":{}}}],["groupid",{"_index":3127,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["grouping",{"_index":801,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["groups",{"_index":2625,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["groupselection",{"_index":2516,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["groupselection.append(\"title\").text(titletext",{"_index":2533,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["groupselection.classed(\"pointer",{"_index":2527,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["groupselection.classed(\"tick",{"_index":2544,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["groupselection.data()[0",{"_index":2529,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["groupselection.select(\"text\").attr(\"x",{"_index":2525,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["groupselection.select(\"text\").call(overflowhandler",{"_index":2600,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["groupselection.select(\"title\").empty",{"_index":2528,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["grow",{"_index":1929,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["gsrgb",{"_index":4118,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["hack",{"_index":3533,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["handle",{"_index":1203,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IScaleSVGElement.html":{},"classes/RadialPopoverPlugin.html":{}}}],["handleclose",{"_index":1350,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["handled",{"_index":1154,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{}}}],["handlelabelupdate",{"_index":2999,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["handlelineupdate",{"_index":3064,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["handlemarginupdate",{"_index":2612,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["handleopen",{"_index":1331,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["handler",{"_index":182,"title":{},"body":{"classes/AxisConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"miscellaneous/typealiases.html":{}}}],["handles",{"_index":3752,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["handleseriesstatechange(e",{"_index":2382,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["handleticklabeloverflow(labelgroup",{"_index":2535,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["handleticklabeloverflowdebounceindex",{"_index":2343,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["handling",{"_index":2039,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["harmless",{"_index":4808,"title":{},"body":{"license.html":{}}}],["hasinnerscale(scale",{"_index":2176,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["hasinputdescription",{"_index":3311,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["hasinputunitlabel",{"_index":3870,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["hasinputvalue",{"_index":3871,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["hasinteractionlabel",{"_index":4051,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["hasplugin",{"_index":534,"title":{},"body":{"classes/Chart.html":{}}}],["hasplugin(classref",{"_index":562,"title":{},"body":{"classes/Chart.html":{}}}],["hasprojecteddescription",{"_index":3312,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["hasrightyaxis",{"_index":2616,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["having",{"_index":4190,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["haystack",{"_index":4358,"title":{},"body":{"classes/UtilityService.html":{}}}],["haystack.findindex(straw",{"_index":4384,"title":{},"body":{"classes/UtilityService.html":{}}}],["haystack.length",{"_index":4381,"title":{},"body":{"classes/UtilityService.html":{}}}],["haystack[0",{"_index":4383,"title":{},"body":{"classes/UtilityService.html":{}}}],["height",{"_index":634,"title":{},"body":{"classes/Chart.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["height(value",{"_index":1541,"title":{},"body":{"classes/DimensionConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["heightoffset",{"_index":3031,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["helper",{"_index":3139,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["helps",{"_index":341,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/LegendInteractionAssist.html":{}}}],["here",{"_index":902,"title":{},"body":{"components/ChartComponent.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPopoverPlugin.html":{},"classes/DataSeries.html":{},"interfaces/IPopoverPluginConfig.html":{},"modules/NuiChartsModule.html":{},"injectables/ThresholdsService.html":{}}}],["hereby",{"_index":4651,"title":{},"body":{"license.html":{}}}],["herein",{"_index":4735,"title":{},"body":{"license.html":{}}}],["hidden",{"_index":2082,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IScaleSVGElement.html":{},"miscellaneous/enumerations.html":{}}}],["hide",{"_index":460,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["hidesubject",{"_index":440,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["hiding",{"_index":1192,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["high",{"_index":4433,"title":{},"body":{"classes/UtilityService.html":{}}}],["highlight",{"_index":266,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/LegendInteractionAssist.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"miscellaneous/typealiases.html":{}}}],["highlight_data_point",{"_index":4867,"title":{},"body":{"miscellaneous/variables.html":{}}}],["highlight_data_point_event",{"_index":4859,"title":{},"body":{"miscellaneous/variables.html":{}}}],["highlight_series",{"_index":4868,"title":{},"body":{"miscellaneous/variables.html":{}}}],["highlight_series_event",{"_index":400,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"miscellaneous/variables.html":{}}}],["highlightdata",{"_index":3192,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["highlightdata.index",{"_index":3195,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["highlightdatapoint",{"_index":273,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IHighlightStrategy.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["highlightdatapoint(renderer",{"_index":305,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["highlightdatapoint(renderseries",{"_index":3569,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["highlightdatapresentpredicate",{"_index":3194,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["highlightdatapresentpredicate(highlightdata",{"_index":3197,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["highlighted",{"_index":283,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarTooltipsPlugin.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["highlighteddatapoints",{"_index":3962,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["highlights",{"_index":2978,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["highlightstrategy",{"_index":2116,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["hold",{"_index":4807,"title":{},"body":{"license.html":{}}}],["horizontal",{"_index":404,"title":{},"body":{"classes/BarHorizontalGridConfig.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IStackMetadata.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYGridConfig.html":{},"classes/InteractionLabelPlugin.html":{},"components/LegendSeriesComponent.html":{},"miscellaneous/enumerations.html":{}}}],["horizontalbaraccessors",{"_index":1852,"title":{"classes/HorizontalBarAccessors.html":{}},"body":{"classes/HorizontalBarAccessors.html":{}}}],["horizontalpadding",{"_index":167,"title":{},"body":{"classes/AxisConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/InteractionLabelPlugin.html":{}}}],["host",{"_index":1135,"title":{},"body":{"components/ChartPopoverComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["hostbinding",{"_index":3349,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["hostbinding(`class.${legend_series_class_name",{"_index":3362,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["hostbinding(`class.inverse",{"_index":3365,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["hostbindings",{"_index":3318,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["hostlistener",{"_index":3350,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["hostlistener(\"click",{"_index":3381,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["hostlisteners",{"_index":3320,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["hour",{"_index":4968,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hover",{"_index":1255,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"miscellaneous/enumerations.html":{}}}],["hovered",{"_index":1899,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["hovering",{"_index":2117,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/LegendInteractionAssist.html":{}}}],["htmlelement",{"_index":541,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/MarkerUtils.html":{},"classes/PathMarker.html":{}}}],["http://www.apache.org/licenses",{"_index":4552,"title":{},"body":{"license.html":{}}}],["http://www.apache.org/licenses/license",{"_index":4831,"title":{},"body":{"license.html":{}}}],["https://github.com/angular/zone.js/issues/1011",{"_index":903,"title":{},"body":{"components/ChartComponent.html":{}}}],["https://github.com/d3/d3",{"_index":2889,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["https://github.com/mathiasbynens/css.escape.git",{"_index":4415,"title":{},"body":{"classes/UtilityService.html":{}}}],["https://github.com/ng",{"_index":3834,"title":{},"body":{"classes/Renderer.html":{}}}],["https://jira.solarwinds.com/browse/nui",{"_index":4897,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://stackoverflow.com/a/1968345",{"_index":4289,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["https://www.w3.org/tr/wcag20/#contrast",{"_index":4099,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["https://www.w3.org/tr/wcag20/relative",{"_index":4112,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["huge",{"_index":1013,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["i).valueof",{"_index":4379,"title":{},"body":{"classes/UtilityService.html":{}}}],["iaccessors",{"_index":34,"title":{"interfaces/IAccessors.html":{}},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/MarkerUtils.html":{},"classes/NoopAccessors.html":{},"classes/RadialAccessors.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"classes/XYAccessors.html":{},"classes/XYRenderer.html":{}}}],["iallaround",{"_index":106,"title":{"interfaces/IAllAround.html":{}},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["iareaaccessors",{"_index":9,"title":{"interfaces/IAreaAccessors.html":{}},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["iareadataaccessors",{"_index":25,"title":{"interfaces/IAreaDataAccessors.html":{}},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["iarearendererconfig",{"_index":2063,"title":{"interfaces/IAreaRendererConfig.html":{}},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["iareaseriesaccessors",{"_index":27,"title":{"interfaces/IAreaSeriesAccessors.html":{}},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["iaxesstylechangeeventpayload",{"_index":2002,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/typealiases.html":{}}}],["iaxis",{"_index":2060,"title":{"interfaces/IAxis.html":{}},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["iaxisconfig",{"_index":152,"title":{"interfaces/IAxisConfig.html":{}},"body":{"classes/AxisConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{},"miscellaneous/variables.html":{}}}],["iaxisconfig#approximateticks",{"_index":191,"title":{},"body":{"classes/AxisConfig.html":{}}}],["iaxisconfig#fit",{"_index":189,"title":{},"body":{"classes/AxisConfig.html":{}}}],["iaxisconfig#gridticks",{"_index":186,"title":{},"body":{"classes/AxisConfig.html":{}}}],["iaxisconfig#ticklabel",{"_index":188,"title":{},"body":{"classes/AxisConfig.html":{}}}],["iaxisconfig#ticksize",{"_index":187,"title":{},"body":{"classes/AxisConfig.html":{}}}],["iaxisconfig#visible",{"_index":185,"title":{},"body":{"classes/AxisConfig.html":{}}}],["ibandscale",{"_index":2125,"title":{"interfaces/IBandScale.html":{}},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["ibandscale).bandwidth",{"_index":2559,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["ibaraccessors",{"_index":201,"title":{"interfaces/IBarAccessors.html":{}},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{}}}],["ibarchartconfig",{"_index":448,"title":{"interfaces/IBarChartConfig.html":{}},"body":{"classes/BarTooltipsPlugin.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IStackMetadata.html":{}}}],["ibardataaccessors",{"_index":203,"title":{"interfaces/IBarDataAccessors.html":{}},"body":{"classes/BarAccessors.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["ibarrendererconfig",{"_index":2112,"title":{"interfaces/IBarRendererConfig.html":{}},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["iborderconfig",{"_index":1675,"title":{"interfaces/IBorderConfig.html":{}},"body":{"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["iborders",{"_index":1676,"title":{"interfaces/IBorders.html":{}},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["ichart",{"_index":464,"title":{"interfaces/IChart.html":{}},"body":{"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"components/ChartComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/ZoomPlugin.html":{}}}],["ichartassist",{"_index":764,"title":{"interfaces/IChartAssist.html":{}},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["ichartassist#gethighlightedvalue",{"_index":4034,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["ichartassist#update",{"_index":4016,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["ichartassistevent",{"_index":788,"title":{"interfaces/IChartAssistEvent.html":{}},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/LegendInteractionAssist.html":{}}}],["ichartassistevents",{"_index":3159,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["ichartassistseries",{"_index":744,"title":{"interfaces/IChartAssistSeries.html":{}},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{}}}],["ichartcollectionevent",{"_index":1979,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["ichartcomponent",{"_index":817,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["ichartevent",{"_index":596,"title":{"interfaces/IChartEvent.html":{}},"body":{"classes/Chart.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{},"classes/ZoomPlugin.html":{}}}],["ichartmarker",{"_index":994,"title":{"interfaces/IChartMarker.html":{}},"body":{"components/ChartMarkerComponent.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/MarkerUtils.html":{},"classes/PathMarker.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SparkChartAssist.html":{},"classes/SvgMarker.html":{},"classes/VerticalBarAccessors.html":{}}}],["ichartpalette",{"_index":1047,"title":{"interfaces/IChartPalette.html":{}},"body":{"classes/ChartPalette.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["ichartplugin",{"_index":548,"title":{"interfaces/IChartPlugin.html":{}},"body":{"classes/Chart.html":{},"classes/ChartPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["ichartseries",{"_index":576,"title":{"interfaces/IChartSeries.html":{}},"body":{"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/RadialTooltipsPlugin.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"miscellaneous/variables.html":{}}}],["ichartviewstatuseventpayload",{"_index":879,"title":{"interfaces/IChartViewStatusEventPayload.html":{}},"body":{"components/ChartComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["icon",{"_index":3096,"title":{},"body":{"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{}}}],["icoordinates",{"_index":1908,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["id",{"_index":760,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/DataSeries.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{}}}],["id.directive",{"_index":3649,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["id.directive.ts",{"_index":799,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["id.directive.ts:20",{"_index":819,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["idataaccessors",{"_index":35,"title":{"interfaces/IDataAccessors.html":{}},"body":{"classes/AreaAccessors.html":{},"classes/DataSeries.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/RectangleAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["idatapoint",{"_index":1187,"title":{"interfaces/IDataPoint.html":{}},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{}}}],["idatapointspayload",{"_index":453,"title":{"interfaces/IDataPointsPayload.html":{}},"body":{"classes/BarTooltipsPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/SparkChartAssist.html":{}}}],["idataseries",{"_index":209,"title":{"interfaces/IDataSeries.html":{}},"body":{"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/DataSeries.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{}}}],["ideally",{"_index":1844,"title":{},"body":{"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["identification",{"_index":4823,"title":{},"body":{"license.html":{}}}],["identified",{"_index":840,"title":{},"body":{"injectables/ChartCollectionService.html":{},"index.html":{}}}],["identifier",{"_index":1782,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/ScalesIndex.html":{}}}],["identify",{"_index":1335,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["identifying",{"_index":4816,"title":{},"body":{"license.html":{}}}],["identity",{"_index":4359,"title":{},"body":{"classes/UtilityService.html":{}}}],["idimensionconfig",{"_index":137,"title":{"interfaces/IDimensionConfig.html":{}},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/Chart.html":{},"classes/DimensionConfig.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["idimensionconfig#autoheight",{"_index":1561,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["idimensionconfig#autowidth",{"_index":1560,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["idimensionconfig#height",{"_index":1564,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["idimensionconfig#margin",{"_index":1557,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["idimensionconfig#marginlocked",{"_index":1559,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["idimensionconfig#outerheight",{"_index":1571,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["idimensionconfig#outerwidth",{"_index":1566,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["idimensionconfig#padding",{"_index":1558,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["idimensionconfig#width",{"_index":1562,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["idimensions",{"_index":598,"title":{"interfaces/IDimensions.html":{}},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["idomainlimits",{"_index":1911,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["idonutgaugethresholdsrendererconfig",{"_index":1938,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["ids",{"_index":4493,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["ielementposition",{"_index":933,"title":{"interfaces/IElementPosition.html":{}},"body":{"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["ienhancedlinecapconfig",{"_index":2093,"title":{"interfaces/IEnhancedLineCapConfig.html":{}},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["iformatters",{"_index":2138,"title":{"interfaces/IFormatters.html":{}},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{}}}],["igaugethreshold",{"_index":1585,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["ignore",{"_index":129,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/Chart.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/Renderer.html":{},"classes/TextColorProvider.html":{},"classes/XYGridConfig.html":{},"miscellaneous/variables.html":{}}}],["ignore_interaction_class",{"_index":2312,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"miscellaneous/variables.html":{}}}],["ignorefordomaincalculation",{"_index":1920,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"injectables/ThresholdsService.html":{},"miscellaneous/variables.html":{}}}],["igrid",{"_index":539,"title":{"interfaces/IGrid.html":{}},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["igrid#build",{"_index":1712,"title":{},"body":{"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{}}}],["igrid#buildplugins",{"_index":2408,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["igrid#config",{"_index":1708,"title":{},"body":{"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{}}}],["igrid#getinteractivearea",{"_index":1702,"title":{},"body":{"classes/Grid.html":{}}}],["igrid#getlasagna",{"_index":1704,"title":{},"body":{"classes/Grid.html":{}}}],["igrid#target",{"_index":1710,"title":{},"body":{"classes/Grid.html":{}}}],["igrid#update",{"_index":1739,"title":{},"body":{"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{}}}],["igrid#updatedimensions",{"_index":1742,"title":{},"body":{"classes/Grid.html":{}}}],["igrid#updateranges",{"_index":1748,"title":{},"body":{"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{}}}],["igridconfig",{"_index":133,"title":{"interfaces/IGridConfig.html":{}},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["igridconfig#borders",{"_index":1850,"title":{},"body":{"classes/GridConfig.html":{}}}],["igridconfig#cursor",{"_index":1851,"title":{},"body":{"classes/GridConfig.html":{}}}],["igridconfig#dimension",{"_index":1849,"title":{},"body":{"classes/GridConfig.html":{}}}],["igridconfig#interactive",{"_index":1848,"title":{},"body":{"classes/GridConfig.html":{}}}],["ihasinnerscale",{"_index":2174,"title":{"interfaces/IHasInnerScale.html":{}},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["ihighlightstrategy",{"_index":268,"title":{"interfaces/IHighlightStrategy.html":{}},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["ii",{"_index":4579,"title":{},"body":{"license.html":{}}}],["iii",{"_index":4586,"title":{},"body":{"license.html":{}}}],["iinteractioncoordinatespayload",{"_index":2222,"title":{"interfaces/IInteractionCoordinatesPayload.html":{}},"body":{"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["iinteractiondatapointevent",{"_index":1205,"title":{"interfaces/IInteractionDataPointEvent.html":{}},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/MarkerUtils.html":{}}}],["iinteractiondatapointsevent",{"_index":1204,"title":{"interfaces/IInteractionDataPointsEvent.html":{}},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{}}}],["iinteractionevent",{"_index":1909,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["iinteractionpayload",{"_index":1997,"title":{"interfaces/IInteractionPayload.html":{}},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["iinteractionvalues",{"_index":2218,"title":{"interfaces/IInteractionValues.html":{}},"body":{"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"classes/UtilityService.html":{}}}],["iinteractionvaluespayload",{"_index":2220,"title":{"interfaces/IInteractionValuesPayload.html":{}},"body":{"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["ilasagnalayer",{"_index":1894,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYRenderer.html":{}}}],["ilineaccessors",{"_index":2079,"title":{"interfaces/ILineAccessors.html":{}},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"injectables/ThresholdsService.html":{}}}],["ilineargaugethresholdsrendererconfig",{"_index":1940,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["ilinearscales",{"_index":1941,"title":{"interfaces/ILinearScales.html":{}},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["ilinedataaccessors",{"_index":2241,"title":{"interfaces/ILineDataAccessors.html":{}},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["ilinerendererconfig",{"_index":2094,"title":{"interfaces/ILineRendererConfig.html":{}},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/MissingDataLineRendererConfig.html":{}}}],["ilineseriesaccessors",{"_index":2242,"title":{"interfaces/ILineSeriesAccessors.html":{}},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["imarkerinteractionconfig",{"_index":2074,"title":{"interfaces/IMarkerInteractionConfig.html":{}},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"miscellaneous/variables.html":{}}}],["impersonates",{"_index":3497,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["implementation",{"_index":1490,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/SparkChartAssist.html":{}}}],["implementations/interfaces",{"_index":1727,"title":{},"body":{"classes/Grid.html":{}}}],["implements",{"_index":8,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISpark.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MappedValueProvider.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RectangleAccessors.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{}}}],["implied",{"_index":4756,"title":{},"body":{"license.html":{}}}],["import",{"_index":28,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"components/BasicLegendTileComponent.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"modules/NuiChartsModule.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{},"index.html":{},"license.html":{}}}],["imports",{"_index":3662,"title":{},"body":{"modules/NuiChartsModule.html":{},"index.html":{}}}],["improving",{"_index":4642,"title":{},"body":{"license.html":{}}}],["inability",{"_index":4782,"title":{},"body":{"license.html":{}}}],["inactive",{"_index":2799,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["inactivecolor",{"_index":2800,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["inbounds",{"_index":4390,"title":{},"body":{"classes/UtilityService.html":{}}}],["incidental",{"_index":4778,"title":{},"body":{"license.html":{}}}],["include",{"_index":4518,"title":{},"body":{"index.html":{},"license.html":{}}}],["included",{"_index":4607,"title":{},"body":{"license.html":{}}}],["includes",{"_index":2252,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["including",{"_index":2026,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"license.html":{}}}],["inclusion",{"_index":4625,"title":{},"body":{"license.html":{}}}],["incorporated",{"_index":4649,"title":{},"body":{"license.html":{}}}],["incorrect",{"_index":2886,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["incurred",{"_index":4809,"title":{},"body":{"license.html":{}}}],["indemnify",{"_index":4805,"title":{},"body":{"license.html":{}}}],["indemnity",{"_index":4798,"title":{},"body":{"license.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":2203,"title":{},"body":{"interfaces/IDataAccessors.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IInteractionValues.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/ScalesIndex.html":{}}}],["indexincrement",{"_index":4392,"title":{},"body":{"classes/UtilityService.html":{}}}],["indexof(fixeddomains[next",{"_index":4986,"title":{},"body":{"miscellaneous/variables.html":{}}}],["indicated",{"_index":4605,"title":{},"body":{"license.html":{}}}],["indicates",{"_index":1896,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["indicating",{"_index":1164,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"components/LegendSeriesComponent.html":{},"classes/RadialPopoverPlugin.html":{},"classes/SideIndicatorAccessors.html":{}}}],["indicator",{"_index":2789,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["indicators",{"_index":2805,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["indicatorsactive",{"_index":4315,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["indirect",{"_index":4575,"title":{},"body":{"license.html":{}}}],["individual",{"_index":2118,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"components/LegendComponent.html":{},"license.html":{}}}],["infinite",{"_index":4184,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["infinity",{"_index":967,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{},"interfaces/IScaleSVGElement.html":{}}}],["info",{"_index":1168,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{},"miscellaneous/variables.html":{}}}],["information",{"_index":1430,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"injectables/ThresholdsService.html":{},"license.html":{}}}],["informational",{"_index":4720,"title":{},"body":{"license.html":{}}}],["infringed",{"_index":4673,"title":{},"body":{"license.html":{}}}],["infringement",{"_index":4686,"title":{},"body":{"license.html":{}}}],["inherited",{"_index":115,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/HorizontalBarAccessors.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LineAccessors.html":{},"classes/LinearScale.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/TextColorProvider.html":{},"classes/TimeScale.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{}}}],["initial",{"_index":1011,"title":{},"body":{"components/ChartMarkerComponent.html":{},"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["initialization",{"_index":1972,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["initialize",{"_index":444,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/ZoomPlugin.html":{}}}],["initplugin",{"_index":1120,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["inject",{"_index":820,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"components/ChartMarkerComponent.html":{}}}],["injectable",{"_index":834,"title":{"injectables/ChartCollectionService.html":{},"injectables/ThresholdsService.html":{}},"body":{"injectables/ChartCollectionService.html":{},"injectables/ThresholdsService.html":{}}}],["injectables",{"_index":835,"title":{},"body":{"injectables/ChartCollectionService.html":{},"injectables/ThresholdsService.html":{},"overview.html":{}}}],["injected",{"_index":807,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["injectthresholdsdata",{"_index":4135,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["injectthresholdsdata(dataseries",{"_index":4185,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["inline",{"_index":3102,"title":{},"body":{"components/LegendComponent.html":{}}}],["innerradius(0",{"_index":3707,"title":{},"body":{"classes/PieRenderer.html":{}}}],["innerscale",{"_index":2175,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["inoopaccessors",{"_index":2266,"title":{"interfaces/INoopAccessors.html":{}},"body":{"interfaces/INoopAccessors.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{}}}],["input",{"_index":821,"title":{"additional-documentation/advanced-usage/input-structure.html":{}},"body":{"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"classes/ProcessedColorProvider.html":{},"components/RichLegendTileComponent.html":{},"classes/TextColorProvider.html":{},"index.html":{},"additional-documentation/advanced-usage.html":{}}}],["input(\"nuichartcollectionid",{"_index":829,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["inputs",{"_index":815,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"components/RichLegendTileComponent.html":{}}}],["inputseriesset",{"_index":767,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["inputseriesset.map(chartseries",{"_index":4017,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["inputsparks",{"_index":4020,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["inputsparks.length",{"_index":4025,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["inputsparks.map((spark",{"_index":4023,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["inside",{"_index":950,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{},"classes/InteractionLabelPlugin.html":{}}}],["inspired",{"_index":4288,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["instance",{"_index":932,"title":{},"body":{"components/ChartDonutContentComponent.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/PathMarker.html":{},"classes/SideIndicatorAccessors.html":{}}}],["instanceof",{"_index":620,"title":{},"body":{"classes/Chart.html":{},"classes/ChartDonutContentPlugin.html":{},"interfaces/IScaleSVGElement.html":{}}}],["instances",{"_index":3947,"title":{},"body":{"classes/SequentialValueProvider.html":{}}}],["instantiate",{"_index":2254,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["instead",{"_index":720,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{}}}],["institute",{"_index":4677,"title":{},"body":{"license.html":{}}}],["insures",{"_index":2040,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["intentionally",{"_index":4623,"title":{},"body":{"license.html":{}}}],["interaction",{"_index":734,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"classes/ChartPopoverPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialPopoverPlugin.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["interaction_coordinates",{"_index":4871,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interaction_coordinates_event",{"_index":2221,"title":{},"body":{"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["interaction_data_point",{"_index":4872,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interaction_data_point_event",{"_index":1186,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/MarkerUtils.html":{},"miscellaneous/variables.html":{}}}],["interaction_data_points",{"_index":4873,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interaction_data_points_event",{"_index":1146,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"classes/LegendInteractionAssist.html":{},"classes/RadialPopoverPlugin.html":{},"classes/SparkChartAssist.html":{},"miscellaneous/variables.html":{}}}],["interaction_margin",{"_index":3393,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["interaction_series",{"_index":4874,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interaction_series_event",{"_index":3398,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{},"miscellaneous/variables.html":{}}}],["interaction_values",{"_index":4876,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interaction_values_active",{"_index":4875,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interaction_values_active_event",{"_index":2876,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["interaction_values_event",{"_index":2219,"title":{},"body":{"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"miscellaneous/variables.html":{}}}],["interactionhandlermap",{"_index":2896,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["interactionlabel",{"_index":3014,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["interactionlabel.empty",{"_index":3016,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["interactionlabel.remove",{"_index":3018,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["interactionlabel.select(\"text",{"_index":3024,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["interactionlabellayer",{"_index":2990,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["interactionlabelplugin",{"_index":2323,"title":{"classes/InteractionLabelPlugin.html":{}},"body":{"interfaces/IScaleSVGElement.html":{},"classes/InteractionLabelPlugin.html":{},"classes/SparkChartAssist.html":{}}}],["interactionlabelplugin.layer_name",{"_index":2993,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["interactionlabelplugin.layer_name}__rect",{"_index":3053,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["interactionlabelplugin.layer_name}__text",{"_index":3055,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["interactionlinelayer",{"_index":3060,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["interactionlineplugin",{"_index":2325,"title":{"classes/InteractionLinePlugin.html":{}},"body":{"interfaces/IScaleSVGElement.html":{},"classes/InteractionLinePlugin.html":{},"classes/SparkChartAssist.html":{}}}],["interactionlineplugin.layer_name",{"_index":3071,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["interactionpath",{"_index":3399,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["interactionpath.empty",{"_index":3403,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["interactionplugins",{"_index":100,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["interactionstrategy",{"_index":2106,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["interactiontype",{"_index":1172,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/RadialPopoverPlugin.html":{},"classes/SparkChartAssist.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/enumerations.html":{}}}],["interactiontype.click",{"_index":3417,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{}}}],["interactiontype.hover",{"_index":3525,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["interactiontype.mousedown",{"_index":2899,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["interactiontype.mousemove",{"_index":1173,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/RadialPopoverPlugin.html":{},"classes/SparkChartAssist.html":{},"classes/ZoomPlugin.html":{}}}],["interactiontype.mouseup",{"_index":2902,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["interactive",{"_index":104,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"classes/MissingDataLineRendererConfig.html":{},"injectables/ThresholdsService.html":{},"classes/XYGridConfig.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["interactive(interactive",{"_index":3356,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["interactivearea",{"_index":1696,"title":{},"body":{"classes/Grid.html":{}}}],["interface",{"_index":40,"title":{"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"interfaces/ScalesIndex.html":{},"interfaces/ZoneCross.html":{}},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/NoopAccessors.html":{},"classes/RadialAccessors.html":{},"classes/RectangleAccessors.html":{},"interfaces/ScalesIndex.html":{},"classes/SideIndicatorAccessors.html":{},"classes/StatusAccessors.html":{},"classes/XYAccessors.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{}}}],["interfaces",{"_index":1871,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LineAccessors.html":{},"interfaces/ScalesIndex.html":{},"interfaces/ZoneCross.html":{},"license.html":{},"overview.html":{}}}],["internal",{"_index":2329,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["intersect",{"_index":4238,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["intersected",{"_index":1994,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["intersection",{"_index":916,"title":{},"body":{"components/ChartComponent.html":{},"injectables/ThresholdsService.html":{}}}],["intersectionobserver",{"_index":883,"title":{},"body":{"components/ChartComponent.html":{}}}],["intersectionobserver(this.intersectionobservercallback",{"_index":886,"title":{},"body":{"components/ChartComponent.html":{}}}],["intersectionobservercallback",{"_index":912,"title":{},"body":{"components/ChartComponent.html":{}}}],["intersectionobserverentry",{"_index":914,"title":{},"body":{"components/ChartComponent.html":{}}}],["intersections",{"_index":4226,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["interval",{"_index":323,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"injectables/ThresholdsService.html":{},"miscellaneous/variables.html":{}}}],["interval[0",{"_index":4997,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interval[1",{"_index":4999,"title":{},"body":{"miscellaneous/variables.html":{}}}],["intl.datetimeformat(moment.locale",{"_index":4972,"title":{},"body":{"miscellaneous/variables.html":{}}}],["intl.datetimeformatoptions",{"_index":4971,"title":{},"body":{"miscellaneous/variables.html":{}}}],["intlformat",{"_index":4860,"title":{},"body":{"miscellaneous/variables.html":{}}}],["intlformat(d",{"_index":4967,"title":{},"body":{"miscellaneous/variables.html":{}}}],["invert",{"_index":2285,"title":{},"body":{"interfaces/IScale.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{}}}],["invert(coordinate",{"_index":2160,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{}}}],["invert(next",{"_index":4446,"title":{},"body":{"classes/UtilityService.html":{}}}],["inverted",{"_index":4445,"title":{},"body":{"classes/UtilityService.html":{}}}],["invisible",{"_index":1765,"title":{},"body":{"classes/Grid.html":{}}}],["invoke",{"_index":2599,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["invoked",{"_index":1973,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{}}}],["invokes",{"_index":2744,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["ipopoverpluginconfig",{"_index":1160,"title":{"interfaces/IPopoverPluginConfig.html":{}},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["iposition",{"_index":1309,"title":{"interfaces/IPosition.html":{}},"body":{"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{}}}],["iradialaccessors",{"_index":2269,"title":{"interfaces/IRadialAccessors.html":{}},"body":{"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"classes/RadialAccessors.html":{}}}],["iradialdataaccessors",{"_index":2271,"title":{"interfaces/IRadialDataAccessors.html":{}},"body":{"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"classes/RadialAccessors.html":{}}}],["iradialrendererconfig",{"_index":1921,"title":{"interfaces/IRadialRendererConfig.html":{}},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/PieRenderer.html":{},"miscellaneous/variables.html":{}}}],["iradialscales",{"_index":2141,"title":{"interfaces/IRadialScales.html":{}},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["iradialseriesaccessors",{"_index":2272,"title":{"interfaces/IRadialSeriesAccessors.html":{}},"body":{"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"classes/RadialAccessors.html":{}}}],["irectangleaccessors",{"_index":331,"title":{"interfaces/IRectangleAccessors.html":{}},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RectangleAccessors.html":{}}}],["irectangledataaccessors",{"_index":206,"title":{"interfaces/IRectangleDataAccessors.html":{}},"body":{"classes/BarAccessors.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["irectangleseriesaccessors",{"_index":205,"title":{"interfaces/IRectangleSeriesAccessors.html":{}},"body":{"classes/BarAccessors.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/StatusAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["irendercontainers",{"_index":1982,"title":{"interfaces/IRenderContainers.html":{}},"body":{"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["irendererconfig",{"_index":1914,"title":{"interfaces/IRendererConfig.html":{}},"body":{"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{}}}],["irenderereventpayload",{"_index":328,"title":{"interfaces/IRendererEventPayload.html":{}},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{}}}],["irenderseries",{"_index":295,"title":{"interfaces/IRenderSeries.html":{}},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYRenderer.html":{}}}],["irenderstatedata",{"_index":572,"title":{"interfaces/IRenderStateData.html":{}},"body":{"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{}}}],["irenderstatesindex",{"_index":794,"title":{"interfaces/IRenderStatesIndex.html":{}},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/LegendInteractionAssist.html":{}}}],["irrevocable",{"_index":4659,"title":{},"body":{"license.html":{}}}],["isactive",{"_index":2822,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["isactiveclassapplied",{"_index":3366,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["isapproximatelyequal",{"_index":2772,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["isarray",{"_index":313,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartPalette.html":{},"classes/InteractionLabelPlugin.html":{}}}],["isarray(colors",{"_index":1076,"title":{},"body":{"classes/ChartPalette.html":{}}}],["isarray(value",{"_index":361,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["isarray(xvalue",{"_index":3010,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["isbandscale",{"_index":325,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"injectables/ThresholdsService.html":{}}}],["isbandscale(scale",{"_index":2172,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["isbandscale(scales.x",{"_index":4212,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["isbottomaxis",{"_index":2649,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["iscale",{"_index":2127,"title":{"interfaces/IScale.html":{}},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LinearScale.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["iscale#d3scale",{"_index":3923,"title":{},"body":{"classes/Scale.html":{}}}],["iscale#domain",{"_index":3928,"title":{},"body":{"classes/Scale.html":{}}}],["iscale#fixdomain",{"_index":3931,"title":{},"body":{"classes/Scale.html":{}}}],["iscale#range",{"_index":3924,"title":{},"body":{"classes/Scale.html":{}}}],["iscale#reverse",{"_index":3934,"title":{},"body":{"classes/Scale.html":{}}}],["iscale#reversed",{"_index":3936,"title":{},"body":{"classes/Scale.html":{}}}],["iscale).filter(s",{"_index":2400,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["iscalesvgelement",{"_index":2298,"title":{"interfaces/IScaleSVGElement.html":{}},"body":{"interfaces/IScaleSVGElement.html":{}}}],["ischartinview",{"_index":921,"title":{},"body":{"components/ChartComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["iscontinuous",{"_index":2154,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{}}}],["isdomainfixed",{"_index":2147,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{}}}],["isdomainvalid",{"_index":2155,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{}}}],["isempty",{"_index":1669,"title":{},"body":{"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/UtilityService.html":{},"classes/ZoomPlugin.html":{}}}],["isempty(data.coordinates",{"_index":2918,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["isempty(scales",{"_index":3003,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["isempty(this.grid.scales",{"_index":2917,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["isempty(this.scales",{"_index":1740,"title":{},"body":{"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{}}}],["isempty(xvalue",{"_index":4440,"title":{},"body":{"classes/UtilityService.html":{}}}],["isempty(yvalue",{"_index":4442,"title":{},"body":{"classes/UtilityService.html":{}}}],["isequal",{"_index":1305,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["isequal(currenttooltipdirectivesindex",{"_index":1341,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["iseriesaccessors",{"_index":36,"title":{"interfaces/ISeriesAccessors.html":{}},"body":{"classes/AreaAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/RectangleAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["isetdomaineventpayload",{"_index":2003,"title":{"interfaces/ISetDomainEventPayload.html":{}},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["isfunction",{"_index":1005,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["isfunction(this.marker.getsvg",{"_index":1021,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["ishorizontalclassapplied",{"_index":3364,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["isideindicatoraccessors",{"_index":2787,"title":{"interfaces/ISideIndicatorAccessors.html":{}},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["isideindicatordataaccessors",{"_index":2791,"title":{"interfaces/ISideIndicatorDataAccessors.html":{}},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["isideindicatorseriesaccessors",{"_index":2792,"title":{"interfaces/ISideIndicatorSeriesAccessors.html":{}},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["isimplethresholdzone",{"_index":2843,"title":{"interfaces/ISimpleThresholdZone.html":{}},"body":{"interfaces/ISimpleThresholdZone.html":{},"injectables/ThresholdsService.html":{},"interfaces/ZoneCross.html":{}}}],["isinrange",{"_index":3504,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["isinteractiveclassapplied",{"_index":3363,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["islegendactive",{"_index":3963,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["isnan(date.gettime",{"_index":4334,"title":{},"body":{"classes/TimeScale.html":{}}}],["isnan(value",{"_index":3460,"title":{},"body":{"classes/LinearScale.html":{}}}],["isnan(value.gettime",{"_index":4335,"title":{},"body":{"classes/TimeScale.html":{}}}],["isnil",{"_index":1307,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITooltipNode.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/Renderer.html":{}}}],["isnil(accessor",{"_index":3857,"title":{},"body":{"classes/Renderer.html":{}}}],["isnil(position.height",{"_index":1381,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["isnil(position.width",{"_index":1382,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["isnil(renderer.config.strokewidth",{"_index":3401,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["isnil(transformval",{"_index":2685,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["isopen",{"_index":1194,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipNode.html":{}}}],["ispark",{"_index":758,"title":{"interfaces/ISpark.html":{}},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/SparkChartAssist.html":{}}}],["isreversed",{"_index":3918,"title":{},"body":{"classes/Scale.html":{}}}],["isselected",{"_index":3315,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["isselectedchange",{"_index":3317,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["isserieshidden",{"_index":3112,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["isserieshidden(seriesid",{"_index":3122,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["issue",{"_index":4637,"title":{},"body":{"license.html":{}}}],["istackmetadata",{"_index":2180,"title":{"interfaces/IStackMetadata.html":{}},"body":{"interfaces/IBarChartConfig.html":{},"interfaces/IStackMetadata.html":{}}}],["istartendrangeaccessors",{"_index":2278,"title":{"interfaces/IStartEndRangeAccessors.html":{}},"body":{"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RectangleAccessors.html":{}}}],["istatusaccessors",{"_index":2852,"title":{"interfaces/IStatusAccessors.html":{}},"body":{"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["istatusdataaccessors",{"_index":2854,"title":{"interfaces/IStatusDataAccessors.html":{}},"body":{"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{}}}],["isundefined",{"_index":315,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"injectables/ChartCollectionService.html":{},"classes/ChartDonutContentPlugin.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/SvgMarker.html":{},"classes/UtilityService.html":{},"classes/ZoomPlugin.html":{}}}],["isundefined(collection",{"_index":850,"title":{},"body":{"injectables/ChartCollectionService.html":{}}}],["isundefined(color",{"_index":4072,"title":{},"body":{"classes/SvgMarker.html":{}}}],["isundefined(inverted",{"_index":4447,"title":{},"body":{"classes/UtilityService.html":{}}}],["isundefined(maxbottomwidth",{"_index":2561,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["isundefined(maxleftwidth",{"_index":2576,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["isundefined(maxrightwidth",{"_index":2568,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["isundefined(prev",{"_index":962,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["isundefined(radius",{"_index":968,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["isundefined(this.brushstartx",{"_index":2954,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["isundefined(this.selecteddatapointidxfn",{"_index":389,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["isvertical",{"_index":1412,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["iszoneedge",{"_index":1989,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["it'll",{"_index":3184,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["it's",{"_index":1394,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ITooltipNode.html":{},"classes/LineAccessors.html":{},"index.html":{}}}],["item",{"_index":1292,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"classes/LegendInteractionAssist.html":{}}}],["item.id",{"_index":3226,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["item.value.seriesid",{"_index":1330,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["iterations(20",{"_index":1401,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["itextoverflowargs",{"_index":2030,"title":{"interfaces/ITextOverflowArgs.html":{}},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["iticklabelconfig",{"_index":166,"title":{"interfaces/ITickLabelConfig.html":{}},"body":{"classes/AxisConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["itooltipnode",{"_index":1313,"title":{"interfaces/ITooltipNode.html":{}},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["itooltipposition",{"_index":1432,"title":{"interfaces/ITooltipPosition.html":{}},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["itself",{"_index":918,"title":{},"body":{"components/ChartComponent.html":{}}}],["ivalueprovider",{"_index":1052,"title":{"interfaces/IValueProvider.html":{}},"body":{"classes/ChartPalette.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/MappedValueProvider.html":{},"classes/ProcessedColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SparkChartAssist.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/VerticalBarAccessors.html":{}}}],["ivaluethicknessaccessors",{"_index":2279,"title":{"interfaces/IValueThicknessAccessors.html":{}},"body":{"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RectangleAccessors.html":{}}}],["ixydataaccessors",{"_index":2243,"title":{"interfaces/IXYDataAccessors.html":{}},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"classes/LineAccessors.html":{},"classes/XYAccessors.html":{}}}],["ixygridconfig",{"_index":2049,"title":{"interfaces/IXYGridConfig.html":{}},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["ixyscales",{"_index":326,"title":{"interfaces/IXYScales.html":{}},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/MarkerUtils.html":{},"interfaces/ScalesIndex.html":{}}}],["izonecrosspoint",{"_index":1986,"title":{"interfaces/IZoneCrossPoint.html":{}},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"injectables/ThresholdsService.html":{}}}],["izoompluginconfiguration",{"_index":2869,"title":{"interfaces/IZoomPluginConfiguration.html":{}},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["j",{"_index":370,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["january",{"_index":4550,"title":{},"body":{"license.html":{}}}],["keep",{"_index":2761,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["keeping",{"_index":3974,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["keeps",{"_index":3465,"title":{},"body":{"classes/MappedValueProvider.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{}}}],["kept",{"_index":2255,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["key",{"_index":774,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"injectables/ChartCollectionService.html":{},"classes/EventBus.html":{},"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IElementPosition.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/MappedValueProvider.html":{},"classes/PathMarker.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialTooltipsPlugin.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialValueProvider.html":{},"classes/XYAccessors.html":{}}}],["keyby",{"_index":3131,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["keyby(seriesset",{"_index":3274,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["keyof",{"_index":335,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Grid.html":{}}}],["keys",{"_index":1951,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineAccessors.html":{},"classes/RadialAccessors.html":{},"classes/XYAccessors.html":{}}}],["kind",{"_index":1840,"title":{},"body":{"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{},"license.html":{}}}],["known",{"_index":2882,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["label",{"_index":2037,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"classes/InteractionLabelPlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/RichLegendTileComponent.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"miscellaneous/typealiases.html":{}}}],["label's",{"_index":2041,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/InteractionLabelPlugin.html":{}}}],["label.append(\"rect",{"_index":3052,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["label.append(\"text",{"_index":3054,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["labelcontent",{"_index":3021,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["labelgroup",{"_index":2061,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["labelgroup.append(\"text",{"_index":2585,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["labelgroup.attr(\"cursor",{"_index":2504,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["labelgroup.classed(\"tick",{"_index":2595,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["labelgroup.select(\".sample",{"_index":2582,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["labelgroup.selectall(\"g\").each(function",{"_index":2505,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["labelplugin",{"_index":4053,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["labelplugin.initialize",{"_index":4055,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["labels",{"_index":2036,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["labelwidth",{"_index":3039,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["language",{"_index":4499,"title":{},"body":{"index.html":{},"license.html":{}}}],["lasagna",{"_index":592,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["lasagna(>(this.container",{"_index":1729,"title":{},"body":{"classes/Grid.html":{}}}],["last",{"_index":3182,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{},"index.html":{}}}],["lastgridconfig",{"_index":3964,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["lastinteractionvaluespayload",{"_index":2989,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["lastspark",{"_index":4024,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["lasttextwidth",{"_index":2732,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["lasttickscalevalue",{"_index":2733,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["lastusedindex",{"_index":3952,"title":{},"body":{"classes/SequentialValueProvider.html":{}}}],["law",{"_index":4751,"title":{},"body":{"license.html":{}}}],["lawsuit",{"_index":4682,"title":{},"body":{"license.html":{}}}],["layer",{"_index":1638,"title":{},"body":{"classes/Grid.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["layer's",{"_index":2908,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["layer.selectall(`.${interactionlineplugin.layer_name}`).data(data",{"_index":3068,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["layer_name",{"_index":2891,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/ZoomPlugin.html":{}}}],["layering",{"_index":2054,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["layers",{"_index":3597,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["layout",{"_index":4542,"title":{"additional-documentation/layout.html":{}},"body":{"index.html":{}}}],["left",{"_index":114,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/GridConfig.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/MarkerUtils.html":{},"classes/RadialPopoverPlugin.html":{},"classes/XYGridConfig.html":{}}}],["leftgridlines",{"_index":2441,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["leftscaleid",{"_index":2348,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["leftscaleid(id",{"_index":2351,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["legal",{"_index":4566,"title":{},"body":{"license.html":{}}}],["legend",{"_index":482,"title":{"additional-documentation/advanced-usage/legend.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"classes/ChartAssistRenderStateData.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{},"injectables/ThresholdsService.html":{},"index.html":{},"overview.html":{},"additional-documentation/advanced-usage.html":{}}}],["legend's",{"_index":3087,"title":{},"body":{"components/LegendComponent.html":{},"classes/SparkChartAssist.html":{}}}],["legend'},{'name",{"_index":514,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["legend.component",{"_index":3352,"title":{},"body":{"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["legend.component.html",{"_index":3080,"title":{},"body":{"components/LegendComponent.html":{}}}],["legend/legend",{"_index":3656,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["legend/legend.component",{"_index":3660,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["legend_series_class_name",{"_index":3353,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["legendcomponent",{"_index":513,"title":{"components/LegendComponent.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{},"overview.html":{}}}],["legendinteractionassist",{"_index":3107,"title":{"classes/LegendInteractionAssist.html":{}},"body":{"classes/LegendInteractionAssist.html":{}}}],["legendinteractionassist(this",{"_index":3171,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["legendlabeldata$(chartseries",{"_index":3185,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["legendorientation",{"_index":3090,"title":{},"body":{"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"miscellaneous/enumerations.html":{}}}],["legendorientation.horizontal",{"_index":3380,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["legendorientation.vertical",{"_index":3091,"title":{},"body":{"components/LegendComponent.html":{}}}],["legendseries",{"_index":3297,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"components/RichLegendTileComponent.html":{}}}],["legendseries.length",{"_index":3300,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["legendseriescomponent",{"_index":515,"title":{"components/LegendSeriesComponent.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{},"overview.html":{}}}],["legendseriesset",{"_index":3157,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["length",{"_index":1690,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/UtilityService.html":{}}}],["lengthlimit",{"_index":362,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["level",{"_index":1875,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineAccessors.html":{},"classes/NoopAccessors.html":{}}}],["levels",{"_index":275,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["liability",{"_index":4768,"title":{},"body":{"license.html":{}}}],["liable",{"_index":4776,"title":{},"body":{"license.html":{}}}],["library",{"_index":1393,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"index.html":{}}}],["licensable",{"_index":4671,"title":{},"body":{"license.html":{}}}],["license",{"_index":4547,"title":{"license.html":{}},"body":{"license.html":{}}}],["license.you",{"_index":4726,"title":{},"body":{"license.html":{}}}],["licensed",{"_index":4828,"title":{},"body":{"license.html":{}}}],["licenses",{"_index":4687,"title":{},"body":{"license.html":{}}}],["licensor",{"_index":4561,"title":{},"body":{"license.html":{}}}],["light",{"_index":1080,"title":{},"body":{"classes/ChartPalette.html":{},"classes/TextColorProvider.html":{},"miscellaneous/variables.html":{}}}],["lighten",{"_index":3712,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["lighter",{"_index":4109,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["limit",{"_index":4175,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["limit.accessor",{"_index":4279,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["limit.zoneboundary",{"_index":4280,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["limitation",{"_index":4757,"title":{},"body":{"license.html":{}}}],["limitations",{"_index":4833,"title":{},"body":{"license.html":{}}}],["limited",{"_index":3813,"title":{},"body":{"classes/Renderer.html":{},"license.html":{}}}],["limiting",{"_index":4992,"title":{},"body":{"miscellaneous/variables.html":{}}}],["limits",{"_index":2038,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"injectables/ThresholdsService.html":{}}}],["limits[value",{"_index":4270,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["line",{"_index":149,"title":{"additional-documentation/chart-types/line.html":{}},"body":{"classes/AreaGridConfig.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopRenderer.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"index.html":{},"additional-documentation/chart-types.html":{}}}],["line.enter",{"_index":3073,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["line.exit().remove",{"_index":3077,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["line/line",{"_index":2080,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["lineaccessors",{"_index":2246,"title":{"classes/LineAccessors.html":{}},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["lineargaugethresholdsrenderer",{"_index":1939,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["linearscale",{"_index":2321,"title":{"classes/LinearScale.html":{}},"body":{"interfaces/IScaleSVGElement.html":{},"classes/LinearScale.html":{}}}],["linearscale).foreach((scale",{"_index":2360,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["linecap",{"_index":2099,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["linerenderer",{"_index":2081,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MissingDataLineRendererConfig.html":{},"injectables/ThresholdsService.html":{}}}],["linerenderer.getstrokestyledashed(1",{"_index":3549,"title":{},"body":{"classes/MissingDataLineRendererConfig.html":{},"injectables/ThresholdsService.html":{}}}],["lines",{"_index":2102,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IScaleSVGElement.html":{},"injectables/ThresholdsService.html":{}}}],["lineselectseriesinteractionstrategy",{"_index":2105,"title":{"classes/LineSelectSeriesInteractionStrategy.html":{}},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["link",{"_index":184,"title":{},"body":{"classes/AxisConfig.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/LineAccessors.html":{},"classes/NoopRenderer.html":{},"classes/Scale.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"license.html":{}}}],["list",{"_index":2140,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["listened",{"_index":1148,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["listening",{"_index":915,"title":{},"body":{"components/ChartComponent.html":{}}}],["listens",{"_index":1145,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{}}}],["lists",{"_index":4635,"title":{},"body":{"license.html":{}}}],["literal",{"_index":303,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionValues.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MappedValueProvider.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"classes/TextColorProvider.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["litigation",{"_index":4678,"title":{},"body":{"license.html":{}}}],["llc",{"_index":4827,"title":{},"body":{"license.html":{}}}],["localize",{"_index":3643,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["localizefn",{"_index":3644,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["locally",{"_index":2301,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["located",{"_index":3791,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["lodash/clone",{"_index":2308,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["lodash/clonedeep",{"_index":4002,"title":{},"body":{"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{}}}],["lodash/debounce",{"_index":873,"title":{},"body":{"components/ChartComponent.html":{}}}],["lodash/defaultsdeep",{"_index":1182,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/ZoomPlugin.html":{}}}],["lodash/each",{"_index":581,"title":{},"body":{"classes/Chart.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"classes/LegendInteractionAssist.html":{},"classes/Renderer.html":{}}}],["lodash/find",{"_index":2986,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["lodash/findindex",{"_index":312,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["lodash/get",{"_index":3831,"title":{},"body":{"classes/Renderer.html":{}}}],["lodash/identity",{"_index":4373,"title":{},"body":{"classes/UtilityService.html":{}}}],["lodash/isarray",{"_index":314,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartPalette.html":{},"classes/InteractionLabelPlugin.html":{}}}],["lodash/isempty",{"_index":1670,"title":{},"body":{"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendSeriesComponent.html":{},"classes/UtilityService.html":{},"classes/ZoomPlugin.html":{}}}],["lodash/isequal",{"_index":1306,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["lodash/isfunction",{"_index":1006,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["lodash/isnil",{"_index":1308,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITooltipNode.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{}}}],["lodash/isundefined",{"_index":316,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"injectables/ChartCollectionService.html":{},"classes/ChartDonutContentPlugin.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/SvgMarker.html":{},"classes/UtilityService.html":{},"classes/ZoomPlugin.html":{}}}],["lodash/keyby",{"_index":3132,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["lodash/pickby",{"_index":1184,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{}}}],["lodash/sortby",{"_index":4194,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["lodash/unionwith",{"_index":4196,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["lodash/uniq",{"_index":2310,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["lodash/values",{"_index":1185,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"classes/LegendInteractionAssist.html":{},"injectables/ThresholdsService.html":{}}}],["loggerservice",{"_index":4137,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["logic",{"_index":3499,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["look",{"_index":4526,"title":{},"body":{"index.html":{}}}],["loop",{"_index":2664,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["loss",{"_index":4783,"title":{},"body":{"license.html":{}}}],["losses",{"_index":4790,"title":{},"body":{"license.html":{}}}],["low",{"_index":4432,"title":{},"body":{"classes/UtilityService.html":{}}}],["lowc",{"_index":4086,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["lt",{"_index":2847,"title":{},"body":{"interfaces/ISimpleThresholdZone.html":{},"interfaces/ZoneCross.html":{}}}],["luminance",{"_index":4103,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["luminance.xml",{"_index":4113,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["luminance1",{"_index":4105,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["luminance2",{"_index":4107,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["m",{"_index":4919,"title":{},"body":{"miscellaneous/variables.html":{}}}],["m0",{"_index":4908,"title":{},"body":{"miscellaneous/variables.html":{}}}],["made",{"_index":4604,"title":{},"body":{"license.html":{}}}],["magenta",{"_index":2804,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["magic",{"_index":430,"title":{},"body":{"classes/BarStatusGridConfig.html":{}}}],["mailing",{"_index":4634,"title":{},"body":{"license.html":{}}}],["main",{"_index":4153,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["maintain",{"_index":1728,"title":{},"body":{"classes/Grid.html":{}}}],["maintenance",{"_index":4512,"title":{},"body":{"index.html":{}}}],["make",{"_index":3420,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{},"license.html":{}}}],["making",{"_index":4592,"title":{},"body":{"license.html":{}}}],["malfunction",{"_index":4788,"title":{},"body":{"license.html":{}}}],["managed",{"_index":4639,"title":{},"body":{"license.html":{}}}],["managemarker",{"_index":3484,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["managemarker(dataseries",{"_index":3495,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["management",{"_index":4577,"title":{},"body":{"license.html":{}}}],["manager",{"_index":589,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["manually",{"_index":1846,"title":{},"body":{"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"injectables/ThresholdsService.html":{},"classes/XYGridConfig.html":{},"classes/ZoomPlugin.html":{}}}],["many",{"_index":286,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["map",{"_index":2341,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/LegendInteractionAssist.html":{},"classes/RadialTooltipsPlugin.html":{},"injectables/ThresholdsService.html":{},"miscellaneous/variables.html":{}}}],["map((s",{"_index":4885,"title":{},"body":{"miscellaneous/variables.html":{}}}],["map(event",{"_index":3190,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["map(rs",{"_index":2395,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["map(s",{"_index":4884,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mappedvalueprovider",{"_index":3461,"title":{"classes/MappedValueProvider.html":{}},"body":{"classes/MappedValueProvider.html":{}}}],["margin",{"_index":122,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/DimensionConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["margin.left",{"_index":2573,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["margin.right",{"_index":2565,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["margin2",{"_index":2776,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["margin2.bottom",{"_index":2782,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["margin2.left",{"_index":2784,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["margin2.right",{"_index":2780,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["margin2.top",{"_index":2778,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["marginlocked",{"_index":1533,"title":{},"body":{"classes/DimensionConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["marginlocked.left",{"_index":2604,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["marginlocked.right",{"_index":2603,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["margins",{"_index":2023,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["marginsheight",{"_index":1572,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["marginswidth",{"_index":1567,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["marked",{"_index":4644,"title":{},"body":{"license.html":{}}}],["marker",{"_index":53,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"components/ChartMarkerComponent.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/LineAccessors.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SparkChartAssist.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["marker's",{"_index":3487,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["marker'},{'name",{"_index":506,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["marker.component",{"_index":3651,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["marker.component.html",{"_index":984,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["marker.component.less",{"_index":983,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["marker.component.ts",{"_index":982,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["marker.component.ts:16",{"_index":995,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["marker.component.ts:17",{"_index":993,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["marker.component.ts:18",{"_index":992,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["marker.component.ts:19",{"_index":996,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["marker.component.ts:21",{"_index":1001,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["marker.component.ts:23",{"_index":1002,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["marker.component.ts:24",{"_index":998,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["marker.component.ts:25",{"_index":1003,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["marker.component.ts:27",{"_index":990,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["marker.setcolor(color",{"_index":3521,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["marker.ts",{"_index":3665,"title":{},"body":{"classes/PathMarker.html":{},"classes/SvgMarker.html":{}}}],["marker.ts:14",{"_index":4067,"title":{},"body":{"classes/SvgMarker.html":{}}}],["marker.ts:18",{"_index":4068,"title":{},"body":{"classes/SvgMarker.html":{}}}],["marker.ts:26",{"_index":3673,"title":{},"body":{"classes/PathMarker.html":{}}}],["marker.ts:38",{"_index":3672,"title":{},"body":{"classes/PathMarker.html":{}}}],["marker.ts:8",{"_index":3671,"title":{},"body":{"classes/PathMarker.html":{}}}],["marker.ts:9",{"_index":3668,"title":{},"body":{"classes/PathMarker.html":{},"classes/SvgMarker.html":{}}}],["marker/chart",{"_index":981,"title":{},"body":{"components/ChartMarkerComponent.html":{},"modules/NuiChartsModule.html":{}}}],["marker_path_class",{"_index":3482,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markerinteraction",{"_index":2067,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["markerinteractionconfig",{"_index":3491,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markerinteractionconfig.clickable",{"_index":3518,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markerinteractionconfig.enabled",{"_index":3516,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markerprovider",{"_index":16,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["markers",{"_index":1881,"title":{"additional-documentation/advanced-usage/input-structure/markers.html":{}},"body":{"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/NoopAccessors.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SparkChartAssist.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/advanced-usage.html":{}}}],["markertarget",{"_index":3509,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markertarget).select(\"path\").classed(markerutils.marker_path_class",{"_index":3531,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markertarget).select(\"path\").node",{"_index":3532,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markertarget).selectall(\"g",{"_index":3528,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markertarget.attrs(attrs",{"_index":3522,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markertarget.empty",{"_index":3519,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markertarget.node",{"_index":3529,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markertarget.node()?.appendchild(utilservice.getsvgfromstring(marker.getsvg",{"_index":3530,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markertarget.on(\"click",{"_index":3527,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markertarget.on(\"mouseenter",{"_index":3523,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markertarget.on(\"mouseleave",{"_index":3526,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markerutils",{"_index":3478,"title":{"classes/MarkerUtils.html":{}},"body":{"classes/MarkerUtils.html":{}}}],["markerutils.default_marker_container_class",{"_index":3493,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markerutils.removemarker(container",{"_index":3508,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["marks",{"_index":4744,"title":{},"body":{"license.html":{}}}],["markup",{"_index":4065,"title":{},"body":{"classes/SvgMarker.html":{}}}],["match",{"_index":2247,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LineAccessors.html":{},"classes/RadialAccessors.html":{},"classes/XYAccessors.html":{}}}],["matches",{"_index":3464,"title":{},"body":{"classes/MappedValueProvider.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{}}}],["matching",{"_index":79,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"components/BasicLegendTileComponent.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"modules/NuiChartsModule.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"additional-documentation/layout.html":{},"additional-documentation/chart-types.html":{},"additional-documentation/chart-types/line.html":{},"additional-documentation/chart-types/bar.html":{},"additional-documentation/chart-types/bar/bucketed-bar.html":{},"additional-documentation/chart-types/bar/status.html":{},"additional-documentation/chart-types/bar/waterfall.html":{},"additional-documentation/chart-types/area.html":{},"additional-documentation/chart-types/pie-and-donut.html":{},"additional-documentation/chart-types/spark.html":{},"additional-documentation/plugins.html":{},"additional-documentation/plugins/tooltips.html":{},"additional-documentation/plugins/popovers.html":{},"additional-documentation/thresholds.html":{},"additional-documentation/timeframe-selection.html":{},"additional-documentation/advanced-usage.html":{},"additional-documentation/advanced-usage/chart.html":{},"additional-documentation/advanced-usage/legend.html":{},"additional-documentation/advanced-usage/input-structure.html":{},"additional-documentation/advanced-usage/input-structure/data.html":{},"additional-documentation/advanced-usage/input-structure/colors.html":{},"additional-documentation/advanced-usage/input-structure/markers.html":{},"additional-documentation/advanced-usage/events.html":{},"additional-documentation/advanced-usage/grid.html":{},"additional-documentation/advanced-usage/scales.html":{},"additional-documentation/advanced-usage/scales/domains.html":{},"additional-documentation/advanced-usage/scales/formatters.html":{}}}],["math.abs(first",{"_index":2775,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["math.abs(test",{"_index":4397,"title":{},"body":{"classes/UtilityService.html":{}}}],["math.abs(topofrange",{"_index":2743,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["math.ceil(((datapoint?.position?.x",{"_index":3538,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["math.ceil(((datapoint?.position?.y",{"_index":3542,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["math.cos(a",{"_index":3784,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["math.floor(dt",{"_index":4408,"title":{},"body":{"classes/UtilityService.html":{}}}],["math.max(...valuesarray.map(d",{"_index":1238,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["math.max(0",{"_index":233,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["math.max(automaticdomain[1",{"_index":4998,"title":{},"body":{"miscellaneous/variables.html":{}}}],["math.max(value",{"_index":1570,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["math.max.apply(null",{"_index":2677,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["math.min(...valarr.map(d",{"_index":3746,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["math.min(...valuesarray.map(d",{"_index":1225,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["math.min(0",{"_index":230,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["math.min(automaticdomain[0",{"_index":4996,"title":{},"body":{"miscellaneous/variables.html":{}}}],["math.min(clientrect.height",{"_index":1042,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["math.min(clientrect.width",{"_index":1039,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["math.min(prev",{"_index":963,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["math.min(scales.y.range()[0",{"_index":2837,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["math.min(this.levels",{"_index":363,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["math.pi",{"_index":3781,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["math.random",{"_index":4406,"title":{},"body":{"classes/UtilityService.html":{}}}],["math.round(angle",{"_index":3809,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["math.sin(a",{"_index":3785,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["math.sqrt(2",{"_index":979,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["mathias",{"_index":4413,"title":{},"body":{"classes/UtilityService.html":{}}}],["matrix",{"_index":671,"title":{},"body":{"classes/Chart.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":1913,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["maxbottomwidth",{"_index":2555,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["maxleftwidth",{"_index":2553,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["maxrightwidth",{"_index":2551,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["maxsize",{"_index":988,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["maxthickness",{"_index":1932,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/variables.html":{}}}],["maxwidth",{"_index":2044,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["maybe",{"_index":2144,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["mean",{"_index":4558,"title":{},"body":{"license.html":{}}}],["means",{"_index":3585,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"license.html":{}}}],["measurement",{"_index":2648,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["measurementcomparison",{"_index":2652,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["measuretype",{"_index":2651,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["mechanical",{"_index":4597,"title":{},"body":{"license.html":{}}}],["mechanism",{"_index":2055,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["media",{"_index":4602,"title":{},"body":{"license.html":{}}}],["medium",{"_index":4692,"title":{},"body":{"license.html":{}}}],["meet",{"_index":4693,"title":{},"body":{"license.html":{}}}],["memberof",{"_index":3674,"title":{},"body":{"classes/PathMarker.html":{}}}],["merchantability",{"_index":4758,"title":{},"body":{"license.html":{}}}],["merely",{"_index":4618,"title":{},"body":{"license.html":{}}}],["merge(line",{"_index":3075,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["mergeddomains",{"_index":5000,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mergeddomains[0",{"_index":5007,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mergedomains(domains",{"_index":4990,"title":{},"body":{"miscellaneous/variables.html":{}}}],["metadata",{"_index":484,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{},"injectables/ThresholdsService.html":{}}}],["method",{"_index":1652,"title":{},"body":{"classes/Grid.html":{},"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/IXYScales.html":{},"classes/LegendInteractionAssist.html":{},"classes/MarkerUtils.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{}}}],["methods",{"_index":269,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"injectables/ChartCollectionService.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IScale.html":{},"interfaces/IValueProvider.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SparkChartAssist.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{}}}],["mid",{"_index":4436,"title":{},"body":{"classes/UtilityService.html":{}}}],["middle",{"_index":3036,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["midpoint",{"_index":1136,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["min",{"_index":1912,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["mind",{"_index":2149,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LineAccessors.html":{},"interfaces/ScalesIndex.html":{}}}],["minimum",{"_index":2121,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["minute",{"_index":4969,"title":{},"body":{"miscellaneous/variables.html":{}}}],["miscellaneou",{"_index":4975,"title":{},"body":{"miscellaneous/variables.html":{}}}],["miscellaneous",{"_index":4489,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":3547,"title":{},"body":{"classes/MissingDataLineRendererConfig.html":{},"injectables/ThresholdsService.html":{}}}],["missingdatalinerendererconfig",{"_index":3545,"title":{"classes/MissingDataLineRendererConfig.html":{}},"body":{"classes/MissingDataLineRendererConfig.html":{}}}],["mockups",{"_index":2949,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["mode",{"_index":3088,"title":{},"body":{"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{}}}],["modifications",{"_index":4593,"title":{},"body":{"license.html":{}}}],["modified",{"_index":4699,"title":{},"body":{"license.html":{}}}],["modify",{"_index":4721,"title":{},"body":{"license.html":{}}}],["modifying",{"_index":4725,"title":{},"body":{"license.html":{}}}],["modifyzerolines",{"_index":2437,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["modifyzerolines(gridselection",{"_index":2445,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["module",{"_index":3627,"title":{"modules/NuiChartsModule.html":{}},"body":{"modules/NuiChartsModule.html":{},"overview.html":{}}}],["modules",{"_index":3629,"title":{"modules.html":{}},"body":{"modules/NuiChartsModule.html":{},"modules.html":{}}}],["more",{"_index":1996,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/SparkChartAssist.html":{},"index.html":{},"license.html":{}}}],["mouse",{"_index":1895,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["mouse_active",{"_index":4877,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mouse_active_event",{"_index":3135,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{},"miscellaneous/variables.html":{}}}],["mousedown",{"_index":1900,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/enumerations.html":{}}}],["mouseenter",{"_index":1903,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/enumerations.html":{}}}],["mouseinteractivearea",{"_index":2313,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/MarkerUtils.html":{}}}],["mouseinteractivearea(this.getlasagna().getcontainer",{"_index":2410,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["mouseinteractiveareaplugin",{"_index":2326,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["mouseleave",{"_index":1904,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/enumerations.html":{}}}],["mousemove",{"_index":1906,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/enumerations.html":{}}}],["mouseup",{"_index":1907,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/enumerations.html":{}}}],["movement",{"_index":1905,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["moves",{"_index":2881,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["moving",{"_index":346,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["multi",{"_index":1885,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"modules/NuiChartsModule.html":{},"classes/Renderer.html":{},"dependencies.html":{}}}],["multiple",{"_index":1726,"title":{},"body":{"classes/Grid.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{}}}],["n",{"_index":2690,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["name",{"_index":21,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"components/BasicLegendTileComponent.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"license.html":{}}}],["names",{"_index":4743,"title":{},"body":{"license.html":{}}}],["narrow",{"_index":2145,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["nativeevent",{"_index":3864,"title":{},"body":{"classes/Renderer.html":{}}}],["nearest",{"_index":1991,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["nearestindex",{"_index":373,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["necessarily",{"_index":4672,"title":{},"body":{"license.html":{}}}],["necessary",{"_index":2591,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["need",{"_index":343,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Chart.html":{},"classes/Grid.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["needed",{"_index":1252,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/Grid.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IScaleSVGElement.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["needle",{"_index":4352,"title":{},"body":{"classes/UtilityService.html":{}}}],["needs",{"_index":377,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"components/ChartMarkerComponent.html":{}}}],["negative",{"_index":3584,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["negligence",{"_index":4771,"title":{},"body":{"license.html":{}}}],["negligent",{"_index":4774,"title":{},"body":{"license.html":{}}}],["never",{"_index":2756,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["new",{"_index":110,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newbottommargin",{"_index":2718,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["newtopmargin",{"_index":2715,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["next",{"_index":825,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/UtilityService.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["next.getboundingclientrect",{"_index":2673,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["next.invert(x",{"_index":2975,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["next.scaleid",{"_index":2404,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["ngaftercontentinit",{"_index":896,"title":{},"body":{"components/ChartComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["ngafterviewinit",{"_index":832,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartMarkerComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["ngfor",{"_index":3995,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["ngmodule",{"_index":3640,"title":{},"body":{"modules/NuiChartsModule.html":{},"index.html":{}}}],["ngonchanges(changes",{"_index":888,"title":{},"body":{"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/LegendComponent.html":{}}}],["ngondestroy",{"_index":907,"title":{},"body":{"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/LegendComponent.html":{}}}],["ngoninit",{"_index":884,"title":{},"body":{"components/ChartComponent.html":{},"components/ChartPopoverComponent.html":{}}}],["ngzone",{"_index":863,"title":{},"body":{"components/ChartComponent.html":{}}}],["nice",{"_index":1818,"title":{},"body":{"classes/Grid.html":{}}}],["nine",{"_index":4905,"title":{},"body":{"miscellaneous/variables.html":{}}}],["node",{"_index":1223,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialPopoverPlugin.html":{}}}],["node.radius",{"_index":1399,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["node.x",{"_index":1411,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["node.y",{"_index":1410,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["node_modules/@nova",{"_index":4534,"title":{},"body":{"index.html":{}}}],["nodes",{"_index":1379,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["non",{"_index":1603,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{},"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/PathMarker.html":{},"interfaces/ScalesIndex.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["none",{"_index":2946,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/ZoomPlugin.html":{}}}],["noopaccessors",{"_index":2268,"title":{"classes/NoopAccessors.html":{}},"body":{"interfaces/INoopAccessors.html":{},"classes/NoopAccessors.html":{}}}],["nooprenderer",{"_index":3552,"title":{"classes/NoopRenderer.html":{}},"body":{"classes/NoopRenderer.html":{}}}],["noopscale",{"_index":3607,"title":{"classes/NoopScale.html":{}},"body":{"classes/NoopScale.html":{}}}],["normalized_domain",{"_index":2134,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{},"miscellaneous/variables.html":{}}}],["normally",{"_index":4717,"title":{},"body":{"license.html":{}}}],["note",{"_index":2018,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LegendInteractionAssist.html":{},"classes/ZoomPlugin.html":{}}}],["nothing",{"_index":4734,"title":{},"body":{"license.html":{}}}],["notice",{"_index":4606,"title":{},"body":{"license.html":{}}}],["notices",{"_index":4702,"title":{},"body":{"license.html":{}}}],["notifying",{"_index":3100,"title":{},"body":{"components/LegendComponent.html":{}}}],["notwithstanding",{"_index":4733,"title":{},"body":{"license.html":{}}}],["nova",{"_index":91,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"components/ChartPopoverComponent.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/LinearScale.html":{},"classes/MarkerUtils.html":{},"modules/NuiChartsModule.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"dependencies.html":{},"index.html":{}}}],["nui",{"_index":488,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"classes/Chart.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IXYGridConfig.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"classes/PathMarker.html":{},"components/RichLegendTileComponent.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYGridConfig.html":{},"miscellaneous/variables.html":{}}}],["nuichartcollectionid",{"_index":521,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["nuichartsmodule",{"_index":3628,"title":{"modules/NuiChartsModule.html":{}},"body":{"modules/NuiChartsModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["nuicommonmodule",{"_index":3646,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["nuiiconmodule",{"_index":3647,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["nuipopovermodule",{"_index":3648,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["null",{"_index":222,"title":{},"body":{"classes/BarAccessors.html":{},"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/NoopScale.html":{},"interfaces/ScalesIndex.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":164,"title":{},"body":{"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/IStackMetadata.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialValueProvider.html":{},"classes/SparkChartAssist.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["number.isfinite(d",{"_index":2274,"title":{},"body":{"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"classes/RadialAccessors.html":{}}}],["number.isfinite(value",{"_index":229,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["numbers",{"_index":1391,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"injectables/ThresholdsService.html":{}}}],["numeric",{"_index":2153,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/IXYScales.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"interfaces/ZoneCross.html":{},"miscellaneous/variables.html":{}}}],["object",{"_index":1054,"title":{},"body":{"classes/ChartPalette.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/PieRenderer.html":{},"classes/SideIndicatorAccessors.html":{},"license.html":{}}}],["object.assign",{"_index":1506,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{},"classes/XYGridConfig.html":{}}}],["object.keys(attrs",{"_index":3681,"title":{},"body":{"classes/PathMarker.html":{}}}],["object.keys(borderconfigs",{"_index":1761,"title":{},"body":{"classes/Grid.html":{}}}],["object.keys(datapoints).foreach(seriesid",{"_index":4044,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["object.keys(event.payload).map(key",{"_index":3245,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["object.keys(filterscales",{"_index":3843,"title":{},"body":{"classes/Renderer.html":{}}}],["object.keys(fixeddomains).reduce((result",{"_index":4982,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.keys(this._scales).foreach((scalekey",{"_index":2355,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["object.keys(this.seriesgroups",{"_index":3295,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["object.keys(tooltippositions).map(seriesid",{"_index":1380,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["objects",{"_index":1944,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/SparkChartAssist.html":{}}}],["obligations",{"_index":4799,"title":{},"body":{"license.html":{}}}],["observable",{"_index":3133,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["observer",{"_index":875,"title":{},"body":{"components/ChartComponent.html":{},"dependencies.html":{}}}],["obtain",{"_index":4830,"title":{},"body":{"license.html":{}}}],["of((chartseries.data",{"_index":3199,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["of(highlightdata.data",{"_index":3198,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["offer",{"_index":4667,"title":{},"body":{"license.html":{}}}],["offset",{"_index":1133,"title":{},"body":{"components/ChartPopoverComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/InteractionLabelPlugin.html":{}}}],["offsetparentbbox",{"_index":1474,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["offsetparentbbox.left",{"_index":1478,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["offsetparentbbox.top",{"_index":1480,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["offsetx",{"_index":1447,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["offsety",{"_index":1450,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["ok",{"_index":4892,"title":{},"body":{"miscellaneous/variables.html":{}}}],["old",{"_index":2755,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["oldmargin",{"_index":2613,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["oldouterheight",{"_index":2695,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["oldouterwidth",{"_index":2693,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["omit",{"_index":3410,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["on(\"click",{"_index":3415,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["on(\"mouseenter",{"_index":3409,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["on(\"mouseleave",{"_index":3414,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["on(\"pointerdown",{"_index":2936,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["on(\"pointerup",{"_index":2938,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["once",{"_index":2165,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["onchanges",{"_index":855,"title":{},"body":{"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/LegendComponent.html":{}}}],["onclick",{"_index":3382,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["ondestroy",{"_index":854,"title":{},"body":{"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/LegendComponent.html":{}}}],["one",{"_index":741,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"components/ChartComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/RadialPopoverPlugin.html":{},"classes/SparkChartAssist.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["ones",{"_index":3222,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["oneseriesmode",{"_index":3299,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["onevent",{"_index":3165,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["oninit",{"_index":852,"title":{},"body":{"components/ChartComponent.html":{},"components/ChartPopoverComponent.html":{}}}],["onsetseriesstates(renderstatedata",{"_index":729,"title":{},"body":{"classes/Chart.html":{}}}],["onupdate(seriesset",{"_index":692,"title":{},"body":{"classes/Chart.html":{}}}],["onupdatedimensions",{"_index":699,"title":{},"body":{"classes/Chart.html":{}}}],["oops",{"_index":1084,"title":{},"body":{"classes/ChartPalette.html":{}}}],["opacity",{"_index":1279,"title":{},"body":{"components/ChartTooltipComponent.html":{},"interfaces/IScaleSVGElement.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["open",{"_index":1176,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{},"miscellaneous/variables.html":{}}}],["opening",{"_index":1262,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["openpopoversubject",{"_index":1157,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["opentimeout",{"_index":1319,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["opentooltips",{"_index":1286,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["opposite",{"_index":3771,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["option",{"_index":1841,"title":{},"body":{"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["optional",{"_index":22,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IScale.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{}}}],["optionally",{"_index":2109,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["options",{"_index":1053,"title":{},"body":{"classes/ChartPalette.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["options).format(date",{"_index":4973,"title":{},"body":{"miscellaneous/variables.html":{}}}],["options.backgroundopacity",{"_index":1092,"title":{},"body":{"classes/ChartPalette.html":{}}}],["order",{"_index":1253,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/ZoomPlugin.html":{}}}],["orientation",{"_index":441,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYScales.html":{},"components/LegendComponent.html":{},"classes/RadialTooltipsPlugin.html":{},"interfaces/ScalesIndex.html":{}}}],["origin",{"_index":3790,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"license.html":{}}}],["original",{"_index":4615,"title":{},"body":{"license.html":{}}}],["originx",{"_index":1442,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["originy",{"_index":1443,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["otherwise",{"_index":379,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LegendInteractionAssist.html":{},"interfaces/ScalesIndex.html":{},"injectables/ThresholdsService.html":{},"license.html":{}}}],["out",{"_index":2518,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"modules/NuiChartsModule.html":{},"classes/XYGridConfig.html":{},"license.html":{},"overview.html":{}}}],["outerheight",{"_index":1534,"title":{},"body":{"classes/DimensionConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["outerheight(value",{"_index":1545,"title":{},"body":{"classes/DimensionConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["outerradius",{"_index":3778,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["outerwidth",{"_index":1535,"title":{},"body":{"classes/DimensionConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["outerwidth(value",{"_index":1549,"title":{},"body":{"classes/DimensionConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["output",{"_index":1118,"title":{},"body":{"components/ChartPopoverComponent.html":{},"components/LegendSeriesComponent.html":{}}}],["outputs",{"_index":1106,"title":{},"body":{"components/ChartPopoverComponent.html":{},"components/LegendSeriesComponent.html":{}}}],["outside",{"_index":347,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Grid.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["outstanding",{"_index":4584,"title":{},"body":{"license.html":{}}}],["over",{"_index":1256,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/LegendInteractionAssist.html":{}}}],["overall",{"_index":3094,"title":{},"body":{"components/LegendComponent.html":{}}}],["overflow",{"_index":181,"title":{},"body":{"classes/AxisConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"miscellaneous/typealiases.html":{}}}],["overflowhandler",{"_index":168,"title":{},"body":{"classes/AxisConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["overlap",{"_index":1376,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITooltipNode.html":{}}}],["overlay",{"_index":3795,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["overlaymodule",{"_index":3639,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["overlaypositions",{"_index":1433,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["overlaysetup",{"_index":1452,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["overlayx",{"_index":1444,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["overlayy",{"_index":1445,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["overridden",{"_index":4505,"title":{},"body":{"index.html":{}}}],["override",{"_index":722,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{}}}],["overview",{"_index":4496,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["owner",{"_index":4563,"title":{},"body":{"license.html":{}}}],["ownership",{"_index":4580,"title":{},"body":{"license.html":{}}}],["p",{"_index":337,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Chart.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IXYScales.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"interfaces/ScalesIndex.html":{},"classes/SideIndicatorAccessors.html":{}}}],["p.destroy",{"_index":688,"title":{},"body":{"classes/Chart.html":{}}}],["p.initialize",{"_index":684,"title":{},"body":{"classes/Chart.html":{}}}],["p.update",{"_index":698,"title":{},"body":{"classes/Chart.html":{}}}],["p.updatedimensions",{"_index":717,"title":{},"body":{"classes/Chart.html":{}}}],["package",{"_index":4480,"title":{"dependencies.html":{}},"body":{}}],["package.json",{"_index":4519,"title":{},"body":{"index.html":{}}}],["packagr/issues/641",{"_index":3836,"title":{},"body":{"classes/Renderer.html":{}}}],["packagr/ng",{"_index":3835,"title":{},"body":{"classes/Renderer.html":{}}}],["padding",{"_index":155,"title":{},"body":{"classes/AxisConfig.html":{},"classes/DimensionConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/InteractionLabelPlugin.html":{}}}],["padding.bottom",{"_index":2457,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["padding.right",{"_index":2452,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["padding.top",{"_index":2458,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["page",{"_index":4821,"title":{"additional-documentation/layout.html":{},"additional-documentation/chart-types.html":{},"additional-documentation/chart-types/line.html":{},"additional-documentation/chart-types/bar.html":{},"additional-documentation/chart-types/bar/bucketed-bar.html":{},"additional-documentation/chart-types/bar/status.html":{},"additional-documentation/chart-types/bar/waterfall.html":{},"additional-documentation/chart-types/area.html":{},"additional-documentation/chart-types/pie-and-donut.html":{},"additional-documentation/chart-types/spark.html":{},"additional-documentation/plugins.html":{},"additional-documentation/plugins/tooltips.html":{},"additional-documentation/plugins/popovers.html":{},"additional-documentation/thresholds.html":{},"additional-documentation/timeframe-selection.html":{},"additional-documentation/advanced-usage.html":{},"additional-documentation/advanced-usage/chart.html":{},"additional-documentation/advanced-usage/legend.html":{},"additional-documentation/advanced-usage/input-structure.html":{},"additional-documentation/advanced-usage/input-structure/data.html":{},"additional-documentation/advanced-usage/input-structure/colors.html":{},"additional-documentation/advanced-usage/input-structure/markers.html":{},"additional-documentation/advanced-usage/events.html":{},"additional-documentation/advanced-usage/grid.html":{},"additional-documentation/advanced-usage/scales.html":{},"additional-documentation/advanced-usage/scales/domains.html":{},"additional-documentation/advanced-usage/scales/formatters.html":{}},"body":{"license.html":{}}}],["palette",{"_index":3167,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["palette.ts",{"_index":1046,"title":{},"body":{"classes/ChartPalette.html":{}}}],["palette.ts:14",{"_index":1055,"title":{},"body":{"classes/ChartPalette.html":{}}}],["palette.ts:31",{"_index":1058,"title":{},"body":{"classes/ChartPalette.html":{}}}],["palette.ts:35",{"_index":1060,"title":{},"body":{"classes/ChartPalette.html":{}}}],["palette.ts:39",{"_index":1062,"title":{},"body":{"classes/ChartPalette.html":{}}}],["param",{"_index":334,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartAssistRenderStateData.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/MarkerUtils.html":{},"classes/PathMarker.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{}}}],["parameter",{"_index":2656,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"injectables/ThresholdsService.html":{}}}],["parameters",{"_index":19,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartMarker.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IScale.html":{},"interfaces/IValueProvider.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{}}}],["parent",{"_index":1222,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/RadialPopoverPlugin.html":{}}}],["parentid",{"_index":3288,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["parsefloat(transformval.slice(transformval.indexof",{"_index":2687,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["parseint(ticks",{"_index":196,"title":{},"body":{"classes/AxisConfig.html":{}}}],["part",{"_index":1877,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"license.html":{}}}],["partial",{"_index":709,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/LegendInteractionAssist.html":{},"classes/Renderer.html":{}}}],["particular",{"_index":4760,"title":{},"body":{"license.html":{}}}],["parts",{"_index":3762,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["party",{"_index":4716,"title":{},"body":{"license.html":{}}}],["pass",{"_index":1653,"title":{},"body":{"classes/Grid.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["passing",{"_index":2302,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["patent",{"_index":4665,"title":{},"body":{"license.html":{}}}],["path",{"_index":1645,"title":{},"body":{"classes/Grid.html":{},"classes/MarkerUtils.html":{},"classes/PathMarker.html":{},"classes/Renderer.html":{}}}],["path's",{"_index":2076,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["path.getboundingclientrect",{"_index":3536,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["path.setattribute(\"x",{"_index":3537,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["path.setattribute(\"y",{"_index":3541,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["path_",{"_index":1642,"title":{},"body":{"classes/Grid.html":{}}}],["path__outline",{"_index":3677,"title":{},"body":{"classes/PathMarker.html":{}}}],["pathmarker",{"_index":3663,"title":{"classes/PathMarker.html":{}},"body":{"classes/PathMarker.html":{}}}],["pathrect",{"_index":3535,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["pathrect.height",{"_index":3543,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["pathrect.width",{"_index":3539,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["patterns",{"_index":4501,"title":{},"body":{"index.html":{}}}],["payload",{"_index":789,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["peer",{"_index":4482,"title":{},"body":{"dependencies.html":{}}}],["pending",{"_index":2342,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["pentagon",{"_index":4952,"title":{},"body":{"miscellaneous/variables.html":{}}}],["per",{"_index":2948,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"injectables/ThresholdsService.html":{},"classes/ZoomPlugin.html":{}}}],["percent",{"_index":4582,"title":{},"body":{"license.html":{}}}],["percentage",{"_index":1925,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["perform",{"_index":1975,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"license.html":{}}}],["performs",{"_index":4355,"title":{},"body":{"classes/UtilityService.html":{}}}],["period",{"_index":2746,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["periods",{"_index":4149,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["permission",{"_index":4741,"title":{},"body":{"license.html":{}}}],["permissions",{"_index":4589,"title":{},"body":{"license.html":{}}}],["perpetual",{"_index":4653,"title":{},"body":{"license.html":{}}}],["pertain",{"_index":4708,"title":{},"body":{"license.html":{}}}],["physically",{"_index":2931,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["pickby",{"_index":1183,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{}}}],["pickby(datapoints",{"_index":1242,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{}}}],["pie",{"_index":1583,"title":{"additional-documentation/chart-types/pie-and-donut.html":{}},"body":{"classes/DonutGaugeRenderingUtil.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"index.html":{},"additional-documentation/chart-types.html":{}}}],["pie().sort(null",{"_index":1591,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["piearcdata",{"_index":3772,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["piearcdata.endangle",{"_index":3783,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["piearcdata.startangle",{"_index":3782,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["pieces",{"_index":4504,"title":{},"body":{"index.html":{}}}],["piegenerator",{"_index":1590,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["piegenerator(arcdata",{"_index":1593,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["pierenderer",{"_index":3688,"title":{"classes/PieRenderer.html":{}},"body":{"classes/PieRenderer.html":{}}}],["pipe",{"_index":3188,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["pipe(takeuntil(this.destroy",{"_index":1460,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/ZoomPlugin.html":{}}}],["pixel",{"_index":1993,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["pixels",{"_index":2013,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["placed",{"_index":1438,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["placement",{"_index":1692,"title":{},"body":{"classes/Grid.html":{},"classes/InteractionLabelPlugin.html":{}}}],["places",{"_index":4191,"title":{},"body":{"injectables/ThresholdsService.html":{},"license.html":{}}}],["play",{"_index":4541,"title":{},"body":{"index.html":{}}}],["playing",{"_index":1392,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["plotted",{"_index":2867,"title":{},"body":{"interfaces/IXYDataAccessors.html":{},"classes/XYAccessors.html":{}}}],["plugin",{"_index":476,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/SparkChartAssist.html":{},"classes/ZoomPlugin.html":{}}}],["plugin's",{"_index":1974,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["plugin.chart",{"_index":616,"title":{},"body":{"classes/Chart.html":{}}}],["plugin.ts",{"_index":436,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["plugin.ts:108",{"_index":4478,"title":{},"body":{"classes/ZoomPlugin.html":{}}}],["plugin.ts:11",{"_index":1099,"title":{},"body":{"classes/ChartPlugin.html":{}}}],["plugin.ts:126",{"_index":1424,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{}}}],["plugin.ts:13",{"_index":1100,"title":{},"body":{"classes/ChartPlugin.html":{}}}],["plugin.ts:131",{"_index":1426,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"classes/InteractionLabelPlugin.html":{}}}],["plugin.ts:14",{"_index":953,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["plugin.ts:15",{"_index":1097,"title":{},"body":{"classes/ChartPlugin.html":{}}}],["plugin.ts:17",{"_index":952,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["plugin.ts:20",{"_index":3057,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["plugin.ts:24",{"_index":956,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["plugin.ts:26",{"_index":2983,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["plugin.ts:27",{"_index":3059,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["plugin.ts:28",{"_index":1167,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/InteractionLabelPlugin.html":{},"classes/ZoomPlugin.html":{}}}],["plugin.ts:29",{"_index":4477,"title":{},"body":{"classes/ZoomPlugin.html":{}}}],["plugin.ts:3",{"_index":1095,"title":{},"body":{"classes/ChartPlugin.html":{}}}],["plugin.ts:30",{"_index":1178,"title":{},"body":{"classes/ChartPopoverPlugin.html":{}}}],["plugin.ts:32",{"_index":1175,"title":{},"body":{"classes/ChartPopoverPlugin.html":{}}}],["plugin.ts:33",{"_index":2982,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["plugin.ts:34",{"_index":1162,"title":{},"body":{"classes/ChartPopoverPlugin.html":{}}}],["plugin.ts:36",{"_index":1177,"title":{},"body":{"classes/ChartPopoverPlugin.html":{}}}],["plugin.ts:39",{"_index":2984,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/ZoomPlugin.html":{}}}],["plugin.ts:40",{"_index":955,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["plugin.ts:41",{"_index":4476,"title":{},"body":{"classes/ZoomPlugin.html":{}}}],["plugin.ts:43",{"_index":1174,"title":{},"body":{"classes/ChartPopoverPlugin.html":{}}}],["plugin.ts:49",{"_index":1161,"title":{},"body":{"classes/ChartPopoverPlugin.html":{}}}],["plugin.ts:5",{"_index":449,"title":{},"body":{"classes/BarTooltipsPlugin.html":{}}}],["plugin.ts:51",{"_index":1166,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ZoomPlugin.html":{}}}],["plugin.ts:56",{"_index":1180,"title":{},"body":{"classes/ChartPopoverPlugin.html":{}}}],["plugin.ts:63",{"_index":1420,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{}}}],["plugin.ts:65",{"_index":1419,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{}}}],["plugin.ts:68",{"_index":1179,"title":{},"body":{"classes/ChartPopoverPlugin.html":{}}}],["plugin.ts:7",{"_index":1096,"title":{},"body":{"classes/ChartPlugin.html":{}}}],["plugin.ts:70",{"_index":1423,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{}}}],["plugin.ts:75",{"_index":1421,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{}}}],["plugin.ts:81",{"_index":1416,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{}}}],["plugin.ts:88",{"_index":1422,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{}}}],["plugin.ts:9",{"_index":1098,"title":{},"body":{"classes/ChartPlugin.html":{}}}],["plugin.ts:90",{"_index":4479,"title":{},"body":{"classes/ZoomPlugin.html":{}}}],["plugin.ts:94",{"_index":3058,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["plugin.ts:98",{"_index":1425,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{}}}],["pluginindex",{"_index":618,"title":{},"body":{"classes/Chart.html":{}}}],["plugins",{"_index":552,"title":{"additional-documentation/plugins.html":{}},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{},"index.html":{},"additional-documentation/plugins.html":{}}}],["plugins.push(new",{"_index":2409,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["plugins/interaction/interaction",{"_index":2324,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/SparkChartAssist.html":{}}}],["plugins/mouse",{"_index":2327,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["plugins/render",{"_index":601,"title":{},"body":{"classes/Chart.html":{}}}],["plugins/types",{"_index":4374,"title":{},"body":{"classes/UtilityService.html":{}}}],["plus",{"_index":2025,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["point",{"_index":247,"title":{},"body":{"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarTooltipsPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["point(s",{"_index":1169,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["pointer",{"_index":1790,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/ZoomPlugin.html":{}}}],["pointerevents",{"_index":2119,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["points",{"_index":455,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DonutGaugeRenderingUtil.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineAccessors.html":{},"classes/RadialTooltipsPlugin.html":{},"injectables/ThresholdsService.html":{},"miscellaneous/variables.html":{}}}],["polyfill",{"_index":876,"title":{},"body":{"components/ChartComponent.html":{},"dependencies.html":{}}}],["popover",{"_index":1103,"title":{},"body":{"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["popover's",{"_index":1134,"title":{},"body":{"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["popover'},{'name",{"_index":508,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["popover.component",{"_index":3652,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["popover.component.html",{"_index":1105,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["popover.component.less",{"_index":1104,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["popover.component.ts",{"_index":1102,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["popover.component.ts:30",{"_index":1109,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["popover.component.ts:32",{"_index":1111,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["popover.component.ts:34",{"_index":1113,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["popover.component.ts:36",{"_index":1117,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["popover.component.ts:39",{"_index":1107,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["popover.component.ts:41",{"_index":1114,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["popover/chart",{"_index":1101,"title":{},"body":{"components/ChartPopoverComponent.html":{},"modules/NuiChartsModule.html":{}}}],["popovercomponent",{"_index":1115,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["popovers",{"_index":1193,"title":{"additional-documentation/plugins/popovers.html":{}},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"index.html":{},"additional-documentation/plugins.html":{}}}],["popovertargetposition",{"_index":1158,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["populate",{"_index":3181,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["portion",{"_index":4064,"title":{},"body":{"classes/SvgMarker.html":{}}}],["position",{"_index":935,"title":{},"body":{"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["position.height",{"_index":1388,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["position.left",{"_index":1140,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["position.top",{"_index":1142,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["position.width",{"_index":1138,"title":{},"body":{"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["position.x",{"_index":1385,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["position.y",{"_index":1386,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["positioned",{"_index":1436,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"injectables/ThresholdsService.html":{},"miscellaneous/variables.html":{}}}],["positioning",{"_index":1431,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["positions",{"_index":452,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["possibility",{"_index":4792,"title":{},"body":{"license.html":{}}}],["possible",{"_index":3183,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"injectables/ThresholdsService.html":{}}}],["potential",{"_index":2258,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{},"index.html":{}}}],["potentially",{"_index":3145,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["power",{"_index":4573,"title":{},"body":{"license.html":{}}}],["pre",{"_index":86,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/LegendInteractionAssist.html":{}}}],["preferred",{"_index":4591,"title":{},"body":{"license.html":{}}}],["prefix",{"_index":1644,"title":{},"body":{"classes/Grid.html":{}}}],["prepare",{"_index":4661,"title":{},"body":{"license.html":{}}}],["preprocess",{"_index":1968,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{}}}],["prerequisite",{"_index":2110,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["prescribed",{"_index":1946,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["present",{"_index":737,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{}}}],["prev",{"_index":966,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{},"interfaces/IScaleSVGElement.html":{}}}],["prevent",{"_index":1010,"title":{},"body":{"components/ChartMarkerComponent.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["previous",{"_index":1370,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"classes/LegendInteractionAssist.html":{}}}],["previouschart",{"_index":890,"title":{},"body":{"components/ChartComponent.html":{}}}],["previouschart.destroy",{"_index":892,"title":{},"body":{"components/ChartComponent.html":{}}}],["primarily",{"_index":842,"title":{},"body":{"injectables/ChartCollectionService.html":{}}}],["primary",{"_index":3326,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["primitive",{"_index":248,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["printed",{"_index":4820,"title":{},"body":{"license.html":{}}}],["private",{"_index":55,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Chart.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MappedValueProvider.html":{},"classes/PathMarker.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialTooltipsPlugin.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/ZoomPlugin.html":{}}}],["problems",{"_index":2260,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["process",{"_index":4360,"title":{},"body":{"classes/UtilityService.html":{}}}],["processdatapoints(datapoints",{"_index":1240,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["processed",{"_index":1067,"title":{},"body":{"classes/ChartPalette.html":{},"classes/TextColorProvider.html":{}}}],["processedcolor",{"_index":3724,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["processedcolorprovider",{"_index":1066,"title":{"classes/ProcessedColorProvider.html":{}},"body":{"classes/ChartPalette.html":{},"classes/ProcessedColorProvider.html":{},"classes/TextColorProvider.html":{}}}],["processedcolorprovider(this.standardcolors",{"_index":1086,"title":{},"body":{"classes/ChartPalette.html":{}}}],["processedcolorprovider:15",{"_index":4078,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["processedcolorprovider:30",{"_index":4079,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["processedcolors",{"_index":3720,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["processedseriesset",{"_index":3204,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["processedseriesset.map(s",{"_index":3206,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["processes",{"_index":3709,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["processhighlighteddatapoints",{"_index":445,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["processhighlighteddatapoints(datapoints",{"_index":469,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["processor",{"_index":3141,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["product",{"_index":4745,"title":{},"body":{"license.html":{}}}],["project",{"_index":4531,"title":{},"body":{"index.html":{}}}],["projected",{"_index":3341,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["projecteddescription",{"_index":3361,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["projects",{"_index":4530,"title":{},"body":{"index.html":{}}}],["prominent",{"_index":4701,"title":{},"body":{"license.html":{}}}],["propagate",{"_index":2524,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["properties",{"_index":11,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{}}}],["property",{"_index":1152,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/Grid.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/Renderer.html":{},"classes/SparkChartAssist.html":{}}}],["props",{"_index":1384,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["props.fx",{"_index":1389,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["props.fy",{"_index":1390,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["protected",{"_index":673,"title":{},"body":{"classes/Chart.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITooltipPosition.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LinearScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Scale.html":{},"classes/SparkChartAssist.html":{},"classes/SvgMarker.html":{},"classes/TimeScale.html":{}}}],["provide",{"_index":856,"title":{},"body":{"components/ChartComponent.html":{},"index.html":{},"license.html":{}}}],["provided",{"_index":1635,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/MappedValueProvider.html":{},"classes/NoopRenderer.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/Renderer.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["providedvalues",{"_index":3951,"title":{},"body":{"classes/SequentialValueProvider.html":{}}}],["provider",{"_index":806,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"classes/ChartPalette.html":{},"classes/ProcessedColorProvider.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SparkChartAssist.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{}}}],["provider.ts",{"_index":3463,"title":{},"body":{"classes/MappedValueProvider.html":{},"classes/ProcessedColorProvider.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/TextColorProvider.html":{}}}],["provider.ts:10",{"_index":3949,"title":{},"body":{"classes/SequentialValueProvider.html":{}}}],["provider.ts:13",{"_index":3473,"title":{},"body":{"classes/MappedValueProvider.html":{}}}],["provider.ts:15",{"_index":3718,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["provider.ts:16",{"_index":3474,"title":{},"body":{"classes/MappedValueProvider.html":{},"classes/SequentialValueProvider.html":{}}}],["provider.ts:20",{"_index":4077,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["provider.ts:26",{"_index":3950,"title":{},"body":{"classes/SequentialValueProvider.html":{}}}],["provider.ts:30",{"_index":3719,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["provider.ts:7",{"_index":3472,"title":{},"body":{"classes/MappedValueProvider.html":{},"classes/SequentialColorProvider.html":{}}}],["provider.ts:9",{"_index":3716,"title":{},"body":{"classes/ProcessedColorProvider.html":{},"classes/SequentialChartMarkerProvider.html":{}}}],["providers",{"_index":32,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"components/ChartComponent.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"modules/NuiChartsModule.html":{},"classes/RadialAccessors.html":{},"index.html":{},"overview.html":{}}}],["provides",{"_index":2053,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"injectables/ThresholdsService.html":{},"license.html":{}}}],["public",{"_index":94,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISpark.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{}}}],["publicly",{"_index":4662,"title":{},"body":{"license.html":{}}}],["publishes",{"_index":458,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["publishrenderstates",{"_index":3266,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["pull",{"_index":3642,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["purpose",{"_index":4640,"title":{},"body":{"license.html":{}}}],["purposes",{"_index":4572,"title":{},"body":{"license.html":{}}}],["px",{"_index":726,"title":{},"body":{"classes/Chart.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["querylist",{"_index":1296,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["quickly",{"_index":4508,"title":{},"body":{"index.html":{}}}],["quite",{"_index":4516,"title":{},"body":{"index.html":{}}}],["r",{"_index":2142,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/RadialTooltipsPlugin.html":{},"interfaces/ScalesIndex.html":{},"classes/TextColorProvider.html":{},"classes/UtilityService.html":{}}}],["radial",{"_index":3703,"title":{},"body":{"classes/PieRenderer.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["radialaccessors",{"_index":2273,"title":{"classes/RadialAccessors.html":{}},"body":{"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"classes/RadialAccessors.html":{}}}],["radialpopoverplugin",{"_index":3729,"title":{"classes/RadialPopoverPlugin.html":{}},"body":{"classes/RadialPopoverPlugin.html":{}}}],["radialrenderer",{"_index":957,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["radialrenderer:133",{"_index":3696,"title":{},"body":{"classes/PieRenderer.html":{}}}],["radialrenderer:149",{"_index":3698,"title":{},"body":{"classes/PieRenderer.html":{}}}],["radialrenderer:156",{"_index":3700,"title":{},"body":{"classes/PieRenderer.html":{}}}],["radialrenderer:41",{"_index":3692,"title":{},"body":{"classes/PieRenderer.html":{}}}],["radialrenderer:47",{"_index":3695,"title":{},"body":{"classes/PieRenderer.html":{}}}],["radialtooltipsplugin",{"_index":3750,"title":{"classes/RadialTooltipsPlugin.html":{}},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["radians",{"_index":3798,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["radius",{"_index":959,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ITooltipNode.html":{}}}],["range",{"_index":2161,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/MarkerUtils.html":{},"classes/NoopScale.html":{},"classes/PieRenderer.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{}}}],["range(range",{"_index":2162,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{}}}],["range.reverse",{"_index":3926,"title":{},"body":{"classes/Scale.html":{}}}],["range[0",{"_index":3706,"title":{},"body":{"classes/PieRenderer.html":{}}}],["range[1",{"_index":4398,"title":{},"body":{"classes/UtilityService.html":{}}}],["ranges",{"_index":2058,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["rarely",{"_index":1952,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["ratio",{"_index":4075,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["ratiodef",{"_index":4100,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["ratiotodark",{"_index":4094,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["ratiotolight",{"_index":4091,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["raw",{"_index":4366,"title":{},"body":{"classes/UtilityService.html":{}}}],["rc",{"_index":4080,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["reaches",{"_index":1931,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["readable",{"_index":4710,"title":{},"body":{"license.html":{}}}],["readonly",{"_index":97,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"classes/TimeScale.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{}}}],["reason",{"_index":4811,"title":{},"body":{"license.html":{}}}],["reasonable",{"_index":2132,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["recalculate",{"_index":2752,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["recalculated",{"_index":2017,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["recalculations",{"_index":2763,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["received",{"_index":456,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"license.html":{}}}],["recent",{"_index":1170,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["recipients",{"_index":4696,"title":{},"body":{"license.html":{}}}],["recommend",{"_index":4819,"title":{},"body":{"license.html":{}}}],["reconcilemarginsdebounce",{"_index":2340,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["reconcilemarginswithdebounce(oldmargin",{"_index":2766,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["reconfigurechart(chart",{"_index":4048,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["reconsider",{"_index":1808,"title":{},"body":{"classes/Grid.html":{}}}],["record",{"_index":1454,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LegendInteractionAssist.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/typealiases.html":{}}}],["rect",{"_index":2820,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["rect.attrs",{"_index":2839,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["rect.empty",{"_index":2829,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["rect.style(\"filter",{"_index":2832,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["rectangleaccessors",{"_index":200,"title":{"classes/RectangleAccessors.html":{}},"body":{"classes/BarAccessors.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["rectangleaccessors:34",{"_index":207,"title":{},"body":{"classes/BarAccessors.html":{},"classes/HorizontalBarAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["rectangleaccessors:35",{"_index":208,"title":{},"body":{"classes/BarAccessors.html":{},"classes/HorizontalBarAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["redistributing",{"_index":4764,"title":{},"body":{"license.html":{}}}],["redistribution",{"_index":4690,"title":{},"body":{"license.html":{}}}],["redraw",{"_index":859,"title":{},"body":{"components/ChartComponent.html":{}}}],["reduce",{"_index":3713,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["refactor",{"_index":1724,"title":{},"body":{"classes/Grid.html":{}}}],["refactoring",{"_index":1722,"title":{},"body":{"classes/Grid.html":{}}}],["reference",{"_index":4391,"title":{},"body":{"classes/UtilityService.html":{},"index.html":{}}}],["referenced",{"_index":2261,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{},"miscellaneous/variables.html":{}}}],["refresh",{"_index":4878,"title":{},"body":{"miscellaneous/variables.html":{}}}],["refresh_event",{"_index":878,"title":{},"body":{"components/ChartComponent.html":{},"miscellaneous/variables.html":{}}}],["regarding",{"_index":1995,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"license.html":{}}}],["registering",{"_index":804,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["registers",{"_index":838,"title":{},"body":{"injectables/ChartCollectionService.html":{}}}],["regularshapes",{"_index":4861,"title":{},"body":{"miscellaneous/variables.html":{}}}],["related",{"_index":3498,"title":{},"body":{"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{}}}],["relation",{"_index":1990,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["relative",{"_index":1500,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/InteractionLabelPlugin.html":{},"classes/TextColorProvider.html":{}}}],["relativeposition",{"_index":1504,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["relativeposition.x",{"_index":1508,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["relativeposition.y",{"_index":1510,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["release",{"_index":4522,"title":{},"body":{"index.html":{}}}],["remain",{"_index":4616,"title":{},"body":{"license.html":{}}}],["removal",{"_index":2810,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["remove",{"_index":2947,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{}}}],["removemarker",{"_index":3485,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["removemarker(target",{"_index":3501,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["removeplugin",{"_index":535,"title":{},"body":{"classes/Chart.html":{},"interfaces/IChart.html":{}}}],["removeplugin(classref",{"_index":566,"title":{},"body":{"classes/Chart.html":{},"interfaces/IChart.html":{}}}],["removeplugin?(classref",{"_index":1971,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["removeplugins",{"_index":536,"title":{},"body":{"classes/Chart.html":{}}}],["removeplugins(...classrefs",{"_index":568,"title":{},"body":{"classes/Chart.html":{}}}],["rename",{"_index":828,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["render",{"_index":1886,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"index.html":{}}}],["render_area_height_correction",{"_index":1686,"title":{},"body":{"classes/Grid.html":{}}}],["render_area_width_correction",{"_index":1688,"title":{},"body":{"classes/Grid.html":{}}}],["rendercontainers",{"_index":3603,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["rendered",{"_index":1640,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["renderengine",{"_index":561,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["renderengine(lasagna",{"_index":680,"title":{},"body":{"classes/Chart.html":{}}}],["renderengineplugin",{"_index":600,"title":{},"body":{"classes/Chart.html":{}}}],["renderer",{"_index":299,"title":{"classes/Renderer.html":{}},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartDonutContentPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["renderer#draw",{"_index":2814,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/NoopRenderer.html":{},"classes/SideIndicatorAccessors.html":{}}}],["renderer#getdatapointposition",{"_index":3606,"title":{},"body":{"classes/NoopRenderer.html":{}}}],["renderer#getrequiredlayers",{"_index":2840,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/NoopRenderer.html":{},"classes/SideIndicatorAccessors.html":{}}}],["renderer#highlightdatapoint",{"_index":3605,"title":{},"body":{"classes/NoopRenderer.html":{}}}],["renderer's",{"_index":4159,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["renderer.barcontainerclass",{"_index":392,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["renderer.config.strokewidth",{"_index":3407,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["renderer.default_config",{"_index":3837,"title":{},"body":{"classes/Renderer.html":{}}}],["renderer.drawline(renderseries",{"_index":3418,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["renderer.getcontainerstatestyles",{"_index":387,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["renderer.getdatapoint(renderseries",{"_index":401,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["renderer.getdatapointposition(renderseries.dataseries",{"_index":3422,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["renderer.getouterradius(rscale.range",{"_index":3779,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["renderer.ts",{"_index":2790,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["renderer.ts:16",{"_index":3565,"title":{},"body":{"classes/NoopRenderer.html":{}}}],["renderer.ts:20",{"_index":3570,"title":{},"body":{"classes/NoopRenderer.html":{}}}],["renderer.ts:26",{"_index":3568,"title":{},"body":{"classes/NoopRenderer.html":{}}}],["renderer.ts:31",{"_index":3567,"title":{},"body":{"classes/NoopRenderer.html":{}}}],["renderer.ts:49",{"_index":3959,"title":{},"body":{"classes/SideIndicatorAccessors.html":{}}}],["renderer.ts:50",{"_index":3958,"title":{},"body":{"classes/SideIndicatorAccessors.html":{}}}],["renderer.ts:7",{"_index":4468,"title":{},"body":{"classes/XYRenderer.html":{}}}],["renderer:108",{"_index":3602,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["renderer:117",{"_index":3600,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["renderer:129",{"_index":3593,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["renderer:153",{"_index":3589,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["renderer:170",{"_index":3577,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["renderer:190",{"_index":3595,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["renderer:23",{"_index":3562,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["renderer:40",{"_index":3561,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["renderer:45",{"_index":3564,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["renderer:53",{"_index":3571,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["renderer:63",{"_index":3587,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["renderer:74",{"_index":3581,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["renderer:85",{"_index":3598,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["renderer:95",{"_index":3563,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["rendererconfig",{"_index":4142,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["renderers",{"_index":1949,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineAccessors.html":{},"classes/MarkerUtils.html":{},"classes/Renderer.html":{},"classes/XYAccessors.html":{}}}],["renderers/area/area",{"_index":4197,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["renderers/bar/accessors/status",{"_index":4198,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["renderers/bar/bar",{"_index":4199,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["renderers/bar/types",{"_index":475,"title":{},"body":{"classes/BarTooltipsPlugin.html":{}}}],["renderers/constants",{"_index":4200,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["renderers/line/line",{"_index":4201,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["renderers/radial/radial",{"_index":958,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["renderers/side",{"_index":4202,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["renderers/types",{"_index":752,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/Renderer.html":{},"classes/SparkChartAssist.html":{},"classes/ZoomPlugin.html":{}}}],["renderersubject",{"_index":296,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYRenderer.html":{}}}],["renderersubject.next",{"_index":398,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["rendering",{"_index":1578,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{},"classes/Grid.html":{},"classes/RadialTooltipsPlugin.html":{},"injectables/ThresholdsService.html":{}}}],["rendering_area_clip_path_prefix",{"_index":1624,"title":{},"body":{"classes/Grid.html":{}}}],["rendering_area_layer_name",{"_index":1625,"title":{},"body":{"classes/Grid.html":{}}}],["renderingarea",{"_index":1695,"title":{},"body":{"classes/Grid.html":{}}}],["renderingareaattrs",{"_index":1778,"title":{},"body":{"classes/Grid.html":{}}}],["renderingareaclippath",{"_index":1694,"title":{},"body":{"classes/Grid.html":{}}}],["renderingareaclippathattrs",{"_index":1774,"title":{},"body":{"classes/Grid.html":{}}}],["renderingareacontainer",{"_index":1787,"title":{},"body":{"classes/Grid.html":{}}}],["renderingareacontainer.append(\"rect",{"_index":1789,"title":{},"body":{"classes/Grid.html":{}}}],["renderlayername",{"_index":332,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/enumerations.html":{}}}],["renderlayername.unclippeddata",{"_index":2809,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["rendermarkersvg(svg",{"_index":1024,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["renderseries",{"_index":294,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["renderseries.containers[renderlayername.data",{"_index":385,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["renderseries.containers[renderlayername.unclippeddata",{"_index":2816,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["renderseries.dataseries",{"_index":2817,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/SideIndicatorAccessors.html":{}}}],["renderseries.dataseries.accessors",{"_index":2819,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["renderseries.dataseries.data",{"_index":2825,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["renderseries.dataseries.data[0",{"_index":3413,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["renderseries.dataseries.data[datapointindex",{"_index":402,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["renderseries.dataseries.id",{"_index":3411,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["renderseries.scales",{"_index":2818,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/SideIndicatorAccessors.html":{}}}],["renderstate",{"_index":333,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/SparkChartAssist.html":{},"classes/XYRenderer.html":{},"miscellaneous/enumerations.html":{}}}],["renderstate.deemphasized",{"_index":395,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/LegendInteractionAssist.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["renderstate.default",{"_index":394,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["renderstate.emphasisstate",{"_index":3303,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["renderstate.emphasized",{"_index":396,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"interfaces/IScaleSVGElement.html":{},"classes/LegendInteractionAssist.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["renderstate.hidden",{"_index":793,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ITooltipPosition.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["renderstate.visible",{"_index":3284,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["renderstatedata",{"_index":574,"title":{},"body":{"classes/Chart.html":{},"interfaces/IChart.html":{}}}],["renderstates",{"_index":2389,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["renderstatesindex",{"_index":3110,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["repeated",{"_index":2749,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["replaced",{"_index":3234,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"license.html":{}}}],["replacement",{"_index":4350,"title":{},"body":{"classes/UtilityService.html":{}}}],["report",{"_index":2885,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["represent",{"_index":3582,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["representation",{"_index":3573,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{}}}],["representatives",{"_index":4633,"title":{},"body":{"license.html":{}}}],["represented",{"_index":779,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"injectables/ThresholdsService.html":{}}}],["representing",{"_index":753,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"injectables/ThresholdsService.html":{}}}],["represents",{"_index":800,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/MarkerUtils.html":{},"injectables/ThresholdsService.html":{}}}],["reproduce",{"_index":4660,"title":{},"body":{"license.html":{}}}],["reproducing",{"_index":4747,"title":{},"body":{"license.html":{}}}],["reproduction",{"_index":4555,"title":{},"body":{"license.html":{}}}],["request",{"_index":1236,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["require",{"_index":1950,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/variables.html":{}}}],["require.context",{"_index":4962,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required",{"_index":1960,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineAccessors.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{},"license.html":{}}}],["requirements",{"_index":3754,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["requires",{"_index":4418,"title":{},"body":{"classes/UtilityService.html":{}}}],["reset",{"_index":2006,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/MappedValueProvider.html":{},"modules/NuiChartsModule.html":{},"classes/ProcessedColorProvider.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/TextColorProvider.html":{},"overview.html":{}}}],["resets",{"_index":3217,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["resetseries",{"_index":3113,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["resetvisibleseries",{"_index":785,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/LegendInteractionAssist.html":{},"miscellaneous/enumerations.html":{}}}],["resize",{"_index":874,"title":{},"body":{"components/ChartComponent.html":{},"dependencies.html":{}}}],["resized",{"_index":2598,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["resizehandler",{"_index":881,"title":{},"body":{"components/ChartComponent.html":{}}}],["resizeobserver",{"_index":860,"title":{},"body":{"components/ChartComponent.html":{}}}],["respond",{"_index":1189,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["responsibility",{"_index":4803,"title":{},"body":{"license.html":{}}}],["responsible",{"_index":4762,"title":{},"body":{"license.html":{}}}],["restore",{"_index":2601,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/LegendInteractionAssist.html":{}}}],["result",{"_index":78,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"components/BasicLegendTileComponent.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"modules/NuiChartsModule.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"additional-documentation/layout.html":{},"additional-documentation/chart-types.html":{},"additional-documentation/chart-types/line.html":{},"additional-documentation/chart-types/bar.html":{},"additional-documentation/chart-types/bar/bucketed-bar.html":{},"additional-documentation/chart-types/bar/status.html":{},"additional-documentation/chart-types/bar/waterfall.html":{},"additional-documentation/chart-types/area.html":{},"additional-documentation/chart-types/pie-and-donut.html":{},"additional-documentation/chart-types/spark.html":{},"additional-documentation/plugins.html":{},"additional-documentation/plugins/tooltips.html":{},"additional-documentation/plugins/popovers.html":{},"additional-documentation/thresholds.html":{},"additional-documentation/timeframe-selection.html":{},"additional-documentation/advanced-usage.html":{},"additional-documentation/advanced-usage/chart.html":{},"additional-documentation/advanced-usage/legend.html":{},"additional-documentation/advanced-usage/input-structure.html":{},"additional-documentation/advanced-usage/input-structure/data.html":{},"additional-documentation/advanced-usage/input-structure/colors.html":{},"additional-documentation/advanced-usage/input-structure/markers.html":{},"additional-documentation/advanced-usage/events.html":{},"additional-documentation/advanced-usage/grid.html":{},"additional-documentation/advanced-usage/scales.html":{},"additional-documentation/advanced-usage/scales/domains.html":{},"additional-documentation/advanced-usage/scales/formatters.html":{}}}],["result[next",{"_index":4987,"title":{},"body":{"miscellaneous/variables.html":{}}}],["result[next.id",{"_index":2973,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/UtilityService.html":{},"classes/ZoomPlugin.html":{}}}],["resulting",{"_index":2021,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/PathMarker.html":{},"license.html":{}}}],["results",{"_index":80,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"components/BasicLegendTileComponent.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"modules/NuiChartsModule.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"additional-documentation/layout.html":{},"additional-documentation/chart-types.html":{},"additional-documentation/chart-types/line.html":{},"additional-documentation/chart-types/bar.html":{},"additional-documentation/chart-types/bar/bucketed-bar.html":{},"additional-documentation/chart-types/bar/status.html":{},"additional-documentation/chart-types/bar/waterfall.html":{},"additional-documentation/chart-types/area.html":{},"additional-documentation/chart-types/pie-and-donut.html":{},"additional-documentation/chart-types/spark.html":{},"additional-documentation/plugins.html":{},"additional-documentation/plugins/tooltips.html":{},"additional-documentation/plugins/popovers.html":{},"additional-documentation/thresholds.html":{},"additional-documentation/timeframe-selection.html":{},"additional-documentation/advanced-usage.html":{},"additional-documentation/advanced-usage/chart.html":{},"additional-documentation/advanced-usage/legend.html":{},"additional-documentation/advanced-usage/input-structure.html":{},"additional-documentation/advanced-usage/input-structure/data.html":{},"additional-documentation/advanced-usage/input-structure/colors.html":{},"additional-documentation/advanced-usage/input-structure/markers.html":{},"additional-documentation/advanced-usage/events.html":{},"additional-documentation/advanced-usage/grid.html":{},"additional-documentation/advanced-usage/scales.html":{},"additional-documentation/advanced-usage/scales/domains.html":{},"additional-documentation/advanced-usage/scales/formatters.html":{}}}],["resume",{"_index":3236,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["retain",{"_index":4705,"title":{},"body":{"license.html":{}}}],["retrieve",{"_index":242,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["retrieves",{"_index":3144,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["return",{"_index":192,"title":{},"body":{"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"injectables/ChartCollectionService.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPalette.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISpark.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":249,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["returning",{"_index":340,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["returns",{"_index":175,"title":{},"body":{"classes/AxisConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"injectables/ChartCollectionService.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SparkChartAssist.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["reused",{"_index":701,"title":{},"body":{"classes/Chart.html":{}}}],["reverse",{"_index":2168,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{}}}],["reversed",{"_index":2170,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{}}}],["reversed(reversed",{"_index":2171,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{}}}],["review",{"_index":127,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/GridConfig.html":{},"classes/XYGridConfig.html":{}}}],["revisions",{"_index":4612,"title":{},"body":{"license.html":{}}}],["rgb",{"_index":1063,"title":{},"body":{"classes/ChartPalette.html":{},"classes/TextColorProvider.html":{}}}],["rgb(color",{"_index":1090,"title":{},"body":{"classes/ChartPalette.html":{},"classes/TextColorProvider.html":{}}}],["rgb(colordefinitions.dark",{"_index":4095,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["rgb(colordefinitions.light",{"_index":4093,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["rgbcolor",{"_index":1089,"title":{},"body":{"classes/ChartPalette.html":{},"classes/TextColorProvider.html":{}}}],["rgbcolor.b",{"_index":4121,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["rgbcolor.g",{"_index":4119,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["rgbcolor.opacity",{"_index":1091,"title":{},"body":{"classes/ChartPalette.html":{}}}],["rgbcolor.r",{"_index":4116,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["rgbcolor.tostring",{"_index":1093,"title":{},"body":{"classes/ChartPalette.html":{}}}],["rgbinput",{"_index":4090,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["rich",{"_index":518,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["richlegendtilecomponent",{"_index":517,"title":{"components/RichLegendTileComponent.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{},"overview.html":{}}}],["rid",{"_index":3419,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["right",{"_index":112,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/UtilityService.html":{},"classes/XYGridConfig.html":{},"classes/ZoomPlugin.html":{}}}],["rights",{"_index":4800,"title":{},"body":{"license.html":{}}}],["rightscaleid",{"_index":2352,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["rightscaleid(id",{"_index":2354,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["rightscalelabelx",{"_index":2490,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["risks",{"_index":4766,"title":{},"body":{"license.html":{}}}],["round",{"_index":2100,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["royalty",{"_index":4657,"title":{},"body":{"license.html":{}}}],["rs.series",{"_index":2394,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["rs.state",{"_index":2393,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["rscale",{"_index":3775,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["rsrgb",{"_index":4115,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["rule",{"_index":5012,"title":{},"body":{"miscellaneous/variables.html":{}}}],["running",{"_index":1373,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["runs",{"_index":1356,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["rxjs",{"_index":317,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Chart.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/ZoomPlugin.html":{}}}],["rxjs/operators",{"_index":584,"title":{},"body":{"classes/Chart.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/ZoomPlugin.html":{}}}],["s",{"_index":59,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IScaleSVGElement.html":{},"classes/LegendInteractionAssist.html":{},"classes/RadialTooltipsPlugin.html":{},"injectables/ThresholdsService.html":{},"classes/VerticalBarAccessors.html":{},"miscellaneous/variables.html":{}}}],["s.id",{"_index":3275,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["s.id.indexof(\"__",{"_index":3287,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["s.id.substring(0",{"_index":3289,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["s.renderstate",{"_index":3278,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["s.showinlegend",{"_index":3210,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["s?.scales[\"y",{"_index":2399,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["same",{"_index":809,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"components/ChartMarkerComponent.html":{},"classes/Grid.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{},"injectables/ThresholdsService.html":{},"license.html":{}}}],["sample",{"_index":2579,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["scale",{"_index":280,"title":{"classes/Scale.html":{}},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartAssistRenderStateData.html":{},"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IElementPosition.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/LinearScale.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["scale's",{"_index":2148,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{}}}],["scale((node",{"_index":2739,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["scale.__domaincalculatedwithticks",{"_index":2369,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["scale.bandwidth",{"_index":2173,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["scale.domaincalculator",{"_index":2367,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["scale.formatters[\"tick",{"_index":2531,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["scale.formatters[\"tick\"](datum",{"_index":2532,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["scale.formatters[fallback_formatter",{"_index":3020,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["scale.formatters[this.formattername",{"_index":3019,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["scale.id",{"_index":2537,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["scale.innerscale",{"_index":2177,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["scale.iscontinuous",{"_index":2538,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["scale.range()[1",{"_index":2742,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["scale.ts",{"_index":3424,"title":{},"body":{"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/TimeScale.html":{}}}],["scale.ts:10",{"_index":4327,"title":{},"body":{"classes/TimeScale.html":{}}}],["scale.ts:12",{"_index":3611,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:17",{"_index":3616,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:19",{"_index":3434,"title":{},"body":{"classes/LinearScale.html":{}}}],["scale.ts:22",{"_index":3626,"title":{},"body":{"classes/NoopScale.html":{},"classes/TimeScale.html":{}}}],["scale.ts:23",{"_index":3435,"title":{},"body":{"classes/LinearScale.html":{}}}],["scale.ts:26",{"_index":4329,"title":{},"body":{"classes/TimeScale.html":{}}}],["scale.ts:27",{"_index":3436,"title":{},"body":{"classes/LinearScale.html":{},"classes/NoopScale.html":{}}}],["scale.ts:28",{"_index":3619,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:29",{"_index":3620,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:31",{"_index":3437,"title":{},"body":{"classes/LinearScale.html":{}}}],["scale.ts:32",{"_index":4330,"title":{},"body":{"classes/TimeScale.html":{}}}],["scale.ts:34",{"_index":3612,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:35",{"_index":3613,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:36",{"_index":3614,"title":{},"body":{"classes/NoopScale.html":{},"classes/TimeScale.html":{}}}],["scale.ts:41",{"_index":3615,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:45",{"_index":3617,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:49",{"_index":3618,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:53",{"_index":3621,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:58",{"_index":3622,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:59",{"_index":3623,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:6",{"_index":3610,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:60",{"_index":3624,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:7",{"_index":3609,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:8",{"_index":3429,"title":{},"body":{"classes/LinearScale.html":{},"classes/NoopScale.html":{}}}],["scale:10",{"_index":3432,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:11",{"_index":3430,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:12",{"_index":3431,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:13",{"_index":3433,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:31",{"_index":3438,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:33",{"_index":3443,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:35",{"_index":3444,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:43",{"_index":3446,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:44",{"_index":3447,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:45",{"_index":3448,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:55",{"_index":3439,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:56",{"_index":3440,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:57",{"_index":3441,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:67",{"_index":3442,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:74",{"_index":3445,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:78",{"_index":3449,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:83",{"_index":3450,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:84",{"_index":3451,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:85",{"_index":3452,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale?.id",{"_index":2361,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["scaleid",{"_index":2004,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IElementPosition.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/ScalesIndex.html":{},"miscellaneous/variables.html":{}}}],["scalekey",{"_index":279,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISpark.html":{},"classes/LegendInteractionAssist.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/SparkChartAssist.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["scalelinear",{"_index":1883,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LinearScale.html":{}}}],["scalelinear](https://d3indepth.com/scales/#scalelinear",{"_index":3453,"title":{},"body":{"classes/LinearScale.html":{}}}],["scalename",{"_index":3576,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["scales",{"_index":285,"title":{"additional-documentation/advanced-usage/scales.html":{}},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"additional-documentation/advanced-usage.html":{}}}],["scales(scales",{"_index":1706,"title":{},"body":{"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{}}}],["scales.reduce(callbackfn",{"_index":4448,"title":{},"body":{"classes/UtilityService.html":{}}}],["scales.x.convert(dataseries.accessors.data.x(point",{"_index":4474,"title":{},"body":{"classes/XYRenderer.html":{}}}],["scales.y.convert(dataseries.accessors.data.y(point",{"_index":4475,"title":{},"body":{"classes/XYRenderer.html":{}}}],["scales.y.convert(end",{"_index":2835,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["scales.y.convert(start",{"_index":2838,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["scales.y.range()[0",{"_index":2836,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["scales/helpers/invert",{"_index":4375,"title":{},"body":{"classes/UtilityService.html":{}}}],["scales/types",{"_index":1887,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/Renderer.html":{},"classes/UtilityService.html":{}}}],["scalesindex",{"_index":1671,"title":{"interfaces/ScalesIndex.html":{}},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["scaletime",{"_index":4326,"title":{},"body":{"classes/TimeScale.html":{}}}],["scaletime](https://d3indepth.com/scales/#scaletime",{"_index":4333,"title":{},"body":{"classes/TimeScale.html":{}}}],["scaling",{"_index":1681,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/PathMarker.html":{}}}],["scenario",{"_index":2758,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["screen",{"_index":1503,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["scrollable",{"_index":1992,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["se",{"_index":3763,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["search",{"_index":4357,"title":{},"body":{"classes/UtilityService.html":{}}}],["searching",{"_index":282,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["second",{"_index":2774,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"miscellaneous/variables.html":{}}}],["secondary",{"_index":3328,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["section",{"_index":3806,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"license.html":{}}}],["sectionindex",{"_index":3800,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["sections",{"_index":3807,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"license.html":{}}}],["see",{"_index":132,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IXYScales.html":{},"classes/LineAccessors.html":{},"classes/LinearScale.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/TimeScale.html":{},"classes/XYGridConfig.html":{},"index.html":{},"license.html":{}}}],["select",{"_index":308,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/Chart.html":{},"components/ChartTooltipsComponent.html":{},"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITooltipNode.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["select(\"rect",{"_index":3047,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["select(elementstofilter[0]).text",{"_index":2644,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["select(group",{"_index":2517,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["select(group).classed(\"pointer",{"_index":2597,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["select(group).classed(\"sw",{"_index":2547,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["select(group).classed(\"tick",{"_index":2512,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["select(next).text",{"_index":2642,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["select(this).attrs(barstylesfn(renderstate",{"_index":397,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["select(this).classed(\"sw",{"_index":2506,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["select(this.borders.bottom",{"_index":1814,"title":{},"body":{"classes/Grid.html":{}}}],["select(this.borders.left",{"_index":1835,"title":{},"body":{"classes/Grid.html":{}}}],["select(this.borders.right",{"_index":1832,"title":{},"body":{"classes/Grid.html":{}}}],["select(this.borders.top",{"_index":1827,"title":{},"body":{"classes/Grid.html":{}}}],["select(this.element",{"_index":631,"title":{},"body":{"classes/Chart.html":{}}}],["select(tooltip.getoverlayelement",{"_index":1408,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["select_data_point",{"_index":4879,"title":{},"body":{"miscellaneous/variables.html":{}}}],["select_data_point_event",{"_index":4862,"title":{},"body":{"miscellaneous/variables.html":{}}}],["selectable",{"_index":2969,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["selectall(\".tick",{"_index":2439,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["selectallaxislabels(axisgroup",{"_index":2606,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["selected",{"_index":3332,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["selecteddatapointidx",{"_index":388,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["selecteddatapointidxfn",{"_index":276,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["selecteddatpointidxfn",{"_index":277,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["selection",{"_index":310,"title":{"additional-documentation/timeframe-selection.html":{}},"body":{"classes/BarHighlightStrategy.html":{},"classes/Chart.html":{},"components/ChartTooltipsComponent.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"modules/NuiChartsModule.html":{},"classes/Renderer.html":{},"classes/ZoomPlugin.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["selection/issues/81",{"_index":2890,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["selection[0",{"_index":2964,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["selection[1",{"_index":2965,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["selector",{"_index":487,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{},"classes/UtilityService.html":{}}}],["selector(haystack[mid",{"_index":4435,"title":{},"body":{"classes/UtilityService.html":{}}}],["sell",{"_index":4668,"title":{},"body":{"license.html":{}}}],["semantic",{"_index":4887,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sense",{"_index":2620,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["sent",{"_index":4632,"title":{},"body":{"license.html":{}}}],["separable",{"_index":4617,"title":{},"body":{"license.html":{}}}],["separate",{"_index":4737,"title":{},"body":{"license.html":{}}}],["separated",{"_index":803,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["separatorindex",{"_index":3286,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["sequence",{"_index":4894,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sequential",{"_index":1069,"title":{},"body":{"classes/ChartPalette.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{}}}],["sequentialchartmarkerprovider",{"_index":3939,"title":{"classes/SequentialChartMarkerProvider.html":{}},"body":{"classes/SequentialChartMarkerProvider.html":{},"classes/SparkChartAssist.html":{}}}],["sequentialchartmarkerprovider(chart_markers",{"_index":3977,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["sequentialcolorprovider",{"_index":1068,"title":{"classes/SequentialColorProvider.html":{}},"body":{"classes/ChartPalette.html":{},"classes/SequentialColorProvider.html":{}}}],["sequentialvalueprovider",{"_index":3941,"title":{"classes/SequentialValueProvider.html":{}},"body":{"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{}}}],["sequentialvalueprovider:16",{"_index":3943,"title":{},"body":{"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{}}}],["sequentialvalueprovider:26",{"_index":3944,"title":{},"body":{"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{}}}],["series",{"_index":13,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartAssistRenderStateData.html":{},"components/ChartTooltipsComponent.html":{},"classes/DataSeries.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISpark.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MappedValueProvider.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYRenderer.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["series'},{'name",{"_index":516,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["series).valueof",{"_index":372,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["series.accessors.data",{"_index":353,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["series.component",{"_index":3657,"title":{},"body":{"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{}}}],["series.component.html",{"_index":3310,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.less",{"_index":3309,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts",{"_index":3308,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:102",{"_index":3337,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:105",{"_index":3335,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:111",{"_index":3322,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:130",{"_index":3338,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:139",{"_index":3339,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:146",{"_index":3340,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:31",{"_index":3323,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:41",{"_index":3330,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:50",{"_index":3344,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:57",{"_index":3331,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:62",{"_index":3334,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:67",{"_index":3325,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:72",{"_index":3327,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:77",{"_index":3329,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:82",{"_index":3324,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:88",{"_index":3333,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:91",{"_index":3347,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:98",{"_index":3336,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.data",{"_index":360,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/LegendInteractionAssist.html":{}}}],["series.data.length",{"_index":375,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["series.id",{"_index":236,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["series.name",{"_index":235,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["series.renderstate",{"_index":3281,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["series.state",{"_index":1466,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["series.ts",{"_index":1512,"title":{},"body":{"classes/DataSeries.html":{}}}],["series.ts:10",{"_index":1516,"title":{},"body":{"classes/DataSeries.html":{}}}],["series.ts:11",{"_index":1514,"title":{},"body":{"classes/DataSeries.html":{}}}],["series.ts:5",{"_index":1517,"title":{},"body":{"classes/DataSeries.html":{}}}],["series.ts:6",{"_index":1515,"title":{},"body":{"classes/DataSeries.html":{}}}],["series/legend",{"_index":3307,"title":{},"body":{"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{}}}],["series_id_suffix",{"_index":4127,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["series_state_change",{"_index":4880,"title":{},"body":{"miscellaneous/variables.html":{}}}],["series_state_change_event",{"_index":586,"title":{},"body":{"classes/Chart.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITooltipPosition.html":{},"miscellaneous/variables.html":{}}}],["seriesaccessor",{"_index":37,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/DataSeries.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineAccessors.html":{},"classes/RadialAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"miscellaneous/typealiases.html":{}}}],["seriescolor",{"_index":3082,"title":{},"body":{"components/LegendComponent.html":{}}}],["seriesgroups",{"_index":3269,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["seriesgroups[parentid",{"_index":3290,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["seriesgroups[parentid].push(s.id",{"_index":3291,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["serieshasadditionalcontent",{"_index":3869,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["serieshighlight",{"_index":3186,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["seriesicon",{"_index":3083,"title":{},"body":{"components/LegendComponent.html":{}}}],["seriesid",{"_index":234,"title":{},"body":{"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/ChartAssistRenderStateData.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"injectables/ThresholdsService.html":{}}}],["seriesindex",{"_index":3270,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["seriesprocessor",{"_index":3166,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["seriesprocessor(series",{"_index":3201,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["seriesrenderstate",{"_index":3316,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["seriesrenderstate(renderstate",{"_index":3358,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["seriesscale",{"_index":4983,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seriesscale.iscontinuous",{"_index":4985,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seriesset",{"_index":578,"title":{},"body":{"classes/Chart.html":{},"interfaces/IChart.html":{},"classes/LegendInteractionAssist.html":{}}}],["seriesset.filter(s",{"_index":3209,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["seriesstatessubject",{"_index":606,"title":{},"body":{"classes/Chart.html":{}}}],["seriestrackbyfn(index",{"_index":3225,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["seriesunitlabel",{"_index":3084,"title":{},"body":{"components/LegendComponent.html":{}}}],["seriesvisibilitymap",{"_index":1453,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["serve",{"_index":1598,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["service",{"_index":837,"title":{},"body":{"injectables/ChartCollectionService.html":{},"classes/Grid.html":{},"modules/NuiChartsModule.html":{},"injectables/ThresholdsService.html":{},"license.html":{}}}],["service.ts",{"_index":4123,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["service.ts:205",{"_index":4182,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["service.ts:229",{"_index":4178,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["service.ts:261",{"_index":4174,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["service.ts:27",{"_index":4138,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["service.ts:295",{"_index":4164,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["service.ts:363",{"_index":4169,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["service.ts:374",{"_index":4171,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["service.ts:40",{"_index":4186,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["service.ts:76",{"_index":4143,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["set",{"_index":194,"title":{},"body":{"classes/AxisConfig.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"components/LegendSeriesComponent.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["set_domain",{"_index":4881,"title":{},"body":{"miscellaneous/variables.html":{}}}],["set_domain_event",{"_index":2877,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["setactive(active",{"_index":3342,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["setapproximateticks(ticks",{"_index":176,"title":{},"body":{"classes/AxisConfig.html":{}}}],["setattributes(attrs",{"_index":3680,"title":{},"body":{"classes/PathMarker.html":{}}}],["setcolor",{"_index":2196,"title":{},"body":{"interfaces/IChartMarker.html":{},"classes/PathMarker.html":{},"classes/SvgMarker.html":{}}}],["setcolor(color",{"_index":1970,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/PathMarker.html":{},"classes/SvgMarker.html":{}}}],["setdatapointstate",{"_index":3559,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["setdatapointstate(target",{"_index":3599,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["setgroupstate",{"_index":3114,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["setgroupstate(groupid",{"_index":3125,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["setgroupvisibility",{"_index":3115,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["setgroupvisibility(groupid",{"_index":3128,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["setinteractive(interactive",{"_index":3345,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["setrenderstate",{"_index":3967,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["setrenderstate(_seriesid",{"_index":3986,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["setrenderstate(seriesid",{"_index":3302,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["sets",{"_index":2014,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"components/LegendSeriesComponent.html":{},"interfaces/ScalesIndex.html":{}}}],["setseriesrenderstate(renderstate",{"_index":3348,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["setseriesstate",{"_index":3560,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["setseriesstate(rendercontainers",{"_index":3601,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["setseriesstates",{"_index":537,"title":{},"body":{"classes/Chart.html":{},"interfaces/IChart.html":{}}}],["setseriesstates(renderstatedata",{"_index":571,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["setter",{"_index":2057,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["settimeout",{"_index":1030,"title":{},"body":{"components/ChartMarkerComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITooltipNode.html":{}}}],["setting",{"_index":2019,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"classes/SideIndicatorAccessors.html":{}}}],["settings",{"_index":3143,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["setvisibility(seriesid",{"_index":3306,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["seven",{"_index":4903,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shade",{"_index":4907,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shall",{"_index":4557,"title":{},"body":{"license.html":{}}}],["shape",{"_index":1584,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["shapes",{"_index":4953,"title":{},"body":{"miscellaneous/variables.html":{}}}],["share",{"_index":810,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["shares",{"_index":4585,"title":{},"body":{"license.html":{}}}],["shifted",{"_index":3789,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["shifting",{"_index":147,"title":{},"body":{"classes/AreaGridConfig.html":{}}}],["short",{"_index":1888,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/typealiases.html":{}}}],["shorthand",{"_index":2164,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["show",{"_index":463,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/LegendInteractionAssist.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["showbottomaxis",{"_index":420,"title":{},"body":{"classes/BarStatusGridConfig.html":{},"classes/SparkChartAssist.html":{}}}],["showing",{"_index":1191,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["showinlegend",{"_index":1967,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"injectables/ThresholdsService.html":{}}}],["shows",{"_index":1491,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["showsubject",{"_index":442,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["showtopborder",{"_index":3965,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["side",{"_index":1687,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/MarkerUtils.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["side_indicators_layer",{"_index":2812,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["sideindicator",{"_index":4321,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sideindicatoraccessors",{"_index":2802,"title":{"classes/SideIndicatorAccessors.html":{}},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["sideindicatoraccessors.series",{"_index":4316,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sideindicatorrenderer",{"_index":2806,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["sideindicatorrenderer(rendererconfig",{"_index":4314,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sideindicators",{"_index":4313,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sideindicators.push(sideindicator",{"_index":4324,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sides",{"_index":2009,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["signature",{"_index":1892,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/ScalesIndex.html":{},"miscellaneous/typealiases.html":{}}}],["similar",{"_index":1721,"title":{},"body":{"classes/Grid.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["simple",{"_index":4517,"title":{},"body":{"index.html":{}}}],["simplechanges",{"_index":871,"title":{},"body":{"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/LegendComponent.html":{}}}],["simplezones",{"_index":4181,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["simplezones.map((z",{"_index":4260,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["simplified",{"_index":2845,"title":{},"body":{"interfaces/ISimpleThresholdZone.html":{},"injectables/ThresholdsService.html":{},"interfaces/ZoneCross.html":{}}}],["simulation",{"_index":1302,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["simulation.on(\"tick",{"_index":1405,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["simulationnodedatum",{"_index":1303,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["single",{"_index":1998,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/variables.html":{}}}],["six",{"_index":4902,"title":{},"body":{"miscellaneous/variables.html":{}}}],["size",{"_index":949,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{},"classes/MarkerUtils.html":{}}}],["sizes",{"_index":2012,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["slice",{"_index":3797,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["smaller",{"_index":2042,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"injectables/ThresholdsService.html":{}}}],["smallestdiff",{"_index":2681,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["software",{"_index":4594,"title":{},"body":{"license.html":{}}}],["solarwinds",{"_index":4826,"title":{},"body":{"license.html":{}}}],["sole",{"_index":4802,"title":{},"body":{"license.html":{}}}],["solely",{"_index":4761,"title":{},"body":{"license.html":{}}}],["solutions",{"_index":4497,"title":{},"body":{"index.html":{}}}],["solve",{"_index":429,"title":{},"body":{"classes/BarStatusGridConfig.html":{},"index.html":{}}}],["solves",{"_index":4179,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sortby",{"_index":4193,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sortby(breakpoints",{"_index":4253,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"components/BasicLegendTileComponent.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"modules/NuiChartsModule.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["sourceaccessors",{"_index":4231,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sourceprovider",{"_index":3717,"title":{},"body":{"classes/ProcessedColorProvider.html":{},"classes/TextColorProvider.html":{}}}],["sourceseries",{"_index":4155,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sourceseries.accessors.data",{"_index":4232,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sourceseries.accessors.data.x",{"_index":4215,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sourceseries.data.length",{"_index":4206,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sourceseries.data[0].__thresholds",{"_index":4207,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sourceseries.id",{"_index":4223,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sourceseries.scales",{"_index":4265,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["space",{"_index":1604,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["spark",{"_index":432,"title":{"additional-documentation/chart-types/spark.html":{}},"body":{"classes/BarStatusGridConfig.html":{},"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/SparkChartAssist.html":{},"index.html":{},"additional-documentation/chart-types.html":{}}}],["spark.chart",{"_index":4030,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["spark.chart.update(spark.chartseriesset",{"_index":4033,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["spark.id",{"_index":4027,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["sparkchartassist",{"_index":3960,"title":{"classes/SparkChartAssist.html":{}},"body":{"classes/SparkChartAssist.html":{}}}],["sparkchartgridconfig",{"_index":4009,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["sparkchartgridconfig(new",{"_index":4012,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["sparks",{"_index":3966,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["spec\\.ts",{"_index":4963,"title":{},"body":{"miscellaneous/variables.html":{}}}],["special",{"_index":3753,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"license.html":{}}}],["specific",{"_index":1948,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"license.html":{}}}],["specified",{"_index":772,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IScale.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"classes/LegendInteractionAssist.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{}}}],["specifying",{"_index":2849,"title":{},"body":{"interfaces/ISimpleThresholdZone.html":{},"injectables/ThresholdsService.html":{},"interfaces/ZoneCross.html":{},"miscellaneous/enumerations.html":{}}}],["square",{"_index":4922,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../automatic",{"_index":4856,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../bar",{"_index":4840,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../chart",{"_index":4863,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../constants.ts",{"_index":4842,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../datetime",{"_index":4852,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../grid.ts",{"_index":4839,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../palettes.ts",{"_index":4844,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../radial",{"_index":4849,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../test.ts",{"_index":4851,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../types.ts",{"_index":4491,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/chart",{"_index":796,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["src/chart/chart.component.ts",{"_index":851,"title":{},"body":{"components/ChartComponent.html":{}}}],["src/chart/chart.component.ts:33",{"_index":868,"title":{},"body":{"components/ChartComponent.html":{}}}],["src/chart/chart.component.ts:35",{"_index":870,"title":{},"body":{"components/ChartComponent.html":{}}}],["src/chart/chart.component.ts:37",{"_index":866,"title":{},"body":{"components/ChartComponent.html":{}}}],["src/chart/chart.component.ts:82",{"_index":869,"title":{},"body":{"components/ChartComponent.html":{}}}],["src/charts.module.ts",{"_index":3638,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["src/constants.ts",{"_index":4864,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/core/chart",{"_index":732,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{},"miscellaneous/enumerations.html":{}}}],["src/core/chart.ts",{"_index":523,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:149",{"_index":577,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:153",{"_index":579,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:157",{"_index":565,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:163",{"_index":555,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:173",{"_index":573,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:19",{"_index":543,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:20",{"_index":542,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:21",{"_index":546,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:22",{"_index":544,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:31",{"_index":540,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:41",{"_index":558,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:45",{"_index":556,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:49",{"_index":560,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:53",{"_index":559,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:57",{"_index":549,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:62",{"_index":567,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:70",{"_index":551,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:76",{"_index":569,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:82",{"_index":563,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:86",{"_index":554,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/common/chart",{"_index":1094,"title":{},"body":{"classes/ChartPlugin.html":{}}}],["src/core/common/data",{"_index":1511,"title":{},"body":{"classes/DataSeries.html":{}}}],["src/core/common/event",{"_index":1608,"title":{},"body":{"classes/EventBus.html":{}}}],["src/core/common/palette/chart",{"_index":1045,"title":{},"body":{"classes/ChartPalette.html":{}}}],["src/core/common/palette/mapped",{"_index":3462,"title":{},"body":{"classes/MappedValueProvider.html":{}}}],["src/core/common/palette/markers/path",{"_index":3664,"title":{},"body":{"classes/PathMarker.html":{}}}],["src/core/common/palette/markers/svg",{"_index":4063,"title":{},"body":{"classes/SvgMarker.html":{}}}],["src/core/common/palette/palettes.ts",{"_index":4883,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/core/common/palette/processed",{"_index":3708,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["src/core/common/palette/sequential",{"_index":3940,"title":{},"body":{"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{}}}],["src/core/common/palette/text",{"_index":4073,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["src/core/common/renderer.ts",{"_index":3812,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:108",{"_index":3829,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:117",{"_index":3828,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:129",{"_index":3825,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:153",{"_index":3824,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:170",{"_index":3821,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:190",{"_index":3826,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:23",{"_index":3817,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:38",{"_index":3815,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:40",{"_index":3816,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:45",{"_index":3819,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:53",{"_index":3820,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:63",{"_index":3823,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:74",{"_index":3822,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:85",{"_index":3827,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:95",{"_index":3818,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/scales/constants.ts",{"_index":4882,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/core/common/scales/domain",{"_index":4978,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/core/common/scales/formatters/datetime",{"_index":4964,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/core/common/scales/linear",{"_index":3423,"title":{},"body":{"classes/LinearScale.html":{}}}],["src/core/common/scales/noop",{"_index":3608,"title":{},"body":{"classes/NoopScale.html":{}}}],["src/core/common/scales/scale.ts",{"_index":3896,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:10",{"_index":3899,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:11",{"_index":3897,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:12",{"_index":3898,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:13",{"_index":3900,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:31",{"_index":3901,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:33",{"_index":3906,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:35",{"_index":3907,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:38",{"_index":3916,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:43",{"_index":3909,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:44",{"_index":3910,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:45",{"_index":3911,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:55",{"_index":3902,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:56",{"_index":3903,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:57",{"_index":3904,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:67",{"_index":3905,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:74",{"_index":3908,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:78",{"_index":3912,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:83",{"_index":3913,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:84",{"_index":3914,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:85",{"_index":3915,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/time",{"_index":4325,"title":{},"body":{"classes/TimeScale.html":{}}}],["src/core/common/scales/types.ts",{"_index":2126,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/core/common/scales/types.ts:103",{"_index":2294,"title":{},"body":{"interfaces/IScale.html":{}}}],["src/core/common/scales/types.ts:110",{"_index":2287,"title":{},"body":{"interfaces/IScale.html":{}}}],["src/core/common/scales/types.ts:117",{"_index":2288,"title":{},"body":{"interfaces/IScale.html":{}}}],["src/core/common/scales/types.ts:124",{"_index":2289,"title":{},"body":{"interfaces/IScale.html":{}}}],["src/core/common/scales/types.ts:129",{"_index":2295,"title":{},"body":{"interfaces/IScale.html":{}}}],["src/core/common/scales/types.ts:134",{"_index":2296,"title":{},"body":{"interfaces/IScale.html":{}}}],["src/core/common/scales/types.ts:141",{"_index":2297,"title":{},"body":{"interfaces/IScale.html":{}}}],["src/core/common/scales/types.ts:146",{"_index":2129,"title":{},"body":{"interfaces/IBandScale.html":{}}}],["src/core/common/scales/types.ts:16",{"_index":2223,"title":{},"body":{"interfaces/IFormatters.html":{}}}],["src/core/common/scales/types.ts:25",{"_index":3938,"title":{},"body":{"interfaces/ScalesIndex.html":{}}}],["src/core/common/scales/types.ts:66",{"_index":2291,"title":{},"body":{"interfaces/IScale.html":{}}}],["src/core/common/scales/types.ts:73",{"_index":2292,"title":{},"body":{"interfaces/IScale.html":{}}}],["src/core/common/scales/types.ts:81",{"_index":2286,"title":{},"body":{"interfaces/IScale.html":{}}}],["src/core/common/scales/types.ts:89",{"_index":2290,"title":{},"body":{"interfaces/IScale.html":{}}}],["src/core/common/scales/types.ts:96",{"_index":2293,"title":{},"body":{"interfaces/IScale.html":{}}}],["src/core/common/types.ts",{"_index":1872,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/core/common/types.ts:132",{"_index":2204,"title":{},"body":{"interfaces/IDataAccessors.html":{}}}],["src/core/common/types.ts:136",{"_index":2785,"title":{},"body":{"interfaces/ISeriesAccessors.html":{}}}],["src/core/common/types.ts:163",{"_index":2206,"title":{},"body":{"interfaces/IDataSeries.html":{}}}],["src/core/common/types.ts:190",{"_index":2197,"title":{},"body":{"interfaces/IChartMarker.html":{}}}],["src/core/common/types.ts:191",{"_index":2198,"title":{},"body":{"interfaces/IChartMarker.html":{}}}],["src/core/common/types.ts:196",{"_index":2185,"title":{},"body":{"interfaces/IChart.html":{}}}],["src/core/common/types.ts:197",{"_index":2184,"title":{},"body":{"interfaces/IChart.html":{}}}],["src/core/common/types.ts:198",{"_index":2187,"title":{},"body":{"interfaces/IChart.html":{}}}],["src/core/common/types.ts:199",{"_index":2186,"title":{},"body":{"interfaces/IChart.html":{}}}],["src/core/common/types.ts:200",{"_index":2181,"title":{},"body":{"interfaces/IChart.html":{}}}],["src/core/common/types.ts:201",{"_index":2188,"title":{},"body":{"interfaces/IChart.html":{}}}],["src/core/common/types.ts:202",{"_index":2182,"title":{},"body":{"interfaces/IChart.html":{}}}],["src/core/common/types.ts:203",{"_index":2190,"title":{},"body":{"interfaces/IChart.html":{}}}],["src/core/common/types.ts:204",{"_index":2191,"title":{},"body":{"interfaces/IChart.html":{}}}],["src/core/common/types.ts:205",{"_index":2189,"title":{},"body":{"interfaces/IChart.html":{}}}],["src/core/common/types.ts:206",{"_index":2183,"title":{},"body":{"interfaces/IChart.html":{}}}],["src/core/common/types.ts:222",{"_index":2200,"title":{},"body":{"interfaces/IChartPlugin.html":{}}}],["src/core/common/types.ts:225",{"_index":2201,"title":{},"body":{"interfaces/IChartPlugin.html":{}}}],["src/core/common/types.ts:228",{"_index":2202,"title":{},"body":{"interfaces/IChartPlugin.html":{}}}],["src/core/common/types.ts:231",{"_index":2199,"title":{},"body":{"interfaces/IChartPlugin.html":{}}}],["src/core/common/types.ts:248",{"_index":2281,"title":{},"body":{"interfaces/IRenderContainers.html":{}}}],["src/core/common/types.ts:311",{"_index":2205,"title":{},"body":{"interfaces/IDataPointsPayload.html":{}}}],["src/core/common/types.ts:342",{"_index":2786,"title":{},"body":{"interfaces/ISetDomainEventPayload.html":{}}}],["src/core/common/types.ts:347",{"_index":2863,"title":{},"body":{"interfaces/IValueProvider.html":{}}}],["src/core/common/types.ts:348",{"_index":2865,"title":{},"body":{"interfaces/IValueProvider.html":{}}}],["src/core/common/utility.service.ts",{"_index":4336,"title":{},"body":{"classes/UtilityService.html":{}}}],["src/core/common/utility.service.ts:179",{"_index":4354,"title":{},"body":{"classes/UtilityService.html":{}}}],["src/core/common/utility.service.ts:204",{"_index":4371,"title":{},"body":{"classes/UtilityService.html":{}}}],["src/core/common/utility.service.ts:224",{"_index":4365,"title":{},"body":{"classes/UtilityService.html":{}}}],["src/core/common/utility.service.ts:24",{"_index":4363,"title":{},"body":{"classes/UtilityService.html":{}}}],["src/core/common/utility.service.ts:63",{"_index":4345,"title":{},"body":{"classes/UtilityService.html":{}}}],["src/core/common/utility.service.ts:75",{"_index":4372,"title":{},"body":{"classes/UtilityService.html":{}}}],["src/core/common/utility.service.ts:92",{"_index":4348,"title":{},"body":{"classes/UtilityService.html":{}}}],["src/core/grid/config/area",{"_index":82,"title":{},"body":{"classes/AreaGridConfig.html":{}}}],["src/core/grid/config/axis",{"_index":151,"title":{},"body":{"classes/AxisConfig.html":{}}}],["src/core/grid/config/bar",{"_index":252,"title":{},"body":{"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{}}}],["src/core/grid/config/dimension",{"_index":1530,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["src/core/grid/config/grid",{"_index":1837,"title":{},"body":{"classes/GridConfig.html":{}}}],["src/core/grid/config/xy",{"_index":4452,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["src/core/grid/grid.ts",{"_index":1619,"title":{},"body":{"classes/Grid.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/core/grid/grid.ts:108",{"_index":1655,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:110",{"_index":1657,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:112",{"_index":1658,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:121",{"_index":1661,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:123",{"_index":1663,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:125",{"_index":1664,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:134",{"_index":1648,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:174",{"_index":1650,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:179",{"_index":1665,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:190",{"_index":1667,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:206",{"_index":1668,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:27",{"_index":1636,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:30",{"_index":1631,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:33",{"_index":1643,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:36",{"_index":1637,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:39",{"_index":1646,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:51",{"_index":1647,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:54",{"_index":1634,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:88",{"_index":1659,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:93",{"_index":1660,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/types.ts",{"_index":2007,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"miscellaneous/typealiases.html":{}}}],["src/core/grid/types.ts:100",{"_index":2210,"title":{},"body":{"interfaces/IDimensionConfig.html":{}}}],["src/core/grid/types.ts:221",{"_index":2229,"title":{},"body":{"interfaces/IGrid.html":{}}}],["src/core/grid/types.ts:228",{"_index":2228,"title":{},"body":{"interfaces/IGrid.html":{}}}],["src/core/grid/types.ts:235",{"_index":2230,"title":{},"body":{"interfaces/IGrid.html":{}}}],["src/core/grid/types.ts:243",{"_index":2231,"title":{},"body":{"interfaces/IGrid.html":{}}}],["src/core/grid/types.ts:244",{"_index":2232,"title":{},"body":{"interfaces/IGrid.html":{}}}],["src/core/grid/types.ts:251",{"_index":2226,"title":{},"body":{"interfaces/IGrid.html":{}}}],["src/core/grid/types.ts:259",{"_index":2227,"title":{},"body":{"interfaces/IGrid.html":{}}}],["src/core/grid/types.ts:266",{"_index":2224,"title":{},"body":{"interfaces/IGrid.html":{}}}],["src/core/grid/types.ts:273",{"_index":2233,"title":{},"body":{"interfaces/IGrid.html":{}}}],["src/core/grid/types.ts:281",{"_index":2234,"title":{},"body":{"interfaces/IGrid.html":{}}}],["src/core/grid/types.ts:288",{"_index":2235,"title":{},"body":{"interfaces/IGrid.html":{}}}],["src/core/grid/types.ts:295",{"_index":2225,"title":{},"body":{"interfaces/IGrid.html":{}}}],["src/core/grid/types.ts:53",{"_index":2213,"title":{},"body":{"interfaces/IDimensionConfig.html":{}}}],["src/core/grid/types.ts:59",{"_index":2214,"title":{},"body":{"interfaces/IDimensionConfig.html":{}}}],["src/core/grid/types.ts:66",{"_index":2207,"title":{},"body":{"interfaces/IDimensionConfig.html":{}}}],["src/core/grid/types.ts:72",{"_index":2208,"title":{},"body":{"interfaces/IDimensionConfig.html":{}}}],["src/core/grid/types.ts:80",{"_index":2211,"title":{},"body":{"interfaces/IDimensionConfig.html":{}}}],["src/core/grid/types.ts:86",{"_index":2212,"title":{},"body":{"interfaces/IDimensionConfig.html":{}}}],["src/core/grid/types.ts:94",{"_index":2209,"title":{},"body":{"interfaces/IDimensionConfig.html":{}}}],["src/core/grid/xy",{"_index":2299,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["src/core/plugins/chart",{"_index":947,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["src/core/plugins/interaction/interaction",{"_index":2977,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["src/core/plugins/radial",{"_index":3730,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["src/core/plugins/tooltips/bar",{"_index":434,"title":{},"body":{"classes/BarTooltipsPlugin.html":{}}}],["src/core/plugins/tooltips/chart",{"_index":1414,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"miscellaneous/variables.html":{}}}],["src/core/plugins/tooltips/radial",{"_index":3751,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["src/core/plugins/types.ts",{"_index":2215,"title":{},"body":{"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{}}}],["src/core/plugins/types.ts:6",{"_index":2239,"title":{},"body":{"interfaces/IInteractionValues.html":{}}}],["src/core/plugins/zoom",{"_index":2870,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["src/core/types.ts",{"_index":4492,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/legend/legend",{"_index":480,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["src/legend/legend.component.ts",{"_index":3079,"title":{},"body":{"components/LegendComponent.html":{}}}],["src/legend/legend.component.ts:16",{"_index":3099,"title":{},"body":{"components/LegendComponent.html":{}}}],["src/legend/legend.component.ts:21",{"_index":3085,"title":{},"body":{"components/LegendComponent.html":{}}}],["src/legend/legend.component.ts:26",{"_index":3086,"title":{},"body":{"components/LegendComponent.html":{}}}],["src/legend/legend.component.ts:31",{"_index":3092,"title":{},"body":{"components/LegendComponent.html":{}}}],["src/legend/legend.component.ts:36",{"_index":3093,"title":{},"body":{"components/LegendComponent.html":{}}}],["src/legend/legend.component.ts:41",{"_index":3095,"title":{},"body":{"components/LegendComponent.html":{}}}],["src/legend/legend.component.ts:46",{"_index":3097,"title":{},"body":{"components/LegendComponent.html":{}}}],["src/legend/types.ts",{"_index":4494,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/renderers/accessors/noop",{"_index":2267,"title":{},"body":{"interfaces/INoopAccessors.html":{},"classes/NoopAccessors.html":{}}}],["src/renderers/accessors/rectangle",{"_index":2277,"title":{},"body":{"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RectangleAccessors.html":{}}}],["src/renderers/accessors/xy",{"_index":2866,"title":{},"body":{"interfaces/IXYDataAccessors.html":{},"classes/XYAccessors.html":{}}}],["src/renderers/area/area",{"_index":6,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["src/renderers/bar/accessors/bar",{"_index":199,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["src/renderers/bar/accessors/horizontal",{"_index":1853,"title":{},"body":{"classes/HorizontalBarAccessors.html":{}}}],["src/renderers/bar/accessors/status",{"_index":2853,"title":{},"body":{"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{}}}],["src/renderers/bar/accessors/vertical",{"_index":4450,"title":{},"body":{"classes/VerticalBarAccessors.html":{}}}],["src/renderers/bar/highlight",{"_index":264,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["src/renderers/bar/types.ts",{"_index":2178,"title":{},"body":{"interfaces/IBarChartConfig.html":{},"interfaces/IStackMetadata.html":{}}}],["src/renderers/constants.ts",{"_index":4974,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/renderers/line/interaction",{"_index":3391,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["src/renderers/line/line",{"_index":2240,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["src/renderers/line/missing",{"_index":3546,"title":{},"body":{"classes/MissingDataLineRendererConfig.html":{}}}],["src/renderers/marker",{"_index":3479,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["src/renderers/noop",{"_index":3553,"title":{},"body":{"classes/NoopRenderer.html":{}}}],["src/renderers/radial/accessors/radial",{"_index":2270,"title":{},"body":{"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"classes/RadialAccessors.html":{}}}],["src/renderers/radial/gauge/donut",{"_index":1576,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["src/renderers/radial/pie",{"_index":3689,"title":{},"body":{"classes/PieRenderer.html":{}}}],["src/renderers/radial/radial",{"_index":4977,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/renderers/side",{"_index":2788,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["src/renderers/types.ts",{"_index":2064,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"miscellaneous/enumerations.html":{}}}],["src/renderers/types.ts:105",{"_index":2237,"title":{},"body":{"interfaces/IHighlightStrategy.html":{}}}],["src/renderers/types.ts:107",{"_index":2238,"title":{},"body":{"interfaces/IHighlightStrategy.html":{}}}],["src/renderers/types.ts:110",{"_index":2236,"title":{},"body":{"interfaces/IHighlightStrategy.html":{}}}],["src/renderers/xy",{"_index":4467,"title":{},"body":{"classes/XYRenderer.html":{}}}],["src/styles.less",{"_index":4533,"title":{},"body":{"index.html":{}}}],["src/test.ts",{"_index":4961,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/thresholds/thresholds",{"_index":4122,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["src/thresholds/types.ts",{"_index":2844,"title":{},"body":{"interfaces/ISimpleThresholdZone.html":{},"interfaces/ZoneCross.html":{},"miscellaneous/enumerations.html":{}}}],["sstring",{"_index":4419,"title":{},"body":{"classes/UtilityService.html":{}}}],["sstring.charcodeat(0",{"_index":4424,"title":{},"body":{"classes/UtilityService.html":{}}}],["sstring.length",{"_index":4421,"title":{},"body":{"classes/UtilityService.html":{}}}],["stack",{"_index":2760,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["stacked",{"_index":1685,"title":{},"body":{"classes/Grid.html":{}}}],["standard",{"_index":2801,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/SideIndicatorAccessors.html":{},"miscellaneous/variables.html":{}}}],["standard_render_layers",{"_index":2793,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/ZoomPlugin.html":{}}}],["standard_render_layers[renderlayername.foreground].order",{"_index":2911,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["standard_render_layers[renderlayername.unclippeddata",{"_index":2842,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["standardcolors",{"_index":1048,"title":{},"body":{"classes/ChartPalette.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["standards",{"_index":93,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{}}}],["start",{"_index":212,"title":{},"body":{"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"interfaces/ZoneCross.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["start.length",{"_index":365,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["startaccessor",{"_index":354,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["startaccessor?.(d",{"_index":359,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["started",{"_index":4495,"title":{"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["starting",{"_index":3765,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"injectables/ThresholdsService.html":{},"miscellaneous/variables.html":{}}}],["starts",{"_index":1375,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["startsimulation(tooltipindex",{"_index":1378,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["startx",{"_index":1861,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["starty",{"_index":1865,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["state",{"_index":738,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/SparkChartAssist.html":{},"classes/XYRenderer.html":{},"license.html":{}}}],["stated",{"_index":4666,"title":{},"body":{"license.html":{}}}],["statement",{"_index":4727,"title":{},"body":{"license.html":{}}}],["states",{"_index":3277,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["statestyles",{"_index":1915,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["static",{"_index":96,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/StatusAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{}}}],["stating",{"_index":4703,"title":{},"body":{"license.html":{}}}],["status",{"_index":417,"title":{"additional-documentation/chart-types/bar/status.html":{}},"body":{"classes/BarStatusGridConfig.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"components/LegendSeriesComponent.html":{},"classes/StatusAccessors.html":{},"injectables/ThresholdsService.html":{},"interfaces/ZoneCross.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/chart-types.html":{}}}],["status_category",{"_index":2856,"title":{},"body":{"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{}}}],["status_domain",{"_index":2857,"title":{},"body":{"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{}}}],["statusaccessors",{"_index":2855,"title":{"classes/StatusAccessors.html":{}},"body":{"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["statusaccessors(colorprovider",{"_index":4209,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["statusaccessors.status_category",{"_index":2858,"title":{},"body":{"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{}}}],["statuses",{"_index":4187,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["step",{"_index":4189,"title":{},"body":{"injectables/ThresholdsService.html":{},"index.html":{}}}],["still",{"_index":2934,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"injectables/ThresholdsService.html":{},"classes/ZoomPlugin.html":{}}}],["stop",{"_index":1371,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["stoppage",{"_index":4785,"title":{},"body":{"license.html":{}}}],["stored",{"_index":1956,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["strategies/bar",{"_index":265,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["strategies/line",{"_index":3392,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["strategy",{"_index":2103,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["strategy.ts",{"_index":267,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["strategy.ts:12",{"_index":410,"title":{},"body":{"classes/BarSeriesHighlightStrategy.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["strategy.ts:120",{"_index":298,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["strategy.ts:14",{"_index":3395,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["strategy.ts:19",{"_index":278,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["strategy.ts:21",{"_index":414,"title":{},"body":{"classes/BarSeriesHighlightStrategy.html":{}}}],["strategy.ts:28",{"_index":304,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["strategy.ts:32",{"_index":413,"title":{},"body":{"classes/BarSeriesHighlightStrategy.html":{}}}],["strategy.ts:39",{"_index":301,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["strategy.ts:61",{"_index":3396,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["strategy.ts:65",{"_index":415,"title":{},"body":{"classes/BarSeriesHighlightStrategy.html":{}}}],["strategy.ts:66",{"_index":3397,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["strategy.ts:75",{"_index":412,"title":{},"body":{"classes/BarSeriesHighlightStrategy.html":{}}}],["strategy.ts:92",{"_index":307,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["stream",{"_index":1188,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/LegendInteractionAssist.html":{}}}],["streamid",{"_index":1614,"title":{},"body":{"classes/EventBus.html":{}}}],["streams",{"_index":1615,"title":{},"body":{"classes/EventBus.html":{}}}],["strength(0.5",{"_index":1400,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["strict",{"_index":628,"title":{},"body":{"classes/Chart.html":{}}}],["string",{"_index":134,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["string(value",{"_index":4420,"title":{},"body":{"classes/UtilityService.html":{}}}],["string).pipe",{"_index":1199,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["string).touppercase",{"_index":351,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["stringid",{"_index":1451,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["stroke",{"_index":2028,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/PathMarker.html":{},"classes/ZoomPlugin.html":{}}}],["strokelinecap",{"_index":2101,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["strokestyle",{"_index":2098,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/MissingDataLineRendererConfig.html":{},"injectables/ThresholdsService.html":{}}}],["strokewidth",{"_index":1934,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/MissingDataLineRendererConfig.html":{},"injectables/ThresholdsService.html":{}}}],["structure",{"_index":1945,"title":{"additional-documentation/advanced-usage/input-structure.html":{}},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"index.html":{},"additional-documentation/advanced-usage.html":{}}}],["style",{"_index":719,"title":{},"body":{"classes/Chart.html":{},"components/ChartTooltipComponent.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"miscellaneous/typealiases.html":{}}}],["style(\"pointer",{"_index":2945,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["style(\"text",{"_index":3034,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["style(this.isvertical",{"_index":1409,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["styledsvg",{"_index":4069,"title":{},"body":{"classes/SvgMarker.html":{}}}],["styles",{"_index":2068,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"index.html":{}}}],["styleurls",{"_index":491,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["subject",{"_index":297,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"license.html":{}}}],["sublicense",{"_index":4663,"title":{},"body":{"license.html":{}}}],["submission",{"_index":4729,"title":{},"body":{"license.html":{}}}],["submit",{"_index":4626,"title":{},"body":{"license.html":{}}}],["submitted",{"_index":4624,"title":{},"body":{"license.html":{}}}],["subscribe",{"_index":652,"title":{},"body":{"classes/Chart.html":{},"components/ChartPopoverComponent.html":{}}}],["subscribe((chartevent",{"_index":2913,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["subscribe((d",{"_index":649,"title":{},"body":{"classes/Chart.html":{}}}],["subscribe((event",{"_index":1200,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{}}}],["subscribe((position",{"_index":1131,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["subscribe((rs",{"_index":655,"title":{},"body":{"classes/Chart.html":{}}}],["subscribers",{"_index":3101,"title":{},"body":{"components/LegendComponent.html":{}}}],["subscribing",{"_index":3158,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["subscription",{"_index":936,"title":{},"body":{"components/ChartDonutContentComponent.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{}}}],["subsequently",{"_index":4648,"title":{},"body":{"license.html":{}}}],["substitute",{"_index":4895,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subtract",{"_index":3030,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["subtracting",{"_index":2024,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["successfully",{"_index":1254,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["such",{"_index":3160,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"license.html":{}}}],["suggested",{"_index":901,"title":{},"body":{"components/ChartComponent.html":{}}}],["summary",{"_index":4151,"title":{},"body":{"injectables/ThresholdsService.html":{},"miscellaneous/variables.html":{}}}],["super",{"_index":144,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LineAccessors.html":{},"classes/XYGridConfig.html":{},"classes/ZoomPlugin.html":{}}}],["super(colorprovider",{"_index":1860,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["super(colors",{"_index":3946,"title":{},"body":{"classes/SequentialColorProvider.html":{}}}],["super(config",{"_index":2813,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["super(id",{"_index":3454,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["super(markers",{"_index":3945,"title":{},"body":{"classes/SequentialChartMarkerProvider.html":{}}}],["super(sourceprovider",{"_index":4088,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["super.build",{"_index":2371,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["super.getabsoluteposition(relativeposition",{"_index":3788,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["super.update",{"_index":2414,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["super.updateranges",{"_index":2459,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["supersede",{"_index":4736,"title":{},"body":{"license.html":{}}}],["support",{"_index":4797,"title":{},"body":{"license.html":{},"modules.html":{}}}],["supporting",{"_index":2249,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["supports",{"_index":4411,"title":{},"body":{"classes/UtilityService.html":{}}}],["svg",{"_index":664,"title":{},"body":{"classes/Chart.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/MarkerUtils.html":{},"classes/PathMarker.html":{},"classes/RadialPopoverPlugin.html":{},"classes/SvgMarker.html":{},"classes/ZoomPlugin.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["svg_padding",{"_index":1007,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["svgcontainerelement",{"_index":1025,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["svgcontainerelement.getbbox",{"_index":1032,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["svgcontainerelement.innerhtml",{"_index":1027,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["svgcontainerelement.insertadjacenthtml(\"beforeend",{"_index":1029,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["svgcontent",{"_index":985,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["svgelement",{"_index":1796,"title":{},"body":{"classes/Grid.html":{}}}],["svgelements",{"_index":1756,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["svgmarker",{"_index":4062,"title":{"classes/SvgMarker.html":{}},"body":{"classes/SvgMarker.html":{},"miscellaneous/variables.html":{}}}],["svgmarker(s",{"_index":4886,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sw",{"_index":2624,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["switch",{"_index":3089,"title":{},"body":{"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{}}}],["switchmap",{"_index":3134,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["switchmap(highlightdata",{"_index":3196,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["symmetry",{"_index":1260,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["sync",{"_index":1689,"title":{},"body":{"classes/Grid.html":{}}}],["synchandlermap",{"_index":3162,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["synchronization",{"_index":2259,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["synchronize",{"_index":3232,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["synchronized",{"_index":3237,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["syncsubscription",{"_index":3164,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["syncwithchartassist",{"_index":3250,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["syncwithchartassist(chartassist",{"_index":3238,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["syntax",{"_index":4818,"title":{},"body":{"license.html":{}}}],["systems",{"_index":4636,"title":{},"body":{"license.html":{}}}],["t",{"_index":1893,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialValueProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{}}}],["t,i",{"_index":4362,"title":{},"body":{"classes/UtilityService.html":{}}}],["t,index",{"_index":4353,"title":{},"body":{"classes/UtilityService.html":{}}}],["tabs",{"_index":3975,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["take",{"_index":4236,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["taken",{"_index":3777,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["takeuntil",{"_index":583,"title":{},"body":{"classes/Chart.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/ZoomPlugin.html":{}}}],["takeuntil(chartassist.chart.geteventbus().getstream(destroy_event",{"_index":3244,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["takeuntil(this.destroy",{"_index":1129,"title":{},"body":{"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["takeuntil(this.eventbus.getstream(destroy_event",{"_index":2375,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["takeuntil(this.geteventbus().getstream(destroy_event",{"_index":647,"title":{},"body":{"classes/Chart.html":{}}}],["takeuntil(this.initplugin",{"_index":1128,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["target",{"_index":384,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/Chart.html":{},"components/ChartComponent.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialPopoverPlugin.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYRenderer.html":{}}}],["target(target",{"_index":1662,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["target.append(\"g",{"_index":3051,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/MarkerUtils.html":{}}}],["target.append(\"path",{"_index":3404,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["target.append(\"rect\").attrs",{"_index":2830,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["target.node().getboundingclientrect",{"_index":3868,"title":{},"body":{"classes/Renderer.html":{}}}],["target.on(nativeevent",{"_index":3867,"title":{},"body":{"classes/Renderer.html":{}}}],["target.select(\"path.interaction",{"_index":3400,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["target.select(\"rect",{"_index":2821,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["target.select(`g.${classname",{"_index":3510,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["target.select(`g.${classname}`).remove",{"_index":3544,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["target.selectall(`g",{"_index":391,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["targetevent",{"_index":3866,"title":{},"body":{"classes/Renderer.html":{}}}],["technically",{"_index":3641,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["template",{"_index":880,"title":{},"body":{"components/ChartComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["templateref",{"_index":1110,"title":{},"body":{"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{}}}],["templateurl",{"_index":493,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["ten",{"_index":4906,"title":{},"body":{"miscellaneous/variables.html":{}}}],["terminate",{"_index":4688,"title":{},"body":{"license.html":{}}}],["terms",{"_index":4553,"title":{},"body":{"license.html":{}}}],["test",{"_index":4396,"title":{},"body":{"classes/UtilityService.html":{}}}],["testtext",{"_index":2584,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["testtext.classed(\"sample",{"_index":2586,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["testtext.remove",{"_index":2590,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["text",{"_index":180,"title":{},"body":{"classes/AxisConfig.html":{},"classes/ChartPalette.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/InteractionLabelPlugin.html":{},"components/RichLegendTileComponent.html":{},"license.html":{}}}],["text\").node",{"_index":2737,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["text(labelcontent",{"_index":3025,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["text)\").each(function",{"_index":2609,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["text):last",{"_index":2735,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["textcolorprovider",{"_index":1070,"title":{"classes/TextColorProvider.html":{}},"body":{"classes/ChartPalette.html":{},"classes/TextColorProvider.html":{}}}],["textcolorprovider(this.standardcolors",{"_index":1079,"title":{},"body":{"classes/ChartPalette.html":{}}}],["textcolors",{"_index":1050,"title":{},"body":{"classes/ChartPalette.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["textinsidenext",{"_index":2641,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["textofticks",{"_index":2503,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["textofticks.push(this",{"_index":2508,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["textoverflowhandler",{"_index":2033,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"miscellaneous/typealiases.html":{}}}],["textpadding",{"_index":2671,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["textselection",{"_index":2034,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/InteractionLabelPlugin.html":{}}}],["textselection.node",{"_index":3026,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["texttohide",{"_index":2540,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["texttohide.foreach((group",{"_index":2543,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["theory",{"_index":4769,"title":{},"body":{"license.html":{}}}],["thereof",{"_index":4620,"title":{},"body":{"license.html":{}}}],["thick",{"_index":4460,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["thickness",{"_index":214,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYGridConfig.html":{},"classes/RectangleAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["thicknessmap",{"_index":4141,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["thicknessmap[d.__thresholds.status",{"_index":4221,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["thicknessmap[d.status",{"_index":4211,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["thicknessx",{"_index":2280,"title":{},"body":{"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["thicknessy",{"_index":1868,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RectangleAccessors.html":{}}}],["things",{"_index":345,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["third",{"_index":4715,"title":{},"body":{"license.html":{}}}],["this._active",{"_index":3355,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this._approximateticks",{"_index":193,"title":{},"body":{"classes/AxisConfig.html":{}}}],["this._backgroundcolors",{"_index":1085,"title":{},"body":{"classes/ChartPalette.html":{}}}],["this._bottomscaleid",{"_index":2345,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this._config",{"_index":1709,"title":{},"body":{"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{}}}],["this._config.borders.bottom?.visible",{"_index":1822,"title":{},"body":{"classes/Grid.html":{}}}],["this._config.borders.left?.visible",{"_index":1836,"title":{},"body":{"classes/Grid.html":{}}}],["this._config.borders.right?.visible",{"_index":1833,"title":{},"body":{"classes/Grid.html":{}}}],["this._config.borders.top?.visible",{"_index":1830,"title":{},"body":{"classes/Grid.html":{}}}],["this._config.dimension",{"_index":2692,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this._config.dimension.height",{"_index":2546,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this._config.dimension.margin",{"_index":2770,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this._config.dimension.marginlocked",{"_index":2602,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this._config.dimension.width",{"_index":2542,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this._d3scale",{"_index":3920,"title":{},"body":{"classes/Scale.html":{}}}],["this._d3scale(value",{"_index":3457,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["this._d3scale.domain",{"_index":3930,"title":{},"body":{"classes/Scale.html":{}}}],["this._d3scale.domain(domain",{"_index":3929,"title":{},"body":{"classes/Scale.html":{}}}],["this._d3scale.invert(coordinate",{"_index":3458,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["this._d3scale.range",{"_index":3927,"title":{},"body":{"classes/Scale.html":{}}}],["this._d3scale.range(this.isreversed",{"_index":3925,"title":{},"body":{"classes/Scale.html":{}}}],["this._height",{"_index":1565,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["this._interactive",{"_index":3357,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this._leftscaleid",{"_index":2349,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this._rightscaleid",{"_index":2353,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this._scales",{"_index":1707,"title":{},"body":{"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{}}}],["this._scales[scalekey]?.list?.filter((scale",{"_index":2359,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this._seriesrenderstate",{"_index":3359,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this._standardcolors",{"_index":1077,"title":{},"body":{"classes/ChartPalette.html":{}}}],["this._target",{"_index":1711,"title":{},"body":{"classes/Grid.html":{}}}],["this._target.append(\"clippath",{"_index":1785,"title":{},"body":{"classes/Grid.html":{}}}],["this._target.append(\"g",{"_index":1715,"title":{},"body":{"classes/Grid.html":{}}}],["this._textcolors",{"_index":1078,"title":{},"body":{"classes/ChartPalette.html":{}}}],["this._width",{"_index":1563,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["this.accessors",{"_index":1526,"title":{},"body":{"classes/DataSeries.html":{}}}],["this.activechanged.complete",{"_index":3106,"title":{},"body":{"components/LegendComponent.html":{}}}],["this.activechanged.emit(this.active",{"_index":3105,"title":{},"body":{"components/LegendComponent.html":{}}}],["this.addplugin(gridplugin",{"_index":644,"title":{},"body":{"classes/Chart.html":{}}}],["this.addplugin(new",{"_index":641,"title":{},"body":{"classes/Chart.html":{}}}],["this.addplugin(plugin",{"_index":623,"title":{},"body":{"classes/Chart.html":{}}}],["this.adjustaxisticks(axis.labelgroup",{"_index":2433,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.adjustrenderingarea",{"_index":1732,"title":{},"body":{"classes/Grid.html":{}}}],["this.applydefaults(s",{"_index":3207,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.arelabelupdatesenabled",{"_index":3001,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["this.aremarginsapproximatelyequal(oldmargin",{"_index":2769,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.avoidtooltipcollisions",{"_index":1349,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.axis.bottom.fit",{"_index":405,"title":{},"body":{"classes/BarHorizontalGridConfig.html":{}}}],["this.axis.bottom.gridticks",{"_index":259,"title":{},"body":{"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{}}}],["this.axis.bottom.ticklabel.horizontalpadding",{"_index":4466,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["this.axis.bottom.ticksize",{"_index":261,"title":{},"body":{"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{}}}],["this.axis.bottom.visible",{"_index":423,"title":{},"body":{"classes/BarStatusGridConfig.html":{}}}],["this.axis.left.fit",{"_index":260,"title":{},"body":{"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{}}}],["this.axis.left.gridticks",{"_index":257,"title":{},"body":{"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["this.axis.left.padding",{"_index":4462,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["this.axis.left.ticksize",{"_index":258,"title":{},"body":{"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["this.axis.left.visible",{"_index":424,"title":{},"body":{"classes/BarStatusGridConfig.html":{}}}],["this.axis.right.fit",{"_index":4463,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["this.axis.right.padding",{"_index":4465,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["this.axis.right.ticksize",{"_index":4464,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["this.axisx",{"_index":2470,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisx.group",{"_index":2626,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisx.group.append(\"g",{"_index":2628,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisx.group.attr(\"transform",{"_index":2464,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisx.labelgroup",{"_index":2629,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisx.labelgroup.attr(\"transform",{"_index":2467,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisx.labelgroup.select(\".tick:not(.tick",{"_index":2734,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisx.tickgroup",{"_index":2627,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisyleft",{"_index":2484,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisyleft.group",{"_index":2383,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisyleft.group.append(\"g",{"_index":2631,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisyleft.labelgroup",{"_index":2632,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisyleft.labelgroup.attr",{"_index":2479,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisyleft.tickgroup",{"_index":2630,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisyright",{"_index":2498,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisyright.group",{"_index":2633,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisyright.group.append(\"g",{"_index":2635,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisyright.labelgroup",{"_index":2636,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisyright.labelgroup.attr",{"_index":2493,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisyright.tickgroup",{"_index":2634,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisyright.tickgroup.attr",{"_index":2495,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisyright?.group",{"_index":2384,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.backgroundcolor",{"_index":3886,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["this.baraccessors.data",{"_index":2859,"title":{},"body":{"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{}}}],["this.baraccessors.series",{"_index":2860,"title":{},"body":{"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{}}}],["this.borders",{"_index":1738,"title":{},"body":{"classes/Grid.html":{}}}],["this.borders.bottom",{"_index":1812,"title":{},"body":{"classes/Grid.html":{},"classes/XYGridConfig.html":{}}}],["this.borders.bottom.visible",{"_index":408,"title":{},"body":{"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{}}}],["this.borders.left",{"_index":1834,"title":{},"body":{"classes/Grid.html":{},"classes/XYGridConfig.html":{}}}],["this.borders.left.visible",{"_index":407,"title":{},"body":{"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["this.borders.right",{"_index":1831,"title":{},"body":{"classes/Grid.html":{}}}],["this.borders.top",{"_index":1826,"title":{},"body":{"classes/Grid.html":{}}}],["this.bottomscaleid",{"_index":2365,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.brush",{"_index":2924,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.brush(this.zoombrushlayer.select(\".brush",{"_index":2943,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.brush.extent([[0",{"_index":2941,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.brush.move(this.brushelement",{"_index":2960,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.brushelement",{"_index":2925,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.brushelement.select(\".overlay",{"_index":2944,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.brushelement.select(\".selection",{"_index":2950,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.brushend",{"_index":2903,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.brushmove",{"_index":2901,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.brushstart",{"_index":2900,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.brushstartx",{"_index":2956,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.buildaxes(this.gridelementslayer",{"_index":2373,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.buildborders(this.gridelementslayer",{"_index":1737,"title":{},"body":{"classes/Grid.html":{}}}],["this.builddatamanager",{"_index":639,"title":{},"body":{"classes/Chart.html":{}}}],["this.buildgrid",{"_index":638,"title":{},"body":{"classes/Chart.html":{}}}],["this.buildinteractionlabel(this.interactionlabellayer",{"_index":3017,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["this.buildrenderengine(this.grid.getlasagna",{"_index":640,"title":{},"body":{"classes/Chart.html":{}}}],["this.buildrenderingarea(clippathid",{"_index":1731,"title":{},"body":{"classes/Grid.html":{}}}],["this.calculateaxesstyles(e",{"_index":2385,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.cd.detectchanges",{"_index":911,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.changedetector.detectchanges",{"_index":1332,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/RichLegendTileComponent.html":{}}}],["this.changedetector.markforcheck",{"_index":1043,"title":{},"body":{"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{}}}],["this.chart",{"_index":893,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.chart.build(this.elref.nativeelement",{"_index":894,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.chart.getdatamanager().chartseriesset.reduce((prev",{"_index":960,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["this.chart.getdatamanager().getchartseries(datapoint.seriesid",{"_index":1483,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.chart.geteventbus().getstream(chart_view_status_event",{"_index":1467,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["this.chart.geteventbus().getstream(chart_view_status_event).next",{"_index":923,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.chart.geteventbus().getstream(interaction_coordinates_event",{"_index":2912,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.chart.geteventbus().getstream(interaction_data_points_event",{"_index":1459,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.chart.geteventbus().getstream(interaction_data_points_event).asobservable",{"_index":3187,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.chart.geteventbus().getstream(interaction_values_active_event).next",{"_index":2955,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.chart.geteventbus().getstream(interaction_values_event",{"_index":2995,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["this.chart.geteventbus().getstream(refresh_event).subscribe",{"_index":897,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.chart.geteventbus().getstream(series_state_change_event",{"_index":1463,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.chart.geteventbus().getstream(set_domain_event).next",{"_index":2976,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.chart.geteventbus().getstream(this.config.eventstreamid",{"_index":1198,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.chart.getgrid",{"_index":2904,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/ZoomPlugin.html":{}}}],["this.chart.getgrid().config().dimension",{"_index":3029,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["this.chart.getgrid().config().dimension.height",{"_index":3072,"title":{},"body":{"classes/InteractionLinePlugin.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["this.chart.getgrid().config().dimension.margin.left",{"_index":1228,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialPopoverPlugin.html":{}}}],["this.chart.getgrid().config().dimension.margin.top",{"_index":1230,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.chart.getgrid().config().dimension.outerheight",{"_index":975,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["this.chart.getgrid().config().dimension.outerwidth",{"_index":976,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["this.chart.getgrid().config().dimension.width",{"_index":3749,"title":{},"body":{"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["this.chart.getgrid().getinteractivearea",{"_index":2935,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.chart.getgrid().getlasagna().addlayer",{"_index":2992,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["this.chart.getgrid().getlasagna().removelayer(interactionlabelplugin.layer_name",{"_index":3049,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["this.chart.getgrid().getlasagna().removelayer(interactionlineplugin.layer_name",{"_index":3078,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["this.chart.getgrid().scales",{"_index":3000,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["this.chart.setseriesstates(this.legendinteractionassist.getseriesstates",{"_index":3267,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.chart.target?.node()?.parentnode",{"_index":1219,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialPopoverPlugin.html":{}}}],["this.chart.update(seriesset",{"_index":3212,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.chart.updatedimensions",{"_index":898,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.chart?.destroy",{"_index":910,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.chartassist.getvisibleserieswithlegend",{"_index":3298,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.chartassistsubject.next",{"_index":3216,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.chartcollectionservice.getchartcollection(this.collectionid).addchart(this.chartcomponent.chart",{"_index":833,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["this.closepending",{"_index":1343,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.closepopoversubject",{"_index":1214,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.closepopoversubject.complete",{"_index":1215,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.closepopoversubject.next",{"_index":1263,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.closetimeout",{"_index":1354,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.closetooltips.next",{"_index":1355,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.collections[collectionid",{"_index":849,"title":{},"body":{"injectables/ChartCollectionService.html":{}}}],["this.collisiontimeout",{"_index":1348,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.colorprovider",{"_index":73,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"classes/LineAccessors.html":{},"classes/RadialAccessors.html":{}}}],["this.colorprovider.get",{"_index":74,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"classes/LineAccessors.html":{},"classes/RadialAccessors.html":{}}}],["this.config",{"_index":1195,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/Grid.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/ZoomPlugin.html":{}}}],["this.config().axis",{"_index":2462,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.config().axis.bottom",{"_index":2366,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.config().axis.bottom.visible",{"_index":2611,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.config().axis.left",{"_index":2357,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.config().axis.right",{"_index":2364,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.config().axis.right.visible",{"_index":2617,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.config().borders",{"_index":1758,"title":{},"body":{"classes/Grid.html":{}}}],["this.config().cursor",{"_index":2412,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.config().dimension",{"_index":1743,"title":{},"body":{"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{}}}],["this.config().dimension.height",{"_index":1815,"title":{},"body":{"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{}}}],["this.config().dimension.margin",{"_index":2548,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.config().dimension.margin.left",{"_index":2725,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.config().dimension.margin.top",{"_index":2727,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.config().dimension.width",{"_index":1817,"title":{},"body":{"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{}}}],["this.config().interactionplugins",{"_index":2413,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.config().interactive",{"_index":2372,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.config(config",{"_index":1713,"title":{},"body":{"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{}}}],["this.config.enableexternalevents",{"_index":2915,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.config.interactiontype",{"_index":1202,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.config.statestyles",{"_index":3838,"title":{},"body":{"classes/Renderer.html":{}}}],["this.config.statestyles[state",{"_index":3840,"title":{},"body":{"classes/Renderer.html":{}}}],["this.configurecharteventsubscriptions(chart.geteventbus",{"_index":3168,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.configurecssfilters",{"_index":637,"title":{},"body":{"classes/Chart.html":{}}}],["this.configureeventsubscriptions(chart.geteventbus",{"_index":4041,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.container",{"_index":1714,"title":{},"body":{"classes/Grid.html":{}}}],["this.contentposition",{"_index":944,"title":{},"body":{"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{}}}],["this.contentpositionupdatesubject.complete",{"_index":972,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["this.contentpositionupdatesubject.next(this.contentposition",{"_index":971,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["this.contentpositionupdatesubscription",{"_index":942,"title":{},"body":{"components/ChartDonutContentComponent.html":{}}}],["this.contentpositionupdatesubscription.unsubscribe",{"_index":946,"title":{},"body":{"components/ChartDonutContentComponent.html":{}}}],["this.contentpositionupdatesubscription?.unsubscribe",{"_index":941,"title":{},"body":{"components/ChartDonutContentComponent.html":{}}}],["this.createborder(container",{"_index":1771,"title":{},"body":{"classes/Grid.html":{}}}],["this.createchart(lastspark",{"_index":4032,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.created3scale",{"_index":3921,"title":{},"body":{"classes/Scale.html":{}}}],["this.data",{"_index":56,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"classes/DataSeries.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/NoopAccessors.html":{},"classes/RadialAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["this.data.category(d",{"_index":1866,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["this.data.defined",{"_index":2262,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["this.data.end(d",{"_index":1864,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["this.data.start(d",{"_index":1862,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["this.data.thickness",{"_index":1869,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["this.data.thickness(d",{"_index":1870,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["this.data.value",{"_index":238,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["this.data.value(data",{"_index":243,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["this.data.x(d",{"_index":61,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["this.data.x0(d",{"_index":65,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["this.data.x1(d",{"_index":67,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["this.data.y(d",{"_index":63,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["this.data.y0(d",{"_index":69,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["this.data.y1(d",{"_index":71,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["this.datamanager",{"_index":613,"title":{},"body":{"classes/Chart.html":{}}}],["this.datamanager.scalesindexbykey",{"_index":695,"title":{},"body":{"classes/Chart.html":{}}}],["this.datamanager.update(seriesset",{"_index":693,"title":{},"body":{"classes/Chart.html":{}}}],["this.datamanager.updatescaledomains",{"_index":696,"title":{},"body":{"classes/Chart.html":{}}}],["this.datapointpositions[seriesid",{"_index":1486,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.datapoints",{"_index":1250,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.datapoints[seriesid",{"_index":1482,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.default_config",{"_index":1197,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["this.defaultvalue",{"_index":3477,"title":{},"body":{"classes/MappedValueProvider.html":{}}}],["this.destroy",{"_index":1216,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.destroy$.complete",{"_index":1124,"title":{},"body":{"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/ZoomPlugin.html":{}}}],["this.destroy$.next",{"_index":1123,"title":{},"body":{"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/ZoomPlugin.html":{}}}],["this.dimension.autoheight",{"_index":425,"title":{},"body":{"classes/BarStatusGridConfig.html":{}}}],["this.dimension.height(30",{"_index":428,"title":{},"body":{"classes/BarStatusGridConfig.html":{}}}],["this.dimension.margin",{"_index":4457,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["this.dimension.margin.bottom",{"_index":427,"title":{},"body":{"classes/BarStatusGridConfig.html":{}}}],["this.dimension.margin.right",{"_index":262,"title":{},"body":{"classes/BarGridConfig.html":{}}}],["this.dimension.margin.top",{"_index":426,"title":{},"body":{"classes/BarStatusGridConfig.html":{}}}],["this.dimension.padding",{"_index":4455,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["this.dimension.padding.bottom",{"_index":145,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{}}}],["this.dimension.padding.left",{"_index":406,"title":{},"body":{"classes/BarHorizontalGridConfig.html":{}}}],["this.domain().findindex((value",{"_index":3459,"title":{},"body":{"classes/LinearScale.html":{},"classes/Scale.html":{},"classes/TimeScale.html":{}}}],["this.domain(domain",{"_index":3932,"title":{},"body":{"classes/Scale.html":{}}}],["this.drawgrids",{"_index":2485,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.drawgrids(axis.bottom",{"_index":2471,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.drawline",{"_index":1028,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["this.drawticks(axis.bottom",{"_index":2469,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.drawticks(axis.left",{"_index":2483,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.drawticks(axis.right",{"_index":2497,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.element",{"_index":625,"title":{},"body":{"classes/Chart.html":{},"classes/PathMarker.html":{}}}],["this.element.clientheight",{"_index":712,"title":{},"body":{"classes/Chart.html":{}}}],["this.element.clientwidth",{"_index":715,"title":{},"body":{"classes/Chart.html":{}}}],["this.element.nativeelement.style.left",{"_index":1139,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["this.element.nativeelement.style.top",{"_index":1141,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["this.element.outerhtml",{"_index":3687,"title":{},"body":{"classes/PathMarker.html":{}}}],["this.element.setattribute(attr",{"_index":3682,"title":{},"body":{"classes/PathMarker.html":{}}}],["this.emitevent(renderer",{"_index":3416,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["this.emphasisstate",{"_index":792,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{}}}],["this.emphasizeseries",{"_index":3174,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.emphasizeseries(data.seriesid",{"_index":3259,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.emphasizeseries(legendseries[0].id",{"_index":3301,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.eventbus",{"_index":612,"title":{},"body":{"classes/Chart.html":{}}}],["this.eventbus.destroy",{"_index":686,"title":{},"body":{"classes/Chart.html":{}}}],["this.eventbus.getstream(axes_style_change_event).next",{"_index":2379,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.eventbus.getstream(destroy_event).next",{"_index":685,"title":{},"body":{"classes/Chart.html":{}}}],["this.eventbus.getstream(series_state_change_event).next",{"_index":691,"title":{},"body":{"classes/Chart.html":{}}}],["this.eventbus.getstream(series_state_change_event).pipe(untildestroy()).subscribe((e",{"_index":2376,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.filterdatabydomain(filtereddata",{"_index":3849,"title":{},"body":{"classes/Renderer.html":{}}}],["this.filterdefs",{"_index":658,"title":{},"body":{"classes/Chart.html":{}}}],["this.filterdefs?.append(\"filter",{"_index":666,"title":{},"body":{"classes/Chart.html":{}}}],["this.filterrepeatedelements(textofticks",{"_index":2510,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.finddatapointbyvalue(series",{"_index":348,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["this.findnearestindex(haystack",{"_index":4387,"title":{},"body":{"classes/UtilityService.html":{}}}],["this.fitbottomaxis(d",{"_index":2714,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.fn(clr",{"_index":3726,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["this.formatters.tick",{"_index":3455,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["this.getabsoluteposition(tooltiprelativeposition",{"_index":1487,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.getabsoluteposition(validdatapointsvalues",{"_index":1249,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.getbackgroundsdataforcontinuousscale(sourceseries",{"_index":4222,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["this.getbreakpoints(sourceseries",{"_index":4230,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["this.getcontentposition(radius",{"_index":970,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["this.getcontrastratio(rgbinput",{"_index":4092,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["this.getcrosspointwithy(xy1",{"_index":4233,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["this.getdomain(filtereddata",{"_index":3851,"title":{},"body":{"classes/Renderer.html":{}}}],["this.getelementstohide(axislabels",{"_index":2541,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.getgrid().buildplugins(this",{"_index":643,"title":{},"body":{"classes/Chart.html":{}}}],["this.getinteractivearea",{"_index":2411,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.getmaxtextwidth(array",{"_index":2659,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.getmaxtextwidth(this.selectallaxislabels(this.axisyleft.labelgroup",{"_index":2701,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.getmaxtextwidth(this.selectallaxislabels(this.axisyright.labelgroup",{"_index":2706,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.getouterwidthdimensioncorrection",{"_index":1745,"title":{},"body":{"classes/Grid.html":{}}}],["this.getoverlayposition(a",{"_index":3786,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["this.getrelativeluminance(color1",{"_index":4106,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["this.getrelativeluminance(color2",{"_index":4108,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["this.getsectionindex(angle",{"_index":3801,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["this.getseriesgroups(seriesset",{"_index":3272,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.getsinglevalue(data",{"_index":228,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["this.gettextmeasurement(array",{"_index":2661,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.gettextmeasurement(elementstofilter",{"_index":2653,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.getthresholdline(limit.series",{"_index":4278,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["this.gettickdistance(array",{"_index":2660,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.gettickdistance(axislabels",{"_index":2560,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.gettooltipposition(datapoint",{"_index":1485,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.getvisibleserieswithlegend",{"_index":3240,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.getvisibleserieswithlegendbackup",{"_index":3239,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.grid",{"_index":615,"title":{},"body":{"classes/Chart.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.grid.build",{"_index":677,"title":{},"body":{"classes/Chart.html":{}}}],["this.grid.config().dimension",{"_index":700,"title":{},"body":{"classes/Chart.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.grid.config().dimension.width",{"_index":2971,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.grid.getlasagna().addlayer",{"_index":2906,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.grid.getlasagna().removelayer(zoomplugin.layer_name",{"_index":2952,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.grid.scales",{"_index":694,"title":{},"body":{"classes/Chart.html":{}}}],["this.grid.scales.x.list",{"_index":2963,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.grid.target(this.target",{"_index":676,"title":{},"body":{"classes/Chart.html":{}}}],["this.grid.updatedimensions(dimensions",{"_index":716,"title":{},"body":{"classes/Chart.html":{}}}],["this.grid.updateranges",{"_index":697,"title":{},"body":{"classes/Chart.html":{}}}],["this.gridconfig",{"_index":4011,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.gridconfig.interactionplugins",{"_index":4013,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.gridelementslayer",{"_index":1733,"title":{},"body":{"classes/Grid.html":{}}}],["this.gridx",{"_index":2472,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.gridx.tickgroup",{"_index":2473,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.gridy",{"_index":2487,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.gridy.tickgroup",{"_index":2621,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.handleclose",{"_index":1328,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.handlelabelupdate",{"_index":2998,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["this.handlelineupdate",{"_index":3063,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["this.handlemarginupdate",{"_index":2416,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.handleopen",{"_index":1326,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.handleseriesstatechange(e",{"_index":2378,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.handleticklabeloverflow(labelgroup",{"_index":2534,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.handleticklabeloverflowdebounceindex[scale.id",{"_index":2592,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.hasrightyaxis",{"_index":2704,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.height",{"_index":1041,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["this.hidesubject.next",{"_index":1469,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.highlighteddatapoints",{"_index":3227,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.highlighteddatapoints[chartseries.id",{"_index":3228,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["this.highlighteddatapoints[seriesid",{"_index":4045,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.icon",{"_index":3374,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this.id",{"_index":1518,"title":{},"body":{"classes/DataSeries.html":{},"classes/Scale.html":{}}}],["this.initialize",{"_index":645,"title":{},"body":{"classes/Chart.html":{}}}],["this.initplugin",{"_index":1122,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["this.initplugin$.complete",{"_index":1125,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["this.initplugin$.next",{"_index":1126,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["this.inputseriesset",{"_index":3203,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.interaction_margin",{"_index":3408,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["this.interactionhandlermap",{"_index":2898,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.interactionhandlermap[data.interactiontype",{"_index":2919,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.interactionhandlermap[data.interactiontype](xcoord",{"_index":2923,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.interactionlabellayer",{"_index":2991,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["this.interactionlabellayer.select(`.${interactionlabelplugin.layer_name",{"_index":3015,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["this.interactionlinelayer",{"_index":3061,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["this.interactionplugins",{"_index":256,"title":{},"body":{"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{}}}],["this.interactive",{"_index":421,"title":{},"body":{"classes/BarStatusGridConfig.html":{},"components/LegendSeriesComponent.html":{}}}],["this.interactivearea",{"_index":1703,"title":{},"body":{"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{}}}],["this.intersectionobserver",{"_index":885,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.intersectionobserver.observe(this.elref.nativeelement",{"_index":887,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.intersectionobserver?.unobserve(this.elref.nativeelement",{"_index":908,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.isapproximatelyequal(margin1.bottom",{"_index":2781,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.isapproximatelyequal(margin1.left",{"_index":2783,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.isapproximatelyequal(margin1.right",{"_index":2779,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.isapproximatelyequal(margin1.top",{"_index":2777,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.ischartinview",{"_index":1461,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["this.isdomainfixed",{"_index":3933,"title":{},"body":{"classes/Scale.html":{}}}],["this.ishorizontalclassapplied",{"_index":3378,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this.islegendactive",{"_index":3260,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["this.isopen",{"_index":1258,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipNode.html":{}}}],["this.isreversed",{"_index":3937,"title":{},"body":{"classes/Scale.html":{}}}],["this.isselectedchange.next(!this.isselected",{"_index":3383,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this.isserieshidden(s.id",{"_index":3231,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.isvertical",{"_index":1387,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.lasagna",{"_index":1705,"title":{},"body":{"classes/Grid.html":{}}}],["this.lasagna.addlayer",{"_index":1734,"title":{},"body":{"classes/Grid.html":{}}}],["this.lastgridconfig",{"_index":4014,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.lastgridconfig.interactionplugins",{"_index":4015,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.lastinteractionvaluespayload",{"_index":2996,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["this.lastinteractionvaluespayload.interactiontype",{"_index":3002,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["this.lastinteractionvaluespayload.values.x",{"_index":3007,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["this.lastinteractionvaluespayload.values.x[xscale.id",{"_index":3008,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["this.lastusedindex",{"_index":3954,"title":{},"body":{"classes/SequentialValueProvider.html":{}}}],["this.leftscaleid",{"_index":2362,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.legend",{"_index":3372,"title":{},"body":{"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["this.legend.active",{"_index":3376,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this.legend.activechanged.subscribe((active",{"_index":3373,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this.legend.interactive",{"_index":3377,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this.legend.orientation",{"_index":3379,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this.legend.seriescolor",{"_index":3887,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["this.legend.seriesicon",{"_index":3375,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this.legend.seriesunitlabel",{"_index":3885,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["this.legendinteractionassist",{"_index":3170,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.legendinteractionassist.emphasizeseries(seriesid",{"_index":3223,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.legendinteractionassist.isserieshidden(seriesid",{"_index":3224,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.legendinteractionassist.renderstatesindex",{"_index":3179,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.legendinteractionassist.resetseries",{"_index":3218,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.legendinteractionassist.setgroupvisibility(seriesid",{"_index":3214,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.legendinteractionassist.update(seriesset",{"_index":3211,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.legendseries",{"_index":3888,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["this.legendseries.hasinputdescription",{"_index":3890,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["this.legendseries.hasprojecteddescription",{"_index":3891,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["this.legendseriesset",{"_index":3208,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.legendseriesset.filter(s",{"_index":3230,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.loggerservice.warn(\"thresholds",{"_index":4208,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["this.margin.bottom",{"_index":1574,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["this.margin.left",{"_index":1569,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["this.margin.right",{"_index":1568,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["this.margin.top",{"_index":1573,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["this.marker",{"_index":1019,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["this.marker.getsvg",{"_index":1020,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["this.marker.setcolor(this.color",{"_index":1018,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["this.markerprovider",{"_index":76,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["this.markerprovider.get",{"_index":77,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["this.maxsize",{"_index":1040,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["this.movezoneindex(zoneindexes[zone.id",{"_index":4306,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["this.name",{"_index":1521,"title":{},"body":{"classes/DataSeries.html":{}}}],["this.ngzone.run",{"_index":904,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.ngzone.runoutsideangular",{"_index":905,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.onevent",{"_index":3264,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.onevent(event",{"_index":3265,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.onsetseriesstates(rs",{"_index":656,"title":{},"body":{"classes/Chart.html":{}}}],["this.onupdate(d",{"_index":650,"title":{},"body":{"classes/Chart.html":{}}}],["this.onupdatedimensions",{"_index":653,"title":{},"body":{"classes/Chart.html":{}}}],["this.openpopoversubject",{"_index":1212,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.openpopoversubject.complete",{"_index":1213,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.openpopoversubject.next",{"_index":1259,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.opentimeout",{"_index":1345,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.opentooltips.next",{"_index":1346,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.opposite(connection_points[sectionindex].x",{"_index":3804,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["this.opposite(connection_points[sectionindex].y",{"_index":3805,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["this.overlaysetup",{"_index":1456,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.plugin.chart.updatedimensions",{"_index":945,"title":{},"body":{"components/ChartDonutContentComponent.html":{}}}],["this.plugin.contentpositionupdatesubject.subscribe((contentposition",{"_index":943,"title":{},"body":{"components/ChartDonutContentComponent.html":{}}}],["this.plugin.hidesubject.pipe(takeuntil(this.unsubscribe$)).subscribe",{"_index":1327,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.plugin.orientation",{"_index":1413,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.plugin.showsubject.pipe(takeuntil(this.unsubscribe$)).subscribe",{"_index":1325,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.plugin?.openpopoversubject.pipe",{"_index":1127,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["this.plugin?.updatepositionsubject.pipe",{"_index":1130,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["this.plugins.findindex(plugin",{"_index":619,"title":{},"body":{"classes/Chart.html":{}}}],["this.plugins.foreach(p",{"_index":687,"title":{},"body":{"classes/Chart.html":{}}}],["this.plugins.push(plugin",{"_index":617,"title":{},"body":{"classes/Chart.html":{}}}],["this.plugins.splice(pluginindex",{"_index":622,"title":{},"body":{"classes/Chart.html":{}}}],["this.plugins[pluginindex].destroy",{"_index":621,"title":{},"body":{"classes/Chart.html":{}}}],["this.popover?.updateposition",{"_index":1143,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["this.popovertargetposition",{"_index":1248,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.processdatapoints(datapoints",{"_index":1209,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.processedcolors",{"_index":3727,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["this.processedcolors[clr",{"_index":3725,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["this.processhighlighteddatapoints(datapoints",{"_index":1462,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.projecteddescription",{"_index":3386,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this.projecteddescription.nativeelement.children.length",{"_index":3387,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this.providedvalues",{"_index":3957,"title":{},"body":{"classes/SequentialValueProvider.html":{}}}],["this.providedvalues[entityid",{"_index":3953,"title":{},"body":{"classes/SequentialValueProvider.html":{}}}],["this.publishrenderstates",{"_index":3213,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.recalculatemargins(this.container",{"_index":2374,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.reconcilemarginsdebounce",{"_index":2767,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.reconcilemarginswithdebounce(oldmargin",{"_index":2615,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.reconfigurechart(this.sparks[existingsparkindex].chart",{"_index":4031,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.redraw",{"_index":895,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.removeplugin(classref",{"_index":624,"title":{},"body":{"classes/Chart.html":{}}}],["this.renderengine",{"_index":614,"title":{},"body":{"classes/Chart.html":{}}}],["this.renderengine.setseriesstates(renderstatedata",{"_index":730,"title":{},"body":{"classes/Chart.html":{}}}],["this.renderingarea",{"_index":1730,"title":{},"body":{"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{}}}],["this.renderingarea.attrs(renderingareaattrs",{"_index":1781,"title":{},"body":{"classes/Grid.html":{}}}],["this.renderingareaclippath",{"_index":1784,"title":{},"body":{"classes/Grid.html":{}}}],["this.renderingareaclippath.attrs(renderingareaclippathattrs",{"_index":1780,"title":{},"body":{"classes/Grid.html":{}}}],["this.rendermarkersvg(svg",{"_index":1015,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["this.renderstatesindex[series.id",{"_index":3279,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.renderstatesindex[seriesid",{"_index":3283,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.reset",{"_index":3475,"title":{},"body":{"classes/MappedValueProvider.html":{},"classes/ProcessedColorProvider.html":{},"classes/SequentialValueProvider.html":{}}}],["this.resetseries",{"_index":3276,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.resetvisibleseries",{"_index":3176,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.resizehandler",{"_index":899,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.resizeobserver",{"_index":900,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.resizeobserver?.observe((this.elref.nativeelement",{"_index":906,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.resizeobserver?.unobserve(this.elref.nativeelement",{"_index":909,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.reversed(!this.isreversed",{"_index":3935,"title":{},"body":{"classes/Scale.html":{}}}],["this.rightscaleid",{"_index":2363,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.rightscaleid?.length",{"_index":2618,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.scalekey",{"_index":349,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["this.scales",{"_index":2708,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.scales.x",{"_index":2447,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.scales.y",{"_index":2453,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.scales?.x?.list[0].d3scale",{"_index":2731,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.scales[\"x\"].index[this.bottomscaleid",{"_index":2461,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.scales[\"x\"].list[0].id",{"_index":2346,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.scales[\"x\"]?.index[this.bottomscaleid",{"_index":2709,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.scales[\"y\"].index[this.leftscaleid",{"_index":2477,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.scales[\"y\"].index[this.rightscaleid",{"_index":2489,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.scales[\"y\"].list[0].id",{"_index":2350,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.selectallaxislabels(labelgroup",{"_index":2514,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.selecteddatapointidxfn(renderseries.dataseries.id",{"_index":390,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["this.series",{"_index":72,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/LineAccessors.html":{},"classes/NoopAccessors.html":{},"classes/RadialAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["this.series.category",{"_index":220,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["this.series.category(dataseries.id",{"_index":221,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["this.seriesgroups",{"_index":3271,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.seriesgroups[groupid",{"_index":3292,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.serieshasadditionalcontent",{"_index":3889,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["this.seriesindex",{"_index":3273,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.seriesindex[seriesid",{"_index":3305,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.seriesprocessor",{"_index":3169,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.seriesprocessor(inputseriesset.map(series",{"_index":3205,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.seriesrenderstate",{"_index":3367,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this.seriesstatessubject.next(renderstatedata",{"_index":690,"title":{},"body":{"classes/Chart.html":{}}}],["this.seriesstatessubject.pipe(untildestroy",{"_index":654,"title":{},"body":{"classes/Chart.html":{}}}],["this.seriesvisibilitymap[d.seriesid",{"_index":1470,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.seriesvisibilitymap[series.seriesid",{"_index":1465,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.setattributes",{"_index":3676,"title":{},"body":{"classes/PathMarker.html":{}}}],["this.setattributes({\"fill",{"_index":3679,"title":{},"body":{"classes/PathMarker.html":{}}}],["this.setgroupstate(group",{"_index":3296,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.setrenderstate(s",{"_index":3293,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.setvisibility(s",{"_index":3294,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.showbottomaxis",{"_index":4039,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.showsubject.next",{"_index":1488,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.showtopborder",{"_index":4038,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.simulation",{"_index":1351,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.simulation.stop",{"_index":1352,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.sourceprovider.get(entityid",{"_index":3722,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["this.sparks",{"_index":4022,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.sparks.findindex(existingspark",{"_index":4028,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.startsimulation(this.tooltipdirectivesindex",{"_index":1374,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.streams[key].complete",{"_index":1618,"title":{},"body":{"classes/EventBus.html":{}}}],["this.streams[streamid",{"_index":1616,"title":{},"body":{"classes/EventBus.html":{}}}],["this.styledsvg",{"_index":4071,"title":{},"body":{"classes/SvgMarker.html":{}}}],["this.svg",{"_index":3685,"title":{},"body":{"classes/PathMarker.html":{},"classes/SvgMarker.html":{}}}],["this.svg.complete",{"_index":1023,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["this.svg.next(this.marker.getsvg",{"_index":1022,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["this.svg.subscribe((svg",{"_index":1014,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["this.svgcontent.nativeelement",{"_index":1026,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["this.synchandlermap",{"_index":3172,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.synchandlermap[event.type](...args",{"_index":3247,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.syncsubscription",{"_index":3242,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.syncsubscription.unsubscribe",{"_index":3253,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.target",{"_index":630,"title":{},"body":{"classes/Chart.html":{},"interfaces/IScaleSVGElement.html":{}}}],["this.target?.append(\"defs",{"_index":659,"title":{},"body":{"classes/Chart.html":{}}}],["this.target?.remove",{"_index":689,"title":{},"body":{"classes/Chart.html":{}}}],["this.target?.style(\"height",{"_index":724,"title":{},"body":{"classes/Chart.html":{}}}],["this.target?.style(\"width",{"_index":727,"title":{},"body":{"classes/Chart.html":{}}}],["this.toggleseries",{"_index":3178,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.tooltipdirectivesindex",{"_index":1342,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.tooltipdirectivesindex[seriesid",{"_index":1364,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.tooltippositionoffset",{"_index":3780,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["this.tooltips.foreach(tooltip",{"_index":1334,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.unitlabel",{"_index":3884,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["this.unsubscribe$.complete",{"_index":1329,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.unsubscribe$.next",{"_index":1324,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.update",{"_index":1749,"title":{},"body":{"classes/Grid.html":{}}}],["this.update(this.inputseriesset",{"_index":3215,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.update.next(this.plugin?.datapoints",{"_index":1144,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["this.updateaxes",{"_index":2415,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.updateborders",{"_index":1741,"title":{},"body":{"classes/Grid.html":{}}}],["this.updatebottomborder",{"_index":1825,"title":{},"body":{"classes/Grid.html":{}}}],["this.updatechartdimensionssubject?.next",{"_index":2771,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.updatedimensionssubject",{"_index":610,"title":{},"body":{"classes/Chart.html":{}}}],["this.updatedimensionssubject.next",{"_index":682,"title":{},"body":{"classes/Chart.html":{}}}],["this.updatedimensionssubject.pipe(untildestroy",{"_index":651,"title":{},"body":{"classes/Chart.html":{}}}],["this.updatelabel(xscale",{"_index":3009,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["this.updateline(this.interactionlinelayer",{"_index":3065,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["this.updatepositionsubject",{"_index":1210,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.updatepositionsubject.complete",{"_index":1211,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.updatepositionsubject.next(this.popovertargetposition",{"_index":1257,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.updateranges",{"_index":1747,"title":{},"body":{"classes/Grid.html":{}}}],["this.updatesparks(sparks",{"_index":4019,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.updatesubject.next(seriesset",{"_index":681,"title":{},"body":{"classes/Chart.html":{}}}],["this.updatesubject.pipe(untildestroy",{"_index":648,"title":{},"body":{"classes/Chart.html":{}}}],["this.updatesvg",{"_index":3684,"title":{},"body":{"classes/PathMarker.html":{}}}],["this.updatetargetdimensions(dimensionconfig",{"_index":708,"title":{},"body":{"classes/Chart.html":{}}}],["this.updatetargetdimensions(this.grid.config().dimension",{"_index":678,"title":{},"body":{"classes/Chart.html":{}}}],["this.updatexaxis",{"_index":2500,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.updateyaxes",{"_index":2501,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.valuemap[entityid",{"_index":3476,"title":{},"body":{"classes/MappedValueProvider.html":{}}}],["this.values.length",{"_index":3955,"title":{},"body":{"classes/SequentialValueProvider.html":{}}}],["this.values[index",{"_index":3956,"title":{},"body":{"classes/SequentialValueProvider.html":{}}}],["this.viewbox",{"_index":1033,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["this.visible",{"_index":791,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{}}}],["this.width",{"_index":1038,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["this.zoombrushlayer",{"_index":2905,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.zoombrushlayer.append(\"g",{"_index":2926,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["those",{"_index":3249,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"injectables/ThresholdsService.html":{},"license.html":{}}}],["three",{"_index":4899,"title":{},"body":{"miscellaneous/variables.html":{}}}],["threshold",{"_index":1599,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"interfaces/ZoneCross.html":{}}}],["thresholdfrom",{"_index":4162,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["thresholdfrom.x",{"_index":4297,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["thresholdfrom.y",{"_index":4299,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["thresholds",{"_index":4126,"title":{"additional-documentation/thresholds.html":{}},"body":{"injectables/ThresholdsService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["thresholds/thresholds",{"_index":3661,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["thresholds_main_chart_renderer_config",{"_index":4150,"title":{},"body":{"injectables/ThresholdsService.html":{},"miscellaneous/variables.html":{}}}],["thresholds_summary_renderer_config",{"_index":4154,"title":{},"body":{"injectables/ThresholdsService.html":{},"miscellaneous/variables.html":{}}}],["thresholdsdata",{"_index":1589,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["thresholdsdata.push(arcdatum",{"_index":1595,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["thresholdshift",{"_index":4295,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["thresholdshift.x",{"_index":4302,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["thresholdshift.y",{"_index":4303,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["thresholdsservice",{"_index":3637,"title":{"injectables/ThresholdsService.html":{}},"body":{"modules/NuiChartsModule.html":{},"injectables/ThresholdsService.html":{},"overview.html":{}}}],["thresholdsservice.series_id_suffix",{"_index":4224,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["thresholdto",{"_index":4163,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["thresholdto.x",{"_index":4296,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["thresholdto.y",{"_index":4298,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["through",{"_index":812,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"license.html":{}}}],["throw",{"_index":607,"title":{},"body":{"classes/Chart.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialPopoverPlugin.html":{},"classes/Renderer.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{}}}],["tick",{"_index":1691,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"classes/InteractionLabelPlugin.html":{},"interfaces/ScalesIndex.html":{},"miscellaneous/typealiases.html":{}}}],["tick.getattribute(\"transform",{"_index":2684,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["tick.getboundingclientrect().width",{"_index":2679,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["tick_dimension_correction",{"_index":1693,"title":{},"body":{"classes/Grid.html":{}}}],["tick_label_overflow_debounce_interval",{"_index":2330,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["tickaxis",{"_index":2426,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"miscellaneous/variables.html":{}}}],["tickaxis.scale().ticks(config.approximateticks",{"_index":5005,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tickaxis.ticks(config.approximateticks",{"_index":2431,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["tickformat",{"_index":2430,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["tickformat(scale.formatters[\"tick",{"_index":2423,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["tickgroup",{"_index":2062,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["ticklabel",{"_index":156,"title":{},"body":{"classes/AxisConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["ticks",{"_index":178,"title":{},"body":{"classes/AxisConfig.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{},"miscellaneous/variables.html":{}}}],["ticks(config.approximateticks",{"_index":2421,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["ticks.length",{"_index":5006,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ticks[0",{"_index":5008,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ticks[ticks.length",{"_index":5010,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ticksaverage",{"_index":5009,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ticksize",{"_index":157,"title":{},"body":{"classes/AxisConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["ticksize(0",{"_index":2422,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["ticksize(config.ticksize",{"_index":2428,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["ticksize(size",{"_index":2442,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["tickvalues(scale.bandticks",{"_index":2429,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["tile",{"_index":490,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["tile'},{'name",{"_index":499,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["tile.component",{"_index":3658,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["tile.component.html",{"_index":494,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["tile.component.less",{"_index":492,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["tile.component.ts",{"_index":483,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["tile.component.ts:27",{"_index":3878,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["tile.component.ts:32",{"_index":3879,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["tile.component.ts:37",{"_index":3876,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["tile.component.ts:42",{"_index":3877,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["tile.component.ts:44",{"_index":3875,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["tile.component.ts:64",{"_index":3881,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["tile.component.ts:68",{"_index":3880,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["tile/basic",{"_index":481,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"modules/NuiChartsModule.html":{}}}],["tile/rich",{"_index":3659,"title":{},"body":{"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{}}}],["time",{"_index":4146,"title":{},"body":{"injectables/ThresholdsService.html":{},"dependencies.html":{}}}],["timeframe",{"_index":4545,"title":{"additional-documentation/timeframe-selection.html":{}},"body":{"index.html":{}}}],["timeinterval",{"_index":4144,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["timeintervalscale",{"_index":321,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["timeminute(date",{"_index":4965,"title":{},"body":{"miscellaneous/variables.html":{}}}],["timeout",{"_index":1251,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IScaleSVGElement.html":{}}}],["timescale",{"_index":324,"title":{"classes/TimeScale.html":{}},"body":{"classes/BarHighlightStrategy.html":{},"classes/TimeScale.html":{}}}],["timing",{"_index":1261,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["title",{"_index":2522,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/InteractionLabelPlugin.html":{},"license.html":{}}}],["titletext",{"_index":2530,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["toc",{"_index":4538,"title":{},"body":{"index.html":{}}}],["todo",{"_index":126,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/Chart.html":{},"classes/ChartPalette.html":{},"components/ChartTooltipsComponent.html":{},"classes/DataSeries.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IXYScales.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"interfaces/ScalesIndex.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYGridConfig.html":{}}}],["together",{"_index":431,"title":{},"body":{"classes/BarStatusGridConfig.html":{}}}],["toggleseries",{"_index":784,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/LegendInteractionAssist.html":{},"miscellaneous/enumerations.html":{}}}],["toggling",{"_index":2169,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["tooltip",{"_index":1268,"title":{},"body":{"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["tooltip'},{'name",{"_index":510,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["tooltip.component",{"_index":3653,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["tooltip.component.html",{"_index":1270,"title":{},"body":{"components/ChartTooltipComponent.html":{}}}],["tooltip.component.less",{"_index":1269,"title":{},"body":{"components/ChartTooltipComponent.html":{}}}],["tooltip.component.ts",{"_index":1265,"title":{},"body":{"components/ChartTooltipComponent.html":{}}}],["tooltip.component.ts:22",{"_index":1271,"title":{},"body":{"components/ChartTooltipComponent.html":{}}}],["tooltip.directive",{"_index":1312,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"modules/NuiChartsModule.html":{}}}],["tooltip.elementref.nativeelement.getattribute(\"series",{"_index":1337,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["tooltip.getoverlayelement",{"_index":1363,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["tooltip_position_offset",{"_index":1437,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"miscellaneous/variables.html":{}}}],["tooltipdirectivesindex",{"_index":1317,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["tooltipindex",{"_index":1377,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["tooltipindex[node.seriesid",{"_index":1407,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["tooltippositionoffset",{"_index":1417,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["tooltippositions",{"_index":1362,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["tooltippositions[seriesid",{"_index":1365,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["tooltiprelativeposition",{"_index":1484,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["tooltips",{"_index":435,"title":{"additional-documentation/plugins/tooltips.html":{}},"body":{"classes/BarTooltipsPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{},"injectables/ThresholdsService.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/plugins.html":{}}}],["tooltips'},{'name",{"_index":512,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["tooltips.component",{"_index":3654,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["tooltips.component.html",{"_index":1284,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["tooltips.component.less",{"_index":1283,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["tooltips.component.ts",{"_index":1282,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["tooltips.component.ts:27",{"_index":1289,"title":{},"body":{"components/ChartTooltipsComponent.html":{}}}],["tooltips.component.ts:29",{"_index":1290,"title":{},"body":{"components/ChartTooltipsComponent.html":{}}}],["tooltips.component.ts:31",{"_index":1298,"title":{},"body":{"components/ChartTooltipsComponent.html":{}}}],["tooltips.component.ts:33",{"_index":1295,"title":{},"body":{"components/ChartTooltipsComponent.html":{}}}],["tooltips.component.ts:34",{"_index":1294,"title":{},"body":{"components/ChartTooltipsComponent.html":{}}}],["tooltips.component.ts:44",{"_index":1288,"title":{},"body":{"components/ChartTooltipsComponent.html":{}}}],["tooltips.component.ts:65",{"_index":1293,"title":{},"body":{"components/ChartTooltipsComponent.html":{}}}],["tooltips/chart",{"_index":1264,"title":{},"body":{"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"modules/NuiChartsModule.html":{}}}],["top",{"_index":109,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYGridConfig.html":{},"classes/MarkerUtils.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYGridConfig.html":{},"miscellaneous/variables.html":{}}}],["topofrange",{"_index":2741,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["toremove",{"_index":2509,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["toremove.foreach((group",{"_index":2511,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["tort",{"_index":4770,"title":{},"body":{"license.html":{}}}],["track",{"_index":3466,"title":{},"body":{"classes/MappedValueProvider.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{}}}],["trackby",{"_index":3993,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["trackbyfn",{"_index":1287,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"classes/SparkChartAssist.html":{}}}],["trackbyfn(_index",{"_index":3990,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["trackbyfn(index",{"_index":1291,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["tracking",{"_index":4638,"title":{},"body":{"license.html":{}}}],["trade",{"_index":4742,"title":{},"body":{"license.html":{}}}],["trademark",{"_index":4706,"title":{},"body":{"license.html":{}}}],["trademarks",{"_index":4740,"title":{},"body":{"license.html":{}}}],["transfer",{"_index":1958,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"license.html":{}}}],["transform",{"_index":2466,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/InteractionLabelPlugin.html":{},"classes/MarkerUtils.html":{}}}],["transformation",{"_index":4598,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["transformed",{"_index":2888,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["transforms",{"_index":1147,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{}}}],["transformval",{"_index":2683,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["transformval.indexof",{"_index":2688,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["transition",{"_index":1273,"title":{},"body":{"components/ChartTooltipComponent.html":{}}}],["transition(\":enter",{"_index":1278,"title":{},"body":{"components/ChartTooltipComponent.html":{}}}],["transition(\":leave",{"_index":1281,"title":{},"body":{"components/ChartTooltipComponent.html":{}}}],["transitionduration",{"_index":1916,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["translate",{"_index":2480,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["translate(${clampedx},0",{"_index":3046,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["translate(${rightscalelabelx",{"_index":2494,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["translate(${this.config().dimension.width",{"_index":2496,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["translate(${tx",{"_index":2729,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["translate(${xcoord",{"_index":3514,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["translate(0",{"_index":2465,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/InteractionLabelPlugin.html":{}}}],["translate(0,${heightoffset",{"_index":3048,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["translating",{"_index":2519,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["translation",{"_index":4599,"title":{},"body":{"license.html":{}}}],["transparent",{"_index":1792,"title":{},"body":{"classes/Grid.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"injectables/ThresholdsService.html":{}}}],["triangle",{"_index":4932,"title":{},"body":{"miscellaneous/variables.html":{}}}],["trigger",{"_index":1190,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["trigger(\"tooltip",{"_index":1277,"title":{},"body":{"components/ChartTooltipComponent.html":{}}}],["triggered",{"_index":2932,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["triggering",{"_index":4870,"title":{},"body":{"miscellaneous/variables.html":{}}}],["true",{"_index":124,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISpark.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/XYGridConfig.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["true).attr(\"opacity",{"_index":2587,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["try",{"_index":239,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["ts",{"_index":128,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/Chart.html":{},"classes/GridConfig.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/Renderer.html":{},"classes/XYGridConfig.html":{}}}],["tuned",{"_index":1396,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["two",{"_index":4098,"title":{},"body":{"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"miscellaneous/variables.html":{}}}],["tx",{"_index":2724,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["ty",{"_index":2726,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["type",{"_index":24,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"modules/NuiChartsModule.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":4837,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeerror(\"`cssescape",{"_index":4417,"title":{},"body":{"classes/UtilityService.html":{}}}],["typeof",{"_index":225,"title":{},"body":{"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Chart.html":{},"classes/ChartPopoverPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{}}}],["types",{"_index":183,"title":{"additional-documentation/chart-types.html":{}},"body":{"classes/AxisConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISpark.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MappedValueProvider.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/ProcessedColorProvider.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/XYGridConfig.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"additional-documentation/chart-types.html":{}}}],["types/d3",{"_index":4484,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":380,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{}}}],["typical",{"_index":2217,"title":{},"body":{"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{}}}],["ui/bits",{"_index":1119,"title":{},"body":{"components/ChartPopoverComponent.html":{},"classes/MarkerUtils.html":{},"modules/NuiChartsModule.html":{},"injectables/ThresholdsService.html":{},"dependencies.html":{}}}],["ui/bits/bundles/css/styles.css",{"_index":4535,"title":{},"body":{"index.html":{}}}],["ui/charts",{"_index":4521,"title":{},"body":{"index.html":{}}}],["ui/charts/bundles/css/styles.css",{"_index":4536,"title":{},"body":{"index.html":{}}}],["unclipped",{"_index":2087,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"miscellaneous/enumerations.html":{}}}],["unclippeddata",{"_index":2086,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"miscellaneous/enumerations.html":{}}}],["undefined",{"_index":75,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialAccessors.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{}}}],["under",{"_index":4571,"title":{},"body":{"license.html":{}}}],["understand",{"_index":342,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["union",{"_index":4567,"title":{},"body":{"license.html":{}}}],["unionwith",{"_index":4195,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["unionwith(breakpoints",{"_index":4247,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["uniq",{"_index":2309,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["uniq(emphasizedseries.map(s",{"_index":2398,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["unique",{"_index":4246,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["unit",{"_index":3098,"title":{},"body":{"components/LegendComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["unitlabel",{"_index":3873,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["unknown",{"_index":4891,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unless",{"_index":4731,"title":{},"body":{"license.html":{}}}],["unpredictable",{"_index":4528,"title":{},"body":{"index.html":{}}}],["unsubscribe",{"_index":1314,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["unsyncchartassist",{"_index":3252,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["unsynchronize",{"_index":3248,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["until",{"_index":1930,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["untildestroy",{"_index":646,"title":{},"body":{"classes/Chart.html":{},"interfaces/IScaleSVGElement.html":{}}}],["up",{"_index":2762,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"miscellaneous/variables.html":{}}}],["update",{"_index":446,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/SparkChartAssist.html":{},"classes/ZoomPlugin.html":{}}}],["update(inputseriesset",{"_index":769,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["update(seriesset",{"_index":575,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{}}}],["updateaxes",{"_index":2499,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["updateborders",{"_index":1824,"title":{},"body":{"classes/Grid.html":{}}}],["updatebottomborder",{"_index":1811,"title":{},"body":{"classes/Grid.html":{}}}],["updatechartdimensionssubject",{"_index":1626,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["updated",{"_index":768,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["updatedimensions",{"_index":447,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGrid.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/ZoomPlugin.html":{}}}],["updatedimensions(dimensions",{"_index":1666,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["updatedimensionssubject",{"_index":605,"title":{},"body":{"classes/Chart.html":{}}}],["updatelabel(scale",{"_index":3013,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["updatelegend",{"_index":3202,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["updateline(layer",{"_index":3066,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["updatepositionsubject",{"_index":1159,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["updateranges",{"_index":1630,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["updates",{"_index":765,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["updatesparks",{"_index":3968,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["updatesparks(sparks",{"_index":3999,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["updatesubject",{"_index":604,"title":{},"body":{"classes/Chart.html":{}}}],["updatesvg",{"_index":3686,"title":{},"body":{"classes/PathMarker.html":{}}}],["updatetargetdimensions(dimensionconfig",{"_index":718,"title":{},"body":{"classes/Chart.html":{}}}],["updatexaxis",{"_index":2460,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["updateyaxes",{"_index":2475,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["updating",{"_index":1766,"title":{},"body":{"classes/Grid.html":{}}}],["upon",{"_index":2757,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["url(\"#${cssfilterid.grayscale",{"_index":5011,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usage",{"_index":763,"title":{"additional-documentation/advanced-usage.html":{}},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"injectables/ThresholdsService.html":{},"index.html":{},"additional-documentation/advanced-usage.html":{}}}],["use",{"_index":240,"title":{},"body":{"classes/BarAccessors.html":{},"classes/Chart.html":{},"components/ChartTooltipsComponent.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":281,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"injectables/ChartCollectionService.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"modules/NuiChartsModule.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["useenhancedlinecaps",{"_index":2108,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/MissingDataLineRendererConfig.html":{}}}],["useexisting",{"_index":857,"title":{},"body":{"components/ChartComponent.html":{}}}],["user",{"_index":1525,"title":{},"body":{"classes/DataSeries.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{}}}],["uses",{"_index":736,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["using",{"_index":1150,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/Grid.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IXYDataAccessors.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/Renderer.html":{},"injectables/ThresholdsService.html":{},"classes/XYAccessors.html":{},"classes/XYRenderer.html":{},"license.html":{}}}],["usually",{"_index":1953,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"injectables/ThresholdsService.html":{}}}],["util.ts",{"_index":1579,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["util.ts:6",{"_index":1582,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["utility.service",{"_index":3917,"title":{},"body":{"classes/Scale.html":{}}}],["utilityservice",{"_index":329,"title":{"classes/UtilityService.html":{}},"body":{"classes/BarHighlightStrategy.html":{},"classes/Grid.html":{},"classes/InteractionLabelPlugin.html":{},"classes/Scale.html":{},"classes/SparkChartAssist.html":{},"classes/UtilityService.html":{}}}],["utilityservice.clamptorange(x",{"_index":3045,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["utilityservice.findnearestindex(series.data",{"_index":374,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["utilityservice.getcloser",{"_index":4393,"title":{},"body":{"classes/UtilityService.html":{}}}],["utilityservice.getclosestindex(series.data",{"_index":382,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["utilityservice.getscalevalues(xscales",{"_index":4437,"title":{},"body":{"classes/UtilityService.html":{}}}],["utilityservice.getscalevalues(yscales",{"_index":4439,"title":{},"body":{"classes/UtilityService.html":{}}}],["utilityservice.getvalueaccessor(accessor",{"_index":4382,"title":{},"body":{"classes/UtilityService.html":{}}}],["utilityservice.uuid",{"_index":1719,"title":{},"body":{"classes/Grid.html":{},"classes/Scale.html":{},"classes/SparkChartAssist.html":{}}}],["utils.ts",{"_index":3480,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["utils.ts:157",{"_index":3502,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["utils.ts:23",{"_index":3486,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["utils.ts:26",{"_index":3488,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["utils.ts:37",{"_index":3496,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["utils.ts:96",{"_index":3492,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["utilservice",{"_index":3503,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["uuid",{"_index":4343,"title":{},"body":{"classes/UtilityService.html":{}}}],["ux",{"_index":92,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"index.html":{}}}],["v.12",{"_index":4896,"title":{},"body":{"miscellaneous/variables.html":{}}}],["v9",{"_index":2808,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["valid",{"_index":245,"title":{},"body":{"classes/BarAccessors.html":{},"classes/DataSeries.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{},"classes/XYGridConfig.html":{}}}],["validdatapoints",{"_index":1241,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{}}}],["validdatapointsvalues",{"_index":1245,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["validdatapointsvalues.length",{"_index":1247,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["value",{"_index":108,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"components/ChartComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISpark.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopRenderer.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.length",{"_index":364,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["value.valueof",{"_index":4378,"title":{},"body":{"classes/UtilityService.html":{}}}],["valueaccessor",{"_index":3153,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{}}}],["valueaccessor(haystack[closestdataindex",{"_index":4394,"title":{},"body":{"classes/UtilityService.html":{}}}],["valueaccessor(straw",{"_index":4385,"title":{},"body":{"classes/UtilityService.html":{}}}],["valuemap",{"_index":1884,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/MappedValueProvider.html":{},"classes/Renderer.html":{}}}],["valueof",{"_index":371,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/UtilityService.html":{}}}],["values",{"_index":290,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["values(limits).map((limit",{"_index":4277,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["values(this.renderstatesindex",{"_index":3282,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["values(validdatapoints",{"_index":1246,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["values(validdatapoints).length",{"_index":1471,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["values.x",{"_index":4441,"title":{},"body":{"classes/UtilityService.html":{}}}],["values.y",{"_index":4443,"title":{},"body":{"classes/UtilityService.html":{}}}],["values[this.scalekey",{"_index":338,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["var",{"_index":497,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{},"miscellaneous/variables.html":{}}}],["variables",{"_index":4841,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["various",{"_index":3500,"title":{},"body":{"classes/MarkerUtils.html":{},"index.html":{}}}],["vector",{"_index":3678,"title":{},"body":{"classes/PathMarker.html":{}}}],["verbal",{"_index":4629,"title":{},"body":{"license.html":{}}}],["version",{"_index":4523,"title":{},"body":{"index.html":{},"license.html":{}}}],["versions",{"_index":1843,"title":{},"body":{"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["vertical",{"_index":1440,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYGridConfig.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"miscellaneous/enumerations.html":{}}}],["verticalbaraccessors",{"_index":4449,"title":{"classes/VerticalBarAccessors.html":{}},"body":{"classes/VerticalBarAccessors.html":{}}}],["vertically",{"_index":1684,"title":{},"body":{"classes/Grid.html":{}}}],["very",{"_index":2748,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"index.html":{}}}],["view",{"_index":4540,"title":{},"body":{"index.html":{}}}],["viewbox",{"_index":986,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["viewchild",{"_index":1004,"title":{},"body":{"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/LegendSeriesComponent.html":{}}}],["viewchild(\"projecteddescription",{"_index":3360,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["viewchild(\"svgcontent",{"_index":1009,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["viewchild('svgcontent",{"_index":1000,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["viewchild(popovercomponent",{"_index":1116,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["viewchildren",{"_index":1299,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["viewchildren(charttooltipdirective",{"_index":1297,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["viewencapsulation",{"_index":495,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["viewencapsulation.emulated",{"_index":486,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["viewport",{"_index":1828,"title":{},"body":{"classes/Grid.html":{}}}],["visibility",{"_index":1767,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["visible",{"_index":158,"title":{},"body":{"classes/AxisConfig.html":{},"classes/ChartAssistRenderStateData.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{}}}],["visual",{"_index":3572,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{}}}],["visualization",{"_index":1235,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"injectables/ThresholdsService.html":{}}}],["visualizations",{"_index":1879,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"index.html":{}}}],["visualize",{"_index":1942,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["visualizing",{"_index":1961,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["void",{"_index":179,"title":{},"body":{"classes/AxisConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/EventBus.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{}}}],["warn",{"_index":1524,"title":{},"body":{"classes/DataSeries.html":{}}}],["warning",{"_index":4890,"title":{},"body":{"miscellaneous/variables.html":{}}}],["warranties",{"_index":4754,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":4749,"title":{},"body":{"license.html":{}}}],["waterfall",{"_index":4544,"title":{"additional-documentation/chart-types/bar/waterfall.html":{}},"body":{"index.html":{},"additional-documentation/chart-types.html":{}}}],["ways",{"_index":4529,"title":{},"body":{"index.html":{}}}],["we'll",{"_index":3193,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["we're",{"_index":339,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"components/ChartComponent.html":{},"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{},"classes/RadialTooltipsPlugin.html":{},"injectables/ThresholdsService.html":{}}}],["weird",{"_index":1809,"title":{},"body":{"classes/Grid.html":{}}}],["well",{"_index":707,"title":{},"body":{"classes/Chart.html":{}}}],["wherever",{"_index":4714,"title":{},"body":{"license.html":{}}}],["whether",{"_index":1987,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"components/LegendSeriesComponent.html":{},"classes/SideIndicatorAccessors.html":{},"license.html":{}}}],["white",{"_index":1081,"title":{},"body":{"classes/ChartPalette.html":{},"components/RichLegendTileComponent.html":{}}}],["whole",{"_index":1233,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"license.html":{}}}],["width",{"_index":636,"title":{},"body":{"classes/Chart.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/SideIndicatorAccessors.html":{},"classes/ZoomPlugin.html":{}}}],["width(value",{"_index":1553,"title":{},"body":{"classes/DimensionConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["width/height",{"_index":2667,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["widthcorrection",{"_index":2970,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["widthcorrection].map(x",{"_index":2974,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["widthlimit",{"_index":2031,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["widthoffset",{"_index":1137,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["wish",{"_index":4511,"title":{},"body":{"index.html":{}}}],["within",{"_index":1501,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["without",{"_index":4525,"title":{},"body":{"index.html":{},"license.html":{}}}],["words",{"_index":2930,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["work",{"_index":3412,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{},"injectables/ThresholdsService.html":{},"index.html":{},"license.html":{}}}],["workaround",{"_index":626,"title":{},"body":{"classes/Chart.html":{}}}],["works",{"_index":4145,"title":{},"body":{"injectables/ThresholdsService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["worldwide",{"_index":4654,"title":{},"body":{"license.html":{}}}],["wrapper",{"_index":3425,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["writing",{"_index":4646,"title":{},"body":{"license.html":{}}}],["written",{"_index":4630,"title":{},"body":{"license.html":{}}}],["x",{"_index":42,"title":{},"body":{"classes/AreaAccessors.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IElementPosition.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LineAccessors.html":{},"classes/MarkerUtils.html":{},"classes/RadialTooltipsPlugin.html":{},"interfaces/ScalesIndex.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYAccessors.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["x0",{"_index":43,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["x1",{"_index":44,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/Grid.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"classes/InteractionLinePlugin.html":{}}}],["x2",{"_index":1816,"title":{},"body":{"classes/Grid.html":{},"classes/InteractionLinePlugin.html":{}}}],["xcoord",{"_index":2920,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/MarkerUtils.html":{},"classes/ZoomPlugin.html":{}}}],["xcoord].sort((a",{"_index":2958,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["xcoordinate",{"_index":4369,"title":{},"body":{"classes/UtilityService.html":{}}}],["xfn",{"_index":3069,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["xscale",{"_index":2449,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["xscale.convert(d",{"_index":3070,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["xscale.range([padding.left",{"_index":2450,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["xscales",{"_index":2962,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/UtilityService.html":{},"classes/ZoomPlugin.html":{}}}],["xscales.reduce((result",{"_index":2972,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["xvalue",{"_index":3006,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/UtilityService.html":{}}}],["xvalue.length",{"_index":3012,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["xvalue.slice(0",{"_index":3011,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["xxxx",{"_index":4402,"title":{},"body":{"classes/UtilityService.html":{}}}],["xxxxxxxx",{"_index":4401,"title":{},"body":{"classes/UtilityService.html":{}}}],["xxxxxxxxxxxx\".replace(/[xy]/g",{"_index":4405,"title":{},"body":{"classes/UtilityService.html":{}}}],["xy",{"_index":142,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["xy.iszoneedge",{"_index":4244,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["xy.y",{"_index":4241,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["xy1",{"_index":4239,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["xy2",{"_index":4234,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["xy2].foreach((xy",{"_index":4240,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["xyaccessors",{"_index":2244,"title":{"classes/XYAccessors.html":{}},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"classes/LineAccessors.html":{},"classes/XYAccessors.html":{}}}],["xyaccessors:14",{"_index":3390,"title":{},"body":{"classes/LineAccessors.html":{}}}],["xygrid",{"_index":254,"title":{},"body":{"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/SparkChartAssist.html":{},"classes/XYGridConfig.html":{},"classes/ZoomPlugin.html":{}}}],["xygrid(lastspark",{"_index":4036,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["xygrid.tick_label_overflow_debounce_interval",{"_index":2605,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["xygridconfig",{"_index":87,"title":{"classes/XYGridConfig.html":{}},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"classes/SparkChartAssist.html":{},"classes/XYGridConfig.html":{}}}],["xygridconfig.default_margin",{"_index":4458,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["xygridconfig.default_padding",{"_index":4456,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["xygridconfig:16",{"_index":123,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{}}}],["xygridconfig:23",{"_index":116,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{}}}],["xygridconfig:32",{"_index":125,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{}}}],["xygridconfig:9",{"_index":121,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{}}}],["xyrenderer",{"_index":2796,"title":{"classes/XYRenderer.html":{}},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"classes/LineAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYRenderer.html":{}}}],["y",{"_index":47,"title":{},"body":{"classes/AreaAccessors.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IElementPosition.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LineAccessors.html":{},"classes/MarkerUtils.html":{},"classes/RadialTooltipsPlugin.html":{},"interfaces/ScalesIndex.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYAccessors.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["y0",{"_index":48,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["y1",{"_index":49,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/Grid.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"classes/InteractionLinePlugin.html":{}}}],["y2",{"_index":1820,"title":{},"body":{"classes/Grid.html":{},"classes/InteractionLinePlugin.html":{}}}],["ycoord",{"_index":3512,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["ycoordinate",{"_index":4370,"title":{},"body":{"classes/UtilityService.html":{}}}],["yes",{"_index":291,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IChartAssist.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/VerticalBarAccessors.html":{}}}],["yleftscale",{"_index":2476,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["yrightscale",{"_index":2488,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["yscale",{"_index":2455,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["yscale.range([dimension.height",{"_index":2456,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["yscales",{"_index":4368,"title":{},"body":{"classes/UtilityService.html":{}}}],["yvalue",{"_index":4438,"title":{},"body":{"classes/UtilityService.html":{}}}],["yxxx",{"_index":4404,"title":{},"body":{"classes/UtilityService.html":{}}}],["z",{"_index":4271,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["z.accessors.data.end",{"_index":4273,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["z.accessors.data.end?.(z.data[0",{"_index":4319,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["z.accessors.data.start",{"_index":4272,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["z.accessors.data.start?.(z.data[0",{"_index":4317,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["z.accessors.series.color?.(z.id",{"_index":4320,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["z.data",{"_index":4318,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["z.end",{"_index":4264,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["z.entered",{"_index":4205,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["z.id",{"_index":4322,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["z.start",{"_index":4263,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["z.status",{"_index":4262,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zdataaccessors",{"_index":4309,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zdataaccessors.end?.(zonedatapoint",{"_index":4312,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zdataaccessors.start?.(zonedatapoint",{"_index":4311,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zero",{"_index":148,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"interfaces/IScaleSVGElement.html":{}}}],["zone",{"_index":1985,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"injectables/ThresholdsService.html":{},"interfaces/ZoneCross.html":{},"miscellaneous/enumerations.html":{}}}],["zone.accessors.data",{"_index":4310,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zone.accessors.series.color",{"_index":4283,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zone.data",{"_index":4269,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zone.data[zoneindex",{"_index":4308,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zone.id}__${zoneboundary}__threshold",{"_index":4285,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zone.scales",{"_index":4287,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zone.value",{"_index":4286,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zoneboundary",{"_index":2851,"title":{},"body":{"interfaces/ISimpleThresholdZone.html":{},"injectables/ThresholdsService.html":{},"interfaces/ZoneCross.html":{},"miscellaneous/enumerations.html":{}}}],["zoneboundary.end",{"_index":4276,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zoneboundary.start",{"_index":4176,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zonecross",{"_index":2848,"title":{"interfaces/ZoneCross.html":{}},"body":{"interfaces/ISimpleThresholdZone.html":{},"injectables/ThresholdsService.html":{},"interfaces/ZoneCross.html":{}}}],["zonecrosspoints",{"_index":4248,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zonedatapoint",{"_index":4307,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zoneendy",{"_index":4243,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zoneindex",{"_index":4305,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zoneindexes",{"_index":4203,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zoneindexes[zone.id",{"_index":4304,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zones",{"_index":4140,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zones.findindex(z",{"_index":4266,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zones.foreach(z",{"_index":4204,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zonestarty",{"_index":4242,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zoom",{"_index":2892,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"modules/NuiChartsModule.html":{},"classes/ZoomPlugin.html":{},"overview.html":{}}}],["zoombrushlayer",{"_index":2893,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["zoomplugin",{"_index":2880,"title":{"classes/ZoomPlugin.html":{}},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["zoomplugin.default_config",{"_index":2897,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["zoomplugin.layer_name",{"_index":2907,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AreaAccessors.html":{"url":"classes/AreaAccessors.html","title":"class - AreaAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AreaAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/area/area-accessors.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IAreaAccessors\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                series\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(colorProvider, markerProvider)\n                    \n                \n                        \n                            \n                                Defined in src/renderers/area/area-accessors.ts:29\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        colorProvider\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        markerProvider\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAreaDataAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/area/area-accessors.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAreaSeriesAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/area/area-accessors.ts:29\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { defaultColorProvider, defaultMarkerProvider } from \"../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, IDataAccessors, ISeriesAccessors, SeriesAccessor } from \"../../core/common/types\";\n\nexport interface IAreaDataAccessors extends IDataAccessors {\n    x: DataAccessor;\n    x0: DataAccessor;\n    x1: DataAccessor;\n    absoluteX0: DataAccessor;\n    absoluteX1: DataAccessor;\n    y: DataAccessor;\n    y0: DataAccessor;\n    y1: DataAccessor;\n    absoluteY0: DataAccessor;\n    absoluteY1: DataAccessor;\n}\n\nexport interface IAreaSeriesAccessors extends ISeriesAccessors {\n    color?: SeriesAccessor;\n    marker?: SeriesAccessor;\n}\n\nexport interface IAreaAccessors extends IAccessors {\n    data: IAreaDataAccessors;\n    series: IAreaSeriesAccessors;\n}\n\nexport class AreaAccessors implements IAreaAccessors {\n    data: IAreaDataAccessors;\n    series: IAreaSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider(), private markerProvider = defaultMarkerProvider()) {\n        this.data = {\n            x: (d, i, ds, s) => d.x,\n            x0: (d, i, ds, s) => this.data.x(d, i, ds, s),\n            x1: (d, i, ds, s) => this.data.x(d, i, ds, s),\n            y: (d, i, ds, s) => d.y,\n            y0: (d, i, ds, s) => this.data.y(d, i, ds, s),\n            y1: (d, i, ds, s) => this.data.y(d, i, ds, s),\n            absoluteX0: (d, i, ds, s) => d[\"__stack_x\"]?.start ?? this.data.x0(d, i, ds, s),\n            absoluteX1: (d, i, ds, s) => d[\"__stack_x\"]?.end ?? this.data.x1(d, i, ds, s),\n            absoluteY0: (d, i, ds, s) => d[\"__stack_y\"]?.start ?? this.data.y0(d, i, ds, s),\n            absoluteY1: (d, i, ds, s) => d[\"__stack_y\"]?.end ?? this.data.y1(d, i, ds, s),\n        };\n\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n            marker: this.markerProvider ? this.markerProvider.get : undefined,\n        };\n    }\n}\n\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AreaGridConfig.html":{"url":"classes/AreaGridConfig.html","title":"class - AreaGridConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AreaGridConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/config/area-grid-config.ts\n        \n\n            \n                Description\n            \n            \n                Pre-defined XYGridConfig for conforming an area chart to Nova UX standards\n\n            \n\n            \n                Extends\n            \n            \n                        XYGridConfig\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                axis\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_MARGIN\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_PADDING\n                            \n                            \n                                    Public\n                                interactionPlugins\n                            \n                            \n                                    Public\n                                borders\n                            \n                            \n                                    Public\n                                cursor\n                            \n                            \n                                    Public\n                                dimension\n                            \n                            \n                                    Public\n                                interactive\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/core/grid/config/area-grid-config.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            axis\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: new AxisConfig(),\n        right: new AxisConfig(),\n        bottom: new AxisConfig(),\n        left: new AxisConfig(),\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:23\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_MARGIN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: 0,\n        right: 5,\n        bottom: 20,\n        left: 30,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:9\n\n                            \n                        \n\n                \n                    \n                        The default margin \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_PADDING\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        left: 0,\n        right: 0,\n        top: 5,\n        bottom: 5,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interactionPlugins\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:32\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            borders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        // TODO: Review this\n        // @ts-ignore\n        top: undefined,\n        // @ts-ignore\n        bottom: undefined,\n        // @ts-ignore\n        left: undefined,\n        // @ts-ignore\n        right: undefined,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:16\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            cursor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"crosshair\"\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:28\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dimension\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IDimensionConfig\n\n                        \n                    \n                    \n                        \n                            Default value : new DimensionConfig()\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:14\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interactive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:11\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { XYGridConfig } from \"./xy-grid-config\";\n\n/**\n * Pre-defined XYGridConfig for conforming an area chart to Nova UX standards\n */\nexport class AreaGridConfig extends XYGridConfig {\n    constructor() {\n        super();\n\n        this.dimension.padding.bottom = 2; // for shifting zero-line to bottom border\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AxisConfig.html":{"url":"classes/AxisConfig.html","title":"class - AxisConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AxisConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/config/axis-config.ts\n        \n\n            \n                Description\n            \n            \n                See IAxisConfig \n\n            \n\n\n            \n                Implements\n            \n            \n                            IAxisConfig\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                fit\n                            \n                            \n                                    Public\n                                gridTicks\n                            \n                            \n                                    Public\n                                padding\n                            \n                            \n                                    Public\n                                tickLabel\n                            \n                            \n                                    Public\n                                tickSize\n                            \n                            \n                                    Public\n                                visible\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    approximateTicks\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            fit\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/axis-config.ts:22\n                            \n                        \n\n                \n                    \n                        See IAxisConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            gridTicks\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/axis-config.ts:10\n                            \n                        \n\n                \n                    \n                        See IAxisConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            padding\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/axis-config.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            tickLabel\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ITickLabelConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        horizontalPadding: 0,\n        overflowHandler: defaultTextOverflowHandler,\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/axis-config.ts:16\n                            \n                        \n\n                \n                    \n                        See IAxisConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            tickSize\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 5\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/axis-config.ts:13\n                            \n                        \n\n                \n                    \n                        See IAxisConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/axis-config.ts:7\n                            \n                        \n\n                \n                    \n                        See IAxisConfig \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        approximateTicks\n                    \n                \n\n                \n                    \n                        getapproximateTicks()\n                    \n                \n                            \n                                \n                                    Defined in src/core/grid/config/axis-config.ts:27\n                                \n                            \n                    \n                        \n                                See IAxisConfig \n\n\n                                \n                                    Returns :         any\n\n                                \n                        \n                    \n\n                \n                    \n                        setapproximateTicks(ticks: any)\n                    \n                \n                            \n                                \n                                    Defined in src/core/grid/config/axis-config.ts:32\n                                \n                            \n                    \n                        \n                                See IAxisConfig \n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            ticks\n                                                    \n                                                            \n                                                                            any\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import { defaultTextOverflowHandler } from \"../default-text-overflow-handler\";\nimport { IAxisConfig, ITickLabelConfig } from \"../types\";\n\n/** See {@link IAxisConfig} */\nexport class AxisConfig implements IAxisConfig {\n    /** See {@link IAxisConfig#visible} */\n    public visible: boolean = true;\n\n    /** See {@link IAxisConfig#gridTicks} */\n    public gridTicks: boolean = false;\n\n    /** See {@link IAxisConfig#tickSize} */\n    public tickSize: number = 5;\n\n    /** See {@link IAxisConfig#tickLabel} */\n    public tickLabel: ITickLabelConfig = {\n        horizontalPadding: 0,\n        overflowHandler: defaultTextOverflowHandler,\n    };\n\n    /** See {@link IAxisConfig#fit} */\n    public fit: boolean = false;\n\n    private _approximateTicks: number = 5;\n\n    /** See {@link IAxisConfig#approximateTicks} */\n    get approximateTicks(): any {\n        return this._approximateTicks;\n    }\n\n    /** See {@link IAxisConfig#approximateTicks} */\n    set approximateTicks(ticks: any) {\n        this._approximateTicks = parseInt(ticks, 10);\n    }\n\n    public padding: number = 0;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BarAccessors.html":{"url":"classes/BarAccessors.html","title":"class - BarAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BarAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/bar/accessors/bar-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        RectangleAccessors\n            \n\n            \n                Implements\n            \n            \n                            IBarAccessors\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                series\n                            \n                            \n                                data\n                            \n                            \n                                series\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(colorProvider, markerProvider)\n                    \n                \n                        \n                            \n                                Defined in src/renderers/bar/accessors/bar-accessors.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        colorProvider\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        markerProvider\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IBarDataAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/bar/accessors/bar-accessors.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleSeriesAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/bar/accessors/bar-accessors.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleDataAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         RectangleAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         RectangleAccessors:34\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleSeriesAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         RectangleAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         RectangleAccessors:35\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { defaultColorProvider, defaultMarkerProvider } from \"../../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, IDataSeries } from \"../../../core/common/types\";\nimport { IRectangleDataAccessors, IRectangleSeriesAccessors, RectangleAccessors } from \"../../accessors/rectangle-accessors\";\n\nexport interface IBarDataAccessors extends IRectangleDataAccessors {\n    category: DataAccessor;\n    start: DataAccessor;\n    end: DataAccessor;\n    thickness?: DataAccessor;\n    value?: DataAccessor;\n    color?: DataAccessor;\n    marker?: DataAccessor;\n    cssClass?: DataAccessor;\n}\n\nexport interface IBarAccessors extends IAccessors {\n    data: IBarDataAccessors;\n    series: IRectangleSeriesAccessors;\n}\n\nexport abstract class BarAccessors extends RectangleAccessors implements IBarAccessors {\n    data: IBarDataAccessors;\n    series: IRectangleSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider(), private markerProvider = defaultMarkerProvider()) {\n        super();\n\n        this.data = {\n            value: (data: any) => data.value,\n            category: (d, i, series: any[], dataSeries: IDataSeries) => {\n                if (d.category) {\n                    return d.category;\n                }\n\n                if (this.series.category) {\n                    return this.series.category(dataSeries.id, dataSeries);\n                }\n\n                return null;\n            },\n            start: (data: any, index: number, series: any[], dataSeries: IDataSeries) => {\n                if (data.__bar) {\n                    return data.__bar.start;\n                }\n                if (typeof data.start !== \"undefined\") {\n                    return data.start;\n                }\n\n                const value = this.getSingleValue(data, index, series, dataSeries);\n                if (Number.isFinite(value)) {\n                    return Math.min(0, value);\n                }\n\n                return null;\n            },\n            end: (data: any, index: number, series: any[], dataSeries: IDataSeries) => {\n                if (data.__bar) {\n                    return data.__bar.end;\n                }\n                if (typeof data.end !== \"undefined\") {\n                    return data.end;\n                }\n\n                const value = this.getSingleValue(data, index, series, dataSeries);\n                if (Number.isFinite(value)) {\n                    return Math.max(0, value);\n                }\n\n                return null;\n            },\n        };\n\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n            marker: this.markerProvider ? this.markerProvider.get : undefined,\n            category: (seriesId, series) => series.name || series.id,\n        };\n\n    }\n\n    private getSingleValue(data: any, index: number, series: any[], dataSeries: IDataSeries) {\n        let value: any;\n        if (this.data.value) {\n            // try to use the value accessor to retrieve value\n            value = this.data.value(data, index, series, dataSeries);\n            // if it fails to retrieve a valid value, then we consider the data point to be a primitive value that is returned directly\n            if (typeof value === \"undefined\") {\n                value = data;\n            }\n        }\n        return value;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BarGridConfig.html":{"url":"classes/BarGridConfig.html","title":"class - BarGridConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BarGridConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/config/bar-grid-config.ts\n        \n\n            \n                Description\n            \n            \n                Pre-defined and conforming Nova UX standards configuration of XYGrid for bar chart\n\n            \n\n            \n                Extends\n            \n            \n                        XYGridConfig\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                axis\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_MARGIN\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_PADDING\n                            \n                            \n                                    Public\n                                interactionPlugins\n                            \n                            \n                                    Public\n                                borders\n                            \n                            \n                                    Public\n                                cursor\n                            \n                            \n                                    Public\n                                dimension\n                            \n                            \n                                    Public\n                                interactive\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/core/grid/config/bar-grid-config.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            axis\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: new AxisConfig(),\n        right: new AxisConfig(),\n        bottom: new AxisConfig(),\n        left: new AxisConfig(),\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:23\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_MARGIN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: 0,\n        right: 5,\n        bottom: 20,\n        left: 30,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:9\n\n                            \n                        \n\n                \n                    \n                        The default margin \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_PADDING\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        left: 0,\n        right: 0,\n        top: 5,\n        bottom: 5,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interactionPlugins\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:32\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            borders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        // TODO: Review this\n        // @ts-ignore\n        top: undefined,\n        // @ts-ignore\n        bottom: undefined,\n        // @ts-ignore\n        left: undefined,\n        // @ts-ignore\n        right: undefined,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:16\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            cursor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"crosshair\"\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:28\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dimension\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IDimensionConfig\n\n                        \n                    \n                    \n                        \n                            Default value : new DimensionConfig()\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:14\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interactive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:11\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { XYGridConfig } from \"./xy-grid-config\";\n\n/**\n * Pre-defined and conforming Nova UX standards configuration of XYGrid for bar chart\n */\nexport class BarGridConfig extends XYGridConfig {\n    constructor() {\n        super();\n\n        this.interactionPlugins = false;\n\n        this.axis.left.gridTicks = true;\n        this.axis.left.tickSize = 5;\n        this.axis.bottom.gridTicks = false;\n        this.axis.left.fit = true;\n        this.axis.bottom.tickSize = 5;\n        this.axis.left.tickSize = 0;\n        this.dimension.margin.right = 0;\n        this.dimension.padding.bottom =  2; // 2 for border\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BarHighlightStrategy.html":{"url":"classes/BarHighlightStrategy.html","title":"class - BarHighlightStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BarHighlightStrategy\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/bar/highlight-strategies/bar-highlight-strategy.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IHighlightStrategy\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                draw\n                            \n                            \n                                    Public\n                                findDataPointByValue\n                            \n                            \n                                    Public\n                                getDataPointIndex\n                            \n                            \n                                    Public\n                                highlightDataPoint\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(scaleKey, levels: number, selectedDataPointIdxFn?: SelectedDatPointIdxFn)\n                    \n                \n                        \n                            \n                                Defined in src/renderers/bar/highlight-strategies/bar-highlight-strategy.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        scaleKey\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                scale that will be used for searching for the data point that will be highlighted\n\n                                                        \n                                                \n                                                \n                                                        levels\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                for band scales, how many levels deep do we go to compare values\n\n                                                        \n                                                \n                                                \n                                                        selectedDataPointIdxFn\n                                                  \n                                                        \n                                                                        SelectedDatPointIdxFn\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            draw\n                        \n                        \n                    \n                \n            \n            \n                \ndraw(renderer: BarRenderer, renderSeries: IRenderSeries, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/bar/highlight-strategies/bar-highlight-strategy.ts:120\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                                BarRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            findDataPointByValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findDataPointByValue(series: IDataSeries, value: any, scaleKey, scales?: Scales)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/bar/highlight-strategies/bar-highlight-strategy.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    series\n                                    \n                                            IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scaleKey\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDataPointIndex\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointIndex(renderer: BarRenderer, series: IDataSeries, values: literal type, scales: Scales)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/bar/highlight-strategies/bar-highlight-strategy.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                                BarRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    series\n                                    \n                                            IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    values\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            highlightDataPoint\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    highlightDataPoint(renderer: BarRenderer, renderSeries: IRenderSeries, dataPointIndex: number, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/bar/highlight-strategies/bar-highlight-strategy.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                                BarRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dataPointIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { select } from \"d3-selection\";\nimport findIndex from \"lodash/findIndex\";\nimport isArray from \"lodash/isArray\";\nimport isUndefined from \"lodash/isUndefined\";\nimport { Subject } from \"rxjs\";\n\nimport { DATA_POINT_INTERACTION_RESET, DATA_POINT_NOT_FOUND } from \"../../../constants\";\nimport { TimeIntervalScale } from \"../../../core/common/scales/time-interval-scale\";\nimport { TimeScale } from \"../../../core/common/scales/time-scale\";\nimport { isBandScale, IXYScales, Scales } from \"../../../core/common/scales/types\";\nimport { IDataSeries, IRendererEventPayload } from \"../../../core/common/types\";\nimport { UtilityService } from \"../../../core/common/utility.service\";\nimport { IRectangleAccessors } from \"../../accessors/rectangle-accessors\";\nimport { IHighlightStrategy, IRenderSeries, RenderLayerName, RenderState } from \"../../types\";\nimport { BarRenderer } from \"../bar-renderer\";\n\nexport type SelectedDatPointIdxFn = (seriesId: string) => number;\n\nexport class BarHighlightStrategy implements IHighlightStrategy {\n\n    /**\n     * @param scaleKey scale that will be used for searching for the data point that will be highlighted\n     * @param levels for band scales, how many levels deep do we go to compare values\n     */\n    constructor(private scaleKey: keyof IXYScales, private levels = 1, private selectedDataPointIdxFn?: SelectedDatPointIdxFn) {\n    }\n\n    public getDataPointIndex(renderer: BarRenderer, series: IDataSeries, values: { [p: string]: any }, scales: Scales) {\n        const value = values[this.scaleKey];\n        if (typeof value === \"undefined\") {\n            // if there is no value we're returning -2 (DATA_POINT_INTERACTION_RESET) which helps highlightDataPoint\n            // to understand that we need to emphasise things when we are moving outside of an interactive area\n            return DATA_POINT_INTERACTION_RESET;\n        }\n\n        return this.findDataPointByValue(series, value, this.scaleKey, scales);\n    }\n\n    public findDataPointByValue(series: IDataSeries, value: any, scaleKey: keyof IXYScales, scales?: Scales) {\n        const accessorSuffix = (scaleKey as string).toUpperCase();\n        const dataAccessors = series.accessors.data;\n\n        const startAccessor = dataAccessors[\"start\" + accessorSuffix];\n        const endAccessor = dataAccessors[\"end\" + accessorSuffix];\n\n        if (typeof value === \"string\") {\n            return findIndex(series.data,\n                (d, i) => value === startAccessor?.(d, i, series.data, series));\n        } else if (isArray(value)) {\n            return findIndex(series.data,\n                (d, i) => {\n                    const start = startAccessor?.(d, i, series.data, series);\n                    const lengthLimit = Math.min(this.levels, value.length, start.length);\n                    // diy efficient array comparison\n                    for (let j = 0; j  valueOf >= startAccessor?.(d, i, series.data, series).valueOf() &&\n                        valueOf  startAccessor?.(d, i, series.data, series);\n                        const nearestIndex = UtilityService.findNearestIndex(series.data, value, accessor);\n                        \n                        index = (nearestIndex >= series.data.length || accessor(series.data[nearestIndex], nearestIndex) > valueOf) ? -1 : nearestIndex;\n                        \n                    } else {\n                        // @ts-ignore\n                        // Needs to catch -1 otherwise typescript errors\n                        index = UtilityService.getClosestIndex(series.data, (d, i) => endAccessor(d, i, series.data, series), value) ?? -1;\n                    }\n                }\n                return index;\n            }\n            return findIndex(series.data,\n                (d, i) => valueOf >= startAccessor?.(d, i, series.data, series).valueOf() &&\n                    valueOf ,\n                              dataPointIndex: number, rendererSubject: Subject): void {\n        const target = renderSeries.containers[RenderLayerName.data];\n        const barStylesFn = renderer.getContainerStateStyles;\n        const selectedDataPointIdx = !isUndefined(this.selectedDataPointIdxFn) ? this.selectedDataPointIdxFn(renderSeries.dataSeries.id) : DATA_POINT_NOT_FOUND;\n\n        target.selectAll(`g.${ renderer.barContainerClass }`).each(function (d: any, index: number) {\n            let renderState: RenderState;\n            if (dataPointIndex === DATA_POINT_INTERACTION_RESET) {\n                if (index === selectedDataPointIdx || selectedDataPointIdx === DATA_POINT_NOT_FOUND) {\n                    renderState = RenderState.default;\n                } else {\n                    renderState = RenderState.deemphasized;\n                }\n            } else if (dataPointIndex === index || index === selectedDataPointIdx) {\n                renderState = RenderState.emphasized;\n            } else {\n                renderState = RenderState.deemphasized;\n            }\n            select(this).attrs(barStylesFn(renderState));\n        });\n\n        // rendererSubject.next({\n        //     eventName: HIGHLIGHT_SERIES_EVENT,\n        //     data: renderer.getDataPoint(renderSeries, renderSeries.dataSeries.data[dataPointIndex], dataPointIndex),\n        // });\n    }\n\n    draw(renderer: BarRenderer, renderSeries: IRenderSeries, rendererSubject: Subject) {\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BarHorizontalGridConfig.html":{"url":"classes/BarHorizontalGridConfig.html","title":"class - BarHorizontalGridConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BarHorizontalGridConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/config/bar-horizontal-grid-config.ts\n        \n\n            \n                Description\n            \n            \n                Pre-defined and conforming Nova UX standards configuration of XYGrid for horizontal bar chart\n\n            \n\n            \n                Extends\n            \n            \n                        XYGridConfig\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                axis\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_MARGIN\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_PADDING\n                            \n                            \n                                    Public\n                                interactionPlugins\n                            \n                            \n                                    Public\n                                borders\n                            \n                            \n                                    Public\n                                cursor\n                            \n                            \n                                    Public\n                                dimension\n                            \n                            \n                                    Public\n                                interactive\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/core/grid/config/bar-horizontal-grid-config.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            axis\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: new AxisConfig(),\n        right: new AxisConfig(),\n        bottom: new AxisConfig(),\n        left: new AxisConfig(),\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:23\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_MARGIN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: 0,\n        right: 5,\n        bottom: 20,\n        left: 30,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:9\n\n                            \n                        \n\n                \n                    \n                        The default margin \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_PADDING\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        left: 0,\n        right: 0,\n        top: 5,\n        bottom: 5,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interactionPlugins\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:32\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            borders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        // TODO: Review this\n        // @ts-ignore\n        top: undefined,\n        // @ts-ignore\n        bottom: undefined,\n        // @ts-ignore\n        left: undefined,\n        // @ts-ignore\n        right: undefined,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:16\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            cursor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"crosshair\"\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:28\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dimension\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IDimensionConfig\n\n                        \n                    \n                    \n                        \n                            Default value : new DimensionConfig()\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:14\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interactive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:11\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { XYGridConfig } from \"./xy-grid-config\";\n\n/**\n * Pre-defined and conforming Nova UX standards configuration of XYGrid for horizontal bar chart\n */\nexport class BarHorizontalGridConfig extends XYGridConfig {\n    constructor() {\n        super();\n\n        this.interactionPlugins = false;\n\n        this.axis.left.gridTicks = false;\n        this.axis.left.tickSize = 0;\n        this.axis.bottom.gridTicks = true;\n        this.axis.left.fit = true;\n        this.axis.bottom.fit = true;\n        this.axis.bottom.tickSize = 0;\n        this.axis.left.tickSize = 5;\n        this.dimension.padding.left =  2; // 2 for border\n        this.borders.left.visible = true;\n        this.borders.bottom.visible = false;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BarSeriesHighlightStrategy.html":{"url":"classes/BarSeriesHighlightStrategy.html","title":"class - BarSeriesHighlightStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BarSeriesHighlightStrategy\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/bar/highlight-strategies/bar-series-highlight-strategy.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IHighlightStrategy\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                draw\n                            \n                            \n                                    Public\n                                findDataPointByValue\n                            \n                            \n                                    Public\n                                getDataPointIndex\n                            \n                            \n                                    Public\n                                highlightDataPoint\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(scaleKey, levels: number)\n                    \n                \n                        \n                            \n                                Defined in src/renderers/bar/highlight-strategies/bar-series-highlight-strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        scaleKey\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                scale that will be used for searching for the datapoint that will be highlighted\n\n                                                        \n                                                \n                                                \n                                                        levels\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                for band scales, how many levels deep do we go to compare values\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            draw\n                        \n                        \n                    \n                \n            \n            \n                \ndraw(renderer: BarRenderer, renderSeries: IRenderSeries, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/bar/highlight-strategies/bar-series-highlight-strategy.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                                BarRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            findDataPointByValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findDataPointByValue(series: IDataSeries, value: any, scaleKey)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/bar/highlight-strategies/bar-series-highlight-strategy.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    series\n                                    \n                                            IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scaleKey\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDataPointIndex\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointIndex(renderer: BarRenderer, series: IDataSeries, values: literal type, scales: Scales)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/bar/highlight-strategies/bar-series-highlight-strategy.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                                BarRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    series\n                                    \n                                            IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    values\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            highlightDataPoint\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    highlightDataPoint(renderer: BarRenderer, renderSeries: IRenderSeries, dataPointIndex: number, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/bar/highlight-strategies/bar-series-highlight-strategy.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                                BarRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dataPointIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import findIndex from \"lodash/findIndex\";\nimport isArray from \"lodash/isArray\";\nimport { Subject } from \"rxjs\";\n\nimport { DATA_POINT_INTERACTION_RESET, HIGHLIGHT_SERIES_EVENT } from \"../../../constants\";\nimport { IXYScales, Scales } from \"../../../core/common/scales/types\";\nimport { IDataSeries, IRendererEventPayload } from \"../../../core/common/types\";\nimport { IRectangleAccessors } from \"../../accessors/rectangle-accessors\";\nimport { IHighlightStrategy, IRenderSeries } from \"../../types\";\nimport { BarRenderer } from \"../bar-renderer\";\n\nexport class BarSeriesHighlightStrategy implements IHighlightStrategy {\n\n    /**\n     * @param scaleKey scale that will be used for searching for the datapoint that will be highlighted\n     * @param levels for band scales, how many levels deep do we go to compare values\n     */\n    constructor(private scaleKey: keyof IXYScales, private levels = 1) {\n    }\n\n    public getDataPointIndex(renderer: BarRenderer, series: IDataSeries, values: { [p: string]: any }, scales: Scales) {\n        const value = values[this.scaleKey];\n        if (typeof value === \"undefined\") {\n            // if there is no value we're returning -2 (DATA_POINT_INTERACTION_RESET) which helps highlightDataPoint\n            // to understand that we need to emphasise things when we are moving outside of an interactive area\n            return DATA_POINT_INTERACTION_RESET;\n        }\n\n        return this.findDataPointByValue(series, value, this.scaleKey);\n    }\n\n    public findDataPointByValue(series: IDataSeries, value: any, scaleKey: keyof IXYScales) {\n        const accessorSuffix = (scaleKey as string).toUpperCase();\n        const dataAccessors = series.accessors.data;\n\n        const startAccessor = dataAccessors[\"start\" + accessorSuffix];\n        const endAccessor = dataAccessors[\"end\" + accessorSuffix];\n\n        if (typeof value === \"string\") {\n            return findIndex(series.data,\n                (d, i) => value === startAccessor?.(d, i, series.data, series));\n        } else if (isArray(value)) {\n            return findIndex(series.data,\n                (d, i) => {\n                    const start = startAccessor?.(d, i, series.data, series);\n                    const lengthLimit = Math.min(this.levels, value.length, start.length);\n                    // diy efficient array comparison\n                    for (let j = 0; j  valueOf >= startAccessor?.(d, i, series.data, series).valueOf() &&\n                    valueOf ,\n                              dataPointIndex: number, rendererSubject: Subject): void {\n        if (dataPointIndex >= 0 || dataPointIndex === DATA_POINT_INTERACTION_RESET) {\n            rendererSubject.next({\n                eventName: HIGHLIGHT_SERIES_EVENT,\n                data: renderer.getDataPoint(renderSeries, renderSeries.dataSeries.data[dataPointIndex], dataPointIndex),\n            });\n        }\n    }\n\n    draw(renderer: BarRenderer, renderSeries: IRenderSeries, rendererSubject: Subject) {\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BarStatusGridConfig.html":{"url":"classes/BarStatusGridConfig.html","title":"class - BarStatusGridConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BarStatusGridConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/config/bar-status-grid-config.ts\n        \n\n\n            \n                Extends\n            \n            \n                        XYGridConfig\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                axis\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_MARGIN\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_PADDING\n                            \n                            \n                                    Public\n                                interactionPlugins\n                            \n                            \n                                    Public\n                                borders\n                            \n                            \n                                    Public\n                                cursor\n                            \n                            \n                                    Public\n                                dimension\n                            \n                            \n                                    Public\n                                interactive\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/core/grid/config/bar-status-grid-config.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            axis\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: new AxisConfig(),\n        right: new AxisConfig(),\n        bottom: new AxisConfig(),\n        left: new AxisConfig(),\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:23\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_MARGIN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: 0,\n        right: 5,\n        bottom: 20,\n        left: 30,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:9\n\n                            \n                        \n\n                \n                    \n                        The default margin \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_PADDING\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        left: 0,\n        right: 0,\n        top: 5,\n        bottom: 5,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interactionPlugins\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:32\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            borders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        // TODO: Review this\n        // @ts-ignore\n        top: undefined,\n        // @ts-ignore\n        bottom: undefined,\n        // @ts-ignore\n        left: undefined,\n        // @ts-ignore\n        right: undefined,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:16\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            cursor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"crosshair\"\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:28\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dimension\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IDimensionConfig\n\n                        \n                    \n                    \n                        \n                            Default value : new DimensionConfig()\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:14\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interactive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:11\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { XYGridConfig } from \"./xy-grid-config\";\n\nexport class BarStatusGridConfig extends XYGridConfig {\n    constructor(config: { showBottomAxis: boolean } = {showBottomAxis: true}) {\n        super();\n\n        this.interactive = true;\n        this.interactionPlugins = false;\n        if (!config.showBottomAxis) {\n            this.axis.bottom.visible = false;\n            this.borders.bottom.visible = false;\n        }\n        this.axis.left.visible = false;\n        this.axis.left.gridTicks = false;\n        this.borders.left.visible = false;\n\n        this.dimension.autoHeight = false;\n        this.dimension.margin.top = 0;\n        if (!config.showBottomAxis) {\n            this.dimension.margin.bottom = 0;\n        }\n        this.dimension.height(30); // TODO: solve magic number together with spark chart\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BarTooltipsPlugin.html":{"url":"classes/BarTooltipsPlugin.html","title":"class - BarTooltipsPlugin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BarTooltipsPlugin\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/tooltips/bar-tooltips-plugin.ts\n        \n\n\n            \n                Extends\n            \n            \n                        ChartTooltipsPlugin\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                dataPointPositions\n                            \n                            \n                                    Public\n                                dataPoints\n                            \n                            \n                                    Public\n                                hideSubject\n                            \n                            \n                                    Public\n                                orientation\n                            \n                            \n                                    Public\n                                showSubject\n                            \n                            \n                                    Public\n                                chart\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                processHighlightedDataPoints\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config?: IBarChartConfig)\n                    \n                \n                        \n                            \n                                Defined in src/core/plugins/tooltips/bar-tooltips-plugin.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        IBarChartConfig\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dataPointPositions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartTooltipsPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartTooltipsPlugin:65\n\n                            \n                        \n\n                \n                    \n                        Calculated positions for the data point tooltips \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dataPoints\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IDataPointsPayload\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartTooltipsPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartTooltipsPlugin:63\n\n                            \n                        \n\n                \n                    \n                        Highlighted data points received from the chart \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            hideSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartTooltipsPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartTooltipsPlugin:75\n\n                            \n                        \n\n                \n                    \n                        This publishes an event to hide tooltips\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            orientation\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     \"right\" | \"top\"\n\n                        \n                    \n                    \n                        \n                            Default value : \"right\"\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartTooltipsPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartTooltipsPlugin:88\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            showSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartTooltipsPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartTooltipsPlugin:70\n\n                            \n                        \n\n                \n                    \n                        This publishes an event to show tooltips\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IChart\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPlugin:7\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartTooltipsPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartTooltipsPlugin:126\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartTooltipsPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartTooltipsPlugin:98\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            processHighlightedDataPoints\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processHighlightedDataPoints(dataPoints: IDataPointsPayload)\n                \n            \n\n\n            \n                \n                    Inherited from         ChartTooltipsPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartTooltipsPlugin:131\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataPoints\n                                    \n                                                IDataPointsPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:15\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:9\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IBarChartConfig } from \"../../../renderers/bar/types\";\n\nimport { ChartTooltipsPlugin } from \"./chart-tooltips-plugin\";\n\nexport class BarTooltipsPlugin extends ChartTooltipsPlugin {\n\n    constructor(config?: IBarChartConfig) {\n        super();\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BasicLegendTileComponent.html":{"url":"components/BasicLegendTileComponent.html","title":"component - BasicLegendTileComponent","body":"\n                   \n\n\n\n\n\n  Components\n  BasicLegendTileComponent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n    File\n\n\n    src/legend/legend-tile/basic-legend-tile/basic-legend-tile.component.ts\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n            \n                encapsulation\n                ViewEncapsulation.Emulated\n            \n\n\n\n\n\n\n\n\n\n            \n                selector\n                nui-basic-legend-tile\n            \n\n            \n                styleUrls\n                ./basic-legend-tile.component.less\n            \n\n\n\n            \n                templateUrl\n                ./basic-legend-tile.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import {\n    Component,\n    ViewEncapsulation\n} from \"@angular/core\";\n\n@Component({\n    selector: \"nui-basic-legend-tile\",\n    templateUrl: \"./basic-legend-tile.component.html\",\n    styleUrls: [\"./basic-legend-tile.component.less\"],\n    encapsulation: ViewEncapsulation.Emulated,\n})\nexport class BasicLegendTileComponent { }\n\n    \n\n\n\n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    '\n    var COMPONENTS = [{'name': 'BasicLegendTileComponent', 'selector': 'nui-basic-legend-tile'},{'name': 'ChartComponent', 'selector': 'nui-chart'},{'name': 'ChartDonutContentComponent', 'selector': 'nui-chart-donut-content'},{'name': 'ChartMarkerComponent', 'selector': 'nui-chart-marker'},{'name': 'ChartPopoverComponent', 'selector': 'nui-chart-popover'},{'name': 'ChartTooltipComponent', 'selector': 'nui-chart-tooltip'},{'name': 'ChartTooltipsComponent', 'selector': 'nui-chart-tooltips'},{'name': 'LegendComponent', 'selector': 'nui-legend'},{'name': 'LegendSeriesComponent', 'selector': 'nui-legend-series'},{'name': 'RichLegendTileComponent', 'selector': 'nui-rich-legend-tile'}];\n    var DIRECTIVES = [{'name': 'ChartCollectionIdDirective', 'selector': '[nuiChartCollectionId]'}];\n    var ACTUAL_COMPONENT = {'name': 'BasicLegendTileComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Chart.html":{"url":"classes/Chart.html","title":"class - Chart","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Chart\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/chart.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IChart\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                element\n                            \n                            \n                                    Public\n                                    Readonly\n                                eventBus\n                            \n                            \n                                    Public\n                                    Optional\n                                filterDefs\n                            \n                            \n                                    Public\n                                    Optional\n                                target\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addPlugin\n                            \n                            \n                                    Public\n                                addPlugins\n                            \n                            \n                                    Public\n                                build\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                getDataManager\n                            \n                            \n                                    Public\n                                getEventBus\n                            \n                            \n                                    Public\n                                getGrid\n                            \n                            \n                                    Public\n                                getRenderEngine\n                            \n                            \n                                    Public\n                                hasPlugin\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                removePlugin\n                            \n                            \n                                    Public\n                                removePlugins\n                            \n                            \n                                    Public\n                                setSeriesStates\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(grid: IGrid)\n                    \n                \n                        \n                            \n                                Defined in src/core/chart.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        grid\n                                                  \n                                                        \n                                                                        IGrid\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            element\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLElement\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            eventBus\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new EventBus()\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            filterDefs\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Selection\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            target\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         D3Selection\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart.ts:21\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addPlugin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addPlugin(plugin: IChartPlugin)\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    plugin\n                                    \n                                                IChartPlugin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addPlugins\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addPlugins(...plugins: IChartPlugin[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    plugins\n                                    \n                                            IChartPlugin[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            build\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    build(element: HTMLElement)\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    element\n                                    \n                                            HTMLElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:163\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDataManager\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataManager()\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     DataManager\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventBus\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventBus()\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     EventBus\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getGrid\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getGrid()\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         IGrid\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getRenderEngine\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRenderEngine()\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     RenderEngine\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            hasPlugin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hasPlugin(classRef)\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    classRef\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:157\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removePlugin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removePlugin(classRef)\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    classRef\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removePlugins\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removePlugins(...classRefs: ()[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    classRefs\n                                    \n                                            ()[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setSeriesStates\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setSeriesStates(renderStateData: IRenderStateData[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:173\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderStateData\n                                    \n                                                IRenderStateData[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(seriesSet: IChartSeries[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:149\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    seriesSet\n                                    \n                                                IChartSeries[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:153\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { select, Selection } from \"d3-selection\";\nimport each from \"lodash/each\";\nimport { BehaviorSubject, Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\nimport { DESTROY_EVENT, SERIES_STATE_CHANGE_EVENT } from \"../constants\";\n\nimport { ChartPlugin } from \"./common/chart-plugin\";\nimport { DataManager } from \"./common/data-manager\";\nimport { EventBus } from \"./common/event-bus\";\nimport { Lasagna } from \"./common/lasagna\";\nimport { RenderEngine } from \"./common/render-engine\";\nimport { D3Selection, IAccessors, IChart, IChartEvent, IChartPlugin, IChartSeries, IRenderStateData } from \"./common/types\";\nimport { IDimensionConfig, IDimensions, IGrid } from \"./grid/types\";\nimport { RenderEnginePlugin } from \"./plugins/render-engine-plugin\";\nimport { CssFilterId, GRAYSCALE_COLOR_MATRIX } from \"./types\";\n\nexport class Chart implements IChart {\n    public readonly eventBus = new EventBus();\n    public element: HTMLElement;\n    public target?: D3Selection;\n    public filterDefs?: Selection;\n\n    private dataManager: DataManager; // TODO: interface\n    private renderEngine: RenderEngine; // TODO: interface\n\n    private updateSubject = new BehaviorSubject[]>([]);\n    private updateDimensionsSubject = new Subject();\n    private seriesStatesSubject = new BehaviorSubject([]);\n\n    private plugins: IChartPlugin[] = [];\n\n    constructor(private grid: IGrid) {\n        if (!grid) {\n            throw new Error(\"Grid has to be defined!\");\n        }\n        grid.updateChartDimensionsSubject = this.updateDimensionsSubject;\n        grid.eventBus = this.eventBus;\n    }\n\n    public getEventBus(): EventBus {\n        return this.eventBus;\n    }\n\n    public getDataManager(): DataManager {\n        return this.dataManager;\n    }\n\n    public getRenderEngine(): RenderEngine {\n        return this.renderEngine;\n    }\n\n    public getGrid(): IGrid {\n        return this.grid;\n    }\n\n    public addPlugin(plugin: IChartPlugin) {\n        plugin.chart = this;\n        this.plugins.push(plugin);\n    }\n\n    public removePlugin(classRef: typeof ChartPlugin) {\n        const pluginIndex = this.plugins.findIndex(plugin => plugin instanceof classRef);\n        if (-1 !== pluginIndex) {\n            this.plugins[pluginIndex].destroy();\n            this.plugins.splice(pluginIndex, 1);\n        }\n    }\n\n    public addPlugins(...plugins: IChartPlugin[]) {\n        for (const plugin of plugins) {\n            this.addPlugin(plugin);\n        }\n    }\n\n    public removePlugins(...classRefs: (typeof ChartPlugin)[]) {\n        for (const classRef of classRefs) {\n            this.removePlugin(classRef);\n        }\n    }\n\n    public hasPlugin(classRef: typeof ChartPlugin) {\n        return -1 !== this.plugins.findIndex(plugin => plugin instanceof classRef);\n    }\n\n    public build(element: HTMLElement) {\n        this.element = element;\n\n        // @ts-ignore: Workaround to avoid strict build crash because of type\n        this.target = select(this.element)\n            .append(\"svg\")\n            .attrs({\n                \"class\": \"nui-chart\",\n                \"height\": \"100%\",\n                \"width\": \"100%\",\n            });\n\n        this.configureCssFilters();\n        this.buildGrid();\n\n        this.dataManager = this.buildDataManager();\n        this.renderEngine = this.buildRenderEngine(this.grid.getLasagna(), this.dataManager);\n\n        this.addPlugin(new RenderEnginePlugin());\n\n        for (const gridPlugin of this.getGrid().buildPlugins(this)) {\n            this.addPlugin(gridPlugin);\n        }\n\n        this.initialize();\n\n        const untilDestroy = () => takeUntil(this.getEventBus().getStream(DESTROY_EVENT));\n        this.updateSubject.pipe(untilDestroy())\n            .subscribe((d: IChartSeries[]) => this.onUpdate(d));\n        this.updateDimensionsSubject.pipe(untilDestroy())\n            .subscribe(() => this.onUpdateDimensions());\n        this.seriesStatesSubject.pipe(untilDestroy())\n            .subscribe((rs: IRenderStateData[]) => this.onSetSeriesStates(rs));\n    }\n\n    private configureCssFilters() {\n        this.filterDefs = this.target?.append(\"defs\");\n\n        // filter for applying a grayscale appearance to svg elements\n        this.filterDefs?.append(\"filter\")\n            .attr(\"id\", CssFilterId.Grayscale)\n            .append(\"feColorMatrix\")\n            .attr(\"type\", \"matrix\")\n            .attr(\"values\", GRAYSCALE_COLOR_MATRIX);\n    }\n\n    protected buildDataManager(): DataManager {\n        return new DataManager();\n    }\n\n    protected buildGrid() {\n        if (this.target) {\n            this.grid.target(this.target);\n            this.grid.build();\n\n            this.updateTargetDimensions(this.grid.config().dimension);\n        }\n    }\n\n    protected buildRenderEngine(lasagna: Lasagna, dataManager: DataManager): RenderEngine {\n        return new RenderEngine(lasagna, dataManager);\n    }\n\n    public update(seriesSet: IChartSeries[]) {\n        this.updateSubject.next(seriesSet);\n    }\n\n    public updateDimensions() {\n        this.updateDimensionsSubject.next();\n    }\n\n    public initialize() {\n        each(this.plugins, (p: IChartPlugin) => {\n            p.initialize();\n        });\n    }\n\n    public destroy() {\n        this.eventBus.getStream(DESTROY_EVENT).next({ data: null });\n        this.eventBus.destroy();\n\n        this.plugins.forEach(p => p.destroy());\n\n        this.target?.remove();\n        this.target = undefined;\n    }\n\n    public setSeriesStates(renderStateData: IRenderStateData[]) {\n        this.seriesStatesSubject.next(renderStateData);\n        this.eventBus.getStream(SERIES_STATE_CHANGE_EVENT).next({ data: renderStateData });\n    }\n\n    private onUpdate(seriesSet: IChartSeries[]) {\n        this.dataManager.update(seriesSet);\n\n        this.grid.scales = this.dataManager.scalesIndexByKey;\n        this.dataManager.updateScaleDomains();\n        this.grid.updateRanges();\n\n        this.plugins.forEach(p => p.update());\n    }\n\n    private onUpdateDimensions() {\n        const dimensionConfig = this.grid.config().dimension;\n\n        // if the chart is reused with different grid dimensions, the chart's container dimensions need to be adjusted as well\n        this.updateTargetDimensions(dimensionConfig);\n\n        const dimensions: Partial = {};\n        if (dimensionConfig.autoHeight) {\n            dimensions.height = this.element.clientHeight;\n        }\n        if (dimensionConfig.autoWidth) {\n            dimensions.width = this.element.clientWidth;\n        }\n        this.grid.updateDimensions(dimensions);\n\n        this.plugins.forEach(p => p.updateDimensions());\n    }\n\n    private updateTargetDimensions(dimensionConfig: IDimensionConfig) {\n        if (!dimensionConfig.autoHeight) {\n            // use style instead of attr to override css style\n            this.target?.style(\"height\", dimensionConfig.outerHeight() + \"px\");\n        }\n        if (!dimensionConfig.autoWidth) {\n            // use style instead of attr to override css style\n            this.target?.style(\"width\", dimensionConfig.outerWidth() + \"px\");\n        }\n    }\n\n    private onSetSeriesStates(renderStateData: IRenderStateData[]) {\n        this.renderEngine.setSeriesStates(renderStateData);\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChartAssistRenderStateData.html":{"url":"classes/ChartAssistRenderStateData.html","title":"class - ChartAssistRenderStateData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChartAssistRenderStateData\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/chart-assists/types.ts\n        \n\n            \n                Description\n            \n            \n                Legend interaction assist uses this class to present the state that consists of emphasisState+visible as one state\n\n            \n\n\n            \n                Implements\n            \n            \n                            IRenderStateData\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                emphasisState\n                            \n                            \n                                    Public\n                                series\n                            \n                            \n                                    Public\n                                seriesId\n                            \n                            \n                                    Public\n                                visible\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    state\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(seriesId: string, series: IChartAssistSeries, emphasisState, visible)\n                    \n                \n                        \n                            \n                                Defined in src/core/chart-assists/types.ts:58\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        seriesId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        series\n                                                  \n                                                        \n                                                                    IChartAssistSeries\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        emphasisState\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        visible\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            emphasisState\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : RenderState.default\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/types.ts:61\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     IChartAssistSeries\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/types.ts:60\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            seriesId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/types.ts:59\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/types.ts:62\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        state\n                    \n                \n\n                \n                    \n                        getstate()\n                    \n                \n                            \n                                \n                                    Defined in src/core/chart-assists/types.ts:65\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { RenderState } from \"../../renderers/types\";\nimport { IAccessors, IChart, IChartAssistSeries, IChartSeries, IRenderStateData } from \"../common/types\";\n\n/**\n * Interface representing the spark chart assist's\n * association between one of its charts and a series set\n */\nexport interface ISpark {\n    chartSeriesSet: IChartAssistSeries[];\n    id?: string;\n    chart?: IChart;\n}\n\n/**\n * Interface representing an assistant that aids in chart usage\n */\nexport interface IChartAssist {\n    /**\n     * Updates the series set for the chart assist's associated chart\n     *\n     * @param inputSeriesSet The updated set of series\n     */\n    update(inputSeriesSet: IChartAssistSeries[]): void;\n\n    /**\n     * Gets the current highlighted value for the specified series\n     *\n     * @param {IChartSeries} chartSeries The chart series to get the highlighted value for\n     * @param {string} scaleKey The key for the datapoint value scale\n     * @param {string} [formatterName] The name of the formatter if a custom formatter name is set on the scale\n     *\n     * @returns {string} The highlighted value\n     */\n    getHighlightedValue(chartSeries: IChartSeries, scaleKey: string, formatterName?: string): string | number | undefined;\n\n    /**\n     * Returns visible series that are represented by a legend\n     */\n    getVisibleSeriesWithLegend(): IChartAssistSeries[];\n}\n\n/** Event types that can be emitted from a chart assist */\nexport enum ChartAssistEventType {\n    ToggleSeries = \"ToggleSeries\",\n    ResetVisibleSeries = \"ResetVisibleSeries\",\n    EmphasizeSeries = \"EmphasizeSeries\",\n}\n\n/** Interface for chart assist events */\nexport interface IChartAssistEvent {\n    type: ChartAssistEventType;\n    payload: any;\n}\n\n/**\n * Legend interaction assist uses this class to present the state that consists of emphasisState+visible as one state\n */\nexport class ChartAssistRenderStateData implements IRenderStateData {\n    constructor(public seriesId: string,\n                public series: IChartAssistSeries,\n                public emphasisState = RenderState.default,\n                public visible = true) {\n    }\n\n    get state(): RenderState {\n        return this.visible ? this.emphasisState : RenderState.hidden;\n    }\n}\n\nexport interface IRenderStatesIndex {\n    [seriesId: string]: ChartAssistRenderStateData;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/ChartCollectionIdDirective.html":{"url":"directives/ChartCollectionIdDirective.html","title":"directive - ChartCollectionIdDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  ChartCollectionIdDirective\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chart-collection/chart-collection-id.directive.ts\n        \n\n            \n                Description\n            \n            \n                This directive represents a grouping behavior that is separated from chart components. Any chart component\nregistering the CHART_COMPONENT provider can be injected into this.\nA group of charts with the same associated chart collection id will share events broadcasted through their event buses.\n\n            \n\n            \n                Implements\n            \n            \n                            AfterViewInit\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [nuiChartCollectionId]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                nuiChartCollectionId\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(chartComponent: IChartComponent, chartCollectionService: ChartCollectionService)\n                    \n                \n                        \n                            \n                                Defined in src/chart-collection/chart-collection-id.directive.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        chartComponent\n                                                  \n                                                        \n                                                                        IChartComponent\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        chartCollectionService\n                                                  \n                                                        \n                                                                        ChartCollectionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        nuiChartCollectionId\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/chart-collection/chart-collection-id.directive.ts:20\n                            \n                        \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { AfterViewInit, Directive, Inject, Input } from \"@angular/core\";\n\nimport { CHART_COMPONENT } from \"../constants\";\nimport { IChartComponent } from \"../core/common/types\";\n\nimport { ChartCollectionService } from \"./chart-collection.service\";\n\n/**\n * This directive represents a grouping behavior that is separated from chart components. Any chart component\n * registering the CHART_COMPONENT provider can be injected into this.\n *\n * A group of charts with the same associated chart collection id will share events broadcasted through their event buses.\n */\n@Directive({\n    selector: \"[nuiChartCollectionId]\",\n})\nexport class ChartCollectionIdDirective implements AfterViewInit {\n    /* eslint-disable-next-line @angular-eslint/no-input-rename */\n    @Input(\"nuiChartCollectionId\")\n    public collectionId: string;\n\n    constructor(@Inject(CHART_COMPONENT) private chartComponent: IChartComponent,\n                private chartCollectionService: ChartCollectionService) {\n    }\n\n    public ngAfterViewInit(): void {\n        this.chartCollectionService.getChartCollection(this.collectionId).addChart(this.chartComponent.chart);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ChartCollectionService.html":{"url":"injectables/ChartCollectionService.html","title":"injectable - ChartCollectionService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ChartCollectionService\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chart-collection/chart-collection.service.ts\n        \n\n            \n                Description\n            \n            \n                This service registers collections of charts identified by given id. It is used primarily by the ChartCollectionId directive.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getChartCollection\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getChartCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getChartCollection(collectionId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/chart-collection/chart-collection.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    collectionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport isUndefined from \"lodash/isUndefined\";\n\nimport { ChartCollection } from \"../core/chart-collection\";\n\n/**\n * This service registers collections of charts identified by given id. It is used primarily by the ChartCollectionId directive.\n */\n@Injectable()\nexport class ChartCollectionService {\n\n    private collections: { [key: string]: ChartCollection } = {};\n\n    public getChartCollection(collectionId: string) {\n        let collection = this.collections[collectionId];\n        if (isUndefined(collection)) {\n            collection = new ChartCollection();\n            this.collections[collectionId] = collection;\n        }\n        return collection;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ChartComponent.html":{"url":"components/ChartComponent.html","title":"component - ChartComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ChartComponent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n    File\n\n\n    src/chart/chart.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    AfterContentInit\n                    AfterViewInit\n                    OnDestroy\n                    IChartComponent\n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n            \n                providers\n                \n                                {\n    provide: CHART_COMPONENT, useExisting: forwardRef(() => ChartComponent),\n}\n                \n            \n\n\n            \n                selector\n                nui-chart\n            \n\n\n\n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                redraw\n                            \n                            \n                                    Public\n                                    Optional\n                                resizeObserver\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                chart\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(elRef: ElementRef, ngZone: NgZone, cd: ChangeDetectorRef)\n                    \n                \n                        \n                            \n                                Defined in src/chart/chart.component.ts:37\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        elRef\n                                                  \n                                                        \n                                                                        ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        ngZone\n                                                  \n                                                        \n                                                                        NgZone\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cd\n                                                  \n                                                        \n                                                                        ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        chart\n                    \n                \n                \n                    \n                        Type :         IChart\n\n                    \n                \n                        \n                            \n                                    Defined in src/chart/chart.component.ts:33\n                            \n                        \n            \n        \n\n\n\n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            redraw\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/chart/chart.component.ts:82\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            resizeObserver\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ResizeObserver\n\n                        \n                    \n                        \n                            \n                                    Defined in src/chart/chart.component.ts:35\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import {\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    forwardRef,\n    Input,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    SimpleChanges,\n} from \"@angular/core\";\nimport debounce from \"lodash/debounce\";\nimport ResizeObserver from \"resize-observer-polyfill\";\n\nimport { CHART_COMPONENT, CHART_VIEW_STATUS_EVENT, REFRESH_EVENT } from \"../constants\";\nimport { IChart, IChartComponent, IChartViewStatusEventPayload } from \"../core/common/types\";\n\n@Component({\n    selector: \"nui-chart\",\n    template: \"\",\n    providers: [\n        {\n            provide: CHART_COMPONENT,\n            useExisting: forwardRef(() => ChartComponent),\n        },\n    ],\n})\nexport class ChartComponent implements OnInit, AfterContentInit, AfterViewInit, OnDestroy, IChartComponent, OnChanges {\n\n    @Input() public chart: IChart;\n\n    public resizeObserver?: ResizeObserver;\n    private resizeHandler: Function;\n    private intersectionObserver: IntersectionObserver;\n\n    constructor(private elRef: ElementRef, private ngZone: NgZone, private cd: ChangeDetectorRef) {\n    }\n\n    public ngOnInit() {\n        this.intersectionObserver = new IntersectionObserver(this.intersectionObserverCallback);\n        this.intersectionObserver.observe(this.elRef.nativeElement);\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes[\"chart\"]) {\n            const previousChart: IChart = changes[\"chart\"].previousValue;\n            if (previousChart) {\n                previousChart.destroy();\n            }\n\n            if (this.chart) {\n                this.chart.build(this.elRef.nativeElement);\n                this.redraw();\n            }\n        }\n    }\n\n    public ngAfterContentInit() {\n        this.chart.getEventBus().getStream(REFRESH_EVENT).subscribe(() => {\n            this.chart.updateDimensions();\n        });\n    }\n\n    public ngAfterViewInit() {\n        this.resizeHandler = debounce(() => this.redraw(), 10);\n        this.resizeObserver = new ResizeObserver(() => {\n            // This was suggested here https://github.com/angular/zone.js/issues/1011\n            this.ngZone.run(() => this.resizeHandler());\n        });\n        this.ngZone.runOutsideAngular(() => this.resizeObserver?.observe((this.elRef.nativeElement)));\n    }\n\n    public ngOnDestroy() {\n        this.intersectionObserver?.unobserve(this.elRef.nativeElement);\n        this.resizeObserver?.unobserve(this.elRef.nativeElement);\n        this.chart?.destroy();\n    }\n\n    public redraw = () => {\n        this.chart.updateDimensions();\n        this.cd.detectChanges();\n    }\n\n    private intersectionObserverCallback = (entries: IntersectionObserverEntry[], observer: IntersectionObserver): void => {\n        // Since we're only listening for intersection changes for one target (the chart itself), the 'entries' argument always has just one element.\n        const data: IChartViewStatusEventPayload = { isChartInView: entries[0].isIntersecting };\n        this.chart.getEventBus().getStream(CHART_VIEW_STATUS_EVENT).next({ data });\n    }\n}\n\n    \n\n\n\n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'BasicLegendTileComponent', 'selector': 'nui-basic-legend-tile'},{'name': 'ChartComponent', 'selector': 'nui-chart'},{'name': 'ChartDonutContentComponent', 'selector': 'nui-chart-donut-content'},{'name': 'ChartMarkerComponent', 'selector': 'nui-chart-marker'},{'name': 'ChartPopoverComponent', 'selector': 'nui-chart-popover'},{'name': 'ChartTooltipComponent', 'selector': 'nui-chart-tooltip'},{'name': 'ChartTooltipsComponent', 'selector': 'nui-chart-tooltips'},{'name': 'LegendComponent', 'selector': 'nui-legend'},{'name': 'LegendSeriesComponent', 'selector': 'nui-legend-series'},{'name': 'RichLegendTileComponent', 'selector': 'nui-rich-legend-tile'}];\n    var DIRECTIVES = [{'name': 'ChartCollectionIdDirective', 'selector': '[nuiChartCollectionId]'}];\n    var ACTUAL_COMPONENT = {'name': 'ChartComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ChartDonutContentComponent.html":{"url":"components/ChartDonutContentComponent.html","title":"component - ChartDonutContentComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ChartDonutContentComponent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n    File\n\n\n    src/chart-donut-content/chart-donut-content.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnDestroy\n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                nui-chart-donut-content\n            \n\n            \n                styleUrls\n                ./chart-donut-content.component.less\n            \n\n\n\n            \n                templateUrl\n                ./chart-donut-content.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                contentPosition\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                plugin\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        plugin\n                    \n                \n                \n                    \n                        Type :         ChartDonutContentPlugin\n\n                    \n                \n                        \n                            \n                                    Defined in src/chart-donut-content/chart-donut-content.component.ts:15\n                            \n                        \n                \n                    \n                        The plugin instance \n\n                    \n                \n            \n        \n\n\n\n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            contentPosition\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IElementPosition\n\n                        \n                    \n                        \n                            \n                                    Defined in src/chart-donut-content/chart-donut-content.component.ts:18\n                            \n                        \n\n                \n                    \n                        The current content position \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, Input, OnChanges, OnDestroy, SimpleChanges } from \"@angular/core\";\nimport { Subscription } from \"rxjs\";\n\nimport { ChartDonutContentPlugin } from \"../core/plugins/chart-donut-content-plugin\";\nimport { IElementPosition } from \"../core/plugins/types\";\n\n@Component({\n    selector: \"nui-chart-donut-content\",\n    templateUrl: \"./chart-donut-content.component.html\",\n    styleUrls: [\"./chart-donut-content.component.less\"],\n})\nexport class ChartDonutContentComponent implements OnDestroy, OnChanges {\n\n    /** The plugin instance */\n    @Input() public plugin: ChartDonutContentPlugin;\n\n    /** The current content position */\n    public contentPosition: IElementPosition;\n\n    private contentPositionUpdateSubscription: Subscription;\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes.plugin) {\n            this.contentPositionUpdateSubscription?.unsubscribe();\n\n            this.contentPositionUpdateSubscription = this.plugin.contentPositionUpdateSubject.subscribe((contentPosition: IElementPosition) => {\n                this.contentPosition = contentPosition;\n            });\n\n            this.plugin.chart.updateDimensions();\n        }\n    }\n\n    public ngOnDestroy() {\n        if (this.contentPositionUpdateSubscription) {\n            this.contentPositionUpdateSubscription.unsubscribe();\n        }\n    }\n}\n\n    \n\n\n\n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    '\n    var COMPONENTS = [{'name': 'BasicLegendTileComponent', 'selector': 'nui-basic-legend-tile'},{'name': 'ChartComponent', 'selector': 'nui-chart'},{'name': 'ChartDonutContentComponent', 'selector': 'nui-chart-donut-content'},{'name': 'ChartMarkerComponent', 'selector': 'nui-chart-marker'},{'name': 'ChartPopoverComponent', 'selector': 'nui-chart-popover'},{'name': 'ChartTooltipComponent', 'selector': 'nui-chart-tooltip'},{'name': 'ChartTooltipsComponent', 'selector': 'nui-chart-tooltips'},{'name': 'LegendComponent', 'selector': 'nui-legend'},{'name': 'LegendSeriesComponent', 'selector': 'nui-legend-series'},{'name': 'RichLegendTileComponent', 'selector': 'nui-rich-legend-tile'}];\n    var DIRECTIVES = [{'name': 'ChartCollectionIdDirective', 'selector': '[nuiChartCollectionId]'}];\n    var ACTUAL_COMPONENT = {'name': 'ChartDonutContentComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChartDonutContentPlugin.html":{"url":"classes/ChartDonutContentPlugin.html","title":"class - ChartDonutContentPlugin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChartDonutContentPlugin\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/chart-donut-content-plugin.ts\n        \n\n            \n                Description\n            \n            \n                This plugin calculates new size and position for content inside donut chart\n\n            \n\n            \n                Extends\n            \n            \n                        ChartPlugin\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                contentPosition\n                            \n                            \n                                    Public\n                                contentPositionUpdateSubject\n                            \n                            \n                                    Public\n                                chart\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            contentPosition\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IElementPosition\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: 0,\n        left: 0,\n        width: 0,\n        height: 0,\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/chart-donut-content-plugin.ts:17\n                            \n                        \n\n                \n                    \n                        The current content position \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            contentPositionUpdateSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/chart-donut-content-plugin.ts:14\n                            \n                        \n\n                \n                    \n                        Subject for getting updates on the content position \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IChart\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPlugin:7\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/chart-donut-content-plugin.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/chart-donut-content-plugin.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:15\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:9\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import isUndefined from \"lodash/isUndefined\";\nimport { Subject } from \"rxjs\";\n\nimport { RadialRenderer } from \"../../renderers/radial/radial-renderer\";\nimport { ChartPlugin } from \"../common/chart-plugin\";\n\nimport { IElementPosition } from \"./types\";\n\n/**\n* This plugin calculates new size and position for content inside donut chart\n*/\nexport class ChartDonutContentPlugin extends ChartPlugin {\n    /** Subject for getting updates on the content position */\n    public contentPositionUpdateSubject = new Subject();\n\n    /** The current content position */\n    public contentPosition: IElementPosition = {\n        top: 0,\n        left: 0,\n        width: 0,\n        height: 0,\n    };\n\n    public updateDimensions() {\n        const radius = this.chart.getDataManager().chartSeriesSet.reduce((prev: number | undefined, current) => {\n            if (current.renderer instanceof RadialRenderer && !isUndefined(prev)) {\n                return Math.min(prev, current.renderer.getInnerRadius(current.scales.r.range(), current.data.length - 1));\n            }\n            return prev;\n        }, Infinity);\n\n        if (isUndefined(radius)) {\n            throw new Error(\"Radius is undefined\");\n        }\n\n        this.contentPosition = this.getContentPosition(radius);\n        this.contentPositionUpdateSubject.next(this.contentPosition);\n    }\n\n    public destroy(): void {\n        this.contentPositionUpdateSubject.complete();\n    }\n\n    private getContentPosition(areaSize: number): IElementPosition {\n        const basics = [this.chart.getGrid().config().dimension.outerHeight() / 2, this.chart.getGrid().config().dimension.outerWidth() / 2];\n        return {\n            top: basics[0] - (areaSize / Math.sqrt(2)),\n            left: basics[1] - (areaSize / Math.sqrt(2)),\n            width: areaSize * Math.sqrt(2),\n            height: areaSize * Math.sqrt(2),\n        };\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ChartMarkerComponent.html":{"url":"components/ChartMarkerComponent.html","title":"component - ChartMarkerComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ChartMarkerComponent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n    File\n\n\n    src/chart-marker/chart-marker.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnDestroy\n                    AfterViewInit\n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                nui-chart-marker\n            \n\n            \n                styleUrls\n                ./chart-marker.component.less\n            \n\n\n\n            \n                templateUrl\n                ./chart-marker.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                height\n                            \n                            \n                                    Public\n                                svgContent\n                            \n                            \n                                    Public\n                                viewBox\n                            \n                            \n                                    Public\n                                width\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                color\n                            \n                            \n                                drawLine\n                            \n                            \n                                marker\n                            \n                            \n                                maxSize\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(changeDetector: ChangeDetectorRef)\n                    \n                \n                        \n                            \n                                Defined in src/chart-marker/chart-marker.component.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        changeDetector\n                                                  \n                                                        \n                                                                        ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        color\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/chart-marker/chart-marker.component.ts:18\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        drawLine\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/chart-marker/chart-marker.component.ts:17\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        marker\n                    \n                \n                \n                    \n                        Type :         IChartMarker\n\n                    \n                \n                        \n                            \n                                    Defined in src/chart-marker/chart-marker.component.ts:16\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        maxSize\n                    \n                \n                \n                    \n                        Default value : 20\n                    \n                \n                        \n                            \n                                    Defined in src/chart-marker/chart-marker.component.ts:19\n                            \n                        \n            \n        \n\n\n\n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            height\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"10px\"\n                        \n                    \n                        \n                            \n                                    Defined in src/chart-marker/chart-marker.component.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            svgContent\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ElementRef\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild('svgContent')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/chart-marker/chart-marker.component.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            viewBox\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/chart-marker/chart-marker.component.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            width\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"10px\"\n                        \n                    \n                        \n                            \n                                    Defined in src/chart-marker/chart-marker.component.ts:25\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { AfterViewInit, ChangeDetectorRef, Component, ElementRef, Inject, Input, OnChanges, OnDestroy, SimpleChanges, ViewChild } from \"@angular/core\";\nimport isFunction from \"lodash/isFunction\";\nimport { BehaviorSubject } from \"rxjs\";\n\nimport { IChartMarker } from \"../core/common/types\";\n\n/** @ignore */\nconst SVG_PADDING = 3;\n\n@Component({\n    selector: \"nui-chart-marker\",\n    templateUrl: \"./chart-marker.component.html\",\n    styleUrls: [\"./chart-marker.component.less\"],\n})\nexport class ChartMarkerComponent implements OnDestroy, AfterViewInit, OnChanges {\n    @Input() marker: IChartMarker;\n    @Input() drawLine: boolean;\n    @Input() color: string;\n    @Input() maxSize = 20;\n\n    @ViewChild(\"svgContent\") public svgContent: ElementRef;\n\n    public viewBox: string;\n    public height: string = \"10px\"; // size needs to be defined by default to prevent initial svg element from being huge\n    public width: string = \"10px\"; // same here\n\n    private svg = new BehaviorSubject(\"\");\n\n    constructor(private changeDetector: ChangeDetectorRef) {\n    }\n\n    public ngAfterViewInit() {\n        this.svg.subscribe((svg: string) => {\n            this.renderMarkerSvg(svg);\n        });\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes[\"marker\"] || changes[\"color\"]) {\n            if (changes[\"color\"]) {\n                this.marker.setColor(this.color);\n            }\n            if (this.marker && this.marker.getSvg && isFunction(this.marker.getSvg)) {\n                this.svg.next(this.marker.getSvg());\n            }\n        }\n    }\n\n    public ngOnDestroy(): void {\n        this.svg.complete();\n    }\n\n    private renderMarkerSvg(svg: string) {\n        const svgContainerElement: any = this.svgContent.nativeElement;\n        const line = ``;\n        svgContainerElement.innerHTML = \"\";\n\n        if (this.drawLine) {\n            svgContainerElement.insertAdjacentHTML(\"beforeend\", line);\n        }\n        svgContainerElement.insertAdjacentHTML(\"beforeend\", svg);\n\n        setTimeout(() => {\n            const clientRect = svgContainerElement.getBBox();\n            this.viewBox = `${clientRect.x - SVG_PADDING} ${clientRect.y - SVG_PADDING} ` +\n                `${clientRect.width + 2 * SVG_PADDING} ${clientRect.height + 2 * SVG_PADDING}`;\n            this.width = Math.min(clientRect.width + 2 * SVG_PADDING, this.maxSize) + \"px\";\n            this.height = Math.min(clientRect.height + 2 * SVG_PADDING, this.maxSize) + \"px\";\n\n            this.changeDetector.markForCheck();\n        });\n    }\n}\n\n    \n\n\n\n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    '\n    var COMPONENTS = [{'name': 'BasicLegendTileComponent', 'selector': 'nui-basic-legend-tile'},{'name': 'ChartComponent', 'selector': 'nui-chart'},{'name': 'ChartDonutContentComponent', 'selector': 'nui-chart-donut-content'},{'name': 'ChartMarkerComponent', 'selector': 'nui-chart-marker'},{'name': 'ChartPopoverComponent', 'selector': 'nui-chart-popover'},{'name': 'ChartTooltipComponent', 'selector': 'nui-chart-tooltip'},{'name': 'ChartTooltipsComponent', 'selector': 'nui-chart-tooltips'},{'name': 'LegendComponent', 'selector': 'nui-legend'},{'name': 'LegendSeriesComponent', 'selector': 'nui-legend-series'},{'name': 'RichLegendTileComponent', 'selector': 'nui-rich-legend-tile'}];\n    var DIRECTIVES = [{'name': 'ChartCollectionIdDirective', 'selector': '[nuiChartCollectionId]'}];\n    var ACTUAL_COMPONENT = {'name': 'ChartMarkerComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChartPalette.html":{"url":"classes/ChartPalette.html","title":"class - ChartPalette","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChartPalette\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/palette/chart-palette.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IChartPalette\n            \n\n\n            \n    Index\n    \n        \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    standardColors\n                                \n                                \n                                    backgroundColors\n                                \n                                \n                                    textColors\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(colors: string[] | IValueProvider, options: object)\n                    \n                \n                        \n                            \n                                Defined in src/core/common/palette/chart-palette.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        colors\n                                                  \n                                                        \n                                                                        string[] | IValueProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        object\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        standardColors\n                    \n                \n\n                \n                    \n                        getstandardColors()\n                    \n                \n                            \n                                \n                                    Defined in src/core/common/palette/chart-palette.ts:31\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        backgroundColors\n                    \n                \n\n                \n                    \n                        getbackgroundColors()\n                    \n                \n                            \n                                \n                                    Defined in src/core/common/palette/chart-palette.ts:35\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        textColors\n                    \n                \n\n                \n                    \n                        gettextColors()\n                    \n                \n                            \n                                \n                                    Defined in src/core/common/palette/chart-palette.ts:39\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { rgb } from \"d3-color\";\nimport isArray from \"lodash/isArray\";\n\nimport { IChartPalette, IValueProvider } from \"../types\";\n\nimport { getColorValueByName } from \"./color.helper\";\nimport { ProcessedColorProvider } from \"./processed-color-provider\";\nimport { SequentialColorProvider } from \"./sequential-color-provider\";\nimport { TextColorProvider } from \"./text-color-provider\";\n\nexport class ChartPalette implements IChartPalette {\n    private _standardColors: IValueProvider;\n    private _textColors: TextColorProvider;\n    private _backgroundColors: IValueProvider;\n\n    constructor(colors: string[] | IValueProvider, options = {backgroundOpacity: 0.15}) {\n        if (isArray(colors)) {\n            this._standardColors = new SequentialColorProvider( colors);\n        } else {\n            this._standardColors = > colors;\n        }\n        this._textColors = new TextColorProvider(this.standardColors, {light: \"white\", dark: \"black\"}); // TODO: oops!\n        this._backgroundColors = new ProcessedColorProvider(this.standardColors, (c: string) => {\n            const color = getColorValueByName(c);\n            const rgbColor = rgb(color);\n            rgbColor.opacity = options.backgroundOpacity;\n            return rgbColor.toString();\n        });\n    }\n\n    public get standardColors(): IValueProvider {\n        return this._standardColors;\n    }\n\n    public get backgroundColors(): IValueProvider {\n        return this._backgroundColors;\n    }\n\n    public get textColors(): IValueProvider {\n        return this._textColors;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChartPlugin.html":{"url":"classes/ChartPlugin.html","title":"class - ChartPlugin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChartPlugin\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/chart-plugin.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IChartPlugin\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                chart\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/core/common/chart-plugin.ts:3\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IChart\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/chart-plugin.ts:7\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/chart-plugin.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/chart-plugin.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/chart-plugin.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/chart-plugin.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IChart, IChartPlugin } from \"./types\";\n\nexport abstract class ChartPlugin implements IChartPlugin {\n\n    constructor() { }\n\n    public chart: IChart;\n\n    public initialize(): void { }\n\n    public update(): void { }\n\n    public updateDimensions(): void { }\n\n    public destroy(): void { }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ChartPopoverComponent.html":{"url":"components/ChartPopoverComponent.html","title":"component - ChartPopoverComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ChartPopoverComponent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n    File\n\n\n    src/chart-popover/chart-popover.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnChanges\n                    OnInit\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                nui-chart-popover\n            \n\n            \n                styleUrls\n                ./chart-popover.component.less\n            \n\n\n\n            \n                templateUrl\n                ./chart-popover.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                element\n                            \n                            \n                                popover\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                plugin\n                            \n                            \n                                template\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(changeDetector: ChangeDetectorRef, element: ElementRef)\n                    \n                \n                        \n                            \n                                Defined in src/chart-popover/chart-popover.component.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        changeDetector\n                                                  \n                                                        \n                                                                        ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        element\n                                                  \n                                                        \n                                                                        ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        plugin\n                    \n                \n                \n                    \n                        Type :         ChartPopoverPlugin\n\n                    \n                \n                        \n                            \n                                    Defined in src/chart-popover/chart-popover.component.ts:30\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        template\n                    \n                \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                        \n                            \n                                    Defined in src/chart-popover/chart-popover.component.ts:32\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        update\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/chart-popover/chart-popover.component.ts:34\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            element\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ElementRef\n\n                        \n                    \n                        \n                            \n                                    Defined in src/chart-popover/chart-popover.component.ts:41\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            popover\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     PopoverComponent\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild(PopoverComponent)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/chart-popover/chart-popover.component.ts:36\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import {\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    SimpleChanges,\n    TemplateRef,\n    ViewChild\n} from \"@angular/core\";\nimport { PopoverComponent } from \"@nova-ui/bits\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\nimport { IDataPointsPayload } from \"../core/common/types\";\nimport { ChartPopoverPlugin } from \"../core/plugins/chart-popover-plugin\";\nimport { IElementPosition } from \"../core/plugins/types\";\n\n@Component({\n    selector: \"nui-chart-popover\",\n    templateUrl: \"./chart-popover.component.html\",\n    styleUrls: [\"./chart-popover.component.less\"],\n})\nexport class ChartPopoverComponent implements OnChanges, OnInit, OnDestroy {\n\n    @Input() plugin: ChartPopoverPlugin;\n\n    @Input() template: TemplateRef;\n\n    @Output() update = new EventEmitter();\n\n    @ViewChild(PopoverComponent) popover: PopoverComponent;\n\n    private destroy$ = new Subject();\n    private initPlugin$ = new Subject();\n\n    constructor(private changeDetector: ChangeDetectorRef, public element: ElementRef) { }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes.plugin && !changes.plugin.isFirstChange()) {\n            this.initPlugin();\n        }\n    }\n\n    public ngOnInit() {\n        this.initPlugin();\n    }\n\n    public ngOnDestroy(): void {\n        this.destroy$.next();\n        this.destroy$.complete();\n        this.initPlugin$.complete();\n    }\n\n    private initPlugin() {\n        this.initPlugin$.next();\n\n        this.plugin?.openPopoverSubject.pipe(\n            takeUntil(this.initPlugin$),\n            takeUntil(this.destroy$)\n        ).subscribe(() => {\n            this.changeDetector.markForCheck();\n        });\n\n        this.plugin?.updatePositionSubject.pipe(\n            takeUntil(this.initPlugin$),\n            takeUntil(this.destroy$)\n        ).subscribe((position: IElementPosition) => {\n            // calculating a width offset to position the popover's host element at the midpoint of the popover target\n            const widthOffset = position.width / 2;\n            this.element.nativeElement.style.left = position.left + widthOffset + \"px\";\n            this.element.nativeElement.style.top = position.top + \"px\";\n            this.popover?.updatePosition();\n            this.update.next(this.plugin?.dataPoints);\n        });\n    }\n}\n\n    \n\n\n\n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                        '\n    var COMPONENTS = [{'name': 'BasicLegendTileComponent', 'selector': 'nui-basic-legend-tile'},{'name': 'ChartComponent', 'selector': 'nui-chart'},{'name': 'ChartDonutContentComponent', 'selector': 'nui-chart-donut-content'},{'name': 'ChartMarkerComponent', 'selector': 'nui-chart-marker'},{'name': 'ChartPopoverComponent', 'selector': 'nui-chart-popover'},{'name': 'ChartTooltipComponent', 'selector': 'nui-chart-tooltip'},{'name': 'ChartTooltipsComponent', 'selector': 'nui-chart-tooltips'},{'name': 'LegendComponent', 'selector': 'nui-legend'},{'name': 'LegendSeriesComponent', 'selector': 'nui-legend-series'},{'name': 'RichLegendTileComponent', 'selector': 'nui-rich-legend-tile'}];\n    var DIRECTIVES = [{'name': 'ChartCollectionIdDirective', 'selector': '[nuiChartCollectionId]'}];\n    var ACTUAL_COMPONENT = {'name': 'ChartPopoverComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChartPopoverPlugin.html":{"url":"classes/ChartPopoverPlugin.html","title":"class - ChartPopoverPlugin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChartPopoverPlugin\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/chart-popover-plugin.ts\n        \n\n            \n                Description\n            \n            \n                This plugin listens for the INTERACTION_DATA_POINTS_EVENT by default and transforms received data into\npopover inputs. The listened event can be configured using the 'config.eventStreamId' property.\nThe actual popover is handled by the ChartPopoverComponent.\n\n            \n\n            \n                Extends\n            \n            \n                        ChartPlugin\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                closePopoverSubject\n                            \n                            \n                                    Public\n                                config\n                            \n                            \n                                    Public\n                                dataPoints\n                            \n                            \n                                    Public\n                                DEFAULT_CONFIG\n                            \n                            \n                                    Public\n                                openPopoverSubject\n                            \n                            \n                                    Public\n                                popoverTargetPosition\n                            \n                            \n                                    Public\n                                updatePositionSubject\n                            \n                            \n                                    Public\n                                chart\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: IPopoverPluginConfig)\n                    \n                \n                        \n                            \n                                Defined in src/core/plugins/chart-popover-plugin.ts:49\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        IPopoverPluginConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            closePopoverSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/chart-popover-plugin.ts:34\n                            \n                        \n\n                \n                    \n                        Emits an event indicating the popover should close \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IPopoverPluginConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/chart-popover-plugin.ts:51\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dataPoints\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IDataPointsPayload\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/chart-popover-plugin.ts:28\n                            \n                        \n\n                \n                    \n                        Info about the data point(s) received in the most recent interaction event \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            DEFAULT_CONFIG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IPopoverPluginConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        eventStreamId: INTERACTION_DATA_POINTS_EVENT,\n        interactionType: InteractionType.MouseMove,\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/chart-popover-plugin.ts:43\n                            \n                        \n\n                \n                    \n                        The default plugin configuration \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            openPopoverSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/chart-popover-plugin.ts:32\n                            \n                        \n\n                \n                    \n                        Emits an event indicating the popover should open \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            popoverTargetPosition\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IElementPosition\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: 0,\n        left: 0,\n        width: 0,\n        height: 0,\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/chart-popover-plugin.ts:36\n                            \n                        \n\n                \n                    \n                        The target position of the popover \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            updatePositionSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/chart-popover-plugin.ts:30\n                            \n                        \n\n                \n                    \n                        Emits the popover's target position \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IChart\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPlugin:7\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/chart-popover-plugin.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/chart-popover-plugin.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:15\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:9\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import defaultsDeep from \"lodash/defaultsDeep\";\nimport pickBy from \"lodash/pickBy\";\nimport values from \"lodash/values\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\nimport { INTERACTION_DATA_POINTS_EVENT, INTERACTION_DATA_POINT_EVENT } from \"../../constants\";\nimport { ChartPlugin } from \"../common/chart-plugin\";\nimport { IChartEvent, IDataPoint, IDataPointsPayload, InteractionType } from \"../common/types\";\n\nimport { IElementPosition } from \"./types\";\n\n/** Configuration for the popover plugin */\nexport interface IPopoverPluginConfig {\n    /** ID of the event stream the plugin will respond to */\n    eventStreamId?: typeof INTERACTION_DATA_POINTS_EVENT | typeof INTERACTION_DATA_POINT_EVENT;\n    /** The type of interaction that will trigger the showing and hiding of the popovers */\n    interactionType?: InteractionType;\n}\n\n/**\n * This plugin listens for the INTERACTION_DATA_POINTS_EVENT by default and transforms received data into\n * popover inputs. The listened event can be configured using the 'config.eventStreamId' property.\n * The actual popover is handled by the ChartPopoverComponent.\n */\nexport class ChartPopoverPlugin extends ChartPlugin {\n    /** Info about the data point(s) received in the most recent interaction event */\n    public dataPoints: IDataPointsPayload;\n    /** Emits the popover's target position */\n    public updatePositionSubject = new Subject();\n    /** Emits an event indicating the popover should open */\n    public openPopoverSubject = new Subject();\n    /** Emits an event indicating the popover should close */\n    public closePopoverSubject = new Subject();\n    /** The target position of the popover */\n    public popoverTargetPosition: IElementPosition = {\n        top: 0,\n        left: 0,\n        width: 0,\n        height: 0,\n    };\n    /** The default plugin configuration */\n    public DEFAULT_CONFIG: IPopoverPluginConfig = {\n        eventStreamId: INTERACTION_DATA_POINTS_EVENT,\n        interactionType: InteractionType.MouseMove,\n    };\n\n    private isOpen = false;\n    private destroy$ = new Subject();\n\n    constructor(public config: IPopoverPluginConfig = {}) {\n        super();\n        this.config = defaultsDeep(this.config, this.DEFAULT_CONFIG);\n    }\n\n    public initialize(): void {\n        this.chart.getEventBus().getStream(this.config.eventStreamId as string).pipe(\n            takeUntil(this.destroy$)\n        ).subscribe((event: IChartEvent) => {\n            if (event.data.interactionType === this.config.interactionType) {\n                // here we handle data either of type IInteractionDataPointsEvent or IInteractionDataPointEvent\n                const dataPoints: IDataPointsPayload = event.data.dataPoints ?? { [event.data.dataPoint.seriesId]: event.data.dataPoint };\n                this.processDataPoints(dataPoints);\n            }\n        });\n    }\n\n    public destroy(): void {\n        if (this.updatePositionSubject) {\n            this.updatePositionSubject.complete();\n        }\n        if (this.openPopoverSubject) {\n            this.openPopoverSubject.complete();\n        }\n        if (this.closePopoverSubject) {\n            this.closePopoverSubject.complete();\n        }\n        if (this.destroy$) {\n            this.destroy$.next();\n            this.destroy$.complete();\n        }\n    }\n\n    protected getAbsolutePosition(valuesArray: any[]) {\n        const chartElement: any = this.chart.target?.node()?.parentNode; // the one above svg\n\n        if (!chartElement) {\n            throw new Error(\"Chart parent node is not defined\");\n        }\n\n        const dataPointsLeft = Math.min(...valuesArray.map(d => d.position.x));\n        const left = chartElement.offsetLeft + this.chart.getGrid().config().dimension.margin.left + dataPointsLeft;\n        const top = chartElement.offsetTop + this.chart.getGrid().config().dimension.margin.top;\n        // area for popovers is enlarged to cover the whole chart (top to bottom),\n        // so that we avoid collision of chart visualization and popover (by UX request)\n        return {\n            top: top,\n            left: left,\n            height: chartElement.offsetHeight,\n            width: Math.max(...valuesArray.map(d => d.position.x + (d.position.width || 0))) - dataPointsLeft,\n        };\n    }\n\n    private processDataPoints(dataPoints: IDataPointsPayload) {\n        const validDataPoints = pickBy(dataPoints, (d: IDataPoint) => d.index >= 0 && d.position);\n        const validDataPointsValues = values(validDataPoints);\n        if (validDataPointsValues.length > 0) {\n            this.popoverTargetPosition = this.getAbsolutePosition(validDataPointsValues);\n            this.dataPoints = validDataPoints;\n            // timeout is needed in order to successfully open popover on initial hover over the chart\n            setTimeout(() => {\n                this.updatePositionSubject.next(this.popoverTargetPosition);\n                if (!this.isOpen) {\n                    this.isOpen = true;\n                    this.openPopoverSubject.next();\n                }\n            });\n\n        } else {\n            // timeout is needed for symmetry of timing with above timeout for opening the popover\n            setTimeout(() => {\n                this.closePopoverSubject.next();\n                this.isOpen = false;\n            });\n        }\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ChartTooltipComponent.html":{"url":"components/ChartTooltipComponent.html","title":"component - ChartTooltipComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ChartTooltipComponent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n    File\n\n\n    src/chart-tooltips/chart-tooltip.component.ts\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                nui-chart-tooltip\n            \n\n            \n                styleUrls\n                ./chart-tooltip.component.less\n            \n\n\n\n            \n                templateUrl\n                ./chart-tooltip.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                template\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        template\n                    \n                \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                        \n                            \n                                    Defined in src/chart-tooltips/chart-tooltip.component.ts:22\n                            \n                        \n            \n        \n\n\n\n\n\n\n\n\n\n    \n        import { animate, style, transition, trigger } from \"@angular/animations\";\nimport { ChangeDetectionStrategy, Component, Input, TemplateRef } from \"@angular/core\";\n\n@Component({\n    selector: \"nui-chart-tooltip\",\n    styleUrls: [\"./chart-tooltip.component.less\"],\n    templateUrl: \"./chart-tooltip.component.html\",\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [\n        trigger(\"tooltip\", [\n            transition(\":enter\", [\n                style({ opacity: 0 }),\n                animate(300, style({ opacity: 1 })),\n            ]),\n            transition(\":leave\", [\n                animate(300, style({ opacity: 0 })),\n            ]),\n        ]),\n    ],\n})\nexport class ChartTooltipComponent {\n    @Input() template: TemplateRef;\n}\n\n    \n\n\n\n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                '\n    var COMPONENTS = [{'name': 'BasicLegendTileComponent', 'selector': 'nui-basic-legend-tile'},{'name': 'ChartComponent', 'selector': 'nui-chart'},{'name': 'ChartDonutContentComponent', 'selector': 'nui-chart-donut-content'},{'name': 'ChartMarkerComponent', 'selector': 'nui-chart-marker'},{'name': 'ChartPopoverComponent', 'selector': 'nui-chart-popover'},{'name': 'ChartTooltipComponent', 'selector': 'nui-chart-tooltip'},{'name': 'ChartTooltipsComponent', 'selector': 'nui-chart-tooltips'},{'name': 'LegendComponent', 'selector': 'nui-legend'},{'name': 'LegendSeriesComponent', 'selector': 'nui-legend-series'},{'name': 'RichLegendTileComponent', 'selector': 'nui-rich-legend-tile'}];\n    var DIRECTIVES = [{'name': 'ChartCollectionIdDirective', 'selector': '[nuiChartCollectionId]'}];\n    var ACTUAL_COMPONENT = {'name': 'ChartTooltipComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ChartTooltipsComponent.html":{"url":"components/ChartTooltipsComponent.html","title":"component - ChartTooltipsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ChartTooltipsComponent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n    File\n\n\n    src/chart-tooltips/chart-tooltips.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnChanges\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                nui-chart-tooltips\n            \n\n            \n                styleUrls\n                ./chart-tooltips.component.less\n            \n\n\n\n            \n                templateUrl\n                ./chart-tooltips.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                closeTooltips\n                            \n                            \n                                    Public\n                                openTooltips\n                            \n                            \n                                tooltips\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                trackByFn\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                plugin\n                            \n                            \n                                template\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(changeDetector: ChangeDetectorRef)\n                    \n                \n                        \n                            \n                                Defined in src/chart-tooltips/chart-tooltips.component.ts:44\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        changeDetector\n                                                  \n                                                        \n                                                                        ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        plugin\n                    \n                \n                \n                    \n                        Type :         ChartTooltipsPlugin\n\n                    \n                \n                        \n                            \n                                    Defined in src/chart-tooltips/chart-tooltips.component.ts:27\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        template\n                    \n                \n                \n                    \n                        Type :         ElementRef\n\n                    \n                \n                        \n                            \n                                    Defined in src/chart-tooltips/chart-tooltips.component.ts:29\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            trackByFn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    trackByFn(index: number, item: any)\n                \n            \n\n\n            \n                \n                    Defined in src/chart-tooltips/chart-tooltips.component.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    item\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            closeTooltips\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/chart-tooltips/chart-tooltips.component.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            openTooltips\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/chart-tooltips/chart-tooltips.component.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tooltips\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         QueryList\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChildren(ChartTooltipDirective)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/chart-tooltips/chart-tooltips.component.ts:31\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { ChangeDetectorRef, Component, ElementRef, Input, OnChanges, OnDestroy, QueryList, SimpleChanges, ViewChildren } from \"@angular/core\";\nimport { forceCollide, forceSimulation, Simulation, SimulationNodeDatum } from \"d3-force\";\nimport { select } from \"d3-selection\";\nimport each from \"lodash/each\";\nimport isEqual from \"lodash/isEqual\";\nimport isNil from \"lodash/isNil\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\nimport { IPosition } from \"../core/common/types\";\nimport { ChartTooltipsPlugin } from \"../core/plugins/tooltips/chart-tooltips-plugin\";\n\nimport { ChartTooltipDirective } from \"./chart-tooltip.directive\";\n\ninterface ITooltipNode extends SimulationNodeDatum {\n    seriesId: string;\n    radius: number;\n}\n\n@Component({\n    selector: \"nui-chart-tooltips\",\n    templateUrl: \"./chart-tooltips.component.html\",\n    styleUrls: [\"./chart-tooltips.component.less\"],\n})\nexport class ChartTooltipsComponent implements OnChanges, OnDestroy {\n\n    @Input() plugin: ChartTooltipsPlugin;\n\n    @Input() template: ElementRef;\n\n    @ViewChildren(ChartTooltipDirective) tooltips: QueryList;\n\n    public openTooltips = new Subject();\n    public closeTooltips = new Subject();\n\n    private unsubscribe$ = new Subject();\n    private simulation: Simulation;\n    // index we use for fast access of tooltip directives by seriesId\n    private tooltipDirectivesIndex: { [seriesId: string]: ChartTooltipDirective } = {};\n    private closePending = false;\n    private isOpen = false;\n    private openTimeout: number;\n    private collisionTimeout: number;\n    private closeTimeout: number;\n\n    constructor(private changeDetector: ChangeDetectorRef) {\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (!(changes[\"plugin\"] && changes[\"plugin\"].currentValue)) {\n            return;\n        }\n\n        this.unsubscribe$.next();\n\n        this.plugin.showSubject.pipe(takeUntil(this.unsubscribe$)).subscribe(() => this.handleOpen());\n        this.plugin.hideSubject.pipe(takeUntil(this.unsubscribe$)).subscribe(() => this.handleClose());\n    }\n\n    public ngOnDestroy(): void {\n        this.unsubscribe$.next();\n        this.unsubscribe$.complete();\n    }\n\n    public trackByFn(index: number, item: any) {\n        return item.value.seriesId;\n    }\n\n    private handleOpen() {\n        this.changeDetector.detectChanges();\n\n        const currentTooltipDirectivesIndex: { [seriesId: string]: ChartTooltipDirective; } = {};\n        this.tooltips.forEach(tooltip => {\n            // this is how we identify which series does the tooltip belong to\n            const seriesId: string | undefined = tooltip.elementRef.nativeElement.getAttribute(\"series-id\") ?? undefined;\n\n            if (!seriesId) {\n                throw new Error(\"SeriesId is not defined\");\n            }\n\n            currentTooltipDirectivesIndex[seriesId] = tooltip;\n        });\n\n        const directivesChanged = !isEqual(currentTooltipDirectivesIndex, this.tooltipDirectivesIndex);\n        if (this.closePending || directivesChanged || !this.isOpen) {\n            clearTimeout(this.openTimeout);\n\n            this.openTimeout = setTimeout(() => {\n                this.openTooltips.next();\n                clearTimeout(this.collisionTimeout);\n\n                this.collisionTimeout = setTimeout(() => {\n                    this.avoidTooltipCollisions();\n                    this.isOpen = true;\n                });\n            });\n        } else {\n            this.openTooltips.next();\n            this.avoidTooltipCollisions();\n            this.isOpen = true;\n        }\n    }\n\n    private handleClose() {\n        if (this.simulation) {\n            this.simulation.stop();\n        }\n\n            this.closePending = true;\n            clearTimeout(this.closeTimeout);\n\n            this.closeTimeout = setTimeout(() => {\n                this.closeTooltips.next();\n                this.closePending = false;\n                this.isOpen = false;\n            });\n    }\n\n    /**\n     * Runs the D3 forceCollide based tooltip collision avoidance algorithm\n     */\n    private avoidTooltipCollisions() {\n        // extracted tooltip positions from tooltip directives\n        const tooltipPositions: { [seriesId: string]: IPosition } = {};\n\n        this.tooltips.forEach(tooltip => {\n            const element = tooltip.getOverlayElement();\n\n            // this is how we identify which series does the tooltip belong to\n            const seriesId: string | undefined = tooltip.elementRef.nativeElement.getAttribute(\"series-id\") ?? undefined;\n\n            if (!seriesId) {\n                throw new Error(\"SeriesId is not defined\");\n            }\n\n            this.tooltipDirectivesIndex[seriesId] = tooltip;\n\n            tooltipPositions[seriesId] = {\n                x: element.offsetLeft,\n                y: element.offsetTop,\n                width: element.clientWidth,\n                height: element.clientHeight,\n            };\n        });\n\n        // if there was a previous simulation, then stop it before running a new one\n        if (this.simulation) {\n            this.simulation.stop();\n        }\n\n        this.simulation = this.startSimulation(this.tooltipDirectivesIndex, tooltipPositions);\n    }\n\n    /**\n     * Starts the force simulation to avoid tooltip overlap\n     *\n     * @param tooltipIndex\n     * @param tooltipPositions\n     */\n    private startSimulation(tooltipIndex: { [p: string]: ChartTooltipDirective },\n        tooltipPositions: { [seriesId: string]: IPosition }) {\n        const nodes = Object.keys(tooltipPositions).map(seriesId => {\n            const position = tooltipPositions[seriesId];\n\n            if (isNil(position.height) || isNil(position.width)) {\n                throw new Error(\"Position height or width are not defined\");\n            }\n\n            const props: any = {\n                seriesId: seriesId,\n                x: position.x,\n                y: position.y,\n                radius: this.isVertical() ? position.height / 2 : position.width / 2,\n            };\n            if (this.isVertical()) {\n                props.fx = position.x;\n            } else {\n                props.fy = position.y;\n            }\n            return props;\n        });\n\n        // TODO: these numbers are only based on playing with the library for the while, it's not fine tuned at all\n        const collisionForce = forceCollide((node: any) => node.radius)\n            .strength(0.5)\n            .iterations(20);\n\n        const simulation = forceSimulation(nodes)\n            .alphaDecay(0.3)\n            .force(\"collisionForce\", collisionForce);\n\n        simulation.on(\"tick\", () => {\n            each(nodes, (node: ITooltipNode) => {\n                const tooltip = tooltipIndex[node.seriesId];\n\n                select(tooltip.getOverlayElement())\n                    .style(this.isVertical() ? \"top\" : \"left\", (this.isVertical() ? node.y : node.x) + \"px\");\n            });\n        });\n\n        return simulation;\n    }\n\n    private isVertical() {\n        return this.plugin.orientation === \"right\";\n    }\n\n}\n\n    \n\n\n\n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                            '\n    var COMPONENTS = [{'name': 'BasicLegendTileComponent', 'selector': 'nui-basic-legend-tile'},{'name': 'ChartComponent', 'selector': 'nui-chart'},{'name': 'ChartDonutContentComponent', 'selector': 'nui-chart-donut-content'},{'name': 'ChartMarkerComponent', 'selector': 'nui-chart-marker'},{'name': 'ChartPopoverComponent', 'selector': 'nui-chart-popover'},{'name': 'ChartTooltipComponent', 'selector': 'nui-chart-tooltip'},{'name': 'ChartTooltipsComponent', 'selector': 'nui-chart-tooltips'},{'name': 'LegendComponent', 'selector': 'nui-legend'},{'name': 'LegendSeriesComponent', 'selector': 'nui-legend-series'},{'name': 'RichLegendTileComponent', 'selector': 'nui-rich-legend-tile'}];\n    var DIRECTIVES = [{'name': 'ChartCollectionIdDirective', 'selector': '[nuiChartCollectionId]'}];\n    var ACTUAL_COMPONENT = {'name': 'ChartTooltipsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChartTooltipsPlugin.html":{"url":"classes/ChartTooltipsPlugin.html","title":"class - ChartTooltipsPlugin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChartTooltipsPlugin\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/tooltips/chart-tooltips-plugin.ts\n        \n\n            \n                Description\n            \n            \n                This plugin listens to the INTERACTION_DATA_POINTS_EVENT and transforms received data into tooltips inputs.\nThe actual tooltips are handled by the ChartTooltipsComponent.\n\n            \n\n            \n                Extends\n            \n            \n                        ChartPlugin\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                dataPointPositions\n                            \n                            \n                                    Public\n                                dataPoints\n                            \n                            \n                                    Public\n                                hideSubject\n                            \n                            \n                                    Public\n                                orientation\n                            \n                            \n                                    Public\n                                showSubject\n                            \n                            \n                                    Public\n                                chart\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                processHighlightedDataPoints\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tooltipPositionOffset: number, orientation: \"right\" | \"top\")\n                    \n                \n                        \n                            \n                                Defined in src/core/plugins/tooltips/chart-tooltips-plugin.ts:81\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        tooltipPositionOffset\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Offset of a tooltip from edge of a highlighted element\n\n                                                        \n                                                \n                                                \n                                                        orientation\n                                                  \n                                                        \n                                                                    \"right\" | \"top\"\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dataPointPositions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/tooltips/chart-tooltips-plugin.ts:65\n                            \n                        \n\n                \n                    \n                        Calculated positions for the data point tooltips \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dataPoints\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IDataPointsPayload\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/tooltips/chart-tooltips-plugin.ts:63\n                            \n                        \n\n                \n                    \n                        Highlighted data points received from the chart \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            hideSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/tooltips/chart-tooltips-plugin.ts:75\n                            \n                        \n\n                \n                    \n                        This publishes an event to hide tooltips\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            orientation\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     \"right\" | \"top\"\n\n                        \n                    \n                    \n                        \n                            Default value : \"right\"\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/tooltips/chart-tooltips-plugin.ts:88\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            showSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/tooltips/chart-tooltips-plugin.ts:70\n                            \n                        \n\n                \n                    \n                        This publishes an event to show tooltips\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IChart\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPlugin:7\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/tooltips/chart-tooltips-plugin.ts:126\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/tooltips/chart-tooltips-plugin.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            processHighlightedDataPoints\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processHighlightedDataPoints(dataPoints: IDataPointsPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/tooltips/chart-tooltips-plugin.ts:131\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataPoints\n                                    \n                                                IDataPointsPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:15\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:9\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ConnectedPosition } from \"@angular/cdk/overlay\";\nimport each from \"lodash/each\";\nimport pickBy from \"lodash/pickBy\";\nimport values from \"lodash/values\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\nimport { CHART_VIEW_STATUS_EVENT, INTERACTION_DATA_POINTS_EVENT, SERIES_STATE_CHANGE_EVENT } from \"../../../constants\";\nimport { RenderState } from \"../../../renderers/types\";\nimport { ChartPlugin } from \"../../common/chart-plugin\";\nimport {\n    IAccessors, IChartEvent, IChartSeries, IChartViewStatusEventPayload, IDataPoint, IDataPointsPayload, InteractionType, IPosition,\n    IRenderStateData\n} from \"../../common/types\";\n\n/** Position with extended information for positioning a tooltip */\nexport interface ITooltipPosition extends IPosition {\n    overlayPositions: ConnectedPosition[];\n}\n\n/** How far away from the data point position will the tooltip be positioned */\nexport const TOOLTIP_POSITION_OFFSET = 10;\n\n/** @ignore\n * Used for charts where tooltips should be placed aside of some vertical line */\nexport const getVerticalSetup = (offset: number): ConnectedPosition[] => [{\n    originX: \"end\",\n    originY: \"top\",\n    overlayX: \"start\",\n    overlayY: \"center\",\n    offsetX: offset,\n}, {\n    originX: \"start\",\n    originY: \"center\",\n    overlayX: \"end\",\n    overlayY: \"center\",\n    offsetX: -offset,\n}];\n\n/** @ignore\n * Used for charts where tooltips should be placed aligned to some horizontal line (as Horizontal Bar Charts) */\nexport const getHorizontalSetup = (offset: number): ConnectedPosition[] => [{\n    originX: \"end\",\n    originY: \"top\",\n    overlayX: \"center\",\n    overlayY: \"bottom\",\n    offsetY: -offset,\n}, {\n    originX: \"end\",\n    originY: \"bottom\",\n    overlayX: \"center\",\n    overlayY: \"top\",\n    offsetY: offset,\n}];\n\n/**\n * This plugin listens to the INTERACTION_DATA_POINTS_EVENT and transforms received data into tooltips inputs.\n * The actual tooltips are handled by the ChartTooltipsComponent.\n */\nexport class ChartTooltipsPlugin extends ChartPlugin {\n\n    /** Highlighted data points received from the chart */\n    public dataPoints: IDataPointsPayload;\n    /** Calculated positions for the data point tooltips */\n    public dataPointPositions: { [stringId: string]: ITooltipPosition } = {};\n\n    /**\n     * This publishes an event to show tooltips\n     */\n    public showSubject = new Subject();\n\n    /**\n     * This publishes an event to hide tooltips\n     */\n    public hideSubject = new Subject();\n\n    protected overlaySetup: ConnectedPosition[];\n\n    private isChartInView = false;\n    private destroy$ = new Subject();\n    private seriesVisibilityMap:  Record = {};\n\n    /**\n     * @param tooltipPositionOffset Offset of a tooltip from edge of a highlighted element\n     * @param orientation\n     */\n    constructor(readonly tooltipPositionOffset: number = TOOLTIP_POSITION_OFFSET,\n        public orientation: \"right\" | \"top\" = \"right\") {\n        super();\n\n        if (orientation === \"right\") {\n            this.overlaySetup = getVerticalSetup(tooltipPositionOffset);\n        } else if (orientation === \"top\") {\n            this.overlaySetup = getHorizontalSetup(tooltipPositionOffset);\n        }\n    }\n\n    public initialize(): void {\n        this.chart.getEventBus().getStream(INTERACTION_DATA_POINTS_EVENT)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((event: IChartEvent) => {\n                if (event.data.interactionType === InteractionType.MouseMove && this.isChartInView) {\n                    const dataPoints: IDataPointsPayload = event.data.dataPoints;\n                    this.processHighlightedDataPoints(dataPoints);\n                }\n            });\n        \n        this.chart.getEventBus().getStream(SERIES_STATE_CHANGE_EVENT)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((event: IChartEvent) => {\n                event.data.forEach(series => {\n                    this.seriesVisibilityMap[series.seriesId] = series.state !== RenderState.hidden;\n                });\n            });\n\n        this.chart.getEventBus().getStream(CHART_VIEW_STATUS_EVENT)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((event: IChartEvent) => {\n                this.isChartInView = event.data.isChartInView;\n                if (!this.isChartInView) {\n                    this.hideSubject.next();\n                }\n            });\n    }\n\n    public destroy(): void {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n\n    public processHighlightedDataPoints(dataPoints: IDataPointsPayload) {\n        const validDataPoints = pickBy(dataPoints, (d: IDataPoint) => d.index >= 0 && d.position && (this.seriesVisibilityMap[d.seriesId] !== false));\n\n        if (values(validDataPoints).length === 0) {\n            this.hideSubject.next();\n            return;\n        }\n\n        this.dataPoints = validDataPoints;\n        const chartElement: any = this.chart.target?.node()?.parentNode; // the one above svg\n\n        if (!chartElement) {\n            throw new Error(\"Chart parent node is not defined\");\n        }\n\n        const bbox = chartElement.getBoundingClientRect();\n        const offsetParentBbox = chartElement.offsetParent.getBoundingClientRect();\n        const chartPosition: IPosition = {\n            x: bbox.left - offsetParentBbox.left,\n            y: bbox.top - offsetParentBbox.top,\n        };\n\n        each(Object.keys(this.dataPoints), seriesId => {\n            const dataPoint = this.dataPoints[seriesId];\n\n            const chartSeries = this.chart.getDataManager().getChartSeries(dataPoint.seriesId);\n            const tooltipRelativePosition = this.getTooltipPosition(dataPoint, chartSeries);\n            this.dataPointPositions[seriesId] = this.getAbsolutePosition(tooltipRelativePosition, chartPosition);\n        });\n\n        this.showSubject.next();\n    }\n\n    /**\n     * Calculate tooltip position. Default implementation shows the tooltip on left / right with\n     * @param dataPoint\n     * @param chartSeries\n     */\n    protected getTooltipPosition(dataPoint: IDataPoint, chartSeries: IChartSeries): ITooltipPosition {\n\n        if (!dataPoint.position) {\n            throw new Error(\"Unable to get tooltip position\");\n        }\n\n        return {\n            x: dataPoint.position.x,\n            y: dataPoint.position.y,\n            height: dataPoint.position?.height || 1,\n            width: dataPoint.position?.width || 1,\n            overlayPositions: this.overlaySetup,\n        };\n    }\n\n    /**\n     * Converts the relative position within a chart into an absolute position on the screen\n     *\n     * @param relativePosition\n     * @param chartPosition\n     */\n    protected getAbsolutePosition(relativePosition: ITooltipPosition, chartPosition: IPosition): ITooltipPosition {\n        return Object.assign({}, relativePosition, {\n            x: chartPosition.x + this.chart.getGrid().config().dimension.margin.left + relativePosition.x,\n            y: chartPosition.y + this.chart.getGrid().config().dimension.margin.top + relativePosition.y,\n        });\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DataSeries.html":{"url":"classes/DataSeries.html","title":"class - DataSeries","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DataSeries\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/data-series.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IDataSeries\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                accessors\n                            \n                            \n                                    Public\n                                data\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSeries: IDataSeries)\n                    \n                \n                        \n                            \n                                Defined in src/core/common/data-series.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dataSeries\n                                                  \n                                                        \n                                                                        IDataSeries\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            accessors\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/data-series.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/data-series.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/data-series.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/data-series.ts:11\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { DataAccessor, IAccessors, IDataAccessors, IDataSeries, SeriesAccessor } from \"./types\";\n\nexport class DataSeries implements IDataSeries {\n\n    public id: string;\n    public accessors: {\n        data?: Record,\n        series?: Record,\n    };\n    public data: any[];\n    public name: string;\n\n    constructor(dataSeries: IDataSeries) {\n        this.id = dataSeries.id;\n        this.data = dataSeries.data;\n        this.name = dataSeries.name;\n        // TODO: here we can check if default accessors are valid and warn user\n        this.accessors = dataSeries.accessors || {\n            data: {\n                category: (d: any) => d.name,\n                value: (d: any) => d.value,\n            }, series: {},\n        };\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DimensionConfig.html":{"url":"classes/DimensionConfig.html","title":"class - DimensionConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DimensionConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/config/dimension-config.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IDimensionConfig\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                autoHeight\n                            \n                            \n                                    Public\n                                autoWidth\n                            \n                            \n                                    Public\n                                margin\n                            \n                            \n                                    Public\n                                marginLocked\n                            \n                            \n                                    Public\n                                padding\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                height\n                            \n                            \n                                    Public\n                                height\n                            \n                            \n                                    Public\n                                height\n                            \n                            \n                                    Public\n                                outerHeight\n                            \n                            \n                                    Public\n                                outerHeight\n                            \n                            \n                                    Public\n                                outerHeight\n                            \n                            \n                                    Public\n                                outerWidth\n                            \n                            \n                                    Public\n                                outerWidth\n                            \n                            \n                                    Public\n                                outerWidth\n                            \n                            \n                                    Public\n                                width\n                            \n                            \n                                    Public\n                                width\n                            \n                            \n                                    Public\n                                width\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            autoHeight\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/dimension-config.ts:31\n                            \n                        \n\n                \n                    \n                        See IDimensionConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            autoWidth\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/dimension-config.ts:29\n                            \n                        \n\n                \n                    \n                        See IDimensionConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            margin\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/dimension-config.ts:7\n                            \n                        \n\n                \n                    \n                        See IDimensionConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            marginLocked\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: false,\n        right: false,\n        bottom: false,\n        left: false,\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/dimension-config.ts:21\n                            \n                        \n\n                \n                    \n                        See IDimensionConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            padding\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/dimension-config.ts:14\n                            \n                        \n\n                \n                    \n                        See IDimensionConfig \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            height\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    height()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/config/dimension-config.ts:47\n                \n            \n\n\n            \n                \n                    See IDimensionConfig \n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            height\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    height(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/config/dimension-config.ts:49\n                \n            \n\n\n            \n                \n                    See IDimensionConfig \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IDimensionConfig\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            height\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    height(value?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/config/dimension-config.ts:51\n                \n            \n\n\n            \n                \n                    See IDimensionConfig \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            outerHeight\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    outerHeight()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/config/dimension-config.ts:74\n                \n            \n\n\n            \n                \n                    See IDimensionConfig \n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            outerHeight\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    outerHeight(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/config/dimension-config.ts:76\n                \n            \n\n\n            \n                \n                    See IDimensionConfig \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IDimensionConfig\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            outerHeight\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    outerHeight(value?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/config/dimension-config.ts:78\n                \n            \n\n\n            \n                \n                    See IDimensionConfig \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            outerWidth\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    outerWidth()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/config/dimension-config.ts:60\n                \n            \n\n\n            \n                \n                    See IDimensionConfig \n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            outerWidth\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    outerWidth(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/config/dimension-config.ts:62\n                \n            \n\n\n            \n                \n                    See IDimensionConfig \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IDimensionConfig\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            outerWidth\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    outerWidth(value?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/config/dimension-config.ts:64\n                \n            \n\n\n            \n                \n                    See IDimensionConfig \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            width\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    width()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/config/dimension-config.ts:34\n                \n            \n\n\n            \n                \n                    See IDimensionConfig \n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            width\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    width(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/config/dimension-config.ts:36\n                \n            \n\n\n            \n                \n                    See IDimensionConfig \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IDimensionConfig\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            width\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    width(value?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/config/dimension-config.ts:38\n                \n            \n\n\n            \n                \n                    See IDimensionConfig \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IAllAround, IDimensionConfig } from \"../types\";\n\nexport class DimensionConfig implements IDimensionConfig {\n    private _width: number = 0;\n    private _height: number = 0;\n    /** See {@link IDimensionConfig#margin} */\n    public margin: IAllAround = {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n    };\n    /** See {@link IDimensionConfig#padding} */\n    public padding: IAllAround = {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n    };\n    /** See {@link IDimensionConfig#marginLocked} */\n    public marginLocked: IAllAround = {\n        top: false,\n        right: false,\n        bottom: false,\n        left: false,\n    };\n\n    /** See {@link IDimensionConfig#autoWidth} */\n    public autoWidth = true;\n    /** See {@link IDimensionConfig#autoHeight} */\n    public autoHeight = true;\n\n    /** See {@link IDimensionConfig#width} */\n    public width(): number;\n    /** See {@link IDimensionConfig#width} */\n    public width(value: number): IDimensionConfig;\n    /** See {@link IDimensionConfig#width} */\n    public width(value?: number): any {\n        if (value === undefined) {\n            return this._width;\n        }\n        this._width = value;\n        return this;\n    }\n\n    /** See {@link IDimensionConfig#height} */\n    public height(): number;\n    /** See {@link IDimensionConfig#height} */\n    public height(value: number): IDimensionConfig;\n    /** See {@link IDimensionConfig#height} */\n    public height(value?: number): any {\n        if (value === undefined) {\n            return this._height;\n        }\n        this._height = value;\n        return this;\n    }\n\n    /** See {@link IDimensionConfig#outerWidth} */\n    public outerWidth(): number;\n    /** See {@link IDimensionConfig#outerWidth} */\n    public outerWidth(value: number): IDimensionConfig;\n    /** See {@link IDimensionConfig#outerWidth} */\n    public outerWidth(value?: number): any {\n        const marginsWidth = this.margin.right + this.margin.left;\n        if (value === undefined) {\n            return this._width + marginsWidth;\n        }\n        this._width = Math.max(value - marginsWidth, 0);\n        return this;\n    }\n\n    /** See {@link IDimensionConfig#outerHeight} */\n    public outerHeight(): number;\n    /** See {@link IDimensionConfig#outerHeight} */\n    public outerHeight(value: number): IDimensionConfig;\n    /** See {@link IDimensionConfig#outerHeight} */\n    public outerHeight(value?: number): any {\n        const marginsHeight = this.margin.top + this.margin.bottom;\n        if (value === undefined) {\n            return this._height + marginsHeight;\n        }\n        this._height = value - marginsHeight;\n        return this;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DonutGaugeRenderingUtil.html":{"url":"classes/DonutGaugeRenderingUtil.html","title":"class - DonutGaugeRenderingUtil","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DonutGaugeRenderingUtil\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/radial/gauge/donut-gauge-rendering-util.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                generateThresholdData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            generateThresholdData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    generateThresholdData(data: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/radial/gauge/donut-gauge-rendering-util.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { pie } from \"d3-shape\";\n\nimport { IGaugeThreshold } from \"../../../gauge/types\";\n\nexport class DonutGaugeRenderingUtil {\n    public static generateThresholdData(data: any[]) {\n        const arcData: number[] = DonutGaugeRenderingUtil.generateArcData(data);\n        const thresholdsData: any[] = [];\n        const pieGenerator = pie().sort(null);\n        const arcsForMarkers = pieGenerator(arcData);\n\n        arcsForMarkers.forEach((arcDatum: any, i: number) => {\n            if (i % 2 === 1) {\n                thresholdsData.push(arcDatum);\n            }\n        });\n        return thresholdsData;\n    }\n\n    private static generateArcData(data: any[]) {\n        // arcs with a value of zero serve as the threshold points\n        const arcData: number[] = Array(data.length * 2 - 1).fill(0);\n        data.forEach((d: IGaugeThreshold, i: number) => {\n            // arcs with a non-zero value serve as the space between the threshold points\n            arcData[i * 2] = i === 0 ? d.value : d.value - data[i - 1].value;\n        });\n        return arcData;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EventBus.html":{"url":"classes/EventBus.html","title":"class - EventBus","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EventBus\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/event-bus.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                getStream\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/event-bus.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getStream\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getStream(streamId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/event-bus.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    streamId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Subject\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import each from \"lodash/each\";\nimport { Subject } from \"rxjs\";\n\nexport class EventBus {\n\n    private streams: { [key: string]: Subject } = {};\n\n    public getStream(streamId: string): Subject {\n        if (!this.streams[streamId]) {\n            this.streams[streamId] = new Subject();\n        }\n        return this.streams[streamId];\n    }\n\n    public destroy() {\n        each(Object.keys(this.streams), (key: string) => {\n            this.streams[key].complete();\n        });\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Grid.html":{"url":"classes/Grid.html","title":"class - Grid","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Grid\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/grid.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IGrid\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                DEFAULT_BORDER_CLASS_NAME\n                            \n                            \n                                    Public\n                                eventBus\n                            \n                            \n                                    Static\n                                GRID_CLASS_NAME\n                            \n                            \n                                    Static\n                                GRID_ELEMENTS_LAYER_NAME\n                            \n                            \n                                    Static\n                                RENDERING_AREA_CLIP_PATH_PREFIX\n                            \n                            \n                                    Static\n                                RENDERING_AREA_LAYER_NAME\n                            \n                            \n                                    Public\n                                updateChartDimensionsSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                build\n                            \n                            \n                                    Public\n                                buildPlugins\n                            \n                            \n                                    Public\n                                config\n                            \n                            \n                                    Public\n                                config\n                            \n                            \n                                    Public\n                                config\n                            \n                            \n                                    Public\n                                getInteractiveArea\n                            \n                            \n                                    Public\n                                getLasagna\n                            \n                            \n                                    Public\n                                target\n                            \n                            \n                                    Public\n                                target\n                            \n                            \n                                    Public\n                                target\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                            \n                                    Public\n                                updateRanges\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            DEFAULT_BORDER_CLASS_NAME\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"nui-chart-border\"\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/grid.ts:30\n                            \n                        \n\n                \n                    \n                        Class name applied to each of the grid's borders by default \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            eventBus\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     EventBus\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/grid.ts:54\n                            \n                        \n\n                \n                    \n                        Event bus provided by the chart \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            GRID_CLASS_NAME\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"nui-chart-grid\"\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/grid.ts:27\n                            \n                        \n\n                \n                    \n                        Class name for the grid \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            GRID_ELEMENTS_LAYER_NAME\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"grid-elements\"\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/grid.ts:36\n                            \n                        \n\n                \n                    \n                        Name for the lasagna layer containing the grid's rendered elements \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            RENDERING_AREA_CLIP_PATH_PREFIX\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"clip-path_\"\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/grid.ts:33\n                            \n                        \n\n                \n                    \n                        Prefix applied to the rendering area clip path id \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            RENDERING_AREA_LAYER_NAME\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"rendering-area\"\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/grid.ts:39\n                            \n                        \n\n                \n                    \n                        Name for the rendering area lasagna layer \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            updateChartDimensionsSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/grid.ts:51\n                            \n                        \n\n                \n                    \n                        Subject for indicating that the chart's dimensions should be updated \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            build\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    build()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/grid.ts:134\n                \n            \n\n\n            \n                \n                    See IGrid \n\n\n                    \n                        Returns :         IGrid\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            buildPlugins\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    buildPlugins(chart: IChart)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/grid.ts:174\n                \n            \n\n\n            \n                \n                    Derived classes override this method to build the grid's plugins\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    chart\n                                    \n                                                IChart\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The chart instance to pass to each plugin\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IChartPlugin[]\n\n                    \n                    \n                        Default implementation returns an empty array\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            config\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    config()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/grid.ts:108\n                \n            \n\n\n            \n                \n                    See IGrid \n\n\n                    \n                        Returns :         IGridConfig\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            config\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    config(config: IGridConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/grid.ts:110\n                \n            \n\n\n            \n                \n                    See IGrid \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                IGridConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            config\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    config(config?: IGridConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/grid.ts:112\n                \n            \n\n\n            \n                \n                    See IGrid \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                IGridConfig\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IGridConfig | \n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getInteractiveArea\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getInteractiveArea()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/grid.ts:88\n                \n            \n\n\n            \n                \n                    See IGrid \n\n\n                    \n                        Returns :         D3Selection\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLasagna\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLasagna()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/grid.ts:93\n                \n            \n\n\n            \n                \n                    See IGrid \n\n\n                    \n                        Returns :     Lasagna\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            target\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    target()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/grid.ts:121\n                \n            \n\n\n            \n                \n                    See IGrid \n\n\n                    \n                        Returns :         D3Selection\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            target\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    target(target: D3Selection)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/grid.ts:123\n                \n            \n\n\n            \n                \n                    See IGrid \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                                D3Selection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IGrid\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            target\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    target(target?: D3Selection)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/grid.ts:125\n                \n            \n\n\n            \n                \n                    See IGrid \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                                D3Selection\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         D3Selection | IGrid\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/grid.ts:179\n                \n            \n\n\n            \n                \n                    See IGrid \n\n\n                    \n                        Returns :         IGrid\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions(dimensions: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/grid.ts:190\n                \n            \n\n\n            \n                \n                    See IGrid \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dimensions\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IGrid\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateRanges\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRanges()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/grid.ts:206\n                \n            \n\n\n            \n                \n                    See IGrid \n\n\n                    \n                        Returns :         IGrid\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { select, Selection } from \"d3-selection\";\nimport each from \"lodash/each\";\nimport isEmpty from \"lodash/isEmpty\";\nimport { Subject } from \"rxjs\";\n\nimport { EventBus } from \"../common/event-bus\";\nimport { Lasagna } from \"../common/lasagna\";\nimport { ScalesIndex } from \"../common/scales/types\";\nimport { IChart, IChartEvent, IChartPlugin } from \"../common/types\";\nimport { D3Selection } from \"../common/types\";\nimport { UtilityService } from \"../common/utility.service\";\n\nimport { GridConfig } from \"./config/grid-config\";\nimport { IAllAround, IBorderConfig, IBorders, IDimensions, IGrid, IGridConfig } from \"./types\";\n\nexport const borderMidpoint = 0.5;\n\n// eslint-disable-next-line @typescript-eslint/no-type-alias\ntype BorderKey = keyof IAllAround;\n\n/**\n * @implements {IGrid}\n * Implementation for the dimensions, scaling, interactive area, and borders of a basic grid\n */\nexport abstract class Grid implements IGrid {\n    /** Class name for the grid */\n    public static GRID_CLASS_NAME = \"nui-chart-grid\";\n\n    /** Class name applied to each of the grid's borders by default */\n    public static DEFAULT_BORDER_CLASS_NAME = \"nui-chart-border\";\n\n    /** Prefix applied to the rendering area clip path id */\n    public static RENDERING_AREA_CLIP_PATH_PREFIX = \"clip-path_\";\n\n    /** Name for the lasagna layer containing the grid's rendered elements */\n    public static GRID_ELEMENTS_LAYER_NAME = \"grid-elements\";\n\n    /** Name for the rendering area lasagna layer */\n    public static RENDERING_AREA_LAYER_NAME = \"rendering-area\";\n\n    /** @ignore Height correction needed to prevent interaction gap between vertically stacked charts */\n    public static RENDER_AREA_HEIGHT_CORRECTION = 1;\n\n    /** @ignore Width correction needed to prevent interaction gap between right side of grid and the edge of the rendering area */\n    public static RENDER_AREA_WIDTH_CORRECTION = 1;\n\n    /** @ignore Width correction needed to sync bottom border length and grid width to tick placement */\n    public static TICK_DIMENSION_CORRECTION = 1;\n\n    /** Subject for indicating that the chart's dimensions should be updated */\n    public updateChartDimensionsSubject: Subject;\n\n    /** Event bus provided by the chart */\n    public eventBus: EventBus;\n\n    /** d3 container for the grid */\n    protected container: D3Selection;\n\n    /** d3 selection for the grid's rendering area clip path */\n    protected renderingAreaClipPath: D3Selection;\n\n    /** d3 selection for the grid's rendering area */\n    protected renderingArea: D3Selection;\n\n    /** d3 selection for the grid's interactive area */\n    protected interactiveArea: D3Selection;\n\n    /** The grid's layer manager */\n    protected lasagna: Lasagna;\n\n    /** Lasagna layer for the grid's rendered elements */\n    protected gridElementsLayer: Selection;\n\n    /** Definition of the grid's borders as rendered */\n    protected borders: Partial = {};\n\n    /** Property value of the grid's scales */\n    protected _scales: ScalesIndex;\n\n    /** Property value of the grid's configuration */\n    protected _config: IGridConfig;\n\n    /** Property value of the grid's target d3 selection */\n    protected _target: D3Selection;\n\n\n    /** See {@link IGrid#getInteractiveArea} */\n    public getInteractiveArea(): D3Selection {\n        return this.interactiveArea;\n    }\n\n    /** See {@link IGrid#getLasagna} */\n    public getLasagna(): Lasagna {\n        return this.lasagna;\n    }\n\n    /** @ignore */\n    public set scales(scales: ScalesIndex) {\n        this._scales = scales;\n    }\n\n    /** @ignore */\n    public get scales(): ScalesIndex {\n        return this._scales;\n    }\n\n    /** See {@link IGrid#config} */\n    public config(): IGridConfig;\n    /** See {@link IGrid#config} */\n    public config(config: IGridConfig): this;\n    /** See {@link IGrid#config} */\n    public config(config?: IGridConfig): IGridConfig | this {\n        if (config === undefined) {\n            return this._config;\n        }\n        this._config = config;\n        return this;\n    }\n\n    /** See {@link IGrid#target} */\n    public target(): D3Selection;\n    /** See {@link IGrid#target} */\n    public target(target: D3Selection): IGrid;\n    /** See {@link IGrid#target} */\n    public target(target?: D3Selection): D3Selection | IGrid {\n        if (target === undefined) {\n            return this._target;\n        }\n        this._target = target;\n        return this;\n    }\n\n    /** See {@link IGrid#build} */\n    public build(): IGrid {\n        if (!this.config()) {\n            const config = new GridConfig();\n            this.config(config);\n        }\n\n        this.container = this._target.append(\"g\")\n            .attrs({\n                \"class\": Grid.GRID_CLASS_NAME,\n            });\n\n        const clipPathId = Grid.RENDERING_AREA_CLIP_PATH_PREFIX + UtilityService.uuid();\n        // Asserting similar type to avoid refactoring all the grids\n        // TODO: Refactor lasagna service to accept multiple D3Selection types\n        //  or refactor grid implementations/interfaces to maintain the same selection type\n        this.lasagna = new Lasagna(>(this.container), clipPathId);\n        this.renderingArea = this.buildRenderingArea(clipPathId);\n        this.adjustRenderingArea();\n\n        this.gridElementsLayer = this.lasagna.addLayer({\n            name: Grid.GRID_ELEMENTS_LAYER_NAME,\n            order: 100,\n            clipped: false,\n        });\n\n        const borders = this.buildBorders(this.gridElementsLayer);\n        if (borders) {\n            this.borders = borders;\n        }\n\n        return this;\n    }\n\n    /**\n     * Derived classes override this method to build the grid's plugins\n     *\n     * @param {IChart} chart The chart instance to pass to each plugin\n     *\n     * @returns {IChartPlugin[]} Default implementation returns an empty array\n     */\n    public buildPlugins(chart: IChart): IChartPlugin[] {\n        return [];\n    }\n\n    /** See {@link IGrid#update} */\n    public update(): IGrid {\n        if (isEmpty(this.scales)) {\n            return this;\n        }\n\n        this.updateBorders();\n        this.adjustRenderingArea();\n        return this;\n    }\n\n    /** See {@link IGrid#updateDimensions} */\n    public updateDimensions(dimensions: Partial): IGrid {\n        const dimensionConfig = this.config().dimension;\n\n        if (dimensions.width) {\n            dimensionConfig.outerWidth(dimensions.width - this.getOuterWidthDimensionCorrection());\n        }\n        if (dimensions.height) {\n            dimensionConfig.outerHeight(dimensions.height);\n        }\n\n        this.adjustRenderingArea();\n        this.updateRanges();\n\n        return this;\n    }\n    /** See {@link IGrid#updateRanges} */\n    public updateRanges(): IGrid {\n        this.update();\n        return this;\n    }\n\n    /**\n     * Calculate the width correction needed for accommodating grid elements that may extend beyond the chart's configured width\n     */\n    protected getOuterWidthDimensionCorrection() {\n        return Grid.TICK_DIMENSION_CORRECTION;\n    }\n\n    /**\n     * Builds the grid borders as SVGElements based on the specified configuration\n     *\n     * @param {D3Selection} container d3 container for the borders\n     *\n     * @returns {Partial} The grid's borders\n     */\n    protected buildBorders(container: D3Selection): Partial | undefined {\n        if (!this.config() || !this.config().borders) {\n            return;\n        }\n\n        const borderConfigs = this.config().borders;\n        const borders: Partial = {};\n        const borderKeys = Object.keys(borderConfigs);\n        each(borderKeys, (side: BorderKey) => {\n            // We're creating even invisible borders and updating visibility afterwards\n            if (borderConfigs[side]) {\n                borders[side] = this.createBorder(container, borderConfigs[side]) ?? undefined;\n            }\n        });\n\n        return borders;\n    }\n\n    /**\n     * Adjusts the grid's rendering area and clip path based on the grid's configured width and height\n     */\n    protected adjustRenderingArea = () => {\n        const d = this.config().dimension;\n        const renderingAreaClipPathAttrs = {\n            \"width\": d.width(),\n            \"height\": d.height() + Grid.RENDER_AREA_HEIGHT_CORRECTION,\n            \"y\": -Grid.RENDER_AREA_HEIGHT_CORRECTION,\n        };\n\n        const renderingAreaAttrs = {\n            ...renderingAreaClipPathAttrs,\n            // Width correction needed to prevent interaction gap between right side of grid and the edge of the rendering area\n            \"width\": d.width() > 0 ? d.width() - Grid.RENDER_AREA_WIDTH_CORRECTION : d.width(),\n        };\n\n        this.renderingAreaClipPath.attrs(renderingAreaClipPathAttrs);\n        this.renderingArea.attrs(renderingAreaAttrs);\n    }\n\n    /**\n     * Builds the grid's rendering area as a layer on the lasagna\n     *\n     * @param {string} clipPathId The clip path identifier\n     *\n     * @returns {D3Selection} The grid's rendering area\n     */\n    private buildRenderingArea(clipPathId: string): D3Selection {\n        this.renderingAreaClipPath = this._target.append(\"clipPath\")\n            .attr(\"id\", clipPathId)\n            .append(\"rect\");\n\n        const renderingAreaContainer = this.lasagna.addLayer({\n            name: Grid.RENDERING_AREA_LAYER_NAME,\n            order: -1,\n            clipped: true,\n        });\n        return renderingAreaContainer.append(\"rect\")\n            .attrs({\n                \"pointer-events\": \"all\",\n                \"fill\": \"transparent\",\n            });\n    }\n\n    /**\n     * Creates a border with the specified configuration in the provided container\n     *\n     * @param {D3Selection} container The container to append the border to\n     * @param {IBorderConfig} config The configuration to apply to the border\n     *\n     * @returns {SVGElement} The created border\n     */\n    private createBorder(container: D3Selection, config: IBorderConfig): SVGElement | null {\n        const border = container.append(\"line\")\n            .attr(\"class\", config.className || Grid.DEFAULT_BORDER_CLASS_NAME);\n\n        if (config.width) {\n            // use style instead of attr to override css style\n            border.style(\"stroke-width\", config.width);\n        }\n        if (config.color) {\n            // use style instead of attr to override css style\n            border.style(\"stroke\", config.color);\n        }\n\n        return border.node();\n    }\n\n    // TODO: borders are evil. reconsider!\n    // We're using borders instead of axis line and because of that we need to do these weird size adjustments\n    protected updateBottomBorder() {\n        if (!this.borders.bottom) {\n            throw new Error(\"BottomBorder is not defined\");\n        }\n        select(this.borders.bottom)\n            .attrs({\n                \"x1\": 0,\n                \"y1\": this.config().dimension.height() - borderMidpoint,\n                \"x2\": this.config().dimension.width() + Grid.TICK_DIMENSION_CORRECTION, // to get nice alignment with ticks\n                \"y2\": this.config().dimension.height() - borderMidpoint,\n            })\n            .classed(\"hidden\", !this._config.borders.bottom?.visible);\n    }\n\n    /**\n     * Updates the d3 line positioning and visibility attributes of each of the configured borders\n     */\n    protected updateBorders() {\n        if (this.borders.bottom) {\n            this.updateBottomBorder();\n        }\n        if (this.borders.top) {\n            select(this.borders.top)\n                .attrs({\n                    \"x1\": 0,\n                    \"y1\": borderMidpoint, // the line was outside of the viewport in some browser when set to 0\n                    \"x2\": this.config().dimension.width() + Grid.TICK_DIMENSION_CORRECTION, // to get nice alignment with ticks\n                    \"y2\": borderMidpoint,\n                })\n                .classed(\"hidden\", !this._config.borders.top?.visible);\n        }\n        if (this.borders.right) {\n            select(this.borders.right)\n                .attrs({\n                    \"x1\": this.config().dimension.width() - borderMidpoint,\n                    \"y1\": 0,\n                    \"x2\": this.config().dimension.width() - borderMidpoint,\n                    \"y2\": this.config().dimension.height() + Grid.TICK_DIMENSION_CORRECTION, // to get nice alignment with ticks\n                })\n                .classed(\"hidden\", !this._config.borders.right?.visible);\n        }\n        if (this.borders.left) {\n            select(this.borders.left)\n                .attrs({\n                    \"x1\": borderMidpoint,\n                    \"y1\": 0,\n                    \"x2\": borderMidpoint,\n                    \"y2\": this.config().dimension.height() + Grid.TICK_DIMENSION_CORRECTION, // to get nice alignment with ticks\n                })\n                .classed(\"hidden\", !this._config.borders.left?.visible);\n        }\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GridConfig.html":{"url":"classes/GridConfig.html","title":"class - GridConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GridConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/config/grid-config.ts\n        \n\n            \n                Description\n            \n            \n                See IGridConfig \n\n            \n\n\n            \n                Implements\n            \n            \n                            IGridConfig\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                borders\n                            \n                            \n                                    Public\n                                cursor\n                            \n                            \n                                    Public\n                                dimension\n                            \n                            \n                                    Public\n                                interactive\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            borders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        // TODO: Review this\n        // @ts-ignore\n        top: undefined,\n        // @ts-ignore\n        bottom: undefined,\n        // @ts-ignore\n        left: undefined,\n        // @ts-ignore\n        right: undefined,\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/grid-config.ts:16\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            cursor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"crosshair\"\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/grid-config.ts:28\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dimension\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IDimensionConfig\n\n                        \n                    \n                    \n                        \n                            Default value : new DimensionConfig()\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/grid-config.ts:14\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interactive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/grid-config.ts:11\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IAllAround, IBorderConfig, IDimensionConfig, IGridConfig } from \"../types\";\n\nimport { DimensionConfig } from \"./dimension-config\";\n\n/** See {@link IGridConfig} */\nexport class GridConfig implements IGridConfig {\n\n    // We should avoid this kind of option in future versions of GridConfig\n    // because ideally all plugins should be added manually (NUI-3304).\n    /** See {@link IGridConfig#interactive} */\n    public interactive: boolean = true;\n\n    /** See {@link IGridConfig#dimension} */\n    public dimension: IDimensionConfig = new DimensionConfig();\n    /** See {@link IGridConfig#borders} */\n    public borders: IAllAround = {\n        // TODO: Review this\n        // @ts-ignore\n        top: undefined,\n        // @ts-ignore\n        bottom: undefined,\n        // @ts-ignore\n        left: undefined,\n        // @ts-ignore\n        right: undefined,\n    };\n    /** See {@link IGridConfig#cursor} */\n    public cursor = \"crosshair\";\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HorizontalBarAccessors.html":{"url":"classes/HorizontalBarAccessors.html","title":"class - HorizontalBarAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HorizontalBarAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/bar/accessors/horizontal-bar-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        BarAccessors\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                series\n                            \n                            \n                                data\n                            \n                            \n                                series\n                            \n                            \n                                data\n                            \n                            \n                                series\n                            \n                            \n                                data\n                            \n                            \n                                series\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(colorProvider?: IValueProvider, markerProvider?: IValueProvider)\n                    \n                \n                        \n                            \n                                Defined in src/renderers/bar/accessors/horizontal-bar-accessors.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        colorProvider\n                                                  \n                                                        \n                                                                        IValueProvider\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        markerProvider\n                                                  \n                                                        \n                                                                        IValueProvider\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IBarDataAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/bar/accessors/horizontal-bar-accessors.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleSeriesAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/bar/accessors/horizontal-bar-accessors.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IBarDataAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BarAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         BarAccessors:22\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleSeriesAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BarAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         BarAccessors:23\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleDataAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BarAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         BarAccessors:34\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleSeriesAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BarAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         BarAccessors:35\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleDataAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         RectangleAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         RectangleAccessors:34\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleSeriesAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         RectangleAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         RectangleAccessors:35\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IChartMarker, IValueProvider } from \"../../../core/common/types\";\nimport { IRectangleSeriesAccessors } from \"../../accessors/rectangle-accessors\";\n\nimport { BarAccessors, IBarDataAccessors } from \"./bar-accessors\";\n\nexport class HorizontalBarAccessors extends BarAccessors {\n    data: IBarDataAccessors;\n    series: IRectangleSeriesAccessors;\n\n    constructor(colorProvider?: IValueProvider, markerProvider?: IValueProvider) {\n        super(colorProvider, markerProvider);\n\n        this.data = {\n            ...this.data,\n            startX: (d, i, s, ds) => this.data.start(d, i, s, ds),\n            endX: (d, i, s, ds) => this.data.end(d, i, s, ds),\n            startY: (d, i, s, ds) => this.data.category(d, i, s, ds),\n            endY: (d, i, s, ds) => this.data.category(d, i, s, ds),\n            thicknessY: (d, i, s, ds) => this.data.thickness ? this.data.thickness(d, i, s, ds) : undefined,\n        };\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAccessors.html":{"url":"interfaces/IAccessors.html","title":"interface - IAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                Accessors describe the data for the consumers.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        data\n                                \n                                \n                                            Optional\n                                        series\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         IDataAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDataAccessors\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Data point level accessors for defining what part of a datum is used for visualizations \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        series\n                                    \n                                \n                                \n                                    \n                                        series:         ISeriesAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ISeriesAccessors\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Series level accessors - e.g. for colors, markers, etc. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig {\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAllAround.html":{"url":"interfaces/IAllAround.html","title":"interface - IAllAround","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IAllAround\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/types.ts\n        \n\n            \n                Description\n            \n            \n                Interface for defining aspects of the top, right, bottom, and left sides of a grid\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        bottom\n                                \n                                \n                                        left\n                                \n                                \n                                        right\n                                \n                                \n                                        top\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        bottom\n                                    \n                                \n                                \n                                    \n                                        bottom:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Object defining aspects of the bottom of an entity \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        left\n                                    \n                                \n                                \n                                    \n                                        left:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Object defining aspects of the left side of an entity \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        right\n                                    \n                                \n                                \n                                    \n                                        right:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Object defining aspects of the right side of an entity \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        top\n                                    \n                                \n                                \n                                    \n                                        top:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Object defining aspects of the top of an entity \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { BaseType } from \"d3\";\nimport { Axis } from \"d3-axis\";\nimport { Selection } from \"d3-selection\";\nimport { Subject } from \"rxjs\";\n\nimport { EventBus } from \"../common/event-bus\";\nimport { Lasagna } from \"../common/lasagna\";\nimport { ScalesIndex } from \"../common/scales/types\";\nimport { D3Selection, IChart, IChartEvent, IChartPlugin } from \"../common/types\";\n\n/**\n * Interface for defining aspects of the top, right, bottom, and left sides of a grid\n */\nexport interface IAllAround {\n    /** Object defining aspects of the top of an entity */\n    top: T;\n    /** Object defining aspects of the right side of an entity */\n    right: T;\n    /** Object defining aspects of the bottom of an entity */\n    bottom: T;\n    /** Object defining aspects of the left side of an entity */\n    left: T;\n}\n\n/**\n * The width and height of an grid\n */\nexport interface IDimensions {\n    width: number;\n    height: number;\n}\n\n/**\n * Configuration of grid dimensions\n */\nexport interface IDimensionConfig {\n    /** The top, right, bottom, and left margin sizes in pixels */\n    margin: IAllAround;\n    /** The top, right, bottom, and left padding sizes in pixels */\n    padding: IAllAround;\n    /** Sets whether the grid uses the chart's container to determine its width */\n    autoWidth: boolean;\n    /** Sets whether the grid uses the chart's container to determine its height */\n    autoHeight: boolean;\n    /** Set of booleans indicating whether a specific margin will be recalculated on chart dimension updates */\n    marginLocked?: IAllAround;\n    /**\n     * Sets the grid's width. Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid width\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    width(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- excluding margins.\n     *\n     * @returns {number} The grid's width\n     */\n    width(): number;\n    /**\n     * Sets the grid's height. Note: 'autoHeight' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid height\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    height(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- excluding margins.\n     *\n     * @returns {number} The grid's height\n     */\n    height(): number;\n    /**\n     * Sets the grid's width by subtracting the grid's horizontal margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new width plus the grid's horizontal margins\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerWidth(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- including horizontal margins.\n     *\n     * @returns {number} The grid's width plus horizontal margins\n     */\n    outerWidth(): number;\n    /**\n     * Sets the grid's height by subtracting the grid's vertical margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new height plus the grid's vertical margins     *\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerHeight(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- including vertical margins.\n     *\n     * @returns {number} The grid's height plus vertical margins\n     */\n    outerHeight(): number;\n}\n\n/**\n * Interface for defining the SVGElements forming the top, right, bottom, and left borders of an entity\n */\nexport interface IBorders extends IAllAround {\n}\n\n/**\n * Configuration of grid borders\n */\nexport interface IBorderConfig {\n    /** The stroke color */\n    color?: string;\n    /** The thickness of the border */\n    width?: number;\n    /** The class name */\n    className?: string;\n    /** Boolean indicating whether the border should be visible */\n    visible?: boolean;\n}\n\nexport interface ITextOverflowArgs {\n    widthLimit: number;\n    horizontalPadding: number;\n    ellipsisWidth: number;\n}\n\n/** Type for tick overflow handler */\nexport type TextOverflowHandler = (textSelection: Selection, args: ITextOverflowArgs) => void;\n\n/** Interface representing the configuration for tick labels */\nexport interface ITickLabelConfig {\n    /**\n     * Padding for left and right sides of label used for calculating text overflow limits\n     * (number represents the padding on each side)\n     */\n    horizontalPadding: number;\n    /** Handler for text overflow. Set to 'undefined' to disable overflow handling */\n    overflowHandler?: TextOverflowHandler;\n    /**\n     * Setting this insures the label's width is smaller or equal to the provided number\n     */\n    maxWidth?: number;\n}\n\n/** Configuration of a grid axis */\nexport interface IAxisConfig {\n    /** Boolean indicating whether the axis should be visible */\n    visible: boolean;\n    /** The approximate number of ticks to display */\n    approximateTicks: number;\n    /** Boolean indicating whether grid ticks should be displayed */\n    gridTicks: boolean;\n    /** The length of the ticks in pixels */\n    tickSize: number;\n    /** Configuration for the tick labels */\n    tickLabel: ITickLabelConfig;\n    /** Sets whether to fit the grid margins to the axis labels */\n    fit: boolean;\n    /** Sets the axis padding */\n    padding: number;\n}\n\n/**\n * Basic grid configuration\n */\nexport interface IGridConfig {\n    /** Boolean indicating whether the grid will respond to mouse events */\n    interactive: boolean;\n    /** Configuration for the grid's dimensions */\n    dimension: IDimensionConfig;\n    /** Configuration for the grid's borders */\n    borders: IAllAround;\n    /** String indicating the desired cursor style */\n    cursor: string;\n}\n\n/**\n * Configuration for an XYGrid\n */\nexport interface IXYGridConfig extends IGridConfig {\n    /** The IAllAround value for the grid's axis configurations */\n    axis: IAllAround;\n\n    /**\n     * Add interaction line and label plugins automatically\n     * Note: This was added to prevent a breaking change. We should avoid this kind of option in future\n     * versions of IXYGridConfig because ideally all plugins should be added manually (NUI-3304).\n     */\n    interactionPlugins: boolean;\n}\n\n/**\n * The basic interface for a grid's dimensions, scaling, interaction, and borders\n *\n * @interface\n */\nexport interface IGrid {\n    /** The grid scales\n     *\n     * @type {ScalesIndex}\n     */\n    scales: ScalesIndex;\n\n    /**\n     * Subject for indicating that the chart's dimensions should be updated\n     */\n    updateChartDimensionsSubject?: Subject;\n\n    /**\n     * Chart event bus\n     */\n    eventBus: EventBus;\n\n    /**\n     * Provides access to the grid's layering mechanism\n     *\n     * @returns {Lasagna} The grid's layering mechanism\n     */\n    getLasagna(): Lasagna;\n\n    /**\n     * Provides access to the grid's interactive area\n     *\n     * @returns {D3Selection} The grid's interactive area\n     */\n    getInteractiveArea(): D3Selection;\n\n    /**\n     * getter for the grid's target d3 selection\n     *\n     * @returns {D3Selection} The grid's target d3 selection\n     */\n    target(): D3Selection;\n\n    /**\n     * setter for the grid's target d3 selection\n     *\n     * @param {D3Selection} [target] The grid's new target d3 selection\n     * @returns {IGrid} The grid instance\n     */\n    target(target: D3Selection): IGrid;\n    target(target: D3Selection): D3Selection | IGrid;\n\n    /**\n     * getter for the grid configuration\n     *\n     * @returns {IGridConfig} The grid configuration\n     */\n    config(): IGridConfig;\n\n    /**\n     * setter for the grid configuration\n     *\n     * @param {IGridConfig} config The new grid configuration\n     * @returns {this} The grid instance\n     */\n    config(config: IGridConfig): this;\n\n    /**\n     * Builds the grid's rendered elements\n     *\n     * @returns {IGrid} The grid instance\n     */\n    build(): IGrid;\n\n    /**\n     * Updates the grid's rendered elements based on the current scales and configuration\n     *\n     * @returns {IGrid} The grid instance\n     */\n    update(): IGrid;\n\n    /**\n     * Updates the grid's dimensions as specified\n     *\n     * @param {Partial} dimensions The new grid dimensions\n     * @returns {IGrid} The grid instance\n     */\n    updateDimensions(dimensions: Partial): IGrid;\n\n    /**\n     * Updates the ranges on the grid's scales based on the grid's configured dimensions\n     *\n     * @returns {IGrid} The grid instance\n     */\n    updateRanges(): IGrid;\n\n    /**\n     * Builds the grid's plugins\n     *\n     * @returns {IChartPlugin[]} The set of generated plugins\n     */\n    buildPlugins(chart: IChart): IChartPlugin[];\n}\n\n/**\n * Interface for a d3 axis entity\n */\nexport interface IAxis {\n    /** The d3 group element for the axis label */\n    labelGroup: D3Selection;\n    /** The d3 group element for the axis ticks */\n    tickGroup: D3Selection;\n    /** The d3 group element for the axis */\n    group: D3Selection;\n    /** The d3 axis */\n    axis: Axis;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAreaAccessors.html":{"url":"interfaces/IAreaAccessors.html","title":"interface - IAreaAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IAreaAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/area/area-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                                \n                                        series\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         IAreaDataAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IAreaDataAccessors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        series\n                                    \n                                \n                                \n                                    \n                                        series:         IAreaSeriesAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IAreaSeriesAccessors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { defaultColorProvider, defaultMarkerProvider } from \"../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, IDataAccessors, ISeriesAccessors, SeriesAccessor } from \"../../core/common/types\";\n\nexport interface IAreaDataAccessors extends IDataAccessors {\n    x: DataAccessor;\n    x0: DataAccessor;\n    x1: DataAccessor;\n    absoluteX0: DataAccessor;\n    absoluteX1: DataAccessor;\n    y: DataAccessor;\n    y0: DataAccessor;\n    y1: DataAccessor;\n    absoluteY0: DataAccessor;\n    absoluteY1: DataAccessor;\n}\n\nexport interface IAreaSeriesAccessors extends ISeriesAccessors {\n    color?: SeriesAccessor;\n    marker?: SeriesAccessor;\n}\n\nexport interface IAreaAccessors extends IAccessors {\n    data: IAreaDataAccessors;\n    series: IAreaSeriesAccessors;\n}\n\nexport class AreaAccessors implements IAreaAccessors {\n    data: IAreaDataAccessors;\n    series: IAreaSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider(), private markerProvider = defaultMarkerProvider()) {\n        this.data = {\n            x: (d, i, ds, s) => d.x,\n            x0: (d, i, ds, s) => this.data.x(d, i, ds, s),\n            x1: (d, i, ds, s) => this.data.x(d, i, ds, s),\n            y: (d, i, ds, s) => d.y,\n            y0: (d, i, ds, s) => this.data.y(d, i, ds, s),\n            y1: (d, i, ds, s) => this.data.y(d, i, ds, s),\n            absoluteX0: (d, i, ds, s) => d[\"__stack_x\"]?.start ?? this.data.x0(d, i, ds, s),\n            absoluteX1: (d, i, ds, s) => d[\"__stack_x\"]?.end ?? this.data.x1(d, i, ds, s),\n            absoluteY0: (d, i, ds, s) => d[\"__stack_y\"]?.start ?? this.data.y0(d, i, ds, s),\n            absoluteY1: (d, i, ds, s) => d[\"__stack_y\"]?.end ?? this.data.y1(d, i, ds, s),\n        };\n\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n            marker: this.markerProvider ? this.markerProvider.get : undefined,\n        };\n    }\n}\n\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAreaDataAccessors.html":{"url":"interfaces/IAreaDataAccessors.html","title":"interface - IAreaDataAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IAreaDataAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/area/area-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IDataAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        absoluteX0\n                                \n                                \n                                        absoluteX1\n                                \n                                \n                                        absoluteY0\n                                \n                                \n                                        absoluteY1\n                                \n                                \n                                        x\n                                \n                                \n                                        x0\n                                \n                                \n                                        x1\n                                \n                                \n                                        y\n                                \n                                \n                                        y0\n                                \n                                \n                                        y1\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        absoluteX0\n                                    \n                                \n                                \n                                    \n                                        absoluteX0:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        absoluteX1\n                                    \n                                \n                                \n                                    \n                                        absoluteX1:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        absoluteY0\n                                    \n                                \n                                \n                                    \n                                        absoluteY0:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        absoluteY1\n                                    \n                                \n                                \n                                    \n                                        absoluteY1:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x0\n                                    \n                                \n                                \n                                    \n                                        x0:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x1\n                                    \n                                \n                                \n                                    \n                                        x1:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y0\n                                    \n                                \n                                \n                                    \n                                        y0:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y1\n                                    \n                                \n                                \n                                    \n                                        y1:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { defaultColorProvider, defaultMarkerProvider } from \"../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, IDataAccessors, ISeriesAccessors, SeriesAccessor } from \"../../core/common/types\";\n\nexport interface IAreaDataAccessors extends IDataAccessors {\n    x: DataAccessor;\n    x0: DataAccessor;\n    x1: DataAccessor;\n    absoluteX0: DataAccessor;\n    absoluteX1: DataAccessor;\n    y: DataAccessor;\n    y0: DataAccessor;\n    y1: DataAccessor;\n    absoluteY0: DataAccessor;\n    absoluteY1: DataAccessor;\n}\n\nexport interface IAreaSeriesAccessors extends ISeriesAccessors {\n    color?: SeriesAccessor;\n    marker?: SeriesAccessor;\n}\n\nexport interface IAreaAccessors extends IAccessors {\n    data: IAreaDataAccessors;\n    series: IAreaSeriesAccessors;\n}\n\nexport class AreaAccessors implements IAreaAccessors {\n    data: IAreaDataAccessors;\n    series: IAreaSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider(), private markerProvider = defaultMarkerProvider()) {\n        this.data = {\n            x: (d, i, ds, s) => d.x,\n            x0: (d, i, ds, s) => this.data.x(d, i, ds, s),\n            x1: (d, i, ds, s) => this.data.x(d, i, ds, s),\n            y: (d, i, ds, s) => d.y,\n            y0: (d, i, ds, s) => this.data.y(d, i, ds, s),\n            y1: (d, i, ds, s) => this.data.y(d, i, ds, s),\n            absoluteX0: (d, i, ds, s) => d[\"__stack_x\"]?.start ?? this.data.x0(d, i, ds, s),\n            absoluteX1: (d, i, ds, s) => d[\"__stack_x\"]?.end ?? this.data.x1(d, i, ds, s),\n            absoluteY0: (d, i, ds, s) => d[\"__stack_y\"]?.start ?? this.data.y0(d, i, ds, s),\n            absoluteY1: (d, i, ds, s) => d[\"__stack_y\"]?.end ?? this.data.y1(d, i, ds, s),\n        };\n\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n            marker: this.markerProvider ? this.markerProvider.get : undefined,\n        };\n    }\n}\n\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAreaRendererConfig.html":{"url":"interfaces/IAreaRendererConfig.html","title":"interface - IAreaRendererConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IAreaRendererConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/types.ts\n        \n\n            \n                Description\n            \n            \n                The configuration interface for the area renderer \n\n            \n\n            \n                Extends\n            \n            \n                        IRendererConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        areaClass\n                                \n                                \n                                            Optional\n                                        curveType\n                                \n                                \n                                            Optional\n                                        markerInteraction\n                                \n                                \n                                            Optional\n                                        strokeWidth\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        areaClass\n                                    \n                                \n                                \n                                    \n                                        areaClass:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the class name to apply custom styles to the areas \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        curveType\n                                    \n                                \n                                \n                                    \n                                        curveType:     CurveFactory\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     CurveFactory\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the d3 curve algorithm to be used for drawing the area boundaries \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        markerInteraction\n                                    \n                                \n                                \n                                    \n                                        markerInteraction:         IMarkerInteractionConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IMarkerInteractionConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Enables the pointer cursor when data point markers are hovered \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        strokeWidth\n                                    \n                                \n                                \n                                    \n                                        strokeWidth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The width of the area path's stroke in pixels. Default is 1. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { CurveFactory } from \"d3-shape\";\nimport { Subject } from \"rxjs\";\n\nimport { Renderer } from \"../core/common/renderer\";\nimport { Scales } from \"../core/common/scales/types\";\nimport { IAccessors, IDataSeries, IRenderContainers, IRendererConfig, IRendererEventPayload } from \"../core/common/types\";\n\nimport { IRectangleAccessors } from \"./accessors/rectangle-accessors\";\nimport { BarRenderer } from \"./bar/bar-renderer\";\nimport { ILineAccessors } from \"./line/line-accessors\";\nimport { LineRenderer } from \"./line/line-renderer\";\n\nexport enum RenderState {\n    hidden = \"hidden\",\n    deemphasized = \"deemphasized\",\n    emphasized = \"emphasized\",\n    default = \"default\",\n}\n\nexport enum RenderLayerName {\n    background = \"background\",\n    data = \"data\",\n    unclippedData = \"unclipped-data\",\n    foreground = \"foreground\",\n}\n\n/** The configuration interface for marker interaction */\nexport interface IMarkerInteractionConfig {\n    /** Enables mouse events on data point markers */\n    enabled: boolean;\n    /** Enables the pointer style mouse cursor when data point markers are hovered */\n    clickable?: boolean;\n}\n\n/** The configuration interface for the enhanced line caps */\nexport interface IEnhancedLineCapConfig {\n    /** Set the stroke color */\n    stroke?: string;\n    /** Set the stroke width in pixels */\n    strokeWidth?: number;\n    /** Set the fill color */\n    fill?: string;\n    /** Set the radius in pixels */\n    radius?: number;\n}\n\n/** The configuration interface for the line renderer */\nexport interface ILineRendererConfig extends IRendererConfig {\n    /** Set the width of the line in pixels */\n    strokeWidth?: number;\n    /** Set the stroke-dasharray of the line, e.g. \"1,1\", \"2,2\", etc. */\n    strokeStyle?: string;\n    /** Set the stroke-linecap of the line, e.g. \"round\" */\n    strokeLinecap?: string;\n    /** Set the d3 curve algorithm to be used for drawing the lines */\n    curveType?: CurveFactory;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. LineSelectSeriesInteractionStrategy */\n    interactionStrategy?: IHighlightStrategy;\n    /** Configure the interaction behavior for markers */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** Set whether enhanced line caps should be displayed */\n    useEnhancedLineCaps?: boolean;\n    /** Optionally configure enhanced line caps. Prerequisite: 'useEnhancedLineCaps' is set to true */\n    enhancedLineCap?: IEnhancedLineCapConfig;\n}\n\n/** The configuration interface for the bar renderer */\nexport interface IBarRendererConfig extends IRendererConfig {\n    /** Set the padding on both sides of each bar */\n    padding?: number;\n    /** Set the class name to apply custom styles to the bars */\n    barClass?: string;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. BarHighlightStrategy */\n    highlightStrategy?: IHighlightStrategy;\n    /** Set the mouse cursor style to use when hovering over individual bars */\n    cursor?: string;\n    /** Enables pointer events on the bars */\n    pointerEvents?: boolean;\n    /** Set the stroke width in pixels */\n    strokeWidth?: number;\n    /** Enable the minimum bar thickness (BarRenderer.MIN_BAR_THICKNESS) */\n    enableMinBarThickness?: boolean;\n}\n\n/** The configuration interface for the area renderer */\nexport interface IAreaRendererConfig extends IRendererConfig {\n    /** Set the d3 curve algorithm to be used for drawing the area boundaries */\n    curveType?: CurveFactory;\n    /** Set the class name to apply custom styles to the areas */\n    areaClass?: string;\n    /** Enables the pointer cursor when data point markers are hovered */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** The width of the area path's stroke in pixels. Default is 1. */\n    strokeWidth?: number;\n}\n\nexport interface IRenderSeries {\n    dataSeries: IDataSeries;\n    containers: IRenderContainers;\n    scales: Scales;\n}\n\nexport interface IHighlightStrategy> {\n\n    getDataPointIndex(renderer: T, series: IDataSeries, values: { [p: string]: any }, scales: Scales): number;\n\n    highlightDataPoint(renderer: T, renderSeries: IRenderSeries,\n                       dataPointIndex: number, rendererSubject: Subject): void;\n\n    draw(renderer: T, renderSeries: IRenderSeries, rendererSubject: Subject): void;\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAreaSeriesAccessors.html":{"url":"interfaces/IAreaSeriesAccessors.html","title":"interface - IAreaSeriesAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IAreaSeriesAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/area/area-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        ISeriesAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        color\n                                \n                                \n                                            Optional\n                                        marker\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                    \n                                \n                                \n                                    \n                                        color:         SeriesAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SeriesAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        marker\n                                    \n                                \n                                \n                                    \n                                        marker:         SeriesAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SeriesAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { defaultColorProvider, defaultMarkerProvider } from \"../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, IDataAccessors, ISeriesAccessors, SeriesAccessor } from \"../../core/common/types\";\n\nexport interface IAreaDataAccessors extends IDataAccessors {\n    x: DataAccessor;\n    x0: DataAccessor;\n    x1: DataAccessor;\n    absoluteX0: DataAccessor;\n    absoluteX1: DataAccessor;\n    y: DataAccessor;\n    y0: DataAccessor;\n    y1: DataAccessor;\n    absoluteY0: DataAccessor;\n    absoluteY1: DataAccessor;\n}\n\nexport interface IAreaSeriesAccessors extends ISeriesAccessors {\n    color?: SeriesAccessor;\n    marker?: SeriesAccessor;\n}\n\nexport interface IAreaAccessors extends IAccessors {\n    data: IAreaDataAccessors;\n    series: IAreaSeriesAccessors;\n}\n\nexport class AreaAccessors implements IAreaAccessors {\n    data: IAreaDataAccessors;\n    series: IAreaSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider(), private markerProvider = defaultMarkerProvider()) {\n        this.data = {\n            x: (d, i, ds, s) => d.x,\n            x0: (d, i, ds, s) => this.data.x(d, i, ds, s),\n            x1: (d, i, ds, s) => this.data.x(d, i, ds, s),\n            y: (d, i, ds, s) => d.y,\n            y0: (d, i, ds, s) => this.data.y(d, i, ds, s),\n            y1: (d, i, ds, s) => this.data.y(d, i, ds, s),\n            absoluteX0: (d, i, ds, s) => d[\"__stack_x\"]?.start ?? this.data.x0(d, i, ds, s),\n            absoluteX1: (d, i, ds, s) => d[\"__stack_x\"]?.end ?? this.data.x1(d, i, ds, s),\n            absoluteY0: (d, i, ds, s) => d[\"__stack_y\"]?.start ?? this.data.y0(d, i, ds, s),\n            absoluteY1: (d, i, ds, s) => d[\"__stack_y\"]?.end ?? this.data.y1(d, i, ds, s),\n        };\n\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n            marker: this.markerProvider ? this.markerProvider.get : undefined,\n        };\n    }\n}\n\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAxis.html":{"url":"interfaces/IAxis.html","title":"interface - IAxis","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IAxis\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/types.ts\n        \n\n            \n                Description\n            \n            \n                Interface for a d3 axis entity\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        axis\n                                \n                                \n                                        group\n                                \n                                \n                                        labelGroup\n                                \n                                \n                                        tickGroup\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        axis\n                                    \n                                \n                                \n                                    \n                                        axis:     Axis\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Axis\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The d3 axis \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        group\n                                    \n                                \n                                \n                                    \n                                        group:         D3Selection\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         D3Selection\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The d3 group element for the axis \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        labelGroup\n                                    \n                                \n                                \n                                    \n                                        labelGroup:         D3Selection\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         D3Selection\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The d3 group element for the axis label \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tickGroup\n                                    \n                                \n                                \n                                    \n                                        tickGroup:         D3Selection\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         D3Selection\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The d3 group element for the axis ticks \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { BaseType } from \"d3\";\nimport { Axis } from \"d3-axis\";\nimport { Selection } from \"d3-selection\";\nimport { Subject } from \"rxjs\";\n\nimport { EventBus } from \"../common/event-bus\";\nimport { Lasagna } from \"../common/lasagna\";\nimport { ScalesIndex } from \"../common/scales/types\";\nimport { D3Selection, IChart, IChartEvent, IChartPlugin } from \"../common/types\";\n\n/**\n * Interface for defining aspects of the top, right, bottom, and left sides of a grid\n */\nexport interface IAllAround {\n    /** Object defining aspects of the top of an entity */\n    top: T;\n    /** Object defining aspects of the right side of an entity */\n    right: T;\n    /** Object defining aspects of the bottom of an entity */\n    bottom: T;\n    /** Object defining aspects of the left side of an entity */\n    left: T;\n}\n\n/**\n * The width and height of an grid\n */\nexport interface IDimensions {\n    width: number;\n    height: number;\n}\n\n/**\n * Configuration of grid dimensions\n */\nexport interface IDimensionConfig {\n    /** The top, right, bottom, and left margin sizes in pixels */\n    margin: IAllAround;\n    /** The top, right, bottom, and left padding sizes in pixels */\n    padding: IAllAround;\n    /** Sets whether the grid uses the chart's container to determine its width */\n    autoWidth: boolean;\n    /** Sets whether the grid uses the chart's container to determine its height */\n    autoHeight: boolean;\n    /** Set of booleans indicating whether a specific margin will be recalculated on chart dimension updates */\n    marginLocked?: IAllAround;\n    /**\n     * Sets the grid's width. Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid width\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    width(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- excluding margins.\n     *\n     * @returns {number} The grid's width\n     */\n    width(): number;\n    /**\n     * Sets the grid's height. Note: 'autoHeight' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid height\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    height(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- excluding margins.\n     *\n     * @returns {number} The grid's height\n     */\n    height(): number;\n    /**\n     * Sets the grid's width by subtracting the grid's horizontal margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new width plus the grid's horizontal margins\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerWidth(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- including horizontal margins.\n     *\n     * @returns {number} The grid's width plus horizontal margins\n     */\n    outerWidth(): number;\n    /**\n     * Sets the grid's height by subtracting the grid's vertical margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new height plus the grid's vertical margins     *\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerHeight(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- including vertical margins.\n     *\n     * @returns {number} The grid's height plus vertical margins\n     */\n    outerHeight(): number;\n}\n\n/**\n * Interface for defining the SVGElements forming the top, right, bottom, and left borders of an entity\n */\nexport interface IBorders extends IAllAround {\n}\n\n/**\n * Configuration of grid borders\n */\nexport interface IBorderConfig {\n    /** The stroke color */\n    color?: string;\n    /** The thickness of the border */\n    width?: number;\n    /** The class name */\n    className?: string;\n    /** Boolean indicating whether the border should be visible */\n    visible?: boolean;\n}\n\nexport interface ITextOverflowArgs {\n    widthLimit: number;\n    horizontalPadding: number;\n    ellipsisWidth: number;\n}\n\n/** Type for tick overflow handler */\nexport type TextOverflowHandler = (textSelection: Selection, args: ITextOverflowArgs) => void;\n\n/** Interface representing the configuration for tick labels */\nexport interface ITickLabelConfig {\n    /**\n     * Padding for left and right sides of label used for calculating text overflow limits\n     * (number represents the padding on each side)\n     */\n    horizontalPadding: number;\n    /** Handler for text overflow. Set to 'undefined' to disable overflow handling */\n    overflowHandler?: TextOverflowHandler;\n    /**\n     * Setting this insures the label's width is smaller or equal to the provided number\n     */\n    maxWidth?: number;\n}\n\n/** Configuration of a grid axis */\nexport interface IAxisConfig {\n    /** Boolean indicating whether the axis should be visible */\n    visible: boolean;\n    /** The approximate number of ticks to display */\n    approximateTicks: number;\n    /** Boolean indicating whether grid ticks should be displayed */\n    gridTicks: boolean;\n    /** The length of the ticks in pixels */\n    tickSize: number;\n    /** Configuration for the tick labels */\n    tickLabel: ITickLabelConfig;\n    /** Sets whether to fit the grid margins to the axis labels */\n    fit: boolean;\n    /** Sets the axis padding */\n    padding: number;\n}\n\n/**\n * Basic grid configuration\n */\nexport interface IGridConfig {\n    /** Boolean indicating whether the grid will respond to mouse events */\n    interactive: boolean;\n    /** Configuration for the grid's dimensions */\n    dimension: IDimensionConfig;\n    /** Configuration for the grid's borders */\n    borders: IAllAround;\n    /** String indicating the desired cursor style */\n    cursor: string;\n}\n\n/**\n * Configuration for an XYGrid\n */\nexport interface IXYGridConfig extends IGridConfig {\n    /** The IAllAround value for the grid's axis configurations */\n    axis: IAllAround;\n\n    /**\n     * Add interaction line and label plugins automatically\n     * Note: This was added to prevent a breaking change. We should avoid this kind of option in future\n     * versions of IXYGridConfig because ideally all plugins should be added manually (NUI-3304).\n     */\n    interactionPlugins: boolean;\n}\n\n/**\n * The basic interface for a grid's dimensions, scaling, interaction, and borders\n *\n * @interface\n */\nexport interface IGrid {\n    /** The grid scales\n     *\n     * @type {ScalesIndex}\n     */\n    scales: ScalesIndex;\n\n    /**\n     * Subject for indicating that the chart's dimensions should be updated\n     */\n    updateChartDimensionsSubject?: Subject;\n\n    /**\n     * Chart event bus\n     */\n    eventBus: EventBus;\n\n    /**\n     * Provides access to the grid's layering mechanism\n     *\n     * @returns {Lasagna} The grid's layering mechanism\n     */\n    getLasagna(): Lasagna;\n\n    /**\n     * Provides access to the grid's interactive area\n     *\n     * @returns {D3Selection} The grid's interactive area\n     */\n    getInteractiveArea(): D3Selection;\n\n    /**\n     * getter for the grid's target d3 selection\n     *\n     * @returns {D3Selection} The grid's target d3 selection\n     */\n    target(): D3Selection;\n\n    /**\n     * setter for the grid's target d3 selection\n     *\n     * @param {D3Selection} [target] The grid's new target d3 selection\n     * @returns {IGrid} The grid instance\n     */\n    target(target: D3Selection): IGrid;\n    target(target: D3Selection): D3Selection | IGrid;\n\n    /**\n     * getter for the grid configuration\n     *\n     * @returns {IGridConfig} The grid configuration\n     */\n    config(): IGridConfig;\n\n    /**\n     * setter for the grid configuration\n     *\n     * @param {IGridConfig} config The new grid configuration\n     * @returns {this} The grid instance\n     */\n    config(config: IGridConfig): this;\n\n    /**\n     * Builds the grid's rendered elements\n     *\n     * @returns {IGrid} The grid instance\n     */\n    build(): IGrid;\n\n    /**\n     * Updates the grid's rendered elements based on the current scales and configuration\n     *\n     * @returns {IGrid} The grid instance\n     */\n    update(): IGrid;\n\n    /**\n     * Updates the grid's dimensions as specified\n     *\n     * @param {Partial} dimensions The new grid dimensions\n     * @returns {IGrid} The grid instance\n     */\n    updateDimensions(dimensions: Partial): IGrid;\n\n    /**\n     * Updates the ranges on the grid's scales based on the grid's configured dimensions\n     *\n     * @returns {IGrid} The grid instance\n     */\n    updateRanges(): IGrid;\n\n    /**\n     * Builds the grid's plugins\n     *\n     * @returns {IChartPlugin[]} The set of generated plugins\n     */\n    buildPlugins(chart: IChart): IChartPlugin[];\n}\n\n/**\n * Interface for a d3 axis entity\n */\nexport interface IAxis {\n    /** The d3 group element for the axis label */\n    labelGroup: D3Selection;\n    /** The d3 group element for the axis ticks */\n    tickGroup: D3Selection;\n    /** The d3 group element for the axis */\n    group: D3Selection;\n    /** The d3 axis */\n    axis: Axis;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAxisConfig.html":{"url":"interfaces/IAxisConfig.html","title":"interface - IAxisConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IAxisConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/types.ts\n        \n\n            \n                Description\n            \n            \n                Configuration of a grid axis \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        approximateTicks\n                                \n                                \n                                        fit\n                                \n                                \n                                        gridTicks\n                                \n                                \n                                        padding\n                                \n                                \n                                        tickLabel\n                                \n                                \n                                        tickSize\n                                \n                                \n                                        visible\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        approximateTicks\n                                    \n                                \n                                \n                                    \n                                        approximateTicks:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The approximate number of ticks to display \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fit\n                                    \n                                \n                                \n                                    \n                                        fit:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Sets whether to fit the grid margins to the axis labels \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        gridTicks\n                                    \n                                \n                                \n                                    \n                                        gridTicks:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Boolean indicating whether grid ticks should be displayed \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        padding\n                                    \n                                \n                                \n                                    \n                                        padding:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Sets the axis padding \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tickLabel\n                                    \n                                \n                                \n                                    \n                                        tickLabel:         ITickLabelConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ITickLabelConfig\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Configuration for the tick labels \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tickSize\n                                    \n                                \n                                \n                                    \n                                        tickSize:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The length of the ticks in pixels \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        visible\n                                    \n                                \n                                \n                                    \n                                        visible:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Boolean indicating whether the axis should be visible \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { BaseType } from \"d3\";\nimport { Axis } from \"d3-axis\";\nimport { Selection } from \"d3-selection\";\nimport { Subject } from \"rxjs\";\n\nimport { EventBus } from \"../common/event-bus\";\nimport { Lasagna } from \"../common/lasagna\";\nimport { ScalesIndex } from \"../common/scales/types\";\nimport { D3Selection, IChart, IChartEvent, IChartPlugin } from \"../common/types\";\n\n/**\n * Interface for defining aspects of the top, right, bottom, and left sides of a grid\n */\nexport interface IAllAround {\n    /** Object defining aspects of the top of an entity */\n    top: T;\n    /** Object defining aspects of the right side of an entity */\n    right: T;\n    /** Object defining aspects of the bottom of an entity */\n    bottom: T;\n    /** Object defining aspects of the left side of an entity */\n    left: T;\n}\n\n/**\n * The width and height of an grid\n */\nexport interface IDimensions {\n    width: number;\n    height: number;\n}\n\n/**\n * Configuration of grid dimensions\n */\nexport interface IDimensionConfig {\n    /** The top, right, bottom, and left margin sizes in pixels */\n    margin: IAllAround;\n    /** The top, right, bottom, and left padding sizes in pixels */\n    padding: IAllAround;\n    /** Sets whether the grid uses the chart's container to determine its width */\n    autoWidth: boolean;\n    /** Sets whether the grid uses the chart's container to determine its height */\n    autoHeight: boolean;\n    /** Set of booleans indicating whether a specific margin will be recalculated on chart dimension updates */\n    marginLocked?: IAllAround;\n    /**\n     * Sets the grid's width. Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid width\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    width(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- excluding margins.\n     *\n     * @returns {number} The grid's width\n     */\n    width(): number;\n    /**\n     * Sets the grid's height. Note: 'autoHeight' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid height\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    height(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- excluding margins.\n     *\n     * @returns {number} The grid's height\n     */\n    height(): number;\n    /**\n     * Sets the grid's width by subtracting the grid's horizontal margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new width plus the grid's horizontal margins\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerWidth(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- including horizontal margins.\n     *\n     * @returns {number} The grid's width plus horizontal margins\n     */\n    outerWidth(): number;\n    /**\n     * Sets the grid's height by subtracting the grid's vertical margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new height plus the grid's vertical margins     *\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerHeight(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- including vertical margins.\n     *\n     * @returns {number} The grid's height plus vertical margins\n     */\n    outerHeight(): number;\n}\n\n/**\n * Interface for defining the SVGElements forming the top, right, bottom, and left borders of an entity\n */\nexport interface IBorders extends IAllAround {\n}\n\n/**\n * Configuration of grid borders\n */\nexport interface IBorderConfig {\n    /** The stroke color */\n    color?: string;\n    /** The thickness of the border */\n    width?: number;\n    /** The class name */\n    className?: string;\n    /** Boolean indicating whether the border should be visible */\n    visible?: boolean;\n}\n\nexport interface ITextOverflowArgs {\n    widthLimit: number;\n    horizontalPadding: number;\n    ellipsisWidth: number;\n}\n\n/** Type for tick overflow handler */\nexport type TextOverflowHandler = (textSelection: Selection, args: ITextOverflowArgs) => void;\n\n/** Interface representing the configuration for tick labels */\nexport interface ITickLabelConfig {\n    /**\n     * Padding for left and right sides of label used for calculating text overflow limits\n     * (number represents the padding on each side)\n     */\n    horizontalPadding: number;\n    /** Handler for text overflow. Set to 'undefined' to disable overflow handling */\n    overflowHandler?: TextOverflowHandler;\n    /**\n     * Setting this insures the label's width is smaller or equal to the provided number\n     */\n    maxWidth?: number;\n}\n\n/** Configuration of a grid axis */\nexport interface IAxisConfig {\n    /** Boolean indicating whether the axis should be visible */\n    visible: boolean;\n    /** The approximate number of ticks to display */\n    approximateTicks: number;\n    /** Boolean indicating whether grid ticks should be displayed */\n    gridTicks: boolean;\n    /** The length of the ticks in pixels */\n    tickSize: number;\n    /** Configuration for the tick labels */\n    tickLabel: ITickLabelConfig;\n    /** Sets whether to fit the grid margins to the axis labels */\n    fit: boolean;\n    /** Sets the axis padding */\n    padding: number;\n}\n\n/**\n * Basic grid configuration\n */\nexport interface IGridConfig {\n    /** Boolean indicating whether the grid will respond to mouse events */\n    interactive: boolean;\n    /** Configuration for the grid's dimensions */\n    dimension: IDimensionConfig;\n    /** Configuration for the grid's borders */\n    borders: IAllAround;\n    /** String indicating the desired cursor style */\n    cursor: string;\n}\n\n/**\n * Configuration for an XYGrid\n */\nexport interface IXYGridConfig extends IGridConfig {\n    /** The IAllAround value for the grid's axis configurations */\n    axis: IAllAround;\n\n    /**\n     * Add interaction line and label plugins automatically\n     * Note: This was added to prevent a breaking change. We should avoid this kind of option in future\n     * versions of IXYGridConfig because ideally all plugins should be added manually (NUI-3304).\n     */\n    interactionPlugins: boolean;\n}\n\n/**\n * The basic interface for a grid's dimensions, scaling, interaction, and borders\n *\n * @interface\n */\nexport interface IGrid {\n    /** The grid scales\n     *\n     * @type {ScalesIndex}\n     */\n    scales: ScalesIndex;\n\n    /**\n     * Subject for indicating that the chart's dimensions should be updated\n     */\n    updateChartDimensionsSubject?: Subject;\n\n    /**\n     * Chart event bus\n     */\n    eventBus: EventBus;\n\n    /**\n     * Provides access to the grid's layering mechanism\n     *\n     * @returns {Lasagna} The grid's layering mechanism\n     */\n    getLasagna(): Lasagna;\n\n    /**\n     * Provides access to the grid's interactive area\n     *\n     * @returns {D3Selection} The grid's interactive area\n     */\n    getInteractiveArea(): D3Selection;\n\n    /**\n     * getter for the grid's target d3 selection\n     *\n     * @returns {D3Selection} The grid's target d3 selection\n     */\n    target(): D3Selection;\n\n    /**\n     * setter for the grid's target d3 selection\n     *\n     * @param {D3Selection} [target] The grid's new target d3 selection\n     * @returns {IGrid} The grid instance\n     */\n    target(target: D3Selection): IGrid;\n    target(target: D3Selection): D3Selection | IGrid;\n\n    /**\n     * getter for the grid configuration\n     *\n     * @returns {IGridConfig} The grid configuration\n     */\n    config(): IGridConfig;\n\n    /**\n     * setter for the grid configuration\n     *\n     * @param {IGridConfig} config The new grid configuration\n     * @returns {this} The grid instance\n     */\n    config(config: IGridConfig): this;\n\n    /**\n     * Builds the grid's rendered elements\n     *\n     * @returns {IGrid} The grid instance\n     */\n    build(): IGrid;\n\n    /**\n     * Updates the grid's rendered elements based on the current scales and configuration\n     *\n     * @returns {IGrid} The grid instance\n     */\n    update(): IGrid;\n\n    /**\n     * Updates the grid's dimensions as specified\n     *\n     * @param {Partial} dimensions The new grid dimensions\n     * @returns {IGrid} The grid instance\n     */\n    updateDimensions(dimensions: Partial): IGrid;\n\n    /**\n     * Updates the ranges on the grid's scales based on the grid's configured dimensions\n     *\n     * @returns {IGrid} The grid instance\n     */\n    updateRanges(): IGrid;\n\n    /**\n     * Builds the grid's plugins\n     *\n     * @returns {IChartPlugin[]} The set of generated plugins\n     */\n    buildPlugins(chart: IChart): IChartPlugin[];\n}\n\n/**\n * Interface for a d3 axis entity\n */\nexport interface IAxis {\n    /** The d3 group element for the axis label */\n    labelGroup: D3Selection;\n    /** The d3 group element for the axis ticks */\n    tickGroup: D3Selection;\n    /** The d3 group element for the axis */\n    group: D3Selection;\n    /** The d3 axis */\n    axis: Axis;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IBandScale.html":{"url":"interfaces/IBandScale.html","title":"interface - IBandScale","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IBandScale\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/scales/types.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IScale\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    bandwidth\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            bandwidth\n                        \n                        \n                    \n                \n            \n            \n                \nbandwidth()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/types.ts:146\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { AxisScale } from \"d3-axis\";\n\nimport { IAccessors, IChartSeries } from \"../types\";\n\n/** Domain for series with empty or null data */\nexport const EMPTY_CONTINUOUS_DOMAIN = [0, 0];\n/** A reasonable non-data-driven domain for charts  */\nexport const NORMALIZED_DOMAIN = [0, 1];\n\n/** Signature for domain calculator */\nexport type DomainCalculator = (chartSeriesSet: IChartSeries[], scaleId: string, scale: IScale) => any[];\n\n/** Interface for scale formatters */\nexport interface IFormatters {\n    /** Formatter for tick labels */\n    tick?: Formatter;\n    /** Additional formatters */\n    [p: string]: Formatter | undefined;\n}\n\n/** Signature for label formatters */\nexport type Formatter = (value: T) => string;\n\n/** Dictionary of scale collections in index and array form */\nexport interface ScalesIndex {\n    [key: string]: {\n        /** Scale collection as an index */\n        index: { [scaleId: string]: IScale };\n        /** Scale collection as an array */\n        list: IScale[];\n    };\n}\n\n/** Dictionary of scales */\nexport type Scales = Record>;\n\nexport interface IXYScales extends Scales {\n    x: IScale;\n    y: IScale;\n}\n\nexport interface IRadialScales extends Scales {\n    r: IScale;\n}\n\n/** Interface for a scale */\nexport interface IScale {\n    /** The scale identifier */\n    readonly id: string;\n    readonly d3Scale: AxisScale; // TODO: maybe AxisScale is to narrow?\n\n    /** If this flag is enabled, the domain of this scale is not recalculated */\n    isDomainFixed?: boolean;\n    /** Method used to calculate the scale's domain */\n    domainCalculator?: DomainCalculator;\n    /** The scales formatters */\n    formatters: IFormatters;\n    /** If this flag is enabled, the domain has been recalculated with ticks in mind */\n    __domainCalculatedWithTicks?: boolean;\n\n    /**\n     * Determines if the scale's domain is continuous\n     *\n     * @returns {boolean} true if the scale's domain is continuous (numeric), false otherwise\n     */\n    isContinuous(): boolean;\n\n    /**\n     * Determines if the scale's domain is valid\n     *\n     * @returns {boolean} true if the scale's domain is valid, false otherwise\n     */\n    isDomainValid(): boolean;\n\n    /**\n     * Converts a value to its corresponding coordinate\n     *\n     * @param {T} value The value to be converted\n     * @returns {number} The coordinate corresponding to the specified value\n     */\n    convert(value: T): number;\n\n    /**\n     * Converts a coordinate to its corresponding value\n     *\n     * @param {number} coordinate The coordinate to be converted\n     * @returns {T} The value corresponding to the specified coordinate\n     */\n    invert(coordinate: number): T | undefined;\n\n    /**\n     * Gets the scale's range\n     *\n     * @returns {[number, number]} The scale's range\n     */\n    range(): [number, number];\n\n    /**\n     * Sets the scale's range\n     *\n     * @param {[number, number]} range The scale's new range\n     */\n    range(range: [number, number]): this;\n\n    /**\n     * Gets the scale's domain\n     *\n     * @returns {T[]} The scale's domain\n     */\n    domain(): T[];\n\n    /**\n     * Sets the scale's domain\n     *\n     * @param {T[]} domain The scale's new domain\n     */\n    domain(domain: T[]): this;\n\n    /**\n     * Shorthand method for setting the domain and isDomainFixed at once\n     *\n     * @param {T[]} domain The scale's fixed domain\n     */\n    fixDomain(domain: T[]): void;\n\n    /**\n     * Reverse the scale orientation by toggling the reversed flag\n     */\n    reverse(): this;\n\n    /**\n     * Getter for the reversed flag (see #reverse)\n     */\n    reversed(): boolean;\n\n    /**\n     * Setter for the reversed flag (see #reverse)\n     *\n     * @param reversed\n     */\n    reversed(reversed: boolean): this;\n}\n\n\nexport interface IBandScale extends IScale {\n    bandwidth(): number;\n}\n\nexport function isBandScale(scale: any): scale is IBandScale {\n    return typeof scale.bandwidth === \"function\";\n}\n\nexport interface IHasInnerScale extends IScale {\n    innerScale: IScale;\n}\n\nexport function hasInnerScale(scale: any): scale is IHasInnerScale {\n    return typeof scale.innerScale !== \"undefined\";\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IBarAccessors.html":{"url":"interfaces/IBarAccessors.html","title":"interface - IBarAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IBarAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/bar/accessors/bar-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                                \n                                        series\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         IBarDataAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IBarDataAccessors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        series\n                                    \n                                \n                                \n                                    \n                                        series:         IRectangleSeriesAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IRectangleSeriesAccessors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { defaultColorProvider, defaultMarkerProvider } from \"../../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, IDataSeries } from \"../../../core/common/types\";\nimport { IRectangleDataAccessors, IRectangleSeriesAccessors, RectangleAccessors } from \"../../accessors/rectangle-accessors\";\n\nexport interface IBarDataAccessors extends IRectangleDataAccessors {\n    category: DataAccessor;\n    start: DataAccessor;\n    end: DataAccessor;\n    thickness?: DataAccessor;\n    value?: DataAccessor;\n    color?: DataAccessor;\n    marker?: DataAccessor;\n    cssClass?: DataAccessor;\n}\n\nexport interface IBarAccessors extends IAccessors {\n    data: IBarDataAccessors;\n    series: IRectangleSeriesAccessors;\n}\n\nexport abstract class BarAccessors extends RectangleAccessors implements IBarAccessors {\n    data: IBarDataAccessors;\n    series: IRectangleSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider(), private markerProvider = defaultMarkerProvider()) {\n        super();\n\n        this.data = {\n            value: (data: any) => data.value,\n            category: (d, i, series: any[], dataSeries: IDataSeries) => {\n                if (d.category) {\n                    return d.category;\n                }\n\n                if (this.series.category) {\n                    return this.series.category(dataSeries.id, dataSeries);\n                }\n\n                return null;\n            },\n            start: (data: any, index: number, series: any[], dataSeries: IDataSeries) => {\n                if (data.__bar) {\n                    return data.__bar.start;\n                }\n                if (typeof data.start !== \"undefined\") {\n                    return data.start;\n                }\n\n                const value = this.getSingleValue(data, index, series, dataSeries);\n                if (Number.isFinite(value)) {\n                    return Math.min(0, value);\n                }\n\n                return null;\n            },\n            end: (data: any, index: number, series: any[], dataSeries: IDataSeries) => {\n                if (data.__bar) {\n                    return data.__bar.end;\n                }\n                if (typeof data.end !== \"undefined\") {\n                    return data.end;\n                }\n\n                const value = this.getSingleValue(data, index, series, dataSeries);\n                if (Number.isFinite(value)) {\n                    return Math.max(0, value);\n                }\n\n                return null;\n            },\n        };\n\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n            marker: this.markerProvider ? this.markerProvider.get : undefined,\n            category: (seriesId, series) => series.name || series.id,\n        };\n\n    }\n\n    private getSingleValue(data: any, index: number, series: any[], dataSeries: IDataSeries) {\n        let value: any;\n        if (this.data.value) {\n            // try to use the value accessor to retrieve value\n            value = this.data.value(data, index, series, dataSeries);\n            // if it fails to retrieve a valid value, then we consider the data point to be a primitive value that is returned directly\n            if (typeof value === \"undefined\") {\n                value = data;\n            }\n        }\n        return value;\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IBarChartConfig.html":{"url":"interfaces/IBarChartConfig.html","title":"interface - IBarChartConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IBarChartConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/bar/types.ts\n        \n\n            \n                Description\n            \n            \n                Configuration for bar charts\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        grouped\n                                \n                                \n                                            Optional\n                                        horizontal\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        grouped\n                                    \n                                \n                                \n                                    \n                                        grouped:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        horizontal\n                                    \n                                \n                                \n                                    \n                                        horizontal:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IBarChartConfig {\n    horizontal?: boolean;\n    grouped?: boolean;\n}\n\nexport interface IStackMetadata {\n    start: number;\n    end: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IBarDataAccessors.html":{"url":"interfaces/IBarDataAccessors.html","title":"interface - IBarDataAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IBarDataAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/bar/accessors/bar-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IRectangleDataAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        category\n                                \n                                \n                                            Optional\n                                        color\n                                \n                                \n                                            Optional\n                                        cssClass\n                                \n                                \n                                        end\n                                \n                                \n                                            Optional\n                                        marker\n                                \n                                \n                                        start\n                                \n                                \n                                            Optional\n                                        thickness\n                                \n                                \n                                            Optional\n                                        value\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        category\n                                    \n                                \n                                \n                                    \n                                        category:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                    \n                                \n                                \n                                    \n                                        color:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cssClass\n                                    \n                                \n                                \n                                    \n                                        cssClass:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        end\n                                    \n                                \n                                \n                                    \n                                        end:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        marker\n                                    \n                                \n                                \n                                    \n                                        marker:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        start\n                                    \n                                \n                                \n                                    \n                                        start:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        thickness\n                                    \n                                \n                                \n                                    \n                                        thickness:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                    \n                                \n                                \n                                    \n                                        value:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { defaultColorProvider, defaultMarkerProvider } from \"../../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, IDataSeries } from \"../../../core/common/types\";\nimport { IRectangleDataAccessors, IRectangleSeriesAccessors, RectangleAccessors } from \"../../accessors/rectangle-accessors\";\n\nexport interface IBarDataAccessors extends IRectangleDataAccessors {\n    category: DataAccessor;\n    start: DataAccessor;\n    end: DataAccessor;\n    thickness?: DataAccessor;\n    value?: DataAccessor;\n    color?: DataAccessor;\n    marker?: DataAccessor;\n    cssClass?: DataAccessor;\n}\n\nexport interface IBarAccessors extends IAccessors {\n    data: IBarDataAccessors;\n    series: IRectangleSeriesAccessors;\n}\n\nexport abstract class BarAccessors extends RectangleAccessors implements IBarAccessors {\n    data: IBarDataAccessors;\n    series: IRectangleSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider(), private markerProvider = defaultMarkerProvider()) {\n        super();\n\n        this.data = {\n            value: (data: any) => data.value,\n            category: (d, i, series: any[], dataSeries: IDataSeries) => {\n                if (d.category) {\n                    return d.category;\n                }\n\n                if (this.series.category) {\n                    return this.series.category(dataSeries.id, dataSeries);\n                }\n\n                return null;\n            },\n            start: (data: any, index: number, series: any[], dataSeries: IDataSeries) => {\n                if (data.__bar) {\n                    return data.__bar.start;\n                }\n                if (typeof data.start !== \"undefined\") {\n                    return data.start;\n                }\n\n                const value = this.getSingleValue(data, index, series, dataSeries);\n                if (Number.isFinite(value)) {\n                    return Math.min(0, value);\n                }\n\n                return null;\n            },\n            end: (data: any, index: number, series: any[], dataSeries: IDataSeries) => {\n                if (data.__bar) {\n                    return data.__bar.end;\n                }\n                if (typeof data.end !== \"undefined\") {\n                    return data.end;\n                }\n\n                const value = this.getSingleValue(data, index, series, dataSeries);\n                if (Number.isFinite(value)) {\n                    return Math.max(0, value);\n                }\n\n                return null;\n            },\n        };\n\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n            marker: this.markerProvider ? this.markerProvider.get : undefined,\n            category: (seriesId, series) => series.name || series.id,\n        };\n\n    }\n\n    private getSingleValue(data: any, index: number, series: any[], dataSeries: IDataSeries) {\n        let value: any;\n        if (this.data.value) {\n            // try to use the value accessor to retrieve value\n            value = this.data.value(data, index, series, dataSeries);\n            // if it fails to retrieve a valid value, then we consider the data point to be a primitive value that is returned directly\n            if (typeof value === \"undefined\") {\n                value = data;\n            }\n        }\n        return value;\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IBarRendererConfig.html":{"url":"interfaces/IBarRendererConfig.html","title":"interface - IBarRendererConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IBarRendererConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/types.ts\n        \n\n            \n                Description\n            \n            \n                The configuration interface for the bar renderer \n\n            \n\n            \n                Extends\n            \n            \n                        IRendererConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        barClass\n                                \n                                \n                                            Optional\n                                        cursor\n                                \n                                \n                                            Optional\n                                        enableMinBarThickness\n                                \n                                \n                                            Optional\n                                        highlightStrategy\n                                \n                                \n                                            Optional\n                                        padding\n                                \n                                \n                                            Optional\n                                        pointerEvents\n                                \n                                \n                                            Optional\n                                        strokeWidth\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        barClass\n                                    \n                                \n                                \n                                    \n                                        barClass:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the class name to apply custom styles to the bars \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cursor\n                                    \n                                \n                                \n                                    \n                                        cursor:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the mouse cursor style to use when hovering over individual bars \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enableMinBarThickness\n                                    \n                                \n                                \n                                    \n                                        enableMinBarThickness:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Enable the minimum bar thickness (BarRenderer.MIN_BAR_THICKNESS) \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        highlightStrategy\n                                    \n                                \n                                \n                                    \n                                        highlightStrategy:     IHighlightStrategy\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     IHighlightStrategy\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. BarHighlightStrategy \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        padding\n                                    \n                                \n                                \n                                    \n                                        padding:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the padding on both sides of each bar \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pointerEvents\n                                    \n                                \n                                \n                                    \n                                        pointerEvents:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Enables pointer events on the bars \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        strokeWidth\n                                    \n                                \n                                \n                                    \n                                        strokeWidth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the stroke width in pixels \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { CurveFactory } from \"d3-shape\";\nimport { Subject } from \"rxjs\";\n\nimport { Renderer } from \"../core/common/renderer\";\nimport { Scales } from \"../core/common/scales/types\";\nimport { IAccessors, IDataSeries, IRenderContainers, IRendererConfig, IRendererEventPayload } from \"../core/common/types\";\n\nimport { IRectangleAccessors } from \"./accessors/rectangle-accessors\";\nimport { BarRenderer } from \"./bar/bar-renderer\";\nimport { ILineAccessors } from \"./line/line-accessors\";\nimport { LineRenderer } from \"./line/line-renderer\";\n\nexport enum RenderState {\n    hidden = \"hidden\",\n    deemphasized = \"deemphasized\",\n    emphasized = \"emphasized\",\n    default = \"default\",\n}\n\nexport enum RenderLayerName {\n    background = \"background\",\n    data = \"data\",\n    unclippedData = \"unclipped-data\",\n    foreground = \"foreground\",\n}\n\n/** The configuration interface for marker interaction */\nexport interface IMarkerInteractionConfig {\n    /** Enables mouse events on data point markers */\n    enabled: boolean;\n    /** Enables the pointer style mouse cursor when data point markers are hovered */\n    clickable?: boolean;\n}\n\n/** The configuration interface for the enhanced line caps */\nexport interface IEnhancedLineCapConfig {\n    /** Set the stroke color */\n    stroke?: string;\n    /** Set the stroke width in pixels */\n    strokeWidth?: number;\n    /** Set the fill color */\n    fill?: string;\n    /** Set the radius in pixels */\n    radius?: number;\n}\n\n/** The configuration interface for the line renderer */\nexport interface ILineRendererConfig extends IRendererConfig {\n    /** Set the width of the line in pixels */\n    strokeWidth?: number;\n    /** Set the stroke-dasharray of the line, e.g. \"1,1\", \"2,2\", etc. */\n    strokeStyle?: string;\n    /** Set the stroke-linecap of the line, e.g. \"round\" */\n    strokeLinecap?: string;\n    /** Set the d3 curve algorithm to be used for drawing the lines */\n    curveType?: CurveFactory;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. LineSelectSeriesInteractionStrategy */\n    interactionStrategy?: IHighlightStrategy;\n    /** Configure the interaction behavior for markers */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** Set whether enhanced line caps should be displayed */\n    useEnhancedLineCaps?: boolean;\n    /** Optionally configure enhanced line caps. Prerequisite: 'useEnhancedLineCaps' is set to true */\n    enhancedLineCap?: IEnhancedLineCapConfig;\n}\n\n/** The configuration interface for the bar renderer */\nexport interface IBarRendererConfig extends IRendererConfig {\n    /** Set the padding on both sides of each bar */\n    padding?: number;\n    /** Set the class name to apply custom styles to the bars */\n    barClass?: string;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. BarHighlightStrategy */\n    highlightStrategy?: IHighlightStrategy;\n    /** Set the mouse cursor style to use when hovering over individual bars */\n    cursor?: string;\n    /** Enables pointer events on the bars */\n    pointerEvents?: boolean;\n    /** Set the stroke width in pixels */\n    strokeWidth?: number;\n    /** Enable the minimum bar thickness (BarRenderer.MIN_BAR_THICKNESS) */\n    enableMinBarThickness?: boolean;\n}\n\n/** The configuration interface for the area renderer */\nexport interface IAreaRendererConfig extends IRendererConfig {\n    /** Set the d3 curve algorithm to be used for drawing the area boundaries */\n    curveType?: CurveFactory;\n    /** Set the class name to apply custom styles to the areas */\n    areaClass?: string;\n    /** Enables the pointer cursor when data point markers are hovered */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** The width of the area path's stroke in pixels. Default is 1. */\n    strokeWidth?: number;\n}\n\nexport interface IRenderSeries {\n    dataSeries: IDataSeries;\n    containers: IRenderContainers;\n    scales: Scales;\n}\n\nexport interface IHighlightStrategy> {\n\n    getDataPointIndex(renderer: T, series: IDataSeries, values: { [p: string]: any }, scales: Scales): number;\n\n    highlightDataPoint(renderer: T, renderSeries: IRenderSeries,\n                       dataPointIndex: number, rendererSubject: Subject): void;\n\n    draw(renderer: T, renderSeries: IRenderSeries, rendererSubject: Subject): void;\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IBorderConfig.html":{"url":"interfaces/IBorderConfig.html","title":"interface - IBorderConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IBorderConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/types.ts\n        \n\n            \n                Description\n            \n            \n                Configuration of grid borders\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        className\n                                \n                                \n                                            Optional\n                                        color\n                                \n                                \n                                            Optional\n                                        visible\n                                \n                                \n                                            Optional\n                                        width\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        className\n                                    \n                                \n                                \n                                    \n                                        className:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The class name \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                    \n                                \n                                \n                                    \n                                        color:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The stroke color \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        visible\n                                    \n                                \n                                \n                                    \n                                        visible:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Boolean indicating whether the border should be visible \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                    \n                                \n                                \n                                    \n                                        width:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The thickness of the border \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { BaseType } from \"d3\";\nimport { Axis } from \"d3-axis\";\nimport { Selection } from \"d3-selection\";\nimport { Subject } from \"rxjs\";\n\nimport { EventBus } from \"../common/event-bus\";\nimport { Lasagna } from \"../common/lasagna\";\nimport { ScalesIndex } from \"../common/scales/types\";\nimport { D3Selection, IChart, IChartEvent, IChartPlugin } from \"../common/types\";\n\n/**\n * Interface for defining aspects of the top, right, bottom, and left sides of a grid\n */\nexport interface IAllAround {\n    /** Object defining aspects of the top of an entity */\n    top: T;\n    /** Object defining aspects of the right side of an entity */\n    right: T;\n    /** Object defining aspects of the bottom of an entity */\n    bottom: T;\n    /** Object defining aspects of the left side of an entity */\n    left: T;\n}\n\n/**\n * The width and height of an grid\n */\nexport interface IDimensions {\n    width: number;\n    height: number;\n}\n\n/**\n * Configuration of grid dimensions\n */\nexport interface IDimensionConfig {\n    /** The top, right, bottom, and left margin sizes in pixels */\n    margin: IAllAround;\n    /** The top, right, bottom, and left padding sizes in pixels */\n    padding: IAllAround;\n    /** Sets whether the grid uses the chart's container to determine its width */\n    autoWidth: boolean;\n    /** Sets whether the grid uses the chart's container to determine its height */\n    autoHeight: boolean;\n    /** Set of booleans indicating whether a specific margin will be recalculated on chart dimension updates */\n    marginLocked?: IAllAround;\n    /**\n     * Sets the grid's width. Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid width\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    width(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- excluding margins.\n     *\n     * @returns {number} The grid's width\n     */\n    width(): number;\n    /**\n     * Sets the grid's height. Note: 'autoHeight' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid height\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    height(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- excluding margins.\n     *\n     * @returns {number} The grid's height\n     */\n    height(): number;\n    /**\n     * Sets the grid's width by subtracting the grid's horizontal margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new width plus the grid's horizontal margins\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerWidth(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- including horizontal margins.\n     *\n     * @returns {number} The grid's width plus horizontal margins\n     */\n    outerWidth(): number;\n    /**\n     * Sets the grid's height by subtracting the grid's vertical margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new height plus the grid's vertical margins     *\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerHeight(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- including vertical margins.\n     *\n     * @returns {number} The grid's height plus vertical margins\n     */\n    outerHeight(): number;\n}\n\n/**\n * Interface for defining the SVGElements forming the top, right, bottom, and left borders of an entity\n */\nexport interface IBorders extends IAllAround {\n}\n\n/**\n * Configuration of grid borders\n */\nexport interface IBorderConfig {\n    /** The stroke color */\n    color?: string;\n    /** The thickness of the border */\n    width?: number;\n    /** The class name */\n    className?: string;\n    /** Boolean indicating whether the border should be visible */\n    visible?: boolean;\n}\n\nexport interface ITextOverflowArgs {\n    widthLimit: number;\n    horizontalPadding: number;\n    ellipsisWidth: number;\n}\n\n/** Type for tick overflow handler */\nexport type TextOverflowHandler = (textSelection: Selection, args: ITextOverflowArgs) => void;\n\n/** Interface representing the configuration for tick labels */\nexport interface ITickLabelConfig {\n    /**\n     * Padding for left and right sides of label used for calculating text overflow limits\n     * (number represents the padding on each side)\n     */\n    horizontalPadding: number;\n    /** Handler for text overflow. Set to 'undefined' to disable overflow handling */\n    overflowHandler?: TextOverflowHandler;\n    /**\n     * Setting this insures the label's width is smaller or equal to the provided number\n     */\n    maxWidth?: number;\n}\n\n/** Configuration of a grid axis */\nexport interface IAxisConfig {\n    /** Boolean indicating whether the axis should be visible */\n    visible: boolean;\n    /** The approximate number of ticks to display */\n    approximateTicks: number;\n    /** Boolean indicating whether grid ticks should be displayed */\n    gridTicks: boolean;\n    /** The length of the ticks in pixels */\n    tickSize: number;\n    /** Configuration for the tick labels */\n    tickLabel: ITickLabelConfig;\n    /** Sets whether to fit the grid margins to the axis labels */\n    fit: boolean;\n    /** Sets the axis padding */\n    padding: number;\n}\n\n/**\n * Basic grid configuration\n */\nexport interface IGridConfig {\n    /** Boolean indicating whether the grid will respond to mouse events */\n    interactive: boolean;\n    /** Configuration for the grid's dimensions */\n    dimension: IDimensionConfig;\n    /** Configuration for the grid's borders */\n    borders: IAllAround;\n    /** String indicating the desired cursor style */\n    cursor: string;\n}\n\n/**\n * Configuration for an XYGrid\n */\nexport interface IXYGridConfig extends IGridConfig {\n    /** The IAllAround value for the grid's axis configurations */\n    axis: IAllAround;\n\n    /**\n     * Add interaction line and label plugins automatically\n     * Note: This was added to prevent a breaking change. We should avoid this kind of option in future\n     * versions of IXYGridConfig because ideally all plugins should be added manually (NUI-3304).\n     */\n    interactionPlugins: boolean;\n}\n\n/**\n * The basic interface for a grid's dimensions, scaling, interaction, and borders\n *\n * @interface\n */\nexport interface IGrid {\n    /** The grid scales\n     *\n     * @type {ScalesIndex}\n     */\n    scales: ScalesIndex;\n\n    /**\n     * Subject for indicating that the chart's dimensions should be updated\n     */\n    updateChartDimensionsSubject?: Subject;\n\n    /**\n     * Chart event bus\n     */\n    eventBus: EventBus;\n\n    /**\n     * Provides access to the grid's layering mechanism\n     *\n     * @returns {Lasagna} The grid's layering mechanism\n     */\n    getLasagna(): Lasagna;\n\n    /**\n     * Provides access to the grid's interactive area\n     *\n     * @returns {D3Selection} The grid's interactive area\n     */\n    getInteractiveArea(): D3Selection;\n\n    /**\n     * getter for the grid's target d3 selection\n     *\n     * @returns {D3Selection} The grid's target d3 selection\n     */\n    target(): D3Selection;\n\n    /**\n     * setter for the grid's target d3 selection\n     *\n     * @param {D3Selection} [target] The grid's new target d3 selection\n     * @returns {IGrid} The grid instance\n     */\n    target(target: D3Selection): IGrid;\n    target(target: D3Selection): D3Selection | IGrid;\n\n    /**\n     * getter for the grid configuration\n     *\n     * @returns {IGridConfig} The grid configuration\n     */\n    config(): IGridConfig;\n\n    /**\n     * setter for the grid configuration\n     *\n     * @param {IGridConfig} config The new grid configuration\n     * @returns {this} The grid instance\n     */\n    config(config: IGridConfig): this;\n\n    /**\n     * Builds the grid's rendered elements\n     *\n     * @returns {IGrid} The grid instance\n     */\n    build(): IGrid;\n\n    /**\n     * Updates the grid's rendered elements based on the current scales and configuration\n     *\n     * @returns {IGrid} The grid instance\n     */\n    update(): IGrid;\n\n    /**\n     * Updates the grid's dimensions as specified\n     *\n     * @param {Partial} dimensions The new grid dimensions\n     * @returns {IGrid} The grid instance\n     */\n    updateDimensions(dimensions: Partial): IGrid;\n\n    /**\n     * Updates the ranges on the grid's scales based on the grid's configured dimensions\n     *\n     * @returns {IGrid} The grid instance\n     */\n    updateRanges(): IGrid;\n\n    /**\n     * Builds the grid's plugins\n     *\n     * @returns {IChartPlugin[]} The set of generated plugins\n     */\n    buildPlugins(chart: IChart): IChartPlugin[];\n}\n\n/**\n * Interface for a d3 axis entity\n */\nexport interface IAxis {\n    /** The d3 group element for the axis label */\n    labelGroup: D3Selection;\n    /** The d3 group element for the axis ticks */\n    tickGroup: D3Selection;\n    /** The d3 group element for the axis */\n    group: D3Selection;\n    /** The d3 axis */\n    axis: Axis;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IBorders.html":{"url":"interfaces/IBorders.html","title":"interface - IBorders","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IBorders\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/types.ts\n        \n\n            \n                Description\n            \n            \n                Interface for defining the SVGElements forming the top, right, bottom, and left borders of an entity\n\n            \n\n            \n                Extends\n            \n            \n                        IAllAround\n            \n\n\n\n\n    \n\n\n    \n        import { BaseType } from \"d3\";\nimport { Axis } from \"d3-axis\";\nimport { Selection } from \"d3-selection\";\nimport { Subject } from \"rxjs\";\n\nimport { EventBus } from \"../common/event-bus\";\nimport { Lasagna } from \"../common/lasagna\";\nimport { ScalesIndex } from \"../common/scales/types\";\nimport { D3Selection, IChart, IChartEvent, IChartPlugin } from \"../common/types\";\n\n/**\n * Interface for defining aspects of the top, right, bottom, and left sides of a grid\n */\nexport interface IAllAround {\n    /** Object defining aspects of the top of an entity */\n    top: T;\n    /** Object defining aspects of the right side of an entity */\n    right: T;\n    /** Object defining aspects of the bottom of an entity */\n    bottom: T;\n    /** Object defining aspects of the left side of an entity */\n    left: T;\n}\n\n/**\n * The width and height of an grid\n */\nexport interface IDimensions {\n    width: number;\n    height: number;\n}\n\n/**\n * Configuration of grid dimensions\n */\nexport interface IDimensionConfig {\n    /** The top, right, bottom, and left margin sizes in pixels */\n    margin: IAllAround;\n    /** The top, right, bottom, and left padding sizes in pixels */\n    padding: IAllAround;\n    /** Sets whether the grid uses the chart's container to determine its width */\n    autoWidth: boolean;\n    /** Sets whether the grid uses the chart's container to determine its height */\n    autoHeight: boolean;\n    /** Set of booleans indicating whether a specific margin will be recalculated on chart dimension updates */\n    marginLocked?: IAllAround;\n    /**\n     * Sets the grid's width. Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid width\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    width(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- excluding margins.\n     *\n     * @returns {number} The grid's width\n     */\n    width(): number;\n    /**\n     * Sets the grid's height. Note: 'autoHeight' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid height\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    height(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- excluding margins.\n     *\n     * @returns {number} The grid's height\n     */\n    height(): number;\n    /**\n     * Sets the grid's width by subtracting the grid's horizontal margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new width plus the grid's horizontal margins\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerWidth(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- including horizontal margins.\n     *\n     * @returns {number} The grid's width plus horizontal margins\n     */\n    outerWidth(): number;\n    /**\n     * Sets the grid's height by subtracting the grid's vertical margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new height plus the grid's vertical margins     *\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerHeight(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- including vertical margins.\n     *\n     * @returns {number} The grid's height plus vertical margins\n     */\n    outerHeight(): number;\n}\n\n/**\n * Interface for defining the SVGElements forming the top, right, bottom, and left borders of an entity\n */\nexport interface IBorders extends IAllAround {\n}\n\n/**\n * Configuration of grid borders\n */\nexport interface IBorderConfig {\n    /** The stroke color */\n    color?: string;\n    /** The thickness of the border */\n    width?: number;\n    /** The class name */\n    className?: string;\n    /** Boolean indicating whether the border should be visible */\n    visible?: boolean;\n}\n\nexport interface ITextOverflowArgs {\n    widthLimit: number;\n    horizontalPadding: number;\n    ellipsisWidth: number;\n}\n\n/** Type for tick overflow handler */\nexport type TextOverflowHandler = (textSelection: Selection, args: ITextOverflowArgs) => void;\n\n/** Interface representing the configuration for tick labels */\nexport interface ITickLabelConfig {\n    /**\n     * Padding for left and right sides of label used for calculating text overflow limits\n     * (number represents the padding on each side)\n     */\n    horizontalPadding: number;\n    /** Handler for text overflow. Set to 'undefined' to disable overflow handling */\n    overflowHandler?: TextOverflowHandler;\n    /**\n     * Setting this insures the label's width is smaller or equal to the provided number\n     */\n    maxWidth?: number;\n}\n\n/** Configuration of a grid axis */\nexport interface IAxisConfig {\n    /** Boolean indicating whether the axis should be visible */\n    visible: boolean;\n    /** The approximate number of ticks to display */\n    approximateTicks: number;\n    /** Boolean indicating whether grid ticks should be displayed */\n    gridTicks: boolean;\n    /** The length of the ticks in pixels */\n    tickSize: number;\n    /** Configuration for the tick labels */\n    tickLabel: ITickLabelConfig;\n    /** Sets whether to fit the grid margins to the axis labels */\n    fit: boolean;\n    /** Sets the axis padding */\n    padding: number;\n}\n\n/**\n * Basic grid configuration\n */\nexport interface IGridConfig {\n    /** Boolean indicating whether the grid will respond to mouse events */\n    interactive: boolean;\n    /** Configuration for the grid's dimensions */\n    dimension: IDimensionConfig;\n    /** Configuration for the grid's borders */\n    borders: IAllAround;\n    /** String indicating the desired cursor style */\n    cursor: string;\n}\n\n/**\n * Configuration for an XYGrid\n */\nexport interface IXYGridConfig extends IGridConfig {\n    /** The IAllAround value for the grid's axis configurations */\n    axis: IAllAround;\n\n    /**\n     * Add interaction line and label plugins automatically\n     * Note: This was added to prevent a breaking change. We should avoid this kind of option in future\n     * versions of IXYGridConfig because ideally all plugins should be added manually (NUI-3304).\n     */\n    interactionPlugins: boolean;\n}\n\n/**\n * The basic interface for a grid's dimensions, scaling, interaction, and borders\n *\n * @interface\n */\nexport interface IGrid {\n    /** The grid scales\n     *\n     * @type {ScalesIndex}\n     */\n    scales: ScalesIndex;\n\n    /**\n     * Subject for indicating that the chart's dimensions should be updated\n     */\n    updateChartDimensionsSubject?: Subject;\n\n    /**\n     * Chart event bus\n     */\n    eventBus: EventBus;\n\n    /**\n     * Provides access to the grid's layering mechanism\n     *\n     * @returns {Lasagna} The grid's layering mechanism\n     */\n    getLasagna(): Lasagna;\n\n    /**\n     * Provides access to the grid's interactive area\n     *\n     * @returns {D3Selection} The grid's interactive area\n     */\n    getInteractiveArea(): D3Selection;\n\n    /**\n     * getter for the grid's target d3 selection\n     *\n     * @returns {D3Selection} The grid's target d3 selection\n     */\n    target(): D3Selection;\n\n    /**\n     * setter for the grid's target d3 selection\n     *\n     * @param {D3Selection} [target] The grid's new target d3 selection\n     * @returns {IGrid} The grid instance\n     */\n    target(target: D3Selection): IGrid;\n    target(target: D3Selection): D3Selection | IGrid;\n\n    /**\n     * getter for the grid configuration\n     *\n     * @returns {IGridConfig} The grid configuration\n     */\n    config(): IGridConfig;\n\n    /**\n     * setter for the grid configuration\n     *\n     * @param {IGridConfig} config The new grid configuration\n     * @returns {this} The grid instance\n     */\n    config(config: IGridConfig): this;\n\n    /**\n     * Builds the grid's rendered elements\n     *\n     * @returns {IGrid} The grid instance\n     */\n    build(): IGrid;\n\n    /**\n     * Updates the grid's rendered elements based on the current scales and configuration\n     *\n     * @returns {IGrid} The grid instance\n     */\n    update(): IGrid;\n\n    /**\n     * Updates the grid's dimensions as specified\n     *\n     * @param {Partial} dimensions The new grid dimensions\n     * @returns {IGrid} The grid instance\n     */\n    updateDimensions(dimensions: Partial): IGrid;\n\n    /**\n     * Updates the ranges on the grid's scales based on the grid's configured dimensions\n     *\n     * @returns {IGrid} The grid instance\n     */\n    updateRanges(): IGrid;\n\n    /**\n     * Builds the grid's plugins\n     *\n     * @returns {IChartPlugin[]} The set of generated plugins\n     */\n    buildPlugins(chart: IChart): IChartPlugin[];\n}\n\n/**\n * Interface for a d3 axis entity\n */\nexport interface IAxis {\n    /** The d3 group element for the axis label */\n    labelGroup: D3Selection;\n    /** The d3 group element for the axis ticks */\n    tickGroup: D3Selection;\n    /** The d3 group element for the axis */\n    group: D3Selection;\n    /** The d3 axis */\n    axis: Axis;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IChart.html":{"url":"interfaces/IChart.html","title":"interface - IChart","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IChart\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        target\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    addPlugin\n                                \n                                \n                                    build\n                                \n                                \n                                    destroy\n                                \n                                \n                                    getDataManager\n                                \n                                \n                                    getEventBus\n                                \n                                \n                                    getGrid\n                                \n                                \n                                    getRenderEngine\n                                \n                                \n                                        Optional\n                                    removePlugin\n                                \n                                \n                                    setSeriesStates\n                                \n                                \n                                    update\n                                \n                                \n                                    updateDimensions\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addPlugin\n                        \n                        \n                    \n                \n            \n            \n                \naddPlugin(plugin: IChartPlugin)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:200\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    plugin\n                                    \n                                                IChartPlugin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            build\n                        \n                        \n                    \n                \n            \n            \n                \nbuild(element: HTMLElement)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:202\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    element\n                                    \n                                            HTMLElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \ndestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:206\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getDataManager\n                        \n                        \n                    \n                \n            \n            \n                \ngetDataManager()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:197\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     DataManager\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventBus\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventBus()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:196\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     EventBus\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getGrid\n                        \n                        \n                    \n                \n            \n            \n                \ngetGrid()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:199\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         IGrid\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getRenderEngine\n                        \n                        \n                    \n                \n            \n            \n                \ngetRenderEngine()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:198\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     RenderEngine\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Optional\n                            removePlugin\n                        \n                        \n                    \n                \n            \n            \n                \nremovePlugin(classRef)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:201\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    classRef\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setSeriesStates\n                        \n                        \n                    \n                \n            \n            \n                \nsetSeriesStates(renderStateData: IRenderStateData[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:205\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderStateData\n                                    \n                                                IRenderStateData[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(seriesSet: IChartSeries[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:203\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    seriesSet\n                                    \n                                                IChartSeries[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \nupdateDimensions()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:204\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        target\n                                    \n                                \n                                \n                                    \n                                        target:         D3Selection\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         D3Selection\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig {\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IChartAssist.html":{"url":"interfaces/IChartAssist.html","title":"interface - IChartAssist","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IChartAssist\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/chart-assists/types.ts\n        \n\n            \n                Description\n            \n            \n                Interface representing an assistant that aids in chart usage\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getHighlightedValue\n                                \n                                \n                                    getVisibleSeriesWithLegend\n                                \n                                \n                                    update\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHighlightedValue\n                        \n                        \n                    \n                \n            \n            \n                \ngetHighlightedValue(chartSeries: IChartSeries, scaleKey: string, formatterName?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/types.ts:34\n                \n            \n\n\n            \n                \n                    Gets the current highlighted value for the specified series\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    chartSeries\n                                    \n                                                IChartSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The chart series to get the highlighted value for\n\n                                    \n                                \n                                \n                                    scaleKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The key for the datapoint value scale\n\n                                    \n                                \n                                \n                                    formatterName\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The name of the formatter if a custom formatter name is set on the scale\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | number | undefined\n\n                    \n                    \n                        The highlighted value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getVisibleSeriesWithLegend\n                        \n                        \n                    \n                \n            \n            \n                \ngetVisibleSeriesWithLegend()\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/types.ts:39\n                \n            \n\n\n            \n                \n                    Returns visible series that are represented by a legend\n\n\n                    \n                        Returns :     IChartAssistSeries[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(inputSeriesSet: IChartAssistSeries[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/types.ts:23\n                \n            \n\n\n            \n                \n                    Updates the series set for the chart assist's associated chart\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    inputSeriesSet\n                                    \n                                            IChartAssistSeries[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The updated set of series\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { RenderState } from \"../../renderers/types\";\nimport { IAccessors, IChart, IChartAssistSeries, IChartSeries, IRenderStateData } from \"../common/types\";\n\n/**\n * Interface representing the spark chart assist's\n * association between one of its charts and a series set\n */\nexport interface ISpark {\n    chartSeriesSet: IChartAssistSeries[];\n    id?: string;\n    chart?: IChart;\n}\n\n/**\n * Interface representing an assistant that aids in chart usage\n */\nexport interface IChartAssist {\n    /**\n     * Updates the series set for the chart assist's associated chart\n     *\n     * @param inputSeriesSet The updated set of series\n     */\n    update(inputSeriesSet: IChartAssistSeries[]): void;\n\n    /**\n     * Gets the current highlighted value for the specified series\n     *\n     * @param {IChartSeries} chartSeries The chart series to get the highlighted value for\n     * @param {string} scaleKey The key for the datapoint value scale\n     * @param {string} [formatterName] The name of the formatter if a custom formatter name is set on the scale\n     *\n     * @returns {string} The highlighted value\n     */\n    getHighlightedValue(chartSeries: IChartSeries, scaleKey: string, formatterName?: string): string | number | undefined;\n\n    /**\n     * Returns visible series that are represented by a legend\n     */\n    getVisibleSeriesWithLegend(): IChartAssistSeries[];\n}\n\n/** Event types that can be emitted from a chart assist */\nexport enum ChartAssistEventType {\n    ToggleSeries = \"ToggleSeries\",\n    ResetVisibleSeries = \"ResetVisibleSeries\",\n    EmphasizeSeries = \"EmphasizeSeries\",\n}\n\n/** Interface for chart assist events */\nexport interface IChartAssistEvent {\n    type: ChartAssistEventType;\n    payload: any;\n}\n\n/**\n * Legend interaction assist uses this class to present the state that consists of emphasisState+visible as one state\n */\nexport class ChartAssistRenderStateData implements IRenderStateData {\n    constructor(public seriesId: string,\n                public series: IChartAssistSeries,\n                public emphasisState = RenderState.default,\n                public visible = true) {\n    }\n\n    get state(): RenderState {\n        return this.visible ? this.emphasisState : RenderState.hidden;\n    }\n}\n\nexport interface IRenderStatesIndex {\n    [seriesId: string]: ChartAssistRenderStateData;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IChartAssistEvent.html":{"url":"interfaces/IChartAssistEvent.html","title":"interface - IChartAssistEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IChartAssistEvent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/chart-assists/types.ts\n        \n\n            \n                Description\n            \n            \n                Interface for chart assist events \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        payload\n                                \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        payload\n                                    \n                                \n                                \n                                    \n                                        payload:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         ChartAssistEventType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ChartAssistEventType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { RenderState } from \"../../renderers/types\";\nimport { IAccessors, IChart, IChartAssistSeries, IChartSeries, IRenderStateData } from \"../common/types\";\n\n/**\n * Interface representing the spark chart assist's\n * association between one of its charts and a series set\n */\nexport interface ISpark {\n    chartSeriesSet: IChartAssistSeries[];\n    id?: string;\n    chart?: IChart;\n}\n\n/**\n * Interface representing an assistant that aids in chart usage\n */\nexport interface IChartAssist {\n    /**\n     * Updates the series set for the chart assist's associated chart\n     *\n     * @param inputSeriesSet The updated set of series\n     */\n    update(inputSeriesSet: IChartAssistSeries[]): void;\n\n    /**\n     * Gets the current highlighted value for the specified series\n     *\n     * @param {IChartSeries} chartSeries The chart series to get the highlighted value for\n     * @param {string} scaleKey The key for the datapoint value scale\n     * @param {string} [formatterName] The name of the formatter if a custom formatter name is set on the scale\n     *\n     * @returns {string} The highlighted value\n     */\n    getHighlightedValue(chartSeries: IChartSeries, scaleKey: string, formatterName?: string): string | number | undefined;\n\n    /**\n     * Returns visible series that are represented by a legend\n     */\n    getVisibleSeriesWithLegend(): IChartAssistSeries[];\n}\n\n/** Event types that can be emitted from a chart assist */\nexport enum ChartAssistEventType {\n    ToggleSeries = \"ToggleSeries\",\n    ResetVisibleSeries = \"ResetVisibleSeries\",\n    EmphasizeSeries = \"EmphasizeSeries\",\n}\n\n/** Interface for chart assist events */\nexport interface IChartAssistEvent {\n    type: ChartAssistEventType;\n    payload: any;\n}\n\n/**\n * Legend interaction assist uses this class to present the state that consists of emphasisState+visible as one state\n */\nexport class ChartAssistRenderStateData implements IRenderStateData {\n    constructor(public seriesId: string,\n                public series: IChartAssistSeries,\n                public emphasisState = RenderState.default,\n                public visible = true) {\n    }\n\n    get state(): RenderState {\n        return this.visible ? this.emphasisState : RenderState.hidden;\n    }\n}\n\nexport interface IRenderStatesIndex {\n    [seriesId: string]: ChartAssistRenderStateData;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IChartAssistSeries.html":{"url":"interfaces/IChartAssistSeries.html","title":"interface - IChartAssistSeries","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IChartAssistSeries\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IChartSeries\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        preprocess\n                                \n                                \n                                            Optional\n                                        renderState\n                                \n                                \n                                            Optional\n                                        showInLegend\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        preprocess\n                                    \n                                \n                                \n                                    \n                                        preprocess:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        renderState\n                                    \n                                \n                                \n                                    \n                                        renderState:         RenderState\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         RenderState\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        showInLegend\n                                    \n                                \n                                \n                                    \n                                        showInLegend:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig {\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IChartEvent.html":{"url":"interfaces/IChartEvent.html","title":"interface - IChartEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IChartEvent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        broadcast\n                                \n                                \n                                        data\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        broadcast\n                                    \n                                \n                                \n                                    \n                                        broadcast:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig {\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IChartMarker.html":{"url":"interfaces/IChartMarker.html","title":"interface - IChartMarker","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IChartMarker\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getSvg\n                                \n                                \n                                    setColor\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getSvg\n                        \n                        \n                    \n                \n            \n            \n                \ngetSvg()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:190\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setColor\n                        \n                        \n                    \n                \n            \n            \n                \nsetColor(color: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:191\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    color\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig {\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IChartPalette.html":{"url":"interfaces/IChartPalette.html","title":"interface - IChartPalette","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IChartPalette\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        backgroundColors\n                                \n                                \n                                        standardColors\n                                \n                                \n                                        textColors\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        backgroundColors\n                                    \n                                \n                                \n                                    \n                                        backgroundColors:         IValueProvider\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IValueProvider\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        standardColors\n                                    \n                                \n                                \n                                    \n                                        standardColors:         IValueProvider\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IValueProvider\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        textColors\n                                    \n                                \n                                \n                                    \n                                        textColors:         IValueProvider\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IValueProvider\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig {\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IChartPlugin.html":{"url":"interfaces/IChartPlugin.html","title":"interface - IChartPlugin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IChartPlugin\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                Interface defining a chart plugin \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        chart\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    destroy\n                                \n                                \n                                    initialize\n                                \n                                \n                                    update\n                                \n                                \n                                    updateDimensions\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \ndestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:231\n                \n            \n\n\n            \n                \n                    Perform plugin cleanup - Invoked automatically on chart destruction \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \ninitialize()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:222\n                \n            \n\n\n            \n                \n                    Initialize the plugin - Invoked automatically on chart initialization \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:225\n                \n            \n\n\n            \n                \n                    Update the plugin - Invoked automatically on chart update \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \nupdateDimensions()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:228\n                \n            \n\n\n            \n                \n                    Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        chart\n                                    \n                                \n                                \n                                    \n                                        chart:         IChart\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IChart\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Associated chart - set automatically on chart initialization\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig {\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IChartSeries.html":{"url":"interfaces/IChartSeries.html","title":"interface - IChartSeries","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IChartSeries\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                The set of elements required for a chart to visualize some data\n\n            \n\n            \n                Extends\n            \n            \n                        IDataSeries\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        renderer\n                                \n                                \n                                        scales\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        renderer\n                                    \n                                \n                                \n                                    \n                                        renderer:         Renderer\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Renderer\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The renderer to be used for visualizing the data \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scales\n                                    \n                                \n                                \n                                    \n                                        scales:         Scales\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Scales\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Information about how chart data should conform to the drawable area.\nGrids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\nuses 'x' and 'y' as the keys for its scales.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig {\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IChartViewStatusEventPayload.html":{"url":"interfaces/IChartViewStatusEventPayload.html","title":"interface - IChartViewStatusEventPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IChartViewStatusEventPayload\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                Payload for the chart's visibility status in relation to the nearest scrollable parent\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        isChartInView\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isChartInView\n                                    \n                                \n                                \n                                    \n                                        isChartInView:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Indicates whether at least one pixel of the chart's parent element has\nintersected with the visible area of its nearest scrollable parent\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig {\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDataAccessors.html":{"url":"interfaces/IDataAccessors.html","title":"interface - IDataAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IDataAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        DataAccessor | undefined\n\n                    \n                \n                        \n                            \n                                Defined in src/core/common/types.ts:132\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig {\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDataPoint.html":{"url":"interfaces/IDataPoint.html","title":"interface - IDataPoint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IDataPoint\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                Information about a data point\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                                \n                                        dataSeries\n                                \n                                \n                                        index\n                                \n                                \n                                            Optional\n                                        position\n                                \n                                \n                                        seriesId\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Data \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dataSeries\n                                    \n                                \n                                \n                                    \n                                        dataSeries:         IDataSeries\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDataSeries\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Series \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        index\n                                    \n                                \n                                \n                                    \n                                        index:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Data index \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        position\n                                    \n                                \n                                \n                                    \n                                        position:         IPosition\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IPosition\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Position \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        seriesId\n                                    \n                                \n                                \n                                    \n                                        seriesId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Series identifier \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig {\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDataPointsPayload.html":{"url":"interfaces/IDataPointsPayload.html","title":"interface - IDataPointsPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IDataPointsPayload\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                Collection of one or more data points as a dictionary of seriesId to IDataPoint\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [seriesId: string]:        IDataPoint\n\n                    \n                \n                        \n                            \n                                Defined in src/core/common/types.ts:311\n                            \n                        \n                \n                    \n                        Series id as key to highlighted data point \n\n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig {\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDataSeries.html":{"url":"interfaces/IDataSeries.html","title":"interface - IDataSeries","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IDataSeries\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                A set of data to visualize on the chart\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        accessors\n                                \n                                \n                                        data\n                                \n                                \n                                        id\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in src/core/common/types.ts:163\n                            \n                        \n                \n                    \n                        Allow any properties to be stored on this object to facilitate the transfer of data from APIs \n\n                    \n                \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accessors\n                                    \n                                \n                                \n                                    \n                                        accessors:     A\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     A\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Accessors describing the data \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:     D[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     D[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\nrenderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\ndata point properties directly, but usually through accessors.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The series identifier \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig {\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDimensionConfig.html":{"url":"interfaces/IDimensionConfig.html","title":"interface - IDimensionConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IDimensionConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/types.ts\n        \n\n            \n                Description\n            \n            \n                Configuration of grid dimensions\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        autoHeight\n                                \n                                \n                                        autoWidth\n                                \n                                \n                                        margin\n                                \n                                \n                                            Optional\n                                        marginLocked\n                                \n                                \n                                        padding\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    height\n                                \n                                \n                                    height\n                                \n                                \n                                    outerHeight\n                                \n                                \n                                    outerHeight\n                                \n                                \n                                    outerWidth\n                                \n                                \n                                    outerWidth\n                                \n                                \n                                    width\n                                \n                                \n                                    width\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            height\n                        \n                        \n                    \n                \n            \n            \n                \nheight(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:66\n                \n            \n\n\n            \n                \n                    Sets the grid's height. Note: 'autoHeight' must be set to false for this setting to have an effect.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new grid height\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IDimensionConfig\n\n                    \n                    \n                        The resulting dimension config\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            height\n                        \n                        \n                    \n                \n            \n            \n                \nheight()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:72\n                \n            \n\n\n            \n                \n                    Gets the grid's height -- excluding margins.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The grid's height\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            outerHeight\n                        \n                        \n                    \n                \n            \n            \n                \nouterHeight(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:94\n                \n            \n\n\n            \n                \n                    Sets the grid's height by subtracting the grid's vertical margins from the specified value.\nNote: 'autoWidth' must be set to false for this setting to have an effect.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new height plus the grid's vertical margins     *\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IDimensionConfig\n\n                    \n                    \n                        The resulting dimension config\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            outerHeight\n                        \n                        \n                    \n                \n            \n            \n                \nouterHeight()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:100\n                \n            \n\n\n            \n                \n                    Gets the grid's height -- including vertical margins.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The grid's height plus vertical margins\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            outerWidth\n                        \n                        \n                    \n                \n            \n            \n                \nouterWidth(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:80\n                \n            \n\n\n            \n                \n                    Sets the grid's width by subtracting the grid's horizontal margins from the specified value.\nNote: 'autoWidth' must be set to false for this setting to have an effect.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new width plus the grid's horizontal margins\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IDimensionConfig\n\n                    \n                    \n                        The resulting dimension config\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            outerWidth\n                        \n                        \n                    \n                \n            \n            \n                \nouterWidth()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:86\n                \n            \n\n\n            \n                \n                    Gets the grid's width -- including horizontal margins.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The grid's width plus horizontal margins\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            width\n                        \n                        \n                    \n                \n            \n            \n                \nwidth(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:53\n                \n            \n\n\n            \n                \n                    Sets the grid's width. Note: 'autoWidth' must be set to false for this setting to have an effect.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new grid width\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IDimensionConfig\n\n                    \n                    \n                        The resulting dimension config\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            width\n                        \n                        \n                    \n                \n            \n            \n                \nwidth()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:59\n                \n            \n\n\n            \n                \n                    Gets the grid's width -- excluding margins.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The grid's width\n\n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        autoHeight\n                                    \n                                \n                                \n                                    \n                                        autoHeight:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Sets whether the grid uses the chart's container to determine its height \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        autoWidth\n                                    \n                                \n                                \n                                    \n                                        autoWidth:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Sets whether the grid uses the chart's container to determine its width \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        margin\n                                    \n                                \n                                \n                                    \n                                        margin:         IAllAround\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IAllAround\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The top, right, bottom, and left margin sizes in pixels \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        marginLocked\n                                    \n                                \n                                \n                                    \n                                        marginLocked:         IAllAround\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IAllAround\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set of booleans indicating whether a specific margin will be recalculated on chart dimension updates \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        padding\n                                    \n                                \n                                \n                                    \n                                        padding:         IAllAround\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IAllAround\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The top, right, bottom, and left padding sizes in pixels \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { BaseType } from \"d3\";\nimport { Axis } from \"d3-axis\";\nimport { Selection } from \"d3-selection\";\nimport { Subject } from \"rxjs\";\n\nimport { EventBus } from \"../common/event-bus\";\nimport { Lasagna } from \"../common/lasagna\";\nimport { ScalesIndex } from \"../common/scales/types\";\nimport { D3Selection, IChart, IChartEvent, IChartPlugin } from \"../common/types\";\n\n/**\n * Interface for defining aspects of the top, right, bottom, and left sides of a grid\n */\nexport interface IAllAround {\n    /** Object defining aspects of the top of an entity */\n    top: T;\n    /** Object defining aspects of the right side of an entity */\n    right: T;\n    /** Object defining aspects of the bottom of an entity */\n    bottom: T;\n    /** Object defining aspects of the left side of an entity */\n    left: T;\n}\n\n/**\n * The width and height of an grid\n */\nexport interface IDimensions {\n    width: number;\n    height: number;\n}\n\n/**\n * Configuration of grid dimensions\n */\nexport interface IDimensionConfig {\n    /** The top, right, bottom, and left margin sizes in pixels */\n    margin: IAllAround;\n    /** The top, right, bottom, and left padding sizes in pixels */\n    padding: IAllAround;\n    /** Sets whether the grid uses the chart's container to determine its width */\n    autoWidth: boolean;\n    /** Sets whether the grid uses the chart's container to determine its height */\n    autoHeight: boolean;\n    /** Set of booleans indicating whether a specific margin will be recalculated on chart dimension updates */\n    marginLocked?: IAllAround;\n    /**\n     * Sets the grid's width. Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid width\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    width(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- excluding margins.\n     *\n     * @returns {number} The grid's width\n     */\n    width(): number;\n    /**\n     * Sets the grid's height. Note: 'autoHeight' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid height\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    height(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- excluding margins.\n     *\n     * @returns {number} The grid's height\n     */\n    height(): number;\n    /**\n     * Sets the grid's width by subtracting the grid's horizontal margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new width plus the grid's horizontal margins\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerWidth(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- including horizontal margins.\n     *\n     * @returns {number} The grid's width plus horizontal margins\n     */\n    outerWidth(): number;\n    /**\n     * Sets the grid's height by subtracting the grid's vertical margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new height plus the grid's vertical margins     *\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerHeight(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- including vertical margins.\n     *\n     * @returns {number} The grid's height plus vertical margins\n     */\n    outerHeight(): number;\n}\n\n/**\n * Interface for defining the SVGElements forming the top, right, bottom, and left borders of an entity\n */\nexport interface IBorders extends IAllAround {\n}\n\n/**\n * Configuration of grid borders\n */\nexport interface IBorderConfig {\n    /** The stroke color */\n    color?: string;\n    /** The thickness of the border */\n    width?: number;\n    /** The class name */\n    className?: string;\n    /** Boolean indicating whether the border should be visible */\n    visible?: boolean;\n}\n\nexport interface ITextOverflowArgs {\n    widthLimit: number;\n    horizontalPadding: number;\n    ellipsisWidth: number;\n}\n\n/** Type for tick overflow handler */\nexport type TextOverflowHandler = (textSelection: Selection, args: ITextOverflowArgs) => void;\n\n/** Interface representing the configuration for tick labels */\nexport interface ITickLabelConfig {\n    /**\n     * Padding for left and right sides of label used for calculating text overflow limits\n     * (number represents the padding on each side)\n     */\n    horizontalPadding: number;\n    /** Handler for text overflow. Set to 'undefined' to disable overflow handling */\n    overflowHandler?: TextOverflowHandler;\n    /**\n     * Setting this insures the label's width is smaller or equal to the provided number\n     */\n    maxWidth?: number;\n}\n\n/** Configuration of a grid axis */\nexport interface IAxisConfig {\n    /** Boolean indicating whether the axis should be visible */\n    visible: boolean;\n    /** The approximate number of ticks to display */\n    approximateTicks: number;\n    /** Boolean indicating whether grid ticks should be displayed */\n    gridTicks: boolean;\n    /** The length of the ticks in pixels */\n    tickSize: number;\n    /** Configuration for the tick labels */\n    tickLabel: ITickLabelConfig;\n    /** Sets whether to fit the grid margins to the axis labels */\n    fit: boolean;\n    /** Sets the axis padding */\n    padding: number;\n}\n\n/**\n * Basic grid configuration\n */\nexport interface IGridConfig {\n    /** Boolean indicating whether the grid will respond to mouse events */\n    interactive: boolean;\n    /** Configuration for the grid's dimensions */\n    dimension: IDimensionConfig;\n    /** Configuration for the grid's borders */\n    borders: IAllAround;\n    /** String indicating the desired cursor style */\n    cursor: string;\n}\n\n/**\n * Configuration for an XYGrid\n */\nexport interface IXYGridConfig extends IGridConfig {\n    /** The IAllAround value for the grid's axis configurations */\n    axis: IAllAround;\n\n    /**\n     * Add interaction line and label plugins automatically\n     * Note: This was added to prevent a breaking change. We should avoid this kind of option in future\n     * versions of IXYGridConfig because ideally all plugins should be added manually (NUI-3304).\n     */\n    interactionPlugins: boolean;\n}\n\n/**\n * The basic interface for a grid's dimensions, scaling, interaction, and borders\n *\n * @interface\n */\nexport interface IGrid {\n    /** The grid scales\n     *\n     * @type {ScalesIndex}\n     */\n    scales: ScalesIndex;\n\n    /**\n     * Subject for indicating that the chart's dimensions should be updated\n     */\n    updateChartDimensionsSubject?: Subject;\n\n    /**\n     * Chart event bus\n     */\n    eventBus: EventBus;\n\n    /**\n     * Provides access to the grid's layering mechanism\n     *\n     * @returns {Lasagna} The grid's layering mechanism\n     */\n    getLasagna(): Lasagna;\n\n    /**\n     * Provides access to the grid's interactive area\n     *\n     * @returns {D3Selection} The grid's interactive area\n     */\n    getInteractiveArea(): D3Selection;\n\n    /**\n     * getter for the grid's target d3 selection\n     *\n     * @returns {D3Selection} The grid's target d3 selection\n     */\n    target(): D3Selection;\n\n    /**\n     * setter for the grid's target d3 selection\n     *\n     * @param {D3Selection} [target] The grid's new target d3 selection\n     * @returns {IGrid} The grid instance\n     */\n    target(target: D3Selection): IGrid;\n    target(target: D3Selection): D3Selection | IGrid;\n\n    /**\n     * getter for the grid configuration\n     *\n     * @returns {IGridConfig} The grid configuration\n     */\n    config(): IGridConfig;\n\n    /**\n     * setter for the grid configuration\n     *\n     * @param {IGridConfig} config The new grid configuration\n     * @returns {this} The grid instance\n     */\n    config(config: IGridConfig): this;\n\n    /**\n     * Builds the grid's rendered elements\n     *\n     * @returns {IGrid} The grid instance\n     */\n    build(): IGrid;\n\n    /**\n     * Updates the grid's rendered elements based on the current scales and configuration\n     *\n     * @returns {IGrid} The grid instance\n     */\n    update(): IGrid;\n\n    /**\n     * Updates the grid's dimensions as specified\n     *\n     * @param {Partial} dimensions The new grid dimensions\n     * @returns {IGrid} The grid instance\n     */\n    updateDimensions(dimensions: Partial): IGrid;\n\n    /**\n     * Updates the ranges on the grid's scales based on the grid's configured dimensions\n     *\n     * @returns {IGrid} The grid instance\n     */\n    updateRanges(): IGrid;\n\n    /**\n     * Builds the grid's plugins\n     *\n     * @returns {IChartPlugin[]} The set of generated plugins\n     */\n    buildPlugins(chart: IChart): IChartPlugin[];\n}\n\n/**\n * Interface for a d3 axis entity\n */\nexport interface IAxis {\n    /** The d3 group element for the axis label */\n    labelGroup: D3Selection;\n    /** The d3 group element for the axis ticks */\n    tickGroup: D3Selection;\n    /** The d3 group element for the axis */\n    group: D3Selection;\n    /** The d3 axis */\n    axis: Axis;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDimensions.html":{"url":"interfaces/IDimensions.html","title":"interface - IDimensions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IDimensions\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/types.ts\n        \n\n            \n                Description\n            \n            \n                The width and height of an grid\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        height\n                                \n                                \n                                        width\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                    \n                                \n                                \n                                    \n                                        height:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                    \n                                \n                                \n                                    \n                                        width:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BaseType } from \"d3\";\nimport { Axis } from \"d3-axis\";\nimport { Selection } from \"d3-selection\";\nimport { Subject } from \"rxjs\";\n\nimport { EventBus } from \"../common/event-bus\";\nimport { Lasagna } from \"../common/lasagna\";\nimport { ScalesIndex } from \"../common/scales/types\";\nimport { D3Selection, IChart, IChartEvent, IChartPlugin } from \"../common/types\";\n\n/**\n * Interface for defining aspects of the top, right, bottom, and left sides of a grid\n */\nexport interface IAllAround {\n    /** Object defining aspects of the top of an entity */\n    top: T;\n    /** Object defining aspects of the right side of an entity */\n    right: T;\n    /** Object defining aspects of the bottom of an entity */\n    bottom: T;\n    /** Object defining aspects of the left side of an entity */\n    left: T;\n}\n\n/**\n * The width and height of an grid\n */\nexport interface IDimensions {\n    width: number;\n    height: number;\n}\n\n/**\n * Configuration of grid dimensions\n */\nexport interface IDimensionConfig {\n    /** The top, right, bottom, and left margin sizes in pixels */\n    margin: IAllAround;\n    /** The top, right, bottom, and left padding sizes in pixels */\n    padding: IAllAround;\n    /** Sets whether the grid uses the chart's container to determine its width */\n    autoWidth: boolean;\n    /** Sets whether the grid uses the chart's container to determine its height */\n    autoHeight: boolean;\n    /** Set of booleans indicating whether a specific margin will be recalculated on chart dimension updates */\n    marginLocked?: IAllAround;\n    /**\n     * Sets the grid's width. Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid width\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    width(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- excluding margins.\n     *\n     * @returns {number} The grid's width\n     */\n    width(): number;\n    /**\n     * Sets the grid's height. Note: 'autoHeight' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid height\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    height(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- excluding margins.\n     *\n     * @returns {number} The grid's height\n     */\n    height(): number;\n    /**\n     * Sets the grid's width by subtracting the grid's horizontal margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new width plus the grid's horizontal margins\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerWidth(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- including horizontal margins.\n     *\n     * @returns {number} The grid's width plus horizontal margins\n     */\n    outerWidth(): number;\n    /**\n     * Sets the grid's height by subtracting the grid's vertical margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new height plus the grid's vertical margins     *\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerHeight(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- including vertical margins.\n     *\n     * @returns {number} The grid's height plus vertical margins\n     */\n    outerHeight(): number;\n}\n\n/**\n * Interface for defining the SVGElements forming the top, right, bottom, and left borders of an entity\n */\nexport interface IBorders extends IAllAround {\n}\n\n/**\n * Configuration of grid borders\n */\nexport interface IBorderConfig {\n    /** The stroke color */\n    color?: string;\n    /** The thickness of the border */\n    width?: number;\n    /** The class name */\n    className?: string;\n    /** Boolean indicating whether the border should be visible */\n    visible?: boolean;\n}\n\nexport interface ITextOverflowArgs {\n    widthLimit: number;\n    horizontalPadding: number;\n    ellipsisWidth: number;\n}\n\n/** Type for tick overflow handler */\nexport type TextOverflowHandler = (textSelection: Selection, args: ITextOverflowArgs) => void;\n\n/** Interface representing the configuration for tick labels */\nexport interface ITickLabelConfig {\n    /**\n     * Padding for left and right sides of label used for calculating text overflow limits\n     * (number represents the padding on each side)\n     */\n    horizontalPadding: number;\n    /** Handler for text overflow. Set to 'undefined' to disable overflow handling */\n    overflowHandler?: TextOverflowHandler;\n    /**\n     * Setting this insures the label's width is smaller or equal to the provided number\n     */\n    maxWidth?: number;\n}\n\n/** Configuration of a grid axis */\nexport interface IAxisConfig {\n    /** Boolean indicating whether the axis should be visible */\n    visible: boolean;\n    /** The approximate number of ticks to display */\n    approximateTicks: number;\n    /** Boolean indicating whether grid ticks should be displayed */\n    gridTicks: boolean;\n    /** The length of the ticks in pixels */\n    tickSize: number;\n    /** Configuration for the tick labels */\n    tickLabel: ITickLabelConfig;\n    /** Sets whether to fit the grid margins to the axis labels */\n    fit: boolean;\n    /** Sets the axis padding */\n    padding: number;\n}\n\n/**\n * Basic grid configuration\n */\nexport interface IGridConfig {\n    /** Boolean indicating whether the grid will respond to mouse events */\n    interactive: boolean;\n    /** Configuration for the grid's dimensions */\n    dimension: IDimensionConfig;\n    /** Configuration for the grid's borders */\n    borders: IAllAround;\n    /** String indicating the desired cursor style */\n    cursor: string;\n}\n\n/**\n * Configuration for an XYGrid\n */\nexport interface IXYGridConfig extends IGridConfig {\n    /** The IAllAround value for the grid's axis configurations */\n    axis: IAllAround;\n\n    /**\n     * Add interaction line and label plugins automatically\n     * Note: This was added to prevent a breaking change. We should avoid this kind of option in future\n     * versions of IXYGridConfig because ideally all plugins should be added manually (NUI-3304).\n     */\n    interactionPlugins: boolean;\n}\n\n/**\n * The basic interface for a grid's dimensions, scaling, interaction, and borders\n *\n * @interface\n */\nexport interface IGrid {\n    /** The grid scales\n     *\n     * @type {ScalesIndex}\n     */\n    scales: ScalesIndex;\n\n    /**\n     * Subject for indicating that the chart's dimensions should be updated\n     */\n    updateChartDimensionsSubject?: Subject;\n\n    /**\n     * Chart event bus\n     */\n    eventBus: EventBus;\n\n    /**\n     * Provides access to the grid's layering mechanism\n     *\n     * @returns {Lasagna} The grid's layering mechanism\n     */\n    getLasagna(): Lasagna;\n\n    /**\n     * Provides access to the grid's interactive area\n     *\n     * @returns {D3Selection} The grid's interactive area\n     */\n    getInteractiveArea(): D3Selection;\n\n    /**\n     * getter for the grid's target d3 selection\n     *\n     * @returns {D3Selection} The grid's target d3 selection\n     */\n    target(): D3Selection;\n\n    /**\n     * setter for the grid's target d3 selection\n     *\n     * @param {D3Selection} [target] The grid's new target d3 selection\n     * @returns {IGrid} The grid instance\n     */\n    target(target: D3Selection): IGrid;\n    target(target: D3Selection): D3Selection | IGrid;\n\n    /**\n     * getter for the grid configuration\n     *\n     * @returns {IGridConfig} The grid configuration\n     */\n    config(): IGridConfig;\n\n    /**\n     * setter for the grid configuration\n     *\n     * @param {IGridConfig} config The new grid configuration\n     * @returns {this} The grid instance\n     */\n    config(config: IGridConfig): this;\n\n    /**\n     * Builds the grid's rendered elements\n     *\n     * @returns {IGrid} The grid instance\n     */\n    build(): IGrid;\n\n    /**\n     * Updates the grid's rendered elements based on the current scales and configuration\n     *\n     * @returns {IGrid} The grid instance\n     */\n    update(): IGrid;\n\n    /**\n     * Updates the grid's dimensions as specified\n     *\n     * @param {Partial} dimensions The new grid dimensions\n     * @returns {IGrid} The grid instance\n     */\n    updateDimensions(dimensions: Partial): IGrid;\n\n    /**\n     * Updates the ranges on the grid's scales based on the grid's configured dimensions\n     *\n     * @returns {IGrid} The grid instance\n     */\n    updateRanges(): IGrid;\n\n    /**\n     * Builds the grid's plugins\n     *\n     * @returns {IChartPlugin[]} The set of generated plugins\n     */\n    buildPlugins(chart: IChart): IChartPlugin[];\n}\n\n/**\n * Interface for a d3 axis entity\n */\nexport interface IAxis {\n    /** The d3 group element for the axis label */\n    labelGroup: D3Selection;\n    /** The d3 group element for the axis ticks */\n    tickGroup: D3Selection;\n    /** The d3 group element for the axis */\n    group: D3Selection;\n    /** The d3 axis */\n    axis: Axis;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IElementPosition.html":{"url":"interfaces/IElementPosition.html","title":"interface - IElementPosition","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IElementPosition\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/types.ts\n        \n\n            \n                Description\n            \n            \n                Interface for defining an element's position \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        height\n                                \n                                \n                                        left\n                                \n                                \n                                        top\n                                \n                                \n                                        width\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                    \n                                \n                                \n                                    \n                                        height:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        left\n                                    \n                                \n                                \n                                    \n                                        left:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        top\n                                    \n                                \n                                \n                                    \n                                        top:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                    \n                                \n                                \n                                    \n                                        width:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ICoordinates, IInteractionPayload } from \"../common/types\";\n\n/**\n * Interface used for interaction values with scaleKey as key to a dictionary of scaleId to value. Typical scale keys are \"x\" and \"y\"\n */\nexport interface IInteractionValues {\n    [scaleKey: string]: { [scaleId: string]: any };\n}\n\n/**\n * Payload for an INTERACTION_VALUES_EVENT\n */\nexport interface IInteractionValuesPayload extends IInteractionPayload {\n    /** The values of the interaction */\n    values: IInteractionValues;\n}\n\n/**\n * Payload for an INTERACTION_COORDINATES_EVENT\n */\nexport interface IInteractionCoordinatesPayload extends IInteractionPayload {\n    /** The coordinates of an interaction */\n    coordinates: ICoordinates;\n}\n\n/** Interface for defining an element's position */\nexport interface IElementPosition {\n    top: number;\n    left: number;\n    width: number;\n    height: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IEnhancedLineCapConfig.html":{"url":"interfaces/IEnhancedLineCapConfig.html","title":"interface - IEnhancedLineCapConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IEnhancedLineCapConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/types.ts\n        \n\n            \n                Description\n            \n            \n                The configuration interface for the enhanced line caps \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        fill\n                                \n                                \n                                            Optional\n                                        radius\n                                \n                                \n                                            Optional\n                                        stroke\n                                \n                                \n                                            Optional\n                                        strokeWidth\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        fill\n                                    \n                                \n                                \n                                    \n                                        fill:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the fill color \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        radius\n                                    \n                                \n                                \n                                    \n                                        radius:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the radius in pixels \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stroke\n                                    \n                                \n                                \n                                    \n                                        stroke:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the stroke color \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        strokeWidth\n                                    \n                                \n                                \n                                    \n                                        strokeWidth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the stroke width in pixels \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { CurveFactory } from \"d3-shape\";\nimport { Subject } from \"rxjs\";\n\nimport { Renderer } from \"../core/common/renderer\";\nimport { Scales } from \"../core/common/scales/types\";\nimport { IAccessors, IDataSeries, IRenderContainers, IRendererConfig, IRendererEventPayload } from \"../core/common/types\";\n\nimport { IRectangleAccessors } from \"./accessors/rectangle-accessors\";\nimport { BarRenderer } from \"./bar/bar-renderer\";\nimport { ILineAccessors } from \"./line/line-accessors\";\nimport { LineRenderer } from \"./line/line-renderer\";\n\nexport enum RenderState {\n    hidden = \"hidden\",\n    deemphasized = \"deemphasized\",\n    emphasized = \"emphasized\",\n    default = \"default\",\n}\n\nexport enum RenderLayerName {\n    background = \"background\",\n    data = \"data\",\n    unclippedData = \"unclipped-data\",\n    foreground = \"foreground\",\n}\n\n/** The configuration interface for marker interaction */\nexport interface IMarkerInteractionConfig {\n    /** Enables mouse events on data point markers */\n    enabled: boolean;\n    /** Enables the pointer style mouse cursor when data point markers are hovered */\n    clickable?: boolean;\n}\n\n/** The configuration interface for the enhanced line caps */\nexport interface IEnhancedLineCapConfig {\n    /** Set the stroke color */\n    stroke?: string;\n    /** Set the stroke width in pixels */\n    strokeWidth?: number;\n    /** Set the fill color */\n    fill?: string;\n    /** Set the radius in pixels */\n    radius?: number;\n}\n\n/** The configuration interface for the line renderer */\nexport interface ILineRendererConfig extends IRendererConfig {\n    /** Set the width of the line in pixels */\n    strokeWidth?: number;\n    /** Set the stroke-dasharray of the line, e.g. \"1,1\", \"2,2\", etc. */\n    strokeStyle?: string;\n    /** Set the stroke-linecap of the line, e.g. \"round\" */\n    strokeLinecap?: string;\n    /** Set the d3 curve algorithm to be used for drawing the lines */\n    curveType?: CurveFactory;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. LineSelectSeriesInteractionStrategy */\n    interactionStrategy?: IHighlightStrategy;\n    /** Configure the interaction behavior for markers */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** Set whether enhanced line caps should be displayed */\n    useEnhancedLineCaps?: boolean;\n    /** Optionally configure enhanced line caps. Prerequisite: 'useEnhancedLineCaps' is set to true */\n    enhancedLineCap?: IEnhancedLineCapConfig;\n}\n\n/** The configuration interface for the bar renderer */\nexport interface IBarRendererConfig extends IRendererConfig {\n    /** Set the padding on both sides of each bar */\n    padding?: number;\n    /** Set the class name to apply custom styles to the bars */\n    barClass?: string;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. BarHighlightStrategy */\n    highlightStrategy?: IHighlightStrategy;\n    /** Set the mouse cursor style to use when hovering over individual bars */\n    cursor?: string;\n    /** Enables pointer events on the bars */\n    pointerEvents?: boolean;\n    /** Set the stroke width in pixels */\n    strokeWidth?: number;\n    /** Enable the minimum bar thickness (BarRenderer.MIN_BAR_THICKNESS) */\n    enableMinBarThickness?: boolean;\n}\n\n/** The configuration interface for the area renderer */\nexport interface IAreaRendererConfig extends IRendererConfig {\n    /** Set the d3 curve algorithm to be used for drawing the area boundaries */\n    curveType?: CurveFactory;\n    /** Set the class name to apply custom styles to the areas */\n    areaClass?: string;\n    /** Enables the pointer cursor when data point markers are hovered */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** The width of the area path's stroke in pixels. Default is 1. */\n    strokeWidth?: number;\n}\n\nexport interface IRenderSeries {\n    dataSeries: IDataSeries;\n    containers: IRenderContainers;\n    scales: Scales;\n}\n\nexport interface IHighlightStrategy> {\n\n    getDataPointIndex(renderer: T, series: IDataSeries, values: { [p: string]: any }, scales: Scales): number;\n\n    highlightDataPoint(renderer: T, renderSeries: IRenderSeries,\n                       dataPointIndex: number, rendererSubject: Subject): void;\n\n    draw(renderer: T, renderSeries: IRenderSeries, rendererSubject: Subject): void;\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IFormatters.html":{"url":"interfaces/IFormatters.html","title":"interface - IFormatters","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IFormatters\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/scales/types.ts\n        \n\n            \n                Description\n            \n            \n                Interface for scale formatters \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        tick\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [p: string]:        Formatter | undefined\n\n                    \n                \n                        \n                            \n                                Defined in src/core/common/scales/types.ts:16\n                            \n                        \n                \n                    \n                        Additional formatters \n\n                    \n                \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        tick\n                                    \n                                \n                                \n                                    \n                                        tick:         Formatter\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Formatter\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Formatter for tick labels \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { AxisScale } from \"d3-axis\";\n\nimport { IAccessors, IChartSeries } from \"../types\";\n\n/** Domain for series with empty or null data */\nexport const EMPTY_CONTINUOUS_DOMAIN = [0, 0];\n/** A reasonable non-data-driven domain for charts  */\nexport const NORMALIZED_DOMAIN = [0, 1];\n\n/** Signature for domain calculator */\nexport type DomainCalculator = (chartSeriesSet: IChartSeries[], scaleId: string, scale: IScale) => any[];\n\n/** Interface for scale formatters */\nexport interface IFormatters {\n    /** Formatter for tick labels */\n    tick?: Formatter;\n    /** Additional formatters */\n    [p: string]: Formatter | undefined;\n}\n\n/** Signature for label formatters */\nexport type Formatter = (value: T) => string;\n\n/** Dictionary of scale collections in index and array form */\nexport interface ScalesIndex {\n    [key: string]: {\n        /** Scale collection as an index */\n        index: { [scaleId: string]: IScale };\n        /** Scale collection as an array */\n        list: IScale[];\n    };\n}\n\n/** Dictionary of scales */\nexport type Scales = Record>;\n\nexport interface IXYScales extends Scales {\n    x: IScale;\n    y: IScale;\n}\n\nexport interface IRadialScales extends Scales {\n    r: IScale;\n}\n\n/** Interface for a scale */\nexport interface IScale {\n    /** The scale identifier */\n    readonly id: string;\n    readonly d3Scale: AxisScale; // TODO: maybe AxisScale is to narrow?\n\n    /** If this flag is enabled, the domain of this scale is not recalculated */\n    isDomainFixed?: boolean;\n    /** Method used to calculate the scale's domain */\n    domainCalculator?: DomainCalculator;\n    /** The scales formatters */\n    formatters: IFormatters;\n    /** If this flag is enabled, the domain has been recalculated with ticks in mind */\n    __domainCalculatedWithTicks?: boolean;\n\n    /**\n     * Determines if the scale's domain is continuous\n     *\n     * @returns {boolean} true if the scale's domain is continuous (numeric), false otherwise\n     */\n    isContinuous(): boolean;\n\n    /**\n     * Determines if the scale's domain is valid\n     *\n     * @returns {boolean} true if the scale's domain is valid, false otherwise\n     */\n    isDomainValid(): boolean;\n\n    /**\n     * Converts a value to its corresponding coordinate\n     *\n     * @param {T} value The value to be converted\n     * @returns {number} The coordinate corresponding to the specified value\n     */\n    convert(value: T): number;\n\n    /**\n     * Converts a coordinate to its corresponding value\n     *\n     * @param {number} coordinate The coordinate to be converted\n     * @returns {T} The value corresponding to the specified coordinate\n     */\n    invert(coordinate: number): T | undefined;\n\n    /**\n     * Gets the scale's range\n     *\n     * @returns {[number, number]} The scale's range\n     */\n    range(): [number, number];\n\n    /**\n     * Sets the scale's range\n     *\n     * @param {[number, number]} range The scale's new range\n     */\n    range(range: [number, number]): this;\n\n    /**\n     * Gets the scale's domain\n     *\n     * @returns {T[]} The scale's domain\n     */\n    domain(): T[];\n\n    /**\n     * Sets the scale's domain\n     *\n     * @param {T[]} domain The scale's new domain\n     */\n    domain(domain: T[]): this;\n\n    /**\n     * Shorthand method for setting the domain and isDomainFixed at once\n     *\n     * @param {T[]} domain The scale's fixed domain\n     */\n    fixDomain(domain: T[]): void;\n\n    /**\n     * Reverse the scale orientation by toggling the reversed flag\n     */\n    reverse(): this;\n\n    /**\n     * Getter for the reversed flag (see #reverse)\n     */\n    reversed(): boolean;\n\n    /**\n     * Setter for the reversed flag (see #reverse)\n     *\n     * @param reversed\n     */\n    reversed(reversed: boolean): this;\n}\n\n\nexport interface IBandScale extends IScale {\n    bandwidth(): number;\n}\n\nexport function isBandScale(scale: any): scale is IBandScale {\n    return typeof scale.bandwidth === \"function\";\n}\n\nexport interface IHasInnerScale extends IScale {\n    innerScale: IScale;\n}\n\nexport function hasInnerScale(scale: any): scale is IHasInnerScale {\n    return typeof scale.innerScale !== \"undefined\";\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IGrid.html":{"url":"interfaces/IGrid.html","title":"interface - IGrid","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IGrid\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/types.ts\n        \n\n            \n                Description\n            \n            \n                The basic interface for a grid's dimensions, scaling, interaction, and borders\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        eventBus\n                                \n                                \n                                        scales\n                                \n                                \n                                            Optional\n                                        updateChartDimensionsSubject\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    build\n                                \n                                \n                                    buildPlugins\n                                \n                                \n                                    config\n                                \n                                \n                                    config\n                                \n                                \n                                    getInteractiveArea\n                                \n                                \n                                    getLasagna\n                                \n                                \n                                    target\n                                \n                                \n                                    target\n                                \n                                \n                                    target\n                                \n                                \n                                    update\n                                \n                                \n                                    updateDimensions\n                                \n                                \n                                    updateRanges\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            build\n                        \n                        \n                    \n                \n            \n            \n                \nbuild()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:266\n                \n            \n\n\n            \n                \n                    Builds the grid's rendered elements\n\n\n                    \n                    \n                    \n                        Returns :         IGrid\n\n                    \n                    \n                        The grid instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            buildPlugins\n                        \n                        \n                    \n                \n            \n            \n                \nbuildPlugins(chart: IChart)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:295\n                \n            \n\n\n            \n                \n                    Builds the grid's plugins\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    chart\n                                    \n                                                IChart\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IChartPlugin[]\n\n                    \n                    \n                        The set of generated plugins\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            config\n                        \n                        \n                    \n                \n            \n            \n                \nconfig()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:251\n                \n            \n\n\n            \n                \n                    getter for the grid configuration\n\n\n                    \n                    \n                    \n                        Returns :         IGridConfig\n\n                    \n                    \n                        The grid configuration\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            config\n                        \n                        \n                    \n                \n            \n            \n                \nconfig(config: IGridConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:259\n                \n            \n\n\n            \n                \n                    setter for the grid configuration\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                IGridConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new grid configuration\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getInteractiveArea\n                        \n                        \n                    \n                \n            \n            \n                \ngetInteractiveArea()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:228\n                \n            \n\n\n            \n                \n                    Provides access to the grid's interactive area\n\n\n                    \n                    \n                    \n                        Returns :         D3Selection\n\n                    \n                    \n                        The grid's interactive area\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getLasagna\n                        \n                        \n                    \n                \n            \n            \n                \ngetLasagna()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:221\n                \n            \n\n\n            \n                \n                    Provides access to the grid's layering mechanism\n\n\n                    \n                    \n                    \n                        Returns :     Lasagna\n\n                    \n                    \n                        The grid's layering mechanism\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            target\n                        \n                        \n                    \n                \n            \n            \n                \ntarget()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:235\n                \n            \n\n\n            \n                \n                    getter for the grid's target d3 selection\n\n\n                    \n                    \n                    \n                        Returns :         D3Selection\n\n                    \n                    \n                        The grid's target d3 selection\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            target\n                        \n                        \n                    \n                \n            \n            \n                \ntarget(target: D3Selection)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:243\n                \n            \n\n\n            \n                \n                    setter for the grid's target d3 selection\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                                D3Selection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The grid's new target d3 selection\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IGrid\n\n                    \n                    \n                        The grid instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            target\n                        \n                        \n                    \n                \n            \n            \n                \ntarget(target: D3Selection)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:244\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                                D3Selection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         D3Selection | IGrid\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:273\n                \n            \n\n\n            \n                \n                    Updates the grid's rendered elements based on the current scales and configuration\n\n\n                    \n                    \n                    \n                        Returns :         IGrid\n\n                    \n                    \n                        The grid instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \nupdateDimensions(dimensions: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:281\n                \n            \n\n\n            \n                \n                    Updates the grid's dimensions as specified\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dimensions\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new grid dimensions\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IGrid\n\n                    \n                    \n                        The grid instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateRanges\n                        \n                        \n                    \n                \n            \n            \n                \nupdateRanges()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:288\n                \n            \n\n\n            \n                \n                    Updates the ranges on the grid's scales based on the grid's configured dimensions\n\n\n                    \n                    \n                    \n                        Returns :         IGrid\n\n                    \n                    \n                        The grid instance\n\n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        eventBus\n                                    \n                                \n                                \n                                    \n                                        eventBus:     EventBus\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     EventBus\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Chart event bus\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scales\n                                    \n                                \n                                \n                                    \n                                        scales:         ScalesIndex\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ScalesIndex\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The grid scales\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updateChartDimensionsSubject\n                                    \n                                \n                                \n                                    \n                                        updateChartDimensionsSubject:     Subject\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Subject\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Subject for indicating that the chart's dimensions should be updated\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { BaseType } from \"d3\";\nimport { Axis } from \"d3-axis\";\nimport { Selection } from \"d3-selection\";\nimport { Subject } from \"rxjs\";\n\nimport { EventBus } from \"../common/event-bus\";\nimport { Lasagna } from \"../common/lasagna\";\nimport { ScalesIndex } from \"../common/scales/types\";\nimport { D3Selection, IChart, IChartEvent, IChartPlugin } from \"../common/types\";\n\n/**\n * Interface for defining aspects of the top, right, bottom, and left sides of a grid\n */\nexport interface IAllAround {\n    /** Object defining aspects of the top of an entity */\n    top: T;\n    /** Object defining aspects of the right side of an entity */\n    right: T;\n    /** Object defining aspects of the bottom of an entity */\n    bottom: T;\n    /** Object defining aspects of the left side of an entity */\n    left: T;\n}\n\n/**\n * The width and height of an grid\n */\nexport interface IDimensions {\n    width: number;\n    height: number;\n}\n\n/**\n * Configuration of grid dimensions\n */\nexport interface IDimensionConfig {\n    /** The top, right, bottom, and left margin sizes in pixels */\n    margin: IAllAround;\n    /** The top, right, bottom, and left padding sizes in pixels */\n    padding: IAllAround;\n    /** Sets whether the grid uses the chart's container to determine its width */\n    autoWidth: boolean;\n    /** Sets whether the grid uses the chart's container to determine its height */\n    autoHeight: boolean;\n    /** Set of booleans indicating whether a specific margin will be recalculated on chart dimension updates */\n    marginLocked?: IAllAround;\n    /**\n     * Sets the grid's width. Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid width\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    width(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- excluding margins.\n     *\n     * @returns {number} The grid's width\n     */\n    width(): number;\n    /**\n     * Sets the grid's height. Note: 'autoHeight' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid height\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    height(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- excluding margins.\n     *\n     * @returns {number} The grid's height\n     */\n    height(): number;\n    /**\n     * Sets the grid's width by subtracting the grid's horizontal margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new width plus the grid's horizontal margins\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerWidth(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- including horizontal margins.\n     *\n     * @returns {number} The grid's width plus horizontal margins\n     */\n    outerWidth(): number;\n    /**\n     * Sets the grid's height by subtracting the grid's vertical margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new height plus the grid's vertical margins     *\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerHeight(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- including vertical margins.\n     *\n     * @returns {number} The grid's height plus vertical margins\n     */\n    outerHeight(): number;\n}\n\n/**\n * Interface for defining the SVGElements forming the top, right, bottom, and left borders of an entity\n */\nexport interface IBorders extends IAllAround {\n}\n\n/**\n * Configuration of grid borders\n */\nexport interface IBorderConfig {\n    /** The stroke color */\n    color?: string;\n    /** The thickness of the border */\n    width?: number;\n    /** The class name */\n    className?: string;\n    /** Boolean indicating whether the border should be visible */\n    visible?: boolean;\n}\n\nexport interface ITextOverflowArgs {\n    widthLimit: number;\n    horizontalPadding: number;\n    ellipsisWidth: number;\n}\n\n/** Type for tick overflow handler */\nexport type TextOverflowHandler = (textSelection: Selection, args: ITextOverflowArgs) => void;\n\n/** Interface representing the configuration for tick labels */\nexport interface ITickLabelConfig {\n    /**\n     * Padding for left and right sides of label used for calculating text overflow limits\n     * (number represents the padding on each side)\n     */\n    horizontalPadding: number;\n    /** Handler for text overflow. Set to 'undefined' to disable overflow handling */\n    overflowHandler?: TextOverflowHandler;\n    /**\n     * Setting this insures the label's width is smaller or equal to the provided number\n     */\n    maxWidth?: number;\n}\n\n/** Configuration of a grid axis */\nexport interface IAxisConfig {\n    /** Boolean indicating whether the axis should be visible */\n    visible: boolean;\n    /** The approximate number of ticks to display */\n    approximateTicks: number;\n    /** Boolean indicating whether grid ticks should be displayed */\n    gridTicks: boolean;\n    /** The length of the ticks in pixels */\n    tickSize: number;\n    /** Configuration for the tick labels */\n    tickLabel: ITickLabelConfig;\n    /** Sets whether to fit the grid margins to the axis labels */\n    fit: boolean;\n    /** Sets the axis padding */\n    padding: number;\n}\n\n/**\n * Basic grid configuration\n */\nexport interface IGridConfig {\n    /** Boolean indicating whether the grid will respond to mouse events */\n    interactive: boolean;\n    /** Configuration for the grid's dimensions */\n    dimension: IDimensionConfig;\n    /** Configuration for the grid's borders */\n    borders: IAllAround;\n    /** String indicating the desired cursor style */\n    cursor: string;\n}\n\n/**\n * Configuration for an XYGrid\n */\nexport interface IXYGridConfig extends IGridConfig {\n    /** The IAllAround value for the grid's axis configurations */\n    axis: IAllAround;\n\n    /**\n     * Add interaction line and label plugins automatically\n     * Note: This was added to prevent a breaking change. We should avoid this kind of option in future\n     * versions of IXYGridConfig because ideally all plugins should be added manually (NUI-3304).\n     */\n    interactionPlugins: boolean;\n}\n\n/**\n * The basic interface for a grid's dimensions, scaling, interaction, and borders\n *\n * @interface\n */\nexport interface IGrid {\n    /** The grid scales\n     *\n     * @type {ScalesIndex}\n     */\n    scales: ScalesIndex;\n\n    /**\n     * Subject for indicating that the chart's dimensions should be updated\n     */\n    updateChartDimensionsSubject?: Subject;\n\n    /**\n     * Chart event bus\n     */\n    eventBus: EventBus;\n\n    /**\n     * Provides access to the grid's layering mechanism\n     *\n     * @returns {Lasagna} The grid's layering mechanism\n     */\n    getLasagna(): Lasagna;\n\n    /**\n     * Provides access to the grid's interactive area\n     *\n     * @returns {D3Selection} The grid's interactive area\n     */\n    getInteractiveArea(): D3Selection;\n\n    /**\n     * getter for the grid's target d3 selection\n     *\n     * @returns {D3Selection} The grid's target d3 selection\n     */\n    target(): D3Selection;\n\n    /**\n     * setter for the grid's target d3 selection\n     *\n     * @param {D3Selection} [target] The grid's new target d3 selection\n     * @returns {IGrid} The grid instance\n     */\n    target(target: D3Selection): IGrid;\n    target(target: D3Selection): D3Selection | IGrid;\n\n    /**\n     * getter for the grid configuration\n     *\n     * @returns {IGridConfig} The grid configuration\n     */\n    config(): IGridConfig;\n\n    /**\n     * setter for the grid configuration\n     *\n     * @param {IGridConfig} config The new grid configuration\n     * @returns {this} The grid instance\n     */\n    config(config: IGridConfig): this;\n\n    /**\n     * Builds the grid's rendered elements\n     *\n     * @returns {IGrid} The grid instance\n     */\n    build(): IGrid;\n\n    /**\n     * Updates the grid's rendered elements based on the current scales and configuration\n     *\n     * @returns {IGrid} The grid instance\n     */\n    update(): IGrid;\n\n    /**\n     * Updates the grid's dimensions as specified\n     *\n     * @param {Partial} dimensions The new grid dimensions\n     * @returns {IGrid} The grid instance\n     */\n    updateDimensions(dimensions: Partial): IGrid;\n\n    /**\n     * Updates the ranges on the grid's scales based on the grid's configured dimensions\n     *\n     * @returns {IGrid} The grid instance\n     */\n    updateRanges(): IGrid;\n\n    /**\n     * Builds the grid's plugins\n     *\n     * @returns {IChartPlugin[]} The set of generated plugins\n     */\n    buildPlugins(chart: IChart): IChartPlugin[];\n}\n\n/**\n * Interface for a d3 axis entity\n */\nexport interface IAxis {\n    /** The d3 group element for the axis label */\n    labelGroup: D3Selection;\n    /** The d3 group element for the axis ticks */\n    tickGroup: D3Selection;\n    /** The d3 group element for the axis */\n    group: D3Selection;\n    /** The d3 axis */\n    axis: Axis;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IGridConfig.html":{"url":"interfaces/IGridConfig.html","title":"interface - IGridConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IGridConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/types.ts\n        \n\n            \n                Description\n            \n            \n                Basic grid configuration\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        borders\n                                \n                                \n                                        cursor\n                                \n                                \n                                        dimension\n                                \n                                \n                                        interactive\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        borders\n                                    \n                                \n                                \n                                    \n                                        borders:     IAllAround\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     IAllAround\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Configuration for the grid's borders \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cursor\n                                    \n                                \n                                \n                                    \n                                        cursor:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    String indicating the desired cursor style \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dimension\n                                    \n                                \n                                \n                                    \n                                        dimension:         IDimensionConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDimensionConfig\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Configuration for the grid's dimensions \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        interactive\n                                    \n                                \n                                \n                                    \n                                        interactive:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Boolean indicating whether the grid will respond to mouse events \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { BaseType } from \"d3\";\nimport { Axis } from \"d3-axis\";\nimport { Selection } from \"d3-selection\";\nimport { Subject } from \"rxjs\";\n\nimport { EventBus } from \"../common/event-bus\";\nimport { Lasagna } from \"../common/lasagna\";\nimport { ScalesIndex } from \"../common/scales/types\";\nimport { D3Selection, IChart, IChartEvent, IChartPlugin } from \"../common/types\";\n\n/**\n * Interface for defining aspects of the top, right, bottom, and left sides of a grid\n */\nexport interface IAllAround {\n    /** Object defining aspects of the top of an entity */\n    top: T;\n    /** Object defining aspects of the right side of an entity */\n    right: T;\n    /** Object defining aspects of the bottom of an entity */\n    bottom: T;\n    /** Object defining aspects of the left side of an entity */\n    left: T;\n}\n\n/**\n * The width and height of an grid\n */\nexport interface IDimensions {\n    width: number;\n    height: number;\n}\n\n/**\n * Configuration of grid dimensions\n */\nexport interface IDimensionConfig {\n    /** The top, right, bottom, and left margin sizes in pixels */\n    margin: IAllAround;\n    /** The top, right, bottom, and left padding sizes in pixels */\n    padding: IAllAround;\n    /** Sets whether the grid uses the chart's container to determine its width */\n    autoWidth: boolean;\n    /** Sets whether the grid uses the chart's container to determine its height */\n    autoHeight: boolean;\n    /** Set of booleans indicating whether a specific margin will be recalculated on chart dimension updates */\n    marginLocked?: IAllAround;\n    /**\n     * Sets the grid's width. Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid width\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    width(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- excluding margins.\n     *\n     * @returns {number} The grid's width\n     */\n    width(): number;\n    /**\n     * Sets the grid's height. Note: 'autoHeight' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid height\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    height(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- excluding margins.\n     *\n     * @returns {number} The grid's height\n     */\n    height(): number;\n    /**\n     * Sets the grid's width by subtracting the grid's horizontal margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new width plus the grid's horizontal margins\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerWidth(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- including horizontal margins.\n     *\n     * @returns {number} The grid's width plus horizontal margins\n     */\n    outerWidth(): number;\n    /**\n     * Sets the grid's height by subtracting the grid's vertical margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new height plus the grid's vertical margins     *\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerHeight(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- including vertical margins.\n     *\n     * @returns {number} The grid's height plus vertical margins\n     */\n    outerHeight(): number;\n}\n\n/**\n * Interface for defining the SVGElements forming the top, right, bottom, and left borders of an entity\n */\nexport interface IBorders extends IAllAround {\n}\n\n/**\n * Configuration of grid borders\n */\nexport interface IBorderConfig {\n    /** The stroke color */\n    color?: string;\n    /** The thickness of the border */\n    width?: number;\n    /** The class name */\n    className?: string;\n    /** Boolean indicating whether the border should be visible */\n    visible?: boolean;\n}\n\nexport interface ITextOverflowArgs {\n    widthLimit: number;\n    horizontalPadding: number;\n    ellipsisWidth: number;\n}\n\n/** Type for tick overflow handler */\nexport type TextOverflowHandler = (textSelection: Selection, args: ITextOverflowArgs) => void;\n\n/** Interface representing the configuration for tick labels */\nexport interface ITickLabelConfig {\n    /**\n     * Padding for left and right sides of label used for calculating text overflow limits\n     * (number represents the padding on each side)\n     */\n    horizontalPadding: number;\n    /** Handler for text overflow. Set to 'undefined' to disable overflow handling */\n    overflowHandler?: TextOverflowHandler;\n    /**\n     * Setting this insures the label's width is smaller or equal to the provided number\n     */\n    maxWidth?: number;\n}\n\n/** Configuration of a grid axis */\nexport interface IAxisConfig {\n    /** Boolean indicating whether the axis should be visible */\n    visible: boolean;\n    /** The approximate number of ticks to display */\n    approximateTicks: number;\n    /** Boolean indicating whether grid ticks should be displayed */\n    gridTicks: boolean;\n    /** The length of the ticks in pixels */\n    tickSize: number;\n    /** Configuration for the tick labels */\n    tickLabel: ITickLabelConfig;\n    /** Sets whether to fit the grid margins to the axis labels */\n    fit: boolean;\n    /** Sets the axis padding */\n    padding: number;\n}\n\n/**\n * Basic grid configuration\n */\nexport interface IGridConfig {\n    /** Boolean indicating whether the grid will respond to mouse events */\n    interactive: boolean;\n    /** Configuration for the grid's dimensions */\n    dimension: IDimensionConfig;\n    /** Configuration for the grid's borders */\n    borders: IAllAround;\n    /** String indicating the desired cursor style */\n    cursor: string;\n}\n\n/**\n * Configuration for an XYGrid\n */\nexport interface IXYGridConfig extends IGridConfig {\n    /** The IAllAround value for the grid's axis configurations */\n    axis: IAllAround;\n\n    /**\n     * Add interaction line and label plugins automatically\n     * Note: This was added to prevent a breaking change. We should avoid this kind of option in future\n     * versions of IXYGridConfig because ideally all plugins should be added manually (NUI-3304).\n     */\n    interactionPlugins: boolean;\n}\n\n/**\n * The basic interface for a grid's dimensions, scaling, interaction, and borders\n *\n * @interface\n */\nexport interface IGrid {\n    /** The grid scales\n     *\n     * @type {ScalesIndex}\n     */\n    scales: ScalesIndex;\n\n    /**\n     * Subject for indicating that the chart's dimensions should be updated\n     */\n    updateChartDimensionsSubject?: Subject;\n\n    /**\n     * Chart event bus\n     */\n    eventBus: EventBus;\n\n    /**\n     * Provides access to the grid's layering mechanism\n     *\n     * @returns {Lasagna} The grid's layering mechanism\n     */\n    getLasagna(): Lasagna;\n\n    /**\n     * Provides access to the grid's interactive area\n     *\n     * @returns {D3Selection} The grid's interactive area\n     */\n    getInteractiveArea(): D3Selection;\n\n    /**\n     * getter for the grid's target d3 selection\n     *\n     * @returns {D3Selection} The grid's target d3 selection\n     */\n    target(): D3Selection;\n\n    /**\n     * setter for the grid's target d3 selection\n     *\n     * @param {D3Selection} [target] The grid's new target d3 selection\n     * @returns {IGrid} The grid instance\n     */\n    target(target: D3Selection): IGrid;\n    target(target: D3Selection): D3Selection | IGrid;\n\n    /**\n     * getter for the grid configuration\n     *\n     * @returns {IGridConfig} The grid configuration\n     */\n    config(): IGridConfig;\n\n    /**\n     * setter for the grid configuration\n     *\n     * @param {IGridConfig} config The new grid configuration\n     * @returns {this} The grid instance\n     */\n    config(config: IGridConfig): this;\n\n    /**\n     * Builds the grid's rendered elements\n     *\n     * @returns {IGrid} The grid instance\n     */\n    build(): IGrid;\n\n    /**\n     * Updates the grid's rendered elements based on the current scales and configuration\n     *\n     * @returns {IGrid} The grid instance\n     */\n    update(): IGrid;\n\n    /**\n     * Updates the grid's dimensions as specified\n     *\n     * @param {Partial} dimensions The new grid dimensions\n     * @returns {IGrid} The grid instance\n     */\n    updateDimensions(dimensions: Partial): IGrid;\n\n    /**\n     * Updates the ranges on the grid's scales based on the grid's configured dimensions\n     *\n     * @returns {IGrid} The grid instance\n     */\n    updateRanges(): IGrid;\n\n    /**\n     * Builds the grid's plugins\n     *\n     * @returns {IChartPlugin[]} The set of generated plugins\n     */\n    buildPlugins(chart: IChart): IChartPlugin[];\n}\n\n/**\n * Interface for a d3 axis entity\n */\nexport interface IAxis {\n    /** The d3 group element for the axis label */\n    labelGroup: D3Selection;\n    /** The d3 group element for the axis ticks */\n    tickGroup: D3Selection;\n    /** The d3 group element for the axis */\n    group: D3Selection;\n    /** The d3 axis */\n    axis: Axis;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IHasInnerScale.html":{"url":"interfaces/IHasInnerScale.html","title":"interface - IHasInnerScale","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IHasInnerScale\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/scales/types.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IScale\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        innerScale\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        innerScale\n                                    \n                                \n                                \n                                    \n                                        innerScale:         IScale\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IScale\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { AxisScale } from \"d3-axis\";\n\nimport { IAccessors, IChartSeries } from \"../types\";\n\n/** Domain for series with empty or null data */\nexport const EMPTY_CONTINUOUS_DOMAIN = [0, 0];\n/** A reasonable non-data-driven domain for charts  */\nexport const NORMALIZED_DOMAIN = [0, 1];\n\n/** Signature for domain calculator */\nexport type DomainCalculator = (chartSeriesSet: IChartSeries[], scaleId: string, scale: IScale) => any[];\n\n/** Interface for scale formatters */\nexport interface IFormatters {\n    /** Formatter for tick labels */\n    tick?: Formatter;\n    /** Additional formatters */\n    [p: string]: Formatter | undefined;\n}\n\n/** Signature for label formatters */\nexport type Formatter = (value: T) => string;\n\n/** Dictionary of scale collections in index and array form */\nexport interface ScalesIndex {\n    [key: string]: {\n        /** Scale collection as an index */\n        index: { [scaleId: string]: IScale };\n        /** Scale collection as an array */\n        list: IScale[];\n    };\n}\n\n/** Dictionary of scales */\nexport type Scales = Record>;\n\nexport interface IXYScales extends Scales {\n    x: IScale;\n    y: IScale;\n}\n\nexport interface IRadialScales extends Scales {\n    r: IScale;\n}\n\n/** Interface for a scale */\nexport interface IScale {\n    /** The scale identifier */\n    readonly id: string;\n    readonly d3Scale: AxisScale; // TODO: maybe AxisScale is to narrow?\n\n    /** If this flag is enabled, the domain of this scale is not recalculated */\n    isDomainFixed?: boolean;\n    /** Method used to calculate the scale's domain */\n    domainCalculator?: DomainCalculator;\n    /** The scales formatters */\n    formatters: IFormatters;\n    /** If this flag is enabled, the domain has been recalculated with ticks in mind */\n    __domainCalculatedWithTicks?: boolean;\n\n    /**\n     * Determines if the scale's domain is continuous\n     *\n     * @returns {boolean} true if the scale's domain is continuous (numeric), false otherwise\n     */\n    isContinuous(): boolean;\n\n    /**\n     * Determines if the scale's domain is valid\n     *\n     * @returns {boolean} true if the scale's domain is valid, false otherwise\n     */\n    isDomainValid(): boolean;\n\n    /**\n     * Converts a value to its corresponding coordinate\n     *\n     * @param {T} value The value to be converted\n     * @returns {number} The coordinate corresponding to the specified value\n     */\n    convert(value: T): number;\n\n    /**\n     * Converts a coordinate to its corresponding value\n     *\n     * @param {number} coordinate The coordinate to be converted\n     * @returns {T} The value corresponding to the specified coordinate\n     */\n    invert(coordinate: number): T | undefined;\n\n    /**\n     * Gets the scale's range\n     *\n     * @returns {[number, number]} The scale's range\n     */\n    range(): [number, number];\n\n    /**\n     * Sets the scale's range\n     *\n     * @param {[number, number]} range The scale's new range\n     */\n    range(range: [number, number]): this;\n\n    /**\n     * Gets the scale's domain\n     *\n     * @returns {T[]} The scale's domain\n     */\n    domain(): T[];\n\n    /**\n     * Sets the scale's domain\n     *\n     * @param {T[]} domain The scale's new domain\n     */\n    domain(domain: T[]): this;\n\n    /**\n     * Shorthand method for setting the domain and isDomainFixed at once\n     *\n     * @param {T[]} domain The scale's fixed domain\n     */\n    fixDomain(domain: T[]): void;\n\n    /**\n     * Reverse the scale orientation by toggling the reversed flag\n     */\n    reverse(): this;\n\n    /**\n     * Getter for the reversed flag (see #reverse)\n     */\n    reversed(): boolean;\n\n    /**\n     * Setter for the reversed flag (see #reverse)\n     *\n     * @param reversed\n     */\n    reversed(reversed: boolean): this;\n}\n\n\nexport interface IBandScale extends IScale {\n    bandwidth(): number;\n}\n\nexport function isBandScale(scale: any): scale is IBandScale {\n    return typeof scale.bandwidth === \"function\";\n}\n\nexport interface IHasInnerScale extends IScale {\n    innerScale: IScale;\n}\n\nexport function hasInnerScale(scale: any): scale is IHasInnerScale {\n    return typeof scale.innerScale !== \"undefined\";\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IHighlightStrategy.html":{"url":"interfaces/IHighlightStrategy.html","title":"interface - IHighlightStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IHighlightStrategy\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    draw\n                                \n                                \n                                    getDataPointIndex\n                                \n                                \n                                    highlightDataPoint\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            draw\n                        \n                        \n                    \n                \n            \n            \n                \ndraw(renderer: T, renderSeries: IRenderSeries, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/types.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getDataPointIndex\n                        \n                        \n                    \n                \n            \n            \n                \ngetDataPointIndex(renderer: T, series: IDataSeries, values: literal type, scales: Scales)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/types.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    series\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    values\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            highlightDataPoint\n                        \n                        \n                    \n                \n            \n            \n                \nhighlightDataPoint(renderer: T, renderSeries: IRenderSeries, dataPointIndex: number, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/types.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dataPointIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CurveFactory } from \"d3-shape\";\nimport { Subject } from \"rxjs\";\n\nimport { Renderer } from \"../core/common/renderer\";\nimport { Scales } from \"../core/common/scales/types\";\nimport { IAccessors, IDataSeries, IRenderContainers, IRendererConfig, IRendererEventPayload } from \"../core/common/types\";\n\nimport { IRectangleAccessors } from \"./accessors/rectangle-accessors\";\nimport { BarRenderer } from \"./bar/bar-renderer\";\nimport { ILineAccessors } from \"./line/line-accessors\";\nimport { LineRenderer } from \"./line/line-renderer\";\n\nexport enum RenderState {\n    hidden = \"hidden\",\n    deemphasized = \"deemphasized\",\n    emphasized = \"emphasized\",\n    default = \"default\",\n}\n\nexport enum RenderLayerName {\n    background = \"background\",\n    data = \"data\",\n    unclippedData = \"unclipped-data\",\n    foreground = \"foreground\",\n}\n\n/** The configuration interface for marker interaction */\nexport interface IMarkerInteractionConfig {\n    /** Enables mouse events on data point markers */\n    enabled: boolean;\n    /** Enables the pointer style mouse cursor when data point markers are hovered */\n    clickable?: boolean;\n}\n\n/** The configuration interface for the enhanced line caps */\nexport interface IEnhancedLineCapConfig {\n    /** Set the stroke color */\n    stroke?: string;\n    /** Set the stroke width in pixels */\n    strokeWidth?: number;\n    /** Set the fill color */\n    fill?: string;\n    /** Set the radius in pixels */\n    radius?: number;\n}\n\n/** The configuration interface for the line renderer */\nexport interface ILineRendererConfig extends IRendererConfig {\n    /** Set the width of the line in pixels */\n    strokeWidth?: number;\n    /** Set the stroke-dasharray of the line, e.g. \"1,1\", \"2,2\", etc. */\n    strokeStyle?: string;\n    /** Set the stroke-linecap of the line, e.g. \"round\" */\n    strokeLinecap?: string;\n    /** Set the d3 curve algorithm to be used for drawing the lines */\n    curveType?: CurveFactory;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. LineSelectSeriesInteractionStrategy */\n    interactionStrategy?: IHighlightStrategy;\n    /** Configure the interaction behavior for markers */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** Set whether enhanced line caps should be displayed */\n    useEnhancedLineCaps?: boolean;\n    /** Optionally configure enhanced line caps. Prerequisite: 'useEnhancedLineCaps' is set to true */\n    enhancedLineCap?: IEnhancedLineCapConfig;\n}\n\n/** The configuration interface for the bar renderer */\nexport interface IBarRendererConfig extends IRendererConfig {\n    /** Set the padding on both sides of each bar */\n    padding?: number;\n    /** Set the class name to apply custom styles to the bars */\n    barClass?: string;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. BarHighlightStrategy */\n    highlightStrategy?: IHighlightStrategy;\n    /** Set the mouse cursor style to use when hovering over individual bars */\n    cursor?: string;\n    /** Enables pointer events on the bars */\n    pointerEvents?: boolean;\n    /** Set the stroke width in pixels */\n    strokeWidth?: number;\n    /** Enable the minimum bar thickness (BarRenderer.MIN_BAR_THICKNESS) */\n    enableMinBarThickness?: boolean;\n}\n\n/** The configuration interface for the area renderer */\nexport interface IAreaRendererConfig extends IRendererConfig {\n    /** Set the d3 curve algorithm to be used for drawing the area boundaries */\n    curveType?: CurveFactory;\n    /** Set the class name to apply custom styles to the areas */\n    areaClass?: string;\n    /** Enables the pointer cursor when data point markers are hovered */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** The width of the area path's stroke in pixels. Default is 1. */\n    strokeWidth?: number;\n}\n\nexport interface IRenderSeries {\n    dataSeries: IDataSeries;\n    containers: IRenderContainers;\n    scales: Scales;\n}\n\nexport interface IHighlightStrategy> {\n\n    getDataPointIndex(renderer: T, series: IDataSeries, values: { [p: string]: any }, scales: Scales): number;\n\n    highlightDataPoint(renderer: T, renderSeries: IRenderSeries,\n                       dataPointIndex: number, rendererSubject: Subject): void;\n\n    draw(renderer: T, renderSeries: IRenderSeries, rendererSubject: Subject): void;\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IInteractionCoordinatesPayload.html":{"url":"interfaces/IInteractionCoordinatesPayload.html","title":"interface - IInteractionCoordinatesPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IInteractionCoordinatesPayload\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/types.ts\n        \n\n            \n                Description\n            \n            \n                Payload for an INTERACTION_COORDINATES_EVENT\n\n            \n\n            \n                Extends\n            \n            \n                        IInteractionPayload\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        coordinates\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        coordinates\n                                    \n                                \n                                \n                                    \n                                        coordinates:     ICoordinates\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ICoordinates\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The coordinates of an interaction \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ICoordinates, IInteractionPayload } from \"../common/types\";\n\n/**\n * Interface used for interaction values with scaleKey as key to a dictionary of scaleId to value. Typical scale keys are \"x\" and \"y\"\n */\nexport interface IInteractionValues {\n    [scaleKey: string]: { [scaleId: string]: any };\n}\n\n/**\n * Payload for an INTERACTION_VALUES_EVENT\n */\nexport interface IInteractionValuesPayload extends IInteractionPayload {\n    /** The values of the interaction */\n    values: IInteractionValues;\n}\n\n/**\n * Payload for an INTERACTION_COORDINATES_EVENT\n */\nexport interface IInteractionCoordinatesPayload extends IInteractionPayload {\n    /** The coordinates of an interaction */\n    coordinates: ICoordinates;\n}\n\n/** Interface for defining an element's position */\nexport interface IElementPosition {\n    top: number;\n    left: number;\n    width: number;\n    height: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IInteractionDataPointEvent.html":{"url":"interfaces/IInteractionDataPointEvent.html","title":"interface - IInteractionDataPointEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IInteractionDataPointEvent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                Payload for interaction events regarding a single data point\n\n            \n\n            \n                Extends\n            \n            \n                        IInteractionPayload\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        dataPoint\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dataPoint\n                                    \n                                \n                                \n                                    \n                                        dataPoint:         IDataPoint\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDataPoint\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig {\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IInteractionDataPointsEvent.html":{"url":"interfaces/IInteractionDataPointsEvent.html","title":"interface - IInteractionDataPointsEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IInteractionDataPointsEvent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                Payload for interaction events regarding one or more data points\n\n            \n\n            \n                Extends\n            \n            \n                        IInteractionPayload\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        dataPoints\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dataPoints\n                                    \n                                \n                                \n                                    \n                                        dataPoints:         IDataPointsPayload\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDataPointsPayload\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig {\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IInteractionPayload.html":{"url":"interfaces/IInteractionPayload.html","title":"interface - IInteractionPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IInteractionPayload\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                Payload for interaction events\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        interactionType\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        interactionType\n                                    \n                                \n                                \n                                    \n                                        interactionType:         InteractionType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         InteractionType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig {\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IInteractionValues.html":{"url":"interfaces/IInteractionValues.html","title":"interface - IInteractionValues","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IInteractionValues\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/types.ts\n        \n\n            \n                Description\n            \n            \n                Interface used for interaction values with scaleKey as key to a dictionary of scaleId to value. Typical scale keys are \"x\" and \"y\"\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [scaleKey: string]:    literal type\n\n                    \n                \n                        \n                            \n                                Defined in src/core/plugins/types.ts:6\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import { ICoordinates, IInteractionPayload } from \"../common/types\";\n\n/**\n * Interface used for interaction values with scaleKey as key to a dictionary of scaleId to value. Typical scale keys are \"x\" and \"y\"\n */\nexport interface IInteractionValues {\n    [scaleKey: string]: { [scaleId: string]: any };\n}\n\n/**\n * Payload for an INTERACTION_VALUES_EVENT\n */\nexport interface IInteractionValuesPayload extends IInteractionPayload {\n    /** The values of the interaction */\n    values: IInteractionValues;\n}\n\n/**\n * Payload for an INTERACTION_COORDINATES_EVENT\n */\nexport interface IInteractionCoordinatesPayload extends IInteractionPayload {\n    /** The coordinates of an interaction */\n    coordinates: ICoordinates;\n}\n\n/** Interface for defining an element's position */\nexport interface IElementPosition {\n    top: number;\n    left: number;\n    width: number;\n    height: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IInteractionValuesPayload.html":{"url":"interfaces/IInteractionValuesPayload.html","title":"interface - IInteractionValuesPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IInteractionValuesPayload\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/types.ts\n        \n\n            \n                Description\n            \n            \n                Payload for an INTERACTION_VALUES_EVENT\n\n            \n\n            \n                Extends\n            \n            \n                        IInteractionPayload\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        values\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        values\n                                    \n                                \n                                \n                                    \n                                        values:         IInteractionValues\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IInteractionValues\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The values of the interaction \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ICoordinates, IInteractionPayload } from \"../common/types\";\n\n/**\n * Interface used for interaction values with scaleKey as key to a dictionary of scaleId to value. Typical scale keys are \"x\" and \"y\"\n */\nexport interface IInteractionValues {\n    [scaleKey: string]: { [scaleId: string]: any };\n}\n\n/**\n * Payload for an INTERACTION_VALUES_EVENT\n */\nexport interface IInteractionValuesPayload extends IInteractionPayload {\n    /** The values of the interaction */\n    values: IInteractionValues;\n}\n\n/**\n * Payload for an INTERACTION_COORDINATES_EVENT\n */\nexport interface IInteractionCoordinatesPayload extends IInteractionPayload {\n    /** The coordinates of an interaction */\n    coordinates: ICoordinates;\n}\n\n/** Interface for defining an element's position */\nexport interface IElementPosition {\n    top: number;\n    left: number;\n    width: number;\n    height: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ILineAccessors.html":{"url":"interfaces/ILineAccessors.html","title":"interface - ILineAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ILineAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/line/line-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                                \n                                        series\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         ILineDataAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ILineDataAccessors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        series\n                                    \n                                \n                                \n                                    \n                                        series:         ILineSeriesAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ILineSeriesAccessors\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Series level accessors - e.g. for colors, markers, etc. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { defaultColorProvider, defaultMarkerProvider } from \"../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, SeriesAccessor } from \"../../core/common/types\";\nimport { IXYDataAccessors, XYAccessors } from \"../accessors/xy-accessors\";\n\nexport interface ILineDataAccessors extends IXYDataAccessors {\n    defined?: DataAccessor;\n}\n\n/**\n * Series accessors used in {@link LineAccessors}.\n */\nexport interface ILineSeriesAccessors {\n    /** Color of the series */\n    color?: SeriesAccessor;\n    /** Marker for the series */\n    marker?: SeriesAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: SeriesAccessor | undefined;\n}\n\nexport interface ILineAccessors extends IAccessors {\n    data: ILineDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series: ILineSeriesAccessors;\n}\n\n/**\n * Accessor class supporting the {@link LineRenderer}, that defines required inputs acquired from data points.\n * This class includes default behavior for all required fields. It's using properties of the same name for data accessors.\n * \n * If colorProvider or markerProvider is not defined in the constructor, every new instance of LineAccessors will instantiate it's own, so that has to be\n * kept in mind when configuring charts as it could cause potential color synchronization problems.\n *\n * See referenced data and series interfaces for required properties.\n */\nexport class LineAccessors extends XYAccessors implements ILineAccessors {\n    public data: ILineDataAccessors;\n    public series: ILineSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider(), private markerProvider = defaultMarkerProvider()) {\n        super();\n\n        this.data.defined = (d: any, i) => d.hasOwnProperty(\"defined\") ? d.defined : true;\n\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n            marker: this.markerProvider ? this.markerProvider.get : undefined,\n        };\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ILineDataAccessors.html":{"url":"interfaces/ILineDataAccessors.html","title":"interface - ILineDataAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ILineDataAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/line/line-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IXYDataAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        defined\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        defined\n                                    \n                                \n                                \n                                    \n                                        defined:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { defaultColorProvider, defaultMarkerProvider } from \"../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, SeriesAccessor } from \"../../core/common/types\";\nimport { IXYDataAccessors, XYAccessors } from \"../accessors/xy-accessors\";\n\nexport interface ILineDataAccessors extends IXYDataAccessors {\n    defined?: DataAccessor;\n}\n\n/**\n * Series accessors used in {@link LineAccessors}.\n */\nexport interface ILineSeriesAccessors {\n    /** Color of the series */\n    color?: SeriesAccessor;\n    /** Marker for the series */\n    marker?: SeriesAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: SeriesAccessor | undefined;\n}\n\nexport interface ILineAccessors extends IAccessors {\n    data: ILineDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series: ILineSeriesAccessors;\n}\n\n/**\n * Accessor class supporting the {@link LineRenderer}, that defines required inputs acquired from data points.\n * This class includes default behavior for all required fields. It's using properties of the same name for data accessors.\n * \n * If colorProvider or markerProvider is not defined in the constructor, every new instance of LineAccessors will instantiate it's own, so that has to be\n * kept in mind when configuring charts as it could cause potential color synchronization problems.\n *\n * See referenced data and series interfaces for required properties.\n */\nexport class LineAccessors extends XYAccessors implements ILineAccessors {\n    public data: ILineDataAccessors;\n    public series: ILineSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider(), private markerProvider = defaultMarkerProvider()) {\n        super();\n\n        this.data.defined = (d: any, i) => d.hasOwnProperty(\"defined\") ? d.defined : true;\n\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n            marker: this.markerProvider ? this.markerProvider.get : undefined,\n        };\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ILineRendererConfig.html":{"url":"interfaces/ILineRendererConfig.html","title":"interface - ILineRendererConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ILineRendererConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/types.ts\n        \n\n            \n                Description\n            \n            \n                The configuration interface for the line renderer \n\n            \n\n            \n                Extends\n            \n            \n                        IRendererConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        curveType\n                                \n                                \n                                            Optional\n                                        enhancedLineCap\n                                \n                                \n                                            Optional\n                                        interactionStrategy\n                                \n                                \n                                            Optional\n                                        markerInteraction\n                                \n                                \n                                            Optional\n                                        strokeLinecap\n                                \n                                \n                                            Optional\n                                        strokeStyle\n                                \n                                \n                                            Optional\n                                        strokeWidth\n                                \n                                \n                                            Optional\n                                        useEnhancedLineCaps\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        curveType\n                                    \n                                \n                                \n                                    \n                                        curveType:     CurveFactory\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     CurveFactory\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the d3 curve algorithm to be used for drawing the lines \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enhancedLineCap\n                                    \n                                \n                                \n                                    \n                                        enhancedLineCap:         IEnhancedLineCapConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IEnhancedLineCapConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optionally configure enhanced line caps. Prerequisite: 'useEnhancedLineCaps' is set to true \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        interactionStrategy\n                                    \n                                \n                                \n                                    \n                                        interactionStrategy:     IHighlightStrategy\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     IHighlightStrategy\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. LineSelectSeriesInteractionStrategy \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        markerInteraction\n                                    \n                                \n                                \n                                    \n                                        markerInteraction:         IMarkerInteractionConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IMarkerInteractionConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Configure the interaction behavior for markers \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        strokeLinecap\n                                    \n                                \n                                \n                                    \n                                        strokeLinecap:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the stroke-linecap of the line, e.g. \"round\" \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        strokeStyle\n                                    \n                                \n                                \n                                    \n                                        strokeStyle:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the stroke-dasharray of the line, e.g. \"1,1\", \"2,2\", etc. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        strokeWidth\n                                    \n                                \n                                \n                                    \n                                        strokeWidth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the width of the line in pixels \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        useEnhancedLineCaps\n                                    \n                                \n                                \n                                    \n                                        useEnhancedLineCaps:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set whether enhanced line caps should be displayed \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { CurveFactory } from \"d3-shape\";\nimport { Subject } from \"rxjs\";\n\nimport { Renderer } from \"../core/common/renderer\";\nimport { Scales } from \"../core/common/scales/types\";\nimport { IAccessors, IDataSeries, IRenderContainers, IRendererConfig, IRendererEventPayload } from \"../core/common/types\";\n\nimport { IRectangleAccessors } from \"./accessors/rectangle-accessors\";\nimport { BarRenderer } from \"./bar/bar-renderer\";\nimport { ILineAccessors } from \"./line/line-accessors\";\nimport { LineRenderer } from \"./line/line-renderer\";\n\nexport enum RenderState {\n    hidden = \"hidden\",\n    deemphasized = \"deemphasized\",\n    emphasized = \"emphasized\",\n    default = \"default\",\n}\n\nexport enum RenderLayerName {\n    background = \"background\",\n    data = \"data\",\n    unclippedData = \"unclipped-data\",\n    foreground = \"foreground\",\n}\n\n/** The configuration interface for marker interaction */\nexport interface IMarkerInteractionConfig {\n    /** Enables mouse events on data point markers */\n    enabled: boolean;\n    /** Enables the pointer style mouse cursor when data point markers are hovered */\n    clickable?: boolean;\n}\n\n/** The configuration interface for the enhanced line caps */\nexport interface IEnhancedLineCapConfig {\n    /** Set the stroke color */\n    stroke?: string;\n    /** Set the stroke width in pixels */\n    strokeWidth?: number;\n    /** Set the fill color */\n    fill?: string;\n    /** Set the radius in pixels */\n    radius?: number;\n}\n\n/** The configuration interface for the line renderer */\nexport interface ILineRendererConfig extends IRendererConfig {\n    /** Set the width of the line in pixels */\n    strokeWidth?: number;\n    /** Set the stroke-dasharray of the line, e.g. \"1,1\", \"2,2\", etc. */\n    strokeStyle?: string;\n    /** Set the stroke-linecap of the line, e.g. \"round\" */\n    strokeLinecap?: string;\n    /** Set the d3 curve algorithm to be used for drawing the lines */\n    curveType?: CurveFactory;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. LineSelectSeriesInteractionStrategy */\n    interactionStrategy?: IHighlightStrategy;\n    /** Configure the interaction behavior for markers */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** Set whether enhanced line caps should be displayed */\n    useEnhancedLineCaps?: boolean;\n    /** Optionally configure enhanced line caps. Prerequisite: 'useEnhancedLineCaps' is set to true */\n    enhancedLineCap?: IEnhancedLineCapConfig;\n}\n\n/** The configuration interface for the bar renderer */\nexport interface IBarRendererConfig extends IRendererConfig {\n    /** Set the padding on both sides of each bar */\n    padding?: number;\n    /** Set the class name to apply custom styles to the bars */\n    barClass?: string;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. BarHighlightStrategy */\n    highlightStrategy?: IHighlightStrategy;\n    /** Set the mouse cursor style to use when hovering over individual bars */\n    cursor?: string;\n    /** Enables pointer events on the bars */\n    pointerEvents?: boolean;\n    /** Set the stroke width in pixels */\n    strokeWidth?: number;\n    /** Enable the minimum bar thickness (BarRenderer.MIN_BAR_THICKNESS) */\n    enableMinBarThickness?: boolean;\n}\n\n/** The configuration interface for the area renderer */\nexport interface IAreaRendererConfig extends IRendererConfig {\n    /** Set the d3 curve algorithm to be used for drawing the area boundaries */\n    curveType?: CurveFactory;\n    /** Set the class name to apply custom styles to the areas */\n    areaClass?: string;\n    /** Enables the pointer cursor when data point markers are hovered */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** The width of the area path's stroke in pixels. Default is 1. */\n    strokeWidth?: number;\n}\n\nexport interface IRenderSeries {\n    dataSeries: IDataSeries;\n    containers: IRenderContainers;\n    scales: Scales;\n}\n\nexport interface IHighlightStrategy> {\n\n    getDataPointIndex(renderer: T, series: IDataSeries, values: { [p: string]: any }, scales: Scales): number;\n\n    highlightDataPoint(renderer: T, renderSeries: IRenderSeries,\n                       dataPointIndex: number, rendererSubject: Subject): void;\n\n    draw(renderer: T, renderSeries: IRenderSeries, rendererSubject: Subject): void;\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ILineSeriesAccessors.html":{"url":"interfaces/ILineSeriesAccessors.html","title":"interface - ILineSeriesAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ILineSeriesAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/line/line-accessors.ts\n        \n\n            \n                Description\n            \n            \n                Series accessors used in LineAccessors.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        color\n                                \n                                \n                                            Optional\n                                        marker\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        SeriesAccessor | undefined\n\n                    \n                \n                        \n                            \n                                Defined in src/renderers/line/line-accessors.ts:16\n                            \n                        \n                \n                    \n                        Additional custom keys to match the base interface \n\n                    \n                \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                    \n                                \n                                \n                                    \n                                        color:         SeriesAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SeriesAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Color of the series \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        marker\n                                    \n                                \n                                \n                                    \n                                        marker:         SeriesAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SeriesAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Marker for the series \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { defaultColorProvider, defaultMarkerProvider } from \"../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, SeriesAccessor } from \"../../core/common/types\";\nimport { IXYDataAccessors, XYAccessors } from \"../accessors/xy-accessors\";\n\nexport interface ILineDataAccessors extends IXYDataAccessors {\n    defined?: DataAccessor;\n}\n\n/**\n * Series accessors used in {@link LineAccessors}.\n */\nexport interface ILineSeriesAccessors {\n    /** Color of the series */\n    color?: SeriesAccessor;\n    /** Marker for the series */\n    marker?: SeriesAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: SeriesAccessor | undefined;\n}\n\nexport interface ILineAccessors extends IAccessors {\n    data: ILineDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series: ILineSeriesAccessors;\n}\n\n/**\n * Accessor class supporting the {@link LineRenderer}, that defines required inputs acquired from data points.\n * This class includes default behavior for all required fields. It's using properties of the same name for data accessors.\n * \n * If colorProvider or markerProvider is not defined in the constructor, every new instance of LineAccessors will instantiate it's own, so that has to be\n * kept in mind when configuring charts as it could cause potential color synchronization problems.\n *\n * See referenced data and series interfaces for required properties.\n */\nexport class LineAccessors extends XYAccessors implements ILineAccessors {\n    public data: ILineDataAccessors;\n    public series: ILineSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider(), private markerProvider = defaultMarkerProvider()) {\n        super();\n\n        this.data.defined = (d: any, i) => d.hasOwnProperty(\"defined\") ? d.defined : true;\n\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n            marker: this.markerProvider ? this.markerProvider.get : undefined,\n        };\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ILinearScales.html":{"url":"interfaces/ILinearScales.html","title":"interface - ILinearScales","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ILinearScales\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        x\n                                \n                                \n                                        y\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:         ScaleLinear\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ScaleLinear\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:         ScaleLinear\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ScaleLinear\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig {\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IMarkerInteractionConfig.html":{"url":"interfaces/IMarkerInteractionConfig.html","title":"interface - IMarkerInteractionConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IMarkerInteractionConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/types.ts\n        \n\n            \n                Description\n            \n            \n                The configuration interface for marker interaction \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        clickable\n                                \n                                \n                                        enabled\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clickable\n                                    \n                                \n                                \n                                    \n                                        clickable:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Enables the pointer style mouse cursor when data point markers are hovered \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enabled\n                                    \n                                \n                                \n                                    \n                                        enabled:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Enables mouse events on data point markers \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { CurveFactory } from \"d3-shape\";\nimport { Subject } from \"rxjs\";\n\nimport { Renderer } from \"../core/common/renderer\";\nimport { Scales } from \"../core/common/scales/types\";\nimport { IAccessors, IDataSeries, IRenderContainers, IRendererConfig, IRendererEventPayload } from \"../core/common/types\";\n\nimport { IRectangleAccessors } from \"./accessors/rectangle-accessors\";\nimport { BarRenderer } from \"./bar/bar-renderer\";\nimport { ILineAccessors } from \"./line/line-accessors\";\nimport { LineRenderer } from \"./line/line-renderer\";\n\nexport enum RenderState {\n    hidden = \"hidden\",\n    deemphasized = \"deemphasized\",\n    emphasized = \"emphasized\",\n    default = \"default\",\n}\n\nexport enum RenderLayerName {\n    background = \"background\",\n    data = \"data\",\n    unclippedData = \"unclipped-data\",\n    foreground = \"foreground\",\n}\n\n/** The configuration interface for marker interaction */\nexport interface IMarkerInteractionConfig {\n    /** Enables mouse events on data point markers */\n    enabled: boolean;\n    /** Enables the pointer style mouse cursor when data point markers are hovered */\n    clickable?: boolean;\n}\n\n/** The configuration interface for the enhanced line caps */\nexport interface IEnhancedLineCapConfig {\n    /** Set the stroke color */\n    stroke?: string;\n    /** Set the stroke width in pixels */\n    strokeWidth?: number;\n    /** Set the fill color */\n    fill?: string;\n    /** Set the radius in pixels */\n    radius?: number;\n}\n\n/** The configuration interface for the line renderer */\nexport interface ILineRendererConfig extends IRendererConfig {\n    /** Set the width of the line in pixels */\n    strokeWidth?: number;\n    /** Set the stroke-dasharray of the line, e.g. \"1,1\", \"2,2\", etc. */\n    strokeStyle?: string;\n    /** Set the stroke-linecap of the line, e.g. \"round\" */\n    strokeLinecap?: string;\n    /** Set the d3 curve algorithm to be used for drawing the lines */\n    curveType?: CurveFactory;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. LineSelectSeriesInteractionStrategy */\n    interactionStrategy?: IHighlightStrategy;\n    /** Configure the interaction behavior for markers */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** Set whether enhanced line caps should be displayed */\n    useEnhancedLineCaps?: boolean;\n    /** Optionally configure enhanced line caps. Prerequisite: 'useEnhancedLineCaps' is set to true */\n    enhancedLineCap?: IEnhancedLineCapConfig;\n}\n\n/** The configuration interface for the bar renderer */\nexport interface IBarRendererConfig extends IRendererConfig {\n    /** Set the padding on both sides of each bar */\n    padding?: number;\n    /** Set the class name to apply custom styles to the bars */\n    barClass?: string;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. BarHighlightStrategy */\n    highlightStrategy?: IHighlightStrategy;\n    /** Set the mouse cursor style to use when hovering over individual bars */\n    cursor?: string;\n    /** Enables pointer events on the bars */\n    pointerEvents?: boolean;\n    /** Set the stroke width in pixels */\n    strokeWidth?: number;\n    /** Enable the minimum bar thickness (BarRenderer.MIN_BAR_THICKNESS) */\n    enableMinBarThickness?: boolean;\n}\n\n/** The configuration interface for the area renderer */\nexport interface IAreaRendererConfig extends IRendererConfig {\n    /** Set the d3 curve algorithm to be used for drawing the area boundaries */\n    curveType?: CurveFactory;\n    /** Set the class name to apply custom styles to the areas */\n    areaClass?: string;\n    /** Enables the pointer cursor when data point markers are hovered */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** The width of the area path's stroke in pixels. Default is 1. */\n    strokeWidth?: number;\n}\n\nexport interface IRenderSeries {\n    dataSeries: IDataSeries;\n    containers: IRenderContainers;\n    scales: Scales;\n}\n\nexport interface IHighlightStrategy> {\n\n    getDataPointIndex(renderer: T, series: IDataSeries, values: { [p: string]: any }, scales: Scales): number;\n\n    highlightDataPoint(renderer: T, renderSeries: IRenderSeries,\n                       dataPointIndex: number, rendererSubject: Subject): void;\n\n    draw(renderer: T, renderSeries: IRenderSeries, rendererSubject: Subject): void;\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/INoopAccessors.html":{"url":"interfaces/INoopAccessors.html","title":"interface - INoopAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  INoopAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/accessors/noop-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                                \n                                        series\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        series\n                                    \n                                \n                                \n                                    \n                                        series:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Series level accessors - e.g. for colors, markers, etc. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {IAccessors} from \"../../core/common/types\";\n\n\nexport interface INoopAccessors extends IAccessors {\n    data: any;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series: any;\n}\n\nexport class NoopAccessors implements INoopAccessors {\n    public series: any;\n    public data: any;\n\n    constructor() {\n        this.series = undefined;\n        this.data = undefined;\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPopoverPluginConfig.html":{"url":"interfaces/IPopoverPluginConfig.html","title":"interface - IPopoverPluginConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IPopoverPluginConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/chart-popover-plugin.ts\n        \n\n            \n                Description\n            \n            \n                Configuration for the popover plugin \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        eventStreamId\n                                \n                                \n                                            Optional\n                                        interactionType\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        eventStreamId\n                                    \n                                \n                                \n                                    \n                                        eventStreamId:      | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :      | \n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    ID of the event stream the plugin will respond to \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        interactionType\n                                    \n                                \n                                \n                                    \n                                        interactionType:         InteractionType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         InteractionType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The type of interaction that will trigger the showing and hiding of the popovers \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import defaultsDeep from \"lodash/defaultsDeep\";\nimport pickBy from \"lodash/pickBy\";\nimport values from \"lodash/values\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\nimport { INTERACTION_DATA_POINTS_EVENT, INTERACTION_DATA_POINT_EVENT } from \"../../constants\";\nimport { ChartPlugin } from \"../common/chart-plugin\";\nimport { IChartEvent, IDataPoint, IDataPointsPayload, InteractionType } from \"../common/types\";\n\nimport { IElementPosition } from \"./types\";\n\n/** Configuration for the popover plugin */\nexport interface IPopoverPluginConfig {\n    /** ID of the event stream the plugin will respond to */\n    eventStreamId?: typeof INTERACTION_DATA_POINTS_EVENT | typeof INTERACTION_DATA_POINT_EVENT;\n    /** The type of interaction that will trigger the showing and hiding of the popovers */\n    interactionType?: InteractionType;\n}\n\n/**\n * This plugin listens for the INTERACTION_DATA_POINTS_EVENT by default and transforms received data into\n * popover inputs. The listened event can be configured using the 'config.eventStreamId' property.\n * The actual popover is handled by the ChartPopoverComponent.\n */\nexport class ChartPopoverPlugin extends ChartPlugin {\n    /** Info about the data point(s) received in the most recent interaction event */\n    public dataPoints: IDataPointsPayload;\n    /** Emits the popover's target position */\n    public updatePositionSubject = new Subject();\n    /** Emits an event indicating the popover should open */\n    public openPopoverSubject = new Subject();\n    /** Emits an event indicating the popover should close */\n    public closePopoverSubject = new Subject();\n    /** The target position of the popover */\n    public popoverTargetPosition: IElementPosition = {\n        top: 0,\n        left: 0,\n        width: 0,\n        height: 0,\n    };\n    /** The default plugin configuration */\n    public DEFAULT_CONFIG: IPopoverPluginConfig = {\n        eventStreamId: INTERACTION_DATA_POINTS_EVENT,\n        interactionType: InteractionType.MouseMove,\n    };\n\n    private isOpen = false;\n    private destroy$ = new Subject();\n\n    constructor(public config: IPopoverPluginConfig = {}) {\n        super();\n        this.config = defaultsDeep(this.config, this.DEFAULT_CONFIG);\n    }\n\n    public initialize(): void {\n        this.chart.getEventBus().getStream(this.config.eventStreamId as string).pipe(\n            takeUntil(this.destroy$)\n        ).subscribe((event: IChartEvent) => {\n            if (event.data.interactionType === this.config.interactionType) {\n                // here we handle data either of type IInteractionDataPointsEvent or IInteractionDataPointEvent\n                const dataPoints: IDataPointsPayload = event.data.dataPoints ?? { [event.data.dataPoint.seriesId]: event.data.dataPoint };\n                this.processDataPoints(dataPoints);\n            }\n        });\n    }\n\n    public destroy(): void {\n        if (this.updatePositionSubject) {\n            this.updatePositionSubject.complete();\n        }\n        if (this.openPopoverSubject) {\n            this.openPopoverSubject.complete();\n        }\n        if (this.closePopoverSubject) {\n            this.closePopoverSubject.complete();\n        }\n        if (this.destroy$) {\n            this.destroy$.next();\n            this.destroy$.complete();\n        }\n    }\n\n    protected getAbsolutePosition(valuesArray: any[]) {\n        const chartElement: any = this.chart.target?.node()?.parentNode; // the one above svg\n\n        if (!chartElement) {\n            throw new Error(\"Chart parent node is not defined\");\n        }\n\n        const dataPointsLeft = Math.min(...valuesArray.map(d => d.position.x));\n        const left = chartElement.offsetLeft + this.chart.getGrid().config().dimension.margin.left + dataPointsLeft;\n        const top = chartElement.offsetTop + this.chart.getGrid().config().dimension.margin.top;\n        // area for popovers is enlarged to cover the whole chart (top to bottom),\n        // so that we avoid collision of chart visualization and popover (by UX request)\n        return {\n            top: top,\n            left: left,\n            height: chartElement.offsetHeight,\n            width: Math.max(...valuesArray.map(d => d.position.x + (d.position.width || 0))) - dataPointsLeft,\n        };\n    }\n\n    private processDataPoints(dataPoints: IDataPointsPayload) {\n        const validDataPoints = pickBy(dataPoints, (d: IDataPoint) => d.index >= 0 && d.position);\n        const validDataPointsValues = values(validDataPoints);\n        if (validDataPointsValues.length > 0) {\n            this.popoverTargetPosition = this.getAbsolutePosition(validDataPointsValues);\n            this.dataPoints = validDataPoints;\n            // timeout is needed in order to successfully open popover on initial hover over the chart\n            setTimeout(() => {\n                this.updatePositionSubject.next(this.popoverTargetPosition);\n                if (!this.isOpen) {\n                    this.isOpen = true;\n                    this.openPopoverSubject.next();\n                }\n            });\n\n        } else {\n            // timeout is needed for symmetry of timing with above timeout for opening the popover\n            setTimeout(() => {\n                this.closePopoverSubject.next();\n                this.isOpen = false;\n            });\n        }\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPosition.html":{"url":"interfaces/IPosition.html","title":"interface - IPosition","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IPosition\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                Position on the chart\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        height\n                                \n                                \n                                            Optional\n                                        width\n                                \n                                \n                                        x\n                                \n                                \n                                        y\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                    \n                                \n                                \n                                    \n                                        height:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                    \n                                \n                                \n                                    \n                                        width:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig {\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRadialAccessors.html":{"url":"interfaces/IRadialAccessors.html","title":"interface - IRadialAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRadialAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/radial/accessors/radial-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                                \n                                        series\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         IRadialDataAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IRadialDataAccessors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        series\n                                    \n                                \n                                \n                                    \n                                        series:         IRadialSeriesAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IRadialSeriesAccessors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { defaultColorProvider } from \"../../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, SeriesAccessor } from \"../../../core/common/types\";\n\nexport interface IRadialDataAccessors {\n    value: DataAccessor;\n    color?: DataAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface IRadialSeriesAccessors {\n    color?: SeriesAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: SeriesAccessor | undefined;\n}\n\nexport interface IRadialAccessors extends IAccessors {\n    data: IRadialDataAccessors;\n    series: IRadialSeriesAccessors;\n}\n\nexport class RadialAccessors implements IRadialAccessors {\n    data: IRadialDataAccessors;\n    series: IRadialSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider()) {\n        this.data = {\n            value: (d: any) => Number.isFinite(d) ? d : d.value,\n        };\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n        };\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRadialDataAccessors.html":{"url":"interfaces/IRadialDataAccessors.html","title":"interface - IRadialDataAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRadialDataAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/radial/accessors/radial-accessors.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        color\n                                \n                                \n                                        value\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        DataAccessor | undefined\n\n                    \n                \n                        \n                            \n                                Defined in src/renderers/radial/accessors/radial-accessors.ts:6\n                            \n                        \n                \n                    \n                        Additional custom keys to match the base interface \n\n                    \n                \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                    \n                                \n                                \n                                    \n                                        color:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                    \n                                \n                                \n                                    \n                                        value:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { defaultColorProvider } from \"../../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, SeriesAccessor } from \"../../../core/common/types\";\n\nexport interface IRadialDataAccessors {\n    value: DataAccessor;\n    color?: DataAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface IRadialSeriesAccessors {\n    color?: SeriesAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: SeriesAccessor | undefined;\n}\n\nexport interface IRadialAccessors extends IAccessors {\n    data: IRadialDataAccessors;\n    series: IRadialSeriesAccessors;\n}\n\nexport class RadialAccessors implements IRadialAccessors {\n    data: IRadialDataAccessors;\n    series: IRadialSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider()) {\n        this.data = {\n            value: (d: any) => Number.isFinite(d) ? d : d.value,\n        };\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n        };\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRadialRendererConfig.html":{"url":"interfaces/IRadialRendererConfig.html","title":"interface - IRadialRendererConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRadialRendererConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IRendererConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        annularGrowth\n                                \n                                \n                                            Optional\n                                        annularPadding\n                                \n                                \n                                            Optional\n                                        annularWidth\n                                \n                                \n                                            Optional\n                                        cursor\n                                \n                                \n                                            Optional\n                                        enableDataPointHighlighting\n                                \n                                \n                                            Optional\n                                        enableSeriesHighlighting\n                                \n                                \n                                            Optional\n                                        maxThickness\n                                \n                                \n                                            Optional\n                                        strokeWidth\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        annularGrowth\n                                    \n                                \n                                \n                                    \n                                        annularGrowth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        annularPadding\n                                    \n                                \n                                \n                                    \n                                        annularPadding:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        annularWidth\n                                    \n                                \n                                \n                                    \n                                        annularWidth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cursor\n                                    \n                                \n                                \n                                    \n                                        cursor:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enableDataPointHighlighting\n                                    \n                                \n                                \n                                    \n                                        enableDataPointHighlighting:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enableSeriesHighlighting\n                                    \n                                \n                                \n                                    \n                                        enableSeriesHighlighting:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxThickness\n                                    \n                                \n                                \n                                    \n                                        maxThickness:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    annularGrowth is a percentage value to define annular width automatically.\nIt will grow until it reaches maxThickness.\nSet one to 0 to use annularWidth constant value instead \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        strokeWidth\n                                    \n                                \n                                \n                                    \n                                        strokeWidth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig {\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRadialScales.html":{"url":"interfaces/IRadialScales.html","title":"interface - IRadialScales","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRadialScales\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/scales/types.ts\n        \n\n\n            \n                Extends\n            \n            \n                        Scales\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        r\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        r\n                                    \n                                \n                                \n                                    \n                                        r:         IScale\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IScale\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { AxisScale } from \"d3-axis\";\n\nimport { IAccessors, IChartSeries } from \"../types\";\n\n/** Domain for series with empty or null data */\nexport const EMPTY_CONTINUOUS_DOMAIN = [0, 0];\n/** A reasonable non-data-driven domain for charts  */\nexport const NORMALIZED_DOMAIN = [0, 1];\n\n/** Signature for domain calculator */\nexport type DomainCalculator = (chartSeriesSet: IChartSeries[], scaleId: string, scale: IScale) => any[];\n\n/** Interface for scale formatters */\nexport interface IFormatters {\n    /** Formatter for tick labels */\n    tick?: Formatter;\n    /** Additional formatters */\n    [p: string]: Formatter | undefined;\n}\n\n/** Signature for label formatters */\nexport type Formatter = (value: T) => string;\n\n/** Dictionary of scale collections in index and array form */\nexport interface ScalesIndex {\n    [key: string]: {\n        /** Scale collection as an index */\n        index: { [scaleId: string]: IScale };\n        /** Scale collection as an array */\n        list: IScale[];\n    };\n}\n\n/** Dictionary of scales */\nexport type Scales = Record>;\n\nexport interface IXYScales extends Scales {\n    x: IScale;\n    y: IScale;\n}\n\nexport interface IRadialScales extends Scales {\n    r: IScale;\n}\n\n/** Interface for a scale */\nexport interface IScale {\n    /** The scale identifier */\n    readonly id: string;\n    readonly d3Scale: AxisScale; // TODO: maybe AxisScale is to narrow?\n\n    /** If this flag is enabled, the domain of this scale is not recalculated */\n    isDomainFixed?: boolean;\n    /** Method used to calculate the scale's domain */\n    domainCalculator?: DomainCalculator;\n    /** The scales formatters */\n    formatters: IFormatters;\n    /** If this flag is enabled, the domain has been recalculated with ticks in mind */\n    __domainCalculatedWithTicks?: boolean;\n\n    /**\n     * Determines if the scale's domain is continuous\n     *\n     * @returns {boolean} true if the scale's domain is continuous (numeric), false otherwise\n     */\n    isContinuous(): boolean;\n\n    /**\n     * Determines if the scale's domain is valid\n     *\n     * @returns {boolean} true if the scale's domain is valid, false otherwise\n     */\n    isDomainValid(): boolean;\n\n    /**\n     * Converts a value to its corresponding coordinate\n     *\n     * @param {T} value The value to be converted\n     * @returns {number} The coordinate corresponding to the specified value\n     */\n    convert(value: T): number;\n\n    /**\n     * Converts a coordinate to its corresponding value\n     *\n     * @param {number} coordinate The coordinate to be converted\n     * @returns {T} The value corresponding to the specified coordinate\n     */\n    invert(coordinate: number): T | undefined;\n\n    /**\n     * Gets the scale's range\n     *\n     * @returns {[number, number]} The scale's range\n     */\n    range(): [number, number];\n\n    /**\n     * Sets the scale's range\n     *\n     * @param {[number, number]} range The scale's new range\n     */\n    range(range: [number, number]): this;\n\n    /**\n     * Gets the scale's domain\n     *\n     * @returns {T[]} The scale's domain\n     */\n    domain(): T[];\n\n    /**\n     * Sets the scale's domain\n     *\n     * @param {T[]} domain The scale's new domain\n     */\n    domain(domain: T[]): this;\n\n    /**\n     * Shorthand method for setting the domain and isDomainFixed at once\n     *\n     * @param {T[]} domain The scale's fixed domain\n     */\n    fixDomain(domain: T[]): void;\n\n    /**\n     * Reverse the scale orientation by toggling the reversed flag\n     */\n    reverse(): this;\n\n    /**\n     * Getter for the reversed flag (see #reverse)\n     */\n    reversed(): boolean;\n\n    /**\n     * Setter for the reversed flag (see #reverse)\n     *\n     * @param reversed\n     */\n    reversed(reversed: boolean): this;\n}\n\n\nexport interface IBandScale extends IScale {\n    bandwidth(): number;\n}\n\nexport function isBandScale(scale: any): scale is IBandScale {\n    return typeof scale.bandwidth === \"function\";\n}\n\nexport interface IHasInnerScale extends IScale {\n    innerScale: IScale;\n}\n\nexport function hasInnerScale(scale: any): scale is IHasInnerScale {\n    return typeof scale.innerScale !== \"undefined\";\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRadialSeriesAccessors.html":{"url":"interfaces/IRadialSeriesAccessors.html","title":"interface - IRadialSeriesAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRadialSeriesAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/radial/accessors/radial-accessors.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        color\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        SeriesAccessor | undefined\n\n                    \n                \n                        \n                            \n                                Defined in src/renderers/radial/accessors/radial-accessors.ts:12\n                            \n                        \n                \n                    \n                        Additional custom keys to match the base interface \n\n                    \n                \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                    \n                                \n                                \n                                    \n                                        color:         SeriesAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SeriesAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { defaultColorProvider } from \"../../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, SeriesAccessor } from \"../../../core/common/types\";\n\nexport interface IRadialDataAccessors {\n    value: DataAccessor;\n    color?: DataAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface IRadialSeriesAccessors {\n    color?: SeriesAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: SeriesAccessor | undefined;\n}\n\nexport interface IRadialAccessors extends IAccessors {\n    data: IRadialDataAccessors;\n    series: IRadialSeriesAccessors;\n}\n\nexport class RadialAccessors implements IRadialAccessors {\n    data: IRadialDataAccessors;\n    series: IRadialSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider()) {\n        this.data = {\n            value: (d: any) => Number.isFinite(d) ? d : d.value,\n        };\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n        };\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRectangleAccessors.html":{"url":"interfaces/IRectangleAccessors.html","title":"interface - IRectangleAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRectangleAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/accessors/rectangle-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                                \n                                        series\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         IRectangleDataAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IRectangleDataAccessors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        series\n                                    \n                                \n                                \n                                    \n                                        series:         IRectangleSeriesAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IRectangleSeriesAccessors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DataAccessor, IAccessors, IDataAccessors, ISeriesAccessors, SeriesAccessor } from \"../../core/common/types\";\n\nexport interface IStartEndRangeAccessors extends IDataAccessors {\n    start: DataAccessor;\n    end: DataAccessor;\n}\n\nexport interface IValueThicknessAccessors extends IDataAccessors {\n    value: DataAccessor;\n    thickness: DataAccessor;\n}\n\nexport interface IRectangleDataAccessors extends IDataAccessors {\n    startX?: DataAccessor;\n    endX?: DataAccessor;\n    thicknessX?: DataAccessor;\n\n    startY?: DataAccessor;\n    endY?: DataAccessor;\n    thicknessY?: DataAccessor;\n}\n\nexport interface IRectangleSeriesAccessors extends ISeriesAccessors {\n    color?: SeriesAccessor;\n    marker?: SeriesAccessor;\n}\n\nexport interface IRectangleAccessors extends IAccessors {\n    data: IRectangleDataAccessors;\n    series: IRectangleSeriesAccessors;\n}\n\nexport class RectangleAccessors implements IRectangleAccessors {\n    data: IRectangleDataAccessors;\n    series: IRectangleSeriesAccessors;\n\n    constructor() {\n\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRectangleDataAccessors.html":{"url":"interfaces/IRectangleDataAccessors.html","title":"interface - IRectangleDataAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRectangleDataAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/accessors/rectangle-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IDataAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        endX\n                                \n                                \n                                            Optional\n                                        endY\n                                \n                                \n                                            Optional\n                                        startX\n                                \n                                \n                                            Optional\n                                        startY\n                                \n                                \n                                            Optional\n                                        thicknessX\n                                \n                                \n                                            Optional\n                                        thicknessY\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        endX\n                                    \n                                \n                                \n                                    \n                                        endX:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        endY\n                                    \n                                \n                                \n                                    \n                                        endY:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        startX\n                                    \n                                \n                                \n                                    \n                                        startX:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        startY\n                                    \n                                \n                                \n                                    \n                                        startY:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        thicknessX\n                                    \n                                \n                                \n                                    \n                                        thicknessX:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        thicknessY\n                                    \n                                \n                                \n                                    \n                                        thicknessY:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DataAccessor, IAccessors, IDataAccessors, ISeriesAccessors, SeriesAccessor } from \"../../core/common/types\";\n\nexport interface IStartEndRangeAccessors extends IDataAccessors {\n    start: DataAccessor;\n    end: DataAccessor;\n}\n\nexport interface IValueThicknessAccessors extends IDataAccessors {\n    value: DataAccessor;\n    thickness: DataAccessor;\n}\n\nexport interface IRectangleDataAccessors extends IDataAccessors {\n    startX?: DataAccessor;\n    endX?: DataAccessor;\n    thicknessX?: DataAccessor;\n\n    startY?: DataAccessor;\n    endY?: DataAccessor;\n    thicknessY?: DataAccessor;\n}\n\nexport interface IRectangleSeriesAccessors extends ISeriesAccessors {\n    color?: SeriesAccessor;\n    marker?: SeriesAccessor;\n}\n\nexport interface IRectangleAccessors extends IAccessors {\n    data: IRectangleDataAccessors;\n    series: IRectangleSeriesAccessors;\n}\n\nexport class RectangleAccessors implements IRectangleAccessors {\n    data: IRectangleDataAccessors;\n    series: IRectangleSeriesAccessors;\n\n    constructor() {\n\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRectangleSeriesAccessors.html":{"url":"interfaces/IRectangleSeriesAccessors.html","title":"interface - IRectangleSeriesAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRectangleSeriesAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/accessors/rectangle-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        ISeriesAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        color\n                                \n                                \n                                            Optional\n                                        marker\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                    \n                                \n                                \n                                    \n                                        color:         SeriesAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SeriesAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        marker\n                                    \n                                \n                                \n                                    \n                                        marker:         SeriesAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SeriesAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DataAccessor, IAccessors, IDataAccessors, ISeriesAccessors, SeriesAccessor } from \"../../core/common/types\";\n\nexport interface IStartEndRangeAccessors extends IDataAccessors {\n    start: DataAccessor;\n    end: DataAccessor;\n}\n\nexport interface IValueThicknessAccessors extends IDataAccessors {\n    value: DataAccessor;\n    thickness: DataAccessor;\n}\n\nexport interface IRectangleDataAccessors extends IDataAccessors {\n    startX?: DataAccessor;\n    endX?: DataAccessor;\n    thicknessX?: DataAccessor;\n\n    startY?: DataAccessor;\n    endY?: DataAccessor;\n    thicknessY?: DataAccessor;\n}\n\nexport interface IRectangleSeriesAccessors extends ISeriesAccessors {\n    color?: SeriesAccessor;\n    marker?: SeriesAccessor;\n}\n\nexport interface IRectangleAccessors extends IAccessors {\n    data: IRectangleDataAccessors;\n    series: IRectangleSeriesAccessors;\n}\n\nexport class RectangleAccessors implements IRectangleAccessors {\n    data: IRectangleDataAccessors;\n    series: IRectangleSeriesAccessors;\n\n    constructor() {\n\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRenderContainers.html":{"url":"interfaces/IRenderContainers.html","title":"interface - IRenderContainers","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRenderContainers\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                Dictionary of render container name to render container\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [name: string]:        D3Selection\n\n                    \n                \n                        \n                            \n                                Defined in src/core/common/types.ts:248\n                            \n                        \n                \n                    \n                        Container name as key to render container \n\n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig {\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRenderSeries.html":{"url":"interfaces/IRenderSeries.html","title":"interface - IRenderSeries","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRenderSeries\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        containers\n                                \n                                \n                                        dataSeries\n                                \n                                \n                                        scales\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        containers\n                                    \n                                \n                                \n                                    \n                                        containers:         IRenderContainers\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IRenderContainers\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dataSeries\n                                    \n                                \n                                \n                                    \n                                        dataSeries:         IDataSeries\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDataSeries\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scales\n                                    \n                                \n                                \n                                    \n                                        scales:         Scales\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Scales\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { CurveFactory } from \"d3-shape\";\nimport { Subject } from \"rxjs\";\n\nimport { Renderer } from \"../core/common/renderer\";\nimport { Scales } from \"../core/common/scales/types\";\nimport { IAccessors, IDataSeries, IRenderContainers, IRendererConfig, IRendererEventPayload } from \"../core/common/types\";\n\nimport { IRectangleAccessors } from \"./accessors/rectangle-accessors\";\nimport { BarRenderer } from \"./bar/bar-renderer\";\nimport { ILineAccessors } from \"./line/line-accessors\";\nimport { LineRenderer } from \"./line/line-renderer\";\n\nexport enum RenderState {\n    hidden = \"hidden\",\n    deemphasized = \"deemphasized\",\n    emphasized = \"emphasized\",\n    default = \"default\",\n}\n\nexport enum RenderLayerName {\n    background = \"background\",\n    data = \"data\",\n    unclippedData = \"unclipped-data\",\n    foreground = \"foreground\",\n}\n\n/** The configuration interface for marker interaction */\nexport interface IMarkerInteractionConfig {\n    /** Enables mouse events on data point markers */\n    enabled: boolean;\n    /** Enables the pointer style mouse cursor when data point markers are hovered */\n    clickable?: boolean;\n}\n\n/** The configuration interface for the enhanced line caps */\nexport interface IEnhancedLineCapConfig {\n    /** Set the stroke color */\n    stroke?: string;\n    /** Set the stroke width in pixels */\n    strokeWidth?: number;\n    /** Set the fill color */\n    fill?: string;\n    /** Set the radius in pixels */\n    radius?: number;\n}\n\n/** The configuration interface for the line renderer */\nexport interface ILineRendererConfig extends IRendererConfig {\n    /** Set the width of the line in pixels */\n    strokeWidth?: number;\n    /** Set the stroke-dasharray of the line, e.g. \"1,1\", \"2,2\", etc. */\n    strokeStyle?: string;\n    /** Set the stroke-linecap of the line, e.g. \"round\" */\n    strokeLinecap?: string;\n    /** Set the d3 curve algorithm to be used for drawing the lines */\n    curveType?: CurveFactory;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. LineSelectSeriesInteractionStrategy */\n    interactionStrategy?: IHighlightStrategy;\n    /** Configure the interaction behavior for markers */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** Set whether enhanced line caps should be displayed */\n    useEnhancedLineCaps?: boolean;\n    /** Optionally configure enhanced line caps. Prerequisite: 'useEnhancedLineCaps' is set to true */\n    enhancedLineCap?: IEnhancedLineCapConfig;\n}\n\n/** The configuration interface for the bar renderer */\nexport interface IBarRendererConfig extends IRendererConfig {\n    /** Set the padding on both sides of each bar */\n    padding?: number;\n    /** Set the class name to apply custom styles to the bars */\n    barClass?: string;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. BarHighlightStrategy */\n    highlightStrategy?: IHighlightStrategy;\n    /** Set the mouse cursor style to use when hovering over individual bars */\n    cursor?: string;\n    /** Enables pointer events on the bars */\n    pointerEvents?: boolean;\n    /** Set the stroke width in pixels */\n    strokeWidth?: number;\n    /** Enable the minimum bar thickness (BarRenderer.MIN_BAR_THICKNESS) */\n    enableMinBarThickness?: boolean;\n}\n\n/** The configuration interface for the area renderer */\nexport interface IAreaRendererConfig extends IRendererConfig {\n    /** Set the d3 curve algorithm to be used for drawing the area boundaries */\n    curveType?: CurveFactory;\n    /** Set the class name to apply custom styles to the areas */\n    areaClass?: string;\n    /** Enables the pointer cursor when data point markers are hovered */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** The width of the area path's stroke in pixels. Default is 1. */\n    strokeWidth?: number;\n}\n\nexport interface IRenderSeries {\n    dataSeries: IDataSeries;\n    containers: IRenderContainers;\n    scales: Scales;\n}\n\nexport interface IHighlightStrategy> {\n\n    getDataPointIndex(renderer: T, series: IDataSeries, values: { [p: string]: any }, scales: Scales): number;\n\n    highlightDataPoint(renderer: T, renderSeries: IRenderSeries,\n                       dataPointIndex: number, rendererSubject: Subject): void;\n\n    draw(renderer: T, renderSeries: IRenderSeries, rendererSubject: Subject): void;\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRenderStateData.html":{"url":"interfaces/IRenderStateData.html","title":"interface - IRenderStateData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRenderStateData\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                Information about the render state of a series\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        series\n                                \n                                \n                                        seriesId\n                                \n                                \n                                        state\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        series\n                                    \n                                \n                                \n                                    \n                                        series:         IChartSeries\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IChartSeries\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Series \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        seriesId\n                                    \n                                \n                                \n                                    \n                                        seriesId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Series identifier \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                    \n                                \n                                \n                                    \n                                        state:         RenderState\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         RenderState\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Series render state \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig {\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRenderStatesIndex.html":{"url":"interfaces/IRenderStatesIndex.html","title":"interface - IRenderStatesIndex","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRenderStatesIndex\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/chart-assists/types.ts\n        \n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [seriesId: string]:        ChartAssistRenderStateData\n\n                    \n                \n                        \n                            \n                                Defined in src/core/chart-assists/types.ts:70\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import { RenderState } from \"../../renderers/types\";\nimport { IAccessors, IChart, IChartAssistSeries, IChartSeries, IRenderStateData } from \"../common/types\";\n\n/**\n * Interface representing the spark chart assist's\n * association between one of its charts and a series set\n */\nexport interface ISpark {\n    chartSeriesSet: IChartAssistSeries[];\n    id?: string;\n    chart?: IChart;\n}\n\n/**\n * Interface representing an assistant that aids in chart usage\n */\nexport interface IChartAssist {\n    /**\n     * Updates the series set for the chart assist's associated chart\n     *\n     * @param inputSeriesSet The updated set of series\n     */\n    update(inputSeriesSet: IChartAssistSeries[]): void;\n\n    /**\n     * Gets the current highlighted value for the specified series\n     *\n     * @param {IChartSeries} chartSeries The chart series to get the highlighted value for\n     * @param {string} scaleKey The key for the datapoint value scale\n     * @param {string} [formatterName] The name of the formatter if a custom formatter name is set on the scale\n     *\n     * @returns {string} The highlighted value\n     */\n    getHighlightedValue(chartSeries: IChartSeries, scaleKey: string, formatterName?: string): string | number | undefined;\n\n    /**\n     * Returns visible series that are represented by a legend\n     */\n    getVisibleSeriesWithLegend(): IChartAssistSeries[];\n}\n\n/** Event types that can be emitted from a chart assist */\nexport enum ChartAssistEventType {\n    ToggleSeries = \"ToggleSeries\",\n    ResetVisibleSeries = \"ResetVisibleSeries\",\n    EmphasizeSeries = \"EmphasizeSeries\",\n}\n\n/** Interface for chart assist events */\nexport interface IChartAssistEvent {\n    type: ChartAssistEventType;\n    payload: any;\n}\n\n/**\n * Legend interaction assist uses this class to present the state that consists of emphasisState+visible as one state\n */\nexport class ChartAssistRenderStateData implements IRenderStateData {\n    constructor(public seriesId: string,\n                public series: IChartAssistSeries,\n                public emphasisState = RenderState.default,\n                public visible = true) {\n    }\n\n    get state(): RenderState {\n        return this.visible ? this.emphasisState : RenderState.hidden;\n    }\n}\n\nexport interface IRenderStatesIndex {\n    [seriesId: string]: ChartAssistRenderStateData;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRendererConfig.html":{"url":"interfaces/IRendererConfig.html","title":"interface - IRendererConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRendererConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        ignoreForDomainCalculation\n                                \n                                \n                                            Optional\n                                        interactive\n                                \n                                \n                                            Optional\n                                        stateStyles\n                                \n                                \n                                            Optional\n                                        transitionDuration\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ignoreForDomainCalculation\n                                    \n                                \n                                \n                                    \n                                        ignoreForDomainCalculation:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Excludes series from scale domain calculations \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        interactive\n                                    \n                                \n                                \n                                    \n                                        interactive:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stateStyles\n                                    \n                                \n                                \n                                    \n                                        stateStyles:         Record>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Record>\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        transitionDuration\n                                    \n                                \n                                \n                                    \n                                        transitionDuration:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig {\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRendererEventPayload.html":{"url":"interfaces/IRendererEventPayload.html","title":"interface - IRendererEventPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRendererEventPayload\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                Payload for events regarding a data point\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                                \n                                        eventName\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Information about the data point \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        eventName\n                                    \n                                \n                                \n                                    \n                                        eventName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Name of the event \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig {\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IScale.html":{"url":"interfaces/IScale.html","title":"interface - IScale","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IScale\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/scales/types.ts\n        \n\n            \n                Description\n            \n            \n                Interface for a scale \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        __domainCalculatedWithTicks\n                                \n                                \n                                        d3Scale\n                                \n                                \n                                            Optional\n                                        domainCalculator\n                                \n                                \n                                        formatters\n                                \n                                \n                                        id\n                                \n                                \n                                            Optional\n                                        isDomainFixed\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    convert\n                                \n                                \n                                    domain\n                                \n                                \n                                    domain\n                                \n                                \n                                    fixDomain\n                                \n                                \n                                    invert\n                                \n                                \n                                    isContinuous\n                                \n                                \n                                    isDomainValid\n                                \n                                \n                                    range\n                                \n                                \n                                    range\n                                \n                                \n                                    reverse\n                                \n                                \n                                    reversed\n                                \n                                \n                                    reversed\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            convert\n                        \n                        \n                    \n                \n            \n            \n                \nconvert(value: T)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/types.ts:81\n                \n            \n\n\n            \n                \n                    Converts a value to its corresponding coordinate\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The value to be converted\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The coordinate corresponding to the specified value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \ndomain()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/types.ts:110\n                \n            \n\n\n            \n                \n                    Gets the scale's domain\n\n\n                    \n                    \n                    \n                        Returns :     T[]\n\n                    \n                    \n                        The scale's domain\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \ndomain(domain: T[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/types.ts:117\n                \n            \n\n\n            \n                \n                    Sets the scale's domain\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scale's new domain\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            fixDomain\n                        \n                        \n                    \n                \n            \n            \n                \nfixDomain(domain: T[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/types.ts:124\n                \n            \n\n\n            \n                \n                    Shorthand method for setting the domain and isDomainFixed at once\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scale's fixed domain\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            invert\n                        \n                        \n                    \n                \n            \n            \n                \ninvert(coordinate: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/types.ts:89\n                \n            \n\n\n            \n                \n                    Converts a coordinate to its corresponding value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    coordinate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The coordinate to be converted\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        The value corresponding to the specified coordinate\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isContinuous\n                        \n                        \n                    \n                \n            \n            \n                \nisContinuous()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/types.ts:66\n                \n            \n\n\n            \n                \n                    Determines if the scale's domain is continuous\n\n\n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        true if the scale's domain is continuous (numeric), false otherwise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isDomainValid\n                        \n                        \n                    \n                \n            \n            \n                \nisDomainValid()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/types.ts:73\n                \n            \n\n\n            \n                \n                    Determines if the scale's domain is valid\n\n\n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        true if the scale's domain is valid, false otherwise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            range\n                        \n                        \n                    \n                \n            \n            \n                \nrange()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/types.ts:96\n                \n            \n\n\n            \n                \n                    Gets the scale's range\n\n\n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            range\n                        \n                        \n                    \n                \n            \n            \n                \nrange(range: [number, number])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/types.ts:103\n                \n            \n\n\n            \n                \n                    Sets the scale's range\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                            [number, number]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scale's new range\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reverse\n                        \n                        \n                    \n                \n            \n            \n                \nreverse()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/types.ts:129\n                \n            \n\n\n            \n                \n                    Reverse the scale orientation by toggling the reversed flag\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \nreversed()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/types.ts:134\n                \n            \n\n\n            \n                \n                    Getter for the reversed flag (see #reverse)\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \nreversed(reversed: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/types.ts:141\n                \n            \n\n\n            \n                \n                    Setter for the reversed flag (see #reverse)\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reversed\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        __domainCalculatedWithTicks\n                                    \n                                \n                                \n                                    \n                                        __domainCalculatedWithTicks:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If this flag is enabled, the domain has been recalculated with ticks in mind \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        d3Scale\n                                    \n                                \n                                \n                                    \n                                        d3Scale:         AxisScale\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AxisScale\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        domainCalculator\n                                    \n                                \n                                \n                                    \n                                        domainCalculator:         DomainCalculator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DomainCalculator\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Method used to calculate the scale's domain \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        formatters\n                                    \n                                \n                                \n                                    \n                                        formatters:         IFormatters\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IFormatters\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The scales formatters \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The scale identifier \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isDomainFixed\n                                    \n                                \n                                \n                                    \n                                        isDomainFixed:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If this flag is enabled, the domain of this scale is not recalculated \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { AxisScale } from \"d3-axis\";\n\nimport { IAccessors, IChartSeries } from \"../types\";\n\n/** Domain for series with empty or null data */\nexport const EMPTY_CONTINUOUS_DOMAIN = [0, 0];\n/** A reasonable non-data-driven domain for charts  */\nexport const NORMALIZED_DOMAIN = [0, 1];\n\n/** Signature for domain calculator */\nexport type DomainCalculator = (chartSeriesSet: IChartSeries[], scaleId: string, scale: IScale) => any[];\n\n/** Interface for scale formatters */\nexport interface IFormatters {\n    /** Formatter for tick labels */\n    tick?: Formatter;\n    /** Additional formatters */\n    [p: string]: Formatter | undefined;\n}\n\n/** Signature for label formatters */\nexport type Formatter = (value: T) => string;\n\n/** Dictionary of scale collections in index and array form */\nexport interface ScalesIndex {\n    [key: string]: {\n        /** Scale collection as an index */\n        index: { [scaleId: string]: IScale };\n        /** Scale collection as an array */\n        list: IScale[];\n    };\n}\n\n/** Dictionary of scales */\nexport type Scales = Record>;\n\nexport interface IXYScales extends Scales {\n    x: IScale;\n    y: IScale;\n}\n\nexport interface IRadialScales extends Scales {\n    r: IScale;\n}\n\n/** Interface for a scale */\nexport interface IScale {\n    /** The scale identifier */\n    readonly id: string;\n    readonly d3Scale: AxisScale; // TODO: maybe AxisScale is to narrow?\n\n    /** If this flag is enabled, the domain of this scale is not recalculated */\n    isDomainFixed?: boolean;\n    /** Method used to calculate the scale's domain */\n    domainCalculator?: DomainCalculator;\n    /** The scales formatters */\n    formatters: IFormatters;\n    /** If this flag is enabled, the domain has been recalculated with ticks in mind */\n    __domainCalculatedWithTicks?: boolean;\n\n    /**\n     * Determines if the scale's domain is continuous\n     *\n     * @returns {boolean} true if the scale's domain is continuous (numeric), false otherwise\n     */\n    isContinuous(): boolean;\n\n    /**\n     * Determines if the scale's domain is valid\n     *\n     * @returns {boolean} true if the scale's domain is valid, false otherwise\n     */\n    isDomainValid(): boolean;\n\n    /**\n     * Converts a value to its corresponding coordinate\n     *\n     * @param {T} value The value to be converted\n     * @returns {number} The coordinate corresponding to the specified value\n     */\n    convert(value: T): number;\n\n    /**\n     * Converts a coordinate to its corresponding value\n     *\n     * @param {number} coordinate The coordinate to be converted\n     * @returns {T} The value corresponding to the specified coordinate\n     */\n    invert(coordinate: number): T | undefined;\n\n    /**\n     * Gets the scale's range\n     *\n     * @returns {[number, number]} The scale's range\n     */\n    range(): [number, number];\n\n    /**\n     * Sets the scale's range\n     *\n     * @param {[number, number]} range The scale's new range\n     */\n    range(range: [number, number]): this;\n\n    /**\n     * Gets the scale's domain\n     *\n     * @returns {T[]} The scale's domain\n     */\n    domain(): T[];\n\n    /**\n     * Sets the scale's domain\n     *\n     * @param {T[]} domain The scale's new domain\n     */\n    domain(domain: T[]): this;\n\n    /**\n     * Shorthand method for setting the domain and isDomainFixed at once\n     *\n     * @param {T[]} domain The scale's fixed domain\n     */\n    fixDomain(domain: T[]): void;\n\n    /**\n     * Reverse the scale orientation by toggling the reversed flag\n     */\n    reverse(): this;\n\n    /**\n     * Getter for the reversed flag (see #reverse)\n     */\n    reversed(): boolean;\n\n    /**\n     * Setter for the reversed flag (see #reverse)\n     *\n     * @param reversed\n     */\n    reversed(reversed: boolean): this;\n}\n\n\nexport interface IBandScale extends IScale {\n    bandwidth(): number;\n}\n\nexport function isBandScale(scale: any): scale is IBandScale {\n    return typeof scale.bandwidth === \"function\";\n}\n\nexport interface IHasInnerScale extends IScale {\n    innerScale: IScale;\n}\n\nexport function hasInnerScale(scale: any): scale is IHasInnerScale {\n    return typeof scale.innerScale !== \"undefined\";\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IScaleSVGElement.html":{"url":"interfaces/IScaleSVGElement.html","title":"interface - IScaleSVGElement","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IScaleSVGElement\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/xy-grid.ts\n        \n\n            \n                Description\n            \n            \n                Locally used interface for passing scales and associated SVG elements\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        element\n                                \n                                \n                                        scaleId\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        element\n                                    \n                                \n                                \n                                    \n                                        element:         D3Selection\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         D3Selection\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scaleId\n                                    \n                                \n                                \n                                    \n                                        scaleId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { axisBottom, axisLeft, axisRight, axisTop } from \"d3-axis\";\nimport { select } from \"d3-selection\";\nimport clone from \"lodash/clone\";\nimport each from \"lodash/each\";\nimport isEmpty from \"lodash/isEmpty\";\nimport isNil from \"lodash/isNil\";\nimport isUndefined from \"lodash/isUndefined\";\nimport uniq from \"lodash/uniq\";\nimport { takeUntil } from \"rxjs/operators\";\n\nimport { AXES_STYLE_CHANGE_EVENT, DESTROY_EVENT, IGNORE_INTERACTION_CLASS, SERIES_STATE_CHANGE_EVENT } from \"../../constants\";\nimport { RenderState } from \"../../renderers/types\";\nimport { MouseInteractiveArea } from \"../common/mouse-interactive-area\";\nimport { BandScale } from \"../common/scales/band-scale\";\nimport { getAutomaticDomain, getAutomaticDomainWithTicks } from \"../common/scales/domain-calculation/automatic-domain\";\nimport { LinearScale } from \"../common/scales/linear-scale\";\nimport { IBandScale, IScale, ScalesIndex } from \"../common/scales/types\";\nimport { D3Selection, IAxesStyleChangeEventPayload, IChart, IChartEvent, IChartPlugin, IRenderStateData } from \"../common/types\";\nimport { InteractionLabelPlugin } from \"../plugins/interaction/interaction-label-plugin\";\nimport { InteractionLinePlugin } from \"../plugins/interaction/interaction-line-plugin\";\nimport { MouseInteractiveAreaPlugin } from \"../plugins/mouse-interactive-area-plugin\";\n\nimport { XYGridConfig } from \"./config/xy-grid-config\";\nimport { Grid } from \"./grid\";\nimport { IAllAround, IAxis, IAxisConfig, IDimensionConfig, IGrid, IXYGridConfig, TextOverflowHandler } from \"./types\";\n\n/**\n * Locally used interface for passing scales and associated SVG elements\n *\n * @internal\n */\ninterface IScaleSVGElement {\n    scaleId: string;\n    element: D3Selection;\n}\n\nexport class XYGrid extends Grid implements IGrid {\n    public static TICK_LABEL_OVERFLOW_DEBOUNCE_INTERVAL = 200;\n\n    protected axisX: IAxis = {};\n    protected axisYLeft: IAxis = {};\n    protected axisYRight: IAxis = {};\n    protected gridY: IAxis = {};\n    protected gridX: IAxis = {};\n\n    private _bottomScaleId?: string;\n    private _leftScaleId?: string;\n    private _rightScaleId: string;\n    private reconcileMarginsDebounce: any;\n    // map of scale id to pending debounce timeout\n    private handleTickLabelOverflowDebounceIndex: Record = {};\n\n    /**\n     * Returns the id of the bottom axis scale\n     */\n    public get bottomScaleId(): string | undefined {\n        if (this._bottomScaleId) {\n            return this._bottomScaleId;\n        }\n        if (!isEmpty(this.scales)) {\n            return this.scales[\"x\"].list[0].id;\n        }\n    }\n\n    /**\n     * Sets the id of the bottom axis scale\n     */\n    public set bottomScaleId(id: string | undefined) {\n        this._bottomScaleId = id;\n    }\n\n    /**\n     * Returns the id of the left axis scale\n     */\n    public get leftScaleId(): string | undefined {\n        if (this._leftScaleId) {\n            return this._leftScaleId;\n        }\n        if (!isEmpty(this.scales)) {\n            return this.scales[\"y\"].list[0].id;\n        }\n    }\n\n    /**\n     * Sets the id of the left axis scale\n     */\n    public set leftScaleId(id: string | undefined) {\n        this._leftScaleId = id;\n    }\n\n    /**\n     * Returns the id of the right axis scale\n     */\n    public get rightScaleId() {\n        return this._rightScaleId;\n    }\n\n    /**\n     * Sets the id of the right axis scale\n     */\n    public set rightScaleId(id: string) {\n        this._rightScaleId = id;\n    }\n\n    /** @ignore */\n    public set scales(scales: ScalesIndex) {\n        this._scales = scales;\n\n        if (this._scales) {\n            Object.keys(this._scales).forEach((scaleKey) => {\n                // Defaulting to left\n                let config: IAxisConfig = this.config().axis.left;\n                let axisGenerator: any;\n                if (scaleKey !== \"x\" && scaleKey !== \"y\") {\n                    return;\n                }\n                this._scales[scaleKey]?.list?.filter((scale) => scale instanceof LinearScale).forEach((scale) => {\n                    if (scale?.id === this.leftScaleId) {\n                        config = this.config().axis.left;\n                        axisGenerator = axisLeft;\n                    } else if (scale?.id === this.rightScaleId) {\n                        config = this.config().axis.right;\n                        axisGenerator = axisRight;\n                    } else if (scale?.id === this.bottomScaleId) {\n                        config = this.config().axis.bottom;\n                        axisGenerator = axisBottom;\n                    }\n                    if (scale.domainCalculator === getAutomaticDomain && config.gridTicks) {\n                        scale.__domainCalculatedWithTicks = true;\n                        scale.domainCalculator = getAutomaticDomainWithTicks(config, axisGenerator);\n                    }\n                });\n            });\n        }\n    }\n\n    /** @ignore */\n    public get scales(): ScalesIndex {\n        return this._scales;\n    }\n\n    /** See {@link IGrid#config} */\n    public config(): IXYGridConfig;\n    /** See {@link IGrid#config} */\n    public config(config: IXYGridConfig): this;\n    /** See {@link IGrid#config} */\n    public config(config?: IXYGridConfig): any {\n        if (config === undefined) {\n            return this._config;\n        }\n        this._config = config;\n        return this;\n    }\n\n    constructor(config?: IXYGridConfig) {\n        super();\n        this.config(config || new XYGridConfig());\n    }\n\n    /** See {@link IGrid#build} */\n    public build(): IGrid {\n        super.build();\n        if (this.config().interactive) {\n            this.interactiveArea = this.renderingArea;\n        }\n\n        this.buildAxes(this.gridElementsLayer);\n        this.recalculateMargins(this.container);\n\n        const untilDestroy = () => takeUntil(this.eventBus.getStream(DESTROY_EVENT));\n        this.eventBus.getStream(SERIES_STATE_CHANGE_EVENT).pipe(untilDestroy()).subscribe((e: IChartEvent) => {\n            const axesStyles = this.handleSeriesStateChange(e);\n\n            this.eventBus.getStream(AXES_STYLE_CHANGE_EVENT).next({ data: axesStyles } as IChartEvent);\n        });\n\n        return this;\n    }\n\n    /**\n     * Handle axis opacity when emphasizing/deemphasizing chart series\n     *\n     * @param e\n     * @private\n     */\n    public handleSeriesStateChange(e: IChartEvent) {\n        if (!this.rightScaleId) {\n            return;\n        }\n\n        const axes: IScaleSVGElement[] = [\n            { scaleId: this.leftScaleId as string, element: this.axisYLeft.group },\n            { scaleId: this.rightScaleId, element: this.axisYRight?.group },\n        ];\n\n        const axesStyles = this.calculateAxesStyles(e, axes);\n\n        for (const a of axes) {\n            if (a.scaleId) {\n                a.element.attrs(axesStyles[a.scaleId]);\n            }\n        }\n\n        return axesStyles;\n    }\n\n    /**\n     * Return opacity for each axis\n     *\n     * @param e\n     * @param axes\n     * @private\n     */\n    private calculateAxesStyles(e: IChartEvent, axes: IScaleSVGElement[]): Record> {\n        const renderStates = e.data as IRenderStateData[];\n\n        const emphasizedSeries = renderStates\n            .filter(rs => rs.state === RenderState.emphasized && rs.series)\n            .map(rs => rs.series);\n\n        if (emphasizedSeries.length > 0) {\n            const emphasizedYScales = uniq(emphasizedSeries.map(s => s?.scales[\"y\"] as IScale).filter(s => !!s));\n            if (emphasizedYScales.length  {\n                        acc[next.scaleId] = { opacity: emphasizedYScale.id === next.scaleId ? 1 : 0.1 };\n                        return acc;\n                    }, {} as Record>);\n                }\n            }\n            return {};\n        } else {\n            return axes.reduce((acc, next) => {\n                acc[next.scaleId] = { opacity: 1 };\n                return acc;\n            }, {} as Record>);\n        }\n    }\n\n    /** See {@link IGrid#buildPlugins} */\n    public buildPlugins(chart: IChart): IChartPlugin[] {\n        const plugins: IChartPlugin[] = [];\n\n        if (this.config().interactive) {\n            plugins.push(new MouseInteractiveAreaPlugin(\n                new MouseInteractiveArea(this.getLasagna().getContainer(), this.getInteractiveArea(), this.config().cursor)));\n        }\n\n        if (this.config().interactionPlugins) {\n            plugins.push(new InteractionLinePlugin());\n            plugins.push(new InteractionLabelPlugin());\n        }\n\n        return plugins;\n    }\n\n    /** See {@link IGrid#update} */\n    public update(): IGrid {\n        super.update();\n\n        this.updateAxes();\n        this.handleMarginUpdate();\n\n        return this;\n    }\n\n    /** @ignore */\n    public drawTicks(config: IAxisConfig, axis: IAxis, scale: IScale, axisGenerator: any) {\n        if (config.visible) {\n            const bottomLabelAxis = axisGenerator(scale.d3Scale)\n                .ticks(config.approximateTicks)\n                .tickSize(0)\n                .tickFormat(scale.formatters[\"tick\"]);\n\n            axis.labelGroup\n                .call(bottomLabelAxis);\n            let tickAxis;\n            if (scale instanceof BandScale) {\n                tickAxis = axisGenerator(scale.copyToLinear().d3Scale)\n                    .tickSize(config.tickSize)\n                    .tickValues(scale.bandTicks())\n                    .tickFormat(() => \"\");\n            } else {\n                tickAxis = axisGenerator(scale.d3Scale)\n                    .tickSize(config.tickSize)\n                    .tickFormat(() => \"\");\n                tickAxis.ticks(config.approximateTicks);\n            }\n            axis.tickGroup.call(tickAxis);\n\n            this.adjustAxisTicks(axis.labelGroup, scale);\n        } else {\n            axis.labelGroup.selectAll(\"*\").remove();\n            axis.tickGroup.selectAll(\"*\").remove();\n        }\n    }\n\n    /** @ignore */\n    public drawGrids(config: IAxisConfig, axis: IAxis, axisGenerator: any, scale: IScale, size: number) {\n        const modifyZeroLines = (gridGroupSelection: any) =>\n            gridGroupSelection\n                .selectAll(\".tick line\")\n                .classed(\"nui-zero-line\", (d: any) => d === 0);\n\n        const leftGridLines = axisGenerator(scale.d3Scale)\n            .tickSize(size)\n            .tickFormat(() => \"\")\n            .ticks(config.approximateTicks);\n\n        if (config.gridTicks) {\n            const gridSelection = axis.tickGroup.call(leftGridLines);\n            modifyZeroLines(gridSelection);\n        } else {\n            axis.tickGroup.selectAll(\"*\").remove();\n        }\n    }\n\n    /** See {@link IGrid#updateRanges} */\n    public updateRanges(): IGrid {\n        if (isEmpty(this.scales)) {\n            return this;\n        }\n\n        const dimension = this.config().dimension;\n        const padding = dimension.padding;\n\n        if (this.scales.x) {\n            each(this.scales.x.list, xScale => {\n                xScale.range([padding.left, dimension.width() - padding.right]);\n            });\n        }\n        if (this.scales.y) {\n            each(this.scales.y.list, yScale => {\n                yScale.range([dimension.height() - padding.bottom, padding.top]);\n            });\n        }\n\n        super.updateRanges();\n        return this;\n    }\n\n    protected updateXAxis() {\n        const xScale = this.bottomScaleId ? this.scales[\"x\"].index[this.bottomScaleId] : undefined;\n        const axis = this.config().axis;\n\n        if (!xScale) {\n            throw new Error(\"xScale is not defined\");\n        }\n\n        this.axisX.group.attr(\"transform\", `translate(0, ${this.config().dimension.height()})`);\n        // Additional transform to not overlap with ticks\n        this.axisX.labelGroup.attr(\"transform\", `translate(0, ${axis.bottom.tickSize})`);\n\n        this.drawTicks(axis.bottom, this.axisX, xScale, axisBottom);\n        this.drawGrids(axis.bottom, this.gridX, axisTop, xScale, this.config().dimension.height());\n\n        this.gridX.tickGroup\n            .attr(\"transform\", `translate(0, ${this.config().dimension.height()})`);\n    }\n\n    protected updateYAxes() {\n        const axis = this.config().axis;\n        const yLeftScale = this.leftScaleId ? this.scales[\"y\"].index[this.leftScaleId] : undefined;\n\n        if (!yLeftScale) {\n            throw new Error(\"yLeftScale is not defined\");\n        }\n\n        this.axisYLeft.labelGroup.attr(\n            \"transform\",\n            `translate(${-axis.left.tickSize - axis.left.padding}, 0)`\n        );\n\n        this.drawTicks(axis.left, this.axisYLeft, yLeftScale, axisLeft);\n        this.drawGrids(\n            axis.left,\n            this.gridY,\n            axisRight,\n            yLeftScale,\n            this.config().dimension.width()\n        );\n\n        if (this.rightScaleId) {\n            const yRightScale = this.scales[\"y\"].index[this.rightScaleId];\n            const rightScaleLabelX = axis.right.padding + this.config().dimension.width() + axis.right.tickSize;\n            this.axisYRight.labelGroup.attr(\n                \"transform\",\n                `translate(${rightScaleLabelX}, 0)`\n            );\n            this.axisYRight.tickGroup.attr(\n                \"transform\",\n                `translate(${this.config().dimension.width()}, 0)`\n            );\n            this.drawTicks(axis.right, this.axisYRight, yRightScale, axisRight);\n        }\n    }\n\n    protected updateAxes(): void {\n        if (!this.target()) {\n            return;\n        }\n\n        this.updateXAxis();\n        this.updateYAxes();\n    }\n\n    protected adjustAxisTicks(labelGroup: D3Selection, scale: IScale) {\n        const textOfTicks: HTMLElement[] = [];\n\n        labelGroup.attr(\"cursor\", \"default\");\n\n        labelGroup.selectAll(\"g\").each(function () {\n            select(this).classed(\"sw-hidden\", false).classed(\"tick-hidden-text\", false);\n            textOfTicks.push(this);\n        });\n\n        const toRemove = this.filterRepeatedElements(textOfTicks);\n        toRemove.forEach((group: HTMLElement) => {\n            select(group).classed(\"tick-hidden-text\", true);\n        });\n\n        const allAxisLabels = this.selectAllAxisLabels(labelGroup);\n        allAxisLabels.forEach((group: HTMLElement) => {\n            const groupSelection = select(group);\n            // zero-out the d3-provided x position of all labels since we're manually translating the x position of the entire group;\n            // add IGNORE_INTERACTION_CLASS so that mouse events used for displaying the title don't propagate from the mouse-interactive-area\n            groupSelection.select(\"text\").attr(\"x\", 0).classed(IGNORE_INTERACTION_CLASS, true);\n            groupSelection.classed(\"pointer-events\", true);\n            if (groupSelection.select(\"title\").empty()) {\n                const datum = groupSelection.data()[0];\n                const titleText = (scale.formatters[\"tick\"] ? scale.formatters[\"tick\"](datum) : datum) as string;\n                groupSelection.append(\"title\").text(titleText);\n            }\n        });\n\n        this.handleTickLabelOverflow(labelGroup, scale, allAxisLabels);\n    }\n\n    protected handleTickLabelOverflow(labelGroup: D3Selection, scale: IScale, axisLabels: HTMLElement[]) {\n        const axisConfig = this.config().axis;\n        if (scale.id === this.bottomScaleId && (scale.isContinuous() || !axisConfig.bottom.tickLabel.overflowHandler)) {\n            const textToHide = this.getElementsToHide(axisLabels, this._config.dimension.width(), true);\n            textToHide.forEach((group: HTMLElement) => {\n                const groupSelection = select(group);\n                groupSelection.classed(\"tick-hidden-text\", true);\n                // disable pointer-events so the title doesn't display for hidden labels\n                groupSelection.classed(\"pointer-events\", false);\n            });\n            return;\n        }\n\n        if (scale.id === this.rightScaleId || scale.id === this.leftScaleId) {\n            const textToHide = this.getElementsToHide(axisLabels, this._config.dimension.height(), false);\n            textToHide.forEach((group: HTMLElement) => {\n                select(group).classed(\"sw-hidden\", true);\n            });\n        }\n\n        const margin = this.config().dimension.margin;\n        let widthLimit = 0;\n        let horizontalPadding = 0;\n        let overflowHandler: TextOverflowHandler | undefined;\n        let fixLeftMargin = false;\n        let fixRightMargin = false;\n        const maxRightWidth = axisConfig.right.tickLabel.maxWidth;\n        const maxLeftWidth = axisConfig.left.tickLabel.maxWidth;\n\n        if (scale.id === this.bottomScaleId) {\n            const maxBottomWidth = axisConfig.bottom.tickLabel.maxWidth;\n            const calculatedBottomWidth = (scale as any).bandwidth ? (scale as IBandScale).bandwidth() : this.getTickDistance(axisLabels);\n\n            if (!isUndefined(maxBottomWidth)) {\n                widthLimit = calculatedBottomWidth > maxBottomWidth ? maxBottomWidth : calculatedBottomWidth;\n            } else {\n                widthLimit = calculatedBottomWidth;\n            }\n\n            horizontalPadding = axisConfig.bottom.tickLabel.horizontalPadding;\n            overflowHandler = axisConfig.bottom.tickLabel.overflowHandler;\n\n        } else if (scale.id === this.rightScaleId && !axisConfig.right.fit) {\n            const calculatedRightWidth = margin.right - axisConfig.right.padding - axisConfig.right.tickSize;\n\n            if (!isUndefined(maxRightWidth)) {\n                widthLimit = calculatedRightWidth > maxRightWidth ? maxRightWidth : calculatedRightWidth;\n            } else {\n                widthLimit = calculatedRightWidth;\n            }\n\n            horizontalPadding = axisConfig.right.tickLabel.horizontalPadding;\n            overflowHandler = axisConfig.right.tickLabel.overflowHandler;\n\n        } else if (scale.id === this.leftScaleId && !axisConfig.left.fit) {\n            const calculatedLeftWidth = margin.left - axisConfig.left.padding - axisConfig.left.tickSize;\n\n            if (!isUndefined(maxLeftWidth)) {\n                widthLimit = calculatedLeftWidth > maxLeftWidth ? maxLeftWidth : calculatedLeftWidth;\n            } else {\n                widthLimit = calculatedLeftWidth;\n            }\n\n            horizontalPadding = axisConfig.left.tickLabel.horizontalPadding;\n            overflowHandler = axisConfig.left.tickLabel.overflowHandler;\n\n        } else if (scale.id === this.rightScaleId && axisConfig.right.fit && !isUndefined(maxRightWidth)) {\n            widthLimit = maxRightWidth;\n            horizontalPadding = axisConfig.right.tickLabel.horizontalPadding;\n            overflowHandler = axisConfig.right.tickLabel.overflowHandler;\n            fixRightMargin = true;\n\n        } else if (scale.id === this.leftScaleId && axisConfig.left.fit && !isUndefined(maxLeftWidth)) {\n            widthLimit = maxLeftWidth;\n            horizontalPadding = axisConfig.left.tickLabel.horizontalPadding;\n            overflowHandler = axisConfig.left.tickLabel.overflowHandler;\n            fixLeftMargin = true;\n\n        } else {\n            return;\n        }\n\n        if (!overflowHandler) {\n            return;\n        }\n\n        // sample the length of an ellipsis in the current environment\n        let ellipsisWidth = 0;\n        if (labelGroup.select(\".sample-ellipsis\").empty()) {\n            const testText = labelGroup.append(\"text\");\n            const ellipsis = testText.classed(\"sample-ellipsis\", true).attr(\"opacity\", 0).append(\"tspan\").text(\"...\");\n            ellipsisWidth = ellipsis.node()?.getComputedTextLength() || 0;\n            testText.remove();\n        }\n\n        // reset debounce if necessary\n        if (this.handleTickLabelOverflowDebounceIndex[scale.id]) {\n            clearTimeout(this.handleTickLabelOverflowDebounceIndex[scale.id]);\n            this.handleTickLabelOverflowDebounceIndex[scale.id] = null;\n        }\n\n        // hide the labels and disable pointer-events while debouncing\n        labelGroup.classed(\"tick-hidden-text\", true);\n        axisLabels.forEach((group: HTMLElement) => {\n            select(group).classed(\"pointer-events\", false);\n        });\n        // setTimeout used for debounce when the chart is resized\n        this.handleTickLabelOverflowDebounceIndex[scale.id] = setTimeout(() => {\n            axisLabels.forEach((group: HTMLElement) => {\n                const groupSelection = select(group);\n                // invoke the handler for each text element\n                groupSelection.select(\"text\").call(overflowHandler as TextOverflowHandler, { widthLimit, horizontalPadding, ellipsisWidth });\n                // restore pointer events\n                groupSelection.classed(\"pointer-events\", true);\n            });\n\n            const marginLocked = this._config.dimension.marginLocked;\n            if (marginLocked && (fixRightMargin || fixLeftMargin)) {\n                this.handleMarginUpdate();\n                marginLocked.right = fixRightMargin;\n                marginLocked.left = fixLeftMargin;\n            }\n\n            // display the labels\n            labelGroup.classed(\"tick-hidden-text\", false);\n        }, XYGrid.TICK_LABEL_OVERFLOW_DEBOUNCE_INTERVAL);\n    }\n\n    protected selectAllAxisLabels(axisGroup: D3Selection) {\n        const actualTextElements: HTMLElement[] = [];\n        axisGroup.selectAll(\"g:not(.tick-hidden-text)\").each(function () {\n            actualTextElements.push(this);\n        });\n        return actualTextElements;\n    }\n\n    protected getOuterWidthDimensionCorrection() {\n        return this.config().axis.bottom.visible ? Grid.TICK_DIMENSION_CORRECTION : 0;\n    }\n\n    private handleMarginUpdate() {\n        const oldMargin = clone(this._config.dimension.margin);\n        this.recalculateMargins(this.container);\n        this.reconcileMarginsWithDebounce(oldMargin);\n    }\n\n    private hasRightYAxis(): boolean {\n        return this.config().axis.right.visible && this.rightScaleId?.length > 0;\n    }\n\n    private buildAxes(container: D3Selection) {\n        // Grid lines: no sense to have right\n        this.gridY.tickGroup = container.append(\"g\")\n            .classed(\"sw-axis sw-axis-grid sw-axis-gridY\", true);\n        this.gridX.tickGroup = container.append(\"g\")\n            .classed(\"sw-axis sw-axis-grid sw-axis-gridX\", true);\n\n        // Axis groups\n        this.axisX.group = container.append(\"g\")\n            .classed(\"sw-axis sw-axis-x\", true);\n        this.axisX.tickGroup = this.axisX.group.append(\"g\")\n            .classed(\"sw-axis sw-axis-x sw-axis-x-ticks\", true);\n        this.axisX.labelGroup = this.axisX.group.append(\"g\")\n            .classed(\"sw-axis sw-axis-x sw-axis-x-labels\", true);\n\n        this.axisYLeft.group = container.append(\"g\")\n            .classed(\"sw-axis sw-axis-y sw-axis-y-left\", true);\n        this.axisYLeft.tickGroup = this.axisYLeft.group.append(\"g\")\n            .classed(\"sw-axis sw-axis-y sw-axis-y-ticks\", true);\n        this.axisYLeft.labelGroup = this.axisYLeft.group.append(\"g\")\n            .classed(\"sw-axis sw-axis-y sw-axis-y-labels\", true);\n\n        this.axisYRight.group = container.append(\"g\")\n            .classed(\"sw-axis sw-axis-y sw-axis-y-right\", true);\n        this.axisYRight.tickGroup = this.axisYRight.group.append(\"g\")\n            .classed(\"sw-axis sw-axis-y sw-axis-y-ticks\", true);\n        this.axisYRight.labelGroup = this.axisYRight.group.append(\"g\")\n            .classed(\"sw-axis sw-axis-y sw-axis-y-labels\", true);\n    }\n\n    private filterRepeatedElements(elementsToFilter: HTMLElement[]) {\n        const arr: HTMLElement[] = [elementsToFilter[0]];\n        elementsToFilter.reduce((prev: any, next: any) => {\n            const textInsideNext = select(next).text();\n            if (textInsideNext !== prev) {\n                arr.push(next);\n            }\n            return textInsideNext;\n        }, elementsToFilter[0] && select(elementsToFilter[0]).text());\n        return elementsToFilter.filter(element => arr.indexOf(element) === -1);\n    }\n\n    private getElementsToHide(elementsToFilter: HTMLElement[], measurement: number, isBottomAxis: boolean) {\n        let elementsToDisplay: HTMLElement[];\n        const measureType = isBottomAxis ? \"width\" : \"height\";\n        const measurementComparison = (this.getTextMeasurement(elementsToFilter, measureType)  elementsToDisplay.indexOf(element) === -1);\n    }\n\n    private elementsFiltering(elementsToFilter: HTMLElement[],\n                              parameter: number,\n                              measureType: string) {\n        let elementsToDisplay: HTMLElement[];\n        let counter = 2;\n        const condition = (array: HTMLElement[]) => measureType === \"width\"\n            ? this.getMaxTextWidth(array) > this.getTickDistance(array)\n            : this.getTextMeasurement(array, measureType) > parameter;\n        do {\n            elementsToDisplay = elementsToFilter.filter((element: HTMLElement, index: number) => (index % counter) === 0);\n            counter++;\n            // Break the loop when we have only 1 tick and its size is bigger than available width/height\n            if (elementsToDisplay.length === 1 && condition(elementsToDisplay)) {\n                break;\n            }\n        } while (condition(elementsToDisplay));\n        return elementsToDisplay;\n    }\n\n    private getTextMeasurement(array: HTMLElement[], measureType: string) {\n        const textPadding = measureType === \"width\" ? 5 : 0;\n        return array.reduce((prev: number, next: HTMLElement) =>\n            prev + (next.getBoundingClientRect() as any)[measureType] + textPadding, 0);\n    }\n\n    private getMaxTextWidth(array: HTMLElement[]) {\n        if (array.length === 0) {\n            return 0;\n        }\n        return Math.max.apply(null, array.map((tick: HTMLElement) => tick.getBoundingClientRect().width));\n    }\n\n    private getTickDistance(array: HTMLElement[]) {\n        if (array.length === 0) {\n            return 0;\n        }\n        let smallestDiff = Infinity;\n        const arrayOfPositions = array.map((tick: HTMLElement) => {\n            const transformVal = tick.getAttribute(\"transform\");\n\n            if (isNil(transformVal)) {\n                throw new Error(\"tick transform is not defined\");\n            }\n\n            return parseFloat(transformVal.slice(transformVal.indexOf(\"(\") + 1, transformVal.indexOf(\",\")));\n        });\n\n        arrayOfPositions.reduce((p: number, n: number) => {\n            const diff = n - p;\n            if (diff ) {\n        if (!container) {\n            return;\n        }\n        const d = this._config.dimension;\n        const axis = this.config().axis;\n\n        const oldOuterWidth = d.outerWidth();\n        const oldOuterHeight = d.outerHeight();\n\n        if (!d.marginLocked?.left && axis.left.fit && axis.left.visible) {\n            d.margin.left = this.getMaxTextWidth(this.selectAllAxisLabels(this.axisYLeft.labelGroup)) + axis.left.tickSize + axis.left.padding;\n        }\n\n        if (!d.marginLocked?.right && axis.right.fit && this.hasRightYAxis()) {\n            d.margin.right = this.getMaxTextWidth(this.selectAllAxisLabels(this.axisYRight.labelGroup)) + axis.right.tickSize + axis.right.padding;\n        }\n\n        const bottomScale = this.bottomScaleId && this.scales ? this.scales[\"x\"]?.index[this.bottomScaleId] : undefined;\n        if (axis.bottom.fit && axis.bottom.visible && (bottomScale?.isContinuous() || !axis.bottom.tickLabel.overflowHandler)) {\n            this.fitBottomAxis(d);\n        }\n\n        const newTopMargin = d.margin.top; // TODO: Do the calculation, if needed\n        const newBottomMargin = d.margin.bottom; // TODO: Do the calculation, based on bottom Axis height\n\n        d.margin.top = newTopMargin;\n        d.margin.bottom = newBottomMargin;\n\n        // adjust width and height accordingly\n        d.outerWidth(oldOuterWidth);\n        d.outerHeight(oldOuterHeight);\n\n        const tx = this.config().dimension.margin.left;\n        const ty = this.config().dimension.margin.top;\n        container.attr(\"transform\", `translate(${tx}, ${ty})`);\n    }\n\n    private fitBottomAxis(d: IDimensionConfig) {\n        const scale = this.scales?.x?.list[0].d3Scale;\n        if (!scale) {\n            return;\n        }\n        let lastTextWidth: number = 0;\n        let lastTickScaleValue: number = 0;\n        const node = this.axisX.labelGroup.select(\".tick:not(.tick-hidden-text):last-child text\").node();\n        if (node) {\n            lastTextWidth = (node as any).getBoundingClientRect().width;\n            lastTickScaleValue = scale((node as any).innerHTML) ?? 0;\n            const topOfRange = scale.range()[1];\n            const diff = (lastTextWidth / 2) - (Math.abs(topOfRange - lastTickScaleValue) / 2);\n            d.margin.right = diff > 0 ? diff : 0;\n        }\n    }\n\n    /**\n     * This method invokes updateRanges if the margins have changed, but only after a debounce period.\n     * ----\n     * The debounce is necessary because, in the case of a very short axis, repeated attempts to\n     * alternately fit axis labels and recalculate ticks may conflict with each other\n     * causing the old and new margins to never be equal upon comparison. This scenario can cause a d3\n     * call stack overflow, but with a debounce, d3 can keep up with the recalculations until the chart\n     * is resized to consistently accommodate the width of the labels.\n     */\n    private reconcileMarginsWithDebounce(oldMargin: IAllAround) {\n        if (this.reconcileMarginsDebounce) {\n            clearTimeout(this.reconcileMarginsDebounce);\n            this.reconcileMarginsDebounce = null;\n        }\n\n        this.reconcileMarginsDebounce = setTimeout(() => {\n            if (!this.areMarginsApproximatelyEqual(oldMargin, this._config.dimension.margin)) {\n                this.updateChartDimensionsSubject?.next();\n            }\n        }, 100);\n    }\n\n    private isApproximatelyEqual = (first: number, second: number) => Math.abs(first - second) , margin2: IAllAround): boolean {\n        return this.isApproximatelyEqual(margin1.top, margin2.top) &&\n            this.isApproximatelyEqual(margin1.right, margin2.right) &&\n            this.isApproximatelyEqual(margin1.bottom, margin2.bottom) &&\n            this.isApproximatelyEqual(margin1.left, margin2.left);\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISeriesAccessors.html":{"url":"interfaces/ISeriesAccessors.html","title":"interface - ISeriesAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ISeriesAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        SeriesAccessor | undefined\n\n                    \n                \n                        \n                            \n                                Defined in src/core/common/types.ts:136\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig {\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISetDomainEventPayload.html":{"url":"interfaces/ISetDomainEventPayload.html","title":"interface - ISetDomainEventPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ISetDomainEventPayload\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [scaleId: string]:    any[]\n\n                    \n                \n                        \n                            \n                                Defined in src/core/common/types.ts:342\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig {\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISideIndicatorAccessors.html":{"url":"interfaces/ISideIndicatorAccessors.html","title":"interface - ISideIndicatorAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ISideIndicatorAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/side-indicator-renderer.ts\n        \n\n            \n                Description\n            \n            \n                Interface for side indicator accessors \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                                \n                                        series\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         ISideIndicatorDataAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ISideIndicatorDataAccessors\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Accessors for the side indicator data \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        series\n                                    \n                                \n                                \n                                    \n                                        series:         ISideIndicatorSeriesAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ISideIndicatorSeriesAccessors\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Accessors for the side indicator series \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import defaultsDeep from \"lodash/defaultsDeep\";\nimport { Subject } from \"rxjs\";\n\nimport { STANDARD_RENDER_LAYERS } from \"../constants\";\nimport { Scales } from \"../core/common/scales/types\";\nimport {\n    DataAccessor,\n    IDataAccessors,\n    IDataSeries,\n    ILasagnaLayer,\n    IRendererConfig,\n    IRendererEventPayload,\n    ISeriesAccessors,\n    SeriesAccessor\n} from \"../core/common/types\";\nimport { GRAYSCALE_FILTER } from \"../core/types\";\n\nimport { IRenderSeries, RenderLayerName } from \"./types\";\nimport { XYRenderer } from \"./xy-renderer\";\n\n/** Interface for side indicator data accessors */\nexport interface ISideIndicatorDataAccessors extends IDataAccessors {\n    /** Accessor indicating whether the side indicator should be active */\n    active: DataAccessor;\n}\n\n/** Interface for side indicator series accessors */\nexport interface ISideIndicatorSeriesAccessors extends ISeriesAccessors {\n    /** Indicates the start value of the side indicator */\n    start: SeriesAccessor;\n    /** Indicates the end value of the side indicator */\n    end: SeriesAccessor;\n    /** Indicates the active color of the side indicator */\n    activeColor: SeriesAccessor;\n    /** Optional accessor indicating the inactive color of the side indicator. A grayscale filter is applied to the active color by default */\n    inactiveColor?: SeriesAccessor;\n}\n\n/** Interface for side indicator accessors */\nexport interface ISideIndicatorAccessors {\n    /** Accessors for the side indicator data */\n    data: ISideIndicatorDataAccessors;\n    /** Accessors for the side indicator series */\n    series: ISideIndicatorSeriesAccessors;\n}\n\n/** Standard definition for side indicator series and data accessors */\nexport class SideIndicatorAccessors implements ISideIndicatorAccessors {\n    public data: ISideIndicatorDataAccessors;\n    public series: ISideIndicatorSeriesAccessors;\n\n    constructor() {\n        this.data = {\n            active: (d: any) => d.active,\n        };\n        this.series = {\n            start: () => null,\n            end: () => null,\n            activeColor: () => \"magenta\",\n        };\n    }\n}\n\n/**\n * Renderer for drawing threshold side indicators\n */\nexport class SideIndicatorRenderer extends XYRenderer {\n\n    /** @deprecated As of Nova v9, use RenderLayerName.unclippedData enum value instead. Removal: NUI-5753 */\n    public static SIDE_INDICATORS_LAYER = \"side-indicators\";\n\n    private DEFAULT_CONFIG: IRendererConfig = {};\n\n    /**\n     * Creates an instance of SideIndicatorRenderer.\n     * @param {IRendererConfig} [config={}] Renderer configuration object\n     */\n    constructor(config: IRendererConfig = {}) {\n        super(config);\n        // setting default values to the properties that were not set by user\n        this.config = defaultsDeep(this.config, this.DEFAULT_CONFIG);\n    }\n\n    /** See {@link Renderer#draw} */\n    public draw(renderSeries: IRenderSeries, rendererSubject: Subject): void {\n        const target = renderSeries.containers[RenderLayerName.unclippedData];\n        const dataSeries = renderSeries.dataSeries;\n        const scales = renderSeries.scales;\n        const accessors = renderSeries.dataSeries.accessors;\n\n        let rect = target.select(\"rect\");\n        const isActive = dataSeries.data.length > 0 ?\n            accessors.data.active(dataSeries.data[0], 0, renderSeries.dataSeries.data, renderSeries.dataSeries) : false;\n        const colorAccessor = !isActive && accessors.series.inactiveColor ? accessors.series.inactiveColor : accessors.series.activeColor;\n        if (rect.empty()) {\n            rect = target.append(\"rect\").attrs({\n                \"fill\": colorAccessor(dataSeries.id, dataSeries),\n            });\n\n            if (!isActive && !accessors.series.inactiveColor) {\n                rect.style(\"filter\", GRAYSCALE_FILTER);\n            }\n        }\n\n        const start = accessors.series.start(dataSeries.id, dataSeries);\n        const end = accessors.series.end(dataSeries.id, dataSeries);\n        const top = end == null ? 0 : scales.y.convert(end);\n        const bottom = start == null ? scales.y.range()[0] : Math.min(scales.y.range()[0], scales.y.convert(start));\n        const height = bottom - top;\n        const width = 2;\n        rect.attrs({\n            \"x\": -width,\n            \"y\": top,\n            \"height\": height , values: { [p: string]: any }, scales: Scales) {\n        return -1;\n    }\n\n    /** See {@link Renderer#getRequiredLayers} */\n    public getRequiredLayers(): ILasagnaLayer[] {\n        return [\n            STANDARD_RENDER_LAYERS[RenderLayerName.unclippedData],\n        ];\n    }\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISideIndicatorDataAccessors.html":{"url":"interfaces/ISideIndicatorDataAccessors.html","title":"interface - ISideIndicatorDataAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ISideIndicatorDataAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/side-indicator-renderer.ts\n        \n\n            \n                Description\n            \n            \n                Interface for side indicator data accessors \n\n            \n\n            \n                Extends\n            \n            \n                        IDataAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        active\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        active\n                                    \n                                \n                                \n                                    \n                                        active:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Accessor indicating whether the side indicator should be active \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import defaultsDeep from \"lodash/defaultsDeep\";\nimport { Subject } from \"rxjs\";\n\nimport { STANDARD_RENDER_LAYERS } from \"../constants\";\nimport { Scales } from \"../core/common/scales/types\";\nimport {\n    DataAccessor,\n    IDataAccessors,\n    IDataSeries,\n    ILasagnaLayer,\n    IRendererConfig,\n    IRendererEventPayload,\n    ISeriesAccessors,\n    SeriesAccessor\n} from \"../core/common/types\";\nimport { GRAYSCALE_FILTER } from \"../core/types\";\n\nimport { IRenderSeries, RenderLayerName } from \"./types\";\nimport { XYRenderer } from \"./xy-renderer\";\n\n/** Interface for side indicator data accessors */\nexport interface ISideIndicatorDataAccessors extends IDataAccessors {\n    /** Accessor indicating whether the side indicator should be active */\n    active: DataAccessor;\n}\n\n/** Interface for side indicator series accessors */\nexport interface ISideIndicatorSeriesAccessors extends ISeriesAccessors {\n    /** Indicates the start value of the side indicator */\n    start: SeriesAccessor;\n    /** Indicates the end value of the side indicator */\n    end: SeriesAccessor;\n    /** Indicates the active color of the side indicator */\n    activeColor: SeriesAccessor;\n    /** Optional accessor indicating the inactive color of the side indicator. A grayscale filter is applied to the active color by default */\n    inactiveColor?: SeriesAccessor;\n}\n\n/** Interface for side indicator accessors */\nexport interface ISideIndicatorAccessors {\n    /** Accessors for the side indicator data */\n    data: ISideIndicatorDataAccessors;\n    /** Accessors for the side indicator series */\n    series: ISideIndicatorSeriesAccessors;\n}\n\n/** Standard definition for side indicator series and data accessors */\nexport class SideIndicatorAccessors implements ISideIndicatorAccessors {\n    public data: ISideIndicatorDataAccessors;\n    public series: ISideIndicatorSeriesAccessors;\n\n    constructor() {\n        this.data = {\n            active: (d: any) => d.active,\n        };\n        this.series = {\n            start: () => null,\n            end: () => null,\n            activeColor: () => \"magenta\",\n        };\n    }\n}\n\n/**\n * Renderer for drawing threshold side indicators\n */\nexport class SideIndicatorRenderer extends XYRenderer {\n\n    /** @deprecated As of Nova v9, use RenderLayerName.unclippedData enum value instead. Removal: NUI-5753 */\n    public static SIDE_INDICATORS_LAYER = \"side-indicators\";\n\n    private DEFAULT_CONFIG: IRendererConfig = {};\n\n    /**\n     * Creates an instance of SideIndicatorRenderer.\n     * @param {IRendererConfig} [config={}] Renderer configuration object\n     */\n    constructor(config: IRendererConfig = {}) {\n        super(config);\n        // setting default values to the properties that were not set by user\n        this.config = defaultsDeep(this.config, this.DEFAULT_CONFIG);\n    }\n\n    /** See {@link Renderer#draw} */\n    public draw(renderSeries: IRenderSeries, rendererSubject: Subject): void {\n        const target = renderSeries.containers[RenderLayerName.unclippedData];\n        const dataSeries = renderSeries.dataSeries;\n        const scales = renderSeries.scales;\n        const accessors = renderSeries.dataSeries.accessors;\n\n        let rect = target.select(\"rect\");\n        const isActive = dataSeries.data.length > 0 ?\n            accessors.data.active(dataSeries.data[0], 0, renderSeries.dataSeries.data, renderSeries.dataSeries) : false;\n        const colorAccessor = !isActive && accessors.series.inactiveColor ? accessors.series.inactiveColor : accessors.series.activeColor;\n        if (rect.empty()) {\n            rect = target.append(\"rect\").attrs({\n                \"fill\": colorAccessor(dataSeries.id, dataSeries),\n            });\n\n            if (!isActive && !accessors.series.inactiveColor) {\n                rect.style(\"filter\", GRAYSCALE_FILTER);\n            }\n        }\n\n        const start = accessors.series.start(dataSeries.id, dataSeries);\n        const end = accessors.series.end(dataSeries.id, dataSeries);\n        const top = end == null ? 0 : scales.y.convert(end);\n        const bottom = start == null ? scales.y.range()[0] : Math.min(scales.y.range()[0], scales.y.convert(start));\n        const height = bottom - top;\n        const width = 2;\n        rect.attrs({\n            \"x\": -width,\n            \"y\": top,\n            \"height\": height , values: { [p: string]: any }, scales: Scales) {\n        return -1;\n    }\n\n    /** See {@link Renderer#getRequiredLayers} */\n    public getRequiredLayers(): ILasagnaLayer[] {\n        return [\n            STANDARD_RENDER_LAYERS[RenderLayerName.unclippedData],\n        ];\n    }\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISideIndicatorSeriesAccessors.html":{"url":"interfaces/ISideIndicatorSeriesAccessors.html","title":"interface - ISideIndicatorSeriesAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ISideIndicatorSeriesAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/side-indicator-renderer.ts\n        \n\n            \n                Description\n            \n            \n                Interface for side indicator series accessors \n\n            \n\n            \n                Extends\n            \n            \n                        ISeriesAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        activeColor\n                                \n                                \n                                        end\n                                \n                                \n                                            Optional\n                                        inactiveColor\n                                \n                                \n                                        start\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        activeColor\n                                    \n                                \n                                \n                                    \n                                        activeColor:         SeriesAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SeriesAccessor\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Indicates the active color of the side indicator \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        end\n                                    \n                                \n                                \n                                    \n                                        end:         SeriesAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SeriesAccessor\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Indicates the end value of the side indicator \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        inactiveColor\n                                    \n                                \n                                \n                                    \n                                        inactiveColor:         SeriesAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SeriesAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional accessor indicating the inactive color of the side indicator. A grayscale filter is applied to the active color by default \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        start\n                                    \n                                \n                                \n                                    \n                                        start:         SeriesAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SeriesAccessor\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Indicates the start value of the side indicator \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import defaultsDeep from \"lodash/defaultsDeep\";\nimport { Subject } from \"rxjs\";\n\nimport { STANDARD_RENDER_LAYERS } from \"../constants\";\nimport { Scales } from \"../core/common/scales/types\";\nimport {\n    DataAccessor,\n    IDataAccessors,\n    IDataSeries,\n    ILasagnaLayer,\n    IRendererConfig,\n    IRendererEventPayload,\n    ISeriesAccessors,\n    SeriesAccessor\n} from \"../core/common/types\";\nimport { GRAYSCALE_FILTER } from \"../core/types\";\n\nimport { IRenderSeries, RenderLayerName } from \"./types\";\nimport { XYRenderer } from \"./xy-renderer\";\n\n/** Interface for side indicator data accessors */\nexport interface ISideIndicatorDataAccessors extends IDataAccessors {\n    /** Accessor indicating whether the side indicator should be active */\n    active: DataAccessor;\n}\n\n/** Interface for side indicator series accessors */\nexport interface ISideIndicatorSeriesAccessors extends ISeriesAccessors {\n    /** Indicates the start value of the side indicator */\n    start: SeriesAccessor;\n    /** Indicates the end value of the side indicator */\n    end: SeriesAccessor;\n    /** Indicates the active color of the side indicator */\n    activeColor: SeriesAccessor;\n    /** Optional accessor indicating the inactive color of the side indicator. A grayscale filter is applied to the active color by default */\n    inactiveColor?: SeriesAccessor;\n}\n\n/** Interface for side indicator accessors */\nexport interface ISideIndicatorAccessors {\n    /** Accessors for the side indicator data */\n    data: ISideIndicatorDataAccessors;\n    /** Accessors for the side indicator series */\n    series: ISideIndicatorSeriesAccessors;\n}\n\n/** Standard definition for side indicator series and data accessors */\nexport class SideIndicatorAccessors implements ISideIndicatorAccessors {\n    public data: ISideIndicatorDataAccessors;\n    public series: ISideIndicatorSeriesAccessors;\n\n    constructor() {\n        this.data = {\n            active: (d: any) => d.active,\n        };\n        this.series = {\n            start: () => null,\n            end: () => null,\n            activeColor: () => \"magenta\",\n        };\n    }\n}\n\n/**\n * Renderer for drawing threshold side indicators\n */\nexport class SideIndicatorRenderer extends XYRenderer {\n\n    /** @deprecated As of Nova v9, use RenderLayerName.unclippedData enum value instead. Removal: NUI-5753 */\n    public static SIDE_INDICATORS_LAYER = \"side-indicators\";\n\n    private DEFAULT_CONFIG: IRendererConfig = {};\n\n    /**\n     * Creates an instance of SideIndicatorRenderer.\n     * @param {IRendererConfig} [config={}] Renderer configuration object\n     */\n    constructor(config: IRendererConfig = {}) {\n        super(config);\n        // setting default values to the properties that were not set by user\n        this.config = defaultsDeep(this.config, this.DEFAULT_CONFIG);\n    }\n\n    /** See {@link Renderer#draw} */\n    public draw(renderSeries: IRenderSeries, rendererSubject: Subject): void {\n        const target = renderSeries.containers[RenderLayerName.unclippedData];\n        const dataSeries = renderSeries.dataSeries;\n        const scales = renderSeries.scales;\n        const accessors = renderSeries.dataSeries.accessors;\n\n        let rect = target.select(\"rect\");\n        const isActive = dataSeries.data.length > 0 ?\n            accessors.data.active(dataSeries.data[0], 0, renderSeries.dataSeries.data, renderSeries.dataSeries) : false;\n        const colorAccessor = !isActive && accessors.series.inactiveColor ? accessors.series.inactiveColor : accessors.series.activeColor;\n        if (rect.empty()) {\n            rect = target.append(\"rect\").attrs({\n                \"fill\": colorAccessor(dataSeries.id, dataSeries),\n            });\n\n            if (!isActive && !accessors.series.inactiveColor) {\n                rect.style(\"filter\", GRAYSCALE_FILTER);\n            }\n        }\n\n        const start = accessors.series.start(dataSeries.id, dataSeries);\n        const end = accessors.series.end(dataSeries.id, dataSeries);\n        const top = end == null ? 0 : scales.y.convert(end);\n        const bottom = start == null ? scales.y.range()[0] : Math.min(scales.y.range()[0], scales.y.convert(start));\n        const height = bottom - top;\n        const width = 2;\n        rect.attrs({\n            \"x\": -width,\n            \"y\": top,\n            \"height\": height , values: { [p: string]: any }, scales: Scales) {\n        return -1;\n    }\n\n    /** See {@link Renderer#getRequiredLayers} */\n    public getRequiredLayers(): ILasagnaLayer[] {\n        return [\n            STANDARD_RENDER_LAYERS[RenderLayerName.unclippedData],\n        ];\n    }\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISimpleThresholdZone.html":{"url":"interfaces/ISimpleThresholdZone.html","title":"interface - ISimpleThresholdZone","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ISimpleThresholdZone\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/thresholds/types.ts\n        \n\n            \n                Description\n            \n            \n                Used for simplified threshold zone definition. It is expected the start to be .\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        end\n                                \n                                \n                                            Optional\n                                        start\n                                \n                                \n                                        status\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        end\n                                    \n                                \n                                \n                                    \n                                        end:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        start\n                                    \n                                \n                                \n                                    \n                                        start:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                    \n                                \n                                \n                                    \n                                        status:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Numeric } from \"d3-array\";\n\n/**\n * Used for simplified threshold zone definition. It is expected the start to be &lt; end.\n */\nexport interface ISimpleThresholdZone {\n    status: string;\n    start?: number;\n    end?: number;\n}\n\nexport interface ZoneCross {\n    status: string;\n    start?: Numeric;\n    end?: Numeric;\n}\n\n/**\n * Used for specifying the start or end boundary of a zone\n */\nexport enum ZoneBoundary {\n    Start = \"start\",\n    End = \"end\",\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISpark.html":{"url":"interfaces/ISpark.html","title":"interface - ISpark","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ISpark\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/chart-assists/types.ts\n        \n\n            \n                Description\n            \n            \n                Interface representing the spark chart assist's\nassociation between one of its charts and a series set\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        chart\n                                \n                                \n                                        chartSeriesSet\n                                \n                                \n                                            Optional\n                                        id\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        chart\n                                    \n                                \n                                \n                                    \n                                        chart:         IChart\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IChart\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        chartSeriesSet\n                                    \n                                \n                                \n                                    \n                                        chartSeriesSet:     IChartAssistSeries[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     IChartAssistSeries[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { RenderState } from \"../../renderers/types\";\nimport { IAccessors, IChart, IChartAssistSeries, IChartSeries, IRenderStateData } from \"../common/types\";\n\n/**\n * Interface representing the spark chart assist's\n * association between one of its charts and a series set\n */\nexport interface ISpark {\n    chartSeriesSet: IChartAssistSeries[];\n    id?: string;\n    chart?: IChart;\n}\n\n/**\n * Interface representing an assistant that aids in chart usage\n */\nexport interface IChartAssist {\n    /**\n     * Updates the series set for the chart assist's associated chart\n     *\n     * @param inputSeriesSet The updated set of series\n     */\n    update(inputSeriesSet: IChartAssistSeries[]): void;\n\n    /**\n     * Gets the current highlighted value for the specified series\n     *\n     * @param {IChartSeries} chartSeries The chart series to get the highlighted value for\n     * @param {string} scaleKey The key for the datapoint value scale\n     * @param {string} [formatterName] The name of the formatter if a custom formatter name is set on the scale\n     *\n     * @returns {string} The highlighted value\n     */\n    getHighlightedValue(chartSeries: IChartSeries, scaleKey: string, formatterName?: string): string | number | undefined;\n\n    /**\n     * Returns visible series that are represented by a legend\n     */\n    getVisibleSeriesWithLegend(): IChartAssistSeries[];\n}\n\n/** Event types that can be emitted from a chart assist */\nexport enum ChartAssistEventType {\n    ToggleSeries = \"ToggleSeries\",\n    ResetVisibleSeries = \"ResetVisibleSeries\",\n    EmphasizeSeries = \"EmphasizeSeries\",\n}\n\n/** Interface for chart assist events */\nexport interface IChartAssistEvent {\n    type: ChartAssistEventType;\n    payload: any;\n}\n\n/**\n * Legend interaction assist uses this class to present the state that consists of emphasisState+visible as one state\n */\nexport class ChartAssistRenderStateData implements IRenderStateData {\n    constructor(public seriesId: string,\n                public series: IChartAssistSeries,\n                public emphasisState = RenderState.default,\n                public visible = true) {\n    }\n\n    get state(): RenderState {\n        return this.visible ? this.emphasisState : RenderState.hidden;\n    }\n}\n\nexport interface IRenderStatesIndex {\n    [seriesId: string]: ChartAssistRenderStateData;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IStackMetadata.html":{"url":"interfaces/IStackMetadata.html","title":"interface - IStackMetadata","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IStackMetadata\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/bar/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        end\n                                \n                                \n                                        start\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        end\n                                    \n                                \n                                \n                                    \n                                        end:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        start\n                                    \n                                \n                                \n                                    \n                                        start:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IBarChartConfig {\n    horizontal?: boolean;\n    grouped?: boolean;\n}\n\nexport interface IStackMetadata {\n    start: number;\n    end: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IStartEndRangeAccessors.html":{"url":"interfaces/IStartEndRangeAccessors.html","title":"interface - IStartEndRangeAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IStartEndRangeAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/accessors/rectangle-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IDataAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        end\n                                \n                                \n                                        start\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        end\n                                    \n                                \n                                \n                                    \n                                        end:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        start\n                                    \n                                \n                                \n                                    \n                                        start:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DataAccessor, IAccessors, IDataAccessors, ISeriesAccessors, SeriesAccessor } from \"../../core/common/types\";\n\nexport interface IStartEndRangeAccessors extends IDataAccessors {\n    start: DataAccessor;\n    end: DataAccessor;\n}\n\nexport interface IValueThicknessAccessors extends IDataAccessors {\n    value: DataAccessor;\n    thickness: DataAccessor;\n}\n\nexport interface IRectangleDataAccessors extends IDataAccessors {\n    startX?: DataAccessor;\n    endX?: DataAccessor;\n    thicknessX?: DataAccessor;\n\n    startY?: DataAccessor;\n    endY?: DataAccessor;\n    thicknessY?: DataAccessor;\n}\n\nexport interface IRectangleSeriesAccessors extends ISeriesAccessors {\n    color?: SeriesAccessor;\n    marker?: SeriesAccessor;\n}\n\nexport interface IRectangleAccessors extends IAccessors {\n    data: IRectangleDataAccessors;\n    series: IRectangleSeriesAccessors;\n}\n\nexport class RectangleAccessors implements IRectangleAccessors {\n    data: IRectangleDataAccessors;\n    series: IRectangleSeriesAccessors;\n\n    constructor() {\n\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IStatusAccessors.html":{"url":"interfaces/IStatusAccessors.html","title":"interface - IStatusAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IStatusAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/bar/accessors/status-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IBarAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         IStatusDataAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IStatusDataAccessors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DataAccessor } from \"../../../core/common/types\";\nimport { IRectangleSeriesAccessors } from \"../../accessors/rectangle-accessors\";\n\nimport { IBarAccessors, IBarDataAccessors } from \"./bar-accessors\";\n\nexport interface IStatusDataAccessors extends IBarDataAccessors {\n    status: DataAccessor;\n}\n\nexport interface IStatusAccessors extends IBarAccessors {\n    data: IStatusDataAccessors;\n}\n\nexport class StatusAccessors implements IStatusAccessors {\n    public static STATUS_CATEGORY = \"status\";\n    public static STATUS_DOMAIN = [StatusAccessors.STATUS_CATEGORY];\n\n    public get data(): IStatusDataAccessors {\n        return this.barAccessors.data as IStatusDataAccessors;\n    }\n\n    public get series(): IRectangleSeriesAccessors {\n        return this.barAccessors.series;\n    }\n\n    constructor(private barAccessors: IBarAccessors) {\n        barAccessors.data.status = (d: any) => d.status;\n    }\n}\n\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IStatusDataAccessors.html":{"url":"interfaces/IStatusDataAccessors.html","title":"interface - IStatusDataAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IStatusDataAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/bar/accessors/status-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IBarDataAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        status\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                    \n                                \n                                \n                                    \n                                        status:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DataAccessor } from \"../../../core/common/types\";\nimport { IRectangleSeriesAccessors } from \"../../accessors/rectangle-accessors\";\n\nimport { IBarAccessors, IBarDataAccessors } from \"./bar-accessors\";\n\nexport interface IStatusDataAccessors extends IBarDataAccessors {\n    status: DataAccessor;\n}\n\nexport interface IStatusAccessors extends IBarAccessors {\n    data: IStatusDataAccessors;\n}\n\nexport class StatusAccessors implements IStatusAccessors {\n    public static STATUS_CATEGORY = \"status\";\n    public static STATUS_DOMAIN = [StatusAccessors.STATUS_CATEGORY];\n\n    public get data(): IStatusDataAccessors {\n        return this.barAccessors.data as IStatusDataAccessors;\n    }\n\n    public get series(): IRectangleSeriesAccessors {\n        return this.barAccessors.series;\n    }\n\n    constructor(private barAccessors: IBarAccessors) {\n        barAccessors.data.status = (d: any) => d.status;\n    }\n}\n\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ITextOverflowArgs.html":{"url":"interfaces/ITextOverflowArgs.html","title":"interface - ITextOverflowArgs","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ITextOverflowArgs\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        ellipsisWidth\n                                \n                                \n                                        horizontalPadding\n                                \n                                \n                                        widthLimit\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ellipsisWidth\n                                    \n                                \n                                \n                                    \n                                        ellipsisWidth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        horizontalPadding\n                                    \n                                \n                                \n                                    \n                                        horizontalPadding:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        widthLimit\n                                    \n                                \n                                \n                                    \n                                        widthLimit:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BaseType } from \"d3\";\nimport { Axis } from \"d3-axis\";\nimport { Selection } from \"d3-selection\";\nimport { Subject } from \"rxjs\";\n\nimport { EventBus } from \"../common/event-bus\";\nimport { Lasagna } from \"../common/lasagna\";\nimport { ScalesIndex } from \"../common/scales/types\";\nimport { D3Selection, IChart, IChartEvent, IChartPlugin } from \"../common/types\";\n\n/**\n * Interface for defining aspects of the top, right, bottom, and left sides of a grid\n */\nexport interface IAllAround {\n    /** Object defining aspects of the top of an entity */\n    top: T;\n    /** Object defining aspects of the right side of an entity */\n    right: T;\n    /** Object defining aspects of the bottom of an entity */\n    bottom: T;\n    /** Object defining aspects of the left side of an entity */\n    left: T;\n}\n\n/**\n * The width and height of an grid\n */\nexport interface IDimensions {\n    width: number;\n    height: number;\n}\n\n/**\n * Configuration of grid dimensions\n */\nexport interface IDimensionConfig {\n    /** The top, right, bottom, and left margin sizes in pixels */\n    margin: IAllAround;\n    /** The top, right, bottom, and left padding sizes in pixels */\n    padding: IAllAround;\n    /** Sets whether the grid uses the chart's container to determine its width */\n    autoWidth: boolean;\n    /** Sets whether the grid uses the chart's container to determine its height */\n    autoHeight: boolean;\n    /** Set of booleans indicating whether a specific margin will be recalculated on chart dimension updates */\n    marginLocked?: IAllAround;\n    /**\n     * Sets the grid's width. Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid width\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    width(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- excluding margins.\n     *\n     * @returns {number} The grid's width\n     */\n    width(): number;\n    /**\n     * Sets the grid's height. Note: 'autoHeight' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid height\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    height(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- excluding margins.\n     *\n     * @returns {number} The grid's height\n     */\n    height(): number;\n    /**\n     * Sets the grid's width by subtracting the grid's horizontal margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new width plus the grid's horizontal margins\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerWidth(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- including horizontal margins.\n     *\n     * @returns {number} The grid's width plus horizontal margins\n     */\n    outerWidth(): number;\n    /**\n     * Sets the grid's height by subtracting the grid's vertical margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new height plus the grid's vertical margins     *\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerHeight(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- including vertical margins.\n     *\n     * @returns {number} The grid's height plus vertical margins\n     */\n    outerHeight(): number;\n}\n\n/**\n * Interface for defining the SVGElements forming the top, right, bottom, and left borders of an entity\n */\nexport interface IBorders extends IAllAround {\n}\n\n/**\n * Configuration of grid borders\n */\nexport interface IBorderConfig {\n    /** The stroke color */\n    color?: string;\n    /** The thickness of the border */\n    width?: number;\n    /** The class name */\n    className?: string;\n    /** Boolean indicating whether the border should be visible */\n    visible?: boolean;\n}\n\nexport interface ITextOverflowArgs {\n    widthLimit: number;\n    horizontalPadding: number;\n    ellipsisWidth: number;\n}\n\n/** Type for tick overflow handler */\nexport type TextOverflowHandler = (textSelection: Selection, args: ITextOverflowArgs) => void;\n\n/** Interface representing the configuration for tick labels */\nexport interface ITickLabelConfig {\n    /**\n     * Padding for left and right sides of label used for calculating text overflow limits\n     * (number represents the padding on each side)\n     */\n    horizontalPadding: number;\n    /** Handler for text overflow. Set to 'undefined' to disable overflow handling */\n    overflowHandler?: TextOverflowHandler;\n    /**\n     * Setting this insures the label's width is smaller or equal to the provided number\n     */\n    maxWidth?: number;\n}\n\n/** Configuration of a grid axis */\nexport interface IAxisConfig {\n    /** Boolean indicating whether the axis should be visible */\n    visible: boolean;\n    /** The approximate number of ticks to display */\n    approximateTicks: number;\n    /** Boolean indicating whether grid ticks should be displayed */\n    gridTicks: boolean;\n    /** The length of the ticks in pixels */\n    tickSize: number;\n    /** Configuration for the tick labels */\n    tickLabel: ITickLabelConfig;\n    /** Sets whether to fit the grid margins to the axis labels */\n    fit: boolean;\n    /** Sets the axis padding */\n    padding: number;\n}\n\n/**\n * Basic grid configuration\n */\nexport interface IGridConfig {\n    /** Boolean indicating whether the grid will respond to mouse events */\n    interactive: boolean;\n    /** Configuration for the grid's dimensions */\n    dimension: IDimensionConfig;\n    /** Configuration for the grid's borders */\n    borders: IAllAround;\n    /** String indicating the desired cursor style */\n    cursor: string;\n}\n\n/**\n * Configuration for an XYGrid\n */\nexport interface IXYGridConfig extends IGridConfig {\n    /** The IAllAround value for the grid's axis configurations */\n    axis: IAllAround;\n\n    /**\n     * Add interaction line and label plugins automatically\n     * Note: This was added to prevent a breaking change. We should avoid this kind of option in future\n     * versions of IXYGridConfig because ideally all plugins should be added manually (NUI-3304).\n     */\n    interactionPlugins: boolean;\n}\n\n/**\n * The basic interface for a grid's dimensions, scaling, interaction, and borders\n *\n * @interface\n */\nexport interface IGrid {\n    /** The grid scales\n     *\n     * @type {ScalesIndex}\n     */\n    scales: ScalesIndex;\n\n    /**\n     * Subject for indicating that the chart's dimensions should be updated\n     */\n    updateChartDimensionsSubject?: Subject;\n\n    /**\n     * Chart event bus\n     */\n    eventBus: EventBus;\n\n    /**\n     * Provides access to the grid's layering mechanism\n     *\n     * @returns {Lasagna} The grid's layering mechanism\n     */\n    getLasagna(): Lasagna;\n\n    /**\n     * Provides access to the grid's interactive area\n     *\n     * @returns {D3Selection} The grid's interactive area\n     */\n    getInteractiveArea(): D3Selection;\n\n    /**\n     * getter for the grid's target d3 selection\n     *\n     * @returns {D3Selection} The grid's target d3 selection\n     */\n    target(): D3Selection;\n\n    /**\n     * setter for the grid's target d3 selection\n     *\n     * @param {D3Selection} [target] The grid's new target d3 selection\n     * @returns {IGrid} The grid instance\n     */\n    target(target: D3Selection): IGrid;\n    target(target: D3Selection): D3Selection | IGrid;\n\n    /**\n     * getter for the grid configuration\n     *\n     * @returns {IGridConfig} The grid configuration\n     */\n    config(): IGridConfig;\n\n    /**\n     * setter for the grid configuration\n     *\n     * @param {IGridConfig} config The new grid configuration\n     * @returns {this} The grid instance\n     */\n    config(config: IGridConfig): this;\n\n    /**\n     * Builds the grid's rendered elements\n     *\n     * @returns {IGrid} The grid instance\n     */\n    build(): IGrid;\n\n    /**\n     * Updates the grid's rendered elements based on the current scales and configuration\n     *\n     * @returns {IGrid} The grid instance\n     */\n    update(): IGrid;\n\n    /**\n     * Updates the grid's dimensions as specified\n     *\n     * @param {Partial} dimensions The new grid dimensions\n     * @returns {IGrid} The grid instance\n     */\n    updateDimensions(dimensions: Partial): IGrid;\n\n    /**\n     * Updates the ranges on the grid's scales based on the grid's configured dimensions\n     *\n     * @returns {IGrid} The grid instance\n     */\n    updateRanges(): IGrid;\n\n    /**\n     * Builds the grid's plugins\n     *\n     * @returns {IChartPlugin[]} The set of generated plugins\n     */\n    buildPlugins(chart: IChart): IChartPlugin[];\n}\n\n/**\n * Interface for a d3 axis entity\n */\nexport interface IAxis {\n    /** The d3 group element for the axis label */\n    labelGroup: D3Selection;\n    /** The d3 group element for the axis ticks */\n    tickGroup: D3Selection;\n    /** The d3 group element for the axis */\n    group: D3Selection;\n    /** The d3 axis */\n    axis: Axis;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ITickLabelConfig.html":{"url":"interfaces/ITickLabelConfig.html","title":"interface - ITickLabelConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ITickLabelConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/types.ts\n        \n\n            \n                Description\n            \n            \n                Interface representing the configuration for tick labels \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        horizontalPadding\n                                \n                                \n                                            Optional\n                                        maxWidth\n                                \n                                \n                                            Optional\n                                        overflowHandler\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        horizontalPadding\n                                    \n                                \n                                \n                                    \n                                        horizontalPadding:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Padding for left and right sides of label used for calculating text overflow limits\n(number represents the padding on each side)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxWidth\n                                    \n                                \n                                \n                                    \n                                        maxWidth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Setting this insures the label's width is smaller or equal to the provided number\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        overflowHandler\n                                    \n                                \n                                \n                                    \n                                        overflowHandler:         TextOverflowHandler\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TextOverflowHandler\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Handler for text overflow. Set to 'undefined' to disable overflow handling \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { BaseType } from \"d3\";\nimport { Axis } from \"d3-axis\";\nimport { Selection } from \"d3-selection\";\nimport { Subject } from \"rxjs\";\n\nimport { EventBus } from \"../common/event-bus\";\nimport { Lasagna } from \"../common/lasagna\";\nimport { ScalesIndex } from \"../common/scales/types\";\nimport { D3Selection, IChart, IChartEvent, IChartPlugin } from \"../common/types\";\n\n/**\n * Interface for defining aspects of the top, right, bottom, and left sides of a grid\n */\nexport interface IAllAround {\n    /** Object defining aspects of the top of an entity */\n    top: T;\n    /** Object defining aspects of the right side of an entity */\n    right: T;\n    /** Object defining aspects of the bottom of an entity */\n    bottom: T;\n    /** Object defining aspects of the left side of an entity */\n    left: T;\n}\n\n/**\n * The width and height of an grid\n */\nexport interface IDimensions {\n    width: number;\n    height: number;\n}\n\n/**\n * Configuration of grid dimensions\n */\nexport interface IDimensionConfig {\n    /** The top, right, bottom, and left margin sizes in pixels */\n    margin: IAllAround;\n    /** The top, right, bottom, and left padding sizes in pixels */\n    padding: IAllAround;\n    /** Sets whether the grid uses the chart's container to determine its width */\n    autoWidth: boolean;\n    /** Sets whether the grid uses the chart's container to determine its height */\n    autoHeight: boolean;\n    /** Set of booleans indicating whether a specific margin will be recalculated on chart dimension updates */\n    marginLocked?: IAllAround;\n    /**\n     * Sets the grid's width. Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid width\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    width(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- excluding margins.\n     *\n     * @returns {number} The grid's width\n     */\n    width(): number;\n    /**\n     * Sets the grid's height. Note: 'autoHeight' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid height\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    height(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- excluding margins.\n     *\n     * @returns {number} The grid's height\n     */\n    height(): number;\n    /**\n     * Sets the grid's width by subtracting the grid's horizontal margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new width plus the grid's horizontal margins\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerWidth(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- including horizontal margins.\n     *\n     * @returns {number} The grid's width plus horizontal margins\n     */\n    outerWidth(): number;\n    /**\n     * Sets the grid's height by subtracting the grid's vertical margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new height plus the grid's vertical margins     *\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerHeight(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- including vertical margins.\n     *\n     * @returns {number} The grid's height plus vertical margins\n     */\n    outerHeight(): number;\n}\n\n/**\n * Interface for defining the SVGElements forming the top, right, bottom, and left borders of an entity\n */\nexport interface IBorders extends IAllAround {\n}\n\n/**\n * Configuration of grid borders\n */\nexport interface IBorderConfig {\n    /** The stroke color */\n    color?: string;\n    /** The thickness of the border */\n    width?: number;\n    /** The class name */\n    className?: string;\n    /** Boolean indicating whether the border should be visible */\n    visible?: boolean;\n}\n\nexport interface ITextOverflowArgs {\n    widthLimit: number;\n    horizontalPadding: number;\n    ellipsisWidth: number;\n}\n\n/** Type for tick overflow handler */\nexport type TextOverflowHandler = (textSelection: Selection, args: ITextOverflowArgs) => void;\n\n/** Interface representing the configuration for tick labels */\nexport interface ITickLabelConfig {\n    /**\n     * Padding for left and right sides of label used for calculating text overflow limits\n     * (number represents the padding on each side)\n     */\n    horizontalPadding: number;\n    /** Handler for text overflow. Set to 'undefined' to disable overflow handling */\n    overflowHandler?: TextOverflowHandler;\n    /**\n     * Setting this insures the label's width is smaller or equal to the provided number\n     */\n    maxWidth?: number;\n}\n\n/** Configuration of a grid axis */\nexport interface IAxisConfig {\n    /** Boolean indicating whether the axis should be visible */\n    visible: boolean;\n    /** The approximate number of ticks to display */\n    approximateTicks: number;\n    /** Boolean indicating whether grid ticks should be displayed */\n    gridTicks: boolean;\n    /** The length of the ticks in pixels */\n    tickSize: number;\n    /** Configuration for the tick labels */\n    tickLabel: ITickLabelConfig;\n    /** Sets whether to fit the grid margins to the axis labels */\n    fit: boolean;\n    /** Sets the axis padding */\n    padding: number;\n}\n\n/**\n * Basic grid configuration\n */\nexport interface IGridConfig {\n    /** Boolean indicating whether the grid will respond to mouse events */\n    interactive: boolean;\n    /** Configuration for the grid's dimensions */\n    dimension: IDimensionConfig;\n    /** Configuration for the grid's borders */\n    borders: IAllAround;\n    /** String indicating the desired cursor style */\n    cursor: string;\n}\n\n/**\n * Configuration for an XYGrid\n */\nexport interface IXYGridConfig extends IGridConfig {\n    /** The IAllAround value for the grid's axis configurations */\n    axis: IAllAround;\n\n    /**\n     * Add interaction line and label plugins automatically\n     * Note: This was added to prevent a breaking change. We should avoid this kind of option in future\n     * versions of IXYGridConfig because ideally all plugins should be added manually (NUI-3304).\n     */\n    interactionPlugins: boolean;\n}\n\n/**\n * The basic interface for a grid's dimensions, scaling, interaction, and borders\n *\n * @interface\n */\nexport interface IGrid {\n    /** The grid scales\n     *\n     * @type {ScalesIndex}\n     */\n    scales: ScalesIndex;\n\n    /**\n     * Subject for indicating that the chart's dimensions should be updated\n     */\n    updateChartDimensionsSubject?: Subject;\n\n    /**\n     * Chart event bus\n     */\n    eventBus: EventBus;\n\n    /**\n     * Provides access to the grid's layering mechanism\n     *\n     * @returns {Lasagna} The grid's layering mechanism\n     */\n    getLasagna(): Lasagna;\n\n    /**\n     * Provides access to the grid's interactive area\n     *\n     * @returns {D3Selection} The grid's interactive area\n     */\n    getInteractiveArea(): D3Selection;\n\n    /**\n     * getter for the grid's target d3 selection\n     *\n     * @returns {D3Selection} The grid's target d3 selection\n     */\n    target(): D3Selection;\n\n    /**\n     * setter for the grid's target d3 selection\n     *\n     * @param {D3Selection} [target] The grid's new target d3 selection\n     * @returns {IGrid} The grid instance\n     */\n    target(target: D3Selection): IGrid;\n    target(target: D3Selection): D3Selection | IGrid;\n\n    /**\n     * getter for the grid configuration\n     *\n     * @returns {IGridConfig} The grid configuration\n     */\n    config(): IGridConfig;\n\n    /**\n     * setter for the grid configuration\n     *\n     * @param {IGridConfig} config The new grid configuration\n     * @returns {this} The grid instance\n     */\n    config(config: IGridConfig): this;\n\n    /**\n     * Builds the grid's rendered elements\n     *\n     * @returns {IGrid} The grid instance\n     */\n    build(): IGrid;\n\n    /**\n     * Updates the grid's rendered elements based on the current scales and configuration\n     *\n     * @returns {IGrid} The grid instance\n     */\n    update(): IGrid;\n\n    /**\n     * Updates the grid's dimensions as specified\n     *\n     * @param {Partial} dimensions The new grid dimensions\n     * @returns {IGrid} The grid instance\n     */\n    updateDimensions(dimensions: Partial): IGrid;\n\n    /**\n     * Updates the ranges on the grid's scales based on the grid's configured dimensions\n     *\n     * @returns {IGrid} The grid instance\n     */\n    updateRanges(): IGrid;\n\n    /**\n     * Builds the grid's plugins\n     *\n     * @returns {IChartPlugin[]} The set of generated plugins\n     */\n    buildPlugins(chart: IChart): IChartPlugin[];\n}\n\n/**\n * Interface for a d3 axis entity\n */\nexport interface IAxis {\n    /** The d3 group element for the axis label */\n    labelGroup: D3Selection;\n    /** The d3 group element for the axis ticks */\n    tickGroup: D3Selection;\n    /** The d3 group element for the axis */\n    group: D3Selection;\n    /** The d3 axis */\n    axis: Axis;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ITooltipNode.html":{"url":"interfaces/ITooltipNode.html","title":"interface - ITooltipNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ITooltipNode\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chart-tooltips/chart-tooltips.component.ts\n        \n\n\n            \n                Extends\n            \n            \n                    SimulationNodeDatum\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        radius\n                                \n                                \n                                        seriesId\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        radius\n                                    \n                                \n                                \n                                    \n                                        radius:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        seriesId\n                                    \n                                \n                                \n                                    \n                                        seriesId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ChangeDetectorRef, Component, ElementRef, Input, OnChanges, OnDestroy, QueryList, SimpleChanges, ViewChildren } from \"@angular/core\";\nimport { forceCollide, forceSimulation, Simulation, SimulationNodeDatum } from \"d3-force\";\nimport { select } from \"d3-selection\";\nimport each from \"lodash/each\";\nimport isEqual from \"lodash/isEqual\";\nimport isNil from \"lodash/isNil\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\nimport { IPosition } from \"../core/common/types\";\nimport { ChartTooltipsPlugin } from \"../core/plugins/tooltips/chart-tooltips-plugin\";\n\nimport { ChartTooltipDirective } from \"./chart-tooltip.directive\";\n\ninterface ITooltipNode extends SimulationNodeDatum {\n    seriesId: string;\n    radius: number;\n}\n\n@Component({\n    selector: \"nui-chart-tooltips\",\n    templateUrl: \"./chart-tooltips.component.html\",\n    styleUrls: [\"./chart-tooltips.component.less\"],\n})\nexport class ChartTooltipsComponent implements OnChanges, OnDestroy {\n\n    @Input() plugin: ChartTooltipsPlugin;\n\n    @Input() template: ElementRef;\n\n    @ViewChildren(ChartTooltipDirective) tooltips: QueryList;\n\n    public openTooltips = new Subject();\n    public closeTooltips = new Subject();\n\n    private unsubscribe$ = new Subject();\n    private simulation: Simulation;\n    // index we use for fast access of tooltip directives by seriesId\n    private tooltipDirectivesIndex: { [seriesId: string]: ChartTooltipDirective } = {};\n    private closePending = false;\n    private isOpen = false;\n    private openTimeout: number;\n    private collisionTimeout: number;\n    private closeTimeout: number;\n\n    constructor(private changeDetector: ChangeDetectorRef) {\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (!(changes[\"plugin\"] && changes[\"plugin\"].currentValue)) {\n            return;\n        }\n\n        this.unsubscribe$.next();\n\n        this.plugin.showSubject.pipe(takeUntil(this.unsubscribe$)).subscribe(() => this.handleOpen());\n        this.plugin.hideSubject.pipe(takeUntil(this.unsubscribe$)).subscribe(() => this.handleClose());\n    }\n\n    public ngOnDestroy(): void {\n        this.unsubscribe$.next();\n        this.unsubscribe$.complete();\n    }\n\n    public trackByFn(index: number, item: any) {\n        return item.value.seriesId;\n    }\n\n    private handleOpen() {\n        this.changeDetector.detectChanges();\n\n        const currentTooltipDirectivesIndex: { [seriesId: string]: ChartTooltipDirective; } = {};\n        this.tooltips.forEach(tooltip => {\n            // this is how we identify which series does the tooltip belong to\n            const seriesId: string | undefined = tooltip.elementRef.nativeElement.getAttribute(\"series-id\") ?? undefined;\n\n            if (!seriesId) {\n                throw new Error(\"SeriesId is not defined\");\n            }\n\n            currentTooltipDirectivesIndex[seriesId] = tooltip;\n        });\n\n        const directivesChanged = !isEqual(currentTooltipDirectivesIndex, this.tooltipDirectivesIndex);\n        if (this.closePending || directivesChanged || !this.isOpen) {\n            clearTimeout(this.openTimeout);\n\n            this.openTimeout = setTimeout(() => {\n                this.openTooltips.next();\n                clearTimeout(this.collisionTimeout);\n\n                this.collisionTimeout = setTimeout(() => {\n                    this.avoidTooltipCollisions();\n                    this.isOpen = true;\n                });\n            });\n        } else {\n            this.openTooltips.next();\n            this.avoidTooltipCollisions();\n            this.isOpen = true;\n        }\n    }\n\n    private handleClose() {\n        if (this.simulation) {\n            this.simulation.stop();\n        }\n\n            this.closePending = true;\n            clearTimeout(this.closeTimeout);\n\n            this.closeTimeout = setTimeout(() => {\n                this.closeTooltips.next();\n                this.closePending = false;\n                this.isOpen = false;\n            });\n    }\n\n    /**\n     * Runs the D3 forceCollide based tooltip collision avoidance algorithm\n     */\n    private avoidTooltipCollisions() {\n        // extracted tooltip positions from tooltip directives\n        const tooltipPositions: { [seriesId: string]: IPosition } = {};\n\n        this.tooltips.forEach(tooltip => {\n            const element = tooltip.getOverlayElement();\n\n            // this is how we identify which series does the tooltip belong to\n            const seriesId: string | undefined = tooltip.elementRef.nativeElement.getAttribute(\"series-id\") ?? undefined;\n\n            if (!seriesId) {\n                throw new Error(\"SeriesId is not defined\");\n            }\n\n            this.tooltipDirectivesIndex[seriesId] = tooltip;\n\n            tooltipPositions[seriesId] = {\n                x: element.offsetLeft,\n                y: element.offsetTop,\n                width: element.clientWidth,\n                height: element.clientHeight,\n            };\n        });\n\n        // if there was a previous simulation, then stop it before running a new one\n        if (this.simulation) {\n            this.simulation.stop();\n        }\n\n        this.simulation = this.startSimulation(this.tooltipDirectivesIndex, tooltipPositions);\n    }\n\n    /**\n     * Starts the force simulation to avoid tooltip overlap\n     *\n     * @param tooltipIndex\n     * @param tooltipPositions\n     */\n    private startSimulation(tooltipIndex: { [p: string]: ChartTooltipDirective },\n        tooltipPositions: { [seriesId: string]: IPosition }) {\n        const nodes = Object.keys(tooltipPositions).map(seriesId => {\n            const position = tooltipPositions[seriesId];\n\n            if (isNil(position.height) || isNil(position.width)) {\n                throw new Error(\"Position height or width are not defined\");\n            }\n\n            const props: any = {\n                seriesId: seriesId,\n                x: position.x,\n                y: position.y,\n                radius: this.isVertical() ? position.height / 2 : position.width / 2,\n            };\n            if (this.isVertical()) {\n                props.fx = position.x;\n            } else {\n                props.fy = position.y;\n            }\n            return props;\n        });\n\n        // TODO: these numbers are only based on playing with the library for the while, it's not fine tuned at all\n        const collisionForce = forceCollide((node: any) => node.radius)\n            .strength(0.5)\n            .iterations(20);\n\n        const simulation = forceSimulation(nodes)\n            .alphaDecay(0.3)\n            .force(\"collisionForce\", collisionForce);\n\n        simulation.on(\"tick\", () => {\n            each(nodes, (node: ITooltipNode) => {\n                const tooltip = tooltipIndex[node.seriesId];\n\n                select(tooltip.getOverlayElement())\n                    .style(this.isVertical() ? \"top\" : \"left\", (this.isVertical() ? node.y : node.x) + \"px\");\n            });\n        });\n\n        return simulation;\n    }\n\n    private isVertical() {\n        return this.plugin.orientation === \"right\";\n    }\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ITooltipPosition.html":{"url":"interfaces/ITooltipPosition.html","title":"interface - ITooltipPosition","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ITooltipPosition\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/tooltips/chart-tooltips-plugin.ts\n        \n\n            \n                Description\n            \n            \n                Position with extended information for positioning a tooltip \n\n            \n\n            \n                Extends\n            \n            \n                        IPosition\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        overlayPositions\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        overlayPositions\n                                    \n                                \n                                \n                                    \n                                        overlayPositions:     ConnectedPosition[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ConnectedPosition[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ConnectedPosition } from \"@angular/cdk/overlay\";\nimport each from \"lodash/each\";\nimport pickBy from \"lodash/pickBy\";\nimport values from \"lodash/values\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\nimport { CHART_VIEW_STATUS_EVENT, INTERACTION_DATA_POINTS_EVENT, SERIES_STATE_CHANGE_EVENT } from \"../../../constants\";\nimport { RenderState } from \"../../../renderers/types\";\nimport { ChartPlugin } from \"../../common/chart-plugin\";\nimport {\n    IAccessors, IChartEvent, IChartSeries, IChartViewStatusEventPayload, IDataPoint, IDataPointsPayload, InteractionType, IPosition,\n    IRenderStateData\n} from \"../../common/types\";\n\n/** Position with extended information for positioning a tooltip */\nexport interface ITooltipPosition extends IPosition {\n    overlayPositions: ConnectedPosition[];\n}\n\n/** How far away from the data point position will the tooltip be positioned */\nexport const TOOLTIP_POSITION_OFFSET = 10;\n\n/** @ignore\n * Used for charts where tooltips should be placed aside of some vertical line */\nexport const getVerticalSetup = (offset: number): ConnectedPosition[] => [{\n    originX: \"end\",\n    originY: \"top\",\n    overlayX: \"start\",\n    overlayY: \"center\",\n    offsetX: offset,\n}, {\n    originX: \"start\",\n    originY: \"center\",\n    overlayX: \"end\",\n    overlayY: \"center\",\n    offsetX: -offset,\n}];\n\n/** @ignore\n * Used for charts where tooltips should be placed aligned to some horizontal line (as Horizontal Bar Charts) */\nexport const getHorizontalSetup = (offset: number): ConnectedPosition[] => [{\n    originX: \"end\",\n    originY: \"top\",\n    overlayX: \"center\",\n    overlayY: \"bottom\",\n    offsetY: -offset,\n}, {\n    originX: \"end\",\n    originY: \"bottom\",\n    overlayX: \"center\",\n    overlayY: \"top\",\n    offsetY: offset,\n}];\n\n/**\n * This plugin listens to the INTERACTION_DATA_POINTS_EVENT and transforms received data into tooltips inputs.\n * The actual tooltips are handled by the ChartTooltipsComponent.\n */\nexport class ChartTooltipsPlugin extends ChartPlugin {\n\n    /** Highlighted data points received from the chart */\n    public dataPoints: IDataPointsPayload;\n    /** Calculated positions for the data point tooltips */\n    public dataPointPositions: { [stringId: string]: ITooltipPosition } = {};\n\n    /**\n     * This publishes an event to show tooltips\n     */\n    public showSubject = new Subject();\n\n    /**\n     * This publishes an event to hide tooltips\n     */\n    public hideSubject = new Subject();\n\n    protected overlaySetup: ConnectedPosition[];\n\n    private isChartInView = false;\n    private destroy$ = new Subject();\n    private seriesVisibilityMap:  Record = {};\n\n    /**\n     * @param tooltipPositionOffset Offset of a tooltip from edge of a highlighted element\n     * @param orientation\n     */\n    constructor(readonly tooltipPositionOffset: number = TOOLTIP_POSITION_OFFSET,\n        public orientation: \"right\" | \"top\" = \"right\") {\n        super();\n\n        if (orientation === \"right\") {\n            this.overlaySetup = getVerticalSetup(tooltipPositionOffset);\n        } else if (orientation === \"top\") {\n            this.overlaySetup = getHorizontalSetup(tooltipPositionOffset);\n        }\n    }\n\n    public initialize(): void {\n        this.chart.getEventBus().getStream(INTERACTION_DATA_POINTS_EVENT)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((event: IChartEvent) => {\n                if (event.data.interactionType === InteractionType.MouseMove && this.isChartInView) {\n                    const dataPoints: IDataPointsPayload = event.data.dataPoints;\n                    this.processHighlightedDataPoints(dataPoints);\n                }\n            });\n        \n        this.chart.getEventBus().getStream(SERIES_STATE_CHANGE_EVENT)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((event: IChartEvent) => {\n                event.data.forEach(series => {\n                    this.seriesVisibilityMap[series.seriesId] = series.state !== RenderState.hidden;\n                });\n            });\n\n        this.chart.getEventBus().getStream(CHART_VIEW_STATUS_EVENT)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((event: IChartEvent) => {\n                this.isChartInView = event.data.isChartInView;\n                if (!this.isChartInView) {\n                    this.hideSubject.next();\n                }\n            });\n    }\n\n    public destroy(): void {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n\n    public processHighlightedDataPoints(dataPoints: IDataPointsPayload) {\n        const validDataPoints = pickBy(dataPoints, (d: IDataPoint) => d.index >= 0 && d.position && (this.seriesVisibilityMap[d.seriesId] !== false));\n\n        if (values(validDataPoints).length === 0) {\n            this.hideSubject.next();\n            return;\n        }\n\n        this.dataPoints = validDataPoints;\n        const chartElement: any = this.chart.target?.node()?.parentNode; // the one above svg\n\n        if (!chartElement) {\n            throw new Error(\"Chart parent node is not defined\");\n        }\n\n        const bbox = chartElement.getBoundingClientRect();\n        const offsetParentBbox = chartElement.offsetParent.getBoundingClientRect();\n        const chartPosition: IPosition = {\n            x: bbox.left - offsetParentBbox.left,\n            y: bbox.top - offsetParentBbox.top,\n        };\n\n        each(Object.keys(this.dataPoints), seriesId => {\n            const dataPoint = this.dataPoints[seriesId];\n\n            const chartSeries = this.chart.getDataManager().getChartSeries(dataPoint.seriesId);\n            const tooltipRelativePosition = this.getTooltipPosition(dataPoint, chartSeries);\n            this.dataPointPositions[seriesId] = this.getAbsolutePosition(tooltipRelativePosition, chartPosition);\n        });\n\n        this.showSubject.next();\n    }\n\n    /**\n     * Calculate tooltip position. Default implementation shows the tooltip on left / right with\n     * @param dataPoint\n     * @param chartSeries\n     */\n    protected getTooltipPosition(dataPoint: IDataPoint, chartSeries: IChartSeries): ITooltipPosition {\n\n        if (!dataPoint.position) {\n            throw new Error(\"Unable to get tooltip position\");\n        }\n\n        return {\n            x: dataPoint.position.x,\n            y: dataPoint.position.y,\n            height: dataPoint.position?.height || 1,\n            width: dataPoint.position?.width || 1,\n            overlayPositions: this.overlaySetup,\n        };\n    }\n\n    /**\n     * Converts the relative position within a chart into an absolute position on the screen\n     *\n     * @param relativePosition\n     * @param chartPosition\n     */\n    protected getAbsolutePosition(relativePosition: ITooltipPosition, chartPosition: IPosition): ITooltipPosition {\n        return Object.assign({}, relativePosition, {\n            x: chartPosition.x + this.chart.getGrid().config().dimension.margin.left + relativePosition.x,\n            y: chartPosition.y + this.chart.getGrid().config().dimension.margin.top + relativePosition.y,\n        });\n    }\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IValueProvider.html":{"url":"interfaces/IValueProvider.html","title":"interface - IValueProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IValueProvider\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    get\n                                \n                                \n                                    reset\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            get\n                        \n                        \n                    \n                \n            \n            \n                \nget(entityId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:347\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entityId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \nreset()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:348\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig {\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IValueThicknessAccessors.html":{"url":"interfaces/IValueThicknessAccessors.html","title":"interface - IValueThicknessAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IValueThicknessAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/accessors/rectangle-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IDataAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        thickness\n                                \n                                \n                                        value\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        thickness\n                                    \n                                \n                                \n                                    \n                                        thickness:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                    \n                                \n                                \n                                    \n                                        value:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DataAccessor, IAccessors, IDataAccessors, ISeriesAccessors, SeriesAccessor } from \"../../core/common/types\";\n\nexport interface IStartEndRangeAccessors extends IDataAccessors {\n    start: DataAccessor;\n    end: DataAccessor;\n}\n\nexport interface IValueThicknessAccessors extends IDataAccessors {\n    value: DataAccessor;\n    thickness: DataAccessor;\n}\n\nexport interface IRectangleDataAccessors extends IDataAccessors {\n    startX?: DataAccessor;\n    endX?: DataAccessor;\n    thicknessX?: DataAccessor;\n\n    startY?: DataAccessor;\n    endY?: DataAccessor;\n    thicknessY?: DataAccessor;\n}\n\nexport interface IRectangleSeriesAccessors extends ISeriesAccessors {\n    color?: SeriesAccessor;\n    marker?: SeriesAccessor;\n}\n\nexport interface IRectangleAccessors extends IAccessors {\n    data: IRectangleDataAccessors;\n    series: IRectangleSeriesAccessors;\n}\n\nexport class RectangleAccessors implements IRectangleAccessors {\n    data: IRectangleDataAccessors;\n    series: IRectangleSeriesAccessors;\n\n    constructor() {\n\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IXYDataAccessors.html":{"url":"interfaces/IXYDataAccessors.html","title":"interface - IXYDataAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IXYDataAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/accessors/xy-accessors.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        x\n                                \n                                \n                                        y\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        DataAccessor | undefined\n\n                    \n                \n                        \n                            \n                                Defined in src/renderers/accessors/xy-accessors.ts:7\n                            \n                        \n                \n                    \n                        Additional custom keys to match the base interface \n\n                    \n                \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Accessor for value plotted on the x coordinate \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Accessor for value plotted on the y coordinate \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { DataAccessor, IAccessors } from \"../../core/common/types\";\n\nexport interface IXYDataAccessors {\n    /** Accessor for value plotted on the x coordinate */\n    x: DataAccessor;\n    /** Accessor for value plotted on the y coordinate */\n    y: DataAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: DataAccessor | undefined;\n}\n\nexport abstract class XYAccessors implements IAccessors {\n    /** The default data accessors for using with renderers deriving from XYRenderer */\n    public data: IXYDataAccessors = {\n        x: (d: any) => d.x,\n        y: (d: any) => d.y,\n    };\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IXYGridConfig.html":{"url":"interfaces/IXYGridConfig.html","title":"interface - IXYGridConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IXYGridConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/types.ts\n        \n\n            \n                Description\n            \n            \n                Configuration for an XYGrid\n\n            \n\n            \n                Extends\n            \n            \n                        IGridConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        axis\n                                \n                                \n                                        interactionPlugins\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        axis\n                                    \n                                \n                                \n                                    \n                                        axis:         IAllAround\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IAllAround\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The IAllAround value for the grid's axis configurations \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        interactionPlugins\n                                    \n                                \n                                \n                                    \n                                        interactionPlugins:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Add interaction line and label plugins automatically\nNote: This was added to prevent a breaking change. We should avoid this kind of option in future\nversions of IXYGridConfig because ideally all plugins should be added manually (NUI-3304).\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { BaseType } from \"d3\";\nimport { Axis } from \"d3-axis\";\nimport { Selection } from \"d3-selection\";\nimport { Subject } from \"rxjs\";\n\nimport { EventBus } from \"../common/event-bus\";\nimport { Lasagna } from \"../common/lasagna\";\nimport { ScalesIndex } from \"../common/scales/types\";\nimport { D3Selection, IChart, IChartEvent, IChartPlugin } from \"../common/types\";\n\n/**\n * Interface for defining aspects of the top, right, bottom, and left sides of a grid\n */\nexport interface IAllAround {\n    /** Object defining aspects of the top of an entity */\n    top: T;\n    /** Object defining aspects of the right side of an entity */\n    right: T;\n    /** Object defining aspects of the bottom of an entity */\n    bottom: T;\n    /** Object defining aspects of the left side of an entity */\n    left: T;\n}\n\n/**\n * The width and height of an grid\n */\nexport interface IDimensions {\n    width: number;\n    height: number;\n}\n\n/**\n * Configuration of grid dimensions\n */\nexport interface IDimensionConfig {\n    /** The top, right, bottom, and left margin sizes in pixels */\n    margin: IAllAround;\n    /** The top, right, bottom, and left padding sizes in pixels */\n    padding: IAllAround;\n    /** Sets whether the grid uses the chart's container to determine its width */\n    autoWidth: boolean;\n    /** Sets whether the grid uses the chart's container to determine its height */\n    autoHeight: boolean;\n    /** Set of booleans indicating whether a specific margin will be recalculated on chart dimension updates */\n    marginLocked?: IAllAround;\n    /**\n     * Sets the grid's width. Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid width\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    width(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- excluding margins.\n     *\n     * @returns {number} The grid's width\n     */\n    width(): number;\n    /**\n     * Sets the grid's height. Note: 'autoHeight' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid height\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    height(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- excluding margins.\n     *\n     * @returns {number} The grid's height\n     */\n    height(): number;\n    /**\n     * Sets the grid's width by subtracting the grid's horizontal margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new width plus the grid's horizontal margins\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerWidth(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- including horizontal margins.\n     *\n     * @returns {number} The grid's width plus horizontal margins\n     */\n    outerWidth(): number;\n    /**\n     * Sets the grid's height by subtracting the grid's vertical margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new height plus the grid's vertical margins     *\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerHeight(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- including vertical margins.\n     *\n     * @returns {number} The grid's height plus vertical margins\n     */\n    outerHeight(): number;\n}\n\n/**\n * Interface for defining the SVGElements forming the top, right, bottom, and left borders of an entity\n */\nexport interface IBorders extends IAllAround {\n}\n\n/**\n * Configuration of grid borders\n */\nexport interface IBorderConfig {\n    /** The stroke color */\n    color?: string;\n    /** The thickness of the border */\n    width?: number;\n    /** The class name */\n    className?: string;\n    /** Boolean indicating whether the border should be visible */\n    visible?: boolean;\n}\n\nexport interface ITextOverflowArgs {\n    widthLimit: number;\n    horizontalPadding: number;\n    ellipsisWidth: number;\n}\n\n/** Type for tick overflow handler */\nexport type TextOverflowHandler = (textSelection: Selection, args: ITextOverflowArgs) => void;\n\n/** Interface representing the configuration for tick labels */\nexport interface ITickLabelConfig {\n    /**\n     * Padding for left and right sides of label used for calculating text overflow limits\n     * (number represents the padding on each side)\n     */\n    horizontalPadding: number;\n    /** Handler for text overflow. Set to 'undefined' to disable overflow handling */\n    overflowHandler?: TextOverflowHandler;\n    /**\n     * Setting this insures the label's width is smaller or equal to the provided number\n     */\n    maxWidth?: number;\n}\n\n/** Configuration of a grid axis */\nexport interface IAxisConfig {\n    /** Boolean indicating whether the axis should be visible */\n    visible: boolean;\n    /** The approximate number of ticks to display */\n    approximateTicks: number;\n    /** Boolean indicating whether grid ticks should be displayed */\n    gridTicks: boolean;\n    /** The length of the ticks in pixels */\n    tickSize: number;\n    /** Configuration for the tick labels */\n    tickLabel: ITickLabelConfig;\n    /** Sets whether to fit the grid margins to the axis labels */\n    fit: boolean;\n    /** Sets the axis padding */\n    padding: number;\n}\n\n/**\n * Basic grid configuration\n */\nexport interface IGridConfig {\n    /** Boolean indicating whether the grid will respond to mouse events */\n    interactive: boolean;\n    /** Configuration for the grid's dimensions */\n    dimension: IDimensionConfig;\n    /** Configuration for the grid's borders */\n    borders: IAllAround;\n    /** String indicating the desired cursor style */\n    cursor: string;\n}\n\n/**\n * Configuration for an XYGrid\n */\nexport interface IXYGridConfig extends IGridConfig {\n    /** The IAllAround value for the grid's axis configurations */\n    axis: IAllAround;\n\n    /**\n     * Add interaction line and label plugins automatically\n     * Note: This was added to prevent a breaking change. We should avoid this kind of option in future\n     * versions of IXYGridConfig because ideally all plugins should be added manually (NUI-3304).\n     */\n    interactionPlugins: boolean;\n}\n\n/**\n * The basic interface for a grid's dimensions, scaling, interaction, and borders\n *\n * @interface\n */\nexport interface IGrid {\n    /** The grid scales\n     *\n     * @type {ScalesIndex}\n     */\n    scales: ScalesIndex;\n\n    /**\n     * Subject for indicating that the chart's dimensions should be updated\n     */\n    updateChartDimensionsSubject?: Subject;\n\n    /**\n     * Chart event bus\n     */\n    eventBus: EventBus;\n\n    /**\n     * Provides access to the grid's layering mechanism\n     *\n     * @returns {Lasagna} The grid's layering mechanism\n     */\n    getLasagna(): Lasagna;\n\n    /**\n     * Provides access to the grid's interactive area\n     *\n     * @returns {D3Selection} The grid's interactive area\n     */\n    getInteractiveArea(): D3Selection;\n\n    /**\n     * getter for the grid's target d3 selection\n     *\n     * @returns {D3Selection} The grid's target d3 selection\n     */\n    target(): D3Selection;\n\n    /**\n     * setter for the grid's target d3 selection\n     *\n     * @param {D3Selection} [target] The grid's new target d3 selection\n     * @returns {IGrid} The grid instance\n     */\n    target(target: D3Selection): IGrid;\n    target(target: D3Selection): D3Selection | IGrid;\n\n    /**\n     * getter for the grid configuration\n     *\n     * @returns {IGridConfig} The grid configuration\n     */\n    config(): IGridConfig;\n\n    /**\n     * setter for the grid configuration\n     *\n     * @param {IGridConfig} config The new grid configuration\n     * @returns {this} The grid instance\n     */\n    config(config: IGridConfig): this;\n\n    /**\n     * Builds the grid's rendered elements\n     *\n     * @returns {IGrid} The grid instance\n     */\n    build(): IGrid;\n\n    /**\n     * Updates the grid's rendered elements based on the current scales and configuration\n     *\n     * @returns {IGrid} The grid instance\n     */\n    update(): IGrid;\n\n    /**\n     * Updates the grid's dimensions as specified\n     *\n     * @param {Partial} dimensions The new grid dimensions\n     * @returns {IGrid} The grid instance\n     */\n    updateDimensions(dimensions: Partial): IGrid;\n\n    /**\n     * Updates the ranges on the grid's scales based on the grid's configured dimensions\n     *\n     * @returns {IGrid} The grid instance\n     */\n    updateRanges(): IGrid;\n\n    /**\n     * Builds the grid's plugins\n     *\n     * @returns {IChartPlugin[]} The set of generated plugins\n     */\n    buildPlugins(chart: IChart): IChartPlugin[];\n}\n\n/**\n * Interface for a d3 axis entity\n */\nexport interface IAxis {\n    /** The d3 group element for the axis label */\n    labelGroup: D3Selection;\n    /** The d3 group element for the axis ticks */\n    tickGroup: D3Selection;\n    /** The d3 group element for the axis */\n    group: D3Selection;\n    /** The d3 axis */\n    axis: Axis;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IXYScales.html":{"url":"interfaces/IXYScales.html","title":"interface - IXYScales","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IXYScales\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/scales/types.ts\n        \n\n\n            \n                Extends\n            \n            \n                        Scales\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        x\n                                \n                                \n                                        y\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:         IScale\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IScale\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:         IScale\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IScale\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { AxisScale } from \"d3-axis\";\n\nimport { IAccessors, IChartSeries } from \"../types\";\n\n/** Domain for series with empty or null data */\nexport const EMPTY_CONTINUOUS_DOMAIN = [0, 0];\n/** A reasonable non-data-driven domain for charts  */\nexport const NORMALIZED_DOMAIN = [0, 1];\n\n/** Signature for domain calculator */\nexport type DomainCalculator = (chartSeriesSet: IChartSeries[], scaleId: string, scale: IScale) => any[];\n\n/** Interface for scale formatters */\nexport interface IFormatters {\n    /** Formatter for tick labels */\n    tick?: Formatter;\n    /** Additional formatters */\n    [p: string]: Formatter | undefined;\n}\n\n/** Signature for label formatters */\nexport type Formatter = (value: T) => string;\n\n/** Dictionary of scale collections in index and array form */\nexport interface ScalesIndex {\n    [key: string]: {\n        /** Scale collection as an index */\n        index: { [scaleId: string]: IScale };\n        /** Scale collection as an array */\n        list: IScale[];\n    };\n}\n\n/** Dictionary of scales */\nexport type Scales = Record>;\n\nexport interface IXYScales extends Scales {\n    x: IScale;\n    y: IScale;\n}\n\nexport interface IRadialScales extends Scales {\n    r: IScale;\n}\n\n/** Interface for a scale */\nexport interface IScale {\n    /** The scale identifier */\n    readonly id: string;\n    readonly d3Scale: AxisScale; // TODO: maybe AxisScale is to narrow?\n\n    /** If this flag is enabled, the domain of this scale is not recalculated */\n    isDomainFixed?: boolean;\n    /** Method used to calculate the scale's domain */\n    domainCalculator?: DomainCalculator;\n    /** The scales formatters */\n    formatters: IFormatters;\n    /** If this flag is enabled, the domain has been recalculated with ticks in mind */\n    __domainCalculatedWithTicks?: boolean;\n\n    /**\n     * Determines if the scale's domain is continuous\n     *\n     * @returns {boolean} true if the scale's domain is continuous (numeric), false otherwise\n     */\n    isContinuous(): boolean;\n\n    /**\n     * Determines if the scale's domain is valid\n     *\n     * @returns {boolean} true if the scale's domain is valid, false otherwise\n     */\n    isDomainValid(): boolean;\n\n    /**\n     * Converts a value to its corresponding coordinate\n     *\n     * @param {T} value The value to be converted\n     * @returns {number} The coordinate corresponding to the specified value\n     */\n    convert(value: T): number;\n\n    /**\n     * Converts a coordinate to its corresponding value\n     *\n     * @param {number} coordinate The coordinate to be converted\n     * @returns {T} The value corresponding to the specified coordinate\n     */\n    invert(coordinate: number): T | undefined;\n\n    /**\n     * Gets the scale's range\n     *\n     * @returns {[number, number]} The scale's range\n     */\n    range(): [number, number];\n\n    /**\n     * Sets the scale's range\n     *\n     * @param {[number, number]} range The scale's new range\n     */\n    range(range: [number, number]): this;\n\n    /**\n     * Gets the scale's domain\n     *\n     * @returns {T[]} The scale's domain\n     */\n    domain(): T[];\n\n    /**\n     * Sets the scale's domain\n     *\n     * @param {T[]} domain The scale's new domain\n     */\n    domain(domain: T[]): this;\n\n    /**\n     * Shorthand method for setting the domain and isDomainFixed at once\n     *\n     * @param {T[]} domain The scale's fixed domain\n     */\n    fixDomain(domain: T[]): void;\n\n    /**\n     * Reverse the scale orientation by toggling the reversed flag\n     */\n    reverse(): this;\n\n    /**\n     * Getter for the reversed flag (see #reverse)\n     */\n    reversed(): boolean;\n\n    /**\n     * Setter for the reversed flag (see #reverse)\n     *\n     * @param reversed\n     */\n    reversed(reversed: boolean): this;\n}\n\n\nexport interface IBandScale extends IScale {\n    bandwidth(): number;\n}\n\nexport function isBandScale(scale: any): scale is IBandScale {\n    return typeof scale.bandwidth === \"function\";\n}\n\nexport interface IHasInnerScale extends IScale {\n    innerScale: IScale;\n}\n\nexport function hasInnerScale(scale: any): scale is IHasInnerScale {\n    return typeof scale.innerScale !== \"undefined\";\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IZoneCrossPoint.html":{"url":"interfaces/IZoneCrossPoint.html","title":"interface - IZoneCrossPoint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IZoneCrossPoint\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                A point at which a data series enters or exits a threshold zone\n\n            \n\n            \n                Extends\n            \n            \n                        IPosition\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        isZoneEdge\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isZoneEdge\n                                    \n                                \n                                \n                                    \n                                        isZoneEdge:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Indicates whether the cross point is on the edge of a threshold zone \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig {\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IZoomPluginConfiguration.html":{"url":"interfaces/IZoomPluginConfiguration.html","title":"interface - IZoomPluginConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IZoomPluginConfiguration\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/zoom-plugin.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        enableExternalEvents\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        enableExternalEvents\n                                    \n                                \n                                \n                                    \n                                        enableExternalEvents:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BrushBehavior, BrushSelection, brushX } from \"d3-brush\";\nimport { event } from \"d3-selection\";\nimport defaultsDeep from \"lodash/defaultsDeep\";\nimport isEmpty from \"lodash/isEmpty\";\nimport isUndefined from \"lodash/isUndefined\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\nimport { INTERACTION_COORDINATES_EVENT, INTERACTION_VALUES_ACTIVE_EVENT, SET_DOMAIN_EVENT, STANDARD_RENDER_LAYERS } from \"../../constants\";\nimport { RenderLayerName } from \"../../renderers/types\";\nimport { ChartPlugin } from \"../common/chart-plugin\";\nimport { IScale } from \"../common/scales/types\";\nimport { D3Selection, IChartEvent, InteractionType, ISetDomainEventPayload } from \"../common/types\";\nimport { Grid } from \"../grid/grid\";\nimport { XYGrid } from \"../grid/xy-grid\";\n\nimport { IInteractionCoordinatesPayload } from \"./types\";\n\nexport interface IZoomPluginConfiguration {\n    enableExternalEvents?: boolean;\n}\n\nexport class ZoomPlugin extends ChartPlugin {\n    // *Note:* This plugin manually moves the d3 brush across the screen to accommodate a known Firefox\n    // bug in which mouse events report an incorrect pointer position for svg children of an element\n    // transformed by a translate function: https://github.com/d3/d3-selection/issues/81\n\n    public static LAYER_NAME = \"zoom-brush\";\n    public static readonly DEFAULT_CONFIG: IZoomPluginConfiguration = {\n        enableExternalEvents: false,\n    };\n\n    private grid: XYGrid;\n    private brush: BrushBehavior;\n    private zoomBrushLayer: D3Selection;\n    private brushElement: D3Selection;\n    private destroy$ = new Subject();\n    private brushStartX: number | undefined;\n    private interactionHandlerMap: Record;\n\n    constructor(public config: IZoomPluginConfiguration = {}) {\n        super();\n        this.config = defaultsDeep(this.config, ZoomPlugin.DEFAULT_CONFIG);\n        this.interactionHandlerMap = {\n            [InteractionType.MouseDown]: this.brushStart,\n            [InteractionType.MouseMove]: this.brushMove,\n            [InteractionType.MouseUp]: this.brushEnd,\n        };\n    }\n\n    public initialize(): void {\n        this.grid = this.chart.getGrid() as XYGrid;\n        this.zoomBrushLayer = this.grid.getLasagna().addLayer({\n            name: ZoomPlugin.LAYER_NAME,\n            // add 1 to the foreground layer's order to ensure the brush is rendered in front of it\n            order: STANDARD_RENDER_LAYERS[RenderLayerName.foreground].order + 1,\n            clipped: true,\n        });\n\n        this.chart.getEventBus().getStream(INTERACTION_COORDINATES_EVENT)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((chartEvent: IChartEvent) => {\n                if (chartEvent.broadcast && !this.config.enableExternalEvents) {\n                    return;\n                }\n\n                const data: IInteractionCoordinatesPayload = chartEvent.data;\n                if (isEmpty(this.grid.scales) || isEmpty(data.coordinates)) {\n                    return;\n                }\n\n                if (this.interactionHandlerMap[data.interactionType]) {\n                    const xCoord = data.coordinates && data.coordinates.x;\n                    this.interactionHandlerMap[data.interactionType](xCoord);\n                }\n            });\n\n        this.brush = brushX();\n        this.brushElement = this.zoomBrushLayer.append(\"g\")\n            .attr(\"class\", \"brush\");\n\n        // engage pointer capture to confine mouse events to the interactive area\n        // (in other words, if the 'mouseup' is physically triggered outside the interactive area,\n        // the pointer capture allows us to still zoom based on that event)\n        this.chart.getGrid().getInteractiveArea()\n            .on(\"pointerdown\", () => event.target.setPointerCapture(event.pointerId))\n            .on(\"pointerup\", () => event.target.releasePointerCapture(event.pointerId));\n    }\n\n    public updateDimensions(): void {\n        const dimension = this.grid.config().dimension;\n\n        // set the brush area's dimensions\n        this.brush.extent([[0, 0], [dimension.width(), dimension.height()]]);\n\n        // render the brush area after we have dimensions\n        this.brush(this.zoomBrushLayer.select(\".brush\"));\n\n        // prevent the brush from handling its own pointer events\n        this.brushElement.select(\".overlay\")\n            .style(\"pointer-events\", \"none\");\n\n        // remove stroke per mockups\n        this.brushElement.select(\".selection\")\n            .attr(\"stroke\", null);\n    }\n\n    public destroy(): void {\n        this.grid.getLasagna().removeLayer(ZoomPlugin.LAYER_NAME);\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n\n    private brushStart = (xCoord: number) => {\n        if (!isUndefined(this.brushStartX)) {\n            return;\n        }\n\n        this.chart.getEventBus().getStream(INTERACTION_VALUES_ACTIVE_EVENT).next({ data: false });\n        this.brushStartX = xCoord;\n    }\n\n    private brushMove = (xCoord: number) => {\n        if (isUndefined(this.brushStartX)) {\n            return;\n        }\n\n        const selection = [this.brushStartX, xCoord].sort((a, b) => a - b);\n        this.brush.move(this.brushElement, selection as BrushSelection);\n    }\n\n    private brushEnd = (xCoord: number) => {\n        if (isUndefined(this.brushStartX)) {\n            return;\n        }\n\n        const selection = [this.brushStartX, xCoord].sort((a, b) => a - b);\n        this.brushStartX = undefined;\n        this.chart.getEventBus().getStream(INTERACTION_VALUES_ACTIVE_EVENT).next({ data: true });\n\n        // remove the brush\n        this.brush.move(this.brushElement, null);\n\n        const xScales = this.grid.scales.x.list;\n        if (!xScales || selection[0] === selection[1]) {\n            return;\n        }\n\n        // Width correction to accommodate similar adjustment in grid. This ensures\n        // that the right-most column of pixels on the chart is selectable.\n        const widthCorrection = selection[1] === this.grid.config().dimension.width() - Grid.RENDER_AREA_WIDTH_CORRECTION ?\n            Grid.RENDER_AREA_WIDTH_CORRECTION : 0;\n        const data: ISetDomainEventPayload = xScales.reduce((result, next: IScale) => {\n            result[next.id] = [selection[0], selection[1] as number + widthCorrection].map(x => next.invert(x as number));\n            return result;\n        }, {});\n\n        // zoom the chart\n        this.chart.getEventBus().getStream(SET_DOMAIN_EVENT).next({ data });\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InteractionLabelPlugin.html":{"url":"classes/InteractionLabelPlugin.html","title":"class - InteractionLabelPlugin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InteractionLabelPlugin\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/interaction/interaction-label-plugin.ts\n        \n\n            \n                Description\n            \n            \n                Highlights the label on x-axis that corresponds to interaction position\n\n            \n\n            \n                Extends\n            \n            \n                        ChartPlugin\n            \n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                areLabelUpdatesEnabled\n                            \n                            \n                                    Static\n                                LAYER_NAME\n                            \n                            \n                                    Public\n                                chart\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(formatterName: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/plugins/interaction/interaction-label-plugin.ts:33\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        formatterName\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            areLabelUpdatesEnabled\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/interaction/interaction-label-plugin.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            LAYER_NAME\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"interaction-label\"\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/interaction/interaction-label-plugin.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IChart\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPlugin:7\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/interaction/interaction-label-plugin.ts:131\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/interaction/interaction-label-plugin.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:15\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:9\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import find from \"lodash/find\";\nimport isArray from \"lodash/isArray\";\nimport isEmpty from \"lodash/isEmpty\";\nimport { Subject, Subscription } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\nimport { CHART_VIEW_STATUS_EVENT, INTERACTION_VALUES_EVENT } from \"../../../constants\";\nimport { ChartPlugin } from \"../../common/chart-plugin\";\nimport { convert } from \"../../common/scales/helpers/convert\";\nimport { IScale } from \"../../common/scales/types\";\nimport { D3Selection, IChartEvent, IChartViewStatusEventPayload, InteractionType } from \"../../common/types\";\nimport { UtilityService } from \"../../common/utility.service\";\nimport { XYGrid } from \"../../grid/xy-grid\";\nimport { IInteractionValuesPayload } from \"../types\";\n\n/** @ignore */\nconst FALLBACK_FORMATTER = \"tick\";\n\n/**\n * Highlights the label on x-axis that corresponds to interaction position\n *\n * @class InteractionLabelPlugin\n * @extends {ChartPlugin}\n */\nexport class InteractionLabelPlugin extends ChartPlugin {\n    public static LAYER_NAME = \"interaction-label\";\n\n    public areLabelUpdatesEnabled = true;\n\n    private isChartInView = false;\n    private lastInteractionValuesPayload: IInteractionValuesPayload;\n    private interactionLabelLayer: D3Selection;\n    private destroy$ = new Subject();\n\n    constructor(private formatterName = \"title\") {\n        super();\n    }\n\n    public initialize(): void {\n        this.interactionLabelLayer = this.chart.getGrid().getLasagna().addLayer({\n            name: InteractionLabelPlugin.LAYER_NAME,\n            order: 901,\n            clipped: false,\n        });\n\n        this.chart.getEventBus().getStream(INTERACTION_VALUES_EVENT)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((event: IChartEvent) => {\n                this.lastInteractionValuesPayload = event.data;\n                if (this.isChartInView) {\n                    this.handleLabelUpdate();\n                }\n            });\n\n        this.chart.getEventBus().getStream(CHART_VIEW_STATUS_EVENT)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((event: IChartEvent) => {\n                this.isChartInView = event.data.isChartInView;\n                if (this.isChartInView && this.lastInteractionValuesPayload) {\n                    this.handleLabelUpdate();\n                }\n            });\n    }\n\n    protected handleLabelUpdate() {\n        const scales = this.chart.getGrid().scales;\n        if (!this.areLabelUpdatesEnabled || this.lastInteractionValuesPayload.interactionType !== InteractionType.MouseMove || isEmpty(scales)) {\n            return;\n        }\n\n        const grid: XYGrid = this.chart.getGrid();\n        const xScale = find(scales[\"x\"].index, { id: grid.bottomScaleId });\n\n        if (!xScale) {\n            throw new Error(\"xScale is not defined\");\n        }\n\n        const xValue = this.lastInteractionValuesPayload.values.x ? this.lastInteractionValuesPayload.values.x[xScale.id] : null;\n        this.updateLabel(xScale, isArray(xValue) ? xValue.slice(0, xValue.length - 1) : xValue);\n    }\n\n    protected updateLabel(scale: IScale, value: any) {\n        let interactionLabel: D3Selection = this.interactionLabelLayer.select(`.${InteractionLabelPlugin.LAYER_NAME}`);\n        if (interactionLabel.empty() && !!value) {\n            interactionLabel = this.buildInteractionLabel(this.interactionLabelLayer);\n        } else if (!value) {\n            interactionLabel.remove();\n            return;\n        }\n\n        const formatter = scale.formatters[this.formatterName] || scale.formatters[FALLBACK_FORMATTER];\n        const labelContent = formatter?.(value);\n\n        if (!labelContent) {\n            throw new Error(\"labelContent is not defined\");\n        }\n\n        const textSelection = interactionLabel.select(\"text\")\n            .text(labelContent);\n        const bbox = (textSelection.node() as any).getBBox();\n        const gridDimension = this.chart.getGrid().config().dimension;\n\n        // subtract the relative vertical text offset inside the bbox from\n        // the grid height to determine the label's vertical placement\n        const heightOffset = (gridDimension.height() - bbox.y);\n\n        textSelection\n            .attr(\"transform\", `translate(0, ${heightOffset})`)\n            .style(\"text-anchor\", \"middle\");\n\n        // match the horizontal padding to the built-in bbox vertical padding\n        const horizontalPadding = (bbox.height + bbox.y) * 2;\n\n        const labelWidth = bbox.width + horizontalPadding;\n        const allowedRange: [number, number] = [(labelWidth / 2), gridDimension.width() - (labelWidth / 2)];\n        const x = convert(scale, value, 0.5);\n        const clampedX = UtilityService.clampToRange(x, allowedRange);\n\n        interactionLabel\n            .attr(\"transform\", `translate(${clampedX},0)`)\n            .select(\"rect\")\n            .attrs({\n                \"transform\": `translate(0,${heightOffset})`,\n                \"x\": -(labelWidth / 2),\n                \"y\": bbox.y,\n                \"width\": labelWidth,\n                \"height\": bbox.height,\n            });\n    }\n\n    public destroy(): void {\n        this.chart.getGrid().getLasagna().removeLayer(InteractionLabelPlugin.LAYER_NAME);\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n\n    private buildInteractionLabel(target: D3Selection): D3Selection {\n        const label = target.append(\"g\")\n            .attr(\"class\", InteractionLabelPlugin.LAYER_NAME);\n\n        label.append(\"rect\")\n            .attr(\"class\", `${InteractionLabelPlugin.LAYER_NAME}__rect`);\n\n        label.append(\"text\")\n            .attr(\"class\", `${InteractionLabelPlugin.LAYER_NAME}__text`);\n\n        return label;\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InteractionLinePlugin.html":{"url":"classes/InteractionLinePlugin.html","title":"class - InteractionLinePlugin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InteractionLinePlugin\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/interaction/interaction-line-plugin.ts\n        \n\n            \n                Description\n            \n            \n                Draws a vertical line on the x-axis that corresponds to interaction position\n\n            \n\n            \n                Extends\n            \n            \n                        ChartPlugin\n            \n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                LAYER_NAME\n                            \n                            \n                                    Public\n                                chart\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            LAYER_NAME\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"interaction-line\"\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/interaction/interaction-line-plugin.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IChart\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPlugin:7\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/interaction/interaction-line-plugin.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/interaction/interaction-line-plugin.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:15\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:9\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import find from \"lodash/find\";\nimport isEmpty from \"lodash/isEmpty\";\nimport { Subject, Subscription } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\nimport { CHART_VIEW_STATUS_EVENT, INTERACTION_VALUES_EVENT } from \"../../../constants\";\nimport { ChartPlugin } from \"../../common/chart-plugin\";\nimport { IScale } from \"../../common/scales/types\";\nimport { D3Selection, IChartEvent, IChartViewStatusEventPayload, InteractionType } from \"../../common/types\";\nimport { XYGrid } from \"../../grid/xy-grid\";\nimport { IInteractionValuesPayload } from \"../types\";\n\n/**\n * Draws a vertical line on the x-axis that corresponds to interaction position\n *\n * @class InteractionLinePlugin\n * @extends {ChartPlugin}\n */\nexport class InteractionLinePlugin extends ChartPlugin {\n    public static LAYER_NAME = \"interaction-line\";\n\n    private isChartInView = false;\n    private lastInteractionValuesPayload: IInteractionValuesPayload;\n    private interactionLineLayer: D3Selection;\n    private destroy$ = new Subject();\n\n    public initialize(): void {\n        this.interactionLineLayer = this.chart.getGrid().getLasagna().addLayer({\n            name: \"interaction-line\",\n            order: 900,\n            clipped: true,\n        });\n\n        this.chart.getEventBus().getStream(INTERACTION_VALUES_EVENT)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((event: IChartEvent) => {\n                this.lastInteractionValuesPayload = event.data;\n                if (this.isChartInView) {\n                    this.handleLineUpdate();\n                }\n            });\n\n        this.chart.getEventBus().getStream(CHART_VIEW_STATUS_EVENT)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((event: IChartEvent) => {\n                this.isChartInView = event.data.isChartInView;\n                if (this.isChartInView && this.lastInteractionValuesPayload) {\n                    this.handleLineUpdate();\n                }\n            });\n    }\n\n    private handleLineUpdate() {\n        const scales = this.chart.getGrid().scales;\n        if (this.lastInteractionValuesPayload.interactionType !== InteractionType.MouseMove || isEmpty(scales)) {\n            return;\n        }\n\n        const grid: XYGrid = this.chart.getGrid();\n        const xScale = find(scales[\"x\"].index, { id: grid.bottomScaleId });\n\n        if (!xScale) {\n            throw new Error(\"xScale is not defined\");\n        }\n\n        const xValue = this.lastInteractionValuesPayload.values.x ? this.lastInteractionValuesPayload.values.x[xScale.id] : null;\n        this.updateLine(this.interactionLineLayer, xScale, xValue);\n    }\n\n    private updateLine(layer: D3Selection, xScale: IScale, value: any) {\n        const data = [];\n        if (value) {\n            data.push(value);\n        }\n        const line = layer.selectAll(`.${InteractionLinePlugin.LAYER_NAME}`).data(data);\n\n        const xFn = (d: any) => xScale.convert(d);\n        const attrs = {\n            \"class\": InteractionLinePlugin.LAYER_NAME,\n            \"x1\": xFn,\n            \"y1\": 0,\n            \"x2\": xFn,\n            \"y2\": this.chart.getGrid().config().dimension.height(),\n        };\n\n        line.enter()\n            .append(\"line\")\n            .merge(line as any)\n            .attrs(attrs);\n\n        line.exit().remove();\n    }\n\n    public destroy(): void {\n        this.chart.getGrid().getLasagna().removeLayer(InteractionLinePlugin.LAYER_NAME);\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LegendComponent.html":{"url":"components/LegendComponent.html","title":"component - LegendComponent","body":"\n                   \n\n\n\n\n\n  Components\n  LegendComponent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n    File\n\n\n    src/legend/legend.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnChanges\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n            \n                encapsulation\n                ViewEncapsulation.Emulated\n            \n\n\n\n            \n                host\n                {}\n            \n\n\n\n\n\n\n            \n                selector\n                nui-legend\n            \n\n\n\n\n            \n                templateUrl\n                ./legend.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                activeChanged\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                active\n                            \n                            \n                                interactive\n                            \n                            \n                                orientation\n                            \n                            \n                                seriesColor\n                            \n                            \n                                seriesIcon\n                            \n                            \n                                seriesUnitLabel\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        active\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend.component.ts:21\n                            \n                        \n                \n                    \n                        The active state\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        interactive\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend.component.ts:26\n                            \n                        \n                \n                    \n                        The legend's interactive mode switch\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        orientation\n                    \n                \n                \n                    \n                        Type :         LegendOrientation\n\n                    \n                \n                \n                    \n                        Default value : LegendOrientation.vertical\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend.component.ts:31\n                            \n                        \n                \n                    \n                        The legend's orientation\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        seriesColor\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend.component.ts:36\n                            \n                        \n                \n                    \n                        The legend's overall series color. Individual legend series may override this.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        seriesIcon\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend.component.ts:41\n                            \n                        \n                \n                    \n                        The legend's overall series icon. Individual legend series may override this.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        seriesUnitLabel\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend.component.ts:46\n                            \n                        \n                \n                    \n                        The legend's overall series unit label. Individual legend series may override this.\n\n                    \n                \n            \n        \n\n\n\n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            activeChanged\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new EventEmitter()\n                        \n                    \n                        \n                            \n                                    Defined in src/legend/legend.component.ts:16\n                            \n                        \n\n                \n                    \n                        EventEmitter for notifying subscribers of a change in the active state\n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, EventEmitter, Input, OnChanges, OnDestroy, SimpleChanges, ViewEncapsulation } from \"@angular/core\";\n\nimport { LegendOrientation } from \"./types\";\n\n@Component({\n    selector: \"nui-legend\",\n    // eslint-disable-next-line\n    host: { \"class\": \"d-inline-block\" },\n    templateUrl: \"./legend.component.html\",\n    encapsulation: ViewEncapsulation.Emulated,\n})\nexport class LegendComponent implements OnChanges, OnDestroy {\n    /**\n     * EventEmitter for notifying subscribers of a change in the active state\n     */\n    public activeChanged = new EventEmitter();\n\n    /**\n     * The active state\n     */\n    @Input() public active = false;\n\n    /**\n     * The legend's interactive mode switch\n     */\n    @Input() public interactive = false;\n\n    /**\n     * The legend's orientation\n     */\n    @Input() public orientation: LegendOrientation = LegendOrientation.vertical;\n\n    /**\n     * The legend's overall series color. Individual legend series may override this.\n     */\n    @Input() public seriesColor: string;\n\n    /**\n     * The legend's overall series icon. Individual legend series may override this.\n     */\n    @Input() public seriesIcon: string;\n\n    /**\n     * The legend's overall series unit label. Individual legend series may override this.\n     */\n    @Input() public seriesUnitLabel: string;\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes[\"active\"]) {\n            this.activeChanged.emit(this.active);\n        }\n    }\n\n    public ngOnDestroy(): void {\n        this.activeChanged.complete();\n    }\n\n}\n\n    \n\n\n\n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    '\n    var COMPONENTS = [{'name': 'BasicLegendTileComponent', 'selector': 'nui-basic-legend-tile'},{'name': 'ChartComponent', 'selector': 'nui-chart'},{'name': 'ChartDonutContentComponent', 'selector': 'nui-chart-donut-content'},{'name': 'ChartMarkerComponent', 'selector': 'nui-chart-marker'},{'name': 'ChartPopoverComponent', 'selector': 'nui-chart-popover'},{'name': 'ChartTooltipComponent', 'selector': 'nui-chart-tooltip'},{'name': 'ChartTooltipsComponent', 'selector': 'nui-chart-tooltips'},{'name': 'LegendComponent', 'selector': 'nui-legend'},{'name': 'LegendSeriesComponent', 'selector': 'nui-legend-series'},{'name': 'RichLegendTileComponent', 'selector': 'nui-rich-legend-tile'}];\n    var DIRECTIVES = [{'name': 'ChartCollectionIdDirective', 'selector': '[nuiChartCollectionId]'}];\n    var ACTUAL_COMPONENT = {'name': 'LegendComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LegendInteractionAssist.html":{"url":"classes/LegendInteractionAssist.html","title":"class - LegendInteractionAssist","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LegendInteractionAssist\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/chart-assists/chart-assist.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                renderStatesIndex\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                emphasizeSeries\n                            \n                            \n                                    Public\n                                getSeriesStates\n                            \n                            \n                                    Public\n                                isSeriesHidden\n                            \n                            \n                                    Public\n                                resetSeries\n                            \n                            \n                                    Public\n                                setGroupState\n                            \n                            \n                                    Public\n                                setGroupVisibility\n                            \n                            \n                                    Public\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(chartAssist: ChartAssist)\n                    \n                \n                        \n                            \n                                Defined in src/core/chart-assists/chart-assist.ts:310\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        chartAssist\n                                                  \n                                                        \n                                                                        ChartAssist\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            renderStatesIndex\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRenderStatesIndex\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/chart-assist.ts:310\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            emphasizeSeries\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    emphasizeSeries(seriesId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/chart-assist.ts:384\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    seriesId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getSeriesStates\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSeriesStates()\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/chart-assist.ts:331\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         IRenderStateData[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isSeriesHidden\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isSeriesHidden(seriesId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/chart-assist.ts:335\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    seriesId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            resetSeries\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    resetSeries()\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/chart-assist.ts:390\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setGroupState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setGroupState(groupId: string, renderState: RenderState)\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/chart-assist.ts:360\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    groupId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        id of the parent series\n\n                                    \n                                \n                                \n                                    renderState\n                                    \n                                                RenderState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setGroupVisibility\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setGroupVisibility(groupId: string, visible: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/chart-assist.ts:374\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    groupId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        id of the parent series\n\n                                    \n                                \n                                \n                                    visible\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(seriesSet: IChartAssistSeries[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/chart-assist.ts:315\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    seriesSet\n                                    \n                                            IChartAssistSeries[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import each from \"lodash/each\";\nimport keyBy from \"lodash/keyBy\";\nimport values from \"lodash/values\";\nimport { Observable, of, Subject, Subscription } from \"rxjs\";\nimport { filter, map, switchMap, takeUntil } from \"rxjs/operators\";\n\nimport { DESTROY_EVENT, HIGHLIGHT_SERIES_EVENT, INTERACTION_DATA_POINTS_EVENT, MOUSE_ACTIVE_EVENT } from \"../../constants\";\nimport { RenderState } from \"../../renderers/types\";\nimport { EventBus } from \"../common/event-bus\";\nimport { defaultMarkerProvider, defaultPalette } from \"../common/palette/default-providers\";\nimport {\n    IAccessors,\n    IChart,\n    IChartAssistSeries,\n    IChartEvent,\n    IChartMarker,\n    IChartPalette,\n    IChartSeries,\n    IDataPoint,\n    IDataPointsPayload,\n    IInteractionDataPointsEvent,\n    InteractionType,\n    IRenderStateData,\n    IValueProvider\n} from \"../common/types\";\n\nimport { ChartAssistEventType, ChartAssistRenderStateData, IChartAssist, IChartAssistEvent, IRenderStatesIndex } from \"./types\";\n\n/** @ignore */\nconst chartAssistSeriesDefaults: Partial> = {\n    showInLegend: true,\n    preprocess: true,\n};\n\n/**\n * Helper class that helps to bootstrap a chart with legend, using data pre-processor.\n * It will use the most common settings.\n */\nexport class ChartAssist implements IChartAssist {\n\n    /**\n     * Retrieves the display value for a data point on the specified series\n     *\n     * @param chartSeries The series containing the data point to get a label for\n     * @param dataPoint The data point to get a label for\n     * @param scaleKey The key for the scale potentially containing a formatter that can be used to format the label\n     * @param formatterName The name of the formatter to use for formatting the label\n     * @param dataAccessorKey The accessor key to use for accessing the data value if the accessor key differs from the scale key\n     *\n     * @returns The display value for a data point\n     */\n    public static getLabel(chartSeries: IChartSeries, dataPoint: any, scaleKey: string, formatterName?: string, dataAccessorKey?: string): any {\n        if (!dataPoint || chartSeries.data.length === 0) {\n            return null;\n        }\n\n        const valueAccessor = chartSeries.accessors.data?.[dataAccessorKey || scaleKey];\n        if (!valueAccessor) {\n            return null;\n        }\n\n        const adjustedIndex = dataPoint.index [] = [];\n    public legendSeriesSet: IChartAssistSeries[] = [];\n\n    /**\n     * Subject for subscribing to IChartAssistEvents such as\n     * ToggleSeries, EmphasizeSeries, and ResetVisibleSeries\n     */\n    public chartAssistSubject = new Subject();\n\n    private syncHandlerMap: Record;\n    private getVisibleSeriesWithLegendBackup: () => IChartAssistSeries>[];\n    private syncSubscription: Subscription;\n    private legendInteractionAssist: LegendInteractionAssist;\n\n    public onEvent: (event: IChartEvent) => void;\n\n    constructor(public chart: IChart,\n                seriesProcessor?: (series: IChartAssistSeries[]) => IChartAssistSeries[],\n                public palette: IChartPalette = defaultPalette(),\n                public markers: IValueProvider = defaultMarkerProvider()) {\n        this.configureChartEventSubscriptions(chart.getEventBus());\n        if (seriesProcessor) {\n            this.seriesProcessor = seriesProcessor;\n        }\n\n        /* eslint-disable-next-line @typescript-eslint/no-use-before-define */\n        this.legendInteractionAssist = new LegendInteractionAssist(this);\n\n        this.syncHandlerMap = {\n            [ChartAssistEventType.EmphasizeSeries]: this.emphasizeSeries,\n            [ChartAssistEventType.ResetVisibleSeries]: this.resetVisibleSeries,\n            [ChartAssistEventType.ToggleSeries]: this.toggleSeries,\n        };\n    }\n\n    public get renderStatesIndex(): IRenderStatesIndex {\n        return this.legendInteractionAssist.renderStatesIndex;\n    }\n\n    /**\n     * Convenience stream of highlight events that can be used to populate legend.\n     * It will return highlighted value for the series (while hovering over datapoints) or the last value from series (while not hovering over and if possible),\n     * otherwise it'll return null\n     * @param chartSeries\n     */\n    public legendLabelData$(chartSeries: IChartSeries): Observable {\n        const seriesHighlight$ = this.chart.getEventBus().getStream(INTERACTION_DATA_POINTS_EVENT).asObservable()\n            .pipe(\n                filter(event => event.data.interactionType === InteractionType.MouseMove),\n                map(event => event.data.dataPoints[chartSeries.id])\n            );\n\n        // if there is no highlightData, or index is \"-1\", we'll show the last value from series (if possible)\n        const highlightDataPresentPredicate = (highlightData: any) => highlightData && highlightData.index >= 0;\n\n        return seriesHighlight$\n            .pipe(\n                switchMap(highlightData => highlightDataPresentPredicate(highlightData)\n                    ? of(highlightData.data)\n                    : of((chartSeries.data && chartSeries.data.length) ? chartSeries.data[chartSeries.data.length - 1] : null))\n            );\n    }\n\n    public seriesProcessor(series: IChartAssistSeries[]): IChartAssistSeries[] {\n        return series;\n    }\n\n    public update(inputSeriesSet: IChartAssistSeries[], updateLegend = true): void {\n        this.inputSeriesSet = inputSeriesSet;\n\n        const processedSeriesSet = this.seriesProcessor(inputSeriesSet.map(series => ({\n            ...series,\n            data: series.data || [],\n        })));\n\n        const seriesSet = processedSeriesSet.map(s => this.applyDefaults(s));\n\n        this.legendSeriesSet = seriesSet.filter(s => s.showInLegend);\n\n        if (updateLegend) {\n            this.legendInteractionAssist.update(seriesSet);\n        }\n        this.chart.update(seriesSet);\n\n        this.publishRenderStates();\n    }\n\n    public toggleSeries = (seriesId: string, visible: boolean): void => {\n        this.legendInteractionAssist.setGroupVisibility(seriesId, visible);\n\n        this.update(this.inputSeriesSet, false);\n        this.chartAssistSubject.next({ type: ChartAssistEventType.ToggleSeries, payload: { seriesId, visible } });\n    }\n\n    /**\n     * Resets all visible series to default state\n     */\n    public resetVisibleSeries = (): void => {\n        this.legendInteractionAssist.resetSeries();\n\n        this.publishRenderStates();\n        this.chartAssistSubject.next({ type: ChartAssistEventType.ResetVisibleSeries, payload: {} });\n    }\n\n    /**\n     * For series that are currently visible, emphasize the given series and deemphasizes all the other ones\n     *\n     * @param seriesId\n     */\n    public emphasizeSeries = (seriesId: string): void => {\n        this.legendInteractionAssist.emphasizeSeries(seriesId);\n\n        this.publishRenderStates();\n        this.chartAssistSubject.next({ type: ChartAssistEventType.EmphasizeSeries, payload: { seriesId } });\n    }\n\n    public isSeriesHidden(seriesId: string): boolean {\n        return this.legendInteractionAssist.isSeriesHidden(seriesId);\n    }\n\n    public seriesTrackByFn(index: number, item: IChartAssistSeries): string {\n        return item.id;\n    }\n\n    /**\n    * Retrieves the display value for the highlighted data point on the specified series\n    *\n    * @param chartSeries The series containing the highlighted data point to get a label for\n    * @param scaleKey The key for the scale potentially containing a formatter that can be used to format the label\n    * @param formatterName The name of the formatter to use for formatting the label\n    * @param dataAccessorKey The accessor key to use for accessing the data value if the accessor key differs from the scale key\n    *\n    * @returns The display value for the highlighted data point\n    */\n    public getHighlightedValue(chartSeries: IChartSeries,\n                               scaleKey: string,\n                               formatterName?: string,\n                               dataAccessorKey?: string): string | number | undefined {\n\n        if (!this.highlightedDataPoints) {\n            return undefined;\n        }\n\n        const dataPoint = this.highlightedDataPoints[chartSeries.id];\n        return ChartAssist.getLabel(chartSeries, dataPoint, scaleKey, formatterName, dataAccessorKey);\n    }\n\n    public getVisibleSeriesWithLegend = (): IChartAssistSeries>[] =>\n        this.legendSeriesSet.filter(s => !this.isSeriesHidden(s.id))\n\n    /**\n     * Synchronize this chart assist's actions with IChartAssistEvents emitted by the specified\n     * chart assist, and override this chart assist's getVisibleSeriesWithLegend method with the\n     * specified chart assist's getVisibleSeriesWithLegend.\n     *\n     * Note: If the chart instance of the specified chart assist is replaced by a new chart,\n     * this method must be invoked again to resume synchronized behavior.\n     *\n     * @param {ChartAssist} chartAssist The chart assist to synchronize with\n     */\n    public syncWithChartAssist(chartAssist: ChartAssist): void {\n        this.getVisibleSeriesWithLegendBackup = this.getVisibleSeriesWithLegend;\n        this.getVisibleSeriesWithLegend = chartAssist.getVisibleSeriesWithLegend;\n\n        this.syncSubscription = chartAssist.chartAssistSubject.pipe(\n            takeUntil(chartAssist.chart.getEventBus().getStream(DESTROY_EVENT))\n        ).subscribe((event: IChartAssistEvent) => {\n            const args = Object.keys(event.payload).map(key => event.payload[key]);\n            this.syncHandlerMap[event.type](...args);\n        });\n    }\n\n    /**\n     * Unsynchronize this chart assist's actions from those of the chart assist\n     * specified in a previous syncWithChartAssist call, and restore this chart\n     * assist's getVisibleSeriesWithLegend method with the instance used before\n     * syncWithChartAssist was called.\n     */\n    public unsyncChartAssist(): void {\n        this.getVisibleSeriesWithLegend = this.getVisibleSeriesWithLegendBackup;\n\n        if (this.syncSubscription) {\n            this.syncSubscription.unsubscribe();\n        }\n    }\n\n    private configureChartEventSubscriptions(eventBus: EventBus): void {\n        const eventHandlers: { [eventName: string]: (data?: any) => void } = {\n            [INTERACTION_DATA_POINTS_EVENT]: (data: IInteractionDataPointsEvent) => {\n                if (data.interactionType === InteractionType.MouseMove) {\n                    this.highlightedDataPoints = Object.assign({}, data.dataPoints);\n                }\n            },\n            [HIGHLIGHT_SERIES_EVENT]: (data: IDataPoint) => {\n                if (data.index >= 0) {\n                    this.emphasizeSeries(data.seriesId);\n                } else {\n                    this.resetVisibleSeries();\n                }\n            },\n            [MOUSE_ACTIVE_EVENT]: (data: boolean) => {\n                this.isLegendActive = data;\n            },\n        };\n\n        each(Object.keys(eventHandlers), key => {\n            eventBus.getStream(key).subscribe((event) => {\n                eventHandlers[key](event.data);\n                if (this.onEvent) {\n                    this.onEvent(event);\n                }\n            });\n        });\n    }\n\n    private publishRenderStates(): void {\n        this.chart.setSeriesStates(this.legendInteractionAssist.getSeriesStates());\n    }\n\n    private applyDefaults(chartSeries: IChartSeries): IChartAssistSeries {\n        return Object.assign({}, chartAssistSeriesDefaults, chartSeries);\n    }\n}\n\nexport class LegendInteractionAssist {\n\n    private seriesGroups: Record = {};\n    private seriesIndex: Record>;\n\n    public renderStatesIndex: IRenderStatesIndex = {};\n\n    constructor(private chartAssist: ChartAssist) {\n    }\n\n    public update(seriesSet: IChartAssistSeries[]): void {\n        this.seriesGroups = this.getSeriesGroups(seriesSet);\n        this.seriesIndex = keyBy(seriesSet, s => s.id);\n\n        this.resetSeries();\n\n        // override render states\n        for (const series of seriesSet.filter(s => s.renderState)) {\n            this.renderStatesIndex[series.id] =\n                new ChartAssistRenderStateData(series.id,\n                    series,\n                    series.renderState === RenderState.hidden ? RenderState.default : series.renderState,\n                    series.renderState !== RenderState.hidden);\n        }\n    }\n\n    public getSeriesStates(): IRenderStateData[] {\n        return values(this.renderStatesIndex);\n    }\n\n    public isSeriesHidden(seriesId: string): boolean {\n        const renderState = this.renderStatesIndex[seriesId];\n        return renderState && !renderState.visible;\n    }\n\n    private getSeriesGroups(seriesSet: IChartAssistSeries[]) {\n        const seriesGroups: Record = {};\n\n        for (const s of seriesSet) {\n            const separatorIndex = s.id.indexOf(\"__\");\n            const parentId = (separatorIndex >= 0) ? s.id.substring(0, separatorIndex) : s.id;\n\n            if (!seriesGroups[parentId]) {\n                seriesGroups[parentId] = [];\n            }\n            seriesGroups[parentId].push(s.id);\n        }\n\n        return seriesGroups;\n    }\n\n    /**\n     * @param groupId id of the parent series\n     * @param renderState\n     */\n    public setGroupState(groupId: string, renderState: RenderState): void {\n        if (!this.seriesGroups[groupId]) {\n            return;\n        }\n\n        for (const s of this.seriesGroups[groupId]) {\n            this.setRenderState(s, renderState);\n        }\n    }\n\n    /**\n     * @param groupId id of the parent series\n     * @param visible\n     */\n    public setGroupVisibility(groupId: string, visible: boolean): void {\n        if (!this.seriesGroups[groupId]) {\n            return;\n        }\n\n        for (const s of this.seriesGroups[groupId]) {\n            this.setVisibility(s, visible);\n        }\n    }\n\n    public emphasizeSeries(seriesId: string): void {\n        for (const group of Object.keys(this.seriesGroups)) {\n            this.setGroupState(group, group === seriesId ? RenderState.emphasized : RenderState.deemphasized);\n        }\n    }\n\n    public resetSeries(): void {\n        const legendSeries = this.chartAssist.getVisibleSeriesWithLegend();\n        const oneSeriesMode = legendSeries.length === 1;\n\n        if (oneSeriesMode) {\n            this.emphasizeSeries(legendSeries[0].id);\n        } else {\n            for (const group of Object.keys(this.seriesGroups)) {\n                this.setGroupState(group, RenderState.default);\n            }\n        }\n    }\n\n    private setRenderState(seriesId: string, state: RenderState) {\n        let renderState = this.renderStatesIndex[seriesId];\n        if (renderState) {\n            renderState.emphasisState = state;\n        } else {\n            renderState = new ChartAssistRenderStateData(seriesId, this.seriesIndex[seriesId], state);\n            this.renderStatesIndex[seriesId] = renderState;\n        }\n    }\n\n    private setVisibility(seriesId: string, visible: boolean) {\n        let renderState = this.renderStatesIndex[seriesId];\n        if (renderState) {\n            renderState.visible = visible;\n        } else {\n            renderState = new ChartAssistRenderStateData(seriesId, this.seriesIndex[seriesId], RenderState.default, visible);\n            this.renderStatesIndex[seriesId] = renderState;\n        }\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LegendSeriesComponent.html":{"url":"components/LegendSeriesComponent.html","title":"component - LegendSeriesComponent","body":"\n                   \n\n\n\n\n\n  Components\n  LegendSeriesComponent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n    File\n\n\n    src/legend/legend-series/legend-series.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    AfterContentInit\n    \n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n            \n                encapsulation\n                ViewEncapsulation.Emulated\n            \n\n\n\n            \n                host\n                {}\n            \n\n\n\n\n\n\n            \n                selector\n                nui-legend-series\n            \n\n            \n                styleUrls\n                ./legend-series.component.less\n            \n\n\n\n            \n                templateUrl\n                ./legend-series.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                hasInputDescription\n                            \n                            \n                                    Public\n                                hasProjectedDescription\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                active\n                            \n                            \n                                color\n                            \n                            \n                                descriptionPrimary\n                            \n                            \n                                descriptionSecondary\n                            \n                            \n                                icon\n                            \n                            \n                                interactive\n                            \n                            \n                                isSelected\n                            \n                            \n                                seriesRenderState\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                isSelectedChange\n                            \n                        \n                    \n                \n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                class.inverse\n                            \n                            \n                                \n                            \n                            \n                                \n                            \n                        \n                    \n                \n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                        \n                    \n                \n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    active\n                                \n                                \n                                    interactive\n                                \n                                \n                                    seriesRenderState\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(legend: LegendComponent)\n                    \n                \n                        \n                            \n                                Defined in src/legend/legend-series/legend-series.component.ts:111\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        legend\n                                                  \n                                                        \n                                                                        LegendComponent\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        active\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-series/legend-series.component.ts:31\n                            \n                        \n                \n                    \n                        Sets the series active status\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        color\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-series/legend-series.component.ts:82\n                            \n                        \n                \n                    \n                        Color of the series\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        descriptionPrimary\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-series/legend-series.component.ts:67\n                            \n                        \n                \n                    \n                        The primary description of the series\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        descriptionSecondary\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-series/legend-series.component.ts:72\n                            \n                        \n                \n                    \n                        The secondary description of the series\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        icon\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-series/legend-series.component.ts:77\n                            \n                        \n                \n                    \n                        The series icon\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        interactive\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-series/legend-series.component.ts:41\n                            \n                        \n                \n                    \n                        Sets the series interactive mode switch\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        isSelected\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-series/legend-series.component.ts:57\n                            \n                        \n                \n                    \n                        Set whether the series is selected\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        seriesRenderState\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-series/legend-series.component.ts:88\n                            \n                        \n                \n                    \n                        The render state of the legend series\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        isSelectedChange\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-series/legend-series.component.ts:62\n                            \n                        \n                \n                    \n                        Emits an event with a boolean value indicating a new selected status\n\n                    \n                \n            \n        \n\n    \n    HostBindings        \n            \n                \n                    \n                        \n                        \n                            \n                            class.inverse\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-series/legend-series.component.ts:105\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            \n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-series/legend-series.component.ts:98\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            \n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/legend/legend-series/legend-series.component.ts:102\n                            \n                        \n\n\n            \n        \n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            click\n                        \n                        \n                    \n                \n            \n            \n                \nclick()\n                \n            \n\n\n            \n                \n                    Defined in src/legend/legend-series/legend-series.component.ts:130\n                \n            \n\n\n            \n                \n                    Emits an isSelectedChange event on series click if the series is in interactive mode\n\n\n                \n            \n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            hasInputDescription\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hasInputDescription()\n                \n            \n\n\n            \n                \n                    Defined in src/legend/legend-series/legend-series.component.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        boolean indicating whether the series has a primary or secondary description\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            hasProjectedDescription\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hasProjectedDescription()\n                \n            \n\n\n            \n                \n                    Defined in src/legend/legend-series/legend-series.component.ts:146\n                \n            \n\n\n            \n                \n\n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        boolean indicating whether the series has a projected description\n\n                    \n                \n            \n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        active\n                    \n                \n\n\n                \n                    \n                        setactive(active: boolean)\n                    \n                \n                            \n                                \n                                    Defined in src/legend/legend-series/legend-series.component.ts:31\n                                \n                            \n                    \n                        \n                                Sets the series active status\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                        Description\n                                                \n                                            \n                                            \n                                                    \n                                                            active\n                                                    \n                                                            \n                                                                            boolean\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                            \n                                                                    The new active status\n\n                                                            \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        interactive\n                    \n                \n\n                \n                    \n                        getinteractive()\n                    \n                \n                            \n                                \n                                    Defined in src/legend/legend-series/legend-series.component.ts:50\n                                \n                            \n                    \n                        \n                                Gets the series interactive mode value\n\n\n                                \n                                \n                                \n                                    Returns :         boolean\n\n                                \n                        \n                    \n\n                \n                    \n                        setinteractive(interactive: boolean)\n                    \n                \n                            \n                                \n                                    Defined in src/legend/legend-series/legend-series.component.ts:41\n                                \n                            \n                    \n                        \n                                Sets the series interactive mode switch\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                        Description\n                                                \n                                            \n                                            \n                                                    \n                                                            interactive\n                                                    \n                                                            \n                                                                            boolean\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                            \n                                                                    The new interactive mode\n\n                                                            \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        seriesRenderState\n                    \n                \n\n                \n                    \n                        getseriesRenderState()\n                    \n                \n                            \n                                \n                                    Defined in src/legend/legend-series/legend-series.component.ts:91\n                                \n                            \n\n                \n                    \n                        setseriesRenderState(renderState)\n                    \n                \n                            \n                                \n                                    Defined in src/legend/legend-series/legend-series.component.ts:88\n                                \n                            \n                    \n                        \n                                The render state of the legend series\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            renderState\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import {\n    AfterContentInit, ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Host, HostBinding, HostListener, Input, Optional, Output, ViewChild,\n    ViewEncapsulation\n} from \"@angular/core\";\nimport _isEmpty from \"lodash/isEmpty\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { LegendComponent } from \"../legend.component\";\nimport { LegendOrientation } from \"../types\";\n\n/** @ignore */\nexport const LEGEND_SERIES_CLASS_NAME = \"nui-legend-series\";\n\n@Component({\n    // eslint-disable-next-line\n    host: { \"class\": LEGEND_SERIES_CLASS_NAME },\n    selector: \"nui-legend-series\",\n    templateUrl: \"./legend-series.component.html\",\n    styleUrls: [\"./legend-series.component.less\"],\n    encapsulation: ViewEncapsulation.Emulated,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LegendSeriesComponent implements AfterContentInit {\n\n    /**\n     * Sets the series active status\n     *\n     * @param {boolean} active The new active status\n     */\n    @Input()\n    public set active(active: boolean) {\n        this._active = active;\n    }\n\n    /**\n     * Sets the series interactive mode switch\n     *\n     * @param {boolean} interactive The new interactive mode\n     */\n    @Input()\n    public set interactive(interactive: boolean) {\n        this._interactive = interactive;\n    }\n\n    /**\n     * Gets the series interactive mode value\n     *\n     * @returns {boolean} The current interactive mode\n     */\n    public get interactive(): boolean {\n        return this._interactive;\n    }\n\n    /**\n     * Set whether the series is selected\n     */\n    @Input() public isSelected = true;\n\n    /**\n     * Emits an event with a boolean value indicating a new selected status\n     */\n    @Output() public isSelectedChange = new EventEmitter();\n\n    /**\n     * The primary description of the series\n     */\n    @Input() public descriptionPrimary: string;\n\n    /**\n     * The secondary description of the series\n     */\n    @Input() public descriptionSecondary: string;\n\n    /**\n     * The series icon\n     */\n    @Input() public icon: string;\n\n    /**\n     * Color of the series\n     */\n    @Input() public color: string;\n\n    /**\n     * The render state of the legend series\n     */\n    @Input()\n    public set seriesRenderState(renderState: RenderState) {\n        this._seriesRenderState = renderState;\n    }\n    public get seriesRenderState(): RenderState {\n        return this._seriesRenderState || RenderState.default;\n    }\n\n    @ViewChild(\"projectedDescription\") private projectedDescription: ElementRef;\n\n    @HostBinding(`class.${LEGEND_SERIES_CLASS_NAME}--interactive`)\n    public get isInteractiveClassApplied() {\n        return this._interactive;\n    }\n\n    @HostBinding(`class.${LEGEND_SERIES_CLASS_NAME}--horizontal`) public isHorizontalClassApplied = false;\n\n    @HostBinding(`class.inverse`)\n    public get isActiveClassApplied() {\n        return this._active && this.seriesRenderState !== RenderState.hidden;\n    }\n\n    private _seriesRenderState: RenderState;\n    private _active = false;\n    private _interactive = false;\n\n    constructor(@Optional() @Host() private legend: LegendComponent) { }\n\n    public ngAfterContentInit(): void {\n        if (this.legend) {\n            this.legend.activeChanged.subscribe((active: boolean) => this._active = active);\n\n            this.icon = this.icon || this.legend.seriesIcon;\n            this._active = this.legend.active;\n            this.interactive = this.legend.interactive;\n            this.isHorizontalClassApplied = this.legend.orientation === LegendOrientation.horizontal;\n        }\n    }\n\n    /**\n     * Emits an isSelectedChange event on series click if the series is in interactive mode\n     */\n    @HostListener(\"click\")\n    public onClick(): void {\n        if (this.interactive) {\n            this.isSelectedChange.next(!this.isSelected);\n        }\n    }\n\n    /**\n     * @returns boolean indicating whether the series has a primary or secondary description\n     */\n    public hasInputDescription(): boolean {\n        return !_isEmpty(this.descriptionPrimary) || !_isEmpty(this.descriptionSecondary);\n    }\n\n    /**\n     * @returns boolean indicating whether the series has a projected description\n     */\n    public hasProjectedDescription(): boolean {\n        return !!this.projectedDescription && this.projectedDescription.nativeElement.children.length !== 0;\n    }\n}\n\n    \n\n\n\n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                                        {{ descriptionPrimary }}        {{ descriptionSecondary }}                    '\n    var COMPONENTS = [{'name': 'BasicLegendTileComponent', 'selector': 'nui-basic-legend-tile'},{'name': 'ChartComponent', 'selector': 'nui-chart'},{'name': 'ChartDonutContentComponent', 'selector': 'nui-chart-donut-content'},{'name': 'ChartMarkerComponent', 'selector': 'nui-chart-marker'},{'name': 'ChartPopoverComponent', 'selector': 'nui-chart-popover'},{'name': 'ChartTooltipComponent', 'selector': 'nui-chart-tooltip'},{'name': 'ChartTooltipsComponent', 'selector': 'nui-chart-tooltips'},{'name': 'LegendComponent', 'selector': 'nui-legend'},{'name': 'LegendSeriesComponent', 'selector': 'nui-legend-series'},{'name': 'RichLegendTileComponent', 'selector': 'nui-rich-legend-tile'}];\n    var DIRECTIVES = [{'name': 'ChartCollectionIdDirective', 'selector': '[nuiChartCollectionId]'}];\n    var ACTUAL_COMPONENT = {'name': 'LegendSeriesComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LineAccessors.html":{"url":"classes/LineAccessors.html","title":"class - LineAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LineAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/line/line-accessors.ts\n        \n\n            \n                Description\n            \n            \n                Accessor class supporting the LineRenderer, that defines required inputs acquired from data points.\nThis class includes default behavior for all required fields. It's using properties of the same name for data accessors.\n\nIf colorProvider or markerProvider is not defined in the constructor, every new instance of LineAccessors will instantiate it's own, so that has to be\nkept in mind when configuring charts as it could cause potential color synchronization problems.\n\nSee referenced data and series interfaces for required properties.\n            \n\n            \n                Extends\n            \n            \n                        XYAccessors\n            \n\n            \n                Implements\n            \n            \n                            ILineAccessors\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                data\n                            \n                            \n                                    Public\n                                series\n                            \n                            \n                                    Public\n                                data\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(colorProvider, markerProvider)\n                    \n                \n                        \n                            \n                                Defined in src/renderers/line/line-accessors.ts:38\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        colorProvider\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        markerProvider\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ILineDataAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/line/line-accessors.ts:37\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ILineSeriesAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/line/line-accessors.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IXYDataAccessors\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        x: (d: any) => d.x,\n        y: (d: any) => d.y,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         XYAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYAccessors:14\n\n                            \n                        \n\n                \n                    \n                        The default data accessors for using with renderers deriving from XYRenderer \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { defaultColorProvider, defaultMarkerProvider } from \"../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, SeriesAccessor } from \"../../core/common/types\";\nimport { IXYDataAccessors, XYAccessors } from \"../accessors/xy-accessors\";\n\nexport interface ILineDataAccessors extends IXYDataAccessors {\n    defined?: DataAccessor;\n}\n\n/**\n * Series accessors used in {@link LineAccessors}.\n */\nexport interface ILineSeriesAccessors {\n    /** Color of the series */\n    color?: SeriesAccessor;\n    /** Marker for the series */\n    marker?: SeriesAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: SeriesAccessor | undefined;\n}\n\nexport interface ILineAccessors extends IAccessors {\n    data: ILineDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series: ILineSeriesAccessors;\n}\n\n/**\n * Accessor class supporting the {@link LineRenderer}, that defines required inputs acquired from data points.\n * This class includes default behavior for all required fields. It's using properties of the same name for data accessors.\n * \n * If colorProvider or markerProvider is not defined in the constructor, every new instance of LineAccessors will instantiate it's own, so that has to be\n * kept in mind when configuring charts as it could cause potential color synchronization problems.\n *\n * See referenced data and series interfaces for required properties.\n */\nexport class LineAccessors extends XYAccessors implements ILineAccessors {\n    public data: ILineDataAccessors;\n    public series: ILineSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider(), private markerProvider = defaultMarkerProvider()) {\n        super();\n\n        this.data.defined = (d: any, i) => d.hasOwnProperty(\"defined\") ? d.defined : true;\n\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n            marker: this.markerProvider ? this.markerProvider.get : undefined,\n        };\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LineSelectSeriesInteractionStrategy.html":{"url":"classes/LineSelectSeriesInteractionStrategy.html","title":"class - LineSelectSeriesInteractionStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LineSelectSeriesInteractionStrategy\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/line/interaction-strategies/line-select-series-interaction-strategy.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IHighlightStrategy\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                INTERACTION_MARGIN\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                draw\n                            \n                            \n                                    Public\n                                getDataPointIndex\n                            \n                            \n                                    Public\n                                highlightDataPoint\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            INTERACTION_MARGIN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 8\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/line/interaction-strategies/line-select-series-interaction-strategy.ts:12\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            draw\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    draw(renderer: LineRenderer, renderSeries: IRenderSeries, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/line/interaction-strategies/line-select-series-interaction-strategy.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                                LineRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDataPointIndex\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointIndex(renderer: LineRenderer, series: IDataSeries, values: literal type, scales: Scales)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/line/interaction-strategies/line-select-series-interaction-strategy.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                                LineRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    series\n                                    \n                                            IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    values\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            highlightDataPoint\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    highlightDataPoint(renderer: LineRenderer, renderSeries: IRenderSeries, dataPointIndex: number, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/line/interaction-strategies/line-select-series-interaction-strategy.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                                LineRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dataPointIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import isNil from \"lodash/isNil\";\nimport { Subject } from \"rxjs\";\n\nimport { DATA_POINT_NOT_FOUND, HIGHLIGHT_SERIES_EVENT, INTERACTION_SERIES_EVENT } from \"../../../constants\";\nimport { Scales } from \"../../../core/common/scales/types\";\nimport { D3Selection, IDataPoint, IDataSeries, InteractionType, IRendererEventPayload } from \"../../../core/common/types\";\nimport { IHighlightStrategy, IRenderSeries, RenderLayerName } from \"../../types\";\nimport { ILineAccessors } from \"../line-accessors\";\nimport { LineRenderer } from \"../line-renderer\";\n\nexport class LineSelectSeriesInteractionStrategy implements IHighlightStrategy {\n    public readonly INTERACTION_MARGIN = 8;\n\n    public draw(renderer: LineRenderer, renderSeries: IRenderSeries, rendererSubject: Subject): void {\n        const target = renderSeries.containers[RenderLayerName.data];\n\n        let interactionPath: D3Selection = target.select(\"path.interaction\");\n\n        if (isNil(renderer.config.strokeWidth)) {\n            throw new Error(\"renderer.config.strokeWidth is not defined\");\n        }\n\n        if (interactionPath.empty()) {\n            interactionPath = target.append(\"path\")\n                .classed(\"interaction\", true)\n                .classed(`pointer-events pointer-events-click`, true)\n                .attrs({\n                    \"stroke-width\": renderer.config.strokeWidth + (2 * this.INTERACTION_MARGIN),\n                    \"stroke\": \"transparent\",\n                    \"fill\": \"none\",\n                })\n                .on(\"mouseenter\", () => {\n                    const dataPoint: Omit = {\n                        seriesId: renderSeries.dataSeries.id,\n                        dataSeries: renderSeries.dataSeries,\n                        // TODO: doesn't work with empty data\n                        index: 0,\n                        data: renderSeries.dataSeries.data[0],\n                    };\n\n                    rendererSubject.next({ eventName: HIGHLIGHT_SERIES_EVENT, data: dataPoint });\n                })\n                .on(\"mouseleave\", () => {\n                    const dataPoint: Omit = {\n                        seriesId: renderSeries.dataSeries.id,\n                        dataSeries: renderSeries.dataSeries,\n                        index: DATA_POINT_NOT_FOUND,\n                    };\n\n                    rendererSubject.next({ eventName: HIGHLIGHT_SERIES_EVENT, data: dataPoint });\n                })\n                .on(\"click\", (d: any, i: number) => {\n                    this.emitEvent(renderer, INTERACTION_SERIES_EVENT, InteractionType.Click, renderSeries, d, i, rendererSubject);\n                });\n        }\n\n        renderer.drawLine(renderSeries, interactionPath);\n    }\n\n    // TODO: Get rid of this function or make it optional in interface\n    public getDataPointIndex(renderer: LineRenderer, series: IDataSeries, values: { [p: string]: any }, scales: Scales): number {\n        // @ts-ignore\n        return;\n    }\n\n    public highlightDataPoint(renderer: LineRenderer, renderSeries: IRenderSeries,\n                              dataPointIndex: number, rendererSubject: Subject): void {\n    }\n\n    private emitEvent(renderer: LineRenderer, eventName: string, interactionType: InteractionType, renderSeries: IRenderSeries,\n                      data: any, i: number, rendererSubject: Subject) {\n        const dataPoint: IDataPoint = {\n            seriesId: renderSeries.dataSeries.id,\n            dataSeries: renderSeries.dataSeries,\n            index: i,\n            data: data,\n            position: renderer.getDataPointPosition(renderSeries.dataSeries, i, renderSeries.scales),\n        };\n        rendererSubject.next({\n            eventName: eventName,\n            data: {\n                interactionType: interactionType,\n                payload: dataPoint,\n            },\n        });\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LinearScale.html":{"url":"classes/LinearScale.html","title":"class - LinearScale","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LinearScale\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/scales/linear-scale.ts\n        \n\n            \n                Description\n            \n            \n                Nova wrapper around D3's scaleLinear\n\n            \n\n            \n                Extends\n            \n            \n                        Scale\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                domainCalculator\n                            \n                            \n                                    Public\n                                formatters\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                isDomainFixed\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                convert\n                            \n                            \n                                    Public\n                                invert\n                            \n                            \n                                    Public\n                                isContinuous\n                            \n                            \n                                    Public\n                                isDomainValid\n                            \n                            \n                                    Public\n                                    Abstract\n                                convert\n                            \n                            \n                                    Public\n                                domain\n                            \n                            \n                                    Public\n                                domain\n                            \n                            \n                                    Public\n                                domain\n                            \n                            \n                                    Public\n                                fixDomain\n                            \n                            \n                                    Public\n                                    Abstract\n                                invert\n                            \n                            \n                                    Public\n                                    Abstract\n                                isContinuous\n                            \n                            \n                                    Public\n                                isDomainValid\n                            \n                            \n                                    Public\n                                range\n                            \n                            \n                                    Public\n                                range\n                            \n                            \n                                    Public\n                                range\n                            \n                            \n                                    Public\n                                reverse\n                            \n                            \n                                    Public\n                                reversed\n                            \n                            \n                                    Public\n                                reversed\n                            \n                            \n                                    Public\n                                reversed\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/common/scales/linear-scale.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            domainCalculator\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         DomainCalculator\n\n                        \n                    \n                    \n                        \n                            Default value : getAutomaticDomain\n                        \n                    \n                            \n                                \n                                    Inherited from         Scale\n\n                                \n                            \n                        \n                            \n                                    Defined in         Scale:11\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            formatters\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IFormatters\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         Scale\n\n                                \n                            \n                        \n                            \n                                    Defined in         Scale:12\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Scale\n\n                                \n                            \n                        \n                            \n                                    Defined in         Scale:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            isDomainFixed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Scale\n\n                                \n                            \n                        \n                            \n                                    Defined in         Scale:13\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            convert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    convert(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/linear-scale.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            invert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    invert(coordinate: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/linear-scale.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    coordinate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isContinuous\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isContinuous()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/linear-scale.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isDomainValid\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isDomainValid()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/linear-scale.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            convert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    convert(value: T)\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:31\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    domain()\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:55\n\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                    \n                        Returns :     T[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    domain(domain: T[])\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:56\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    domain(domain?: T[])\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:57\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            fixDomain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fixDomain(domain: T[])\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:67\n\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            invert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    invert(coordinate: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:33\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    coordinate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            isContinuous\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isContinuous()\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:35\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isDomainValid\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isDomainValid()\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:74\n\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            range\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    range()\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:43\n\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            range\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    range(range: [number, number])\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:44\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                            [number, number]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            range\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    range(range?: [number, number])\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:45\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                            [number, number]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reverse\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reverse()\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:78\n\n                \n            \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reversed()\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:83\n\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reversed(reversed: boolean)\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:84\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reversed\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reversed(reversed?: boolean)\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:85\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reversed\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | \n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { scaleLinear } from \"d3-scale\";\n\nimport { Scale } from \"./scale\";\n\n/**\n * Nova wrapper around [D3's scaleLinear](https://d3indepth.com/scales/#scalelinear)\n */\nexport class LinearScale extends Scale {\n    constructor(id?: string) {\n        super(id);\n\n        this.formatters.tick = value => value + \"\";\n    }\n\n    protected createD3Scale(): any {\n        return scaleLinear();\n    }\n\n    public convert(value: number): number {\n        return this._d3Scale(value);\n    }\n\n    public invert(coordinate: number): number {\n        return this._d3Scale.invert(coordinate);\n    }\n\n    public isContinuous(): boolean {\n        return true;\n    }\n\n    public isDomainValid(): boolean {\n        return -1 === this.domain().findIndex((value) => isNaN(value));\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MappedValueProvider.html":{"url":"classes/MappedValueProvider.html","title":"class - MappedValueProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MappedValueProvider\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/palette/mapped-value-provider.ts\n        \n\n            \n                Description\n            \n            \n                This class matches the provided colors to given series.\nIt keeps track of already given colors to given entities to avoid conflicts.\n\n            \n\n\n            \n                Implements\n            \n            \n                            IValueProvider\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                get\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                reset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(valueMap: literal type, defaultValue?: T)\n                    \n                \n                        \n                            \n                                Defined in src/core/common/palette/mapped-value-provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        valueMap\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        defaultValue\n                                                  \n                                                        \n                                                                    T\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/palette/mapped-value-provider.ts:13\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reset()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/palette/mapped-value-provider.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IValueProvider } from \"../types\";\n\n/**\n * This class matches the provided colors to given series.\n * It keeps track of already given colors to given entities to avoid conflicts.\n */\nexport class MappedValueProvider implements IValueProvider {\n\n    constructor(private valueMap: { [key: string]: T }, private defaultValue?: T) {\n        this.reset();\n    }\n\n    public get = (entityId: string): T | undefined =>\n        this.valueMap[entityId] || this.defaultValue\n\n    public reset(): void {\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MarkerUtils.html":{"url":"classes/MarkerUtils.html","title":"class - MarkerUtils","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MarkerUtils\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/marker-utils.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_MARKER_CONTAINER_CLASS\n                            \n                            \n                                    Static\n                                    Readonly\n                                MARKER_PATH_CLASS\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                drawMarker\n                            \n                            \n                                    Static\n                                manageMarker\n                            \n                            \n                                    Static\n                                removeMarker\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_MARKER_CONTAINER_CLASS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"marker\"\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/marker-utils.ts:23\n                            \n                        \n\n                \n                    \n                        The default class for the marker's container \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            MARKER_PATH_CLASS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"marker-path\"\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/marker-utils.ts:26\n                            \n                        \n\n                \n                    \n                        The class used for the marker's svg path \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            drawMarker\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    drawMarker(dataPoint: IDataPoint, marker: IChartMarker, color: string, target: D3Selection, dataPointSubject: Subject>, className: string, markerInteractionConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/marker-utils.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    dataPoint\n                                    \n                                                IDataPoint\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    marker\n                                    \n                                                IChartMarker\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    color\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    target\n                                    \n                                                D3Selection\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    dataPointSubject\n                                    \n                                                Subject>\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    className\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        MarkerUtils.DEFAULT_MARKER_CONTAINER_CLASS\n                                    \n\n                                \n                                \n                                    markerInteractionConfig\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        DEFAULT_MARKER_INTERACTION_CONFIG\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            manageMarker\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    manageMarker(dataSeries: IDataSeries, scales: IXYScales, dataPointIndex: number, container: D3Selection, rendererSubject: Subject, markerInteractionConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/marker-utils.ts:37\n                \n            \n\n\n            \n                \n                    This method impersonates marker related logic used in various renderers\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    scales\n                                    \n                                                IXYScales\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    dataPointIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    container\n                                    \n                                                D3Selection\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    markerInteractionConfig\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        DEFAULT_MARKER_INTERACTION_CONFIG\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            removeMarker\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeMarker(target: D3Selection, className: string)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/marker-utils.ts:157\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                                D3Selection\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    className\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        MarkerUtils.DEFAULT_MARKER_CONTAINER_CLASS\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UtilService } from \"@nova-ui/bits\";\nimport { Subject } from \"rxjs\";\n\nimport { DATA_POINT_INTERACTION_RESET, INTERACTION_DATA_POINT_EVENT } from \"../constants\";\nimport { isInRange } from \"../core/common/scales/helpers/is-in-range\";\nimport { IXYScales } from \"../core/common/scales/types\";\nimport {\n    D3Selection,\n    IAccessors,\n    IChartMarker,\n    IDataPoint,\n    IDataSeries,\n    IInteractionDataPointEvent,\n    InteractionType,\n    IRendererEventPayload,\n} from \"../core/common/types\";\n\nimport { DEFAULT_MARKER_INTERACTION_CONFIG } from \"./constants\";\n\nexport class MarkerUtils {\n\n    /** The default class for the marker's container */\n    public static readonly DEFAULT_MARKER_CONTAINER_CLASS = \"marker\";\n\n    /** The class used for the marker's svg path */\n    public static readonly MARKER_PATH_CLASS = \"marker-path\";\n\n    /**\n     * This method impersonates marker related logic used in various renderers\n     *\n     * @param dataSeries\n     * @param scales\n     * @param dataPointIndex\n     * @param container\n     * @param rendererSubject\n     */\n    public static manageMarker(dataSeries: IDataSeries,\n                               scales: IXYScales,\n                               dataPointIndex: number,\n                               container: D3Selection,\n                               rendererSubject: Subject,\n                               markerInteractionConfig = DEFAULT_MARKER_INTERACTION_CONFIG): void {\n        if (!container) {\n            throw new Error(\"Container doesn't exist!\");\n        }\n\n        if (dataSeries.data.length === 0) {\n            MarkerUtils.removeMarker(container);\n            return;\n        }\n\n        const accessors = dataSeries.accessors;\n\n        if (dataPointIndex ,\n                             dataPointSubject: Subject>,\n                             className: string = MarkerUtils.DEFAULT_MARKER_CONTAINER_CLASS,\n                             markerInteractionConfig = DEFAULT_MARKER_INTERACTION_CONFIG) {\n        let markerTarget: D3Selection | D3Selection = target.select(`g.${className}`);\n        const xCoord = dataPoint?.position?.x;\n        const yCoord = dataPoint?.position?.y;\n        const attrs = {\n            \"transform\": `translate(${xCoord}, ${yCoord})`,\n            \"cursor\": \"crosshair\",\n        };\n\n        const getPointerEventsClass = () => `${markerInteractionConfig.enabled ? \" pointer-events\" : \"\"}`;\n        const getPointerEventsClickClass = () => `${markerInteractionConfig.enabled && markerInteractionConfig.clickable ? \" pointer-events-click\" : \"\"}`;\n\n        if (markerTarget.empty()) {\n            markerTarget = target.append(\"g\")\n                .classed(`${className}${getPointerEventsClass()}${getPointerEventsClickClass()}`, true);\n        }\n\n        marker.setColor(color);\n        markerTarget.attrs(attrs);\n\n        markerTarget.on(\"mouseenter\", () => {\n            dataPointSubject.next({ eventName: INTERACTION_DATA_POINT_EVENT, data: { interactionType: InteractionType.Hover, dataPoint } });\n        });\n        markerTarget.on(\"mouseleave\", () => {\n            dataPointSubject.next({\n                eventName: INTERACTION_DATA_POINT_EVENT,\n                data: {\n                    interactionType: InteractionType.Hover,\n                    dataPoint: {\n                        ...dataPoint,\n                        index: DATA_POINT_INTERACTION_RESET,\n                    },\n                },\n            });\n        });\n        markerTarget.on(\"click\", () => {\n            dataPointSubject.next({ eventName: INTERACTION_DATA_POINT_EVENT, data: { interactionType: InteractionType.Click, dataPoint } });\n        });\n\n        if (!(>markerTarget).selectAll(\"g > *\").size() && markerTarget.node()) {\n            markerTarget.node()?.appendChild(UtilService.getSvgFromString(marker.getSvg()));\n            (>markerTarget).select(\"path\").classed(MarkerUtils.MARKER_PATH_CLASS, true);\n        }\n\n        const path = (>markerTarget).select(\"path\").node() as HTMLElement;\n        if (path && markerInteractionConfig.enabled) {\n            // Hack to accommodate existing Firefox hack in MouseInteractiveArea\n            const pathRect = path.getBoundingClientRect();\n            // 'x' in this case represents the absolute position of the left side of the marker\n            path.setAttribute(\"x\", Math.ceil(((dataPoint?.position?.x as number) - pathRect.width / 2)).toString());\n            // 'y' in this case represents the absolute position of the top side of the marker\n            path.setAttribute(\"y\", Math.ceil(((dataPoint?.position?.y as number) - pathRect.height / 2)).toString());\n        }\n    }\n\n    public static removeMarker(target: D3Selection, className: string = MarkerUtils.DEFAULT_MARKER_CONTAINER_CLASS) {\n        target.select(`g.${className}`).remove();\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MissingDataLineRendererConfig.html":{"url":"classes/MissingDataLineRendererConfig.html","title":"class - MissingDataLineRendererConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MissingDataLineRendererConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/line/missing-data-line-renderer-config.ts\n        \n\n            \n                Description\n            \n            \n                Standard line renderer config for visualizing missing data \n\n            \n\n\n            \n                Implements\n            \n            \n                            ILineRendererConfig\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                interactive\n                            \n                            \n                                    Public\n                                strokeStyle\n                            \n                            \n                                    Public\n                                strokeWidth\n                            \n                            \n                                    Public\n                                useEnhancedLineCaps\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interactive\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/line/missing-data-line-renderer-config.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            strokeStyle\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : LineRenderer.getStrokeStyleDashed(1)\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/line/missing-data-line-renderer-config.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            strokeWidth\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 1\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/line/missing-data-line-renderer-config.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            useEnhancedLineCaps\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/line/missing-data-line-renderer-config.ts:10\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ILineRendererConfig } from \"../types\";\n\nimport { LineRenderer } from \"./line-renderer\";\n\n/** Standard line renderer config for visualizing missing data */\nexport class MissingDataLineRendererConfig implements ILineRendererConfig {\n    public strokeWidth = 1;\n    public interactive = false;\n    public strokeStyle = LineRenderer.getStrokeStyleDashed(1);\n    public useEnhancedLineCaps = true;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NoopAccessors.html":{"url":"classes/NoopAccessors.html","title":"class - NoopAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NoopAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/accessors/noop-accessors.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            INoopAccessors\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                data\n                            \n                            \n                                    Public\n                                series\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/renderers/accessors/noop-accessors.ts:12\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/accessors/noop-accessors.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/accessors/noop-accessors.ts:11\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {IAccessors} from \"../../core/common/types\";\n\n\nexport interface INoopAccessors extends IAccessors {\n    data: any;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series: any;\n}\n\nexport class NoopAccessors implements INoopAccessors {\n    public series: any;\n    public data: any;\n\n    constructor() {\n        this.series = undefined;\n        this.data = undefined;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NoopRenderer.html":{"url":"classes/NoopRenderer.html","title":"class - NoopRenderer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NoopRenderer\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/noop-renderer.ts\n        \n\n            \n                Description\n            \n            \n                Renderer that is able to draw line chart\n\n            \n\n            \n                Extends\n            \n            \n                        Renderer\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                config\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_CONFIG\n                            \n                            \n                                    Public\n                                getContainerStateStyles\n                            \n                            \n                                    Public\n                                interaction\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                draw\n                            \n                            \n                                    Public\n                                getDataPointPosition\n                            \n                            \n                                    Public\n                                getRequiredLayers\n                            \n                            \n                                    Public\n                                highlightDataPoint\n                            \n                            \n                                    Public\n                                    Abstract\n                                draw\n                            \n                            \n                                    Public\n                                filterDataByDomain\n                            \n                            \n                                    Public\n                                getDataPointIndex\n                            \n                            \n                                    Public\n                                    Abstract\n                                getDataPointPosition\n                            \n                            \n                                    Public\n                                getDomain\n                            \n                            \n                                    Public\n                                getDomainOfFilteredData\n                            \n                            \n                                    Public\n                                getRequiredLayers\n                            \n                            \n                                    Public\n                                highlightDataPoint\n                            \n                            \n                                    Public\n                                setDataPointState\n                            \n                            \n                                    Public\n                                setSeriesState\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRendererConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:40\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_CONFIG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRendererConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        stateStyles: {\n            [RenderState.default]: {\n                opacity: 1,\n            },\n            [RenderState.hidden]: {\n                opacity: 0,\n            },\n            [RenderState.deemphasized]: {\n                opacity: 0.1,\n            },\n            [RenderState.emphasized]: {\n                opacity: 1,\n            },\n        },\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:23\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getContainerStateStyles\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:95\n\n                            \n                        \n\n                \n                    \n                        Get the style attributes for the specified state that we need to apply to a series container\n\n                    \n                \n\n                    \n                        \n                          \n                                  Parameters :\n                                  \n                                      \n                                          \n                                                Name\n                                                    Description\n                                          \n                                      \n                                      \n                                                \n                                                        state\n                                                        \n                                                                the state for which to retrieve container styles\n\n                                                        \n                                                \n                                      \n                                  \n                          \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interaction\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Record\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:45\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            draw\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    draw(renderSeries: IRenderSeries, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/noop-renderer.ts:16\n                \n            \n\n\n            \n                \n                    See Renderer \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDataPointPosition\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointPosition(dataSeries: IDataSeries, index: number, scales: Scales)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/noop-renderer.ts:31\n                \n            \n\n\n            \n                \n                    See Renderer \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSeries\n                                    \n                                            IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IPosition\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getRequiredLayers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRequiredLayers()\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/noop-renderer.ts:26\n                \n            \n\n\n            \n                \n                    See Renderer \n\n\n                    \n                        Returns :     ILasagnaLayer[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            highlightDataPoint\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    highlightDataPoint(renderSeries: IRenderSeries, dataPointIndex: number, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/noop-renderer.ts:20\n                \n            \n\n\n            \n                \n                    See Renderer \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dataPointIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            draw\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    draw(renderSeries: IRenderSeries, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:53\n\n                \n            \n\n\n            \n                \n                    Draw the visual representation of the provided data series\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The series to render\n\n                                    \n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A subject to optionally invoke for emitting events regarding a data point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            filterDataByDomain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    filterDataByDomain(data: any[], dataSeries: IDataSeries, scaleName: string, domain: any[])\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:170\n\n                \n            \n\n\n            \n                \n                    Filters given dataset by domain of provided scale\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scaleName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    domain\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDataPointIndex\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointIndex(series: IDataSeries, values: literal type, scales: Scales)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:74\n\n                \n            \n\n\n            \n                \n                    Based on provided values, return the nearest data point that the given coordinates represent. This is used for mouse hover behavior\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    series\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        series from which to determine the index corresponding to the specified values\n\n                                    \n                                \n                                \n                                    values\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the values from which a data point index can be determined\n\n                                    \n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the scales to be used in the index calculation\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        negative value means that index is not found\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            getDataPointPosition\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointPosition(dataSeries: IDataSeries, index: number, scales: Scales)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:63\n\n                \n            \n\n\n            \n                \n                    Return position of a specified datapoint\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IPosition | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDomain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDomain(data: any[], dataSeries: IDataSeries, scaleName: string, scale: IScale)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:153\n\n                \n            \n\n\n            \n                \n                    Calculate the domain using the data of a series\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        source data, can be filtered\n\n                                    \n                                \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        related data series\n\n                                    \n                                \n                                \n                                    scaleName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the scale for which domain calculation is needed\n\n                                    \n                                \n                                \n                                    scale\n                                    \n                                                IScale\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        min and max values as an array\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDomainOfFilteredData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDomainOfFilteredData(dataSeries: IDataSeries, filterScales: Record>, scaleKey: string, scale: IScale)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:129\n\n                \n            \n\n\n            \n                \n                    Calculate domain for data filtered by given filterScales\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filterScales\n                                    \n                                                Record>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scaleKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scale\n                                    \n                                                IScale\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        array of datapoints from dataSeries filtered by domains of given filterScales\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getRequiredLayers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRequiredLayers()\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:190\n\n                \n            \n\n\n            \n                \n                    Get the definitions of lasagna layers required for visualizing data\n\n\n                    \n                    \n                    \n                        Returns :     ILasagnaLayer[]\n\n                    \n                    \n                        lasagna layer definitions\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            highlightDataPoint\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    highlightDataPoint(renderSeries: IRenderSeries, dataPointIndex: number, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:85\n\n                \n            \n\n\n            \n                \n                    Highlight the data point corresponding to the specified data point index\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The series on which to render the data point highlight\n\n                                    \n                                \n                                \n                                    dataPointIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        index of the highlighted point within the data series (pass -1 to remove the highlight marker)\n\n                                    \n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A subject to optionally invoke for emitting events regarding a data point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setDataPointState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setDataPointState(target: D3Selection, state: RenderState)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:117\n\n                \n            \n\n\n            \n                \n                    Set the RenderState of the target data point\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                                D3Selection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the target data point\n\n                                    \n                                \n                                \n                                    state\n                                    \n                                                RenderState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new state for the target data point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setSeriesState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setSeriesState(renderContainers: IRenderContainers, state: RenderState)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:108\n\n                \n            \n\n\n            \n                \n                    Set the RenderState of the target data series\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderContainers\n                                    \n                                                IRenderContainers\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the render containers of the series\n\n                                    \n                                \n                                \n                                    state\n                                    \n                                                RenderState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new state for the target series\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {Subject} from \"rxjs\";\n\nimport {Renderer} from \"../core/common/renderer\";\nimport {Scales} from \"../core/common/scales/types\";\nimport {IDataSeries, ILasagnaLayer, IPosition, IRendererEventPayload} from \"../core/common/types\";\n\nimport {INoopAccessors} from \"./accessors/noop-accessors\";\nimport {IRenderSeries} from \"./types\";\n\n/**\n * Renderer that is able to draw line chart\n */\nexport class NoopRenderer extends Renderer {\n\n    /** See {@link Renderer#draw} */\n    public draw(renderSeries: IRenderSeries, rendererSubject: Subject): void {\n    }\n\n    /** See {@link Renderer#highlightDataPoint} */\n    public highlightDataPoint(renderSeries: IRenderSeries,\n                              dataPointIndex: number,\n                              rendererSubject: Subject): void {\n    }\n\n    /** See {@link Renderer#getRequiredLayers} */\n    public getRequiredLayers(): ILasagnaLayer[] {\n        return [];\n    }\n\n    /** See {@link Renderer#getDataPointPosition} */\n    public getDataPointPosition(dataSeries: IDataSeries, index: number, scales: Scales): IPosition {\n        // @ts-ignore\n        return;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NoopScale.html":{"url":"classes/NoopScale.html","title":"class - NoopScale","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NoopScale\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/scales/noop-scale.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IScale\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                formatters\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                isDomainFixed\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                convert\n                            \n                            \n                                domain\n                            \n                            \n                                domain\n                            \n                            \n                                domain\n                            \n                            \n                                    Public\n                                fixDomain\n                            \n                            \n                                    Public\n                                invert\n                            \n                            \n                                    Public\n                                isContinuous\n                            \n                            \n                                    Public\n                                isDomainValid\n                            \n                            \n                                range\n                            \n                            \n                                range\n                            \n                            \n                                range\n                            \n                            \n                                    Public\n                                reverse\n                            \n                            \n                                    Public\n                                reversed\n                            \n                            \n                                    Public\n                                reversed\n                            \n                            \n                                    Public\n                                reversed\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    d3Scale\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/common/scales/noop-scale.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            formatters\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IFormatters\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/scales/noop-scale.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/scales/noop-scale.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            isDomainFixed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/scales/noop-scale.ts:8\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            convert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    convert()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \ndomain()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     T[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \ndomain(domain: T[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \ndomain(domain?: T[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            fixDomain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fixDomain(domain: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            invert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    invert()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     T\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isContinuous\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isContinuous()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isDomainValid\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isDomainValid()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            range\n                        \n                        \n                    \n                \n            \n            \n                \nrange()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:27\n                \n            \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            range\n                        \n                        \n                    \n                \n            \n            \n                \nrange(range: [number, number])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                            [number, number]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            range\n                        \n                        \n                    \n                \n            \n            \n                \nrange(range?: [number, number])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                            [number, number]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :      | \n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reverse\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reverse()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:53\n                \n            \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reversed()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reversed(reversed: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reversed\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reversed(reversed?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reversed\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | \n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        d3Scale\n                    \n                \n\n                \n                    \n                        getd3Scale()\n                    \n                \n                            \n                                \n                                    Defined in src/core/common/scales/noop-scale.ts:22\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { AxisScale } from \"d3-axis\";\n\nimport { IFormatters, IScale } from \"./types\";\n\nexport class NoopScale implements IScale {\n    public readonly id: string;\n    public formatters: IFormatters;\n    public isDomainFixed: boolean;\n\n    constructor(id?: string) {}\n\n    public convert(): number {\n        // @ts-ignore\n        return;\n    }\n\n    public invert(): T {\n        // @ts-ignore\n        return;\n    }\n\n    public get d3Scale(): AxisScale {\n        // @ts-ignore\n        return;\n    }\n\n    range(): [number, number];\n    range(range: [number, number]): this;\n    range(range?: [number, number]): [number, number] | this {\n        // @ts-ignore\n        return;\n    }\n\n    domain(): T[];\n    domain(domain: T[]): this;\n    domain(domain?: T[]): any {\n        // @ts-ignore\n        return;\n    }\n\n    public fixDomain(domain: any[]): null {\n        return null;\n    }\n\n    public isContinuous(): boolean {\n        return false;\n    }\n\n    public isDomainValid(): boolean {\n        return true;\n    }\n\n    public reverse(): this {\n        // @ts-ignore\n        return;\n    }\n\n    public reversed(): boolean;\n    public reversed(reversed: boolean): this;\n    public reversed(reversed?: boolean): boolean | this {\n        // @ts-ignore\n        return;\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NuiChartsModule.html":{"url":"modules/NuiChartsModule.html","title":"module - NuiChartsModule","body":"\n                   \n\n\n\n\n    Modules\n    NuiChartsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NuiChartsModule\n\n\n\ncluster_NuiChartsModule_declarations\n\n\n\ncluster_NuiChartsModule_providers\n\n\n\ncluster_NuiChartsModule_exports\n\n\n\n\nBasicLegendTileComponent\n\nBasicLegendTileComponent\n\n\n\nNuiChartsModule\n\nNuiChartsModule\n\nNuiChartsModule -->\n\nBasicLegendTileComponent->NuiChartsModule\n\n\n\n\n\nChartCollectionIdDirective\n\nChartCollectionIdDirective\n\nNuiChartsModule -->\n\nChartCollectionIdDirective->NuiChartsModule\n\n\n\n\n\nChartComponent\n\nChartComponent\n\nNuiChartsModule -->\n\nChartComponent->NuiChartsModule\n\n\n\n\n\nChartDonutContentComponent\n\nChartDonutContentComponent\n\nNuiChartsModule -->\n\nChartDonutContentComponent->NuiChartsModule\n\n\n\n\n\nChartMarkerComponent\n\nChartMarkerComponent\n\nNuiChartsModule -->\n\nChartMarkerComponent->NuiChartsModule\n\n\n\n\n\nChartPopoverComponent\n\nChartPopoverComponent\n\nNuiChartsModule -->\n\nChartPopoverComponent->NuiChartsModule\n\n\n\n\n\nChartTooltipComponent\n\nChartTooltipComponent\n\nNuiChartsModule -->\n\nChartTooltipComponent->NuiChartsModule\n\n\n\n\n\nChartTooltipsComponent\n\nChartTooltipsComponent\n\nNuiChartsModule -->\n\nChartTooltipsComponent->NuiChartsModule\n\n\n\n\n\nLegendComponent\n\nLegendComponent\n\nNuiChartsModule -->\n\nLegendComponent->NuiChartsModule\n\n\n\n\n\nLegendSeriesComponent\n\nLegendSeriesComponent\n\nNuiChartsModule -->\n\nLegendSeriesComponent->NuiChartsModule\n\n\n\n\n\nRichLegendTileComponent\n\nRichLegendTileComponent\n\nNuiChartsModule -->\n\nRichLegendTileComponent->NuiChartsModule\n\n\n\n\n\nBasicLegendTileComponent \n\nBasicLegendTileComponent \n\nBasicLegendTileComponent  -->\n\nNuiChartsModule->BasicLegendTileComponent \n\n\n\n\n\nChartCollectionIdDirective \n\nChartCollectionIdDirective \n\nChartCollectionIdDirective  -->\n\nNuiChartsModule->ChartCollectionIdDirective \n\n\n\n\n\nChartComponent \n\nChartComponent \n\nChartComponent  -->\n\nNuiChartsModule->ChartComponent \n\n\n\n\n\nChartDonutContentComponent \n\nChartDonutContentComponent \n\nChartDonutContentComponent  -->\n\nNuiChartsModule->ChartDonutContentComponent \n\n\n\n\n\nChartMarkerComponent \n\nChartMarkerComponent \n\nChartMarkerComponent  -->\n\nNuiChartsModule->ChartMarkerComponent \n\n\n\n\n\nChartPopoverComponent \n\nChartPopoverComponent \n\nChartPopoverComponent  -->\n\nNuiChartsModule->ChartPopoverComponent \n\n\n\n\n\nChartTooltipComponent \n\nChartTooltipComponent \n\nChartTooltipComponent  -->\n\nNuiChartsModule->ChartTooltipComponent \n\n\n\n\n\nChartTooltipsComponent \n\nChartTooltipsComponent \n\nChartTooltipsComponent  -->\n\nNuiChartsModule->ChartTooltipsComponent \n\n\n\n\n\nLegendComponent \n\nLegendComponent \n\nLegendComponent  -->\n\nNuiChartsModule->LegendComponent \n\n\n\n\n\nLegendSeriesComponent \n\nLegendSeriesComponent \n\nLegendSeriesComponent  -->\n\nNuiChartsModule->LegendSeriesComponent \n\n\n\n\n\nRichLegendTileComponent \n\nRichLegendTileComponent \n\nRichLegendTileComponent  -->\n\nNuiChartsModule->RichLegendTileComponent \n\n\n\n\n\nChartCollectionService\n\nChartCollectionService\n\nNuiChartsModule -->\n\nChartCollectionService->NuiChartsModule\n\n\n\n\n\nThresholdsService\n\nThresholdsService\n\nNuiChartsModule -->\n\nThresholdsService->NuiChartsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        API\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/charts.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            BasicLegendTileComponent\n                        \n                        \n                            ChartCollectionIdDirective\n                        \n                        \n                            ChartComponent\n                        \n                        \n                            ChartDonutContentComponent\n                        \n                        \n                            ChartMarkerComponent\n                        \n                        \n                            ChartPopoverComponent\n                        \n                        \n                            ChartTooltipComponent\n                        \n                        \n                            ChartTooltipsComponent\n                        \n                        \n                            LegendComponent\n                        \n                        \n                            LegendSeriesComponent\n                        \n                        \n                            RichLegendTileComponent\n                        \n                    \n                \n                \n                    Providers\n                    \n                        \n                            ChartCollectionService\n                        \n                        \n                            ThresholdsService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BasicLegendTileComponent\n                        \n                        \n                            ChartCollectionIdDirective\n                        \n                        \n                            ChartComponent\n                        \n                        \n                            ChartDonutContentComponent\n                        \n                        \n                            ChartMarkerComponent\n                        \n                        \n                            ChartPopoverComponent\n                        \n                        \n                            ChartTooltipComponent\n                        \n                        \n                            ChartTooltipsComponent\n                        \n                        \n                            LegendComponent\n                        \n                        \n                            LegendSeriesComponent\n                        \n                        \n                            RichLegendTileComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { OverlayModule } from \"@angular/cdk/overlay\";\nimport { NgModule } from \"@angular/core\";\n// This is not technically used here, but it does pull in the type for $localize\nimport { LocalizeFn } from \"@angular/localize/init\";\nimport { NuiCommonModule, NuiIconModule, NuiPopoverModule } from \"@nova-ui/bits\";\nimport \"d3-selection-multi\";\n\nimport { ChartCollectionIdDirective } from \"./chart-collection/chart-collection-id.directive\";\nimport { ChartCollectionService } from \"./chart-collection/chart-collection.service\";\nimport { ChartDonutContentComponent } from \"./chart-donut-content/chart-donut-content.component\";\nimport { ChartMarkerComponent } from \"./chart-marker/chart-marker.component\";\nimport { ChartPopoverComponent } from \"./chart-popover/chart-popover.component\";\nimport { ChartTooltipComponent } from \"./chart-tooltips/chart-tooltip.component\";\nimport { ChartTooltipDirective } from \"./chart-tooltips/chart-tooltip.directive\";\nimport { ChartTooltipsComponent } from \"./chart-tooltips/chart-tooltips.component\";\nimport { ChartComponent } from \"./chart/chart.component\";\nimport { LegendSeriesComponent } from \"./legend/legend-series/legend-series.component\";\nimport { BasicLegendTileComponent } from \"./legend/legend-tile/basic-legend-tile/basic-legend-tile.component\";\nimport { RichLegendTileComponent } from \"./legend/legend-tile/rich-legend-tile/rich-legend-tile.component\";\nimport { LegendComponent } from \"./legend/legend.component\";\nimport { ThresholdsService } from \"./thresholds/thresholds-service\";\n\n@NgModule({\n    imports: [\n        NuiCommonModule,\n        NuiIconModule,\n        NuiPopoverModule,\n        OverlayModule,\n    ],\n    declarations: [\n        LegendComponent,\n        LegendSeriesComponent,\n        BasicLegendTileComponent,\n        RichLegendTileComponent,\n        ChartComponent,\n        ChartCollectionIdDirective,\n        ChartMarkerComponent,\n        ChartPopoverComponent,\n        ChartDonutContentComponent,\n        ChartTooltipsComponent,\n        ChartTooltipComponent,\n        ChartTooltipDirective,\n    ],\n    exports: [\n        LegendComponent,\n        LegendSeriesComponent,\n        RichLegendTileComponent,\n        BasicLegendTileComponent,\n        ChartComponent,\n        ChartCollectionIdDirective,\n        ChartMarkerComponent,\n        ChartPopoverComponent,\n        ChartDonutContentComponent,\n        ChartTooltipsComponent,\n        ChartTooltipComponent,\n        ChartTooltipDirective,\n    ],\n    providers: [\n        ChartCollectionService,\n        ThresholdsService,\n    ],\n})\nexport class NuiChartsModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PathMarker.html":{"url":"classes/PathMarker.html","title":"class - PathMarker","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PathMarker\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/palette/markers/path-marker.ts\n        \n\n            \n                Description\n            \n            \n                This class creates a ChartMarker based on provided data for svg path\n\n            \n\n\n            \n                Implements\n            \n            \n                            IChartMarker\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                element\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getSvg\n                            \n                            \n                                    Public\n                                setColor\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(d: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/common/palette/markers/path-marker.ts:9\n                            \n                        \n\n                \n                    \n                            Creates an instance of PathMarker.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        d\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                value that has to be assigned to 'd' attribute of 'path' element in svg\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            element\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLElement\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/palette/markers/path-marker.ts:8\n                            \n                        \n\n                \n                    \n                        Resulting  HTMLElement \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getSvg\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSvg()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/palette/markers/path-marker.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setColor\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setColor(color: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/palette/markers/path-marker.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    color\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IChartMarker } from \"../../types\";\n\n/**\n * This class creates a ChartMarker based on provided data for svg path\n */\nexport class PathMarker implements IChartMarker {\n    /** Resulting  HTMLElement */\n    public element: HTMLElement;\n    protected svg: string;\n\n    /**\n     * Creates an instance of PathMarker.\n     * @param {string} d value that has to be assigned to 'd' attribute of 'path' element in svg\n     * @memberof PathMarker\n     */\n    constructor(d: string) {\n        this.element = document.createElement(\"path\");\n\n        this.setAttributes({\n            \"class\": \"nui-chart-element-marker nui-chart--path__outline\",\n            \"vector-effect\": \"non-scaling-stroke\",\n            \"d\": d,\n        });\n    }\n\n    public setColor(color: string): void {\n        this.setAttributes({\"fill\": color});\n    }\n\n    private setAttributes(attrs: { [key: string]: string }) {\n        for (const attr of Object.keys(attrs)) {\n            this.element.setAttribute(attr, attrs[attr]);\n        }\n\n        this.updateSvg();\n    }\n\n    public getSvg(): string {\n        return this.svg;\n    }\n\n    protected updateSvg() {\n        this.svg = this.element.outerHTML;\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PieRenderer.html":{"url":"classes/PieRenderer.html","title":"class - PieRenderer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PieRenderer\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/radial/pie-renderer.ts\n        \n\n            \n                Description\n            \n            \n                Renderer that is able to draw pie chart\n\n            \n\n            \n                Extends\n            \n            \n                        RadialRenderer\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                config\n                            \n                            \n                                    Public\n                                config\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_CONFIG\n                            \n                            \n                                    Public\n                                getContainerStateStyles\n                            \n                            \n                                    Public\n                                interaction\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                draw\n                            \n                            \n                                    Public\n                                getDataPointPosition\n                            \n                            \n                                    Public\n                                getInnerRadius\n                            \n                            \n                                    Public\n                                getOuterRadius\n                            \n                            \n                                    Public\n                                    Abstract\n                                draw\n                            \n                            \n                                    Public\n                                filterDataByDomain\n                            \n                            \n                                    Public\n                                getDataPointIndex\n                            \n                            \n                                    Public\n                                    Abstract\n                                getDataPointPosition\n                            \n                            \n                                    Public\n                                getDomain\n                            \n                            \n                                    Public\n                                getDomainOfFilteredData\n                            \n                            \n                                    Public\n                                getRequiredLayers\n                            \n                            \n                                    Public\n                                highlightDataPoint\n                            \n                            \n                                    Public\n                                setDataPointState\n                            \n                            \n                                    Public\n                                setSeriesState\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRadialRendererConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         RadialRenderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         RadialRenderer:41\n\n                            \n                        \n\n                \n                    \n                        Renderer configuration object. Defaults to `DEFAULT_RADIAL_RENDERER_CONFIG` constant value.\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRendererConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:40\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_CONFIG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRendererConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        stateStyles: {\n            [RenderState.default]: {\n                opacity: 1,\n            },\n            [RenderState.hidden]: {\n                opacity: 0,\n            },\n            [RenderState.deemphasized]: {\n                opacity: 0.1,\n            },\n            [RenderState.emphasized]: {\n                opacity: 1,\n            },\n        },\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:23\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getContainerStateStyles\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:95\n\n                            \n                        \n\n                \n                    \n                        Get the style attributes for the specified state that we need to apply to a series container\n\n                    \n                \n\n                    \n                        \n                          \n                                  Parameters :\n                                  \n                                      \n                                          \n                                                Name\n                                                    Description\n                                          \n                                      \n                                      \n                                                \n                                                        state\n                                                        \n                                                                the state for which to retrieve container styles\n\n                                                        \n                                                \n                                      \n                                  \n                          \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interaction\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Record\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:45\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            draw\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    draw(renderSeries: IRenderSeries, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Inherited from         RadialRenderer\n\n                \n            \n            \n                \n                        Defined in         RadialRenderer:47\n\n                \n            \n\n\n            \n                \n                    See Renderer \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDataPointPosition\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointPosition(dataSeries: IDataSeries, index: number, scales: Scales)\n                \n            \n\n\n            \n                \n                    Inherited from         RadialRenderer\n\n                \n            \n            \n                \n                        Defined in         RadialRenderer:133\n\n                \n            \n\n\n            \n                \n                    See Renderer \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSeries\n                                    \n                                            IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IPosition | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getInnerRadius\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getInnerRadius(range: number[], index: number)\n                \n            \n\n\n            \n                \n                    Inherited from         RadialRenderer\n\n                \n            \n            \n                \n                        Defined in         RadialRenderer:149\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getOuterRadius\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOuterRadius(range: [number, number], index: number)\n                \n            \n\n\n            \n                \n                    Inherited from         RadialRenderer\n\n                \n            \n            \n                \n                        Defined in         RadialRenderer:156\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                            [number, number]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            draw\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    draw(renderSeries: IRenderSeries, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:53\n\n                \n            \n\n\n            \n                \n                    Draw the visual representation of the provided data series\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The series to render\n\n                                    \n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A subject to optionally invoke for emitting events regarding a data point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            filterDataByDomain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    filterDataByDomain(data: any[], dataSeries: IDataSeries, scaleName: string, domain: any[])\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:170\n\n                \n            \n\n\n            \n                \n                    Filters given dataset by domain of provided scale\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scaleName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    domain\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDataPointIndex\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointIndex(series: IDataSeries, values: literal type, scales: Scales)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:74\n\n                \n            \n\n\n            \n                \n                    Based on provided values, return the nearest data point that the given coordinates represent. This is used for mouse hover behavior\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    series\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        series from which to determine the index corresponding to the specified values\n\n                                    \n                                \n                                \n                                    values\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the values from which a data point index can be determined\n\n                                    \n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the scales to be used in the index calculation\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        negative value means that index is not found\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            getDataPointPosition\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointPosition(dataSeries: IDataSeries, index: number, scales: Scales)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:63\n\n                \n            \n\n\n            \n                \n                    Return position of a specified datapoint\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IPosition | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDomain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDomain(data: any[], dataSeries: IDataSeries, scaleName: string, scale: IScale)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:153\n\n                \n            \n\n\n            \n                \n                    Calculate the domain using the data of a series\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        source data, can be filtered\n\n                                    \n                                \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        related data series\n\n                                    \n                                \n                                \n                                    scaleName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the scale for which domain calculation is needed\n\n                                    \n                                \n                                \n                                    scale\n                                    \n                                                IScale\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        min and max values as an array\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDomainOfFilteredData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDomainOfFilteredData(dataSeries: IDataSeries, filterScales: Record>, scaleKey: string, scale: IScale)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:129\n\n                \n            \n\n\n            \n                \n                    Calculate domain for data filtered by given filterScales\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filterScales\n                                    \n                                                Record>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scaleKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scale\n                                    \n                                                IScale\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        array of datapoints from dataSeries filtered by domains of given filterScales\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getRequiredLayers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRequiredLayers()\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:190\n\n                \n            \n\n\n            \n                \n                    Get the definitions of lasagna layers required for visualizing data\n\n\n                    \n                    \n                    \n                        Returns :     ILasagnaLayer[]\n\n                    \n                    \n                        lasagna layer definitions\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            highlightDataPoint\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    highlightDataPoint(renderSeries: IRenderSeries, dataPointIndex: number, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:85\n\n                \n            \n\n\n            \n                \n                    Highlight the data point corresponding to the specified data point index\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The series on which to render the data point highlight\n\n                                    \n                                \n                                \n                                    dataPointIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        index of the highlighted point within the data series (pass -1 to remove the highlight marker)\n\n                                    \n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A subject to optionally invoke for emitting events regarding a data point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setDataPointState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setDataPointState(target: D3Selection, state: RenderState)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:117\n\n                \n            \n\n\n            \n                \n                    Set the RenderState of the target data point\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                                D3Selection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the target data point\n\n                                    \n                                \n                                \n                                    state\n                                    \n                                                RenderState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new state for the target data point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setSeriesState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setSeriesState(renderContainers: IRenderContainers, state: RenderState)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:108\n\n                \n            \n\n\n            \n                \n                    Set the RenderState of the target data series\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderContainers\n                                    \n                                                IRenderContainers\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the render containers of the series\n\n                                    \n                                \n                                \n                                    state\n                                    \n                                                RenderState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new state for the target series\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Arc, DefaultArcObject } from \"d3-shape\";\n\nimport { RadialRenderer } from \"./radial-renderer\";\n\n/**\n * Renderer that is able to draw pie chart\n */\nexport class PieRenderer extends RadialRenderer {\n    protected getArc(range: [number, number], arc: Arc, index: number) {\n        return arc.outerRadius(range[1] - range[0])\n            .innerRadius(0);\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProcessedColorProvider.html":{"url":"classes/ProcessedColorProvider.html","title":"class - ProcessedColorProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProcessedColorProvider\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/palette/processed-color-provider.ts\n        \n\n            \n                Description\n            \n            \n                This color provider processes values provided by the source provider using the given function.\nExamples would be darken, lighten, reduce opacity, etc.\n\n            \n\n\n            \n                Implements\n            \n            \n                            IValueProvider\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                get\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                reset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sourceProvider: IValueProvider, fn: (input: string) => void)\n                    \n                \n                        \n                            \n                                Defined in src/core/common/palette/processed-color-provider.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sourceProvider\n                                                  \n                                                        \n                                                                        IValueProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        fn\n                                                  \n                                                        \n                                                                        function\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/palette/processed-color-provider.ts:15\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reset()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/palette/processed-color-provider.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IValueProvider } from \"../types\";\n\n/**\n * This color provider processes values provided by the source provider using the given function.\n * Examples would be darken, lighten, reduce opacity, etc.\n */\nexport class ProcessedColorProvider implements IValueProvider {\n\n    private processedColors: { [key: string]: string };\n\n    constructor(private sourceProvider: IValueProvider, private fn: (input: string) => string) {\n        this.reset();\n    }\n\n    public get = (entityId: string): string => {\n        const clr = this.sourceProvider.get(entityId);\n\n        if (!clr) {\n            throw new Error(\"clr is not defined\");\n        }\n\n        let processedColor = this.processedColors[clr];\n        if (!processedColor) {\n            processedColor = this.fn(clr);\n            this.processedColors[clr] = processedColor;\n        }\n        return processedColor;\n    }\n\n    public reset(): void {\n        this.processedColors = {};\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RadialAccessors.html":{"url":"classes/RadialAccessors.html","title":"class - RadialAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RadialAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/radial/accessors/radial-accessors.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IRadialAccessors\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                series\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(colorProvider)\n                    \n                \n                        \n                            \n                                Defined in src/renderers/radial/accessors/radial-accessors.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        colorProvider\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRadialDataAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/radial/accessors/radial-accessors.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRadialSeriesAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/radial/accessors/radial-accessors.ts:24\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { defaultColorProvider } from \"../../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, SeriesAccessor } from \"../../../core/common/types\";\n\nexport interface IRadialDataAccessors {\n    value: DataAccessor;\n    color?: DataAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface IRadialSeriesAccessors {\n    color?: SeriesAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: SeriesAccessor | undefined;\n}\n\nexport interface IRadialAccessors extends IAccessors {\n    data: IRadialDataAccessors;\n    series: IRadialSeriesAccessors;\n}\n\nexport class RadialAccessors implements IRadialAccessors {\n    data: IRadialDataAccessors;\n    series: IRadialSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider()) {\n        this.data = {\n            value: (d: any) => Number.isFinite(d) ? d : d.value,\n        };\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n        };\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RadialPopoverPlugin.html":{"url":"classes/RadialPopoverPlugin.html","title":"class - RadialPopoverPlugin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RadialPopoverPlugin\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/radial-popover-plugin.ts\n        \n\n            \n                Description\n            \n            \n                Extends ChartPopoverPlugin to handle popover positioning for radial charts.\n\n            \n\n            \n                Extends\n            \n            \n                        ChartPopoverPlugin\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                closePopoverSubject\n                            \n                            \n                                    Public\n                                config\n                            \n                            \n                                    Public\n                                dataPoints\n                            \n                            \n                                    Public\n                                DEFAULT_CONFIG\n                            \n                            \n                                    Public\n                                openPopoverSubject\n                            \n                            \n                                    Public\n                                popoverTargetPosition\n                            \n                            \n                                    Public\n                                updatePositionSubject\n                            \n                            \n                                    Public\n                                chart\n                            \n                            \n                                    Public\n                                chart\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            closePopoverSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPopoverPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPopoverPlugin:34\n\n                            \n                        \n\n                \n                    \n                        Emits an event indicating the popover should close \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IPopoverPluginConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPopoverPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPopoverPlugin:51\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dataPoints\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IDataPointsPayload\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPopoverPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPopoverPlugin:28\n\n                            \n                        \n\n                \n                    \n                        Info about the data point(s) received in the most recent interaction event \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            DEFAULT_CONFIG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IPopoverPluginConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        eventStreamId: INTERACTION_DATA_POINTS_EVENT,\n        interactionType: InteractionType.MouseMove,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPopoverPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPopoverPlugin:43\n\n                            \n                        \n\n                \n                    \n                        The default plugin configuration \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            openPopoverSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPopoverPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPopoverPlugin:32\n\n                            \n                        \n\n                \n                    \n                        Emits an event indicating the popover should open \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            popoverTargetPosition\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IElementPosition\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: 0,\n        left: 0,\n        width: 0,\n        height: 0,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPopoverPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPopoverPlugin:36\n\n                            \n                        \n\n                \n                    \n                        The target position of the popover \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            updatePositionSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPopoverPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPopoverPlugin:30\n\n                            \n                        \n\n                \n                    \n                        Emits the popover's target position \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IChart\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPopoverPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPopoverPlugin:7\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IChart\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPlugin:7\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPopoverPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPopoverPlugin:68\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPopoverPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPopoverPlugin:56\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPopoverPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPopoverPlugin:15\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPopoverPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPopoverPlugin:9\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPopoverPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPopoverPlugin:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPopoverPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPopoverPlugin:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:15\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:9\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {ChartPopoverPlugin} from \"./chart-popover-plugin\";\n\n/**\n * Extends ChartPopoverPlugin to handle popover positioning for radial charts.\n */\nexport class RadialPopoverPlugin extends ChartPopoverPlugin {\n    protected getAbsolutePosition(valArr: any[]) {\n        const chartElement: any = this.chart.target?.node()?.parentNode; // the one above svg\n\n        if (!chartElement) {\n            throw new Error(\"Chart parent node is not defined\");\n        }\n\n        const dataPointsLeft = Math.min(...valArr.map(d => d.position.x));\n        const dataPointsTop = Math.min(...valArr.map(d => d.position.y));\n        const left = chartElement.offsetLeft + this.chart.getGrid().config().dimension.margin.left\n            + dataPointsLeft + this.chart.getGrid().config().dimension.width() / 2;\n        const top = chartElement.offsetTop + dataPointsTop + this.chart.getGrid().config().dimension.height() / 2;\n        return {\n            top: top,\n            left: left,\n            height: 0,\n            width: 0,\n        };\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RadialTooltipsPlugin.html":{"url":"classes/RadialTooltipsPlugin.html","title":"class - RadialTooltipsPlugin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RadialTooltipsPlugin\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/tooltips/radial-tooltips-plugin.ts\n        \n\n            \n                Description\n            \n            \n                This radial tooltips plugin handles special tooltip positioning requirements for donut / pie charts.\n\n            \n\n            \n                Extends\n            \n            \n                        ChartTooltipsPlugin\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                dataPointPositions\n                            \n                            \n                                    Public\n                                dataPoints\n                            \n                            \n                                    Public\n                                hideSubject\n                            \n                            \n                                    Public\n                                orientation\n                            \n                            \n                                    Public\n                                showSubject\n                            \n                            \n                                    Public\n                                chart\n                            \n                            \n                                    Public\n                                chart\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                processHighlightedDataPoints\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dataPointPositions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartTooltipsPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartTooltipsPlugin:65\n\n                            \n                        \n\n                \n                    \n                        Calculated positions for the data point tooltips \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dataPoints\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IDataPointsPayload\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartTooltipsPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartTooltipsPlugin:63\n\n                            \n                        \n\n                \n                    \n                        Highlighted data points received from the chart \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            hideSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartTooltipsPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartTooltipsPlugin:75\n\n                            \n                        \n\n                \n                    \n                        This publishes an event to hide tooltips\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            orientation\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     \"right\" | \"top\"\n\n                        \n                    \n                    \n                        \n                            Default value : \"right\"\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartTooltipsPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartTooltipsPlugin:88\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            showSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartTooltipsPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartTooltipsPlugin:70\n\n                            \n                        \n\n                \n                    \n                        This publishes an event to show tooltips\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IChart\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartTooltipsPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartTooltipsPlugin:7\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IChart\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPlugin:7\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartTooltipsPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartTooltipsPlugin:126\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartTooltipsPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartTooltipsPlugin:98\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            processHighlightedDataPoints\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processHighlightedDataPoints(dataPoints: IDataPointsPayload)\n                \n            \n\n\n            \n                \n                    Inherited from         ChartTooltipsPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartTooltipsPlugin:131\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataPoints\n                                    \n                                                IDataPointsPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartTooltipsPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartTooltipsPlugin:15\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartTooltipsPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartTooltipsPlugin:9\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartTooltipsPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartTooltipsPlugin:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartTooltipsPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartTooltipsPlugin:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:15\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:9\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ConnectedPosition } from \"@angular/cdk/overlay\";\nimport { DefaultArcObject } from \"d3-shape\";\n\nimport { RadialRenderer } from \"../../../renderers/radial/radial-renderer\";\nimport { IAccessors, IChartSeries, IDataPoint, IPosition } from \"../../common/types\";\n\nimport { ChartTooltipsPlugin, ITooltipPosition } from \"./chart-tooltips-plugin\";\n\n/**\n * The circle is divided into 8 parts (E, SE, S, SW, ...), these values represent the connection points\n * on the source element for the tooltip position starting with EAST and going clockwise)\n */\nconst CONNECTION_POINTS: { x: \"start\" | \"center\" | \"end\", y: \"top\" | \"center\" | \"bottom\" }[] =\n    [\n        {x: \"end\", y: \"center\"},\n        {x: \"end\", y: \"bottom\"},\n        {x: \"center\", y: \"bottom\"},\n        {x: \"start\", y: \"bottom\"},\n        {x: \"start\", y: \"center\"},\n        {x: \"start\", y: \"top\"},\n        {x: \"center\", y: \"top\"},\n        {x: \"end\", y: \"top\"},\n    ];\n\n/** This conversion map is used to calculate the opposite connection points for the tooltip element */\nconst OPPOSITE: { [key: string]: string } = {\n    \"start\": \"end\",\n    \"end\": \"start\",\n    \"top\": \"bottom\",\n    \"bottom\": \"top\",\n};\n\n/**\n * This radial tooltips plugin handles special tooltip positioning requirements for donut / pie charts.\n */\nexport class RadialTooltipsPlugin extends ChartTooltipsPlugin {\n\n    protected getTooltipPosition(dataPoint: IDataPoint, chartSeries: IChartSeries): ITooltipPosition {\n        const pieArcData: DefaultArcObject = dataPoint.data;\n        const renderer = chartSeries.renderer;\n        const rScale = chartSeries.scales.r;\n        // this calculation was taken from the radial renderer implementation\n        const outerRadius = renderer.getOuterRadius(rScale.range(), dataPoint.index);\n\n        const r = outerRadius + this.tooltipPositionOffset;\n        // pie charts start on the top, so we need to subtract Math.PI / 2\n        const a = (pieArcData.startAngle + pieArcData.endAngle) / 2 - Math.PI / 2;\n\n        return {\n            x: Math.cos(a) * r,\n            y: Math.sin(a) * r,\n            width: 0,\n            height: 0,\n            overlayPositions: [this.getOverlayPosition(a)],\n        };\n    }\n\n    protected getAbsolutePosition(relativePosition: ITooltipPosition, chartPosition: IPosition): ITooltipPosition {\n        const absolutePosition = super.getAbsolutePosition(relativePosition, chartPosition);\n\n        // radial grid is shifted so that the origin is located in the middle of the rendering area,\n        // so we need to add it back when we're emitting absolute positions for the tooltips\n        absolutePosition.x += this.chart.getGrid().config().dimension.width() / 2;\n        absolutePosition.y += this.chart.getGrid().config().dimension.height() / 2;\n\n        return absolutePosition;\n    }\n\n    /**\n     * Calculate the position for the tooltip overlay based on the angle of the pie slice\n     *\n     * @param {number} angle in radians\n     */\n    private getOverlayPosition(angle: number): ConnectedPosition {\n        const sectionIndex = this.getSectionIndex(angle, 8);\n\n        return {\n            originX: CONNECTION_POINTS[sectionIndex].x,\n            originY: CONNECTION_POINTS[sectionIndex].y,\n            overlayX: this.opposite(CONNECTION_POINTS[sectionIndex].x),\n            overlayY: this.opposite(CONNECTION_POINTS[sectionIndex].y),\n        };\n    }\n\n    /**\n     * Calculates what section of the circle does the given angle belong to\n     *\n     * @param {number} angle in radians\n     * @param {number} sections The number of sections the circle is divided into\n     */\n    private getSectionIndex(angle: number, sections: number) {\n        let sectionIndex = Math.round(angle / (Math.PI * 2 / sections)) % sections;\n        while (sectionIndex \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RectangleAccessors.html":{"url":"classes/RectangleAccessors.html","title":"class - RectangleAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RectangleAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/accessors/rectangle-accessors.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IRectangleAccessors\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                series\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/renderers/accessors/rectangle-accessors.ts:35\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleDataAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/accessors/rectangle-accessors.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleSeriesAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/accessors/rectangle-accessors.ts:35\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { DataAccessor, IAccessors, IDataAccessors, ISeriesAccessors, SeriesAccessor } from \"../../core/common/types\";\n\nexport interface IStartEndRangeAccessors extends IDataAccessors {\n    start: DataAccessor;\n    end: DataAccessor;\n}\n\nexport interface IValueThicknessAccessors extends IDataAccessors {\n    value: DataAccessor;\n    thickness: DataAccessor;\n}\n\nexport interface IRectangleDataAccessors extends IDataAccessors {\n    startX?: DataAccessor;\n    endX?: DataAccessor;\n    thicknessX?: DataAccessor;\n\n    startY?: DataAccessor;\n    endY?: DataAccessor;\n    thicknessY?: DataAccessor;\n}\n\nexport interface IRectangleSeriesAccessors extends ISeriesAccessors {\n    color?: SeriesAccessor;\n    marker?: SeriesAccessor;\n}\n\nexport interface IRectangleAccessors extends IAccessors {\n    data: IRectangleDataAccessors;\n    series: IRectangleSeriesAccessors;\n}\n\nexport class RectangleAccessors implements IRectangleAccessors {\n    data: IRectangleDataAccessors;\n    series: IRectangleSeriesAccessors;\n\n    constructor() {\n\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Renderer.html":{"url":"classes/Renderer.html","title":"class - Renderer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Renderer\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/renderer.ts\n        \n\n            \n                Description\n            \n            \n                The abstract base class for chart renderers with some limited default functionality\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                config\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_CONFIG\n                            \n                            \n                                    Public\n                                getContainerStateStyles\n                            \n                            \n                                    Public\n                                interaction\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Abstract\n                                draw\n                            \n                            \n                                    Public\n                                filterDataByDomain\n                            \n                            \n                                    Public\n                                getDataPointIndex\n                            \n                            \n                                    Public\n                                    Abstract\n                                getDataPointPosition\n                            \n                            \n                                    Public\n                                getDomain\n                            \n                            \n                                    Public\n                                getDomainOfFilteredData\n                            \n                            \n                                    Public\n                                getRequiredLayers\n                            \n                            \n                                    Public\n                                highlightDataPoint\n                            \n                            \n                                    Public\n                                setDataPointState\n                            \n                            \n                                    Public\n                                setSeriesState\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: IRendererConfig)\n                    \n                \n                        \n                            \n                                Defined in src/core/common/renderer.ts:38\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        IRendererConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRendererConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/renderer.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_CONFIG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRendererConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        stateStyles: {\n            [RenderState.default]: {\n                opacity: 1,\n            },\n            [RenderState.hidden]: {\n                opacity: 0,\n            },\n            [RenderState.deemphasized]: {\n                opacity: 0.1,\n            },\n            [RenderState.emphasized]: {\n                opacity: 1,\n            },\n        },\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/renderer.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getContainerStateStyles\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/renderer.ts:95\n                            \n                        \n\n                \n                    \n                        Get the style attributes for the specified state that we need to apply to a series container\n\n                    \n                \n\n                    \n                        \n                          \n                                  Parameters :\n                                  \n                                      \n                                          \n                                                Name\n                                                    Description\n                                          \n                                      \n                                      \n                                                \n                                                        state\n                                                        \n                                                                the state for which to retrieve container styles\n\n                                                        \n                                                \n                                      \n                                  \n                          \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interaction\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Record\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/renderer.ts:45\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            draw\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    draw(renderSeries: IRenderSeries, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/renderer.ts:53\n                \n            \n\n\n            \n                \n                    Draw the visual representation of the provided data series\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The series to render\n\n                                    \n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A subject to optionally invoke for emitting events regarding a data point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            filterDataByDomain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    filterDataByDomain(data: any[], dataSeries: IDataSeries, scaleName: string, domain: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/renderer.ts:170\n                \n            \n\n\n            \n                \n                    Filters given dataset by domain of provided scale\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scaleName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    domain\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDataPointIndex\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointIndex(series: IDataSeries, values: literal type, scales: Scales)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/renderer.ts:74\n                \n            \n\n\n            \n                \n                    Based on provided values, return the nearest data point that the given coordinates represent. This is used for mouse hover behavior\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    series\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        series from which to determine the index corresponding to the specified values\n\n                                    \n                                \n                                \n                                    values\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the values from which a data point index can be determined\n\n                                    \n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the scales to be used in the index calculation\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        negative value means that index is not found\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            getDataPointPosition\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointPosition(dataSeries: IDataSeries, index: number, scales: Scales)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/renderer.ts:63\n                \n            \n\n\n            \n                \n                    Return position of a specified datapoint\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IPosition | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDomain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDomain(data: any[], dataSeries: IDataSeries, scaleName: string, scale: IScale)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/renderer.ts:153\n                \n            \n\n\n            \n                \n                    Calculate the domain using the data of a series\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        source data, can be filtered\n\n                                    \n                                \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        related data series\n\n                                    \n                                \n                                \n                                    scaleName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the scale for which domain calculation is needed\n\n                                    \n                                \n                                \n                                    scale\n                                    \n                                                IScale\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        min and max values as an array\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDomainOfFilteredData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDomainOfFilteredData(dataSeries: IDataSeries, filterScales: Record>, scaleKey: string, scale: IScale)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/renderer.ts:129\n                \n            \n\n\n            \n                \n                    Calculate domain for data filtered by given filterScales\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filterScales\n                                    \n                                                Record>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scaleKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scale\n                                    \n                                                IScale\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        array of datapoints from dataSeries filtered by domains of given filterScales\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getRequiredLayers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRequiredLayers()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/renderer.ts:190\n                \n            \n\n\n            \n                \n                    Get the definitions of lasagna layers required for visualizing data\n\n\n                    \n                    \n                    \n                        Returns :     ILasagnaLayer[]\n\n                    \n                    \n                        lasagna layer definitions\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            highlightDataPoint\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    highlightDataPoint(renderSeries: IRenderSeries, dataPointIndex: number, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/renderer.ts:85\n                \n            \n\n\n            \n                \n                    Highlight the data point corresponding to the specified data point index\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The series on which to render the data point highlight\n\n                                    \n                                \n                                \n                                    dataPointIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        index of the highlighted point within the data series (pass -1 to remove the highlight marker)\n\n                                    \n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A subject to optionally invoke for emitting events regarding a data point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setDataPointState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setDataPointState(target: D3Selection, state: RenderState)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/renderer.ts:117\n                \n            \n\n\n            \n                \n                    Set the RenderState of the target data point\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                                D3Selection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the target data point\n\n                                    \n                                \n                                \n                                    state\n                                    \n                                                RenderState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new state for the target data point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setSeriesState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setSeriesState(renderContainers: IRenderContainers, state: RenderState)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/renderer.ts:108\n                \n            \n\n\n            \n                \n                    Set the RenderState of the target data series\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderContainers\n                                    \n                                                IRenderContainers\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the render containers of the series\n\n                                    \n                                \n                                \n                                    state\n                                    \n                                                RenderState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new state for the target series\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { extent, Numeric } from \"d3-array\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport defaultsDeep from \"lodash/defaultsDeep\";\nimport each from \"lodash/each\";\nimport get from \"lodash/get\";\nimport isNil from \"lodash/isNil\";\nimport { Subject } from \"rxjs\";\n\nimport { DATA_POINT_NOT_FOUND, STANDARD_RENDER_LAYERS } from \"../../constants\";\nimport { IRenderSeries, RenderLayerName, RenderState } from \"../../renderers/types\";\n\nimport { EMPTY_CONTINUOUS_DOMAIN, IScale, Scales } from \"./scales/types\";\nimport { D3Selection, IAccessors, IDataPoint, IDataSeries, ILasagnaLayer, IPosition, IRenderContainers, IRendererConfig, IRendererEventPayload } from \"./types\";\n\n/**\n * The abstract base class for chart renderers with some limited default functionality\n */\n// For why the \"dynamic\" decorator is used see https://github.com/ng-packagr/ng-packagr/issues/641\n// @dynamic\nexport abstract class Renderer {\n\n    public static readonly DEFAULT_CONFIG: IRendererConfig = {\n        stateStyles: {\n            [RenderState.default]: {\n                opacity: 1,\n            },\n            [RenderState.hidden]: {\n                opacity: 0,\n            },\n            [RenderState.deemphasized]: {\n                opacity: 0.1,\n            },\n            [RenderState.emphasized]: {\n                opacity: 1,\n            },\n        },\n    };\n\n    constructor(public config: IRendererConfig = {}) {\n        // setting default values to the properties that were not set by user\n        this.config = defaultsDeep(this.config, Renderer.DEFAULT_CONFIG);\n    }\n\n    public interaction: Record = {};\n\n    /**\n     * Draw the visual representation of the provided data series\n     *\n     * @param {IRenderSeries} renderSeries The series to render\n     * @param {Subject} rendererSubject A subject to optionally invoke for emitting events regarding a data point\n     */\n    public abstract draw(renderSeries: IRenderSeries, rendererSubject: Subject): void;\n\n    /**\n     * Return position of a specified datapoint\n     *\n     * @param {IDataSeries} dataSeries\n     * @param {number} index\n     * @param {Scales} scales\n     * @returns {IPosition}\n     */\n    public abstract getDataPointPosition(dataSeries: IDataSeries, index: number, scales: Scales): IPosition | undefined;\n\n    /**\n     * Based on provided values, return the nearest data point that the given coordinates represent. This is used for mouse hover behavior\n     *\n     * @param {IDataSeries} series series from which to determine the index corresponding to the specified values\n     * @param {{ [axis: string]: any }} values the values from which a data point index can be determined\n     * @param {Scales} scales the scales to be used in the index calculation\n     *\n     * @returns {number} negative value means that index is not found\n     */\n    public getDataPointIndex(series: IDataSeries, values: { [axis: string]: any }, scales: Scales): number {\n        return DATA_POINT_NOT_FOUND;\n    }\n\n    /**\n     * Highlight the data point corresponding to the specified data point index\n     *\n     * @param {IRenderSeries} renderSeries The series on which to render the data point highlight\n     * @param {number} dataPointIndex index of the highlighted point within the data series (pass -1 to remove the highlight marker)\n     * @param {Subject} rendererSubject A subject to optionally invoke for emitting events regarding a data point\n     */\n    public highlightDataPoint(renderSeries: IRenderSeries, dataPointIndex: number, rendererSubject: Subject): void {\n    }\n\n    /**\n     * Get the style attributes for the specified state that we need to apply to a series container\n     *\n     * @param {RenderState} state the state for which to retrieve container styles\n     *\n     * @returns {ValueMap} the container styles for the specified state\n     */\n    public getContainerStateStyles = (state: RenderState): ValueMap => {\n        if (!this.config.stateStyles) {\n            throw new Error(\"stateStyles property is not defined\");\n        }\n        return this.config.stateStyles[state || RenderState.default];\n    }\n\n    /**\n     * Set the RenderState of the target data series\n     *\n     * @param {IRenderContainers} renderContainers the render containers of the series\n     * @param {RenderState} state The new state for the target series\n     */\n    public setSeriesState(renderContainers: IRenderContainers, state: RenderState): void {\n    }\n\n    /**\n     * Set the RenderState of the target data point\n     *\n     * @param {D3Selection} target the target data point\n     * @param {RenderState} state The new state for the target data point\n     */\n    public setDataPointState(target: D3Selection, state: RenderState): void {\n    }\n\n    /**\n     * Calculate domain for data filtered by given filterScales\n     *\n     * @param dataSeries\n     * @param filterScales\n     * @param scaleKey\n     * @param scale\n     * @returns array of datapoints from dataSeries filtered by domains of given filterScales\n     */\n    public getDomainOfFilteredData(dataSeries: IDataSeries, filterScales: Record>, scaleKey: string, scale: IScale): any[] {\n        let filteredData = dataSeries.data;\n        for (const fixedScaleKey of Object.keys(filterScales)) {\n            const filterScale = filterScales[fixedScaleKey];\n            if (!filterScale.isDomainFixed || !filterScale.isContinuous()) {\n                continue;\n            }\n\n            filteredData = this.filterDataByDomain(filteredData, dataSeries, fixedScaleKey, filterScale.domain());\n        }\n\n        return this.getDomain(filteredData, dataSeries, scaleKey, scale);\n    }\n\n    /**\n     * Calculate the domain using the data of a series\n     *\n     * @param {any[]} data source data, can be filtered\n     * @param dataSeries related data series\n     * @param {string} scaleName name of the scale for which domain calculation is needed\n     * @param scale\n     *\n     * @returns {[any, any]} min and max values as an array\n     */\n    public getDomain(data: any[], dataSeries: IDataSeries, scaleName: string, scale: IScale): any[] {\n        if (!data || data.length === 0) {\n            return EMPTY_CONTINUOUS_DOMAIN;\n        }\n\n        return extent(data,\n            (datum, index, arr) => dataSeries.accessors.data?.[scaleName]?.(datum, index, Array.from(arr), dataSeries));\n    }\n\n    /**\n     * Filters given dataset by domain of provided scale\n     *\n     * @param data\n     * @param dataSeries\n     * @param scaleName\n     * @param domain\n     */\n    public filterDataByDomain(data: any[], dataSeries: IDataSeries, scaleName: string, domain: any[]): any[] {\n        const accessor = dataSeries.accessors.data?.[scaleName];\n\n        // if (isNil(accessor)) {\n        //     throw new Error(\"accessor is not defined\");\n        // }\n\n\n        return data.filter((d, i) => {\n            // @ts-ignore\n            const value = accessor(d, i, data, dataSeries);\n            return value >= domain[0] && value ,\n                               dataPointSubject: Subject, dataPoint: Partial) {\n        const eventList: string[] = get(this.interaction, path, {})[nativeEvent];\n        if (!eventList) {\n            return;\n        }\n\n        each(eventList, (targetEvent: string) => {\n            target.on(nativeEvent, () => {\n                const bbox = target.node().getBoundingClientRect();\n                dataPointSubject.next({\n                    eventName: targetEvent,\n                    data: {\n                        ...dataPoint,\n                        position: bbox,\n                    },\n                });\n            });\n        });\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/RichLegendTileComponent.html":{"url":"components/RichLegendTileComponent.html","title":"component - RichLegendTileComponent","body":"\n                   \n\n\n\n\n\n  Components\n  RichLegendTileComponent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n    File\n\n\n    src/legend/legend-tile/rich-legend-tile/rich-legend-tile.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    AfterContentInit\n                    AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n            \n                encapsulation\n                ViewEncapsulation.Emulated\n            \n\n\n\n\n\n\n\n\n\n            \n                selector\n                nui-rich-legend-tile\n            \n\n            \n                styleUrls\n                ./rich-legend-tile.component.less\n            \n\n\n\n            \n                templateUrl\n                ./rich-legend-tile.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                seriesHasAdditionalContent\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                hasInputUnitLabel\n                            \n                            \n                                    Public\n                                hasInputValue\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                backgroundColor\n                            \n                            \n                                color\n                            \n                            \n                                unitLabel\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(legendSeries: LegendSeriesComponent, legend: LegendComponent, changeDetector: ChangeDetectorRef)\n                    \n                \n                        \n                            \n                                Defined in src/legend/legend-tile/rich-legend-tile/rich-legend-tile.component.ts:44\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        legendSeries\n                                                  \n                                                        \n                                                                        LegendSeriesComponent\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        legend\n                                                  \n                                                        \n                                                                        LegendComponent\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        changeDetector\n                                                  \n                                                        \n                                                                        ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        backgroundColor\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-tile/rich-legend-tile/rich-legend-tile.component.ts:37\n                            \n                        \n                \n                    \n                        The series color\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        color\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-tile/rich-legend-tile/rich-legend-tile.component.ts:42\n                            \n                        \n                \n                    \n                        Color for the text\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        unitLabel\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-tile/rich-legend-tile/rich-legend-tile.component.ts:27\n                            \n                        \n                \n                    \n                        The series unit label\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        value\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-tile/rich-legend-tile/rich-legend-tile.component.ts:32\n                            \n                        \n                \n                    \n                        The current value of the series\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            hasInputUnitLabel\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hasInputUnitLabel()\n                \n            \n\n\n            \n                \n                    Defined in src/legend/legend-tile/rich-legend-tile/rich-legend-tile.component.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            hasInputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hasInputValue()\n                \n            \n\n\n            \n                \n                    Defined in src/legend/legend-tile/rich-legend-tile/rich-legend-tile.component.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            seriesHasAdditionalContent\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/legend/legend-tile/rich-legend-tile/rich-legend-tile.component.ts:44\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import {\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    Host,\n    Input,\n    Optional,\n    ViewEncapsulation\n} from \"@angular/core\";\nimport _isNil from \"lodash/isNil\";\n\nimport { LegendSeriesComponent } from \"../../legend-series/legend-series.component\";\nimport { LegendComponent } from \"../../legend.component\";\n\n@Component({\n    selector: \"nui-rich-legend-tile\",\n    templateUrl: \"./rich-legend-tile.component.html\",\n    styleUrls: [\"./rich-legend-tile.component.less\"],\n    encapsulation: ViewEncapsulation.Emulated,\n})\nexport class RichLegendTileComponent implements AfterContentInit, AfterViewInit {\n    /**\n     * The series unit label\n     */\n    @Input() public unitLabel: string;\n\n    /**\n     * The current value of the series\n     */\n    @Input() public value: string;\n\n    /**\n     * The series color\n     */\n    @Input() public backgroundColor: string;\n\n    /**\n     * Color for the text\n     */\n    @Input() public color: string;\n\n    public seriesHasAdditionalContent: boolean;\n\n    constructor(@Host() private legendSeries: LegendSeriesComponent,\n                @Optional() @Host() private legend: LegendComponent,\n                private changeDetector: ChangeDetectorRef) { }\n\n    public ngAfterContentInit() {\n        if (this.legend) {\n            this.unitLabel = this.unitLabel || this.legend.seriesUnitLabel;\n            this.backgroundColor = this.backgroundColor || this.legend.seriesColor || \"white\";\n        }\n    }\n\n    public ngAfterViewInit() {\n        if (this.legendSeries) {\n            this.seriesHasAdditionalContent = this.legendSeries.hasInputDescription() || this.legendSeries.hasProjectedDescription();\n            this.changeDetector.detectChanges();\n        }\n    }\n\n    public hasInputValue() {\n        return !_isNil(this.value);\n    }\n\n    public hasInputUnitLabel() {\n        return !_isNil(this.unitLabel);\n    }\n}\n\n    \n\n\n\n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ' 0\"     [class.nui-rich-legend-tile--series-has-additional-content]=\"seriesHasAdditionalContent\">                        {{ value }}                            {{ unitLabel }}                                                            '\n    var COMPONENTS = [{'name': 'BasicLegendTileComponent', 'selector': 'nui-basic-legend-tile'},{'name': 'ChartComponent', 'selector': 'nui-chart'},{'name': 'ChartDonutContentComponent', 'selector': 'nui-chart-donut-content'},{'name': 'ChartMarkerComponent', 'selector': 'nui-chart-marker'},{'name': 'ChartPopoverComponent', 'selector': 'nui-chart-popover'},{'name': 'ChartTooltipComponent', 'selector': 'nui-chart-tooltip'},{'name': 'ChartTooltipsComponent', 'selector': 'nui-chart-tooltips'},{'name': 'LegendComponent', 'selector': 'nui-legend'},{'name': 'LegendSeriesComponent', 'selector': 'nui-legend-series'},{'name': 'RichLegendTileComponent', 'selector': 'nui-rich-legend-tile'}];\n    var DIRECTIVES = [{'name': 'ChartCollectionIdDirective', 'selector': '[nuiChartCollectionId]'}];\n    var ACTUAL_COMPONENT = {'name': 'RichLegendTileComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Scale.html":{"url":"classes/Scale.html","title":"class - Scale","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Scale\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/scales/scale.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IScale\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                domainCalculator\n                            \n                            \n                                    Public\n                                formatters\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                isDomainFixed\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Abstract\n                                convert\n                            \n                            \n                                    Public\n                                domain\n                            \n                            \n                                    Public\n                                domain\n                            \n                            \n                                    Public\n                                domain\n                            \n                            \n                                    Public\n                                fixDomain\n                            \n                            \n                                    Public\n                                    Abstract\n                                invert\n                            \n                            \n                                    Public\n                                    Abstract\n                                isContinuous\n                            \n                            \n                                    Public\n                                isDomainValid\n                            \n                            \n                                    Public\n                                range\n                            \n                            \n                                    Public\n                                range\n                            \n                            \n                                    Public\n                                range\n                            \n                            \n                                    Public\n                                reverse\n                            \n                            \n                                    Public\n                                reversed\n                            \n                            \n                                    Public\n                                reversed\n                            \n                            \n                                    Public\n                                reversed\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    d3Scale\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            domainCalculator\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         DomainCalculator\n\n                        \n                    \n                    \n                        \n                            Default value : getAutomaticDomain\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/scales/scale.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            formatters\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IFormatters\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/scales/scale.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/scales/scale.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            isDomainFixed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/scales/scale.ts:13\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            convert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    convert(value: T)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    domain()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:55\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                    \n                        Returns :     T[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    domain(domain: T[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    domain(domain?: T[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            fixDomain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fixDomain(domain: T[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:67\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            invert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    invert(coordinate: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    coordinate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            isContinuous\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isContinuous()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isDomainValid\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isDomainValid()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:74\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            range\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    range()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:43\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            range\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    range(range: [number, number])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                            [number, number]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            range\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    range(range?: [number, number])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                            [number, number]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reverse\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reverse()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:78\n                \n            \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reversed()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:83\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reversed(reversed: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reversed\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reversed(reversed?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reversed\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | \n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        d3Scale\n                    \n                \n\n                \n                    \n                        getd3Scale()\n                    \n                \n                            \n                                \n                                    Defined in src/core/common/scales/scale.ts:38\n                                \n                            \n                    \n                        \n                                See IScale \n\n\n                                \n                                    Returns :         AxisScale\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { AxisScale } from \"d3-axis\";\n\nimport { UtilityService } from \"../utility.service\";\n\nimport { getAutomaticDomain } from \"./domain-calculation/automatic-domain\";\nimport { DomainCalculator, IFormatters, IScale } from \"./types\";\n\nexport abstract class Scale implements IScale {\n\n    public readonly id: string;\n    public domainCalculator: DomainCalculator = getAutomaticDomain;\n    public formatters: IFormatters = {};\n    public isDomainFixed: boolean;\n    private isReversed = false;\n\n    protected readonly _d3Scale: any;\n\n    protected constructor(id?: string) {\n        this.id = id || UtilityService.uuid();\n\n        this._d3Scale = this.createD3Scale();\n    }\n\n    /**\n     * Creates a d3 scale based on the scale's type\n     *\n     * @returns {any} A new d3 scale appropriate to the scale type\n     */\n    protected abstract createD3Scale(): any;\n\n    public abstract convert(value: T): number;\n\n    public abstract invert(coordinate: number): T | undefined;\n\n    public abstract isContinuous(): boolean;\n\n    /** See {@link IScale#d3Scale} */\n    public get d3Scale(): AxisScale {\n        return this._d3Scale;\n    }\n\n    /** See {@link IScale#range} */\n    public range(): [number, number];\n    public range(range: [number, number]): this;\n    public range(range?: [number, number]): any {\n        if (range) {\n            this._d3Scale.range(this.isReversed ? range.reverse() : range);\n            return this;\n        } else {\n            return this._d3Scale.range();\n        }\n    }\n\n    /** See {@link IScale#domain} */\n    public domain(): T[];\n    public domain(domain: T[]): this;\n    public domain(domain?: T[]): any {\n        if (domain) {\n            this._d3Scale.domain(domain);\n            return this;\n        } else {\n            return this._d3Scale.domain();\n        }\n    }\n\n    /** See {@link IScale#fixDomain} */\n    public fixDomain(domain: T[]): this {\n        this.domain(domain);\n        this.isDomainFixed = true;\n        return this;\n    }\n\n    /** See {@link IScale#reverse} */\n    public isDomainValid(): boolean {\n        return -1 === this.domain().findIndex((value) => value === undefined);\n    }\n\n    public reverse(): this {\n        return this.reversed(!this.isReversed);\n    }\n\n    /** See {@link IScale#reversed} */\n    public reversed(): boolean;\n    public reversed(reversed: boolean): this;\n    public reversed(reversed?: boolean): boolean | this {\n        if (typeof reversed === \"undefined\") {\n            return this.isReversed;\n        } else {\n            this.isReversed = reversed;\n            return this;\n        }\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ScalesIndex.html":{"url":"interfaces/ScalesIndex.html","title":"interface - ScalesIndex","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ScalesIndex\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/scales/types.ts\n        \n\n            \n                Description\n            \n            \n                Dictionary of scale collections in index and array form \n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    literal type\n\n                    \n                \n                        \n                            \n                                Defined in src/core/common/scales/types.ts:25\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import { AxisScale } from \"d3-axis\";\n\nimport { IAccessors, IChartSeries } from \"../types\";\n\n/** Domain for series with empty or null data */\nexport const EMPTY_CONTINUOUS_DOMAIN = [0, 0];\n/** A reasonable non-data-driven domain for charts  */\nexport const NORMALIZED_DOMAIN = [0, 1];\n\n/** Signature for domain calculator */\nexport type DomainCalculator = (chartSeriesSet: IChartSeries[], scaleId: string, scale: IScale) => any[];\n\n/** Interface for scale formatters */\nexport interface IFormatters {\n    /** Formatter for tick labels */\n    tick?: Formatter;\n    /** Additional formatters */\n    [p: string]: Formatter | undefined;\n}\n\n/** Signature for label formatters */\nexport type Formatter = (value: T) => string;\n\n/** Dictionary of scale collections in index and array form */\nexport interface ScalesIndex {\n    [key: string]: {\n        /** Scale collection as an index */\n        index: { [scaleId: string]: IScale };\n        /** Scale collection as an array */\n        list: IScale[];\n    };\n}\n\n/** Dictionary of scales */\nexport type Scales = Record>;\n\nexport interface IXYScales extends Scales {\n    x: IScale;\n    y: IScale;\n}\n\nexport interface IRadialScales extends Scales {\n    r: IScale;\n}\n\n/** Interface for a scale */\nexport interface IScale {\n    /** The scale identifier */\n    readonly id: string;\n    readonly d3Scale: AxisScale; // TODO: maybe AxisScale is to narrow?\n\n    /** If this flag is enabled, the domain of this scale is not recalculated */\n    isDomainFixed?: boolean;\n    /** Method used to calculate the scale's domain */\n    domainCalculator?: DomainCalculator;\n    /** The scales formatters */\n    formatters: IFormatters;\n    /** If this flag is enabled, the domain has been recalculated with ticks in mind */\n    __domainCalculatedWithTicks?: boolean;\n\n    /**\n     * Determines if the scale's domain is continuous\n     *\n     * @returns {boolean} true if the scale's domain is continuous (numeric), false otherwise\n     */\n    isContinuous(): boolean;\n\n    /**\n     * Determines if the scale's domain is valid\n     *\n     * @returns {boolean} true if the scale's domain is valid, false otherwise\n     */\n    isDomainValid(): boolean;\n\n    /**\n     * Converts a value to its corresponding coordinate\n     *\n     * @param {T} value The value to be converted\n     * @returns {number} The coordinate corresponding to the specified value\n     */\n    convert(value: T): number;\n\n    /**\n     * Converts a coordinate to its corresponding value\n     *\n     * @param {number} coordinate The coordinate to be converted\n     * @returns {T} The value corresponding to the specified coordinate\n     */\n    invert(coordinate: number): T | undefined;\n\n    /**\n     * Gets the scale's range\n     *\n     * @returns {[number, number]} The scale's range\n     */\n    range(): [number, number];\n\n    /**\n     * Sets the scale's range\n     *\n     * @param {[number, number]} range The scale's new range\n     */\n    range(range: [number, number]): this;\n\n    /**\n     * Gets the scale's domain\n     *\n     * @returns {T[]} The scale's domain\n     */\n    domain(): T[];\n\n    /**\n     * Sets the scale's domain\n     *\n     * @param {T[]} domain The scale's new domain\n     */\n    domain(domain: T[]): this;\n\n    /**\n     * Shorthand method for setting the domain and isDomainFixed at once\n     *\n     * @param {T[]} domain The scale's fixed domain\n     */\n    fixDomain(domain: T[]): void;\n\n    /**\n     * Reverse the scale orientation by toggling the reversed flag\n     */\n    reverse(): this;\n\n    /**\n     * Getter for the reversed flag (see #reverse)\n     */\n    reversed(): boolean;\n\n    /**\n     * Setter for the reversed flag (see #reverse)\n     *\n     * @param reversed\n     */\n    reversed(reversed: boolean): this;\n}\n\n\nexport interface IBandScale extends IScale {\n    bandwidth(): number;\n}\n\nexport function isBandScale(scale: any): scale is IBandScale {\n    return typeof scale.bandwidth === \"function\";\n}\n\nexport interface IHasInnerScale extends IScale {\n    innerScale: IScale;\n}\n\nexport function hasInnerScale(scale: any): scale is IHasInnerScale {\n    return typeof scale.innerScale !== \"undefined\";\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SequentialChartMarkerProvider.html":{"url":"classes/SequentialChartMarkerProvider.html","title":"class - SequentialChartMarkerProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SequentialChartMarkerProvider\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/palette/sequential-chart-marker-provider.ts\n        \n\n            \n                Description\n            \n            \n                This class matches the provided markers to given series.\nIt keeps track of already given markers to given entities to avoid conflicts.\n\n            \n\n            \n                Extends\n            \n            \n                        SequentialValueProvider\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                get\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                reset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(markers: IChartMarker[])\n                    \n                \n                        \n                            \n                                Defined in src/core/common/palette/sequential-chart-marker-provider.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        markers\n                                                  \n                                                        \n                                                                        IChartMarker[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                            \n                                \n                                    Inherited from         SequentialValueProvider\n\n                                \n                            \n                        \n                            \n                                    Defined in         SequentialValueProvider:16\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reset()\n                \n            \n\n\n            \n                \n                    Inherited from         SequentialValueProvider\n\n                \n            \n            \n                \n                        Defined in         SequentialValueProvider:26\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IChartMarker } from \"../types\";\n\nimport { SequentialValueProvider } from \"./sequential-value-provider\";\n\n/**\n * This class matches the provided markers to given series.\n * It keeps track of already given markers to given entities to avoid conflicts.\n */\nexport class SequentialChartMarkerProvider extends SequentialValueProvider {\n\n    constructor(private markers: IChartMarker[]) {\n        super(markers);\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SequentialColorProvider.html":{"url":"classes/SequentialColorProvider.html","title":"class - SequentialColorProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SequentialColorProvider\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/palette/sequential-color-provider.ts\n        \n\n            \n                Description\n            \n            \n                This class matches the provided colors to given series.\nIt keeps track of already given colors to given entities to avoid conflicts.\n\n            \n\n            \n                Extends\n            \n            \n                        SequentialValueProvider\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                get\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                reset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(colors: string[])\n                    \n                \n                        \n                            \n                                Defined in src/core/common/palette/sequential-color-provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        colors\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                            \n                                \n                                    Inherited from         SequentialValueProvider\n\n                                \n                            \n                        \n                            \n                                    Defined in         SequentialValueProvider:16\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reset()\n                \n            \n\n\n            \n                \n                    Inherited from         SequentialValueProvider\n\n                \n            \n            \n                \n                        Defined in         SequentialValueProvider:26\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { SequentialValueProvider } from \"./sequential-value-provider\";\n\n/**\n * This class matches the provided colors to given series.\n * It keeps track of already given colors to given entities to avoid conflicts.\n */\nexport class SequentialColorProvider extends SequentialValueProvider {\n\n    constructor(private colors: string[]) {\n        super(colors);\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SequentialValueProvider.html":{"url":"classes/SequentialValueProvider.html","title":"class - SequentialValueProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SequentialValueProvider\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/palette/sequential-value-provider.ts\n        \n\n            \n                Description\n            \n            \n                This class matches the provided instances of type  to given series.\nIt keeps track of already given instances to given entities to avoid conflicts.\n\n            \n\n\n            \n                Implements\n            \n            \n                            IValueProvider\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                get\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                reset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(values: T[])\n                    \n                \n                        \n                            \n                                Defined in src/core/common/palette/sequential-value-provider.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                    T[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/palette/sequential-value-provider.ts:16\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reset()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/palette/sequential-value-provider.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IValueProvider } from \"../types\";\n\n/**\n * This class matches the provided instances of type  to given series.\n * It keeps track of already given instances to given entities to avoid conflicts.\n */\nexport class SequentialValueProvider implements IValueProvider {\n\n    private providedValues: { [key: string]: T };\n    private lastUsedIndex: number;\n\n    constructor(private values: T[]) {\n        this.reset();\n    }\n\n    public get = (entityId: string): T => {\n        let value = this.providedValues[entityId];\n        if (!value) {\n            const index = ++this.lastUsedIndex % this.values.length;\n            value = this.values[index];\n            this.providedValues[entityId] = value;\n        }\n        return value;\n    }\n\n    public reset(): void {\n        this.providedValues = {};\n        this.lastUsedIndex = -1;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SideIndicatorAccessors.html":{"url":"classes/SideIndicatorAccessors.html","title":"class - SideIndicatorAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SideIndicatorAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/side-indicator-renderer.ts\n        \n\n            \n                Description\n            \n            \n                Standard definition for side indicator series and data accessors \n\n            \n\n\n            \n                Implements\n            \n            \n                            ISideIndicatorAccessors\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                data\n                            \n                            \n                                    Public\n                                series\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/renderers/side-indicator-renderer.ts:50\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ISideIndicatorDataAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/side-indicator-renderer.ts:49\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ISideIndicatorSeriesAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/side-indicator-renderer.ts:50\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import defaultsDeep from \"lodash/defaultsDeep\";\nimport { Subject } from \"rxjs\";\n\nimport { STANDARD_RENDER_LAYERS } from \"../constants\";\nimport { Scales } from \"../core/common/scales/types\";\nimport {\n    DataAccessor,\n    IDataAccessors,\n    IDataSeries,\n    ILasagnaLayer,\n    IRendererConfig,\n    IRendererEventPayload,\n    ISeriesAccessors,\n    SeriesAccessor\n} from \"../core/common/types\";\nimport { GRAYSCALE_FILTER } from \"../core/types\";\n\nimport { IRenderSeries, RenderLayerName } from \"./types\";\nimport { XYRenderer } from \"./xy-renderer\";\n\n/** Interface for side indicator data accessors */\nexport interface ISideIndicatorDataAccessors extends IDataAccessors {\n    /** Accessor indicating whether the side indicator should be active */\n    active: DataAccessor;\n}\n\n/** Interface for side indicator series accessors */\nexport interface ISideIndicatorSeriesAccessors extends ISeriesAccessors {\n    /** Indicates the start value of the side indicator */\n    start: SeriesAccessor;\n    /** Indicates the end value of the side indicator */\n    end: SeriesAccessor;\n    /** Indicates the active color of the side indicator */\n    activeColor: SeriesAccessor;\n    /** Optional accessor indicating the inactive color of the side indicator. A grayscale filter is applied to the active color by default */\n    inactiveColor?: SeriesAccessor;\n}\n\n/** Interface for side indicator accessors */\nexport interface ISideIndicatorAccessors {\n    /** Accessors for the side indicator data */\n    data: ISideIndicatorDataAccessors;\n    /** Accessors for the side indicator series */\n    series: ISideIndicatorSeriesAccessors;\n}\n\n/** Standard definition for side indicator series and data accessors */\nexport class SideIndicatorAccessors implements ISideIndicatorAccessors {\n    public data: ISideIndicatorDataAccessors;\n    public series: ISideIndicatorSeriesAccessors;\n\n    constructor() {\n        this.data = {\n            active: (d: any) => d.active,\n        };\n        this.series = {\n            start: () => null,\n            end: () => null,\n            activeColor: () => \"magenta\",\n        };\n    }\n}\n\n/**\n * Renderer for drawing threshold side indicators\n */\nexport class SideIndicatorRenderer extends XYRenderer {\n\n    /** @deprecated As of Nova v9, use RenderLayerName.unclippedData enum value instead. Removal: NUI-5753 */\n    public static SIDE_INDICATORS_LAYER = \"side-indicators\";\n\n    private DEFAULT_CONFIG: IRendererConfig = {};\n\n    /**\n     * Creates an instance of SideIndicatorRenderer.\n     * @param {IRendererConfig} [config={}] Renderer configuration object\n     */\n    constructor(config: IRendererConfig = {}) {\n        super(config);\n        // setting default values to the properties that were not set by user\n        this.config = defaultsDeep(this.config, this.DEFAULT_CONFIG);\n    }\n\n    /** See {@link Renderer#draw} */\n    public draw(renderSeries: IRenderSeries, rendererSubject: Subject): void {\n        const target = renderSeries.containers[RenderLayerName.unclippedData];\n        const dataSeries = renderSeries.dataSeries;\n        const scales = renderSeries.scales;\n        const accessors = renderSeries.dataSeries.accessors;\n\n        let rect = target.select(\"rect\");\n        const isActive = dataSeries.data.length > 0 ?\n            accessors.data.active(dataSeries.data[0], 0, renderSeries.dataSeries.data, renderSeries.dataSeries) : false;\n        const colorAccessor = !isActive && accessors.series.inactiveColor ? accessors.series.inactiveColor : accessors.series.activeColor;\n        if (rect.empty()) {\n            rect = target.append(\"rect\").attrs({\n                \"fill\": colorAccessor(dataSeries.id, dataSeries),\n            });\n\n            if (!isActive && !accessors.series.inactiveColor) {\n                rect.style(\"filter\", GRAYSCALE_FILTER);\n            }\n        }\n\n        const start = accessors.series.start(dataSeries.id, dataSeries);\n        const end = accessors.series.end(dataSeries.id, dataSeries);\n        const top = end == null ? 0 : scales.y.convert(end);\n        const bottom = start == null ? scales.y.range()[0] : Math.min(scales.y.range()[0], scales.y.convert(start));\n        const height = bottom - top;\n        const width = 2;\n        rect.attrs({\n            \"x\": -width,\n            \"y\": top,\n            \"height\": height , values: { [p: string]: any }, scales: Scales) {\n        return -1;\n    }\n\n    /** See {@link Renderer#getRequiredLayers} */\n    public getRequiredLayers(): ILasagnaLayer[] {\n        return [\n            STANDARD_RENDER_LAYERS[RenderLayerName.unclippedData],\n        ];\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SparkChartAssist.html":{"url":"classes/SparkChartAssist.html","title":"class - SparkChartAssist","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SparkChartAssist\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/chart-assists/spark-chart-assist.ts\n        \n\n            \n                Description\n            \n            \n                Chart assist implementation to be used with spark charts\n\n            \n\n\n            \n                Implements\n            \n            \n                            IChartAssist\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                gridConfig\n                            \n                            \n                                    Public\n                                highlightedDataPoints\n                            \n                            \n                                    Public\n                                isLegendActive\n                            \n                            \n                                    Public\n                                    Readonly\n                                lastGridConfig\n                            \n                            \n                                    Public\n                                markers\n                            \n                            \n                                    Public\n                                palette\n                            \n                            \n                                    Public\n                                    Readonly\n                                showBottomAxis\n                            \n                            \n                                    Public\n                                    Readonly\n                                showTopBorder\n                            \n                            \n                                    Public\n                                sparks\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getHighlightedValue\n                            \n                            \n                                    Public\n                                getVisibleSeriesWithLegend\n                            \n                            \n                                    Public\n                                setRenderState\n                            \n                            \n                                    Public\n                                trackByFn\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateSparks\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(showBottomAxis, showTopBorder, palette: IChartPalette, markers: IValueProvider)\n                    \n                \n                        \n                            \n                                Defined in src/core/chart-assists/spark-chart-assist.ts:36\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        showBottomAxis\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        showTopBorder\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        palette\n                                                  \n                                                        \n                                                                        IChartPalette\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        markers\n                                                  \n                                                        \n                                                                        IValueProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            gridConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         XYGridConfig\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/spark-chart-assist.ts:32\n                            \n                        \n\n                \n                    \n                        Grid config for all sparks except the last (bottom) one \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            highlightedDataPoints\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IDataPointsPayload\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/spark-chart-assist.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            isLegendActive\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/spark-chart-assist.ts:30\n                            \n                        \n\n                \n                    \n                        Used for keeping tabs on the legend's active state \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            lastGridConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         XYGridConfig\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/spark-chart-assist.ts:34\n                            \n                        \n\n                \n                    \n                        Grid config for the last (bottom) spark \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            markers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IValueProvider\n\n                        \n                    \n                    \n                        \n                            Default value : new SequentialChartMarkerProvider(CHART_MARKERS)\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/spark-chart-assist.ts:41\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            palette\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IChartPalette\n\n                        \n                    \n                    \n                        \n                            Default value : new ChartPalette(CHART_PALETTE_CS1)\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/spark-chart-assist.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            showBottomAxis\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/spark-chart-assist.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            showTopBorder\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/spark-chart-assist.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            sparks\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ISpark[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/spark-chart-assist.ts:28\n                            \n                        \n\n                \n                    \n                        Collection of ISpark objects \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getHighlightedValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getHighlightedValue(chartSeries: IChartSeries, scaleKey: string, formatterName?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/spark-chart-assist.ts:84\n                \n            \n\n\n            \n                \n                    See IChartAssist \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    chartSeries\n                                    \n                                                IChartSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scaleKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    formatterName\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getVisibleSeriesWithLegend\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getVisibleSeriesWithLegend()\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/spark-chart-assist.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     IChartAssistSeries[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setRenderState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setRenderState(_seriesId: string, _state: RenderState)\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/spark-chart-assist.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _seriesId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    _state\n                                    \n                                                RenderState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            trackByFn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    trackByFn(_index: number, spark: ISpark)\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/spark-chart-assist.ts:92\n                \n            \n\n\n            \n                \n                    To use the for-cycle trackBy, set the id value on each spark\nand assign this function to the ngFor trackBy property\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    spark\n                                    \n                                            ISpark\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(inputSeriesSet: IChartAssistSeries[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/spark-chart-assist.ts:55\n                \n            \n\n\n            \n                \n                    Use this method to update the set of sparks if they all consist of only one series.\nIf one or more sparks has multiple series use the updateSparks method instead.\nSee IChartAssist\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    inputSeriesSet\n                                    \n                                            IChartAssistSeries[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateSparks\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateSparks(sparks: ISpark[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/spark-chart-assist.ts:65\n                \n            \n\n\n            \n                \n                    Use this method to update the set of sparks if any of them consist of more than one series.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    sparks\n                                    \n                                            ISpark[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The collection of sparks to update\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import cloneDeep from \"lodash/cloneDeep\";\n\nimport { INTERACTION_DATA_POINTS_EVENT, MOUSE_ACTIVE_EVENT } from \"../../constants\";\nimport { XYGridConfig } from \"../../core/grid/config/xy-grid-config\";\nimport { RenderState } from \"../../renderers/types\";\nimport { Chart } from \"../chart\";\nimport { EventBus } from \"../common/event-bus\";\nimport { ChartPalette } from \"../common/palette/chart-palette\";\nimport { CHART_MARKERS, CHART_PALETTE_CS1 } from \"../common/palette/palettes\";\nimport { SequentialChartMarkerProvider } from \"../common/palette/sequential-chart-marker-provider\";\nimport {\n    IAccessors, IChartAssistSeries, IChartEvent, IChartMarker, IChartPalette, IChartSeries, IDataPointsPayload, InteractionType, IValueProvider\n} from \"../common/types\";\nimport { UtilityService } from \"../common/utility.service\";\nimport { sparkChartGridConfig } from \"../grid/config/spark-chart-grid-config\";\nimport { XYGrid } from \"../grid/xy-grid\";\nimport { InteractionLabelPlugin } from \"../plugins/interaction/interaction-label-plugin\";\nimport { InteractionLinePlugin } from \"../plugins/interaction/interaction-line-plugin\";\n\nimport { ChartAssist } from \"./chart-assist\";\nimport { IChartAssist, ISpark } from \"./types\";\n\n/**\n * Chart assist implementation to be used with spark charts\n */\nexport class SparkChartAssist implements IChartAssist {\n    /** Collection of ISpark objects */\n    public sparks: ISpark[] = [];\n    /** Used for keeping tabs on the legend's active state */\n    public isLegendActive = false;\n    /** Grid config for all sparks except the last (bottom) one */\n    public readonly gridConfig: XYGridConfig;\n    /** Grid config for the last (bottom) spark */\n    public readonly lastGridConfig: XYGridConfig;\n\n    public highlightedDataPoints: IDataPointsPayload = {};\n\n    constructor(public readonly showBottomAxis = true,\n        public readonly showTopBorder = true,\n        public palette: IChartPalette = new ChartPalette(CHART_PALETTE_CS1),\n        public markers: IValueProvider = new SequentialChartMarkerProvider(CHART_MARKERS)) {\n        this.gridConfig = sparkChartGridConfig(new XYGridConfig(), false, showTopBorder);\n        this.gridConfig.interactionPlugins = false;\n\n        this.lastGridConfig = sparkChartGridConfig(new XYGridConfig(), showBottomAxis, showTopBorder);\n        this.lastGridConfig.interactionPlugins = false;\n    }\n\n    /**\n     * Use this method to update the set of sparks if they all consist of only one series.\n     * If one or more sparks has multiple series use the updateSparks method instead.\n     *\n     * See {@link IChartAssist#update}\n     */\n    public update(inputSeriesSet: IChartAssistSeries[]): void {\n        const sparks = inputSeriesSet.map(chartSeries => ({ id: chartSeries.id, chartSeriesSet: [chartSeries] }));\n        this.updateSparks(sparks);\n    }\n\n    /**\n     * Use this method to update the set of sparks if any of them consist of more than one series.\n     *\n     * @param {ISpark[]} sparks The collection of sparks to update\n     */\n    public updateSparks(sparks: ISpark[]): void {\n        const inputSparks = cloneDeep(sparks);\n        this.sparks = inputSparks.map((spark, index): ISpark => {\n            const lastSpark = index === inputSparks.length - 1;\n            const existingSparkIndex = spark.id ? this.sparks.findIndex(existingSpark => existingSpark.id === spark.id) : -1;\n            if (existingSparkIndex !== -1) {\n                spark.chart = this.reconfigureChart(this.sparks[existingSparkIndex].chart as Chart, lastSpark);\n            } else {\n                spark.chart = spark.chart || this.createChart(lastSpark);\n                spark.id = spark.id || UtilityService.uuid();\n            }\n\n            spark.chart.update(spark.chartSeriesSet);\n\n            return spark;\n        });\n    }\n\n    /** See {@link IChartAssist#getHighlightedValue} */\n    public getHighlightedValue(chartSeries: IChartSeries, scaleKey: string, formatterName?: string): string | number {\n        return ChartAssist.getLabel(chartSeries, this.highlightedDataPoints[chartSeries.id], scaleKey, formatterName);\n    }\n\n    /**\n     * To use the for-cycle trackBy, set the id value on each spark\n     * and assign this function to the ngFor trackBy property\n     */\n    public trackByFn(_index: number, spark: ISpark) {\n        return spark.id;\n    }\n\n    public setRenderState(_seriesId: string, _state: RenderState): void {\n        // not used\n    }\n\n    public getVisibleSeriesWithLegend(): IChartAssistSeries[] {\n        return [];\n    }\n\n    protected createChart(lastSpark: boolean) {\n        const grid = new XYGrid(lastSpark ? this.lastGridConfig : this.gridConfig);\n        const chart = new Chart(grid);\n\n        if (this.showTopBorder || this.showBottomAxis) {\n            chart.addPlugin(new InteractionLinePlugin());\n        }\n        if (lastSpark && this.showBottomAxis) {\n            chart.addPlugin(new InteractionLabelPlugin());\n        }\n\n        this.configureEventSubscriptions(chart.getEventBus());\n\n        return chart;\n    }\n\n    private configureEventSubscriptions(eventBus: EventBus): void {\n        eventBus.getStream(INTERACTION_DATA_POINTS_EVENT).subscribe((event) => {\n            if (event.data.interactionType === InteractionType.MouseMove) {\n                const dataPoints = event.data.dataPoints;\n                Object.keys(dataPoints).forEach(seriesId => {\n                    this.highlightedDataPoints[seriesId] = Object.assign({}, dataPoints[seriesId]);\n                });\n            }\n        });\n        eventBus.getStream(MOUSE_ACTIVE_EVENT).subscribe((event) => {\n            this.isLegendActive = event.data;\n        });\n    }\n\n    private reconfigureChart(chart: Chart, lastSpark: boolean): Chart {\n        chart.getGrid().config(lastSpark ? this.lastGridConfig : this.gridConfig);\n        chart.updateDimensions();\n\n        const hasInteractionLabel = chart.hasPlugin(InteractionLabelPlugin);\n        if (lastSpark && !hasInteractionLabel && this.showBottomAxis) {\n            const labelPlugin = new InteractionLabelPlugin();\n            chart.addPlugin(labelPlugin);\n            labelPlugin.initialize();\n        } else if (!lastSpark && hasInteractionLabel) {\n            chart.removePlugin(InteractionLabelPlugin);\n        }\n\n        return chart;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StatusAccessors.html":{"url":"classes/StatusAccessors.html","title":"class - StatusAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StatusAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/bar/accessors/status-accessors.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IStatusAccessors\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                STATUS_CATEGORY\n                            \n                            \n                                    Static\n                                STATUS_DOMAIN\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    data\n                                \n                                \n                                    series\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(barAccessors: IBarAccessors)\n                    \n                \n                        \n                            \n                                Defined in src/renderers/bar/accessors/status-accessors.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        barAccessors\n                                                  \n                                                        \n                                                                        IBarAccessors\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            STATUS_CATEGORY\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"status\"\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/bar/accessors/status-accessors.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            STATUS_DOMAIN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [StatusAccessors.STATUS_CATEGORY]\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/bar/accessors/status-accessors.ts:16\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n\n                \n                    \n                        getdata()\n                    \n                \n                            \n                                \n                                    Defined in src/renderers/bar/accessors/status-accessors.ts:18\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        series\n                    \n                \n\n                \n                    \n                        getseries()\n                    \n                \n                            \n                                \n                                    Defined in src/renderers/bar/accessors/status-accessors.ts:22\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { DataAccessor } from \"../../../core/common/types\";\nimport { IRectangleSeriesAccessors } from \"../../accessors/rectangle-accessors\";\n\nimport { IBarAccessors, IBarDataAccessors } from \"./bar-accessors\";\n\nexport interface IStatusDataAccessors extends IBarDataAccessors {\n    status: DataAccessor;\n}\n\nexport interface IStatusAccessors extends IBarAccessors {\n    data: IStatusDataAccessors;\n}\n\nexport class StatusAccessors implements IStatusAccessors {\n    public static STATUS_CATEGORY = \"status\";\n    public static STATUS_DOMAIN = [StatusAccessors.STATUS_CATEGORY];\n\n    public get data(): IStatusDataAccessors {\n        return this.barAccessors.data as IStatusDataAccessors;\n    }\n\n    public get series(): IRectangleSeriesAccessors {\n        return this.barAccessors.series;\n    }\n\n    constructor(private barAccessors: IBarAccessors) {\n        barAccessors.data.status = (d: any) => d.status;\n    }\n}\n\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SvgMarker.html":{"url":"classes/SvgMarker.html","title":"class - SvgMarker","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SvgMarker\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/palette/markers/svg-marker.ts\n        \n\n            \n                Description\n            \n            \n                This class creates a ChartMarker based on provided portion of svg markup\n\n            \n\n\n            \n                Implements\n            \n            \n                            IChartMarker\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getSvg\n                            \n                            \n                                    Public\n                                setColor\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(svg: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/common/palette/markers/svg-marker.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        svg\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getSvg\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSvg()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/palette/markers/svg-marker.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setColor\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setColor(color: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/palette/markers/svg-marker.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    color\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import isUndefined from \"lodash/isUndefined\";\n\nimport { IChartMarker } from \"../../types\";\n\n/**\n * This class creates a ChartMarker based on provided portion of svg markup\n */\nexport class SvgMarker implements IChartMarker {\n    protected styledSvg: string;\n\n    constructor(protected svg: string) {\n    }\n\n    public getSvg(): string {\n        return this.styledSvg || this.svg;\n    }\n\n    public setColor(color: string): void {\n        this.styledSvg = isUndefined(color) ? color : `${this.svg}`;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TextColorProvider.html":{"url":"classes/TextColorProvider.html","title":"class - TextColorProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TextColorProvider\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/palette/text-color-provider.ts\n        \n\n            \n                Description\n            \n            \n                This color provider calculates foreground color based on contrast ratio of provided colors\n\n            \n\n            \n                Extends\n            \n            \n                        ProcessedColorProvider\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                get\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                reset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sourceProvider: IValueProvider, colorDefinitions: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/core/common/palette/text-color-provider.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sourceProvider\n                                                  \n                                                        \n                                                                        IValueProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        colorDefinitions\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                            \n                                \n                                    Inherited from         ProcessedColorProvider\n\n                                \n                            \n                        \n                            \n                                    Defined in         ProcessedColorProvider:15\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reset()\n                \n            \n\n\n            \n                \n                    Inherited from         ProcessedColorProvider\n\n                \n            \n            \n                \n                        Defined in         ProcessedColorProvider:30\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { rgb, RGBColor } from \"d3-color\";\n\nimport { IValueProvider } from \"../types\";\n\nimport { getColorValueByName } from \"./color.helper\";\nimport { ProcessedColorProvider } from \"./processed-color-provider\";\n\n/** @ignore */\nconst rc = 0.2126;\n/** @ignore */\nconst gc = 0.7152;\n/** @ignore */\nconst bc = 0.0722;\n/** @ignore */\nconst lowc = 1 / 12.92;\n\n/**\n * This color provider calculates foreground color based on contrast ratio of provided colors\n */\nexport class TextColorProvider extends ProcessedColorProvider {\n\n    constructor(sourceProvider: IValueProvider, colorDefinitions: { light: string, dark: string }) {\n        super(sourceProvider, (input: string) => {\n            const color = getColorValueByName(input);\n            const rgbInput = rgb(color);\n\n            const ratioToLight = this.getContrastRatio(rgbInput, rgb(colorDefinitions.light));\n            const ratioToDark = this.getContrastRatio(rgbInput, rgb(colorDefinitions.dark));\n\n            return ratioToDark > ratioToLight ? colorDefinitions.dark : colorDefinitions.light;\n        });\n    }\n\n    /**\n     * Calculate contrast ratio of two given colors (https://www.w3.org/TR/WCAG20/#contrast-ratiodef)\n     *\n     * @param {RGBColor} color1\n     * @param {RGBColor} color2\n     * @returns {number} luminance ratio\n     */\n    private getContrastRatio(color1: RGBColor, color2: RGBColor) {\n        const luminance1 = this.getRelativeLuminance(color1);\n        const luminance2 = this.getRelativeLuminance(color2);\n        let lighter: number;\n        let darker: number;\n        if (luminance1 > luminance2) {\n            lighter = luminance1;\n            darker = luminance2;\n        } else {\n            lighter = luminance2;\n            darker = luminance1;\n        }\n        return (lighter + 0.05) / (darker + 0.05);\n    }\n\n    /**\n     * Calculates relative luminance of given color (https://www.w3.org/TR/WCAG20/relative-luminance.xml)\n     *\n     * @param {RGBColor} rgbColor\n     * @returns {number}\n     */\n    private getRelativeLuminance(rgbColor: RGBColor) {\n        const rsrgb = rgbColor.r / 255;\n        const gsrgb = rgbColor.g / 255;\n        const bsrgb = rgbColor.b / 255;\n\n        const r = rsrgb \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ThresholdsService.html":{"url":"injectables/ThresholdsService.html","title":"injectable - ThresholdsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ThresholdsService\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/thresholds/thresholds-service.ts\n        \n\n            \n                Description\n            \n            \n                This service provides functionality that facilitates the creation of thresholds related visual element on charts.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                SERIES_ID_SUFFIX\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getBackgrounds\n                            \n                            \n                                    Public\n                                getCrossPoint\n                            \n                            \n                                    Public\n                                getCrossPointWithY\n                            \n                            \n                                    Public\n                                getSideIndicators\n                            \n                            \n                                    Public\n                                getThresholdLine\n                            \n                            \n                                    Public\n                                getThresholdLines\n                            \n                            \n                                    Public\n                                getThresholdZones\n                            \n                            \n                                    Public\n                                injectThresholdsData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/thresholds/thresholds-service.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getBackgrounds\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getBackgrounds(sourceSeries: IDataSeries, zones: IDataSeries[], scales: Scales, colorProvider: IValueProvider, thicknessMap: Record, rendererConfig: IRendererConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/thresholds/thresholds-service.ts:76\n                \n            \n\n\n            \n                \n                    This method creates a background series for TimeInterval or continuous (currently only works with time) scale.\nIf the series is continuous it detects intersection of source line data with given threshold zones and generates start / end for status periods.\nOtherwise it will use the start and the end of the band.\nThe default value of the rendererConfig parameter is THRESHOLDS_MAIN_CHART_RENDERER_CONFIG. For a summary chart, usually a smaller status\nchart positioned below a main chart, use THRESHOLDS_SUMMARY_RENDERER_CONFIG.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    sourceSeries\n                                    \n                                            IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The data series from which to derive a background visualization\n\n                                    \n                                \n                                \n                                    zones\n                                    \n                                            IDataSeries[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Zones defined as data series with IAreaAccessors\n\n                                    \n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The scales to be used for the background visualization\n\n                                    \n                                \n                                \n                                    colorProvider\n                                    \n                                                IValueProvider\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        A value provider for the colors to be used for each status\n\n                                    \n                                \n                                \n                                    thicknessMap\n                                    \n                                            Record\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                    \n                                        Map of status to number specifying a custom height per status for the background visualization.\nIf a status is not specified in the map, the default thickness is the full height of the rendering area.\n\n                                    \n                                \n                                \n                                    rendererConfig\n                                    \n                                                IRendererConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        cloneDeep(THRESHOLDS_MAIN_CHART_RENDERER_CONFIG)\n                                    \n\n                                    \n                                        The renderer's configuration\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IChartAssistSeries\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCrossPoint\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCrossPoint(dataFrom: IPosition, dataTo: IPosition, thresholdFrom: IPosition, thresholdTo: IPosition)\n                \n            \n\n\n            \n                \n                    Defined in src/thresholds/thresholds-service.ts:295\n                \n            \n\n\n            \n                \n                    Calculates the point where the data series line will cross a threshold line using the two closest points for each\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dataFrom\n                                    \n                                                IPosition\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Data starting point\n\n                                    \n                                \n                                \n                                    dataTo\n                                    \n                                                IPosition\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Data ending point\n\n                                    \n                                \n                                \n                                    thresholdFrom\n                                    \n                                                IPosition\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Threshold starting point\n\n                                    \n                                \n                                \n                                    thresholdTo\n                                    \n                                                IPosition\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Threshold ending point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IPosition | undefined\n\n                    \n                    \n                        the position of the cross point or null if lines don't cross\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCrossPointWithY\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCrossPointWithY(dataFrom: IPosition, dataTo: IPosition, y: number)\n                \n            \n\n\n            \n                \n                    Defined in src/thresholds/thresholds-service.ts:363\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataFrom\n                                    \n                                                IPosition\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dataTo\n                                    \n                                                IPosition\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getSideIndicators\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSideIndicators(zones: IDataSeries[], scales: Scales, rendererConfig?: IRendererConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/thresholds/thresholds-service.ts:374\n                \n            \n\n\n            \n                \n                    Creates side indicator data series for given threshold zones\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    zones\n                                    \n                                            IDataSeries[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Zones defined as data series with IAreaAccessors\n\n                                    \n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scales to be used for the side indicators\n\n                                    \n                                \n                                \n                                    rendererConfig\n                                    \n                                                IRendererConfig\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Configuration for the renderer. Default is the exported constant 'THRESHOLDS_MAIN_CHART_RENDERER_CONFIG'\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IChartAssistSeries[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getThresholdLine\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getThresholdLine(zone: IDataSeries, valueAccessor: DataAccessor, zoneBoundary)\n                \n            \n\n\n            \n                \n                    Defined in src/thresholds/thresholds-service.ts:261\n                \n            \n\n\n            \n                \n                    Creates a IChartAssistSeries that represents a threshold zone limit defined by given valueAccessor\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    zone\n                                    \n                                            IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        A zone defined as a data series with IAreaAccessors\n\n                                    \n                                \n                                \n                                    valueAccessor\n                                    \n                                                DataAccessor\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Accessor for the threshold limit\n\n                                    \n                                \n                                \n                                    zoneBoundary\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ZoneBoundary.Start\n                                    \n\n                                    \n                                        The zone boundary represented by the line. Default is ZoneBoundary.Start.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IChartAssistSeries\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getThresholdLines\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getThresholdLines(zones: IDataSeries[])\n                \n            \n\n\n            \n                \n                    Defined in src/thresholds/thresholds-service.ts:229\n                \n            \n\n\n            \n                \n                    Creates data series representing threshold lines on the chart. Solves collision between zones, where multiple zones are using the same limit value.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    zones\n                                    \n                                            IDataSeries[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Zones defined as data series with IAreaAccessors\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IChartAssistSeries[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getThresholdZones\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getThresholdZones(sourceSeries: IDataSeries, simpleZones: ISimpleThresholdZone[], colorProvider: IValueProvider)\n                \n            \n\n\n            \n                \n                    Defined in src/thresholds/thresholds-service.ts:205\n                \n            \n\n\n            \n                \n                    Generates threshold zone series from simplified zone definition. Simplified definition provides only two numbers to define the zone interval.\nCreating these series manually is also possible for dynamic threshold limits.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    sourceSeries\n                                    \n                                            IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        source data series from which to derive the zones\n\n                                    \n                                \n                                \n                                    simpleZones\n                                    \n                                                ISimpleThresholdZone[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a collection of zones that are each defined by a start value and/or an end value. (A missing\nstart or end value indicates an infinite zone.)\n\n                                    \n                                \n                                \n                                    colorProvider\n                                    \n                                                IValueProvider\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A value provider for the colors to be used for each status\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IDataSeries[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            injectThresholdsData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    injectThresholdsData(dataSeries: IDataSeries, zones: IDataSeries[])\n                \n            \n\n\n            \n                \n                    Defined in src/thresholds/thresholds-service.ts:40\n                \n            \n\n\n            \n                \n                    Calculates the threshold \"statuses\" - from/to and what zone we're in. It is the first step that is required before the usage of other methods. Having\nthe threshold \"statuses\" assigned to each data point enables us to access the threshold information not only in other methods for threshold\ncalculation, but also in other places, like legend or tooltips.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dataSeries\n                                    \n                                            IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        source data series that will be enhanced with threshold metadata\n\n                                    \n                                \n                                \n                                    zones\n                                    \n                                            IDataSeries[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        zones defined as data series with IAreaAccessors\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            SERIES_ID_SUFFIX\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"__thresholds-background\"\n                        \n                    \n                        \n                            \n                                    Defined in src/thresholds/thresholds-service.ts:27\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { LoggerService } from \"@nova-ui/bits\";\nimport { Numeric } from \"d3-array\";\nimport cloneDeep from \"lodash/cloneDeep\";\nimport sortBy from \"lodash/sortBy\";\nimport unionWith from \"lodash/unionWith\";\nimport values from \"lodash/values\";\n\nimport { isBandScale, Scales } from \"../core/common/scales/types\";\nimport { DataAccessor, IChartAssistSeries, IDataSeries, IPosition, IRendererConfig, IValueProvider, IZoneCrossPoint } from \"../core/common/types\";\nimport { AreaAccessors, IAreaAccessors } from \"../renderers/area/area-accessors\";\nimport { IStatusAccessors } from \"../renderers/bar/accessors/status-accessors\";\nimport { statusAccessors } from \"../renderers/bar/accessors/status-accessors-fn\";\nimport { BarRenderer } from \"../renderers/bar/bar-renderer\";\nimport { THRESHOLDS_MAIN_CHART_RENDERER_CONFIG } from \"../renderers/constants\";\nimport { ILineAccessors, LineAccessors } from \"../renderers/line/line-accessors\";\nimport { LineRenderer } from \"../renderers/line/line-renderer\";\nimport { ISideIndicatorAccessors, SideIndicatorAccessors, SideIndicatorRenderer } from \"../renderers/side-indicator-renderer\";\n\nimport { ISimpleThresholdZone, ZoneBoundary, ZoneCross } from \"./types\";\n\n/**\n * This service provides functionality that facilitates the creation of thresholds related visual element on charts.\n */\n@Injectable()\nexport class ThresholdsService {\n    public static SERIES_ID_SUFFIX = \"__thresholds-background\";\n\n    constructor(private loggerService: LoggerService) {\n    }\n\n    /**\n     * Calculates the threshold \"statuses\" - from/to and what zone we're in. It is the first step that is required before the usage of other methods. Having\n     * the threshold \"statuses\" assigned to each data point enables us to access the threshold information not only in other methods for threshold\n     * calculation, but also in other places, like legend or tooltips.\n     *\n     * @param dataSeries source data series that will be enhanced with threshold metadata\n     * @param zones zones defined as data series with IAreaAccessors\n     */\n    public injectThresholdsData(dataSeries: IDataSeries,\n                                zones: IDataSeries[]) {\n        const zoneIndexes: Record = {};\n        zones.forEach(z => z.entered = false);\n\n        for (let i = 0; i ,\n                          zones: IDataSeries[],\n                          scales: Scales,\n                          colorProvider: IValueProvider,\n                          thicknessMap: Record = {},\n                          rendererConfig: IRendererConfig = cloneDeep(THRESHOLDS_MAIN_CHART_RENDERER_CONFIG)): IChartAssistSeries {\n        if (sourceSeries.data.length > 0 && typeof sourceSeries.data[0].__thresholds === \"undefined\") {\n            this.loggerService.warn(\"Thresholds metadata is not defined on provided data series\", sourceSeries);\n        }\n\n        let data: any[];\n        const accessors = statusAccessors(colorProvider);\n        accessors.data.thickness = (d) => thicknessMap[d.status];\n        if (isBandScale(scales.x)) {\n            data = cloneDeep(sourceSeries.data);\n            accessors.data.start = sourceSeries.accessors.data.x;\n            accessors.data.end = sourceSeries.accessors.data.x;\n            accessors.data.color = (d) => (d.__thresholds && d.__thresholds.status) ?\n                colorProvider.get(d.__thresholds.status) : \"transparent\";\n            accessors.data.thickness = (d) => thicknessMap[d.__thresholds.status];\n        } else {\n            data = this.getBackgroundsDataForContinuousScale(sourceSeries, zones);\n        }\n        return {\n            id: sourceSeries.id + ThresholdsService.SERIES_ID_SUFFIX,\n            data,\n            accessors,\n            scales,\n            renderer: new BarRenderer(rendererConfig),\n            showInLegend: false,\n        };\n    }\n\n    /**\n     * Calculates background data for continuous scale based on intersections between the source data and zone definitions.\n     *\n     * @param sourceSeries source data series from which to derive background data\n     * @param zones zones defined as data series with IAreaAccessors\n     */\n    private getBackgroundsDataForContinuousScale(sourceSeries: IDataSeries, zones: IDataSeries[]) {\n        const backgroundData: ZoneCross[] = [];\n        const breakPoints = this.getBreakPoints(sourceSeries, zones);\n\n        const zoneIndexes: Record = {};\n        for (let i = 0; i , zones: IDataSeries[]): (IZoneCrossPoint | undefined)[] {\n        const sourceAccessors = sourceSeries.accessors.data;\n\n        let breakPoints: (IZoneCrossPoint | undefined)[] = [];\n\n        for (let i = 0; i  this.getCrossPointWithY(xy1, xy2, y)) // calculate cross points for both limits\n                    .filter(c => c); // take only those that actually intersect\n\n                [xy1, xy2].forEach((xy) => {\n                    if (xy.y === zoneStartY || xy.y === zoneEndY) {\n                        xy.isZoneEdge = true;\n                    }\n                });\n\n                // add all crossPoints, dataPoints, but only those with unique \"x\" coordinate\n                breakPoints = unionWith(breakPoints, zoneCrossPoints, [xy1, xy2], (a, b) => a?.x === b?.x && a?.isZoneEdge === b?.isZoneEdge);\n            }\n        }\n\n        return sortBy(breakPoints, \"x\");\n    }\n\n    /**\n     * Generates threshold zone series from simplified zone definition. Simplified definition provides only two numbers to define the zone interval.\n     * Creating these series manually is also possible for dynamic threshold limits.\n     *\n     * @param sourceSeries source data series from which to derive the zones\n     * @param simpleZones a collection of zones that are each defined by a start value and/or an end value. (A missing\n     start or end value indicates an infinite zone.)\n     * @param colorProvider A value provider for the colors to be used for each status\n     */\n    public getThresholdZones(sourceSeries: IDataSeries,\n                             simpleZones: ISimpleThresholdZone[],\n                             colorProvider: IValueProvider): IDataSeries[] {\n        const areaAccessors = new AreaAccessors();\n        areaAccessors.data.start = (d) => d.start;\n        areaAccessors.data.end = (d) => d.end;\n        areaAccessors.series.color = (seriesId, series) => colorProvider.get(series.value);\n\n        return simpleZones.map((z, i) => ({\n            id: sourceSeries.id + \"__\" + z.status + \"-\" + i,\n            value: z.status,\n            data: [\n                { start: z.start, end: z.end },\n            ],\n            scales: sourceSeries.scales,\n            accessors: areaAccessors,\n        }));\n    }\n\n    /**\n     * Creates data series representing threshold lines on the chart. Solves collision between zones, where multiple zones are using the same limit value.\n     *\n     * @param zones Zones defined as data series with IAreaAccessors\n     */\n    public getThresholdLines(zones: IDataSeries[]): IChartAssistSeries[] {\n        if (-1 === zones.findIndex(z => z.entered)) {\n            return [];\n        }\n\n        // TODO: works only for static thresholds\n        const limits: Record, accessor: DataAccessor, zoneBoundary: ZoneBoundary }> = {};\n\n        function addLimitEntry(accessor: DataAccessor, zone: IDataSeries, zoneBoundary: ZoneBoundary) {\n            const value = accessor(zone.data[0], 0, zone.data, zone);\n            if (typeof value !== \"undefined\" && typeof limits[value] === \"undefined\") {\n                limits[value] = { series: zone, accessor, zoneBoundary };\n            }\n        }\n\n        for (const z of zones) {\n            if (z.accessors.data.start && z.accessors.data.end) {\n                addLimitEntry(z.accessors.data.start, z, ZoneBoundary.Start);\n                addLimitEntry(z.accessors.data.end, z, ZoneBoundary.End);\n            }\n        }\n\n        return values(limits).map((limit) => this.getThresholdLine(limit.series, limit.accessor, limit.zoneBoundary));\n    }\n\n    /**\n     * Creates a IChartAssistSeries that represents a threshold zone limit defined by given valueAccessor\n     *\n     * @param zone A zone defined as a data series with IAreaAccessors\n     * @param valueAccessor Accessor for the threshold limit\n     * @param zoneBoundary The zone boundary represented by the line. Default is ZoneBoundary.Start.\n     */\n    public getThresholdLine(zone: IDataSeries,\n                            valueAccessor: DataAccessor,\n                            zoneBoundary = ZoneBoundary.Start): IChartAssistSeries {\n        const accessors = new LineAccessors();\n        accessors.data.y = valueAccessor;\n        accessors.series.color = zone.accessors.series.color;\n        const renderer = new LineRenderer({\n            interactive: false,\n            strokeWidth: 1,\n            strokeStyle: LineRenderer.getStrokeStyleDashed(1),\n            stateStyles: cloneDeep(THRESHOLDS_MAIN_CHART_RENDERER_CONFIG.stateStyles),\n            ignoreForDomainCalculation: true,\n        });\n\n        return {\n            id: `${zone.id}__${zoneBoundary}__threshold-line`,\n            data: zone.data,\n            value: zone.value,\n            accessors,\n            renderer,\n            scales: zone.scales,\n            showInLegend: false,\n        };\n    }\n\n    /**\n     * Calculates the point where the data series line will cross a threshold line using the two closest points for each\n     *\n     * @param {IPosition} dataFrom Data starting point\n     * @param {IPosition} dataTo Data ending point\n     * @param {IPosition} thresholdFrom Threshold starting point\n     * @param {IPosition} thresholdTo Threshold ending point\n     * @returns {IPosition} the position of the cross point or `null` if lines don't cross\n     */\n    public getCrossPoint(dataFrom: IPosition, dataTo: IPosition,\n                         thresholdFrom: IPosition, thresholdTo: IPosition): IPosition | undefined {\n        /* Inspired by https://stackoverflow.com/a/1968345 */\n        const dataShift: IPosition = {\n            x: dataTo.x - dataFrom.x,\n            y: dataTo.y - dataFrom.y,\n        };\n        const thresholdShift: IPosition = {\n            x: thresholdTo.x - thresholdFrom.x,\n            y: thresholdTo.y - thresholdFrom.y,\n        };\n        const s = (-dataShift.y * (dataFrom.x - thresholdFrom.x) + dataShift.x * (dataFrom.y - thresholdFrom.y))\n            / (-thresholdShift.x * dataShift.y + dataShift.x * thresholdShift.y);\n        const t = (thresholdShift.x * (dataFrom.y - thresholdFrom.y) - thresholdShift.y * (dataFrom.x - thresholdFrom.x))\n            / (-thresholdShift.x * dataShift.y + dataShift.x * thresholdShift.y);\n\n        if (!(s >= 0 && s = 0 && t [], zoneIndexes: Record, x: Numeric, y: Numeric) {\n        for (const zone of zones) {\n            if (!zoneIndexes[zone.id]) {\n                zoneIndexes[zone.id] = 0;\n            }\n\n            const zoneIndex = this.moveZoneIndex(zoneIndexes[zone.id], zone, x);\n            zoneIndexes[zone.id] = zoneIndex;\n\n            const zoneDataPoint = zone.data[zoneIndex];\n\n            const zDataAccessors = zone.accessors.data;\n            const start = zDataAccessors.start?.(zoneDataPoint, zoneIndex, zone.data, zone);\n            const end = zDataAccessors.end?.(zoneDataPoint, zoneIndex, zone.data, zone);\n\n            // TODO: this is not going to work for dynamic thresholds, so still have some work to do here\n            if ((typeof start === \"undefined\" || y >= start) &&\n                (typeof end === \"undefined\" || y , x: Numeric) {\n        while (zoneIndex [],\n                             scales: Scales,\n                             rendererConfig?: IRendererConfig): IChartAssistSeries[] {\n        const sideIndicators: IChartAssistSeries[] = [];\n        const renderer = new SideIndicatorRenderer(rendererConfig || cloneDeep(THRESHOLDS_MAIN_CHART_RENDERER_CONFIG));\n        const indicatorsActive = -1 !== zones.findIndex(z => z.entered);\n        for (const z of zones) {\n            const sideIndicatorAccessors = new SideIndicatorAccessors();\n            sideIndicatorAccessors.series = {\n                start: () => z.accessors.data.start?.(z.data[0], 0, z.data, z),\n                end: () => z.accessors.data.end?.(z.data[0], 0, z.data, z),\n                activeColor: () => z.accessors.series.color?.(z.id, z),\n            };\n\n            const sideIndicator: IChartAssistSeries = {\n                id: z.id + \"__side-indicator\",\n                data: [{ active: indicatorsActive }],\n                accessors: sideIndicatorAccessors,\n                scales,\n                renderer,\n                showInLegend: false,\n            };\n\n            sideIndicators.push(sideIndicator);\n        }\n\n        return sideIndicators;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TimeScale.html":{"url":"classes/TimeScale.html","title":"class - TimeScale","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TimeScale\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/scales/time-scale.ts\n        \n\n            \n                Description\n            \n            \n                Nova wrapper around D3's scaleTime\n\n            \n\n            \n                Extends\n            \n            \n                        Scale\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                domainCalculator\n                            \n                            \n                                    Public\n                                formatters\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                isDomainFixed\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                convert\n                            \n                            \n                                    Public\n                                invert\n                            \n                            \n                                    Public\n                                isContinuous\n                            \n                            \n                                    Public\n                                isDomainValid\n                            \n                            \n                                    Public\n                                    Abstract\n                                convert\n                            \n                            \n                                    Public\n                                domain\n                            \n                            \n                                    Public\n                                domain\n                            \n                            \n                                    Public\n                                domain\n                            \n                            \n                                    Public\n                                fixDomain\n                            \n                            \n                                    Public\n                                    Abstract\n                                invert\n                            \n                            \n                                    Public\n                                    Abstract\n                                isContinuous\n                            \n                            \n                                    Public\n                                isDomainValid\n                            \n                            \n                                    Public\n                                range\n                            \n                            \n                                    Public\n                                range\n                            \n                            \n                                    Public\n                                range\n                            \n                            \n                                    Public\n                                reverse\n                            \n                            \n                                    Public\n                                reversed\n                            \n                            \n                                    Public\n                                reversed\n                            \n                            \n                                    Public\n                                reversed\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/common/scales/time-scale.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            domainCalculator\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         DomainCalculator\n\n                        \n                    \n                    \n                        \n                            Default value : getAutomaticDomain\n                        \n                    \n                            \n                                \n                                    Inherited from         Scale\n\n                                \n                            \n                        \n                            \n                                    Defined in         Scale:11\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            formatters\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IFormatters\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         Scale\n\n                                \n                            \n                        \n                            \n                                    Defined in         Scale:12\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Scale\n\n                                \n                            \n                        \n                            \n                                    Defined in         Scale:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            isDomainFixed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Scale\n\n                                \n                            \n                        \n                            \n                                    Defined in         Scale:13\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            convert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    convert(value: Date)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/time-scale.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                Date\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            invert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    invert(coordinate: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/time-scale.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    coordinate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Date | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isContinuous\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isContinuous()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/time-scale.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isDomainValid\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isDomainValid()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/time-scale.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            convert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    convert(value: T)\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:31\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    domain()\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:55\n\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                    \n                        Returns :     T[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    domain(domain: T[])\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:56\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    domain(domain?: T[])\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:57\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            fixDomain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fixDomain(domain: T[])\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:67\n\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            invert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    invert(coordinate: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:33\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    coordinate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            isContinuous\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isContinuous()\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:35\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isDomainValid\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isDomainValid()\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:74\n\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            range\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    range()\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:43\n\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            range\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    range(range: [number, number])\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:44\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                            [number, number]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            range\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    range(range?: [number, number])\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:45\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                            [number, number]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reverse\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reverse()\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:78\n\n                \n            \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reversed()\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:83\n\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reversed(reversed: boolean)\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:84\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reversed\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reversed(reversed?: boolean)\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:85\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reversed\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | \n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { AxisScale } from \"d3-axis\";\nimport { scaleTime } from \"d3-scale\";\n\nimport { datetimeFormatter } from \"./formatters/datetime-formatter\";\nimport { Scale } from \"./scale\";\n\n/**\n * Nova wrapper around [D3's scaleTime](https://d3indepth.com/scales/#scaletime)\n */\nexport class TimeScale extends Scale {\n\n    constructor(id?: string) {\n        super(id);\n\n        this.formatters.tick = datetimeFormatter;\n    }\n\n    protected createD3Scale(): AxisScale {\n        return scaleTime();\n    }\n\n    public convert(value: Date): number {\n        return this._d3Scale(value);\n    }\n\n    public invert(coordinate: number): Date | undefined {\n        const date = this._d3Scale.invert(coordinate);\n        const result: Date | undefined = isNaN(date.getTime()) ? undefined : date;\n        return result;\n    }\n\n    public isContinuous(): boolean {\n        return true;\n    }\n\n    public isDomainValid(): boolean {\n        return -1 === this.domain().findIndex((value) => isNaN(value.getTime()));\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UtilityService.html":{"url":"classes/UtilityService.html","title":"class - UtilityService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UtilityService\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/utility.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                clampToRange\n                            \n                            \n                                    Static\n                                cssEscape\n                            \n                            \n                                    Static\n                                findNearestIndex\n                            \n                            \n                                    Static\n                                getClosestIndex\n                            \n                            \n                                    Static\n                                getScaleValues\n                            \n                            \n                                    Static\n                                getXYValues\n                            \n                            \n                                    Static\n                                uuid\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            clampToRange\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clampToRange(value: number, range: [number, number])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/utility.service.ts:63\n                \n            \n\n\n            \n                \n                    Clamps given value to range\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    range\n                                    \n                                            [number, number]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            cssEscape\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    cssEscape(value: any)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/utility.service.ts:92\n                \n            \n\n\n            \n                \n                    CSS.escape() replacement\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            findNearestIndex\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findNearestIndex(haystack: T[], needle: any, selector: (d: T,index: number) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/utility.service.ts:179\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    This method performs a binary search to find an index in the haystack that is the closest representation of given needle.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    haystack\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                    \n                                \n                                \n                                    needle\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                    \n                                \n                                \n                                    selector\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        identity\n                                    \n\n                                    \n                                        this function is used to process the haystack elements\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getClosestIndex\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getClosestIndex(haystack: T[], accessor: (d: T,i: number) => void, needle: any)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/utility.service.ts:24\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    haystack\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    accessor\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    needle\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     number | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getScaleValues\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getScaleValues(scales: IScale[], coordinate: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/utility.service.ts:224\n                \n            \n\n\n            \n                \n                    Gets the scale value based on the specified scales and raw coordinate\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scales\n                                    \n                                                IScale[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    coordinate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Record\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getXYValues\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getXYValues(xScales: IScale[], yScales: IScale[], xCoordinate: number, yCoordinate: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/utility.service.ts:204\n                \n            \n\n\n            \n                \n                    Gets the 'x' and 'y' scale values based on the specified scales and raw x-y coordinates\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    xScales\n                                    \n                                                IScale[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    yScales\n                                    \n                                                IScale[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    xCoordinate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    yCoordinate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            uuid\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    uuid()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/utility.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import identity from \"lodash/identity\";\nimport isEmpty from \"lodash/isEmpty\";\nimport isUndefined from \"lodash/isUndefined\";\n\nimport { IInteractionValues } from \"../plugins/types\";\n\nimport { invert } from \"./scales/helpers/invert\";\nimport { IScale } from \"./scales/types\";\n\nexport class UtilityService {\n\n    private static getValueAccessor(accessor: (d: any, i: number) => any, dataPoint: any) {\n        const value = accessor(dataPoint, 0);\n        if (typeof value === \"number\" || typeof value === \"string\") {\n            return accessor;\n        }\n        if (value.valueOf && typeof value.valueOf() === \"number\") {\n            return (d: any, i: number) => accessor(d, i).valueOf();\n        }\n\n        throw new Error(\"Value in the data series does not return numeric valueOf().\");\n    }\n\n    public static getClosestIndex(haystack: T[], accessor: (d: T, i: number) => any, needle: any): number | undefined {\n        if (haystack.length === 1) {\n            return 0;\n        } else if (haystack.length === 0) {\n            return;\n        }\n\n        const valueAccessor = UtilityService.getValueAccessor(accessor, haystack[0]);\n        if (typeof needle === \"string\") {\n            return haystack.findIndex(straw => valueAccessor(straw, 0) === needle);\n        }\n\n        let closestDataIndex = this.findNearestIndex(haystack, needle, accessor);\n\n        // Compensate for bisect\n        closestDataIndex = (closestDataIndex > 0) ? closestDataIndex - 1 : closestDataIndex;\n        // Ensure inbounds reference if right end of data\n        closestDataIndex = (closestDataIndex >= haystack.length - 1 && haystack.length !== 1)\n            ? haystack.length - 2\n            : closestDataIndex;\n        const indexIncrement = UtilityService.getCloser(\n            valueAccessor(haystack[closestDataIndex], closestDataIndex),\n            valueAccessor(haystack[closestDataIndex + 1], closestDataIndex + 1),\n            needle);\n\n        return closestDataIndex + indexIncrement;\n    }\n\n    private static getCloser(a: number, b: number, test: number): number {\n        return (Math.abs(test - a)  range[1]) {\n            return range[1];\n        }\n\n        return value;\n    }\n\n    public static uuid() {\n        let dt = new Date().getTime();\n        const uuid = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\n            // eslint-disable-next-line\n            const r = (dt + Math.random() * 16) % 16 | 0;\n            dt = Math.floor(dt / 16);\n            // eslint-disable-next-line\n            return (c === \"x\" ? r : (r & 0x3 | 0x8)).toString(16);\n        });\n        return uuid;\n    }\n\n    /**\n     *  CSS.escape() replacement\n     * @param value\n     * @returns {string}\n     */\n    public static cssEscape(value: any): string {\n        // TODO: remove when Edge supports CSS.escape\n        // Courtesy of Mathias Bynens: https://github.com/mathiasbynens/CSS.escape.git\n        if (arguments.length === 0) {\n            throw new TypeError(\"`cssEscape` requires an argument.\");\n        }\n        const sstring = String(value);\n        const length = sstring.length;\n        let index = -1;\n        let codeUnit;\n        let result = \"\";\n        const firstCodeUnit = sstring.charCodeAt(0);\n        while (++index = 0x0001 && codeUnit = 0x0030 && codeUnit = 0x0030 && codeUnit = 0x0080 ||\n                codeUnit === 0x002D ||\n                codeUnit === 0x005F ||\n                codeUnit >= 0x0030 && codeUnit = 0x0041 && codeUnit = 0x0061 && codeUnit (haystack: T[], needle: any, selector: (d: T, index: number) => any = identity) {\n        let low = 0, high = haystack == null ? low : haystack.length;\n\n        while (low >> 1, computed = selector(haystack[mid], mid);\n\n            if (computed !== null && (computed [], yScales: IScale[], xCoordinate: number, yCoordinate: number) {\n        const xValue = UtilityService.getScaleValues(xScales, xCoordinate);\n        const yValue = UtilityService.getScaleValues(yScales, yCoordinate);\n\n        const values: IInteractionValues = {};\n        if (!isEmpty(xValue)) {\n            values.x = xValue;\n        }\n        if (!isEmpty(yValue)) {\n            values.y = yValue;\n        }\n        return values;\n    }\n\n    /**\n     * Gets the scale value based on the specified scales and raw coordinate\n     *\n     * @param scales\n     * @param coordinate\n     */\n    public static getScaleValues(scales: IScale[], coordinate: number): Record {\n        function callbackFn(result: Record, next: IScale) {\n            const inverted = invert(next, coordinate);\n            if (isUndefined(inverted)) {\n                return result;\n            }\n\n            result[next.id] = inverted;\n            return result;\n        }\n        return scales.reduce(callbackFn, {});\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VerticalBarAccessors.html":{"url":"classes/VerticalBarAccessors.html","title":"class - VerticalBarAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VerticalBarAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/bar/accessors/vertical-bar-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        BarAccessors\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                series\n                            \n                            \n                                data\n                            \n                            \n                                series\n                            \n                            \n                                data\n                            \n                            \n                                series\n                            \n                            \n                                data\n                            \n                            \n                                series\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(colorProvider?: IValueProvider, markerProvider?: IValueProvider)\n                    \n                \n                        \n                            \n                                Defined in src/renderers/bar/accessors/vertical-bar-accessors.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        colorProvider\n                                                  \n                                                        \n                                                                        IValueProvider\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        markerProvider\n                                                  \n                                                        \n                                                                        IValueProvider\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IBarDataAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/bar/accessors/vertical-bar-accessors.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleSeriesAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/bar/accessors/vertical-bar-accessors.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IBarDataAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BarAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         BarAccessors:22\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleSeriesAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BarAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         BarAccessors:23\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleDataAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BarAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         BarAccessors:34\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleSeriesAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BarAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         BarAccessors:35\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleDataAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         RectangleAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         RectangleAccessors:34\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleSeriesAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         RectangleAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         RectangleAccessors:35\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IChartMarker, IValueProvider } from \"../../../core/common/types\";\nimport { IRectangleSeriesAccessors } from \"../../accessors/rectangle-accessors\";\n\nimport { BarAccessors, IBarDataAccessors } from \"./bar-accessors\";\n\nexport class VerticalBarAccessors extends BarAccessors {\n    data: IBarDataAccessors;\n    series: IRectangleSeriesAccessors;\n\n    constructor(colorProvider?: IValueProvider, markerProvider?: IValueProvider) {\n        super(colorProvider, markerProvider);\n\n        this.data = {\n            ...this.data,\n            startX: (d, i, s, ds) => this.data.category(d, i, s, ds),\n            endX: (d, i, s, ds) => this.data.category(d, i, s, ds),\n            thicknessX: (d, i, s, ds) => this.data.thickness ? this.data.thickness(d, i, s, ds) : undefined,\n            startY: (d, i, s, ds) => this.data.start(d, i, s, ds),\n            endY: (d, i, s, ds) => this.data.end(d, i, s, ds),\n        };\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/XYAccessors.html":{"url":"classes/XYAccessors.html","title":"class - XYAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  XYAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/accessors/xy-accessors.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IAccessors\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                data\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IXYDataAccessors\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        x: (d: any) => d.x,\n        y: (d: any) => d.y,\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/accessors/xy-accessors.ts:14\n                            \n                        \n\n                \n                    \n                        The default data accessors for using with renderers deriving from XYRenderer \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { DataAccessor, IAccessors } from \"../../core/common/types\";\n\nexport interface IXYDataAccessors {\n    /** Accessor for value plotted on the x coordinate */\n    x: DataAccessor;\n    /** Accessor for value plotted on the y coordinate */\n    y: DataAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: DataAccessor | undefined;\n}\n\nexport abstract class XYAccessors implements IAccessors {\n    /** The default data accessors for using with renderers deriving from XYRenderer */\n    public data: IXYDataAccessors = {\n        x: (d: any) => d.x,\n        y: (d: any) => d.y,\n    };\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/XYGridConfig.html":{"url":"classes/XYGridConfig.html","title":"class - XYGridConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  XYGridConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/config/xy-grid-config.ts\n        \n\n\n            \n                Extends\n            \n            \n                        GridConfig\n            \n\n            \n                Implements\n            \n            \n                            IXYGridConfig\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                axis\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_MARGIN\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_PADDING\n                            \n                            \n                                    Public\n                                interactionPlugins\n                            \n                            \n                                    Public\n                                borders\n                            \n                            \n                                    Public\n                                cursor\n                            \n                            \n                                    Public\n                                dimension\n                            \n                            \n                                    Public\n                                interactive\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/core/grid/config/xy-grid-config.ts:32\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            axis\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: new AxisConfig(),\n        right: new AxisConfig(),\n        bottom: new AxisConfig(),\n        left: new AxisConfig(),\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/xy-grid-config.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_MARGIN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: 0,\n        right: 5,\n        bottom: 20,\n        left: 30,\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/xy-grid-config.ts:9\n                            \n                        \n\n                \n                    \n                        The default margin \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_PADDING\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        left: 0,\n        right: 0,\n        top: 5,\n        bottom: 5,\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/xy-grid-config.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interactionPlugins\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/xy-grid-config.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            borders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        // TODO: Review this\n        // @ts-ignore\n        top: undefined,\n        // @ts-ignore\n        bottom: undefined,\n        // @ts-ignore\n        left: undefined,\n        // @ts-ignore\n        right: undefined,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:16\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            cursor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"crosshair\"\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:28\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dimension\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IDimensionConfig\n\n                        \n                    \n                    \n                        \n                            Default value : new DimensionConfig()\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:14\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interactive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:11\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {IAllAround, IAxisConfig, IXYGridConfig} from \"../types\";\n\nimport { AxisConfig } from \"./axis-config\";\nimport { BorderConfig } from \"./border-config\";\nimport { GridConfig } from \"./grid-config\";\n\nexport class XYGridConfig extends GridConfig implements IXYGridConfig {\n    /** The default margin */\n    public static readonly DEFAULT_MARGIN: IAllAround = {\n        top: 0,\n        right: 5,\n        bottom: 20,\n        left: 30,\n    };\n\n    public static readonly DEFAULT_PADDING: IAllAround = {\n        left: 0,\n        right: 0,\n        top: 5,\n        bottom: 5,\n    };\n\n    public axis: IAllAround = {\n        top: new AxisConfig(),\n        right: new AxisConfig(),\n        bottom: new AxisConfig(),\n        left: new AxisConfig(),\n    };\n\n    // We should avoid this kind of option in future versions of XYGrid and XYGridConfig\n    // because ideally all plugins should be added manually (NUI-3304).\n    public interactionPlugins = true;\n\n    constructor() {\n        super();\n\n        this.dimension.padding = Object.assign({}, XYGridConfig.DEFAULT_PADDING);\n        this.dimension.margin = Object.assign({}, XYGridConfig.DEFAULT_MARGIN);\n\n        this.borders.bottom = new BorderConfig(\"nui-chart-border nui-chart-border--thick\");\n        this.borders.left = new BorderConfig(\"nui-chart-border nui-chart-border--thick\");\n        this.borders.left.visible = false; // TODO: figure out if this is the valid default\n\n        this.axis.left.gridTicks = true;\n        this.axis.left.tickSize = 0;\n        this.axis.left.padding = 10;\n\n        this.axis.right.fit = true;\n        this.axis.right.tickSize = 0;\n        this.axis.right.padding = 10;\n\n        this.axis.bottom.tickLabel.horizontalPadding = 5;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/XYRenderer.html":{"url":"classes/XYRenderer.html","title":"class - XYRenderer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  XYRenderer\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/xy-renderer.ts\n        \n\n\n            \n                Extends\n            \n            \n                        Renderer\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                config\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_CONFIG\n                            \n                            \n                                    Public\n                                getContainerStateStyles\n                            \n                            \n                                    Public\n                                interaction\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getDataPointPosition\n                            \n                            \n                                    Public\n                                    Abstract\n                                draw\n                            \n                            \n                                    Public\n                                filterDataByDomain\n                            \n                            \n                                    Public\n                                getDataPointIndex\n                            \n                            \n                                    Public\n                                    Abstract\n                                getDataPointPosition\n                            \n                            \n                                    Public\n                                getDomain\n                            \n                            \n                                    Public\n                                getDomainOfFilteredData\n                            \n                            \n                                    Public\n                                getRequiredLayers\n                            \n                            \n                                    Public\n                                highlightDataPoint\n                            \n                            \n                                    Public\n                                setDataPointState\n                            \n                            \n                                    Public\n                                setSeriesState\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRendererConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:40\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_CONFIG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRendererConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        stateStyles: {\n            [RenderState.default]: {\n                opacity: 1,\n            },\n            [RenderState.hidden]: {\n                opacity: 0,\n            },\n            [RenderState.deemphasized]: {\n                opacity: 0.1,\n            },\n            [RenderState.emphasized]: {\n                opacity: 1,\n            },\n        },\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:23\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getContainerStateStyles\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:95\n\n                            \n                        \n\n                \n                    \n                        Get the style attributes for the specified state that we need to apply to a series container\n\n                    \n                \n\n                    \n                        \n                          \n                                  Parameters :\n                                  \n                                      \n                                          \n                                                Name\n                                                    Description\n                                          \n                                      \n                                      \n                                                \n                                                        state\n                                                        \n                                                                the state for which to retrieve container styles\n\n                                                        \n                                                \n                                      \n                                  \n                          \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interaction\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Record\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:45\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDataPointPosition\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointPosition(dataSeries: IDataSeries, index: number, scales: Scales)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/xy-renderer.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IPosition | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            draw\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    draw(renderSeries: IRenderSeries, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:53\n\n                \n            \n\n\n            \n                \n                    Draw the visual representation of the provided data series\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The series to render\n\n                                    \n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A subject to optionally invoke for emitting events regarding a data point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            filterDataByDomain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    filterDataByDomain(data: any[], dataSeries: IDataSeries, scaleName: string, domain: any[])\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:170\n\n                \n            \n\n\n            \n                \n                    Filters given dataset by domain of provided scale\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scaleName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    domain\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDataPointIndex\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointIndex(series: IDataSeries, values: literal type, scales: Scales)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:74\n\n                \n            \n\n\n            \n                \n                    Based on provided values, return the nearest data point that the given coordinates represent. This is used for mouse hover behavior\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    series\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        series from which to determine the index corresponding to the specified values\n\n                                    \n                                \n                                \n                                    values\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the values from which a data point index can be determined\n\n                                    \n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the scales to be used in the index calculation\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        negative value means that index is not found\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            getDataPointPosition\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointPosition(dataSeries: IDataSeries, index: number, scales: Scales)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:63\n\n                \n            \n\n\n            \n                \n                    Return position of a specified datapoint\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IPosition | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDomain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDomain(data: any[], dataSeries: IDataSeries, scaleName: string, scale: IScale)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:153\n\n                \n            \n\n\n            \n                \n                    Calculate the domain using the data of a series\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        source data, can be filtered\n\n                                    \n                                \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        related data series\n\n                                    \n                                \n                                \n                                    scaleName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the scale for which domain calculation is needed\n\n                                    \n                                \n                                \n                                    scale\n                                    \n                                                IScale\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        min and max values as an array\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDomainOfFilteredData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDomainOfFilteredData(dataSeries: IDataSeries, filterScales: Record>, scaleKey: string, scale: IScale)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:129\n\n                \n            \n\n\n            \n                \n                    Calculate domain for data filtered by given filterScales\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filterScales\n                                    \n                                                Record>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scaleKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scale\n                                    \n                                                IScale\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        array of datapoints from dataSeries filtered by domains of given filterScales\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getRequiredLayers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRequiredLayers()\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:190\n\n                \n            \n\n\n            \n                \n                    Get the definitions of lasagna layers required for visualizing data\n\n\n                    \n                    \n                    \n                        Returns :     ILasagnaLayer[]\n\n                    \n                    \n                        lasagna layer definitions\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            highlightDataPoint\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    highlightDataPoint(renderSeries: IRenderSeries, dataPointIndex: number, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:85\n\n                \n            \n\n\n            \n                \n                    Highlight the data point corresponding to the specified data point index\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The series on which to render the data point highlight\n\n                                    \n                                \n                                \n                                    dataPointIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        index of the highlighted point within the data series (pass -1 to remove the highlight marker)\n\n                                    \n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A subject to optionally invoke for emitting events regarding a data point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setDataPointState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setDataPointState(target: D3Selection, state: RenderState)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:117\n\n                \n            \n\n\n            \n                \n                    Set the RenderState of the target data point\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                                D3Selection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the target data point\n\n                                    \n                                \n                                \n                                    state\n                                    \n                                                RenderState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new state for the target data point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setSeriesState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setSeriesState(renderContainers: IRenderContainers, state: RenderState)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:108\n\n                \n            \n\n\n            \n                \n                    Set the RenderState of the target data series\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderContainers\n                                    \n                                                IRenderContainers\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the render containers of the series\n\n                                    \n                                \n                                \n                                    state\n                                    \n                                                RenderState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new state for the target series\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Renderer } from \"../core/common/renderer\";\nimport { Scales } from \"../core/common/scales/types\";\nimport { IAccessors, IDataSeries, IPosition } from \"../core/common/types\";\n\nexport abstract class XYRenderer extends Renderer {\n\n    public getDataPointPosition(dataSeries: IDataSeries, index: number, scales: Scales): IPosition | undefined {\n        if (index = dataSeries.data.length) {\n            return undefined;\n        }\n        const point = dataSeries.data[index];\n\n        if (!dataSeries.accessors.data?.x || !dataSeries.accessors.data?.y) {\n            throw new Error(\"Can't get dataPointPosition\");\n        }\n        return {\n            x: scales.x.convert(dataSeries.accessors.data.x(point, index, dataSeries.data, dataSeries)),\n            y: scales.y.convert(dataSeries.accessors.data.y(point, index, dataSeries.data, dataSeries)),\n        };\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ZoneCross.html":{"url":"interfaces/ZoneCross.html","title":"interface - ZoneCross","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ZoneCross\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/thresholds/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        end\n                                \n                                \n                                            Optional\n                                        start\n                                \n                                \n                                        status\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        end\n                                    \n                                \n                                \n                                    \n                                        end:     Numeric\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Numeric\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        start\n                                    \n                                \n                                \n                                    \n                                        start:     Numeric\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Numeric\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                    \n                                \n                                \n                                    \n                                        status:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Numeric } from \"d3-array\";\n\n/**\n * Used for simplified threshold zone definition. It is expected the start to be &lt; end.\n */\nexport interface ISimpleThresholdZone {\n    status: string;\n    start?: number;\n    end?: number;\n}\n\nexport interface ZoneCross {\n    status: string;\n    start?: Numeric;\n    end?: Numeric;\n}\n\n/**\n * Used for specifying the start or end boundary of a zone\n */\nexport enum ZoneBoundary {\n    Start = \"start\",\n    End = \"end\",\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ZoomPlugin.html":{"url":"classes/ZoomPlugin.html","title":"class - ZoomPlugin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ZoomPlugin\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/zoom-plugin.ts\n        \n\n\n            \n                Extends\n            \n            \n                        ChartPlugin\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                config\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_CONFIG\n                            \n                            \n                                    Static\n                                LAYER_NAME\n                            \n                            \n                                    Public\n                                chart\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: IZoomPluginConfiguration)\n                    \n                \n                        \n                            \n                                Defined in src/core/plugins/zoom-plugin.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        IZoomPluginConfiguration\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IZoomPluginConfiguration\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/zoom-plugin.ts:41\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_CONFIG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IZoomPluginConfiguration\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        enableExternalEvents: false,\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/zoom-plugin.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            LAYER_NAME\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"zoom-brush\"\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/zoom-plugin.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IChart\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPlugin:7\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/zoom-plugin.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/zoom-plugin.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/zoom-plugin.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:15\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:9\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { BrushBehavior, BrushSelection, brushX } from \"d3-brush\";\nimport { event } from \"d3-selection\";\nimport defaultsDeep from \"lodash/defaultsDeep\";\nimport isEmpty from \"lodash/isEmpty\";\nimport isUndefined from \"lodash/isUndefined\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\nimport { INTERACTION_COORDINATES_EVENT, INTERACTION_VALUES_ACTIVE_EVENT, SET_DOMAIN_EVENT, STANDARD_RENDER_LAYERS } from \"../../constants\";\nimport { RenderLayerName } from \"../../renderers/types\";\nimport { ChartPlugin } from \"../common/chart-plugin\";\nimport { IScale } from \"../common/scales/types\";\nimport { D3Selection, IChartEvent, InteractionType, ISetDomainEventPayload } from \"../common/types\";\nimport { Grid } from \"../grid/grid\";\nimport { XYGrid } from \"../grid/xy-grid\";\n\nimport { IInteractionCoordinatesPayload } from \"./types\";\n\nexport interface IZoomPluginConfiguration {\n    enableExternalEvents?: boolean;\n}\n\nexport class ZoomPlugin extends ChartPlugin {\n    // *Note:* This plugin manually moves the d3 brush across the screen to accommodate a known Firefox\n    // bug in which mouse events report an incorrect pointer position for svg children of an element\n    // transformed by a translate function: https://github.com/d3/d3-selection/issues/81\n\n    public static LAYER_NAME = \"zoom-brush\";\n    public static readonly DEFAULT_CONFIG: IZoomPluginConfiguration = {\n        enableExternalEvents: false,\n    };\n\n    private grid: XYGrid;\n    private brush: BrushBehavior;\n    private zoomBrushLayer: D3Selection;\n    private brushElement: D3Selection;\n    private destroy$ = new Subject();\n    private brushStartX: number | undefined;\n    private interactionHandlerMap: Record;\n\n    constructor(public config: IZoomPluginConfiguration = {}) {\n        super();\n        this.config = defaultsDeep(this.config, ZoomPlugin.DEFAULT_CONFIG);\n        this.interactionHandlerMap = {\n            [InteractionType.MouseDown]: this.brushStart,\n            [InteractionType.MouseMove]: this.brushMove,\n            [InteractionType.MouseUp]: this.brushEnd,\n        };\n    }\n\n    public initialize(): void {\n        this.grid = this.chart.getGrid() as XYGrid;\n        this.zoomBrushLayer = this.grid.getLasagna().addLayer({\n            name: ZoomPlugin.LAYER_NAME,\n            // add 1 to the foreground layer's order to ensure the brush is rendered in front of it\n            order: STANDARD_RENDER_LAYERS[RenderLayerName.foreground].order + 1,\n            clipped: true,\n        });\n\n        this.chart.getEventBus().getStream(INTERACTION_COORDINATES_EVENT)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((chartEvent: IChartEvent) => {\n                if (chartEvent.broadcast && !this.config.enableExternalEvents) {\n                    return;\n                }\n\n                const data: IInteractionCoordinatesPayload = chartEvent.data;\n                if (isEmpty(this.grid.scales) || isEmpty(data.coordinates)) {\n                    return;\n                }\n\n                if (this.interactionHandlerMap[data.interactionType]) {\n                    const xCoord = data.coordinates && data.coordinates.x;\n                    this.interactionHandlerMap[data.interactionType](xCoord);\n                }\n            });\n\n        this.brush = brushX();\n        this.brushElement = this.zoomBrushLayer.append(\"g\")\n            .attr(\"class\", \"brush\");\n\n        // engage pointer capture to confine mouse events to the interactive area\n        // (in other words, if the 'mouseup' is physically triggered outside the interactive area,\n        // the pointer capture allows us to still zoom based on that event)\n        this.chart.getGrid().getInteractiveArea()\n            .on(\"pointerdown\", () => event.target.setPointerCapture(event.pointerId))\n            .on(\"pointerup\", () => event.target.releasePointerCapture(event.pointerId));\n    }\n\n    public updateDimensions(): void {\n        const dimension = this.grid.config().dimension;\n\n        // set the brush area's dimensions\n        this.brush.extent([[0, 0], [dimension.width(), dimension.height()]]);\n\n        // render the brush area after we have dimensions\n        this.brush(this.zoomBrushLayer.select(\".brush\"));\n\n        // prevent the brush from handling its own pointer events\n        this.brushElement.select(\".overlay\")\n            .style(\"pointer-events\", \"none\");\n\n        // remove stroke per mockups\n        this.brushElement.select(\".selection\")\n            .attr(\"stroke\", null);\n    }\n\n    public destroy(): void {\n        this.grid.getLasagna().removeLayer(ZoomPlugin.LAYER_NAME);\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n\n    private brushStart = (xCoord: number) => {\n        if (!isUndefined(this.brushStartX)) {\n            return;\n        }\n\n        this.chart.getEventBus().getStream(INTERACTION_VALUES_ACTIVE_EVENT).next({ data: false });\n        this.brushStartX = xCoord;\n    }\n\n    private brushMove = (xCoord: number) => {\n        if (isUndefined(this.brushStartX)) {\n            return;\n        }\n\n        const selection = [this.brushStartX, xCoord].sort((a, b) => a - b);\n        this.brush.move(this.brushElement, selection as BrushSelection);\n    }\n\n    private brushEnd = (xCoord: number) => {\n        if (isUndefined(this.brushStartX)) {\n            return;\n        }\n\n        const selection = [this.brushStartX, xCoord].sort((a, b) => a - b);\n        this.brushStartX = undefined;\n        this.chart.getEventBus().getStream(INTERACTION_VALUES_ACTIVE_EVENT).next({ data: true });\n\n        // remove the brush\n        this.brush.move(this.brushElement, null);\n\n        const xScales = this.grid.scales.x.list;\n        if (!xScales || selection[0] === selection[1]) {\n            return;\n        }\n\n        // Width correction to accommodate similar adjustment in grid. This ensures\n        // that the right-most column of pixels on the chart is selectable.\n        const widthCorrection = selection[1] === this.grid.config().dimension.width() - Grid.RENDER_AREA_WIDTH_CORRECTION ?\n            Grid.RENDER_AREA_WIDTH_CORRECTION : 0;\n        const data: ISetDomainEventPayload = xScales.reduce((result, next: IScale) => {\n            result[next.id] = [selection[0], selection[1] as number + widthCorrection].map(x => next.invert(x as number));\n            return result;\n        }, {});\n\n        // zoom the chart\n        this.chart.getEventBus().getStream(SET_DOMAIN_EVENT).next({ data });\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            resize-observer-polyfill : ^1.5.0\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @nova-ui/bits : ~11.3.0-0\n        \n            @types/d3 : ^5.0.0\n        \n            @types/d3-selection-multi : ^1.0.0\n        \n            d3 : ^5.0.0\n        \n            d3-color : 1.3.0\n        \n            d3-selection-multi : ^1.0.0\n        \n            d3-time-format : 2.1.3\n    \n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ChartAssistEventType   (src/.../types.ts)\n                        \n                        \n                            CssFilterId   (src/.../types.ts)\n                        \n                        \n                            InteractionType   (src/.../types.ts)\n                        \n                        \n                            LegendOrientation   (src/.../types.ts)\n                        \n                        \n                            RenderLayerName   (src/.../types.ts)\n                        \n                        \n                            RenderState   (src/.../types.ts)\n                        \n                        \n                            ZoneBoundary   (src/.../types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/chart-assists/types.ts\n    \n        \n            \n                \n                    \n                        \n                        ChartAssistEventType\n                    \n                \n                    \n                        \n                            Event types that can be emitted from a chart assist \n\n                        \n                    \n                        \n                            \n                                 ToggleSeries\n                            \n                        \n                        \n                            \n                                Value : ToggleSeries\n                            \n                        \n                        \n                            \n                                 ResetVisibleSeries\n                            \n                        \n                        \n                            \n                                Value : ResetVisibleSeries\n                            \n                        \n                        \n                            \n                                 EmphasizeSeries\n                            \n                        \n                        \n                            \n                                Value : EmphasizeSeries\n                            \n                        \n            \n        \n\n    src/core/types.ts\n    \n        \n            \n                \n                    \n                        \n                        CssFilterId\n                    \n                \n                    \n                        \n                            Common CSS filter IDs \n\n                        \n                    \n                        \n                            \n                                 Grayscale\n                            \n                        \n                        \n                            \n                                Value : grayscale\n                            \n                        \n            \n        \n\n    src/core/common/types.ts\n    \n        \n            \n                \n                    \n                        \n                        InteractionType\n                    \n                \n                    \n                        \n                            Mouse interaction types \n\n                        \n                    \n                        \n                            \n                                 Click\n                            \n                        \n                        \n                            \n                                Value : click\n                            \n                        \n                        \n                            \n                                 Hover\n                            \n                        \n                        \n                            \n                                Value : hover\n                            \n                        \n                        \n                            \n                                 MouseDown\n                            \n                        \n                        \n                            \n                                Value : mousedown\n                            \n                        \n                        \n                            \n                                 MouseEnter\n                            \n                        \n                        \n                            \n                                Value : mouseenter\n                            \n                        \n                        \n                            \n                                 MouseLeave\n                            \n                        \n                        \n                            \n                                Value : mouseleave\n                            \n                        \n                        \n                            \n                                 MouseMove\n                            \n                        \n                        \n                            \n                                Value : mousemove\n                            \n                        \n                        \n                            \n                                 MouseUp\n                            \n                        \n                        \n                            \n                                Value : mouseup\n                            \n                        \n            \n        \n\n    src/legend/types.ts\n    \n        \n            \n                \n                    \n                        \n                        LegendOrientation\n                    \n                \n                        \n                            \n                                 vertical\n                            \n                        \n                        \n                            \n                                Value : vertical\n                            \n                        \n                        \n                            \n                                 horizontal\n                            \n                        \n                        \n                            \n                                Value : horizontal\n                            \n                        \n            \n        \n\n    src/renderers/types.ts\n    \n        \n            \n                \n                    \n                        \n                        RenderLayerName\n                    \n                \n                        \n                            \n                                 background\n                            \n                        \n                        \n                            \n                                Value : background\n                            \n                        \n                        \n                            \n                                 data\n                            \n                        \n                        \n                            \n                                Value : data\n                            \n                        \n                        \n                            \n                                 unclippedData\n                            \n                        \n                        \n                            \n                                Value : unclipped-data\n                            \n                        \n                        \n                            \n                                 foreground\n                            \n                        \n                        \n                            \n                                Value : foreground\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        RenderState\n                    \n                \n                        \n                            \n                                 hidden\n                            \n                        \n                        \n                            \n                                Value : hidden\n                            \n                        \n                        \n                            \n                                 deemphasized\n                            \n                        \n                        \n                            \n                                Value : deemphasized\n                            \n                        \n                        \n                            \n                                 emphasized\n                            \n                        \n                        \n                            \n                                Value : emphasized\n                            \n                        \n                        \n                            \n                                 default\n                            \n                        \n                        \n                            \n                                Value : default\n                            \n                        \n            \n        \n\n    src/thresholds/types.ts\n    \n        \n            \n                \n                    \n                        \n                        ZoneBoundary\n                    \n                \n                    \n                        \n                            Used for specifying the start or end boundary of a zone\n\n                        \n                    \n                        \n                            \n                                 Start\n                            \n                        \n                        \n                            \n                                Value : start\n                            \n                        \n                        \n                            \n                                 End\n                            \n                        \n                        \n                            \n                                Value : end\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nCharts Overview\nNova Charts is a library created to provide potential consumers with solutions for various data visualizations that conform with the Nova Design Language. It's designed to solve common patterns identified by UX designers, but also be very flexible so that pieces of visualizations can be overridden or entirely new visualizations can be customized quickly. As with anything, the more customizations you wish to have, the more work and maintenance you will absorb within your own app's code.\nGetting Started\nGetting started with charts is quite simple:\n\nInclude charts in your package.json file\n \"devDependencies\": {\n     ...\n     \"@nova-ui/charts\": >>last release version\n\n\nAdd a reference to charts styles in your angular.json file. Without this step, the charts will render, but will look and act in unpredictable ways.\n \"projects\": {\n     \"your-project\": {\n         ...\n         \"architect\": {\n             ...\n             \"styles\": [\n                 \"src/styles.less\",\n                 \"./node_modules/@nova-ui/bits/bundles/css/styles.css\",\n                 \"./node_modules/@nova-ui/charts/bundles/css/styles.css\"\n              ],\n\n\nImport NuiChartsModule\n import { NuiChartsModule } from \"@nova-ui/charts\";\n\n @NgModule({\n     declarations: [ ... ],\n     imports: [ NuiChartsModule ],\n     exports: [ ... ],\n     providers: [ ... ]\n })\nCopy/Paste any of our examples (see TOC below) to create your own component, add it to your view and then play around with the options.\n\n\nTOC\n\nLayout\nChart Types\nLine\nBar\nBucketed Bar\nStatus\nWaterfall\n\n\nPie and Donut\nSpark\n\n\nPlugins\nTooltips\nPopovers\n\n\nThresholds\nTimeframe Selection\nAdvanced Usage\nChart\nLegend\nInput Structure\nData\nColors\nMarkers\n\n\nEvents\nGrid\nScales\nDomains\nFormatters\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\n                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\nDefinitions.\n\"License\" shall mean the terms and conditions for use, reproduction,\nand distribution as defined by Sections 1 through 9 of this document.\n\"Licensor\" shall mean the copyright owner or entity authorized by\nthe copyright owner that is granting the License.\n\"Legal Entity\" shall mean the union of the acting entity and all\nother entities that control, are controlled by, or are under common\ncontrol with that entity. For the purposes of this definition,\n\"control\" means (i) the power, direct or indirect, to cause the\ndirection or management of such entity, whether by contract or\notherwise, or (ii) ownership of fifty percent (50%) or more of the\noutstanding shares, or (iii) beneficial ownership of such entity.\n\"You\" (or \"Your\") shall mean an individual or Legal Entity\nexercising permissions granted by this License.\n\"Source\" form shall mean the preferred form for making modifications,\nincluding but not limited to software source code, documentation\nsource, and configuration files.\n\"Object\" form shall mean any form resulting from mechanical\ntransformation or translation of a Source form, including but\nnot limited to compiled object code, generated documentation,\nand conversions to other media types.\n\"Work\" shall mean the work of authorship, whether in Source or\nObject form, made available under the License, as indicated by a\ncopyright notice that is included in or attached to the work\n(an example is provided in the Appendix below).\n\"Derivative Works\" shall mean any work, whether in Source or Object\nform, that is based on (or derived from) the Work and for which the\neditorial revisions, annotations, elaborations, or other modifications\nrepresent, as a whole, an original work of authorship. For the purposes\nof this License, Derivative Works shall not include works that remain\nseparable from, or merely link (or bind by name) to the interfaces of,\nthe Work and Derivative Works thereof.\n\"Contribution\" shall mean any work of authorship, including\nthe original version of the Work and any modifications or additions\nto that Work or Derivative Works thereof, that is intentionally\nsubmitted to Licensor for inclusion in the Work by the copyright owner\nor by an individual or Legal Entity authorized to submit on behalf of\nthe copyright owner. For the purposes of this definition, \"submitted\"\nmeans any form of electronic, verbal, or written communication sent\nto the Licensor or its representatives, including but not limited to\ncommunication on electronic mailing lists, source code control systems,\nand issue tracking systems that are managed by, or on behalf of, the\nLicensor for the purpose of discussing and improving the Work, but\nexcluding communication that is conspicuously marked or otherwise\ndesignated in writing by the copyright owner as \"Not a Contribution.\"\n\"Contributor\" shall mean Licensor and any individual or Legal Entity\non behalf of whom a Contribution has been received by Licensor and\nsubsequently incorporated within the Work.\n\nGrant of Copyright License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\ncopyright license to reproduce, prepare Derivative Works of,\npublicly display, publicly perform, sublicense, and distribute the\nWork and such Derivative Works in Source or Object form.\n\nGrant of Patent License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\n(except as stated in this section) patent license to make, have made,\nuse, offer to sell, sell, import, and otherwise transfer the Work,\nwhere such license applies only to those patent claims licensable\nby such Contributor that are necessarily infringed by their\nContribution(s) alone or by combination of their Contribution(s)\nwith the Work to which such Contribution(s) was submitted. If You\ninstitute patent litigation against any entity (including a\ncross-claim or counterclaim in a lawsuit) alleging that the Work\nor a Contribution incorporated within the Work constitutes direct\nor contributory patent infringement, then any patent licenses\ngranted to You under this License for that Work shall terminate\nas of the date such litigation is filed.\n\nRedistribution. You may reproduce and distribute copies of the\nWork or Derivative Works thereof in any medium, with or without\nmodifications, and in Source or Object form, provided that You\nmeet the following conditions:\n(a) You must give any other recipients of the Work or\nDerivative Works a copy of this License; and(b) You must cause any modified files to carry prominent notices\nstating that You changed the files; and(c) You must retain, in the Source form of any Derivative Works\nthat You distribute, all copyright, patent, trademark, and\nattribution notices from the Source form of the Work,\nexcluding those notices that do not pertain to any part of\nthe Derivative Works; and(d) If the Work includes a \"NOTICE\" text file as part of its\ndistribution, then any Derivative Works that You distribute must\ninclude a readable copy of the attribution notices contained\nwithin such NOTICE file, excluding those notices that do not\npertain to any part of the Derivative Works, in at least one\nof the following places: within a NOTICE text file distributed\nas part of the Derivative Works; within the Source form or\ndocumentation, if provided along with the Derivative Works; or,\nwithin a display generated by the Derivative Works, if and\nwherever such third-party notices normally appear. The contents\nof the NOTICE file are for informational purposes only and\ndo not modify the License. You may add Your own attribution\nnotices within Derivative Works that You distribute, alongside\nor as an addendum to the NOTICE text from the Work, provided\nthat such additional attribution notices cannot be construed\nas modifying the License.You may add Your own copyright statement to Your modifications and\nmay provide additional or different license terms and conditions\nfor use, reproduction, or distribution of Your modifications, or\nfor any such Derivative Works as a whole, provided Your use,\nreproduction, and distribution of the Work otherwise complies with\nthe conditions stated in this License.\n\nSubmission of Contributions. Unless You explicitly state otherwise,\nany Contribution intentionally submitted for inclusion in the Work\nby You to the Licensor shall be under the terms and conditions of\nthis License, without any additional terms or conditions.\nNotwithstanding the above, nothing herein shall supersede or modify\nthe terms of any separate license agreement you may have executed\nwith Licensor regarding such Contributions.\n\nTrademarks. This License does not grant permission to use the trade\nnames, trademarks, service marks, or product names of the Licensor,\nexcept as required for reasonable and customary use in describing the\norigin of the Work and reproducing the content of the NOTICE file.\n\nDisclaimer of Warranty. Unless required by applicable law or\nagreed to in writing, Licensor provides the Work (and each\nContributor provides its Contributions) on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied, including, without limitation, any warranties or conditions\nof TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\nPARTICULAR PURPOSE. You are solely responsible for determining the\nappropriateness of using or redistributing the Work and assume any\nrisks associated with Your exercise of permissions under this License.\n\nLimitation of Liability. In no event and under no legal theory,\nwhether in tort (including negligence), contract, or otherwise,\nunless required by applicable law (such as deliberate and grossly\nnegligent acts) or agreed to in writing, shall any Contributor be\nliable to You for damages, including any direct, indirect, special,\nincidental, or consequential damages of any character arising as a\nresult of this License or out of the use or inability to use the\nWork (including but not limited to damages for loss of goodwill,\nwork stoppage, computer failure or malfunction, or any and all\nother commercial damages or losses), even if such Contributor\nhas been advised of the possibility of such damages.\n\nAccepting Warranty or Additional Liability. While redistributing\nthe Work or Derivative Works thereof, You may choose to offer,\nand charge a fee for, acceptance of support, warranty, indemnity,\nor other liability obligations and/or rights consistent with this\nLicense. However, in accepting such obligations, You may act only\non Your own behalf and on Your sole responsibility, not on behalf\nof any other Contributor, and only if You agree to indemnify,\ndefend, and hold each Contributor harmless for any liability\nincurred by, or claims asserted against, such Contributor by reason\nof your accepting any such warranty or additional liability.\nEND OF TERMS AND CONDITIONS\nAPPENDIX: How to apply the Apache License to your work.\nTo apply the Apache License to your work, attach the following\nboilerplate notice, with the fields enclosed by brackets \"[]\"\nreplaced with your own identifying information. (Don't include\nthe brackets!)  The text should be enclosed in the appropriate\ncomment syntax for the file format. We also recommend that a\nfile or class name and description of purpose be included on the\nsame \"printed page\" as the copyright notice for easier\nidentification within third-party archives.\nCopyright 2020 SolarWinds Worldwide, LLC\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        NuiChartsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NuiChartsModule\n\n\n\ncluster_NuiChartsModule_declarations\n\n\n\ncluster_NuiChartsModule_exports\n\n\n\ncluster_NuiChartsModule_providers\n\n\n\n\nBasicLegendTileComponent\n\nBasicLegendTileComponent\n\n\n\nNuiChartsModule\n\nNuiChartsModule\n\nNuiChartsModule -->\n\nBasicLegendTileComponent->NuiChartsModule\n\n\n\n\n\nChartCollectionIdDirective\n\nChartCollectionIdDirective\n\nNuiChartsModule -->\n\nChartCollectionIdDirective->NuiChartsModule\n\n\n\n\n\nChartComponent\n\nChartComponent\n\nNuiChartsModule -->\n\nChartComponent->NuiChartsModule\n\n\n\n\n\nChartDonutContentComponent\n\nChartDonutContentComponent\n\nNuiChartsModule -->\n\nChartDonutContentComponent->NuiChartsModule\n\n\n\n\n\nChartMarkerComponent\n\nChartMarkerComponent\n\nNuiChartsModule -->\n\nChartMarkerComponent->NuiChartsModule\n\n\n\n\n\nChartPopoverComponent\n\nChartPopoverComponent\n\nNuiChartsModule -->\n\nChartPopoverComponent->NuiChartsModule\n\n\n\n\n\nChartTooltipComponent\n\nChartTooltipComponent\n\nNuiChartsModule -->\n\nChartTooltipComponent->NuiChartsModule\n\n\n\n\n\nChartTooltipsComponent\n\nChartTooltipsComponent\n\nNuiChartsModule -->\n\nChartTooltipsComponent->NuiChartsModule\n\n\n\n\n\nLegendComponent\n\nLegendComponent\n\nNuiChartsModule -->\n\nLegendComponent->NuiChartsModule\n\n\n\n\n\nLegendSeriesComponent\n\nLegendSeriesComponent\n\nNuiChartsModule -->\n\nLegendSeriesComponent->NuiChartsModule\n\n\n\n\n\nRichLegendTileComponent\n\nRichLegendTileComponent\n\nNuiChartsModule -->\n\nRichLegendTileComponent->NuiChartsModule\n\n\n\n\n\nBasicLegendTileComponent \n\nBasicLegendTileComponent \n\nBasicLegendTileComponent  -->\n\nNuiChartsModule->BasicLegendTileComponent \n\n\n\n\n\nChartCollectionIdDirective \n\nChartCollectionIdDirective \n\nChartCollectionIdDirective  -->\n\nNuiChartsModule->ChartCollectionIdDirective \n\n\n\n\n\nChartComponent \n\nChartComponent \n\nChartComponent  -->\n\nNuiChartsModule->ChartComponent \n\n\n\n\n\nChartDonutContentComponent \n\nChartDonutContentComponent \n\nChartDonutContentComponent  -->\n\nNuiChartsModule->ChartDonutContentComponent \n\n\n\n\n\nChartMarkerComponent \n\nChartMarkerComponent \n\nChartMarkerComponent  -->\n\nNuiChartsModule->ChartMarkerComponent \n\n\n\n\n\nChartPopoverComponent \n\nChartPopoverComponent \n\nChartPopoverComponent  -->\n\nNuiChartsModule->ChartPopoverComponent \n\n\n\n\n\nChartTooltipComponent \n\nChartTooltipComponent \n\nChartTooltipComponent  -->\n\nNuiChartsModule->ChartTooltipComponent \n\n\n\n\n\nChartTooltipsComponent \n\nChartTooltipsComponent \n\nChartTooltipsComponent  -->\n\nNuiChartsModule->ChartTooltipsComponent \n\n\n\n\n\nLegendComponent \n\nLegendComponent \n\nLegendComponent  -->\n\nNuiChartsModule->LegendComponent \n\n\n\n\n\nLegendSeriesComponent \n\nLegendSeriesComponent \n\nLegendSeriesComponent  -->\n\nNuiChartsModule->LegendSeriesComponent \n\n\n\n\n\nRichLegendTileComponent \n\nRichLegendTileComponent \n\nRichLegendTileComponent  -->\n\nNuiChartsModule->RichLegendTileComponent \n\n\n\n\n\nChartCollectionService\n\nChartCollectionService\n\nNuiChartsModule -->\n\nChartCollectionService->NuiChartsModule\n\n\n\n\n\nThresholdsService\n\nThresholdsService\n\nNuiChartsModule -->\n\nThresholdsService->NuiChartsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    10 Components\n                \n            \n        \n        \n            \n                \n                    \n                    1 Directive\n                \n            \n        \n        \n            \n                \n                    \n                    2 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    69 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    93 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BorderKey   (src/.../grid.ts)\n                        \n                        \n                            D3Selection   (src/.../types.ts)\n                        \n                        \n                            DataAccessor   (src/.../types.ts)\n                        \n                        \n                            DomainCalculator   (src/.../types.ts)\n                        \n                        \n                            Formatter   (src/.../types.ts)\n                        \n                        \n                            IAxesStyleChangeEventPayload   (src/.../types.ts)\n                        \n                        \n                            Scales   (src/.../types.ts)\n                        \n                        \n                            SelectedDatPointIdxFn   (src/.../bar-highlight-strategy.ts)\n                        \n                        \n                            SeriesAccessor   (src/.../types.ts)\n                        \n                        \n                            TextOverflowHandler   (src/.../types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/grid/grid.ts\n    \n    \n        \n            \n                \n                    \n                    BorderKey\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/core/common/types.ts\n    \n    \n        \n            \n                \n                    \n                    D3Selection\n                \n            \n            \n                \n                    Short-form alias for the most commonly used generic D3 Selection type\n\n                \n            \n            \n                \n                        Selection\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DataAccessor\n                \n            \n            \n                \n                    Signature for data accessors\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    IAxesStyleChangeEventPayload\n                \n            \n            \n                \n                    Payload for axes style change when emphasizing series on grid\n\n                \n            \n            \n                \n                        Record>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SeriesAccessor\n                \n            \n            \n                \n                    Signature for series accessors\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/core/common/scales/types.ts\n    \n    \n        \n            \n                \n                    \n                    DomainCalculator\n                \n            \n            \n                \n                    Signature for domain calculator \n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Formatter\n                \n            \n            \n                \n                    Signature for label formatters \n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Scales\n                \n            \n            \n                \n                    Dictionary of scales \n\n                \n            \n            \n                \n                            Record>\n\n                \n            \n        \n    \n    src/renderers/bar/highlight-strategies/bar-highlight-strategy.ts\n    \n    \n        \n            \n                \n                    \n                    SelectedDatPointIdxFn\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/core/grid/types.ts\n    \n    \n        \n            \n                \n                    \n                    TextOverflowHandler\n                \n            \n            \n                \n                    Type for tick overflow handler \n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AXES_STYLE_CHANGE_EVENT   (src/.../constants.ts)\n                        \n                        \n                            BAND_CENTER   (src/.../constants.ts)\n                        \n                        \n                            borderMidpoint   (src/.../grid.ts)\n                        \n                        \n                            CHART_MARKERS   (src/.../palettes.ts)\n                        \n                        \n                            CHART_PALETTE_CS_S   (src/.../palettes.ts)\n                        \n                        \n                            CHART_PALETTE_CS_S_EXTENDED   (src/.../palettes.ts)\n                        \n                        \n                            CHART_PALETTE_CS1   (src/.../palettes.ts)\n                        \n                        \n                            CHART_PALETTE_CS2   (src/.../palettes.ts)\n                        \n                        \n                            CHART_PALETTE_CS3   (src/.../palettes.ts)\n                        \n                        \n                            CHART_VIEW_STATUS_EVENT   (src/.../constants.ts)\n                        \n                        \n                            CONNECTION_POINTS   (src/.../radial-tooltips-plugin.ts)\n                        \n                        \n                            context   (src/.../test.ts)\n                        \n                        \n                            datetimeFormatter   (src/.../datetime-formatter.ts)\n                        \n                        \n                            DEFAULT_MARKER_INTERACTION_CONFIG   (src/.../constants.ts)\n                        \n                        \n                            DEFAULT_RADIAL_RENDERER_CONFIG   (src/.../radial-renderer.ts)\n                        \n                        \n                            DESTROY_EVENT   (src/.../constants.ts)\n                        \n                        \n                            EMPTY_CONTINUOUS_DOMAIN   (src/.../types.ts)\n                        \n                        \n                            emptyShapes   (src/.../palettes.ts)\n                        \n                        \n                            formatSecond   (src/.../datetime-formatter.ts)\n                        \n                        \n                            getAutomaticDomain   (src/.../automatic-domain.ts)\n                        \n                        \n                            getAutomaticDomainWithIncludedInterval   (src/.../automatic-domain.ts)\n                        \n                        \n                            getAutomaticDomainWithTicks   (src/.../automatic-domain.ts)\n                        \n                        \n                            GRAYSCALE_COLOR_MATRIX   (src/.../types.ts)\n                        \n                        \n                            GRAYSCALE_FILTER   (src/.../types.ts)\n                        \n                        \n                            HIGHLIGHT_DATA_POINT_EVENT   (src/.../constants.ts)\n                        \n                        \n                            HIGHLIGHT_SERIES_EVENT   (src/.../constants.ts)\n                        \n                        \n                            IGNORE_INTERACTION_CLASS   (src/.../constants.ts)\n                        \n                        \n                            INTERACTION_COORDINATES_EVENT   (src/.../constants.ts)\n                        \n                        \n                            INTERACTION_DATA_POINT_EVENT   (src/.../constants.ts)\n                        \n                        \n                            INTERACTION_DATA_POINTS_EVENT   (src/.../constants.ts)\n                        \n                        \n                            INTERACTION_SERIES_EVENT   (src/.../constants.ts)\n                        \n                        \n                            INTERACTION_VALUES_ACTIVE_EVENT   (src/.../constants.ts)\n                        \n                        \n                            INTERACTION_VALUES_EVENT   (src/.../constants.ts)\n                        \n                        \n                            intlFormat   (src/.../datetime-formatter.ts)\n                        \n                        \n                            MOUSE_ACTIVE_EVENT   (src/.../constants.ts)\n                        \n                        \n                            NORMALIZED_DOMAIN   (src/.../types.ts)\n                        \n                        \n                            OPPOSITE   (src/.../radial-tooltips-plugin.ts)\n                        \n                        \n                            REFRESH_EVENT   (src/.../constants.ts)\n                        \n                        \n                            regularShapes   (src/.../palettes.ts)\n                        \n                        \n                            require   (src/.../test.ts)\n                        \n                        \n                            SELECT_DATA_POINT_EVENT   (src/.../constants.ts)\n                        \n                        \n                            SERIES_STATE_CHANGE_EVENT   (src/.../constants.ts)\n                        \n                        \n                            SET_DOMAIN_EVENT   (src/.../constants.ts)\n                        \n                        \n                            THRESHOLDS_MAIN_CHART_RENDERER_CONFIG   (src/.../constants.ts)\n                        \n                        \n                            THRESHOLDS_SUMMARY_RENDERER_CONFIG   (src/.../constants.ts)\n                        \n                        \n                            TOOLTIP_POSITION_OFFSET   (src/.../chart-tooltips-plugin.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            AXES_STYLE_CHANGE_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"axes_style_change\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            CHART_VIEW_STATUS_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"chart_view_status\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            DESTROY_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"destroy\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            HIGHLIGHT_DATA_POINT_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"highlight_data_point\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            HIGHLIGHT_SERIES_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"highlight_series\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            IGNORE_INTERACTION_CLASS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"ignore-interaction\"\n                        \n                    \n\n                \n                    \n                        Use this class to prevent DOM elements from triggering mouse-interactive-area events \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            INTERACTION_COORDINATES_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"interaction_coordinates\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            INTERACTION_DATA_POINT_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"interaction_data_point\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            INTERACTION_DATA_POINTS_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"interaction_data_points\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            INTERACTION_SERIES_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"interaction_series\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            INTERACTION_VALUES_ACTIVE_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"interaction_values_active\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            INTERACTION_VALUES_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"interaction_values\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MOUSE_ACTIVE_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"mouse_active\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            REFRESH_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"refresh\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SELECT_DATA_POINT_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"select_data_point\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SERIES_STATE_CHANGE_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"series_state_change\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SET_DOMAIN_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"set_domain\"\n                        \n                    \n\n\n            \n        \n\n    src/core/common/scales/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            BAND_CENTER\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0.5\n                        \n                    \n\n                \n                    \n                        The center position within a band on a band scale \n\n                    \n                \n\n            \n        \n\n    src/core/grid/grid.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            borderMidpoint\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0.5\n                        \n                    \n\n\n            \n        \n\n    src/core/common/palette/palettes.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            CHART_MARKERS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         SvgMarker[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    ...regularShapes\n        .map(s => ``),\n    ...emptyShapes\n        .map((s, i) =>\n            `\n            `\n        ),\n].map(s => new SvgMarker(s))\n                        \n                    \n\n                \n                    \n                        Default chart marker set \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            CHART_PALETTE_CS_S\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    \"var(--nui-color-semantic-down)\",\n    \"var(--nui-color-semantic-critical)\",\n    \"var(--nui-color-semantic-warning)\",\n    \"var(--nui-color-semantic-unknown)\",\n    \"var(--nui-color-semantic-ok)\",\n    \"var(--nui-color-semantic-info)\",\n]\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            CHART_PALETTE_CS_S_EXTENDED\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    \"var(--nui-color-semantic-down)\",\n    \"var(--nui-color-semantic-down-bg)\",\n    \"var(--nui-color-semantic-critical)\",\n    \"var(--nui-color-semantic-critical-bg)\",\n    \"var(--nui-color-semantic-warning)\",\n    \"var(--nui-color-semantic-warning-bg)\",\n    \"var(--nui-color-semantic-unknown)\",\n    \"var(--nui-color-semantic-unknown-bg)\",\n    \"var(--nui-color-semantic-ok)\",\n    \"var(--nui-color-semantic-ok-bg)\",\n    \"var(--nui-color-semantic-info)\",\n    \"var(--nui-color-semantic-info-bg)\",\n]\n                        \n                    \n\n                \n                    \n                        Extended status color sequence for charts\nIt will substitute the default one above in v.12\nhttps://jira.solarwinds.com/browse/NUI-5367\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            CHART_PALETTE_CS1\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    \"var(--nui-color-chart-one)\",\n    \"var(--nui-color-chart-two)\",\n    \"var(--nui-color-chart-three)\",\n    \"var(--nui-color-chart-four)\",\n    \"var(--nui-color-chart-five)\",\n    \"var(--nui-color-chart-six)\",\n    \"var(--nui-color-chart-seven)\",\n    \"var(--nui-color-chart-eight)\",\n    \"var(--nui-color-chart-nine)\",\n    \"var(--nui-color-chart-ten)\",\n]\n                        \n                    \n\n                \n                    \n                        Default single-shade color sequence for charts \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            CHART_PALETTE_CS2\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    \"var(--nui-color-chart-one)\",\n    \"var(--nui-color-chart-one-light)\",\n    \"var(--nui-color-chart-two)\",\n    \"var(--nui-color-chart-two-light)\",\n    \"var(--nui-color-chart-three)\",\n    \"var(--nui-color-chart-three-light)\",\n    \"var(--nui-color-chart-four)\",\n    \"var(--nui-color-chart-four-light)\",\n    \"var(--nui-color-chart-five)\",\n    \"var(--nui-color-chart-five-light)\",\n    \"var(--nui-color-chart-six)\",\n    \"var(--nui-color-chart-six-light)\",\n    \"var(--nui-color-chart-seven)\",\n    \"var(--nui-color-chart-seven-light)\",\n    \"var(--nui-color-chart-eight)\",\n    \"var(--nui-color-chart-eight-light)\",\n    \"var(--nui-color-chart-nine)\",\n    \"var(--nui-color-chart-nine-light)\",\n    \"var(--nui-color-chart-ten)\",\n    \"var(--nui-color-chart-ten-light)\",\n]\n                        \n                    \n\n                \n                    \n                        Default two-shade color sequence for charts \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            CHART_PALETTE_CS3\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    \"var(--nui-color-chart-one)\",\n    \"var(--nui-color-chart-one-light)\",\n    \"var(--nui-color-chart-one-dark)\",\n    \"var(--nui-color-chart-two)\",\n    \"var(--nui-color-chart-two-light)\",\n    \"var(--nui-color-chart-two-dark)\",\n    \"var(--nui-color-chart-three)\",\n    \"var(--nui-color-chart-three-light)\",\n    \"var(--nui-color-chart-three-dark)\",\n    \"var(--nui-color-chart-four)\",\n    \"var(--nui-color-chart-four-light)\",\n    \"var(--nui-color-chart-four-dark)\",\n    \"var(--nui-color-chart-five)\",\n    \"var(--nui-color-chart-five-light)\",\n    \"var(--nui-color-chart-five-dark)\",\n    \"var(--nui-color-chart-six)\",\n    \"var(--nui-color-chart-six-light)\",\n    \"var(--nui-color-chart-six-dark)\",\n    \"var(--nui-color-chart-seven)\",\n    \"var(--nui-color-chart-seven-light)\",\n    \"var(--nui-color-chart-seven-dark)\",\n    \"var(--nui-color-chart-eight)\",\n    \"var(--nui-color-chart-eight-light)\",\n    \"var(--nui-color-chart-eight-dark)\",\n    \"var(--nui-color-chart-nine)\",\n    \"var(--nui-color-chart-nine-light)\",\n    \"var(--nui-color-chart-nine-dark)\",\n    \"var(--nui-color-chart-ten)\",\n    \"var(--nui-color-chart-ten-light)\",\n    \"var(--nui-color-chart-ten-dark)\",\n]\n                        \n                    \n\n                \n                    \n                        Default three-shade color sequence for charts \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            emptyShapes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    \"m0 2c1.105 0 2-.895 2-2 0-1.105-.895-2-2-2-1.105 0-2 .895-2 2 0 1.105.895 2 2 2zm0 2c-2.209 0-4-1.791-4-4 0-2.209 1.791-4 4-4 2.209 0 4 1.791 4 4 0 2.209-1.791 4-4 4z\", // circle empty\n    \"m-2-2 0 4 4 0 0-4-4 0zm-2-2 8 0 0 8-8 0 0-8z\", // square empty\n    \"m0-4-4 8 8.001 0-4.001-8zm0 3.354 1.573 3.146-3.145 0 1.572-3.146z\", // triangle up empty\n    \"m0-2.121-2.121 2.121 2.121 2.121 2.121-2.121-2.121-2.121zm0-2.828 4.95 4.95-4.95 4.95-4.95-4.95 4.95-4.95z\", // diamond empty\n    \"m0 4-4-8 8.001 0-4.001 8zm0-3.354 1.573-3.146-3.145 0 1.572 3.146z\", // triangle down empty\n    \"m0-1.951-2.237 1.626.855 2.63 2.766 0 .855-2.63-2.237-1.626zm0-1.854 4.001 2.907-1.528 4.703-4.945 0-1.528-4.703 4.001-2.907z\", // pentagon empty\n]\n                        \n                    \n\n                \n                    \n                        Standard open shapes for chart markers \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            regularShapes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    \"m0 0m-4 0a4 4 0 1 0 8 0 4 4 0 1 0-8 0z\", // circle\n    \"m-4,-4l8,0l0,8l-8,0l0,-8z\", // square\n    \"m0-4 4 8-8 0z\", // triangle up\n    \"m0-4.95 4.95 4.95-4.95 4.95-4.95-4.95 4.95-4.95z\", // diamond\n    \"m0 4-4-8 8 0z\", // triangle down\n    \"m0-3.805 4.001 2.907-1.528 4.703-4.945 0-1.528-4.703z\", // pentagon\n]\n                        \n                    \n\n                \n                    \n                        Standard shapes for chart markers \n\n                    \n                \n\n            \n        \n\n    src/core/plugins/tooltips/radial-tooltips-plugin.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            CONNECTION_POINTS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n        {x: \"end\", y: \"center\"},\n        {x: \"end\", y: \"bottom\"},\n        {x: \"center\", y: \"bottom\"},\n        {x: \"start\", y: \"bottom\"},\n        {x: \"start\", y: \"center\"},\n        {x: \"start\", y: \"top\"},\n        {x: \"center\", y: \"top\"},\n        {x: \"end\", y: \"top\"},\n    ]\n                        \n                    \n\n                \n                    \n                        The circle is divided into 8 parts (E, SE, S, SW, ...), these values represent the connection points\non the source element for the tooltip position starting with EAST and going clockwise)\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            OPPOSITE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    \"start\": \"end\",\n    \"end\": \"start\",\n    \"top\": \"bottom\",\n    \"bottom\": \"top\",\n}\n                        \n                    \n\n                \n                    \n                        This conversion map is used to calculate the opposite connection points for the tooltip element \n\n                    \n                \n\n            \n        \n\n    src/test.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            context\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require.context(\"./\", true, /\\.spec\\.ts$/)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            require\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n\n\n            \n        \n\n    src/core/common/scales/formatters/datetime-formatter.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            datetimeFormatter\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Formatter\n\n                        \n                    \n                    \n                        \n                            Default value : (date: Date): string =>\n    (timeMinute(date) \n                        \n                    \n\n                \n                    \n                        Formatter for dates\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            formatSecond\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (d: Date) => intlFormat(d, {hour: \"numeric\", minute: \"2-digit\", second: \"2-digit\"})\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            intlFormat\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (date: Date, options: Intl.DateTimeFormatOptions) =>\n    new Intl.DateTimeFormat(moment.locale(), options).format(date)\n                        \n                    \n\n\n            \n        \n\n    src/renderers/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            DEFAULT_MARKER_INTERACTION_CONFIG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IMarkerInteractionConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    enabled: false,\n    clickable: false,\n}\n                        \n                    \n\n                \n                    \n                        Default configuration for marker interaction \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            THRESHOLDS_MAIN_CHART_RENDERER_CONFIG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     miscellaneou\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    stateStyles: {\n        [RenderState.default]: {\n            opacity: 0,\n        },\n        [RenderState.hidden]: {\n            opacity: 0,\n        },\n        [RenderState.deemphasized]: {\n            opacity: 0,\n        },\n        [RenderState.emphasized]: {\n            opacity: 1,\n        },\n    },\n    ignoreForDomainCalculation: true,\n}\n                        \n                    \n\n                \n                    \n                        Renderer configuration for the thresholds on a chart \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            THRESHOLDS_SUMMARY_RENDERER_CONFIG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     miscellaneou\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    stateStyles: {\n        [RenderState.default]: {\n            opacity: 0.3,\n        },\n        [RenderState.hidden]: {\n            opacity: 0,\n        },\n        [RenderState.deemphasized]: {\n            opacity: 0,\n        },\n        [RenderState.emphasized]: {\n            opacity: 1,\n        },\n    },\n    ignoreForDomainCalculation: true,\n}\n                        \n                    \n\n                \n                    \n                        Renderer configuration for a thresholds summary chart \n\n                    \n                \n\n            \n        \n\n    src/renderers/radial/radial-renderer.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            DEFAULT_RADIAL_RENDERER_CONFIG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRadialRendererConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    annularWidth: 20,\n    annularPadding: 5,\n    maxThickness: 30,\n    annularGrowth: 0.15,\n    cursor: \"default\",\n    enableSeriesHighlighting: true,\n    enableDataPointHighlighting: true,\n}\n                        \n                    \n\n                \n                    \n                        Default configuration for Radial Renderer\n\n                    \n                \n\n            \n        \n\n    src/core/common/scales/types.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            EMPTY_CONTINUOUS_DOMAIN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [0, 0]\n                        \n                    \n\n                \n                    \n                        Domain for series with empty or null data \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            NORMALIZED_DOMAIN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [0, 1]\n                        \n                    \n\n                \n                    \n                        A reasonable non-data-driven domain for charts  \n\n                    \n                \n\n            \n        \n\n    src/core/common/scales/domain-calculation/automatic-domain.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            getAutomaticDomain\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         DomainCalculator\n\n                        \n                    \n                    \n                        \n                            Default value : (chartSeriesSet: IChartSeries[], scaleKey: string, scale: IScale): any[] => {\n    const fixedDomains = getFixedDomains(chartSeriesSet, scaleKey);\n\n    const domains: any[][] = chartSeriesSet.map(cs => {\n        // find fixed, continuous scales that are referenced by this series\n        const filterScales = Object.keys(fixedDomains).reduce((result, next: string) => {\n            const seriesScale = cs.scales[next];\n            if (seriesScale && seriesScale.isContinuous() && indexOf(fixedDomains[next], seriesScale) !== -1) {\n                result[next] = seriesScale;\n            }\n            return result;\n        }, >>{});\n\n        return cs.renderer.getDomainOfFilteredData(cs, filterScales, scaleKey, cs.scales[scaleKey]);\n    });\n\n    return mergeDomains(domains, scale);\n}\n                        \n                    \n\n                \n                    \n                        Returns automatically calculated domain for given scaleKey based on given set of chart series. It considers scales with fixed domains for limiting\nconsidered data set.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getAutomaticDomainWithIncludedInterval\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (interval: [number, number]): DomainCalculator =>\n    (chartSeriesSet: IChartSeries[], scaleId: string, scale: IScale) => {\n        const automaticDomain = getAutomaticDomain(chartSeriesSet, scaleId, scale);\n\n        return [Math.min(automaticDomain[0], interval[0]), Math.max(automaticDomain[1], interval[1])];\n    }\n                        \n                    \n\n                \n                    \n                        Works like getAutomaticDomain, but also includes provided interval in the calculated result\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getAutomaticDomainWithTicks\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (config: IAxisConfig, axisGenerator: any): DomainCalculator =>\n    (chartSeriesSet: IChartSeries[], scaleKey: string, scale: IScale): any[] => {\n        const mergedDomains = getAutomaticDomain(chartSeriesSet, scaleKey, scale);\n        const clonedScale = cloneDeep(scale);\n        domain(clonedScale, mergedDomains);\n        const tickAxis: any = axisGenerator(clonedScale.d3Scale);\n        const ticks = tickAxis.scale().ticks(config.approximateTicks);\n        if (ticks.length  mergedDomains[0]) {\n            mergedDomains[0] = ticks[0] - ticksAverage;\n        }\n        if (ticks[ticks.length - 1] \n                        \n                    \n\n\n            \n        \n\n    src/core/types.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            GRAYSCALE_COLOR_MATRIX\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : `\n0.2126 0.7152 0.0722 0 0\n0.2126 0.7152 0.0722 0 0\n0.2126 0.7152 0.0722 0 0\n0      0      0      1 0\n`\n                        \n                    \n\n                \n                    \n                        Transformation matrix value for applying a 100% grayscale appearance to an svg element \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            GRAYSCALE_FILTER\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : `url(\"#${CssFilterId.Grayscale}\")`\n                        \n                    \n\n                \n                    \n                        CSS grayscale filter rule value \n\n                    \n                \n\n            \n        \n\n    src/core/plugins/tooltips/chart-tooltips-plugin.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            TOOLTIP_POSITION_OFFSET\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 10\n                        \n                    \n\n                \n                    \n                        How far away from the data point position will the tooltip be positioned \n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/layout.html":{"url":"additional-documentation/layout.html","title":"additional-page - Layout","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/chart-types.html":{"url":"additional-documentation/chart-types.html","title":"additional-page - Chart Types","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\nChart Types\n\nLine\nBar\nBucketed Bar\nStatus\nWaterfall\n\n\nArea\nPie and Donut\nSpark\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/chart-types/line.html":{"url":"additional-documentation/chart-types/line.html","title":"additional-page - Line","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/chart-types/bar.html":{"url":"additional-documentation/chart-types/bar.html","title":"additional-page - Bar","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/chart-types/bar/bucketed-bar.html":{"url":"additional-documentation/chart-types/bar/bucketed-bar.html","title":"additional-page - Bucketed Bar","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/chart-types/bar/status.html":{"url":"additional-documentation/chart-types/bar/status.html","title":"additional-page - Status","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/chart-types/bar/waterfall.html":{"url":"additional-documentation/chart-types/bar/waterfall.html","title":"additional-page - Waterfall","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/chart-types/area.html":{"url":"additional-documentation/chart-types/area.html","title":"additional-page - Area","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/chart-types/pie-and-donut.html":{"url":"additional-documentation/chart-types/pie-and-donut.html","title":"additional-page - Pie and Donut","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/chart-types/spark.html":{"url":"additional-documentation/chart-types/spark.html","title":"additional-page - Spark","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/plugins.html":{"url":"additional-documentation/plugins.html","title":"additional-page - Plugins","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\nPlugins\n\nTooltips\nPopovers\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/plugins/tooltips.html":{"url":"additional-documentation/plugins/tooltips.html","title":"additional-page - Tooltips","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/plugins/popovers.html":{"url":"additional-documentation/plugins/popovers.html","title":"additional-page - Popovers","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/thresholds.html":{"url":"additional-documentation/thresholds.html","title":"additional-page - Thresholds","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/timeframe-selection.html":{"url":"additional-documentation/timeframe-selection.html","title":"additional-page - Timeframe Selection","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/advanced-usage.html":{"url":"additional-documentation/advanced-usage.html","title":"additional-page - Advanced Usage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\nAdvanced Usage\n\nChart\nLegend\nInput Structure\nData\nColors\nMarkers\n\n\nEvents\nGrid\nScales\nDomains\nFormatters\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/advanced-usage/chart.html":{"url":"additional-documentation/advanced-usage/chart.html","title":"additional-page - Chart","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/advanced-usage/legend.html":{"url":"additional-documentation/advanced-usage/legend.html","title":"additional-page - Legend","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/advanced-usage/input-structure.html":{"url":"additional-documentation/advanced-usage/input-structure.html","title":"additional-page - Input Structure","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/advanced-usage/input-structure/data.html":{"url":"additional-documentation/advanced-usage/input-structure/data.html","title":"additional-page - Data","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/advanced-usage/input-structure/colors.html":{"url":"additional-documentation/advanced-usage/input-structure/colors.html","title":"additional-page - Colors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/advanced-usage/input-structure/markers.html":{"url":"additional-documentation/advanced-usage/input-structure/markers.html","title":"additional-page - Markers","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/advanced-usage/events.html":{"url":"additional-documentation/advanced-usage/events.html","title":"additional-page - Events","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/advanced-usage/grid.html":{"url":"additional-documentation/advanced-usage/grid.html","title":"additional-page - Grid","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/advanced-usage/scales.html":{"url":"additional-documentation/advanced-usage/scales.html","title":"additional-page - Scales","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/advanced-usage/scales/domains.html":{"url":"additional-documentation/advanced-usage/scales/domains.html","title":"additional-page - Domains","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/advanced-usage/scales/formatters.html":{"url":"additional-documentation/advanced-usage/scales/formatters.html","title":"additional-page - Formatters","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
