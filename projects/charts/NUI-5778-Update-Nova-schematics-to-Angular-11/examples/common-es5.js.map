{"version":3,"sources":["webpack:///node_modules/lodash/_baseZipObject.js","webpack:///node_modules/lodash/zipObject.js","webpack:///examples/components/demo/common/charts-test-harness.component.ts","webpack:///examples/data-generator.ts","webpack:///examples/components/demo/common/demo-common.module.ts","webpack:///examples/components/demo/common/charts-test-harness.component.html"],"names":["baseZipObject","props","values","assignFunc","index","length","valsLength","result","value","undefined","module","exports","assignValue","zipObject","ChartsTestHarnessComponent","themeSwitcher","originalWithRefreshRoute","withRefreshRoute","selector","template","host","DataGenerator","seriesCount","pointCountPerSeries","statuses","dataSet","i","push","id","name","data","mockStatusData","mockLineData","startTime","endTime","mockTimeLineData","groupNames","map","el","Array","apply","_","Math","floor","random","description","accessors","category","d","from","to","count","interval","diff","y","x","clone","add","duration","start","end","fill","pointCount","startDatetime","endDatetime","step","prev","generateValue","maxThreshold","range","next","abs","toDate","startData","endData","DemoCommonModule","declarations","imports"],"mappings":"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","file":"common-es5.js","sourcesContent":["/**\n * This base implementation of `_.zipObject` which assigns values using `assignFunc`.\n *\n * @private\n * @param {Array} props The property identifiers.\n * @param {Array} values The property values.\n * @param {Function} assignFunc The function to assign values.\n * @returns {Object} Returns the new object.\n */\nfunction baseZipObject(props, values, assignFunc) {\n  var index = -1,\n      length = props.length,\n      valsLength = values.length,\n      result = {};\n\n  while (++index < length) {\n    var value = index < valsLength ? values[index] : undefined;\n    assignFunc(result, props[index], value);\n  }\n  return result;\n}\n\nmodule.exports = baseZipObject;\n","var assignValue = require('./_assignValue'),\n    baseZipObject = require('./_baseZipObject');\n\n/**\n * This method is like `_.fromPairs` except that it accepts two arrays,\n * one of property identifiers and one of corresponding values.\n *\n * @static\n * @memberOf _\n * @since 0.4.0\n * @category Array\n * @param {Array} [props=[]] The property identifiers.\n * @param {Array} [values=[]] The property values.\n * @returns {Object} Returns the new object.\n * @example\n *\n * _.zipObject(['a', 'b'], [1, 2]);\n * // => { 'a': 1, 'b': 2 }\n */\nfunction zipObject(props, values) {\n  return baseZipObject(props || [], values || [], assignValue);\n}\n\nmodule.exports = zipObject;\n","import { Component, OnDestroy } from \"@angular/core\";\nimport { ThemeSwitchService } from \"@nova-ui/bits\";\n\n@Component({\n    selector: \"charts-test-harness\",\n    templateUrl: \"./charts-test-harness.component.html\",\n    host: { class: \"charts-test-harness\" },\n})\nexport class ChartsTestHarnessComponent implements OnDestroy {\n    public originalWithRefreshRoute: boolean;\n\n    constructor(public themeSwitcher: ThemeSwitchService) {\n        // disable route refreshing because the theme service currently always reverts to\n        // the light theme on route refresh unless route.data.showThemeSwitcher is 'true'\n        this.originalWithRefreshRoute = this.themeSwitcher.withRefreshRoute;\n        this.themeSwitcher.withRefreshRoute = false;\n    }\n\n    public ngOnDestroy() {\n        this.themeSwitcher.withRefreshRoute = this.originalWithRefreshRoute;\n    }\n}\n","import { IAccessors, IDataSeries } from \"@nova-ui/charts\";\nimport moment, { Moment } from \"moment/moment\";\n\nexport interface IDateValue {\n    x: Date;\n    y: number;\n}\n\nexport class DataGenerator {\n    public static generateMockStatusSeriesSet(seriesCount: number, pointCountPerSeries: number, statuses: string[]) {\n        const dataSet = [];\n        for (let i = 0; i < seriesCount; i++) {\n            dataSet.push({\n                id: `series-${i + 1}`,\n                name: `Series ${i + 1}`,\n                data: DataGenerator.mockStatusData(pointCountPerSeries, statuses),\n            });\n        }\n        return dataSet;\n    }\n\n    public static generateMockLineSeriesSet(seriesCount: number, pointCountPerSeries: number) {\n        const dataSet = [];\n        for (let i = 0; i < seriesCount; i++) {\n            dataSet.push({\n                id: `series-${i + 1}`,\n                name: `Series ${i + 1}`,\n                data: DataGenerator.mockLineData(pointCountPerSeries),\n            });\n        }\n        return dataSet;\n    }\n\n    public static generateMockTimeLineSeriesSet(seriesCount: number,\n                                                pointCountPerSeries: number,\n                                                startTime?: string,\n                                                endTime?: string) {\n        const dataSet = [];\n        for (let i = 0; i < seriesCount; i++) {\n            dataSet.push({\n                id: `series-${i + 1}`,\n                name: `Series ${i + 1}`,\n                data: DataGenerator.mockTimeLineData(pointCountPerSeries, startTime, endTime),\n            });\n        }\n        return dataSet;\n    }\n\n    /**\n     * With default seriesCount=1 it will generate groupNames.length series with one data point\n     * @param {string[]} groupNames\n     * @param {number} seriesCount\n     * @returns {IDataSeries[]}\n     */\n    public static generateMockOrdinalSeriesSet(groupNames: string[],\n        seriesCount: number = 1): IDataSeries<IAccessors>[] {\n        return groupNames.map((el, index) => ({\n            id: `series-${index + 1}`,\n            name: el,\n            // for ordinal scale it is useful to identify each data point here somehow\n            data: Array.apply(null, Array(seriesCount)).map((_: any, i: any) => ({\n                value: Math.floor(Math.random() * 100),\n                description: `Category ${i + 1}`,\n            })),\n            accessors: {\n                data: {\n                    category: (d: any) => d.description,\n                    value: (d: any) => d.value,\n                },\n            },\n        }));\n    }\n\n    public static mockTimeLineData = (\n        pointCount = 40,\n        startDatetime = \"2017-02-15T15:14:29.909Z\",\n        endDatetime = \"2017-02-15T16:14:29.909Z\"\n    ): IDateValue[] => {\n        const start = moment(startDatetime);\n        const end = moment(endDatetime);\n        const step = end.diff(start) / pointCount;\n        let prev: any;\n        const generateValue = () => Math.random() * 100 + 50;\n        const maxThreshold = 10;\n\n        return DataGenerator.range(0, pointCount).map((index: any) => {\n            let next = generateValue();\n            if (prev) {\n                while (Math.abs(next - prev) > maxThreshold) {\n                    next = generateValue();\n                }\n            }\n            prev = next;\n            return {\n                x: start.clone().add(step * index, \"ms\").toDate(),\n                y: next,\n            };\n        });\n    }\n\n    public static mockLineData = (\n        pointCount = 40,\n        startData = 0,\n        endData = 400\n    ) => {\n        const step = (endData - startData) / pointCount;\n        let prev: any;\n        const generateValue = () => Math.random() * 100 + 50;\n        const maxThreshold = 10;\n\n        return DataGenerator.range(0, pointCount).map((index: any) => {\n            let next = generateValue();\n            if (prev) {\n                while (Math.abs(next - prev) > maxThreshold) {\n                    next = generateValue();\n                }\n            }\n            prev = next;\n            return {\n                x: startData + (step * index),\n                y: next,\n            };\n        });\n    }\n\n    public static mockStatusData = (pointCount = 40, statuses: string[]) => {\n        const generateValue = () => statuses[Math.floor(Math.random() * statuses.length)];\n        return DataGenerator.range(0, pointCount).map((index: any) =>\n            ({\n                x: index,\n                y: generateValue(),\n            }));\n    }\n\n    public static buildTimeSeriesFromData(from: Moment, to: Moment, data: number[]): { x: Moment, y: number }[] {\n        const count = data.length;\n        if (!from || !to || count === 0) { return []; }\n\n        const interval = count > 1 ? to.diff(from) / (count - 1) : 0;\n        return data.map((y, i) => ({\n            x: from.clone().add(moment.duration(i * interval)),\n            y,\n        }));\n    }\n\n    private static range(start: number, end: number) {\n        return (new Array(end - start + 1)).fill(undefined).map((_, i) => i + start);\n    }\n}\n","import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\n\nimport { ChartsTestHarnessComponent } from \"./charts-test-harness.component\";\n\n@NgModule({\n    declarations: [\n        ChartsTestHarnessComponent,\n    ],\n    imports: [\n        FormsModule,\n        CommonModule,\n    ],\n    exports: [\n        ChartsTestHarnessComponent,\n        CommonModule,\n    ],\n})\nexport class DemoCommonModule { }\n","export default \"<ng-content></ng-content>\\n<div class=\\\"ml-3 mt-4\\\">\\n    <div class=\\\"d-flex align-items-center\\\">\\n        <input class=\\\"mb-2\\\"\\n               type=\\\"checkbox\\\"\\n               id=\\\"dark-theme\\\"\\n               [ngModel]=\\\"themeSwitcher.isDarkModeEnabledSubject | async\\\"\\n               (ngModelChange)=\\\"themeSwitcher.setDarkTheme($event)\\\"/>\\n        <label class=\\\"px-3\\\" for=\\\"dark-theme\\\">Dark Theme</label>\\n    </div>\\n</div>\\n\";"]}